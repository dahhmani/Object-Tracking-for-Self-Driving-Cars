<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacetesting_1_1internal" kind="namespace" language="C++">
    <compoundname>testing::internal</compoundname>
    <innerclass refid="classtesting_1_1internal_1_1_action_adaptor" prot="public">testing::internal::ActionAdaptor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_action_helper" prot="public">testing::internal::ActionHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_action_result_holder" prot="public">testing::internal::ActionResultHolder</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_action_result_holder_3_01void_01_4" prot="public">testing::internal::ActionResultHolder&lt; void &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_add_reference" prot="public">testing::internal::AddReference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_add_reference_3_01_t_01_6_01_4" prot="public">testing::internal::AddReference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result1" prot="public">testing::internal::AllOfResult1</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result10" prot="public">testing::internal::AllOfResult10</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result2" prot="public">testing::internal::AllOfResult2</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result3" prot="public">testing::internal::AllOfResult3</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result4" prot="public">testing::internal::AllOfResult4</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result5" prot="public">testing::internal::AllOfResult5</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result6" prot="public">testing::internal::AllOfResult6</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result7" prot="public">testing::internal::AllOfResult7</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result8" prot="public">testing::internal::AllOfResult8</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_all_of_result9" prot="public">testing::internal::AllOfResult9</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_eq" prot="public">testing::internal::AnyEq</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_ge" prot="public">testing::internal::AnyGe</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_gt" prot="public">testing::internal::AnyGt</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_le" prot="public">testing::internal::AnyLe</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_lt" prot="public">testing::internal::AnyLt</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_any_matcher_impl" prot="public">testing::internal::AnyMatcherImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_ne" prot="public">testing::internal::AnyNe</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result1" prot="public">testing::internal::AnyOfResult1</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result10" prot="public">testing::internal::AnyOfResult10</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result2" prot="public">testing::internal::AnyOfResult2</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result3" prot="public">testing::internal::AnyOfResult3</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result4" prot="public">testing::internal::AnyOfResult4</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result5" prot="public">testing::internal::AnyOfResult5</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result6" prot="public">testing::internal::AnyOfResult6</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result7" prot="public">testing::internal::AnyOfResult7</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result8" prot="public">testing::internal::AnyOfResult8</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_any_of_result9" prot="public">testing::internal::AnyOfResult9</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_anything_matcher" prot="public">testing::internal::AnythingMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_args_matcher" prot="public">testing::internal::ArgsMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_args_matcher_impl" prot="public">testing::internal::ArgsMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_assert_helper" prot="public">testing::internal::AssertHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_assign_action" prot="public">testing::internal::AssignAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_base" prot="public">testing::internal::Base</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_begin_end_distance_is_matcher" prot="public">testing::internal::BeginEndDistanceIsMatcher</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1bool__constant" prot="public">testing::internal::bool_constant</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_boolean_constant" prot="public">testing::internal::BooleanConstant</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_both_of_matcher" prot="public">testing::internal::BothOfMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_both_of_matcher_impl" prot="public">testing::internal::BothOfMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_bound_second_matcher" prot="public">testing::internal::BoundSecondMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value" prot="public">testing::internal::BuiltInDefaultValue</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value_3_01const_01_t_01_4" prot="public">testing::internal::BuiltInDefaultValue&lt; const T &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value_3_01_t_01_5_01_4" prot="public">testing::internal::BuiltInDefaultValue&lt; T * &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_built_in_default_value_getter" prot="public">testing::internal::BuiltInDefaultValueGetter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_built_in_default_value_getter_3_01_t_00_01false_01_4" prot="public">testing::internal::BuiltInDefaultValueGetter&lt; T, false &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_by_move_wrapper" prot="public">testing::internal::ByMoveWrapper</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_callable_traits" prot="public">testing::internal::CallableTraits</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_callable_traits_3_01_res_type_07_5_08_07_arg_type_08_4" prot="public">testing::internal::CallableTraits&lt; ResType(*)(ArgType)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_castable" prot="public">testing::internal::Castable</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_cast_and_append_transform" prot="public">testing::internal::CastAndAppendTransform</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_code_location" prot="public">testing::internal::CodeLocation</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_comparison_base" prot="public">testing::internal::ComparisonBase</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_compile_assert" prot="public">testing::internal::CompileAssert</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_compile_assert_types_equal" prot="public">testing::internal::CompileAssertTypesEqual</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_compile_assert_types_equal_3_01_t_00_01_t_01_4" prot="public">testing::internal::CompileAssertTypesEqual&lt; T, T &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_const_and_non_const_castable" prot="public">testing::internal::ConstAndNonConstCastable</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_const_castable" prot="public">testing::internal::ConstCastable</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_const_char_ptr" prot="public">testing::internal::ConstCharPtr</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_container_eq_matcher" prot="public">testing::internal::ContainerEqMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_contains_matcher" prot="public">testing::internal::ContainsMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_contains_matcher_impl" prot="public">testing::internal::ContainsMatcherImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_decay_array" prot="public">testing::internal::DecayArray</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_decay_array_3_01_t[]_4" prot="public">testing::internal::DecayArray&lt; T[]&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_decay_array_3_01_t[_n]_4" prot="public">testing::internal::DecayArray&lt; T[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_default_global_test_part_result_reporter" prot="public">testing::internal::DefaultGlobalTestPartResultReporter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter" prot="public">testing::internal::DefaultPerThreadTestPartResultReporter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_derived" prot="public">testing::internal::Derived</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_both_action" prot="public">testing::internal::DoBothAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_default_action" prot="public">testing::internal::DoDefaultAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_dummy_match_result_listener" prot="public">testing::internal::DummyMatchResultListener</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_each_matcher" prot="public">testing::internal::EachMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_each_matcher_impl" prot="public">testing::internal::EachMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_either_of_matcher" prot="public">testing::internal::EitherOfMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_either_of_matcher_impl" prot="public">testing::internal::EitherOfMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_elements_are_array_matcher" prot="public">testing::internal::ElementsAreArrayMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_elements_are_matcher" prot="public">testing::internal::ElementsAreMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_elements_are_matcher_impl" prot="public">testing::internal::ElementsAreMatcherImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_enable_if" prot="public">testing::internal::EnableIf</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_enable_if_3_01true_01_4" prot="public">testing::internal::EnableIf&lt; true &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ends_with_matcher" prot="public">testing::internal::EndsWithMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_environment_invocation_catcher" prot="public">testing::internal::EnvironmentInvocationCatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_eq2_matcher" prot="public">testing::internal::Eq2Matcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_eq_helper" prot="public">testing::internal::EqHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_eq_helper_3_01true_01_4" prot="public">testing::internal::EqHelper&lt; true &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_eq_matcher" prot="public">testing::internal::EqMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_event_recording_listener" prot="public">testing::internal::EventRecordingListener</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_excessive_arg" prot="public">testing::internal::ExcessiveArg</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_expectation_base" prot="public">testing::internal::ExpectationBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_expectation_tester" prot="public">testing::internal::ExpectationTester</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_field_matcher" prot="public">testing::internal::FieldMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_file_path" prot="public">testing::internal::FilePath</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_final_success_checker" prot="public">testing::internal::FinalSuccessChecker</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_floating_eq_matcher" prot="public">testing::internal::FloatingEqMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_floating_point" prot="public">testing::internal::FloatingPoint</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_format_for_comparison" prot="public">testing::internal::FormatForComparison</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_format_for_comparison_3_01_to_print[_n]_00_01_other_operand_01_4" prot="public">testing::internal::FormatForComparison&lt; ToPrint[N], OtherOperand &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function" prot="public">testing::internal::Function</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_08_4" prot="public">testing::internal::Function&lt; R()&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_08_4" prot="public">testing::internal::Function&lt; R(A1)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_08_4" prot="public">testing::internal::Function&lt; R(A1, A2)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_08_4" prot="public">testing::internal::Function&lt; R(A1, A2, A3)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_08_4" prot="public">testing::internal::Function&lt; R(A1, A2, A3, A4)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_08_4" prot="public">testing::internal::Function&lt; R(A1, A2, A3, A4, A5)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_08_4" prot="public">testing::internal::Function&lt; R(A1, A2, A3, A4, A5, A6)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_08_4" prot="public">testing::internal::Function&lt; R(A1, A2, A3, A4, A5, A6, A7)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_00_01_a8_08_4" prot="public">testing::internal::Function&lt; R(A1, A2, A3, A4, A5, A6, A7, A8)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6dfab3ccde80824a59fc4efd5336a27c1" prot="public">testing::internal::Function&lt; R(A1, A2, A3, A4, A5, A6, A7, A8, A9)&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6f6ff91550f0557b7708e490e5002cd35" prot="public">testing::internal::Function&lt; R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker" prot="public">testing::internal::FunctionMocker</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_08_4" prot="public">testing::internal::FunctionMocker&lt; R()&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4, A5)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4, A5, A6)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4, A5, A6, A7)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_00_01_a8_08_4" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4, A5, A6, A7, A8)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00d00d8722bf1ad86ca8049508f133d393" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4, A5, A6, A7, A8, A9)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_0038b5baf41d3183579372e0e15a9db969" prot="public">testing::internal::FunctionMocker&lt; R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_base" prot="public">testing::internal::FunctionMockerBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ge2_matcher" prot="public">testing::internal::Ge2Matcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ge_matcher" prot="public">testing::internal::GeMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_google_test_failure_reporter" prot="public">testing::internal::GoogleTestFailureReporter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_gt2_matcher" prot="public">testing::internal::Gt2Matcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_flag_saver" prot="public">testing::internal::GTestFlagSaver</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_log" prot="public">testing::internal::GTestLog</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_g_test_mutex_lock" prot="public">testing::internal::GTestMutexLock</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_gt_matcher" prot="public">testing::internal::GtMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_has_new_fatal_failure_helper" prot="public">testing::internal::HasNewFatalFailureHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_has_substr_matcher" prot="public">testing::internal::HasSubstrMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ignored_value" prot="public">testing::internal::IgnoredValue</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ignore_result_action" prot="public">testing::internal::IgnoreResultAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_implicitly_convertible" prot="public">testing::internal::ImplicitlyConvertible</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_action" prot="public">testing::internal::InvokeAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper" prot="public">testing::internal::InvokeHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_01_4_01_4" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_01_4_01_4" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_01_4_01_4" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_00_01_a4_01_4_01_4" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3, A4 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_5dd6c0827e45a39a81d93a14211e2a19" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3, A4, A5 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_5653fefa261cff106ebaaf9c78f6ee42" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3, A4, A5, A6 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_9169216bddd5005837acd145af38ec6f" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_c90976166c933075c49792215d8203bb" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7, A8 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_cb3e0694d0722fcc616ae618dc383e5b" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7, A8, A9 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_d7025e877e4f690a17d0a7f1e26fac53" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_helper_3_01_r_00_01_1_1testing_1_1tuple_3_4_01_4" prot="public">testing::internal::InvokeHelper&lt; R, ::testing::tuple&lt;&gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_method_action" prot="public">testing::internal::InvokeMethodAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" prot="public">testing::internal::InvokeMethodWithoutArgsAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_without_args_action" prot="public">testing::internal::InvokeWithoutArgsAction</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__pointer" prot="public">testing::internal::is_pointer</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__pointer_3_01_t_01_5_01_4" prot="public">testing::internal::is_pointer&lt; T * &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__reference" prot="public">testing::internal::is_reference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__reference_3_01_t_01_6_01_4" prot="public">testing::internal::is_reference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_is_a_protocol_message" prot="public">testing::internal::IsAProtocolMessage</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_is_null_matcher" prot="public">testing::internal::IsNullMatcher</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_iterator_traits" prot="public">testing::internal::IteratorTraits</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_iterator_traits_3_01const_01_t_01_5_01_4" prot="public">testing::internal::IteratorTraits&lt; const T * &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_iterator_traits_3_01_t_01_5_01_4" prot="public">testing::internal::IteratorTraits&lt; T * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_key_matcher" prot="public">testing::internal::KeyMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_key_matcher_impl" prot="public">testing::internal::KeyMatcherImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_kind_of" prot="public">testing::internal::KindOf</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_le2_matcher" prot="public">testing::internal::Le2Matcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_le_matcher" prot="public">testing::internal::LeMatcher</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_less_by_name" prot="public">testing::internal::LessByName</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_less_comparator" prot="public">testing::internal::LessComparator</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1linked__ptr" prot="public">testing::internal::linked_ptr</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1linked__ptr__internal" prot="public">testing::internal::linked_ptr_internal</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_linked_ptr_less_than" prot="public">testing::internal::LinkedPtrLessThan</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_listener_test" prot="public">testing::internal::ListenerTest</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" prot="public">testing::internal::LosslessArithmeticConvertibleImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_bool_00_01bool_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kBool, bool, kBool, bool &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_floating_point_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kBool, bool, kFloatingPoint, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_integer_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kBool, bool, kInteger, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_from_00_01k_bool_00_01bool_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kFloatingPoint, From, kBool, bool &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_from_00_01k_integer_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kFloatingPoint, From, kInteger, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_bool_00_01bool_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kInteger, From, kBool, bool &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_floating_point_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kInteger, From, kFloatingPoint, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_integer_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kInteger, From, kInteger, To &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_lt2_matcher" prot="public">testing::internal::Lt2Matcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_lt_matcher" prot="public">testing::internal::LtMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_matcher_as_predicate" prot="public">testing::internal::MatcherAsPredicate</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_matcher_base" prot="public">testing::internal::MatcherBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_matcher_cast_impl" prot="public">testing::internal::MatcherCastImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_matcher_cast_impl_3_01_t_00_01_matcher_3_01_t_01_4_01_4" prot="public">testing::internal::MatcherCastImpl&lt; T, Matcher&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_matcher_cast_impl_3_01_t_00_01_matcher_3_01_u_01_4_01_4" prot="public">testing::internal::MatcherCastImpl&lt; T, Matcher&lt; U &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple" prot="public">testing::internal::MatcherTuple</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_01_4_01_4" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_01_4_01_4" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_01_4_01_4" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_00_01_a4_01_4_01_4" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3, A4 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_01_4_01_4" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3, A4, A5 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_0fb935efcf1b84fbc4f177777ca3392dc" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3, A4, A5, A6 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_0064798126035aa0d3ca935c3449bf0c1" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_0d8930d50f28e62c202d0bf6b34d01eac" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7, A8 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_05ce0d9708ffc0cc1f9fec180f9f8202e" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7, A8, A9 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_01_a1_00_01_a2_00_01_a3_0842d32b3c1d00aa4e42fe38fbc4fa689" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt; A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_matcher_tuple_3_01_1_1testing_1_1tuple_3_4_01_4" prot="public">testing::internal::MatcherTuple&lt; ::testing::tuple&lt;&gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_matches_regex_matcher" prot="public">testing::internal::MatchesRegexMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_match_matrix" prot="public">testing::internal::MatchMatrix</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_max_bipartite_match_state" prot="public">testing::internal::MaxBipartiteMatchState</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_mock_spec" prot="public">testing::internal::MockSpec</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_mutex" prot="public">testing::internal::Mutex</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_native_array" prot="public">testing::internal::NativeArray</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ne2_matcher" prot="public">testing::internal::Ne2Matcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ne_matcher" prot="public">testing::internal::NeMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_no_default_contructor" prot="public">testing::internal::NoDefaultContructor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_not_matcher" prot="public">testing::internal::NotMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_not_matcher_impl" prot="public">testing::internal::NotMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_not_null_matcher" prot="public">testing::internal::NotNullMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_on_call_spec" prot="public">testing::internal::OnCallSpec</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_os_stack_trace_getter" prot="public">testing::internal::OsStackTraceGetter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_os_stack_trace_getter_interface" prot="public">testing::internal::OsStackTraceGetterInterface</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pair_match_base" prot="public">testing::internal::PairMatchBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pair_matcher" prot="public">testing::internal::PairMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pair_matcher_impl" prot="public">testing::internal::PairMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pointee_matcher" prot="public">testing::internal::PointeeMatcher</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_pointee_of" prot="public">testing::internal::PointeeOf</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_pointee_of_3_01_t_01_5_01_4" prot="public">testing::internal::PointeeOf&lt; T * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pointwise_matcher" prot="public">testing::internal::PointwiseMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_predicate_formatter_from_matcher" prot="public">testing::internal::PredicateFormatterFromMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_pretty_unit_test_result_printer" prot="public">testing::internal::PrettyUnitTestResultPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_property_matcher" prot="public">testing::internal::PropertyMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_quantifier_matcher_impl" prot="public">testing::internal::QuantifierMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_random" prot="public">testing::internal::Random</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_r_e" prot="public">testing::internal::RE</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" prot="public">testing::internal::ReferenceOrValueWrapper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_reference_or_value_wrapper_3_01_t_01_6_01_4" prot="public">testing::internal::ReferenceOrValueWrapper&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_reference_wrapper" prot="public">testing::internal::ReferenceWrapper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ref_matcher" prot="public">testing::internal::RefMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ref_matcher_3_01_t_01_6_01_4" prot="public">testing::internal::RefMatcher&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_relation_to_source_copy" prot="public">testing::internal::RelationToSourceCopy</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_relation_to_source_reference" prot="public">testing::internal::RelationToSourceReference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1remove__reference" prot="public">testing::internal::remove_reference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1remove__reference_3_01_t_01_6_01_4" prot="public">testing::internal::remove_reference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const" prot="public">testing::internal::RemoveConst</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_3_01const_01_t_01_4" prot="public">testing::internal::RemoveConst&lt; const T &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_3_01const_01_t[_n]_4" prot="public">testing::internal::RemoveConst&lt; const T[N]&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_from_key" prot="public">testing::internal::RemoveConstFromKey</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_from_key_3_01std_1_1pair_3_01const_01_k_00_01_v_01_4_01_4" prot="public">testing::internal::RemoveConstFromKey&lt; std::pair&lt; const K, V &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_reference" prot="public">testing::internal::RemoveReference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_reference_3_01_t_01_6_01_4" prot="public">testing::internal::RemoveReference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_result_of_matcher" prot="public">testing::internal::ResultOfMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_action" prot="public">testing::internal::ReturnAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_null_action" prot="public">testing::internal::ReturnNullAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_action" prot="public">testing::internal::ReturnRefAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" prot="public">testing::internal::ReturnRefOfCopyAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_void_action" prot="public">testing::internal::ReturnVoidAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1scoped__ptr" prot="public">testing::internal::scoped_ptr</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_scoped_premature_exit_file" prot="public">testing::internal::ScopedPrematureExitFile</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_scoped_trace" prot="public">testing::internal::ScopedTrace</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args" prot="public">testing::internal::SelectArgs</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01-1_00_01-1_00_01-99299a766a33bd3110e39f51f43b194a" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01-1_00_01-33116bd77067572e384b90e7c70b03c4" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, -1, -1, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01-03e4fb75e6504ae34fdb48d64bb6de95" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, -1, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01k43121451b69bc30ee1dad887e67d8807" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, k3, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01k7cadbb88f40ff7408f8c070bb61c70db" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, k3, k4, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01k6061407a5fa2cad2c495e8e16ee67874" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, k3, k4, k5, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01k203aa538560773abfacd746d313c06ae" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01kf4b89906ed32c76471b80b75f77e1355" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01ke29a32f440a8fcb098d8685a265f9f40" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_select_args_3_01_result_00_01_argument_tuple_00_01k1_00_01k2_00_01k6840fe77dccd76bc2d4e4ee1c75cd6f1" prot="public">testing::internal::SelectArgs&lt; Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_set_argument_pointee_action" prot="public">testing::internal::SetArgumentPointeeAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_set_argument_pointee_action_3_01_n_00_01_proto_00_01true_01_4" prot="public">testing::internal::SetArgumentPointeeAction&lt; N, Proto, true &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_set_errno_and_return_action" prot="public">testing::internal::SetErrnoAndReturnAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_single_failure_checker" prot="public">testing::internal::SingleFailureChecker</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_size_is_matcher" prot="public">testing::internal::SizeIsMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_starts_with_matcher" prot="public">testing::internal::StartsWithMatcher</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_static_assert_type_eq_helper" prot="public">testing::internal::StaticAssertTypeEqHelper</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_static_assert_type_eq_helper_3_01_t_00_01_t_01_4" prot="public">testing::internal::StaticAssertTypeEqHelper&lt; T, T &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view" prot="public">testing::internal::StlContainerView</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view_3_01_1_1testing_1_1tuple_3_01_element_pointer_00_01_size_01_4_01_4" prot="public">testing::internal::StlContainerView&lt; ::testing::tuple&lt; ElementPointer, Size &gt; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view_3_01_element[_n]_4" prot="public">testing::internal::StlContainerView&lt; Element[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stream_match_result_listener" prot="public">testing::internal::StreamMatchResultListener</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_str_equality_matcher" prot="public">testing::internal::StrEqualityMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_string" prot="public">testing::internal::String</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_case_name_is" prot="public">testing::internal::TestCaseNameIs</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_event_listeners_accessor" prot="public">testing::internal::TestEventListenersAccessor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_event_repeater" prot="public">testing::internal::TestEventRepeater</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_factory_base" prot="public">testing::internal::TestFactoryBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_factory_impl" prot="public">testing::internal::TestFactoryImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_property_key_is" prot="public">testing::internal::TestPropertyKeyIs</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_test_result_accessor" prot="public">testing::internal::TestResultAccessor</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_thread_local" prot="public">testing::internal::ThreadLocal</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_to" prot="public">testing::internal::To</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_trace_info" prot="public">testing::internal::TraceInfo</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_transform_tuple_values_helper" prot="public">testing::internal::TransformTupleValuesHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_truly_matcher" prot="public">testing::internal::TrulyMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields" prot="public">testing::internal::TupleFields</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01-1_00_01-1_00_01-1_00_01-1_00_01-1_00_c541d4fe72f9dece2f1a50ee33bb16df" prot="public">testing::internal::TupleFields&lt; Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01-1_00_01-1_00_01-1_00_01-1_00_079b3e59a7bb10f5d0d7a5843be2be9d" prot="public">testing::internal::TupleFields&lt; Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01-1_00_01-1_00_01-1_00_bfbbbfc9cc03949b0b1ff3620709d8ff" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01k2_00_01-1_00_01-1_00_897bcaf4b51057696318fe39b8a2dc88" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01k2_00_01k3_00_01-1_00_d404aa1c50b4758daf5bb2f78d0fb44c" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01k2_00_01k3_00_01k4_00_24d73e0cd5fb480b4f69b3d189a737e1" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01k2_00_01k3_00_01k4_00_fc3c297a037e5312ea5ea32562e3997e" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01k2_00_01k3_00_01k4_00_15a5f7560bc4eac1ca3e5cac752bf68d" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01k2_00_01k3_00_01k4_00_cda35487ca7d3bd5a9557919642ae14b" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_fields_3_01_tuple_00_01k0_00_01k1_00_01k2_00_01k3_00_01k4_00_9c7cea784cec512ef84e111fc1d12260" prot="public">testing::internal::TupleFields&lt; Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1 &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_tuple_policy" prot="public">testing::internal::TuplePolicy</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_prefix" prot="public">testing::internal::TuplePrefix</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_tuple_prefix_3_010_01_4" prot="public">testing::internal::TuplePrefix&lt; 0 &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1type__equals" prot="public">testing::internal::type_equals</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1type__equals_3_01_t_00_01_t_01_4" prot="public">testing::internal::type_equals&lt; T, T &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_typed_expectation" prot="public">testing::internal::TypedExpectation</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_id_helper" prot="public">testing::internal::TypeIdHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_with_size" prot="public">testing::internal::TypeWithSize</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_with_size_3_014_01_4" prot="public">testing::internal::TypeWithSize&lt; 4 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_type_with_size_3_018_01_4" prot="public">testing::internal::TypeWithSize&lt; 8 &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_helper" prot="public">testing::internal::UnitTestHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_impl" prot="public">testing::internal::UnitTestImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_options" prot="public">testing::internal::UnitTestOptions</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unit_test_record_property_test_helper" prot="public">testing::internal::UnitTestRecordPropertyTestHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer" prot="public">testing::internal::UniversalPrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer_3_01_t_01_6_01_4" prot="public">testing::internal::UniversalPrinter&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_printer_3_01_t[_n]_4" prot="public">testing::internal::UniversalPrinter&lt; T[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer" prot="public">testing::internal::UniversalTersePrinter</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01char_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; char * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01const_01char_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; const char * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01_t_01_6_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01_t[_n]_4" prot="public">testing::internal::UniversalTersePrinter&lt; T[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_universal_terse_printer_3_01wchar__t_01_5_01_4" prot="public">testing::internal::UniversalTersePrinter&lt; wchar_t * &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unordered_elements_are_array_matcher" prot="public">testing::internal::UnorderedElementsAreArrayMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" prot="public">testing::internal::UnorderedElementsAreMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher_impl" prot="public">testing::internal::UnorderedElementsAreMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher_impl_base" prot="public">testing::internal::UnorderedElementsAreMatcherImplBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" prot="public">testing::internal::UntypedActionResultHolderBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" prot="public">testing::internal::UntypedFunctionMockerBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" prot="public">testing::internal::UntypedOnCallSpecBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher" prot="public">testing::internal::WhenDynamicCastToMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher_3_01_to_01_6_01_4" prot="public">testing::internal::WhenDynamicCastToMatcher&lt; To &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher_base" prot="public">testing::internal::WhenDynamicCastToMatcherBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_when_sorted_by_matcher" prot="public">testing::internal::WhenSortedByMatcher</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_with_args_action" prot="public">testing::internal::WithArgsAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_xml_unit_test_result_printer" prot="public">testing::internal::XmlUnitTestResultPrinter</innerclass>
    <innernamespace refid="namespacetesting_1_1internal_1_1edit__distance">testing::internal::edit_distance</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal_1_1invoke__argument">testing::internal::invoke_argument</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal_1_1posix">testing::internal::posix</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="gmock-spec-builders_8h_1adfcd859062983a889f4bd18e6977357e" prot="public" static="no">
        <name>CallReaction</name>
        <enumvalue id="gmock-spec-builders_8h_1adfcd859062983a889f4bd18e6977357ea8fb8a836a31364701cd5c07daa8638cb" prot="public">
          <name>kAllow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-spec-builders_8h_1adfcd859062983a889f4bd18e6977357ead61a9c681c751967e19f7abe4640d4a2" prot="public">
          <name>kWarn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-spec-builders_8h_1adfcd859062983a889f4bd18e6977357ea6fc25174a501f31b090a2b556f77fdc1" prot="public">
          <name>kFail</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-spec-builders_8h_1adfcd859062983a889f4bd18e6977357ea8ff660434ddb710d1d588df98ee902fc" prot="public">
          <name>kDefault</name>
          <initializer>= kWarn</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="361" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="361" bodyend="366"/>
      </memberdef>
      <memberdef kind="enum" id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686" prot="public" static="no">
        <name>TypeKind</name>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686a3af2191917fb1796599139b3615302fe" prot="public">
          <name>kBool</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686a8a52f0fd73e05da35c45d80653633cab" prot="public">
          <name>kInteger</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686acdce59b8c136926ace18aa9c2995878d" prot="public">
          <name>kFloatingPoint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1aa8747bda20137c9aa7f846dee830e686ad47f29150ab7a9ec8ce2491f44537347" prot="public">
          <name>kOther</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="126" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="enum" id="gmock-internal-utils_8h_1a203d1a8a2147a53d12bbdae40d443914" prot="public" static="no">
        <name>LogSeverity</name>
        <enumvalue id="gmock-internal-utils_8h_1a203d1a8a2147a53d12bbdae40d443914a396aacfaee2849eaab7c1de9773d624d" prot="public">
          <name>kInfo</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gmock-internal-utils_8h_1a203d1a8a2147a53d12bbdae40d443914a5beeeab1b0a3caabd0afb43356c1a271" prot="public">
          <name>kWarning</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="306" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="enum" id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977" prot="public" static="no">
        <name>GTestLogSeverity</name>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977aff315e0913fcda86fe4de882bf5e33e9" prot="public">
          <name>GTEST_INFO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977a7a051bc2794f15a4bf0eab40562a304c" prot="public">
          <name>GTEST_WARNING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977a651e9cd2a904e0c8210536271b875f75" prot="public">
          <name>GTEST_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-port_8h_1aa6255ef3b023c5b4e1a2198d887fb977a75063567740f6bf7da419b1b9197b12e" prot="public">
          <name>GTEST_FATAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1250" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1250" bodyend="1255"/>
      </memberdef>
      <memberdef kind="enum" id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793" prot="public" static="no">
        <name>CharFormat</name>
        <enumvalue id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793af7038866be92e9978360b831e376ffaa" prot="public">
          <name>kAsIs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793aebfa5293302338a8e8678744c103f113" prot="public">
          <name>kHexEscape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest-printers_8cc_1ae2ef98247c76a50cdc80ceb4a6c81793ae1211108e9f35f891d9951da64794d03" prot="public">
          <name>kSpecialEscape</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="128" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="enum" id="gtest_8cc_1a648c1bc94c2ef9e868ff3f9dff0f9c4e" prot="public" static="no">
        <name>GTestColor</name>
        <enumvalue id="gtest_8cc_1a648c1bc94c2ef9e868ff3f9dff0f9c4eafcd8803dc9e37e374d5a4486afc230b7" prot="public">
          <name>COLOR_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest_8cc_1a648c1bc94c2ef9e868ff3f9dff0f9c4ea9ebb3ddab9391781f6ee5021e1e443c3" prot="public">
          <name>COLOR_RED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest_8cc_1a648c1bc94c2ef9e868ff3f9dff0f9c4ea3b1e81f5b14a17b35a8672d57d166507" prot="public">
          <name>COLOR_GREEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="gtest_8cc_1a648c1bc94c2ef9e868ff3f9dff0f9c4ea2cca441161aca75a208ff08d07f5b1a5" prot="public">
          <name>COLOR_YELLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2880" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2880" bodyend="2885"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gmock-matchers_8h_1a109863545f08651178bf0f520aebd33b" prot="public" static="no">
        <type>::std::pair&lt; size_t, size_t &gt;</type>
        <definition>typedef ::std::pair&lt;size_t, size_t&gt; testing::internal::ElementMatcherPair</definition>
        <argsstring></argsstring>
        <name>ElementMatcherPair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3297" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-matchers_8h_1a0038618710c01a71150887dc7cfb0a29" prot="public" static="no">
        <type>::std::vector&lt; ElementMatcherPair &gt;</type>
        <definition>typedef ::std::vector&lt;ElementMatcherPair&gt; testing::internal::ElementMatcherPairs</definition>
        <argsstring></argsstring>
        <name>ElementMatcherPairs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3298" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-printers_8h_1a7706b17f05f4b49e351b052ae4e05073" prot="public" static="no">
        <type>::std::vector&lt; string &gt;</type>
        <definition>typedef ::std::vector&lt;string&gt; testing::internal::Strings</definition>
        <argsstring></argsstring>
        <name>Strings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="859" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a02e1981f5ff70609e6ac06e006ff519a" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint</ref>&lt; float &gt;</type>
        <definition>typedef FloatingPoint&lt;float&gt; testing::internal::Float</definition>
        <argsstring></argsstring>
        <name>Float</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="420" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a66a7579b1893b260c31dad577f7a5c48" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_floating_point" kindref="compound">FloatingPoint</ref>&lt; double &gt;</type>
        <definition>typedef FloatingPoint&lt;double&gt; testing::internal::Double</definition>
        <argsstring></argsstring>
        <name>Double</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="421" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1ab1114197d3c657d8b7f8e0c5caa12d00" prot="public" static="no">
        <type>const void *</type>
        <definition>typedef const void* testing::internal::TypeId</definition>
        <argsstring></argsstring>
        <name>TypeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="429" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a30037044c0b57cdd647c7e2e97cb2cff" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* testing::internal::SetUpTestCaseFunc) ()</definition>
        <argsstring>)()</argsstring>
        <name>SetUpTestCaseFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="501" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1a085e31321d0d029c04d2a79234f60c1a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* testing::internal::TearDownTestCaseFunc) ()</definition>
        <argsstring>)()</argsstring>
        <name>TearDownTestCaseFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="502" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1ad8f0c2883245f1df2a53618a49f0deb3" prot="public" static="no">
        <type>int</type>
        <definition>typedef int testing::internal::IsContainer</definition>
        <argsstring></argsstring>
        <name>IsContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="930" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-internal_8h_1abf080521ce135deb510e0a7830fd3d33" prot="public" static="no">
        <type>char</type>
        <definition>typedef char testing::internal::IsNotContainer</definition>
        <argsstring></argsstring>
        <name>IsNotContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="938" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a8e8ff5b11e64078831112677156cb111" prot="public" static="no">
        <type>::std::string</type>
        <definition>typedef ::std::string testing::internal::string</definition>
        <argsstring></argsstring>
        <name>string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1103" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a3f543179329c353aee1d7b54a9a8e335" prot="public" static="no">
        <type>::std::wstring</type>
        <definition>typedef ::std::wstring testing::internal::wstring</definition>
        <argsstring></argsstring>
        <name>wstring</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1109" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a08b187c6cc4e28400aadf9a32fccc8de" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">GTestMutexLock</ref></type>
        <definition>typedef GTestMutexLock testing::internal::MutexLock</definition>
        <argsstring></argsstring>
        <name>MutexLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2165" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1abb1d0789f19bdde21affccbd1078b525" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">bool_constant</ref>&lt; false &gt;</type>
        <definition>typedef bool_constant&lt;false&gt; testing::internal::false_type</definition>
        <argsstring></argsstring>
        <name>false_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2215" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a62f917c3424d8841de9b49b5ec28edb4" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">bool_constant</ref>&lt; true &gt;</type>
        <definition>typedef bool_constant&lt;true&gt; testing::internal::true_type</definition>
        <argsstring></argsstring>
        <name>true_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2216" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a05c6bd9ede5ccdf25191a590d610dcc6" prot="public" static="no">
        <type>long long</type>
        <definition>typedef long long testing::internal::BiggestInt</definition>
        <argsstring></argsstring>
        <name>BiggestInt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2247" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a8ee38faaf875f133358abaf9bc056cec" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_type_with_size" kindref="compound">TypeWithSize</ref>&lt; 4 &gt;::Int</type>
        <definition>typedef TypeWithSize&lt;4&gt;::Int testing::internal::Int32</definition>
        <argsstring></argsstring>
        <name>Int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2500" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a40d4fffcd2bf56f18b1c380615aa85e3" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_type_with_size" kindref="compound">TypeWithSize</ref>&lt; 4 &gt;::UInt</type>
        <definition>typedef TypeWithSize&lt;4&gt;::UInt testing::internal::UInt32</definition>
        <argsstring></argsstring>
        <name>UInt32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2501" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a271c563fec38b804ddab0677f51f70a8" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_type_with_size" kindref="compound">TypeWithSize</ref>&lt; 8 &gt;::Int</type>
        <definition>typedef TypeWithSize&lt;8&gt;::Int testing::internal::Int64</definition>
        <argsstring></argsstring>
        <name>Int64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2502" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1aa6a1ac454e6d7e550fa4925c62c35caa" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_type_with_size" kindref="compound">TypeWithSize</ref>&lt; 8 &gt;::UInt</type>
        <definition>typedef TypeWithSize&lt;8&gt;::UInt testing::internal::UInt64</definition>
        <argsstring></argsstring>
        <name>UInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2503" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest-port_8h_1a66a845df404b38fe85c5e14a069f255a" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_type_with_size" kindref="compound">TypeWithSize</ref>&lt; 8 &gt;::Int</type>
        <definition>typedef TypeWithSize&lt;8&gt;::Int testing::internal::TimeInMillis</definition>
        <argsstring></argsstring>
        <name>TimeInMillis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2504" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2504" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-spec-builders_8h_1af4407fe8aeb1e43b2f58940736a20590" prot="public" static="no" mutable="no">
        <type>GTEST_API_ <ref refid="classtesting_1_1internal_1_1_thread_local" kindref="compound">ThreadLocal</ref>&lt; <ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref> * &gt;</type>
        <definition>GTEST_API_ ThreadLocal&lt; Sequence * &gt; testing::internal::g_gmock_implicit_sequence</definition>
        <argsstring></argsstring>
        <name>g_gmock_implicit_sequence</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="674" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-spec-builders.cc" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-internal-utils_8h_1a96274a788ffc75a6dffdfa8aa1f34fb9" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kInfoVerbosity[]</definition>
        <argsstring>[]</argsstring>
        <name>kInfoVerbosity</name>
        <initializer>= &quot;info&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="314" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-internal-utils_8h_1ad9386ccda6b6deac2f7b84784d3088c0" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kWarningVerbosity[]</definition>
        <argsstring>[]</argsstring>
        <name>kWarningVerbosity</name>
        <initializer>= &quot;warning&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="316" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-internal-utils_8h_1a3d730761274e7b80dd66e5014171fcb5" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kErrorVerbosity[]</definition>
        <argsstring>[]</argsstring>
        <name>kErrorVerbosity</name>
        <initializer>= &quot;error&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="318" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-death-test-internal_8h_1a008ebfe0c0347d65e5e06e4d310981b3" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kDeathTestStyleFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kDeathTestStyleFlag</name>
        <initializer>= &quot;death_test_style&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" line="50" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-death-test-internal_8h_1a32051e2574562b548be3e26a52eaa553" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kDeathTestUseFork[]</definition>
        <argsstring>[]</argsstring>
        <name>kDeathTestUseFork</name>
        <initializer>= &quot;death_test_use_fork&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" line="51" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-death-test-internal_8h_1a8572303d929880adf30db00952e1c45d" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kInternalRunDeathTestFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kInternalRunDeathTestFlag</name>
        <initializer>= &quot;internal_run_death_test&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" line="52" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal_8h_1abb38528ca6a45df265b19f5ccb3d16d9" prot="public" static="no" mutable="no">
        <type>GTEST_API_ const char</type>
        <definition>const char testing::internal::kStackTraceMarker</definition>
        <argsstring>[]</argsstring>
        <name>kStackTraceMarker</name>
        <initializer>= &quot;\nStack trace:\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="105" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal_8h_1a581ac897511489c75a06aa328dcfb62f" prot="public" static="no" mutable="no">
        <type>class GTEST_API_ <ref refid="classtesting_1_1internal_1_1_scoped_trace" kindref="compound">testing::internal::ScopedTrace</ref></type>
        <definition>class testing::internal::GTestFlagSaver testing::internal::GTEST_ATTRIBUTE_UNUSED_</definition>
        <argsstring></argsstring>
        <name>GTEST_ATTRIBUTE_UNUSED_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-port_8h_1ad901880198832bc166d2493096b451f7" prot="public" static="no" mutable="no">
        <type>const BiggestInt</type>
        <definition>const BiggestInt testing::internal::kMaxBiggestInt</definition>
        <argsstring></argsstring>
        <name>kMaxBiggestInt</name>
        <initializer>=
    ~(static_cast&lt;BiggestInt&gt;(1) &lt;&lt; (8*sizeof(BiggestInt) - 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2445" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-filepath_8cc_1afcd71adaa9d1e6df7b282a17fc48125c" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kPathSeparator</definition>
        <argsstring></argsstring>
        <name>kPathSeparator</name>
        <initializer>= &apos;/&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-filepath.cc" line="85" column="1" bodyfile="vendor/googletest/googletest/src/gtest-filepath.cc" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-filepath_8cc_1a23a8e9527d0e544e7df2d64ad549ce3e" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kCurrentDirectoryString[]</definition>
        <argsstring>[]</argsstring>
        <name>kCurrentDirectoryString</name>
        <initializer>= &quot;./&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-filepath.cc" line="86" column="1" bodyfile="vendor/googletest/googletest/src/gtest-filepath.cc" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1acac7993efabbd9dd62c1e9c7d143a72f" prot="public" static="no" mutable="no">
        <type>GTEST_API_ const TypeId</type>
        <definition>const TypeId testing::internal::kTestTypeIdInGoogleTest</definition>
        <argsstring></argsstring>
        <name>kTestTypeIdInGoogleTest</name>
        <initializer>= GetTestTypeId()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="86" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1ad5882ed0ceadc0f23090f0f08b5d495b" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kAlsoRunDisabledTestsFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kAlsoRunDisabledTestsFlag</name>
        <initializer>= &quot;also_run_disabled_tests&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="89" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a804c907155bfee3a6616ae3ca04048d0" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kBreakOnFailureFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kBreakOnFailureFlag</name>
        <initializer>= &quot;break_on_failure&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="90" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1af4bb309802e83df0927097e6e4201a38" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kCatchExceptionsFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kCatchExceptionsFlag</name>
        <initializer>= &quot;catch_exceptions&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="91" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a884ff13b75232fbe7daa0caf46f1de66" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kColorFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kColorFlag</name>
        <initializer>= &quot;color&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="92" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a8cb8ee7fe7659e6916a0108dffa2f7dc" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kFilterFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kFilterFlag</name>
        <initializer>= &quot;filter&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="93" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a1d3cfebffefbf35f7033d4941493a8ff" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kListTestsFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kListTestsFlag</name>
        <initializer>= &quot;list_tests&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="94" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1abd5368e00a31d175c6696cf76cbbde10" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kOutputFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kOutputFlag</name>
        <initializer>= &quot;output&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="95" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1aa6c13109bb4c78740ddb082b1ec0de56" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kPrintTimeFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kPrintTimeFlag</name>
        <initializer>= &quot;print_time&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="96" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a964ad71443cfda304b3208bf5d2daa75" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kRandomSeedFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kRandomSeedFlag</name>
        <initializer>= &quot;random_seed&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="97" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a764ee423d39ebb8e10c53ab9b685cd9b" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kRepeatFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kRepeatFlag</name>
        <initializer>= &quot;repeat&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="98" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1affd2c1118505cb97d8ff728c95fc722b" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kShuffleFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kShuffleFlag</name>
        <initializer>= &quot;shuffle&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="99" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1ad6f90e66d431ca3a9084408878c2cc77" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kStackTraceDepthFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kStackTraceDepthFlag</name>
        <initializer>= &quot;stack_trace_depth&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="100" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a84f8a2102d45c8b2b35be06d14ffefb8" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kStreamResultToFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kStreamResultToFlag</name>
        <initializer>= &quot;stream_result_to&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="101" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1ad9efcf363de3483afd91c7393a4fefb8" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kThrowOnFailureFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kThrowOnFailureFlag</name>
        <initializer>= &quot;throw_on_failure&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="102" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1aa1ffe15dea227d4dded912e43a8eed84" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kFlagfileFlag[]</definition>
        <argsstring>[]</argsstring>
        <name>kFlagfileFlag</name>
        <initializer>= &quot;flagfile&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="103" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a41bd421ace53d23dbe85d9618c3afaee" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kMaxRandomSeed</definition>
        <argsstring></argsstring>
        <name>kMaxRandomSeed</name>
        <initializer>= 99999</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="106" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-internal-inl_8h_1a93a772f5e51973b105d91cbb66a203f4" prot="public" static="no" mutable="no">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::g_help_flag</definition>
        <argsstring></argsstring>
        <name>g_help_flag</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="110" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-port_8cc_1a24f0a3d50cac54a9132f4828ec9b96d9" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kStdOutFileno</definition>
        <argsstring></argsstring>
        <name>kStdOutFileno</name>
        <initializer>= STDOUT_FILENO</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-port.cc" line="88" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-port_8cc_1a747eccfdbdee3ff8af3bedc476a57c85" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kStdErrFileno</definition>
        <argsstring></argsstring>
        <name>kStdErrFileno</name>
        <initializer>= STDERR_FILENO</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-port.cc" line="89" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-port_8cc_1abae7a5775c901f2fd12b058b00d09840" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kUnknownFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kUnknownFile</name>
        <initializer>= &quot;unknown file&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-port.cc" line="876" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ab7fe90df4f87f1bd8a244b0be2ccad79" prot="public" static="no" mutable="no">
        <type>::std::vector&lt; testing::internal::string &gt;</type>
        <definition>::std::vector&lt;testing::internal::string&gt; testing::internal::g_argvs</definition>
        <argsstring></argsstring>
        <name>g_argvs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="387" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a128515c8ed6c0fe98e498c8042da2060" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 testing::internal::kMaxCodePoint1</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint1</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt;  7) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1733" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ab8f4a5ed784352f00342cfeadc72337e" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 testing::internal::kMaxCodePoint2</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint2</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt; (5 + 6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1736" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1aa42bd507418e570402996e33582beed3" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 testing::internal::kMaxCodePoint3</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint3</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt; (4 + 2*6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1739" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1acd87c60be9b5fedb2d017503d8834474" prot="public" static="no" mutable="no">
        <type>const UInt32</type>
        <definition>const UInt32 testing::internal::kMaxCodePoint4</definition>
        <argsstring></argsstring>
        <name>kMaxCodePoint4</name>
        <initializer>= (static_cast&lt;UInt32&gt;(1) &lt;&lt; (3 + 3*6)) - 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1742" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ae6e5e31b85dac8586d4cc1ab1671f438" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kTypeParamLabel[]</definition>
        <argsstring>[]</argsstring>
        <name>kTypeParamLabel</name>
        <initializer>= &quot;TypeParam&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="3006" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="3006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ae57eee0bf5371ff8e9688fb4464bc62b" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kValueParamLabel[]</definition>
        <argsstring>[]</argsstring>
        <name>kValueParamLabel</name>
        <initializer>= &quot;GetParam()&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="3007" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="3007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a159395e649dd7728b09b25f70847f1ca" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::internal::kColorEncodedHelpMessage[]</definition>
        <argsstring>[]</argsstring>
        <name>kColorEncodedHelpMessage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5159" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-unittest-api__test_8cc_1a685ea5332074ae63b0ded2b184ac2271" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kTypedTestCases</definition>
        <argsstring></argsstring>
        <name>kTypedTestCases</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="107" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-unittest-api__test_8cc_1a53ee2d113744f9ba1d89469db4d7388b" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::internal::kTypedTests</definition>
        <argsstring></argsstring>
        <name>kTypedTests</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="108" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmock-actions_8h_1a8fe6f7c11d6d3dd6e42b75c9a5b43861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(void,)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a0a961f38f341d40237252babcb3767b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(::std::string, &quot;&quot;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>::std::string</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aa6670915f42119e4ba20d8cb74fc1eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(bool, false)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ab203e2c4c54f2ca86439344347a3e43f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned char, &apos;\0&apos;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>unsigned</type>
          <declname>char</declname>
        </param>
        <param>
          <type>&apos;\0&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aaedb3b1b5307625bc84dc660742da3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed char, &apos;\0&apos;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>signed</type>
          <declname>char</declname>
        </param>
        <param>
          <type>&apos;\0&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aeaaa7101572f283fe70a85ad5e6c65dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(char, &apos;\0&apos;)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>&apos;\0&apos;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ab2965a6078670393812e67f8e5fcb072" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned short, 0U)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>unsigned</type>
          <declname>short</declname>
        </param>
        <param>
          <type>0U</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ae6ea5db83b290e2412f321c3b1eb8c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed short, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>signed</type>
          <declname>short</declname>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a1f4167b954a7ff0074ce8a5bb855f86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(unsigned long, 0UL)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>unsigned</type>
          <declname>long</declname>
        </param>
        <param>
          <type>0UL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ad8804e25537427755c324ab03a72e776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(signed long, 0L)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>signed</type>
          <declname>long</declname>
        </param>
        <param>
          <type>0L</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ad2efcdbd12c7c020745b87bcc0997809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(UInt64, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>UInt64</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ab427739121a380a7934bda96153f053d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(Int64, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>Int64</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a71c697e5b567365fd3ff6c720769633b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(float, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a7ba92aa33f4968c902623cd02e445020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</definition>
        <argsstring>(double, 0)</argsstring>
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a8fd10cc30084c36a89c74868c8bd53f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ReferenceWrapper&lt; T &gt; &amp;ref, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const <ref refid="classtesting_1_1internal_1_1_reference_wrapper" kindref="compound">ReferenceWrapper</ref>&lt; T &gt; &amp;</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="964" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="964" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1afa4cd5d7933878d6d820b32c87bb2767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintIfNotEmpty</definition>
        <argsstring>(const internal::string &amp;explanation, ::std::ostream *os)</argsstring>
        <name>PrintIfNotEmpty</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>explanation</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="678" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="678" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a19a5d50382569ce6ee94e2b68ddc6fc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsReadableTypeName</definition>
        <argsstring>(const string &amp;type_name)</argsstring>
        <name>IsReadableTypeName</name>
        <param>
          <type>const string &amp;</type>
          <declname>type_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="688" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="688" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a0821df2611d54c79bac990719ad8a2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Value</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::MatchPrintAndExplain</definition>
        <argsstring>(Value &amp;value, const Matcher&lt; T &gt; &amp;matcher, MatchResultListener *listener)</argsstring>
        <name>MatchPrintAndExplain</name>
        <param>
          <type>Value &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt; &amp;</type>
          <declname>matcher</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="701" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="701" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a10095d1e1c99369200072b39d657ebc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatcherTuple</type>
          </param>
          <param>
            <type>typename ValueTuple</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::TupleMatches</definition>
        <argsstring>(const MatcherTuple &amp;matcher_tuple, const ValueTuple &amp;value_tuple)</argsstring>
        <name>TupleMatches</name>
        <param>
          <type>const <ref refid="structtesting_1_1internal_1_1_matcher_tuple" kindref="compound">MatcherTuple</ref> &amp;</type>
          <declname>matcher_tuple</declname>
        </param>
        <param>
          <type>const ValueTuple &amp;</type>
          <declname>value_tuple</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="796" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="796" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1afd62fd8914a7fae1bfc8a314fcc81f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatcherTuple</type>
          </param>
          <param>
            <type>typename ValueTuple</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ExplainMatchFailureTupleTo</definition>
        <argsstring>(const MatcherTuple &amp;matchers, const ValueTuple &amp;values, ::std::ostream *os)</argsstring>
        <name>ExplainMatchFailureTupleTo</name>
        <param>
          <type>const <ref refid="structtesting_1_1internal_1_1_matcher_tuple" kindref="compound">MatcherTuple</ref> &amp;</type>
          <declname>matchers</declname>
        </param>
        <param>
          <type>const ValueTuple &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="810" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="810" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a07ba091a64aa2ba95e41accc55dc8855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple</type>
          </param>
          <param>
            <type>typename Func</type>
          </param>
          <param>
            <type>typename OutIter</type>
          </param>
        </templateparamlist>
        <type>OutIter</type>
        <definition>OutIter testing::internal::TransformTupleValues</definition>
        <argsstring>(Func f, const Tuple &amp;t, OutIter out)</argsstring>
        <name>TransformTupleValues</name>
        <param>
          <type>Func</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>OutIter</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="853" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="853" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1aebfd0cd34de52d7973a5b2d03ba848cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::CaseInsensitiveCStringEquals</definition>
        <argsstring>(const char *lhs, const char *rhs)</argsstring>
        <name>CaseInsensitiveCStringEquals</name>
        <param>
          <type>const char *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="1090" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="1090" bodyend="1092"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ad5b31f61a3cc5b4226d3560f5b48f4dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::CaseInsensitiveCStringEquals</definition>
        <argsstring>(const wchar_t *lhs, const wchar_t *rhs)</argsstring>
        <name>CaseInsensitiveCStringEquals</name>
        <param>
          <type>const wchar_t *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="1094" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="1094" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a383de24b1cca6648c14b03964c0ed843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::CaseInsensitiveStringEquals</definition>
        <argsstring>(const StringType &amp;s1, const StringType &amp;s2)</argsstring>
        <name>CaseInsensitiveStringEquals</name>
        <param>
          <type>const StringType &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const StringType &amp;</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="1102" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="1102" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a3fd0f30ec03d577bba3e1aa13241e17d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_predicate_formatter_from_matcher" kindref="compound">PredicateFormatterFromMatcher</ref>&lt; M &gt;</type>
        <definition>PredicateFormatterFromMatcher&lt;M&gt; testing::internal::MakePredicateFormatterFromMatcher</definition>
        <argsstring>(M matcher)</argsstring>
        <name>MakePredicateFormatterFromMatcher</name>
        <param>
          <type>M</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="1879" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="1879" bodyend="1881"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ae30bd8357c179334b2b09b0d689efccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ ElementMatcherPairs</type>
        <definition>GTEST_API_ ElementMatcherPairs testing::internal::FindMaxBipartiteMatching</definition>
        <argsstring>(const MatchMatrix &amp;g)</argsstring>
        <name>FindMaxBipartiteMatching</name>
        <param>
          <type>const <ref refid="classtesting_1_1internal_1_1_match_matrix" kindref="compound">MatchMatrix</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3303" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-matchers.cc" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1af2bd2e350b56422a3d9d3b986ac1df0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>GTEST_API_ bool testing::internal::FindPairing</definition>
        <argsstring>(const MatchMatrix &amp;matrix, MatchResultListener *listener)</argsstring>
        <name>FindPairing</name>
        <param>
          <type>const <ref refid="classtesting_1_1internal_1_1_match_matrix" kindref="compound">MatchMatrix</ref> &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3305" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-matchers.cc" bodystart="328" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a31eb77a2bb0ca713d6ef07d8a3b9af9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple2Matcher</type>
          </param>
          <param>
            <type>typename Second</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_bound_second_matcher" kindref="compound">BoundSecondMatcher</ref>&lt; Tuple2Matcher, Second &gt;</type>
        <definition>BoundSecondMatcher&lt;Tuple2Matcher, Second&gt; testing::internal::MatcherBindSecond</definition>
        <argsstring>(const Tuple2Matcher &amp;tm, const Second &amp;second)</argsstring>
        <name>MatcherBindSecond</name>
        <param>
          <type>const Tuple2Matcher &amp;</type>
          <declname>tm</declname>
        </param>
        <param>
          <type>const Second &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3612" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3612" bodyend="3615"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a593b52fcbb46a765a31850661b1960f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ string</type>
        <definition>GTEST_API_ string testing::internal::FormatMatcherDescription</definition>
        <argsstring>(bool negation, const char *matcher_name, const Strings &amp;param_values)</argsstring>
        <name>FormatMatcherDescription</name>
        <param>
          <type>bool</type>
          <declname>negation</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>matcher_name</declname>
        </param>
        <param>
          <type>const Strings &amp;</type>
          <declname>param_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3622" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-matchers.cc" bodystart="127" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a9372c12747bcf964aacb1284f8048cae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InputIterator</type>
          </param>
          <param>
            <type>typename OutputIterator</type>
          </param>
        </templateparamlist>
        <type>OutputIterator</type>
        <definition>OutputIterator testing::internal::CopyElements</definition>
        <argsstring>(InputIterator first, InputIterator last, OutputIterator output)</argsstring>
        <name>CopyElements</name>
        <param>
          <type>InputIterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>InputIterator</type>
          <declname>last</declname>
        </param>
        <param>
          <type>OutputIterator</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="98" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="98" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8h_1ae4d273e9b76b40a28483826518e68f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_</type>
        <definition>GTEST_API_ testing::internal::GTEST_DECLARE_STATIC_MUTEX_</definition>
        <argsstring>(g_gmock_mutex)</argsstring>
        <name>GTEST_DECLARE_STATIC_MUTEX_</name>
        <param>
          <type>g_gmock_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8h_1af271cd1fc0b62a7f4736cb3109e86a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::LogWithLocation</definition>
        <argsstring>(testing::internal::LogSeverity severity, const char *file, int line, const string &amp;message)</argsstring>
        <name>LogWithLocation</name>
        <param>
          <type>testing::internal::LogSeverity</type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1241" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-spec-builders.cc" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8h_1a8d99a1e87d0cea563b2bfad8a4e65276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::ReportUninterestingCall</definition>
        <argsstring>(CallReaction reaction, const string &amp;msg)</argsstring>
        <name>ReportUninterestingCall</name>
        <param>
          <type>CallReaction</type>
          <declname>reaction</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1799" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-spec-builders.cc" bodystart="247" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a571db854f6de337007c53573c9cbf8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ string</type>
        <definition>GTEST_API_ string testing::internal::ConvertIdentifierNameToWords</definition>
        <argsstring>(const char *id_name)</argsstring>
        <name>ConvertIdentifierNameToWords</name>
        <param>
          <type>const char *</type>
          <declname>id_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="56" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-internal-utils.cc" bodystart="54" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ae88d1a6f95165c43c27a6c0e2d357e61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Pointer</type>
          </param>
        </templateparamlist>
        <type>const Pointer::element_type *</type>
        <definition>const Pointer::element_type* testing::internal::GetRawPointer</definition>
        <argsstring>(const Pointer &amp;p)</argsstring>
        <name>GetRawPointer</name>
        <param>
          <type>const Pointer &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="76" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a4d17b114b61b805ac5f37e9c26e29e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Element *</type>
        <definition>Element* testing::internal::GetRawPointer</definition>
        <argsstring>(Element *p)</argsstring>
        <name>GetRawPointer</name>
        <param>
          <type>Element *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="81" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a20f5584732e44a368e7acf295b639319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(bool, kBool)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>kBool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ac8f3722ca21d8b14f86e5c949e843508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(char, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ae5b8e77d245fd0838ab22e439e92e9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(signed char, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>signed</type>
          <declname>char</declname>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ab13e89be2f0f22b1da9e22cd53bce5ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(unsigned char, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>unsigned</type>
          <declname>char</declname>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1af191a2be9cff1d5900426ef5aa59851e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(short, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>short</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a59fb8e3bb6f1fec656ed8bdab0048f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(int, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a40597f856b3d94dc82e9fbbf9b027819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(long, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>long</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1af00aa2679c10ed170064e5ec5dd80e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(wchar_t, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>wchar_t</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ae1d4cd9aef9a240d257364691ed3679e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(Int64, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>Int64</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ae09394c3d07a5d99308fc3bbc9edc877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(UInt64, kInteger)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>UInt64</type>
        </param>
        <param>
          <type>kInteger</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ad4ebf1b53b79ac38fbd18ccf4d63ceca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(float, kFloatingPoint)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>kFloatingPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a45748f4c08b868cb4939081769cdc7b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(double, kFloatingPoint)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>kFloatingPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1af46fdd94d8aea0da729b554de443315f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GMOCK_DECLARE_KIND_</definition>
        <argsstring>(long double, kFloatingPoint)</argsstring>
        <name>GMOCK_DECLARE_KIND_</name>
        <param>
          <type>long</type>
          <declname>double</declname>
        </param>
        <param>
          <type>kFloatingPoint</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a7a259643b7f2d23ce2b757728df42c99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename From</type>
          </param>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::Assert</definition>
        <argsstring>(bool condition, const char *file, int line)</argsstring>
        <name>Assert</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="288" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="288" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ab3000fc56be000e4fa6ed7cdcfee3106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::Expect</definition>
        <argsstring>(bool condition, const char *file, int line, const string &amp;msg)</argsstring>
        <name>Expect</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="294" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="294" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a0dfe8a755bd02aa5ea162764b61a9d97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::Expect</definition>
        <argsstring>(bool condition, const char *file, int line)</argsstring>
        <name>Expect</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="301" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="301" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a69ffdba5ee36743e88d8f89b79e566ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>GTEST_API_ bool testing::internal::LogIsVisible</definition>
        <argsstring>(LogSeverity severity)</argsstring>
        <name>LogIsVisible</name>
        <param>
          <type>LogSeverity</type>
          <declname>severity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="322" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-internal-utils.cc" bodystart="110" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1ac0bc151763a8187d74387c4b2ba685c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::Log</definition>
        <argsstring>(LogSeverity severity, const string &amp;message, int stack_frames_to_skip)</argsstring>
        <name>Log</name>
        <param>
          <type>LogSeverity</type>
          <declname>severity</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stack_frames_to_skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="331" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-internal-utils.cc" bodystart="131" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8h_1a3316c24e8a79f5def3e85d763ae50854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T testing::internal::Invalid</definition>
        <argsstring>()</argsstring>
        <name>Invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="377" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="377" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8cc_1aa261c22df383e9007129c92e36e30e62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ FailureReporterInterface *</type>
        <definition>GTEST_API_ FailureReporterInterface* testing::internal::GetFailureReporter</definition>
        <argsstring>()</argsstring>
        <name>GetFailureReporter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock-internal-utils.cc" line="94" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-internal-utils.cc" bodystart="94" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="gmock-internal-utils_8cc_1a65647f11a4a74a4282c3cc6d422af0f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static testing::internal::GTEST_DEFINE_STATIC_MUTEX_</definition>
        <argsstring>(g_log_mutex)</argsstring>
        <name>GTEST_DEFINE_STATIC_MUTEX_</name>
        <param>
          <type>g_log_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock-internal-utils.cc" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8cc_1a61d60981533cb0875bad9025e0d98b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ string</type>
        <definition>GTEST_API_ string testing::internal::JoinAsTuple</definition>
        <argsstring>(const Strings &amp;fields)</argsstring>
        <name>JoinAsTuple</name>
        <param>
          <type>const Strings &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock-matchers.cc" line="105" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-matchers.cc" bodystart="105" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8cc_1a7e3ffe5f66db16c3ab89de55eac65bfa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::LogElementMatcherPairVec</definition>
        <argsstring>(const ElementMatcherPairs &amp;pairs, ::std::ostream *stream)</argsstring>
        <name>LogElementMatcherPairVec</name>
        <param>
          <type>const ElementMatcherPairs &amp;</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock-matchers.cc" line="312" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-matchers.cc" bodystart="312" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8cc_1a8c4aa7be8daa7b60e293071d70a89584" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_</type>
        <definition>GTEST_API_ testing::internal::GTEST_DEFINE_STATIC_MUTEX_</definition>
        <argsstring>(g_gmock_mutex)</argsstring>
        <name>GTEST_DEFINE_STATIC_MUTEX_</name>
        <param>
          <type>g_gmock_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock-spec-builders.cc" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1af9eac3bda47b1fa0b8e43d1d1d3a0b16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::internal::ParseGoogleMockFlagValue</definition>
        <argsstring>(const char *str, const char *flag, bool def_optional)</argsstring>
        <name>ParseGoogleMockFlagValue</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>def_optional</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock.cc" line="58" column="1" bodyfile="vendor/googletest/googlemock/src/gmock.cc" bodystart="58" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1a137bff8177d6158f59ab4ce603577293" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ParseGoogleMockBoolFlag</definition>
        <argsstring>(const char *str, const char *flag, bool *value)</argsstring>
        <name>ParseGoogleMockBoolFlag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock.cc" line="91" column="1" bodyfile="vendor/googletest/googlemock/src/gmock.cc" bodystart="91" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1afb359266feb817d9943854b76574817d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename String</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool testing::internal::ParseGoogleMockStringFlag</definition>
        <argsstring>(const char *str, const char *flag, String *value)</argsstring>
        <name>ParseGoogleMockStringFlag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_string" kindref="compound">String</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock.cc" line="110" column="1" bodyfile="vendor/googletest/googlemock/src/gmock.cc" bodystart="110" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1a3823844199df88af9493026031cf7744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::InitGoogleMockImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>InitGoogleMockImpl</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock.cc" line="128" column="1" bodyfile="vendor/googletest/googlemock/src/gmock.cc" bodystart="128" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="gtest-message_8h_1aad4beed95d0846e6ffc5da0978ef3bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::internal::StreamableToString</definition>
        <argsstring>(const T &amp;streamable)</argsstring>
        <name>StreamableToString</name>
        <param>
          <type>const T &amp;</type>
          <declname>streamable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-message.h" line="243" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-message.h" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a3682f962ae0ec1c0eca6444ca0a09e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</definition>
        <argsstring>(char)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name>
        <param>
          <type>char</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a85e08f00d443221e529a0a85a90fbaeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</definition>
        <argsstring>(wchar_t)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_</name>
        <param>
          <type>wchar_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1aeac30230dcc362221bdd07d61eaa4ec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</definition>
        <argsstring>(char, ::std::string)</argsstring>
        <name>GTEST_IMPL_FORMAT_C_STRING_AS_STRING_</name>
        <param>
          <type>char</type>
        </param>
        <param>
          <type>::std::string</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a91ab078f10adc669f09b7f604975c518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::internal::FormatForComparisonFailureMessage</definition>
        <argsstring>(const T1 &amp;value, const T2 &amp;)</argsstring>
        <name>FormatForComparisonFailureMessage</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="349" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a30708fa2bacf11895b03bdb21eb72309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::UniversalPrint</definition>
        <argsstring>(const T &amp;value, ::std::ostream *os)</argsstring>
        <name>UniversalPrint</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="365" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="852" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ac7dfe02c4c1cbfe89c23a93d873079c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::DefaultPrintTo</definition>
        <argsstring>(IsContainer, false_type, const C &amp;container, ::std::ostream *os)</argsstring>
        <name>DefaultPrintTo</name>
        <param>
          <type>IsContainer</type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref></type>
        </param>
        <param>
          <type>const C &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="370" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="370" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1affa1f94e3ba8db8b964553c2871bf339" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::DefaultPrintTo</definition>
        <argsstring>(IsNotContainer, true_type, T *p, ::std::ostream *os)</argsstring>
        <name>DefaultPrintTo</name>
        <param>
          <type>IsNotContainer</type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">true_type</ref></type>
        </param>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="404" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="404" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a78e4937ba564f01dac2ff25f3eece0ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::DefaultPrintTo</definition>
        <argsstring>(IsNotContainer, false_type, const T &amp;value, ::std::ostream *os)</argsstring>
        <name>DefaultPrintTo</name>
        <param>
          <type>IsNotContainer</type>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref></type>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="436" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="436" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1adb3c27150dbe661db0e0c4be27533460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const T &amp;value, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="454" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="454" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ab7524d6d3ab8c31b1deea88bf61783bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(unsigned char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>unsigned char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="485" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ad453af399370e394881079c243abacb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(signed char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>signed char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="486" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="244" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a476bd3d411d4f129620aaf8999c257c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char c, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="487" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="487" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a2979ac1ad3e05c51dcd7dca2eb34e6ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(bool x, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>bool</type>
          <declname>x</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="495" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="495" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a6c50fd437a2ae2ff6f182ccd6c2744dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(wchar_t wc, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>wchar_t</type>
          <declname>wc</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ac226053b96d7d61f9407e3b75bab07d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(const char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a553eec7bb50de01c9e91cac4accc606f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="510" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="510" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a792cc5665a34619ed7a6d54711433456" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const signed char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const signed char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="516" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="516" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a1320096b116f8cc4b688acbd5b783051" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(signed char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>signed char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="519" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="519" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a42c591f2164ad105b502a9262333aed2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const unsigned char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const unsigned char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="522" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="522" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a7fae797c500d66d0f5a9db4f205e3416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(unsigned char *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>unsigned char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="525" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="525" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1afb038075e9e2166d1d9158a19e0eed23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintTo</definition>
        <argsstring>(const wchar_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="536" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a8d41baa371fad3eb5a3dbe1bbc02c290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(wchar_t *s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="537" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="537" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ad3013b6b4c825edee9fe18ff1d982faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintRawArrayTo</definition>
        <argsstring>(const T a[], size_t count, ::std::ostream *os)</argsstring>
        <name>PrintRawArrayTo</name>
        <param>
          <type>const T</type>
          <declname>a</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="548" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="548" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a8b53e46cea3f8bdfc9342057c4f6ba62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::PrintStringTo</definition>
        <argsstring>(const ::std::string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintStringTo</name>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1af59b4f5d83276cd807c45063b14bad44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ::std::string &amp;s, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="565" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="565" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1af2c33928facbf2edf7af564278724d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const ::std::pair&lt; T1, T2 &gt; &amp;value, ::std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const ::std::pair&lt; T1, T2 &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="676" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="676" bodyend="684"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ad79d71c3110f8eb24ab352d68f29436a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const T *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <param>
          <type>const T *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="716" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="716" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1a72c997dbd2c562110b2cb56c359decfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="738" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1ae31e146c35fd75afc6a9cc73ae2692d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const wchar_t *begin, size_t len, ::std::ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <param>
          <type>const wchar_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1afa92f5a284929dc3723e654a25feb7b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::UniversalTersePrint</definition>
        <argsstring>(const T &amp;value, ::std::ostream *os)</argsstring>
        <name>UniversalTersePrint</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="843" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="843" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a9bd0caf5d16512de38b39599c13ee634" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>class <ref refid="classtesting_1_1internal_1_1_unit_test_impl" kindref="compound">UnitTestImpl</ref> *</type>
        <definition>UnitTestImpl * testing::internal::GetUnitTestImpl</definition>
        <argsstring>()</argsstring>
        <name>GetUnitTestImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="163" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="927" bodyend="929"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a85f6ff0e40f9a5f10af66a73cf1364fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::ReportFailureInUnknownLocation</definition>
        <argsstring>(TestPartResult::Type result_type, const std::string &amp;message)</argsstring>
        <name>ReportFailureInUnknownLocation</name>
        <param>
          <type>TestPartResult::Type</type>
          <declname>result_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="164" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2250" bodyend="2260"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a1def8ec9393360a1b34a20528703e7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperEQFailure</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const T1 &amp;lhs, const T2 &amp;rhs)</argsstring>
        <name>CmpHelperEQFailure</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1375" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="1375" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a4638c74d9b32e971f9b321af6fafc2f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, const T1 &amp;lhs, const T2 &amp;rhs)</argsstring>
        <name>CmpHelperEQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1387" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="1387" bodyend="1398"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a46582d95cbfe3d3d8f6945c9e9cd779c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, BiggestInt lhs, BiggestInt rhs)</argsstring>
        <name>CmpHelperEQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>BiggestInt</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>BiggestInt</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1403" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1437" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a894ffccd936d78fd555f490020c27f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperOpFailure</definition>
        <argsstring>(const char *expr1, const char *expr2, const T1 &amp;val1, const T2 &amp;val2, const char *op)</argsstring>
        <name>CmpHelperOpFailure</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const T1 &amp;</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1486" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="1486" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1aa14e3caa94126d7fb8e06bfb3d24ae4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(NE, !=)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>NE</type>
        </param>
        <param>
          <type>!</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ade60646b18728043fff84d7b4125de2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(LE,&lt;=)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>LE</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1aabcbff15eac496f8487699d19f42c274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(LT,&lt;)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>LT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1526" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1af969886067930ce70f6405cd5aa8b06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(GE, &gt;=)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>GE</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a7fdb4fc164db83c51dfad17640bfeae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_IMPL_CMP_HELPER_</definition>
        <argsstring>(GT, &gt;)</argsstring>
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param>
          <type>GT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1530" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a711a396ed8f636ecd14a850a89d181b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperSTREQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTREQ</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1537" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1487" bodyend="1500"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a30dfeb01f1bc8087c7d05205d5fa75c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperSTRCASEEQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRCASEEQ</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1545" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1503" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1af2d31c77ce73e1003a64bd7ca3564bbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperSTRNE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRNE</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1553" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1519" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a7e31d489f06ab8f6a81a7729f0c377e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperSTRCASENE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const char *s1, const char *s2)</argsstring>
        <name>CmpHelperSTRCASENE</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1561" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1533" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ad351878f87634853c4eb005fe9b169a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperSTREQ</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const wchar_t *s1, const wchar_t *s2)</argsstring>
        <name>CmpHelperSTREQ</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1570" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1869" bodyend="1882"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a415a953647bbc9469f062dc966061efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperSTRNE</definition>
        <argsstring>(const char *s1_expression, const char *s2_expression, const wchar_t *s1, const wchar_t *s2)</argsstring>
        <name>CmpHelperSTRNE</name>
        <param>
          <type>const char *</type>
          <declname>s1_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2_expression</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1578" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1885" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a98ce463e5dbe0c6120fa817e1f8f2944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RawType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::CmpHelperFloatingPointEQ</definition>
        <argsstring>(const char *lhs_expression, const char *rhs_expression, RawType lhs_value, RawType rhs_value)</argsstring>
        <name>CmpHelperFloatingPointEQ</name>
        <param>
          <type>const char *</type>
          <declname>lhs_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rhs_expression</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>lhs_value</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>rhs_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1631" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="1631" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a4f70b36c624b54c2362aeecc2f05ee8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::DoubleNearPredFormat</definition>
        <argsstring>(const char *expr1, const char *expr2, const char *abs_error_expr, double val1, double val2, double abs_error)</argsstring>
        <name>DoubleNearPredFormat</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>abs_error_expr</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1659" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1362" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test-internal_8h_1ac20f635c3285878fc1195ce687f23950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_DECLARE_string_</definition>
        <argsstring>(internal_run_death_test)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>internal_run_death_test</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-death-test-internal.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1afb0731ba39ffef1fa1730ac0699c9025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::IsNullLiteralHelper</definition>
        <argsstring>(Secret *p)</argsstring>
        <name>IsNullLiteralHelper</name>
        <param>
          <type>Secret *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ab53ecfa1632a871ce7c692d722a75a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char(&amp;</type>
        <definition>char(&amp; testing::internal::IsNullLiteralHelper</definition>
        <argsstring>(...))[2]</argsstring>
        <name>IsNullLiteralHelper</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ae475a090bca903bb222dd389eb189166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::AppendUserMessage</definition>
        <argsstring>(const std::string &amp;gtest_msg, const Message &amp;user_msg)</argsstring>
        <name>AppendUserMessage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>gtest_msg</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>user_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="137" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2001" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a513107ff8defa97d949937fc1350a56c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::DiffStrings</definition>
        <argsstring>(const std::string &amp;left, const std::string &amp;right, size_t *total_line_count)</argsstring>
        <name>DiffStrings</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>right</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>total_line_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a08725846ff184d3e79bcf5be4df19157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::EqFailure</definition>
        <argsstring>(const char *expected_expression, const char *actual_expression, const std::string &amp;expected_value, const std::string &amp;actual_value, bool ignoring_case)</argsstring>
        <name>EqFailure</name>
        <param>
          <type>const char *</type>
          <declname>expected_expression</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>actual_expression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>expected_value</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>actual_value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoring_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="219" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1312" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a5fd6e5dc9eb20ab3c3a80e24d89dfac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::GetBoolAssertionFailureMessage</definition>
        <argsstring>(const AssertionResult &amp;assertion_result, const char *expression_text, const char *actual_predicate_value, const char *expected_predicate_value)</argsstring>
        <name>GetBoolAssertionFailureMessage</name>
        <param>
          <type>const <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref> &amp;</type>
          <declname>assertion_result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expression_text</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>actual_predicate_value</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expected_predicate_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="226" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1346" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a6b108e56fdc68ea937ffb3759fb55ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>TypeId</type>
        <definition>TypeId testing::internal::GetTypeId</definition>
        <argsstring>()</argsstring>
        <name>GetTypeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="447" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="447" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1ad0d66d56ead224263cd100c1d6bfc562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ TypeId</type>
        <definition>TypeId testing::internal::GetTestTypeId</definition>
        <argsstring>()</argsstring>
        <name>GetTestTypeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="460" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="620" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a7f2e4e46c969fcae9d801d93a3e932fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref> *</type>
        <definition>TestInfo * testing::internal::MakeAndRegisterTestInfo</definition>
        <argsstring>(const char *test_case_name, const char *name, const char *type_param, const char *value_param, CodeLocation code_location, TypeId fixture_class_id, SetUpTestCaseFunc set_up_tc, TearDownTestCaseFunc tear_down_tc, TestFactoryBase *factory)</argsstring>
        <name>MakeAndRegisterTestInfo</name>
        <param>
          <type>const char *</type>
          <declname>test_case_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type_param</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>value_param</declname>
        </param>
        <param>
          <type><ref refid="structtesting_1_1internal_1_1_code_location" kindref="compound">CodeLocation</ref></type>
          <declname>code_location</declname>
        </param>
        <param>
          <type>TypeId</type>
          <declname>fixture_class_id</declname>
        </param>
        <param>
          <type>SetUpTestCaseFunc</type>
          <declname>set_up_tc</declname>
        </param>
        <param>
          <type>TearDownTestCaseFunc</type>
          <declname>tear_down_tc</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_test_factory_base" kindref="compound">TestFactoryBase</ref> *</type>
          <declname>factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="529" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2543" bodyend="2558"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a244d9a3765727306b597b8992ab84036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::SkipPrefix</definition>
        <argsstring>(const char *prefix, const char **pstr)</argsstring>
        <name>SkipPrefix</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>pstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="543" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5001" bodyend="5008"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1aeb475922b8cd1e6c60ac052bbc396e62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::GetCurrentOsStackTraceExceptTop</definition>
        <argsstring>(UnitTest *unit_test, int skip_count)</argsstring>
        <name>GetCurrentOsStackTraceExceptTop</name>
        <param>
          <type><ref refid="classtesting_1_1_unit_test" kindref="compound">UnitTest</ref> *</type>
          <declname>unit_test</declname>
        </param>
        <param>
          <type>int</type>
          <declname>skip_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="726" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4973" bodyend="4978"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a922c9da63cd4bf94fc473b9ecac76414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::AlwaysTrue</definition>
        <argsstring>()</argsstring>
        <name>AlwaysTrue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="733" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4988" bodyend="4996"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a4b24c851ab13569b1b15b3d259b60d2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::AlwaysFalse</definition>
        <argsstring>()</argsstring>
        <name>AlwaysFalse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="736" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="736" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1acb6ea1086293c1d6636e3c67941351fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>IsContainer</type>
        <definition>IsContainer testing::internal::IsContainerTest</definition>
        <argsstring>(int, typename C::iterator *=NULL, typename C::const_iterator *=NULL)</argsstring>
        <name>IsContainerTest</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>typename C::iterator *</type>
          <defval>NULL</defval>
        </param>
        <param>
          <type>typename C::const_iterator *</type>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="932" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="932" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1af545a2ae928b8a9e7581978234464275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class C</type>
          </param>
        </templateparamlist>
        <type>IsNotContainer</type>
        <definition>IsNotContainer testing::internal::IsContainerTest</definition>
        <argsstring>(long)</argsstring>
        <name>IsContainerTest</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="940" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="940" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1af4bebf36baf0b0a5b26d051dde55fa47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T *lhs, size_t size, const U *rhs)</argsstring>
        <name>ArrayEq</name>
        <param>
          <type>const T *</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const U *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="956" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="972" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a49b4d0ee49c0f8c93bab29ebd20630cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T &amp;lhs, const U &amp;rhs)</argsstring>
        <name>ArrayEq</name>
        <param>
          <type>const T &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="960" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="960" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a5cb6f81ee827130024261121c742b26c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::ArrayEq</definition>
        <argsstring>(const T(&amp;lhs)[N], const U(&amp;rhs)[N])</argsstring>
        <name>ArrayEq</name>
        <param>
          <type>const T(&amp;)</type>
          <declname>lhs</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const U(&amp;)</type>
          <declname>rhs</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="964" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="964" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a94a857fe6ff32cf4fdc4769a4071f239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
          <param>
            <type>typename Element</type>
          </param>
        </templateparamlist>
        <type>Iter</type>
        <definition>Iter testing::internal::ArrayAwareFind</definition>
        <argsstring>(Iter begin, Iter end, const Element &amp;elem)</argsstring>
        <name>ArrayAwareFind</name>
        <param>
          <type>Iter</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const Element &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="983" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="983" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1afb1b9728aaaf6d9fe6246a19cfe3f7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T *from, size_t size, U *to)</argsstring>
        <name>CopyArray</name>
        <param>
          <type>const T *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="996" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="1012" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a84d0e746ba0827cc52b53d22000de0e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T &amp;from, U *to)</argsstring>
        <name>CopyArray</name>
        <param>
          <type>const T &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="1000" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="1000" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal_8h_1a1e7ae855686720615dcd5754c8181c62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::CopyArray</definition>
        <argsstring>(const T(&amp;from)[N], U(*to)[N])</argsstring>
        <name>CopyArray</name>
        <param>
          <type>const T(&amp;)</type>
          <declname>from</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>U(*)</type>
          <declname>to</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" line="1004" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-internal.h" bodystart="1004" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="gtest-linked__ptr_8h_1ad7c5625384cf5f6b714188f274537ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_</type>
        <definition>GTEST_API_ testing::internal::GTEST_DECLARE_STATIC_MUTEX_</definition>
        <argsstring>(g_linked_ptr_mutex)</argsstring>
        <name>GTEST_DECLARE_STATIC_MUTEX_</name>
        <param>
          <type>g_linked_ptr_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-linked__ptr_8h_1ad1cb54a206a209ddace17a05359d38ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::operator==</definition>
        <argsstring>(T *ptr, const linked_ptr&lt; T &gt; &amp;x)</argsstring>
        <name>operator==</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" line="223" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" bodystart="223" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="gtest-linked__ptr_8h_1a6910869259f8f31825b471e9190fa09a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::internal::operator!=</definition>
        <argsstring>(T *ptr, const linked_ptr&lt; T &gt; &amp;x)</argsstring>
        <name>operator!=</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" line="228" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" bodystart="228" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="gtest-linked__ptr_8h_1a0d79fad1f772844eff35dfe955f24fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>&lt; T &gt;</type>
        <definition>linked_ptr&lt;T&gt; testing::internal::make_linked_ptr</definition>
        <argsstring>(T *ptr)</argsstring>
        <name>make_linked_ptr</name>
        <param>
          <type>T *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" line="236" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h" bodystart="236" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a527b9bcc13669b9a16400c8514266254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::IsTrue</definition>
        <argsstring>(bool condition)</argsstring>
        <name>IsTrue</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1114" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4986" bodyend="4986"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a31b7c3abed4a7c395f42c61e993989f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ ::std::string</type>
        <definition>GTEST_API_::std::string testing::internal::FormatFileLocation</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>FormatFileLocation</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1236" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="880" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a1ee4cde97868c53e442d3182496a9f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ ::std::string</type>
        <definition>GTEST_API_::std::string testing::internal::FormatCompilerIndependentFileLocation</definition>
        <argsstring>(const char *file, int line)</argsstring>
        <name>FormatCompilerIndependentFileLocation</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1241" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="898" bodyend="906"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a06b1b20029fbd1dbeb59752f914fab84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::LogToStderr</definition>
        <argsstring>()</argsstring>
        <name>LogToStderr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1281" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1281" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a2135f223bf6b527729aeaa651115183b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::FlushInfoLog</definition>
        <argsstring>()</argsstring>
        <name>FlushInfoLog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1282" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1282" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a0f6d06bf8c3093b9c22bb08723db201e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; testing::internal::move</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>move</name>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1323" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1323" bodyend="1325"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a982df3f369643b175f79cda4048bc3b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref></type>
        <definition>To testing::internal::ImplicitCast_</definition>
        <argsstring>(To x)</argsstring>
        <name>ImplicitCast_</name>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1349" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1349" bodyend="1349"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a1a1a1aed3fe00908b8a45d5ab4a33665" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref></type>
        <definition>To testing::internal::DownCast_</definition>
        <argsstring>(From *f)</argsstring>
        <name>DownCast_</name>
        <param>
          <type>From *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1373" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1373" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1abfe9bfb020d38aa4e0e12c001911b22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Derived</type>
          </param>
          <param>
            <type>class <ref refid="class_base" kindref="compound">Base</ref></type>
          </param>
        </templateparamlist>
        <type>Derived *</type>
        <definition>Derived* testing::internal::CheckedDowncastToActualType</definition>
        <argsstring>(Base *base)</argsstring>
        <name>CheckedDowncastToActualType</name>
        <param>
          <type><ref refid="class_base" kindref="compound">Base</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1398" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="1398" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1acba06d4f0343dec407738ba5544af990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::CaptureStdout</definition>
        <argsstring>()</argsstring>
        <name>CaptureStdout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aed657219a9856a8d249a3230de0c54ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::GetCapturedStdout</definition>
        <argsstring>()</argsstring>
        <name>GetCapturedStdout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a8ec00d458d0d442bd64af7b5f9c22dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::internal::CaptureStderr</definition>
        <argsstring>()</argsstring>
        <name>CaptureStderr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a374156401da17704099d0c33fa53adfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>GTEST_API_ std::string testing::internal::GetCapturedStderr</definition>
        <argsstring>()</argsstring>
        <name>GetCapturedStderr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a59a959f437bd7d515b5c41dcf00229c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::TempDir</definition>
        <argsstring>()</argsstring>
        <name>TempDir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1428" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1058" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a06ca3f65f5e85c9ce7299b9e4cd52408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ size_t</type>
        <definition>size_t testing::internal::GetFileSize</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>GetFileSize</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1431" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1076" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a2cc0be60c54a8701423fe5297e1349ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::ReadEntireFile</definition>
        <argsstring>(FILE *file)</argsstring>
        <name>ReadEntireFile</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1434" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1081" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a344160f771a3b754fa4e54b6e9846b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ const ::std::vector&lt; testing::internal::string &gt; &amp;</type>
        <definition>const ::std::vector&lt; testing::internal::string &gt; &amp; testing::internal::GetArgvs</definition>
        <argsstring>()</argsstring>
        <name>GetArgvs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="1437" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="389" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a3b9b3649cd04558bf46c75de52a7ef34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ size_t</type>
        <definition>size_t testing::internal::GetThreadCount</definition>
        <argsstring>()</argsstring>
        <name>GetThreadCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2184" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aeb957087fd6bbf9db98ab7cd41b0c129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsAlpha</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsAlpha</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2257" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2257" bodyend="2259"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a83802e7f23324cd512232203662e1a98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsAlNum</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsAlNum</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2260" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2260" bodyend="2262"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a4bd96b7fa6486802d33ddc217af55a39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsDigit</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsDigit</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2263" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2263" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ac26ce3883bc8919c27074975e958f3b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsLower</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsLower</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2266" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2266" bodyend="2268"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1af429e04f70f9c10f6aa76a5d1ccd389f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsSpace</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsSpace</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2269" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2269" bodyend="2271"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a84f3baa379fec6bf5947cb5165aa8cc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsUpper</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsUpper</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2272" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2272" bodyend="2274"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aa234ef141278263fb143b616c74c86e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsXDigit</definition>
        <argsstring>(char ch)</argsstring>
        <name>IsXDigit</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2275" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2275" bodyend="2277"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a6ab68a30f8291c09b2289c132bbe3b16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsXDigit</definition>
        <argsstring>(wchar_t ch)</argsstring>
        <name>IsXDigit</name>
        <param>
          <type>wchar_t</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2278" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2278" bodyend="2281"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ad9c627ef2a94245e3fd69e7ab3d49b42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::ToLower</definition>
        <argsstring>(char ch)</argsstring>
        <name>ToLower</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2283" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2283" bodyend="2285"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ac1b876a8133895bd553d4780ecaa1e3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>char testing::internal::ToUpper</definition>
        <argsstring>(char ch)</argsstring>
        <name>ToUpper</name>
        <param>
          <type>char</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2286" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2286" bodyend="2288"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1aa6afda12e567c353e2e9b9c2e8cae14f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string testing::internal::StripTrailingSpaces</definition>
        <argsstring>(std::string str)</argsstring>
        <name>StripTrailingSpaces</name>
        <param>
          <type>std::string</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2290" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" bodystart="2290" bodyend="2295"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ac06fc81336a3d80755f4020d34321766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::ParseInt32</definition>
        <argsstring>(const Message &amp;src_text, const char *str, Int32 *value)</argsstring>
        <name>ParseInt32</name>
        <param>
          <type>const <ref refid="classtesting_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>src_text</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>Int32 *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2549" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1149" bodyend="1185"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a67132cdce23fb71b6c38ee34ef81eb4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::BoolFromGTestEnv</definition>
        <argsstring>(const char *flag, bool default_val)</argsstring>
        <name>BoolFromGTestEnv</name>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2553" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1191" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1a0f7e728793f9e6cb0aa2b69eaa468bf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ Int32</type>
        <definition>Int32 testing::internal::Int32FromGTestEnv</definition>
        <argsstring>(const char *flag, Int32 default_val)</argsstring>
        <name>Int32FromGTestEnv</name>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>Int32</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2554" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1204" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8h_1ac54dabc540bf79c2de91add679bfb93b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string testing::internal::StringFromGTestEnv</definition>
        <argsstring>(const char *flag, const char *default_val)</argsstring>
        <name>StringFromGTestEnv</name>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-port.h" line="2555" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1229" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="gtest-string_8h_1ac0a2b7f69fc829d80a39e925b6417e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::StringStreamToString</definition>
        <argsstring>(::std::stringstream *stream)</argsstring>
        <name>StringStreamToString</name>
        <param>
          <type>::std::stringstream *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-string.h" line="162" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1982" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="gtest-type-util_8h_1a635606b4731f843c86ec8ca51cab83a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string testing::internal::GetTypeName</definition>
        <argsstring>()</argsstring>
        <name>GetTypeName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/internal/gtest-type-util.h" line="64" column="1" bodyfile="vendor/googletest/googletest/include/gtest/internal/gtest-type-util.h" bodystart="64" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test_8cc_1a20bfd9d47d8dd167ffc1c37a4c9ff73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::GTEST_DEFINE_string_</definition>
        <argsstring>(internal_run_death_test, &quot;&quot;, &quot;Indicates the file, line number, temporal index of &quot; &quot;the single death test to run, and a file descriptor to &quot; &quot;which a success code may be sent, all separated by &quot; &quot;the &apos;|&apos; characters.  This flag is specified if and only if the current &quot; &quot;process is a sub-process launched for running a thread-safe &quot; &quot;death test.  FOR INTERNAL USE ONLY.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>internal_run_death_test</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <param>
          <type>&quot;Indicates the</type>
          <declname>file</declname>
        </param>
        <param>
          <type>line</type>
          <declname>number</declname>
        </param>
        <param>
          <type>temporal index of &quot; &quot;the single death test to</type>
          <declname>run</declname>
        </param>
        <param>
          <type>and a file descriptor to &quot; &quot;which a success code may be</type>
          <declname>sent</declname>
        </param>
        <param>
          <type>all separated by &quot; &quot;the &apos;|&apos; characters. This flag is specified if and only if the current &quot; &quot;process is a sub-process launched for running a thread-safe &quot; &quot;death test. FOR INTERNAL USE ONLY.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-death-test.cc" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-filepath_8cc_1a6b8d22cee9edbbfe56077420a6fa1cb1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::IsPathSeparator</definition>
        <argsstring>(char c)</argsstring>
        <name>IsPathSeparator</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-filepath.cc" line="90" column="1" bodyfile="vendor/googletest/googletest/src/gtest-filepath.cc" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ae66b46943a429e6efb1db456d4cae90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ TimeInMillis</type>
        <definition>TimeInMillis testing::internal::GetTimeInMillis</definition>
        <argsstring>()</argsstring>
        <name>GetTimeInMillis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="113" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="806" bodyend="847"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ac1db1b4603967a6c4404f31cbbac31a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ShouldUseColor</definition>
        <argsstring>(bool stdout_is_tty)</argsstring>
        <name>ShouldUseColor</name>
        <param>
          <type>bool</type>
          <declname>stdout_is_tty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="116" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2916" bodyend="2950"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a904485f27a54be8a5a92856e2d838797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::FormatTimeInMillisAsSeconds</definition>
        <argsstring>(TimeInMillis ms)</argsstring>
        <name>FormatTimeInMillisAsSeconds</name>
        <param>
          <type>TimeInMillis</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="119" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="3550" bodyend="3554"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a5ef227c4a610e7ff638b12dfb25b068e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::FormatEpochTimeInMillisAsIso8601</definition>
        <argsstring>(TimeInMillis ms)</argsstring>
        <name>FormatEpochTimeInMillisAsIso8601</name>
        <param>
          <type>TimeInMillis</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="125" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="3574" bodyend="3585"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ae3449e173767750b613114ceac6d916a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ParseInt32Flag</definition>
        <argsstring>(const char *str, const char *flag, Int32 *value)</argsstring>
        <name>ParseInt32Flag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>Int32 *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="131" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5070" bodyend="5080"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1ae74fedbdaebaac8d1202192266243b9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int testing::internal::GetRandomSeedFromFlag</definition>
        <argsstring>(Int32 random_seed_flag)</argsstring>
        <name>GetRandomSeedFromFlag</name>
        <param>
          <type>Int32</type>
          <declname>random_seed_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="136" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="136" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a6e07a655cb987d131cd8fbeba9a7f1eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int testing::internal::GetNextRandomSeed</definition>
        <argsstring>(int seed)</argsstring>
        <name>GetNextRandomSeed</name>
        <param>
          <type>int</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="152" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="152" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a0c0f9558efb9abb965851c4738cdc725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::CodePointToUtf8</definition>
        <argsstring>(UInt32 code_point)</argsstring>
        <name>CodePointToUtf8</name>
        <param>
          <type>UInt32</type>
          <declname>code_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="233" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1759" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a05b8c86ff38243f34d8f839a0eadefb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ std::string</type>
        <definition>std::string testing::internal::WideStringToUtf8</definition>
        <argsstring>(const wchar_t *str, int num_chars)</argsstring>
        <name>WideStringToUtf8</name>
        <param>
          <type>const wchar_t *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_chars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="248" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1823" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a19b35b39782d41e6ef76e1910a3a502e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::WriteToShardStatusFileIfNeeded</definition>
        <argsstring>()</argsstring>
        <name>WriteToShardStatusFileIfNeeded</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="254" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4693" bodyend="4707"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a0fe41657b1d1ab7ec4e37ec07403ee6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ShouldShard</definition>
        <argsstring>(const char *total_shards_str, const char *shard_index_str, bool in_subprocess_for_death_test)</argsstring>
        <name>ShouldShard</name>
        <param>
          <type>const char *</type>
          <declname>total_shards_str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>shard_index_str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>in_subprocess_for_death_test</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="262" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4715" bodyend="4755"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1aaa576613655c2f380278c255c3ec5fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ Int32</type>
        <definition>Int32 testing::internal::Int32FromEnvOrDie</definition>
        <argsstring>(const char *env_var, Int32 default_val)</argsstring>
        <name>Int32FromEnvOrDie</name>
        <param>
          <type>const char *</type>
          <declname>env_var</declname>
        </param>
        <param>
          <type>Int32</type>
          <declname>default_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="269" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4760" bodyend="4772"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a437bd89f5bc532778d7467600e210395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ bool</type>
        <definition>bool testing::internal::ShouldRunTestOnShard</definition>
        <argsstring>(int total_shards, int shard_index, int test_id)</argsstring>
        <name>ShouldRunTestOnShard</name>
        <param>
          <type>int</type>
          <declname>total_shards</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shard_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>test_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="275" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4778" bodyend="4780"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a1e77a774d910346eff11a86d8df783a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int testing::internal::CountIf</definition>
        <argsstring>(const Container &amp;c, Predicate predicate)</argsstring>
        <name>CountIf</name>
        <param>
          <type>const Container &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="283" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="283" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a52f5504ed65d116201ccb8f99a44fd7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ForEach</definition>
        <argsstring>(const Container &amp;c, Functor functor)</argsstring>
        <name>ForEach</name>
        <param>
          <type>const Container &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Functor</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="296" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="296" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a71fdd20a0686bea3dc0cdcd95e0bca1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>E</type>
        <definition>E testing::internal::GetElementOr</definition>
        <argsstring>(const std::vector&lt; E &gt; &amp;v, int i, E default_value)</argsstring>
        <name>GetElementOr</name>
        <param>
          <type>const std::vector&lt; E &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>E</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="303" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="303" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a0e1d3dc36138a591769412d4c7779861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ShuffleRange</definition>
        <argsstring>(internal::Random *random, int begin, int end, std::vector&lt; E &gt; *v)</argsstring>
        <name>ShuffleRange</name>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>int</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>std::vector&lt; E &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="312" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="312" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a90d9e6ffe8522a7eb1b2ce9b1a0c4673" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::Shuffle</definition>
        <argsstring>(internal::Random *random, std::vector&lt; E &gt; *v)</argsstring>
        <name>Shuffle</name>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_random" kindref="compound">internal::Random</ref> *</type>
          <declname>random</declname>
        </param>
        <param>
          <type>std::vector&lt; E &gt; *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="333" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="333" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a1e7045e09392aece10aea4517458b7ed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void testing::internal::Delete</definition>
        <argsstring>(T *x)</argsstring>
        <name>Delete</name>
        <param>
          <type>T *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="340" column="1" bodyfile="vendor/googletest/googletest/src/gtest-internal-inl.h" bodystart="340" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a7a2bbf069f75bc99873976ad6fc356ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1internal_1_1_file_path" kindref="compound">FilePath</ref></type>
        <definition>FilePath testing::internal::GetCurrentExecutableName</definition>
        <argsstring>()</argsstring>
        <name>GetCurrentExecutableName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="415" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="399" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a472880afbcc592a41e3d623e2dec8412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::ParseGoogleTestFlagsOnly</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnly</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="953" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5332" bodyend="5334"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1aa3c81a67914856448d0778990d9d9cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::internal::ParseGoogleTestFlagsOnly</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnly</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="954" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5335" bodyend="5337"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port_8cc_1a7540386ecf74d7ab7e2fa6089db94682" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::internal::FlagToEnvVar</definition>
        <argsstring>(const char *flag)</argsstring>
        <name>FlagToEnvVar</name>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-port.cc" line="1134" column="1" bodyfile="vendor/googletest/googletest/src/gtest-port.cc" bodystart="1134" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a744a6dd74c12d1e2c16b3c03e14ed4d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsPrintableAscii</definition>
        <argsstring>(wchar_t c)</argsstring>
        <name>IsPrintableAscii</name>
        <param>
          <type>wchar_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="137" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ab73d250fde6dfbf16111afb7a071dc3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UnsignedChar</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsCharLiteralTo</definition>
        <argsstring>(Char c, ostream *os)</argsstring>
        <name>PrintAsCharLiteralTo</name>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="146" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="146" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a8c5838995d7bb9e4232b69e6bcdb9ab8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(wchar_t c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <param>
          <type>wchar_t</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="192" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="192" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a82e5b3cf45fd9c4603dbe14bc4cb38c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CharFormat</type>
        <definition>static CharFormat testing::internal::PrintAsStringLiteralTo</definition>
        <argsstring>(char c, ostream *os)</argsstring>
        <name>PrintAsStringLiteralTo</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="207" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a0c577e598e61d339ba45dd6643fb1969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename UnsignedChar</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::PrintCharAndCodeTo</definition>
        <argsstring>(Char c, ostream *os)</argsstring>
        <name>PrintCharAndCodeTo</name>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="217" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="217" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1aa74ea9d64f76ce69eceb225ca5ebef58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(wchar_t wc, ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>wchar_t</type>
          <declname>wc</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="250" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a0be71e6d7cb274131c559193f81c83e2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void</type>
        <definition>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void testing::internal::PrintCharsAsStringTo</definition>
        <argsstring>(const CharType *begin, size_t len, ostream *os)</argsstring>
        <name>PrintCharsAsStringTo</name>
        <param>
          <type>const CharType *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="262" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="262" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ad896a4e4d9133ce43dc18b6038d95dc3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void</type>
        <definition>GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_ GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_ static GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_ void testing::internal::UniversalPrintCharArray</definition>
        <argsstring>(const CharType *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintCharArray</name>
        <param>
          <type>const CharType *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="286" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="286" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a070107e7a8205ad6ec4d538d52b15b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const char *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <param>
          <type>const char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="309" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="309" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1a52394019018eb5079f9f1bcca23dcd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::UniversalPrintArray</definition>
        <argsstring>(const wchar_t *begin, size_t len, ostream *os)</argsstring>
        <name>UniversalPrintArray</name>
        <param>
          <type>const wchar_t *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="315" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="315" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1adc6c98306d40b53fd07be4e295102a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const char *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="320" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="320" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1afc20fb56b2547a8f91f9ff99650f2024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintTo</definition>
        <argsstring>(const wchar_t *s, ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="337" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="337" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8cc_1ad609167d8d6792b0fb186539e0e159bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintStringTo</definition>
        <argsstring>(const ::std::string &amp;s, ostream *os)</argsstring>
        <name>PrintStringTo</name>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-printers.cc" line="354" column="1" bodyfile="vendor/googletest/googletest/src/gtest-printers.cc" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a91e707e0d371fae0224ffd37f0d042af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::GTestIsInitialized</definition>
        <argsstring>()</argsstring>
        <name>GTestIsInitialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="330" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a564f9e608c608736ebe2199ab831745b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int testing::internal::SumOverTestCaseList</definition>
        <argsstring>(const std::vector&lt; TestCase *&gt; &amp;case_list, int(TestCase::*method)() const)</argsstring>
        <name>SumOverTestCaseList</name>
        <param>
          <type>const std::vector&lt; <ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref> *&gt; &amp;</type>
          <declname>case_list</declname>
        </param>
        <param>
          <type>int(TestCase::*)() const</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="335" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="335" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1aadc7afca7aab40f7f1d41bc17974459a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::TestCasePassed</definition>
        <argsstring>(const TestCase *test_case)</argsstring>
        <name>TestCasePassed</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref> *</type>
          <declname>test_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="345" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="345" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a53454b6089c1c5b25319caa9de6c5c02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::TestCaseFailed</definition>
        <argsstring>(const TestCase *test_case)</argsstring>
        <name>TestCaseFailed</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref> *</type>
          <declname>test_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="350" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="350" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a73e562dfef3eb7b30dfbb7b5e88e6df2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::ShouldRunTestCase</definition>
        <argsstring>(const TestCase *test_case)</argsstring>
        <name>ShouldRunTestCase</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref> *</type>
          <declname>test_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="356" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="356" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1aff419d76acc3727be48d195f927189c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_</type>
        <definition>GTEST_API_ testing::internal::GTEST_DEFINE_STATIC_MUTEX_</definition>
        <argsstring>(g_linked_ptr_mutex)</argsstring>
        <name>GTEST_DEFINE_STATIC_MUTEX_</name>
        <param>
          <type>g_linked_ptr_mutex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a14ff02e6d151f45e998657674e9af88a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::HasOneFailure</definition>
        <argsstring>(const char *, const char *, const char *, const TestPartResultArray &amp;results, TestPartResult::Type type, const string &amp;substr)</argsstring>
        <name>HasOneFailure</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_test_part_result_array" kindref="compound">TestPartResultArray</ref> &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>TestPartResult::Type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>substr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="631" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="631" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a8eb8eddf760375a490e007b20777ec56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::SplitString</definition>
        <argsstring>(const ::std::string &amp;str, char delimiter, ::std::vector&lt; ::std::string &gt; *dest)</argsstring>
        <name>SplitString</name>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>::std::vector&lt; ::std::string &gt; *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="922" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="922" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a17b52b6b1f81f6dcad5cc4d12e5173a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RawType</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::FloatingPointLE</definition>
        <argsstring>(const char *expr1, const char *expr2, RawType val1, RawType val2)</argsstring>
        <name>FloatingPointLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>RawType</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1384" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1384" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a2c54b453387aa8a18f2f3e09f10b5a7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>UInt32</type>
        <definition>UInt32 testing::internal::ChopLowBits</definition>
        <argsstring>(UInt32 *bits, int n)</argsstring>
        <name>ChopLowBits</name>
        <param>
          <type>UInt32 *</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1747" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1747" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a681895f8cc32286211be9889da107394" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::IsUtf16SurrogatePair</definition>
        <argsstring>(wchar_t first, wchar_t second)</argsstring>
        <name>IsUtf16SurrogatePair</name>
        <param>
          <type>wchar_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1794" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1794" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac8ef1bb10cd9e69de939789b759e6bc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>UInt32</type>
        <definition>UInt32 testing::internal::CreateCodePointFromUtf16SurrogatePair</definition>
        <argsstring>(wchar_t first, wchar_t second)</argsstring>
        <name>CreateCodePointFromUtf16SurrogatePair</name>
        <param>
          <type>wchar_t</type>
          <declname>first</declname>
        </param>
        <param>
          <type>wchar_t</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="1800" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1800" bodyend="1808"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac5293b438139ef7ed05cb7fcaaf63545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type>Result</type>
        <definition>Result testing::internal::HandleSehExceptionsInMethodIfSupported</definition>
        <argsstring>(T *object, Result(T::*method)(), const char *location)</argsstring>
        <name>HandleSehExceptionsInMethodIfSupported</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>Result(T::*)()</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2383" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2383" bodyend="2404"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1addb2ed165b92b74e25fe9ebe9e46b9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename Result</type>
          </param>
        </templateparamlist>
        <type>Result</type>
        <definition>Result testing::internal::HandleExceptionsInMethodIfSupported</definition>
        <argsstring>(T *object, Result(T::*method)(), const char *location)</argsstring>
        <name>HandleExceptionsInMethodIfSupported</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>Result(T::*)()</type>
          <declname>method</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2410" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2410" bodyend="2460"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ada13cbf91139f0809a5a31ea2594c1ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::internal::PrintTestPartResultToString</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResultToString</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2850" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2850" bodyend="2857"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac844b3d05dd6f665f72e2a1cec1872ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintTestPartResult</definition>
        <argsstring>(const TestPartResult &amp;test_part_result)</argsstring>
        <name>PrintTestPartResult</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>test_part_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2860" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2860" bodyend="2876"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a0aefb9deb60e90f19c236559837303d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* testing::internal::GetAnsiColorCode</definition>
        <argsstring>(GTestColor color)</argsstring>
        <name>GetAnsiColorCode</name>
        <param>
          <type>GTestColor</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2904" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2904" bodyend="2911"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1adef3055706176001364e54eb73a87e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::ColoredPrintf</definition>
        <argsstring>(GTestColor color, const char *fmt,...)</argsstring>
        <name>ColoredPrintf</name>
        <param>
          <type>GTestColor</type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2956" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2956" bodyend="3002"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a7a85ebe3b4de93a1edb091f92f1fb393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::PrintFullTestCommentIfPresent</definition>
        <argsstring>(const TestInfo &amp;test_info)</argsstring>
        <name>PrintFullTestCommentIfPresent</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_info" kindref="compound">TestInfo</ref> &amp;</type>
          <declname>test_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="3009" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="3009" bodyend="3024"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a60af94307ed4f00a57b5c6d9617c046d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::PortableLocaltime</definition>
        <argsstring>(time_t seconds, struct tm *out)</argsstring>
        <name>PortableLocaltime</name>
        <param>
          <type>time_t</type>
          <declname>seconds</declname>
        </param>
        <param>
          <type>struct tm *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="3556" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="3556" bodyend="3570"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a5f5535012d4548788a5d1a4e0f18e19e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::SetUpEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>SetUpEnvironment</name>
        <param>
          <type><ref refid="classtesting_1_1_environment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="4539" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4539" bodyend="4539"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac467e871e4781da3f5ebed2a4465aec4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::TearDownEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>TearDownEnvironment</name>
        <param>
          <type><ref refid="classtesting_1_1_environment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="4540" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4540" bodyend="4540"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a4a8708bfb808411f9d918c7356ae7362" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintOnOneLine</definition>
        <argsstring>(const char *str, int max_length)</argsstring>
        <name>PrintOnOneLine</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="4846" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4846" bodyend="4862"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a8bfd56af5e4a89bfb76f7e1723e41b03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* testing::internal::ParseFlagValue</definition>
        <argsstring>(const char *str, const char *flag, bool def_optional)</argsstring>
        <name>ParseFlagValue</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>def_optional</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5015" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5015" bodyend="5041"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ada3b98e7cfe93f4ba2053c470d9e3e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::ParseBoolFlag</definition>
        <argsstring>(const char *str, const char *flag, bool *value)</argsstring>
        <name>ParseBoolFlag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5053" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5053" bodyend="5063"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1aa4ce312efaaf7a97aac2303173afe021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::ParseStringFlag</definition>
        <argsstring>(const char *str, const char *flag, std::string *value)</argsstring>
        <name>ParseStringFlag</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5087" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5087" bodyend="5097"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a6fff795269f50673e358438721710d6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::internal::HasGoogleTestFlagPrefix</definition>
        <argsstring>(const char *str)</argsstring>
        <name>HasGoogleTestFlagPrefix</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5105" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5105" bodyend="5112"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a7d8c446a29c7e22d7d4dde8f530bb57e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void testing::internal::PrintColorEncoded</definition>
        <argsstring>(const char *str)</argsstring>
        <name>PrintColorEncoded</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5125" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5125" bodyend="5157"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1afccff08aa2b1ede0dd32c1364a5dee42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::ParseGoogleTestFlag</definition>
        <argsstring>(const char *const arg)</argsstring>
        <name>ParseGoogleTestFlag</name>
        <param>
          <type>const char *const</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5223" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5223" bodyend="5250"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ae4c46ce8c3d016848fff52cc5133f2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::ParseGoogleTestFlagsOnlyImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>ParseGoogleTestFlagsOnlyImpl</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5279" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5279" bodyend="5328"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ac3c6fa93391768aa91c6238b31aaeeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::internal::InitGoogleTestImpl</definition>
        <argsstring>(int *argc, CharType **argv)</argsstring>
        <name>InitGoogleTestImpl</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>CharType **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="5344" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5344" bodyend="5357"/>
      </memberdef>
      <memberdef kind="function" id="gtest-listener__test_8cc_1a7e113e9c70d45d89fe1703e58ff083b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST_F</definition>
        <argsstring>(ListenerTest, DoesFoo)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_listener_test" kindref="compound">ListenerTest</ref></type>
        </param>
        <param>
          <type>DoesFoo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-listener_test.cc" line="158" column="1" bodyfile="vendor/googletest/googletest/test/gtest-listener_test.cc" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="gtest-listener__test_8cc_1a02cef32090020d164460dd3d9f8e2852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST_F</definition>
        <argsstring>(ListenerTest, DoesBar)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_listener_test" kindref="compound">ListenerTest</ref></type>
        </param>
        <param>
          <type>DoesBar</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-listener_test.cc" line="165" column="1" bodyfile="vendor/googletest/googletest/test/gtest-listener_test.cc" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a0c1e055c001e4dbb874f00a46c25bb00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, WorksForNarrowAscii)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>WorksForNarrowAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="64" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="64" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a7cd9d67d4164d2aeb4ceb3ed253c7d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, ReturnsFalseForNarrowNonAscii)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>ReturnsFalseForNarrowNonAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="77" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1af76bca685fddffc0ecda1464b1b6a0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, WorksForWideAscii)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>WorksForWideAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="82" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="82" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a771232ed3801fa49cbd4bbe11b318fe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IsXDigitTest, ReturnsFalseForWideNonAscii)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsXDigitTest</type>
        </param>
        <param>
          <type>ReturnsFalseForWideNonAscii</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="95" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="95" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a5d2ec1128c80363b06070f403f682490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, ConvertsPointers)</argsstring>
        <name>TEST</name>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>ConvertsPointers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="119" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a1b304dcd3ac71095f2e7d9e9b43c4755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseInheritance)</argsstring>
        <name>TEST</name>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseInheritance</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="124" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="124" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a8554484c7c0ea536bc393c254490aaff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseNonConstCastOperator)</argsstring>
        <name>TEST</name>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseNonConstCastOperator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="142" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1af7f631f9fbde27b19a65d50fc29e1420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseConstCastOperatorOnConstValues)</argsstring>
        <name>TEST</name>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseConstCastOperatorOnConstValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="161" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="161" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a62a3b62658f9d47733cb7b5c8f69b2ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanSelectBetweenConstAndNonConstCasrAppropriately)</argsstring>
        <name>TEST</name>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanSelectBetweenConstAndNonConstCasrAppropriately</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="186" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="186" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1ad5c2cf37cc5aa78744012255cae78f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ImplicitCastTest, CanUseImplicitConstructor)</argsstring>
        <name>TEST</name>
        <param>
          <type>ImplicitCastTest</type>
        </param>
        <param>
          <type>CanUseImplicitConstructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="207" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="207" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1abd56ca990c5b8c1aea44d15028a74f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IteratorTraitsTest, WorksForSTLContainerIterators)</argsstring>
        <name>TEST</name>
        <param>
          <type>IteratorTraitsTest</type>
        </param>
        <param>
          <type>WorksForSTLContainerIterators</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="214" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="214" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a642234d85836450bb8795cf0a8a9f908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IteratorTraitsTest, WorksForPointerToNonConst)</argsstring>
        <name>TEST</name>
        <param>
          <type>IteratorTraitsTest</type>
        </param>
        <param>
          <type>WorksForPointerToNonConst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="221" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1afc0e95a0472d243967fd4720c681c478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(IteratorTraitsTest, WorksForPointerToConst)</argsstring>
        <name>TEST</name>
        <param>
          <type>IteratorTraitsTest</type>
        </param>
        <param>
          <type>WorksForPointerToConst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="226" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a99f56e2e9d5b30a879f877cc72bb0c0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ScopedPtrTest, DefinesElementType)</argsstring>
        <name>TEST</name>
        <param>
          <type>ScopedPtrTest</type>
        </param>
        <param>
          <type>DefinesElementType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="234" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="234" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a26d00130a017a66d0d60dc5a02a13d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GtestCheckSyntaxTest, BehavesLikeASingleStatement)</argsstring>
        <name>TEST</name>
        <param>
          <type>GtestCheckSyntaxTest</type>
        </param>
        <param>
          <type>BehavesLikeASingleStatement</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="240" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="240" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a4dfd147ff396984fca799878cb53dcea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GtestCheckSyntaxTest, WorksWithSwitch)</argsstring>
        <name>TEST</name>
        <param>
          <type>GtestCheckSyntaxTest</type>
        </param>
        <param>
          <type>WorksWithSwitch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="256" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="256" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a1a1c20d78e9e75b9c7f2b767eb62611b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsFileLocation)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsFileLocation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="270" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1ace2f5407afdfb0767035d44b6758e4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsUnknownFile)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUnknownFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="275" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a17d1f472b6c1154de7b5b008b964ee32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsUknownLine)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="281" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="281" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a1195aaf7258c5442de7aebd95acefb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatFileLocationTest, FormatsUknownFileAndLine)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownFileAndLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="285" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="285" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a9c12f8c1ebb19906e8fa0c430d139076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsFileLocation)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsFileLocation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="290" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="290" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a65ad1cad17717c1b8ac4c2d4bef5e079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsUknownFile)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="294" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="294" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a0315a64a661f249628f2884080e0614f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsUknownLine)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="299" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="299" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a8b9aee556f3dec6e67c35830ba55e0bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(FormatCompilerIndependentFileLocationTest, FormatsUknownFileAndLine)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatCompilerIndependentFileLocationTest</type>
        </param>
        <param>
          <type>FormatsUknownFileAndLine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="303" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="303" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a5ad8299ae9325382f01b945f4f81711e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GetThreadCountTest, ReturnsZeroWhenUnableToCountThreads)</argsstring>
        <name>TEST</name>
        <param>
          <type>GetThreadCountTest</type>
        </param>
        <param>
          <type>ReturnsZeroWhenUnableToCountThreads</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="348" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="348" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1afabff70df09a0e4fcda96dd36460c2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(GtestCheckDeathTest, DiesWithCorrectOutputOnFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>GtestCheckDeathTest</type>
        </param>
        <param>
          <type>DiesWithCorrectOutputOnFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="353" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="353" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a198f7132f76dd44d48dac54dc5d38fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(RegexEngineSelectionTest, SelectsCorrectRegexEngine)</argsstring>
        <name>TEST</name>
        <param>
          <type>RegexEngineSelectionTest</type>
        </param>
        <param>
          <type>SelectsCorrectRegexEngine</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="384" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="384" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a0b658d88cea3a2fe6775b1b269c0204b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureTest, CapturesStdout)</argsstring>
        <name>TEST</name>
        <param>
          <type>CaptureTest</type>
        </param>
        <param>
          <type>CapturesStdout</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="932" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="932" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1abbc9510a4f690912c32835213d95198f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureTest, CapturesStderr)</argsstring>
        <name>TEST</name>
        <param>
          <type>CaptureTest</type>
        </param>
        <param>
          <type>CapturesStderr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="942" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="942" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a341ff65f3ca44b27fc51f03a9a05bee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureTest, CapturesStdoutAndStderr)</argsstring>
        <name>TEST</name>
        <param>
          <type>CaptureTest</type>
        </param>
        <param>
          <type>CapturesStdoutAndStderr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="953" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="953" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a325a786fb22b87e5aa8d8f584b42ab09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(CaptureDeathTest, CannotReenterStdoutCapture)</argsstring>
        <name>TEST</name>
        <param>
          <type>CaptureDeathTest</type>
        </param>
        <param>
          <type>CannotReenterStdoutCapture</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="962" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="962" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1af366e28e373f36480decc2ea586f48f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, DefaultConstructorInitializesToDefaultValues)</argsstring>
        <name>TEST</name>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>DefaultConstructorInitializesToDefaultValues</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="974" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="974" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a5a52dd578217050e621ebd2aace97a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, SingleParamConstructorInitializesToParam)</argsstring>
        <name>TEST</name>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>SingleParamConstructorInitializesToParam</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="982" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="982" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a6dffc8331590224259b60e855ad07d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, ValueDefaultContructorIsNotRequiredForParamVersion)</argsstring>
        <name>TEST</name>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>ValueDefaultContructorIsNotRequiredForParamVersion</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="997" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="997" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1a0e7c2d58a313bec0821df19f44351d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, GetAndPointerReturnSameValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>GetAndPointerReturnSameValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="1002" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="1002" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="gtest-port__test_8cc_1aaed45d6ba960f02e8d3d042c606bc98e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ThreadLocalTest, PointerAndConstPointerReturnSameValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>ThreadLocalTest</type>
        </param>
        <param>
          <type>PointerAndConstPointerReturnSameValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-port_test.cc" line="1012" column="1" bodyfile="vendor/googletest/googletest/test/gtest-port_test.cc" bodystart="1012" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a9ac879683abb06d1c0bba3a339ea2f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, UnitTestImmutableAccessorsWork)</argsstring>
        <name>TEST</name>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>UnitTestImmutableAccessorsWork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="114" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="114" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1adcfd37a66bc4cb0e8291cf46e1a6c72b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::internal::IsNull</definition>
        <argsstring>(const char *str)</argsstring>
        <name>IsNull</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="140" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="140" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a33809333fe5b5f33c2bd56ddcdd1dbb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, TestCaseImmutableAccessorsWork)</argsstring>
        <name>TEST</name>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>TestCaseImmutableAccessorsWork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="147" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="147" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a459d693357db8f8f48c26a8bee3ffb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, TestCaseDisabledAccessorsWork)</argsstring>
        <name>TEST</name>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>TestCaseDisabledAccessorsWork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="210" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="210" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a9ed5f89c92532506899e3908e79af4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(ApiTest, DISABLED_Dummy1)</argsstring>
        <name>TEST</name>
        <param>
          <type>ApiTest</type>
        </param>
        <param>
          <type>DISABLED_Dummy1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="231" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="gtest-unittest-api__test_8cc_1a4a84433419426d1c1b87ce998267b0d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TEST</definition>
        <argsstring>(DISABLED_Test, Dummy2)</argsstring>
        <name>TEST</name>
        <param>
          <type>DISABLED_Test</type>
        </param>
        <param>
          <type>Dummy2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" line="232" column="1" bodyfile="vendor/googletest/googletest/test/gtest-unittest-api_test.cc" bodystart="232" bodyend="232"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="64" column="1"/>
  </compounddef>
</doxygen>
