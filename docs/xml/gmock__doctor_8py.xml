<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock__doctor_8py" kind="file" language="Python">
    <compoundname>gmock_doctor.py</compoundname>
    <innernamespace refid="namespacegmock__doctor">gmock_doctor</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">#<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">#<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Converts<sp/>compiler&apos;s<sp/>errors<sp/>in<sp/>code<sp/>using<sp/>Google<sp/>Mock<sp/>to<sp/>plain<sp/>English.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">__author__<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;wan@google.com<sp/>(Zhanyong<sp/>Wan)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">_VERSION<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;1.0.3&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">_EMAIL<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;googlemock@googlegroups.com&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">_COMMON_GMOCK_SYMBOLS<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;A&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;AddressSatisfies&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;AllOf&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;An&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;AnyOf&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ContainerEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Contains&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ContainsRegex&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;DoubleEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ElementsAre&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ElementsAreArray&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;EndsWith&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Eq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Field&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;FloatEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Ge&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Gt&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;HasSubstr&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;IsInitializedProto&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Le&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Lt&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MatcherCast&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Matches&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MatchesRegex&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;NanSensitiveDoubleEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;NanSensitiveFloatEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Ne&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Not&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;NotNull&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Pointee&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Property&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Ref&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ResultOf&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;SafeMatcherCast&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;StartsWith&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;StrCaseEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;StrCaseNe&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;StrEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;StrNe&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Truly&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;TypedEq&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Value&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Assign&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ByRef&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;DeleteArg&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;DoAll&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;DoDefault&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;IgnoreResult&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Invoke&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;InvokeArgument&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;InvokeWithoutArgs&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Return&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ReturnNew&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ReturnNull&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;ReturnRef&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;SaveArg&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;SetArgReferee&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;SetArgPointee&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;SetArgumentPointee&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;SetArrayArgument&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;SetErrnoAndReturn&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Throw&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;WithArg&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;WithArgs&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;WithoutArgs&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Cardinalities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;AnyNumber&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;AtLeast&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;AtMost&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Between&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Exactly&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Sequences</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;InSequence&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Sequence&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Misc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;DefaultValue&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Mock&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Regex<sp/>for<sp/>matching<sp/>source<sp/>file<sp/>path<sp/>and<sp/>line<sp/>number<sp/>in<sp/>the<sp/>compiler&apos;s<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">_GCC_FILE_LINE_RE<sp/>=<sp/></highlight><highlight class="stringliteral">r&apos;(?P&lt;file&gt;.*):(?P&lt;line&gt;\d+):(\d+:)?\s+&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">_CLANG_FILE_LINE_RE<sp/>=<sp/></highlight><highlight class="stringliteral">r&apos;(?P&lt;file&gt;.*):(?P&lt;line&gt;\d+):(?P&lt;column&gt;\d+):\s+&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(?P&lt;file&gt;.*[/\\^](?!gmock-)[^/\\]+):(?P&lt;line&gt;\d+):(?P&lt;column&gt;\d+):\s+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_FindAllMatches(regex,<sp/>s):</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Generates<sp/>all<sp/>matches<sp/>of<sp/>regex<sp/>in<sp/>string<sp/>s.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>re.compile(regex)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r.finditer(s)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_GenericDiagnoser(short_name,<sp/>long_name,<sp/>diagnoses,<sp/>msg):</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>given<sp/>disease<sp/>by<sp/>pattern<sp/>matching.</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/>Can<sp/>provide<sp/>different<sp/>diagnoses<sp/>for<sp/>different<sp/>patterns.</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>short_name:<sp/>Short<sp/>name<sp/>of<sp/>the<sp/>disease.</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>long_name:<sp/><sp/>Long<sp/>name<sp/>of<sp/>the<sp/>disease.</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>diagnoses:<sp/><sp/>A<sp/>list<sp/>of<sp/>pairs<sp/>(regex,<sp/>pattern<sp/>for<sp/>formatting<sp/>the<sp/>diagnosis</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>matching<sp/>regex).</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>msg:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compiler&apos;s<sp/>error<sp/>messages.</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/>Yields:</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Tuples<sp/>of<sp/>the<sp/>form</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>(short<sp/>name<sp/>of<sp/>disease,<sp/>long<sp/>name<sp/>of<sp/>disease,<sp/>diagnosis).</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>regex,<sp/>diagnosis<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>diagnoses:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>re.search(regex,<sp/>msg):</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;%(file)s:%(line)s:&apos;</highlight><highlight class="normal"><sp/>+<sp/>diagnosis</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>m<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_FindAllMatches(regex,<sp/>msg):</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>(short_name,<sp/>long_name,<sp/>diagnosis<sp/>%<sp/>m.groupdict())</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_NeedToReturnReferenceDiagnoser(msg):</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>NRR<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;In<sp/>member<sp/>function<sp/>\&apos;testing::internal::ReturnAction&lt;R&gt;.*\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;instantiated<sp/>from<sp/>here\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*gmock-actions\.h.*error:<sp/>creating<sp/>array<sp/>with<sp/>negative<sp/>size&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;error:.*array.*negative.*\r?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;note:<sp/>in<sp/>instantiation<sp/>of<sp/>function<sp/>template<sp/>specialization<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;testing::internal::ReturnAction&lt;(?P&lt;type&gt;.*)&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;::operator<sp/>Action&lt;.*&gt;\&apos;<sp/>requested<sp/>here&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>clang11_re<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;use_ReturnRef_instead_of_Return_to_return_a_reference.*&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"><sp/>+<sp/>_CLANG_NON_GMOCK_FILE_LINE_RE)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral">You<sp/>are<sp/>using<sp/>a<sp/>Return()<sp/>action<sp/>in<sp/>a<sp/>function<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to</highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral">%(type)s.<sp/><sp/>Please<sp/>use<sp/>ReturnRef()<sp/>instead.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight><highlight class="stringliteral">&apos;NRR&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Need<sp/>to<sp/>Return<sp/>Reference&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(clang_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang11_re,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;a<sp/>type&apos;</highlight><highlight class="normal">}),</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gcc_regex,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;a<sp/>type&apos;</highlight><highlight class="normal">})],</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_NeedToReturnSomethingDiagnoser(msg):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>NRS<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;(instantiated<sp/>from<sp/>here\n.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;*gmock.*actions\.h.*error:<sp/>void<sp/>value<sp/>not<sp/>ignored)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;|(error:<sp/>control<sp/>reaches<sp/>end<sp/>of<sp/>non-void<sp/>function)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>clang_regex1<sp/>=<sp/>(_CLANG_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>cannot<sp/>initialize<sp/>return<sp/>object<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;of<sp/>type<sp/>\&apos;Result\&apos;<sp/>\(aka<sp/>\&apos;(?P&lt;return_type&gt;.*)\&apos;\)<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;with<sp/>an<sp/>rvalue<sp/>of<sp/>type<sp/>\&apos;void\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>clang_regex2<sp/>=<sp/>(_CLANG_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>cannot<sp/>initialize<sp/>return<sp/>object<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;of<sp/>type<sp/>\&apos;(?P&lt;return_type&gt;.*)\&apos;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;with<sp/>an<sp/>rvalue<sp/>of<sp/>type<sp/>\&apos;void\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral">You<sp/>are<sp/>using<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>void,<sp/>but<sp/>it<sp/>needs<sp/>to<sp/>return</highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral">%(return_type)s.<sp/><sp/>Please<sp/>tell<sp/>it<sp/>*what*<sp/>to<sp/>return.<sp/><sp/>Perhaps<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral">the<sp/>pattern<sp/>DoAll(some_action,<sp/>Return(some_value))?&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;NRS&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Need<sp/>to<sp/>Return<sp/>Something&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;return_type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;*something*&apos;</highlight><highlight class="normal">}),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex1,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex2,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_NeedToReturnNothingDiagnoser(msg):</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>NRN<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;instantiated<sp/>from<sp/>here\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*gmock-actions\.h.*error:<sp/>instantiation<sp/>of<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;testing::internal::ReturnAction&lt;R&gt;::Impl&lt;F&gt;::value_\&apos;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;as<sp/>type<sp/>\&apos;void\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>clang_regex1<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;error:<sp/>field<sp/>has<sp/>incomplete<sp/>type<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;Result\&apos;<sp/>\(aka<sp/>\&apos;void\&apos;\)(\r)?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;note:<sp/>in<sp/>instantiation<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;of<sp/>function<sp/>template<sp/>specialization<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;testing::internal::ReturnAction&lt;(?P&lt;return_type&gt;.*)&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;::operator<sp/>Action&lt;void<sp/>\(.*\)&gt;\&apos;<sp/>requested<sp/>here&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>clang_regex2<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;error:<sp/>field<sp/>has<sp/>incomplete<sp/>type<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;Result\&apos;<sp/>\(aka<sp/>\&apos;void\&apos;\)(\r)?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;note:<sp/>in<sp/>instantiation<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;of<sp/>function<sp/>template<sp/>specialization<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;testing::internal::DoBothAction&lt;.*&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;::operator<sp/>Action&lt;(?P&lt;return_type&gt;.*)<sp/>\(.*\)&gt;\&apos;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;requested<sp/>here&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral">You<sp/>are<sp/>using<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>%(return_type)s,<sp/>but<sp/>it<sp/>needs<sp/>to<sp/>return</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral">void.<sp/><sp/>Please<sp/>use<sp/>a<sp/>void-returning<sp/>action<sp/>instead.</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral">All<sp/>actions<sp/>but<sp/>the<sp/>last<sp/>in<sp/>DoAll(...)<sp/>must<sp/>return<sp/>void.<sp/><sp/>Perhaps<sp/>you<sp/>need</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral">to<sp/>re-arrange<sp/>the<sp/>order<sp/>of<sp/>actions<sp/>in<sp/>a<sp/>DoAll(),<sp/>if<sp/>you<sp/>are<sp/>using<sp/>one?&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;NRN&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Need<sp/>to<sp/>Return<sp/>Nothing&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;return_type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;*something*&apos;</highlight><highlight class="normal">}),</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex1,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex2,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_IncompleteByReferenceArgumentDiagnoser(msg):</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>IBRA<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;instantiated<sp/>from<sp/>here\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*gtest-printers\.h.*error:<sp/>invalid<sp/>application<sp/>of<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;sizeof\&apos;<sp/>to<sp/>incomplete<sp/>type<sp/>\&apos;(?P&lt;type&gt;.*)\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;.*gtest-printers\.h.*error:<sp/>invalid<sp/>application<sp/>of<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;sizeof\&apos;<sp/>to<sp/>an<sp/>incomplete<sp/>type<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;(?P&lt;type&gt;.*)(<sp/>const)?\&apos;\r?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;note:<sp/>in<sp/>instantiation<sp/>of<sp/>member<sp/>function<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;testing::internal2::TypeWithoutFormatter&lt;.*&gt;::&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;PrintValue\&apos;<sp/>requested<sp/>here&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral">In<sp/>order<sp/>to<sp/>mock<sp/>this<sp/>function,<sp/>Google<sp/>Mock<sp/>needs<sp/>to<sp/>see<sp/>the<sp/>definition</highlight></codeline>
<codeline lineno="272"><highlight class="stringliteral">of<sp/>type<sp/>&quot;%(type)s&quot;<sp/>-<sp/>declaration<sp/>alone<sp/>is<sp/>not<sp/>enough.<sp/><sp/>Either<sp/>#include</highlight></codeline>
<codeline lineno="273"><highlight class="stringliteral">the<sp/>header<sp/>that<sp/>defines<sp/>it,<sp/>or<sp/>change<sp/>the<sp/>argument<sp/>to<sp/>be<sp/>passed</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral">by<sp/>pointer.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight><highlight class="stringliteral">&apos;IBRA&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Incomplete<sp/>By-Reference<sp/>Argument<sp/>Type&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_OverloadedFunctionMatcherDiagnoser(msg):</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>OFM<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;call<sp/>to<sp/>\&apos;Truly\(&lt;unresolved<sp/>overloaded<sp/>function<sp/>type&gt;\)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(_CLANG_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;call<sp/>to<sp/>\&apos;Truly&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral">The<sp/>argument<sp/>you<sp/>gave<sp/>to<sp/>Truly()<sp/>is<sp/>an<sp/>overloaded<sp/>function.<sp/><sp/>Please<sp/>tell</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral">your<sp/>compiler<sp/>which<sp/>overloaded<sp/>version<sp/>you<sp/>want<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral">For<sp/>example,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>the<sp/>version<sp/>whose<sp/>signature<sp/>is</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral"><sp/><sp/>bool<sp/>Foo(int<sp/>n);</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral">you<sp/>should<sp/>write</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral"><sp/><sp/>Truly(static_cast&lt;bool<sp/>(*)(int<sp/>n)&gt;(Foo))&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight><highlight class="stringliteral">&apos;OFM&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Overloaded<sp/>Function<sp/>Matcher&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_OverloadedFunctionActionDiagnoser(msg):</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>OFA<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>call<sp/>to<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;Invoke\(&lt;unresolved<sp/>overloaded<sp/>function<sp/>type&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(_CLANG_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>no<sp/>matching<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;function<sp/>for<sp/>call<sp/>to<sp/>\&apos;Invoke\&apos;\r?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*\bgmock-generated-actions\.h:\d+:\d+:\s+&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;note:<sp/>candidate<sp/>template<sp/>ignored:\s+&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;couldn\&apos;t<sp/>infer<sp/>template<sp/>argument<sp/>\&apos;FunctionImpl\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="315"><highlight class="stringliteral">Function<sp/>you<sp/>are<sp/>passing<sp/>to<sp/>Invoke<sp/>is<sp/>overloaded.<sp/><sp/>Please<sp/>tell<sp/>your<sp/>compiler</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral">which<sp/>overloaded<sp/>version<sp/>you<sp/>want<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral">For<sp/>example,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>the<sp/>version<sp/>whose<sp/>signature<sp/>is</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"><sp/><sp/>bool<sp/>MyFunction(int<sp/>n,<sp/>double<sp/>x);</highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral">you<sp/>should<sp/>write<sp/>something<sp/>like</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/>Invoke(static_cast&lt;bool<sp/>(*)(int<sp/>n,<sp/>double<sp/>x)&gt;(MyFunction))&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight><highlight class="stringliteral">&apos;OFA&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Overloaded<sp/>Function<sp/>Action&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_OverloadedMethodActionDiagnoser(msg):</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>OMA<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;call<sp/>to<sp/>\&apos;Invoke\(.+,<sp/>&lt;unresolved<sp/>overloaded<sp/>function<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;type&gt;\)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(_CLANG_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>no<sp/>matching<sp/>function<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;for<sp/>call<sp/>to<sp/>\&apos;Invoke\&apos;\r?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*\bgmock-generated-actions\.h:\d+:\d+:<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;note:<sp/>candidate<sp/>function<sp/>template<sp/>not<sp/>viable:<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;requires<sp/>.*,<sp/>but<sp/>2<sp/>(arguments<sp/>)?were<sp/>provided&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral">The<sp/>second<sp/>argument<sp/>you<sp/>gave<sp/>to<sp/>Invoke()<sp/>is<sp/>an<sp/>overloaded<sp/>method.<sp/><sp/>Please</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral">tell<sp/>your<sp/>compiler<sp/>which<sp/>overloaded<sp/>version<sp/>you<sp/>want<sp/>to<sp/>use.</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral">For<sp/>example,<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>the<sp/>version<sp/>whose<sp/>signature<sp/>is</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral"><sp/><sp/>class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bool<sp/>Bar(int<sp/>n,<sp/>double<sp/>x);</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral">you<sp/>should<sp/>write<sp/>something<sp/>like</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral"><sp/><sp/>Invoke(foo,<sp/>static_cast&lt;bool<sp/>(Foo::*)(int<sp/>n,<sp/>double<sp/>x)&gt;(&amp;Foo::Bar))&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight><highlight class="stringliteral">&apos;OMA&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Overloaded<sp/>Method<sp/>Action&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_MockObjectPointerDiagnoser(msg):</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>MOP<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>request<sp/>for<sp/>member<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;gmock_(?P&lt;method&gt;.+)\&apos;<sp/>in<sp/>\&apos;(?P&lt;mock_object&gt;.+)\&apos;,<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;which<sp/>is<sp/>of<sp/>non-class<sp/>type<sp/>\&apos;(.*::)*(?P&lt;class_name&gt;.+)\*\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(_CLANG_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>member<sp/>reference<sp/>type<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;(?P&lt;class_name&gt;.*?)<sp/>*\&apos;<sp/>is<sp/>a<sp/>pointer;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(did<sp/>you<sp/>mean|maybe<sp/>you<sp/>meant)<sp/>to<sp/>use<sp/>\&apos;-&gt;\&apos;\?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral">The<sp/>first<sp/>argument<sp/>to<sp/>ON_CALL()<sp/>and<sp/>EXPECT_CALL()<sp/>must<sp/>be<sp/>a<sp/>mock<sp/>*object*,</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral">not<sp/>a<sp/>*pointer*<sp/>to<sp/>it.<sp/><sp/>Please<sp/>write<sp/>&apos;*(%(mock_object)s)&apos;<sp/>instead<sp/>of</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral">&apos;%(mock_object)s&apos;<sp/>as<sp/>your<sp/>first<sp/>argument.</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral">For<sp/>example,<sp/>given<sp/>the<sp/>mock<sp/>class:</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral"><sp/><sp/>class<sp/>%(class_name)s<sp/>:<sp/>public<sp/>...<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>MOCK_METHOD0(%(method)s,<sp/>...);</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral"><sp/><sp/>};</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral">and<sp/>the<sp/>following<sp/>mock<sp/>instance:</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral"><sp/><sp/>%(class_name)s*<sp/>mock_ptr<sp/>=<sp/>...</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral">you<sp/>should<sp/>use<sp/>the<sp/>EXPECT_CALL<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"><sp/><sp/>EXPECT_CALL(*mock_ptr,<sp/>%(method)s(...));&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOP&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Mock<sp/>Object<sp/>Pointer&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;mock_object&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;mock_object&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;method&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;method&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;class_name&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;%(class_name)s&apos;</highlight><highlight class="normal">})],</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_NeedToUseSymbolDiagnoser(msg):</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>NUS<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>\&apos;(?P&lt;symbol&gt;.+)\&apos;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(was<sp/>not<sp/>declared<sp/>in<sp/>this<sp/>scope|has<sp/>not<sp/>been<sp/>declared)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(_CLANG_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>(use<sp/>of<sp/>undeclared<sp/>identifier|unknown<sp/>type<sp/>name|&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;no<sp/>template<sp/>named)<sp/>\&apos;(?P&lt;symbol&gt;[^\&apos;]+)\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral">&apos;%(symbol)s&apos;<sp/>is<sp/>defined<sp/>by<sp/>Google<sp/>Mock<sp/>in<sp/>the<sp/>testing<sp/>namespace.</highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral">Did<sp/>you<sp/>forget<sp/>to<sp/>write</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"><sp/><sp/>using<sp/>testing::%(symbol)s;</highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral">?&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>m<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(list(_FindAllMatches(gcc_regex,<sp/>msg))<sp/>+</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list(_FindAllMatches(clang_regex,<sp/>msg))):</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>symbol<sp/>=<sp/>m.groupdict()[</highlight><highlight class="stringliteral">&apos;symbol&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>symbol<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_COMMON_GMOCK_SYMBOLS:</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;NUS&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Need<sp/>to<sp/>Use<sp/>Symbol&apos;</highlight><highlight class="normal">,<sp/>diagnosis<sp/>%<sp/>m.groupdict())</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_NeedToUseReturnNullDiagnoser(msg):</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>NRNULL<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(</highlight><highlight class="stringliteral">&apos;instantiated<sp/>from<sp/>\&apos;testing::internal::ReturnAction&lt;R&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;::operator<sp/>testing::Action&lt;Func&gt;\(\)<sp/>const.*\n&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;instantiated<sp/>from<sp/>here\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>call<sp/>to<sp/>\&apos;ImplicitCast_\(&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(:?long<sp/>)?int&amp;\)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(</highlight><highlight class="stringliteral">r&apos;\bgmock-actions.h:.*<sp/>error:<sp/>no<sp/>matching<sp/>function<sp/>for<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;call<sp/>to<sp/>\&apos;ImplicitCast_\&apos;\r?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;note:<sp/>in<sp/>instantiation<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;of<sp/>function<sp/>template<sp/>specialization<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;testing::internal::ReturnAction&lt;(int|long)&gt;::operator<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;Action&lt;(?P&lt;type&gt;.*)\(\)&gt;\&apos;<sp/>requested<sp/>here&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral">You<sp/>are<sp/>probably<sp/>calling<sp/>Return(NULL)<sp/>and<sp/>the<sp/>compiler<sp/>isn&apos;t<sp/>sure<sp/>how<sp/>to<sp/>turn</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral">NULL<sp/>into<sp/>%(type)s.<sp/>Use<sp/>ReturnNull()<sp/>instead.</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral">Note:<sp/>the<sp/>line<sp/>number<sp/>may<sp/>be<sp/>off;<sp/>please<sp/>fix<sp/>all<sp/>instances<sp/>of<sp/>Return(NULL).&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;NRNULL&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Need<sp/>to<sp/>use<sp/>ReturnNull&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[(clang_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gcc_regex,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;the<sp/>right<sp/>type&apos;</highlight><highlight class="normal">})],</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_TypeInTemplatedBaseDiagnoser(msg):</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>TTB<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>version<sp/>works<sp/>when<sp/>the<sp/>type<sp/>is<sp/>used<sp/>as<sp/>the<sp/>mock<sp/>function&apos;s<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>gcc_4_3_1_regex_type_in_retval<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;In<sp/>member<sp/>function<sp/>\&apos;int<sp/>.*\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>_GCC_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>a<sp/>function<sp/>call<sp/>cannot<sp/>appear<sp/>in<sp/>a<sp/>constant-expression&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>gcc_4_4_0_regex_type_in_retval<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>a<sp/>function<sp/>call<sp/>cannot<sp/>appear<sp/>in<sp/>a<sp/>constant-expression&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_GCC_FILE_LINE_RE<sp/>+<sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>template<sp/>argument<sp/>1<sp/>is<sp/>invalid\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>version<sp/>works<sp/>when<sp/>the<sp/>type<sp/>is<sp/>used<sp/>as<sp/>the<sp/>mock<sp/>function&apos;s<sp/>sole</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>parameter<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>gcc_regex_type_of_sole_param<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_GCC_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>\&apos;(?P&lt;type&gt;.+)\&apos;<sp/>was<sp/>not<sp/>declared<sp/>in<sp/>this<sp/>scope\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*error:<sp/>template<sp/>argument<sp/>1<sp/>is<sp/>invalid\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>This<sp/>version<sp/>works<sp/>when<sp/>the<sp/>type<sp/>is<sp/>used<sp/>as<sp/>a<sp/>parameter<sp/>of<sp/>a<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>function<sp/>that<sp/>has<sp/>multiple<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>gcc_regex_type_of_a_param<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>expected<sp/>`;\&apos;<sp/>before<sp/>\&apos;::\&apos;<sp/>token\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_GCC_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>\&apos;(?P&lt;type&gt;.+)\&apos;<sp/>was<sp/>not<sp/>declared<sp/>in<sp/>this<sp/>scope\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*error:<sp/>template<sp/>argument<sp/>1<sp/>is<sp/>invalid\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*error:<sp/>\&apos;.+\&apos;<sp/>was<sp/>not<sp/>declared<sp/>in<sp/>this<sp/>scope&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>clang_regex_type_of_retval_or_sole_param<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>use<sp/>of<sp/>undeclared<sp/>identifier<sp/>\&apos;(?P&lt;type&gt;.*)\&apos;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(?P=file):(?P=line):\d+:<sp/>error:<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;non-friend<sp/>class<sp/>member<sp/>\&apos;Result\&apos;<sp/>cannot<sp/>have<sp/>a<sp/>qualified<sp/>name&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>clang_regex_type_of_a_param<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>C\+\+<sp/>requires<sp/>a<sp/>type<sp/>specifier<sp/>for<sp/>all<sp/>declarations\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(?P=file):(?P=line):(?P=column):<sp/>error:<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;C\+\+<sp/>requires<sp/>a<sp/>type<sp/>specifier<sp/>for<sp/>all<sp/>declarations&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>clang_regex_unknown_type<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_CLANG_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>unknown<sp/>type<sp/>name<sp/>\&apos;(?P&lt;type&gt;[^\&apos;]+)\&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral">In<sp/>a<sp/>mock<sp/>class<sp/>template,<sp/>types<sp/>or<sp/>typedefs<sp/>defined<sp/>in<sp/>the<sp/>base<sp/>class</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral">template<sp/>are<sp/>*not*<sp/>automatically<sp/>visible.<sp/><sp/>This<sp/>is<sp/>how<sp/>C++<sp/>works.<sp/><sp/>Before</highlight></codeline>
<codeline lineno="489"><highlight class="stringliteral">you<sp/>can<sp/>use<sp/>a<sp/>type<sp/>or<sp/>typedef<sp/>named<sp/>%(type)s<sp/>defined<sp/>in<sp/>base<sp/>class<sp/>Base&lt;T&gt;,<sp/>you</highlight></codeline>
<codeline lineno="490"><highlight class="stringliteral">need<sp/>to<sp/>make<sp/>it<sp/>visible.<sp/><sp/>One<sp/>way<sp/>to<sp/>do<sp/>it<sp/>is:</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral"><sp/><sp/>typedef<sp/>typename<sp/>Base&lt;T&gt;::%(type)s<sp/>%(type)s;&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>diag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;TTB&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Type<sp/>in<sp/>Template<sp/>Base&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_4_3_1_regex_type_in_retval,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Foo&apos;</highlight><highlight class="normal">}),</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gcc_4_4_0_regex_type_in_retval,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Foo&apos;</highlight><highlight class="normal">}),</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gcc_regex_type_of_sole_param,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gcc_regex_type_of_a_param,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex_type_of_retval_or_sole_param,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex_type_of_a_param,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;Foo&apos;</highlight><highlight class="normal">})],</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msg):</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>diag</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Avoid<sp/>overlap<sp/>with<sp/>the<sp/>NUS<sp/>pattern.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>m<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_FindAllMatches(clang_regex_unknown_type,<sp/>msg):</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>type_<sp/>=<sp/>m.groupdict()[</highlight><highlight class="stringliteral">&apos;type&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type_<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_COMMON_GMOCK_SYMBOLS:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;TTB&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Type<sp/>in<sp/>Template<sp/>Base&apos;</highlight><highlight class="normal">,<sp/>diagnosis<sp/>%<sp/>m.groupdict())</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_WrongMockMethodMacroDiagnoser(msg):</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>WMM<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*this_method_does_not_take_(?P&lt;wrong_args&gt;\d+)_argument.*\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*candidates<sp/>are.*FunctionMocker&lt;[^&gt;]+A(?P&lt;args&gt;\d+)\)&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:.*array.*negative.*r?\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(.*\n)*?&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(?P=file):(?P=line):(?P=column):<sp/>error:<sp/>too<sp/>few<sp/>arguments<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;to<sp/>function<sp/>call,<sp/>expected<sp/>(?P&lt;args&gt;\d+),<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;have<sp/>(?P&lt;wrong_args&gt;\d+)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>clang11_re<sp/>=<sp/>(_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;.*this_method_does_not_take_&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(?P&lt;wrong_args&gt;\d+)_argument.*&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral">You<sp/>are<sp/>using<sp/>MOCK_METHOD%(wrong_args)s<sp/>to<sp/>define<sp/>a<sp/>mock<sp/>method<sp/>that<sp/>has</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral">%(args)s<sp/>arguments.<sp/>Use<sp/>MOCK_METHOD%(args)s<sp/>(or<sp/>MOCK_CONST_METHOD%(args)s,</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral">MOCK_METHOD%(args)s_T,<sp/>MOCK_CONST_METHOD%(args)s_T<sp/>as<sp/>appropriate)<sp/>instead.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight><highlight class="stringliteral">&apos;WMM&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Wrong<sp/>MOCK_METHODn<sp/>Macro&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang11_re,<sp/>diagnosis<sp/>%<sp/>{</highlight><highlight class="stringliteral">&apos;wrong_args&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;m&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;args&apos;</highlight><highlight class="normal">:<sp/></highlight><highlight class="stringliteral">&apos;n&apos;</highlight><highlight class="normal">}),</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_WrongParenPositionDiagnoser(msg):</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Diagnoses<sp/>the<sp/>WPP<sp/>disease,<sp/>given<sp/>the<sp/>error<sp/>messages<sp/>by<sp/>the<sp/>compiler.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>gcc_regex<sp/>=<sp/>(_GCC_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:.*testing::internal::MockSpec&lt;.*<sp/>has<sp/>no<sp/>member<sp/>named<sp/>\&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;(?P&lt;method&gt;\w+)\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>clang_regex<sp/>=<sp/>(_CLANG_NON_GMOCK_FILE_LINE_RE<sp/>+</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;error:<sp/>no<sp/>member<sp/>named<sp/>\&apos;(?P&lt;method&gt;\w+)\&apos;<sp/>in<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">r&apos;\&apos;testing::internal::MockSpec&lt;.*&gt;\&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="549"><highlight class="stringliteral">The<sp/>closing<sp/>parenthesis<sp/>of<sp/>ON_CALL<sp/>or<sp/>EXPECT_CALL<sp/>should<sp/>be<sp/>*before*</highlight></codeline>
<codeline lineno="550"><highlight class="stringliteral">&quot;.%(method)s&quot;.<sp/><sp/>For<sp/>example,<sp/>you<sp/>should<sp/>write:</highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"><sp/><sp/>EXPECT_CALL(my_mock,<sp/>Foo(_)).%(method)s(...);</highlight></codeline>
<codeline lineno="552"><highlight class="stringliteral">instead<sp/>of:</highlight></codeline>
<codeline lineno="553"><highlight class="stringliteral"><sp/><sp/>EXPECT_CALL(my_mock,<sp/>Foo(_).%(method)s(...));&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_GenericDiagnoser(</highlight><highlight class="stringliteral">&apos;WPP&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;Wrong<sp/>Parenthesis<sp/>Position&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[(gcc_regex,<sp/>diagnosis),</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(clang_regex,<sp/>diagnosis)],</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">_DIAGNOSERS<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>_IncompleteByReferenceArgumentDiagnoser,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>_MockObjectPointerDiagnoser,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>_NeedToReturnNothingDiagnoser,</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>_NeedToReturnReferenceDiagnoser,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>_NeedToReturnSomethingDiagnoser,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>_NeedToUseReturnNullDiagnoser,</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>_NeedToUseSymbolDiagnoser,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>_OverloadedFunctionActionDiagnoser,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>_OverloadedFunctionMatcherDiagnoser,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>_OverloadedMethodActionDiagnoser,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>_TypeInTemplatedBaseDiagnoser,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>_WrongMockMethodMacroDiagnoser,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>_WrongParenPositionDiagnoser,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>]</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Diagnose(msg):</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Generates<sp/>all<sp/>possible<sp/>diagnoses<sp/>given<sp/>the<sp/>compiler<sp/>error<sp/>message.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>msg<sp/>=<sp/>re.sub(</highlight><highlight class="stringliteral">r&apos;\x1b\[[^m]*m&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>msg)<sp/><sp/></highlight><highlight class="comment">#<sp/>Strips<sp/>all<sp/>color<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Assuming<sp/>the<sp/>string<sp/>is<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding,<sp/>replaces<sp/>the<sp/>left<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>right<sp/>single<sp/>quote<sp/>characters<sp/>with<sp/>apostrophes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>msg<sp/>=<sp/>re.sub(</highlight><highlight class="stringliteral">r&apos;(\xe2\x80\x98|\xe2\x80\x99)&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">,<sp/>msg)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>diagnoses<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>diagnoser<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>_DIAGNOSERS:</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>diag<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>diagnoser(msg):</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>diagnosis<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;[%s<sp/>-<sp/>%s]\n%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>diag</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>diagnosis<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>diagnoses:</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diagnoses.append(diagnosis)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diagnoses</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">main():</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;Google<sp/>Mock<sp/>Doctor<sp/>v%s<sp/>-<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;diagnoses<sp/>problems<sp/>in<sp/>code<sp/>using<sp/>Google<sp/>Mock.&apos;</highlight><highlight class="normal"><sp/>%<sp/>_VERSION)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>sys.stdin.isatty():</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;Please<sp/>copy<sp/>and<sp/>paste<sp/>the<sp/>compiler<sp/>errors<sp/>here.<sp/><sp/>Press<sp/>c-D<sp/>when<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;you<sp/>are<sp/>done:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;Waiting<sp/>for<sp/>compiler<sp/>errors<sp/>on<sp/>stdin<sp/>.<sp/>.<sp/>.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>msg<sp/>=<sp/>sys.stdin.read().strip()</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>diagnoses<sp/>=<sp/>Diagnose(msg)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>len(diagnoses)</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>count:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="609"><highlight class="stringliteral">Your<sp/>compiler<sp/>complained:</highlight></codeline>
<codeline lineno="610"><highlight class="stringliteral">8&lt;------------------------------------------------------------</highlight></codeline>
<codeline lineno="611"><highlight class="stringliteral">%s</highlight></codeline>
<codeline lineno="612"><highlight class="stringliteral">------------------------------------------------------------&gt;8</highlight></codeline>
<codeline lineno="613"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="614"><highlight class="stringliteral">Uh-oh,<sp/>I&apos;m<sp/>not<sp/>smart<sp/>enough<sp/>to<sp/>figure<sp/>out<sp/>what<sp/>the<sp/>problem<sp/>is.<sp/>:-(</highlight></codeline>
<codeline lineno="615"><highlight class="stringliteral">However...</highlight></codeline>
<codeline lineno="616"><highlight class="stringliteral">If<sp/>you<sp/>send<sp/>your<sp/>source<sp/>code<sp/>and<sp/>the<sp/>compiler&apos;s<sp/>error<sp/>messages<sp/>to</highlight></codeline>
<codeline lineno="617"><highlight class="stringliteral">%s,<sp/>you<sp/>can<sp/>be<sp/>helped<sp/>and<sp/>I<sp/>can<sp/>get<sp/>smarter<sp/>--</highlight></codeline>
<codeline lineno="618"><highlight class="stringliteral">win-win<sp/>for<sp/>us!&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>(msg,<sp/>_EMAIL))</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;------------------------------------------------------------&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;Your<sp/>code<sp/>appears<sp/>to<sp/>have<sp/>the<sp/>following&apos;</highlight><highlight class="normal">,)</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>count<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;%s<sp/>diseases:&apos;</highlight><highlight class="normal"><sp/>%<sp/>(count,))</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;disease:&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>d<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>diagnoses:</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>1</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>count<sp/>&gt;<sp/>1:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;\n#%s:&apos;</highlight><highlight class="normal"><sp/>%<sp/>(i,))</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(d)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="633"><highlight class="stringliteral">How<sp/>did<sp/>I<sp/>do?<sp/><sp/>If<sp/>you<sp/>think<sp/>I&apos;m<sp/>wrong<sp/>or<sp/>unhelpful,<sp/>please<sp/>send<sp/>your</highlight></codeline>
<codeline lineno="634"><highlight class="stringliteral">source<sp/>code<sp/>and<sp/>the<sp/>compiler&apos;s<sp/>error<sp/>messages<sp/>to<sp/>%s.</highlight></codeline>
<codeline lineno="635"><highlight class="stringliteral">Then<sp/>you<sp/>can<sp/>be<sp/>helped<sp/>and<sp/>I<sp/>can<sp/>get<sp/>smarter<sp/>--<sp/>I<sp/>promise<sp/>I<sp/>won&apos;t<sp/>be<sp/>upset!&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_EMAIL)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>main()</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/scripts/gmock_doctor.py"/>
  </compounddef>
</doxygen>
