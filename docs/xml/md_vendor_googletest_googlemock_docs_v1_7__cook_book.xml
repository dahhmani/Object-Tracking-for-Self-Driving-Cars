<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md_vendor_googletest_googlemock_docs_v1_7__cook_book" kind="page">
    <compoundname>md_vendor_googletest_googlemock_docs_v1_7_CookBook</compoundname>
    <title>CookBook</title>
    <detaileddescription>
<para>You can find recipes for using Google <ref refid="class_mock" kindref="compound">Mock</ref> here. If you haven&apos;t yet, please read the ForDummies document first to make sure you understand the basics.</para><para><bold>Note:</bold> Google <ref refid="class_mock" kindref="compound">Mock</ref> lives in the <computeroutput>testing</computeroutput> name space. For readability, it is recommended to write <computeroutput>using ::testing::Foo;</computeroutput> once in your file before using the name <computeroutput>Foo</computeroutput> defined by Google <ref refid="class_mock" kindref="compound">Mock</ref>. We omit such <computeroutput>using</computeroutput> statements in this page for brevity, but you should do it in your own code.</para><para><heading level="1">Creating <ref refid="class_mock" kindref="compound">Mock</ref> Classes</heading>
</para><para><heading level="2">Mocking Private or Protected Methods</heading>
</para><para>You must always put a mock method definition (<computeroutput>MOCK_METHOD*</computeroutput>) in a <computeroutput>public:</computeroutput> section of the mock class, regardless of the method being mocked being <computeroutput>public</computeroutput>, <computeroutput>protected</computeroutput>, or <computeroutput>private</computeroutput> in the base class. This allows <computeroutput>ON_CALL</computeroutput> and <computeroutput>EXPECT_CALL</computeroutput> to reference the mock function from outside of the mock class. (Yes, C++ allows a subclass to change the access level of a virtual function in the base class.) Example:</para><para><programlisting><codeline><highlight class="normal">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>Transform(Gadget*<sp/>g)<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>Resume();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>int<sp/>GetTimeOut();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Transform,<sp/>bool(Gadget*<sp/>g));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>following<sp/>must<sp/>be<sp/>in<sp/>the<sp/>public<sp/>section,<sp/>even<sp/>though<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>methods<sp/>are<sp/>protected<sp/>or<sp/>private<sp/>in<sp/>the<sp/>base<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(Resume,<sp/>void());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(GetTimeOut,<sp/>int());</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para><heading level="2">Mocking Overloaded Methods</heading>
</para><para>You can mock overloaded functions as usual. No special attention is required:</para><para><programlisting><codeline><highlight class="normal">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Must<sp/>be<sp/>virtual<sp/>as<sp/>we&apos;ll<sp/>inherit<sp/>from<sp/>Foo.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~Foo();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Overloaded<sp/>on<sp/>the<sp/>types<sp/>and/or<sp/>numbers<sp/>of<sp/>arguments.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>int<sp/>Add(Element<sp/>x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>int<sp/>Add(int<sp/>times,<sp/>Element<sp/>x);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Overloaded<sp/>on<sp/>the<sp/>const-ness<sp/>of<sp/>this<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>Bar&amp;<sp/>GetBar();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>const<sp/>Bar&amp;<sp/>GetBar()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Add,<sp/>int(Element<sp/>x));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Add,<sp/>int(int<sp/>times,<sp/>Element<sp/>x);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(GetBar,<sp/>Bar&amp;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0(GetBar,<sp/>const<sp/>Bar&amp;());</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para><bold>Note:</bold> if you don&apos;t mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use <computeroutput>using</computeroutput> to bring them in scope:</para><para><programlisting><codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>Foo::Add;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Add,<sp/>int(Element<sp/>x));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>mock<sp/>int<sp/>Add(int<sp/>times,<sp/>Element<sp/>x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para><heading level="2">Mocking Class Templates</heading>
</para><para>To mock a class template, append <computeroutput>_T</computeroutput> to the <computeroutput>MOCK_*</computeroutput> macros:</para><para><programlisting><codeline><highlight class="normal">template<sp/>&lt;typename<sp/>Elem&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>StackInterface<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Must<sp/>be<sp/>virtual<sp/>as<sp/>we&apos;ll<sp/>inherit<sp/>from<sp/>StackInterface.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~StackInterface();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>int<sp/>GetSize()<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>Push(const<sp/>Elem&amp;<sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>Elem&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MockStack<sp/>:<sp/>public<sp/>StackInterface&lt;Elem&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T(GetSize,<sp/>int());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1_T(Push,<sp/>void(const<sp/>Elem&amp;<sp/>x));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para><heading level="2">Mocking Nonvirtual Methods</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> can mock non-virtual functions to be used in what we call <emphasis>hi-perf dependency injection</emphasis>.</para><para>In this case, instead of sharing a common base class with the real class, your mock class will be <emphasis>unrelated</emphasis> to the real class, but contain methods with the same signatures. The syntax for mocking non-virtual methods is the <emphasis>same</emphasis> as mocking virtual methods:</para><para><programlisting><codeline><highlight class="normal">//<sp/>A<sp/>simple<sp/>packet<sp/>stream<sp/>class.<sp/><sp/>None<sp/>of<sp/>its<sp/>members<sp/>is<sp/>virtual.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>ConcretePacketStream<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>AppendPacket(Packet*<sp/>new_packet);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>Packet*<sp/>GetPacket(size_t<sp/>packet_number)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>size_t<sp/>NumberOfPackets()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>A<sp/>mock<sp/>packet<sp/>stream<sp/>class.<sp/><sp/>It<sp/>inherits<sp/>from<sp/>no<sp/>other,<sp/>but<sp/>defines</highlight></codeline>
<codeline><highlight class="normal">//<sp/>GetPacket()<sp/>and<sp/>NumberOfPackets().</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MockPacketStream<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1(GetPacket,<sp/>const<sp/>Packet*(size_t<sp/>packet_number));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0(NumberOfPackets,<sp/>size_t());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Note that the mock class doesn&apos;t define <computeroutput>AppendPacket()</computeroutput>, unlike the real class. That&apos;s fine as long as the test doesn&apos;t need to call it.</para><para>Next, you need a way to say that you want to use <computeroutput>ConcretePacketStream</computeroutput> in production code, and use <computeroutput>MockPacketStream</computeroutput> in tests. Since the functions are not virtual and the two classes are unrelated, you must specify your choice at <emphasis>compile time</emphasis> (as opposed to run time).</para><para>One way to do it is to templatize your code that needs to use a packet stream. More specifically, you will give your code a template type argument for the type of the packet stream. In production, you will instantiate your template with <computeroutput>ConcretePacketStream</computeroutput> as the type argument. In tests, you will instantiate the same template with <computeroutput>MockPacketStream</computeroutput>. For example, you may write:</para><para><programlisting><codeline><highlight class="normal">template<sp/>&lt;class<sp/>PacketStream&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>CreateConnection(PacketStream*<sp/>stream)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>PacketStream&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>PacketReader<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>ReadPackets(PacketStream*<sp/>stream,<sp/>size_t<sp/>packet_num);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Then you can use <computeroutput>CreateConnection&lt;ConcretePacketStream&gt;()</computeroutput> and <computeroutput>PacketReader&lt;ConcretePacketStream&gt;</computeroutput> in production code, and use <computeroutput>CreateConnection&lt;MockPacketStream&gt;()</computeroutput> and <computeroutput>PacketReader&lt;MockPacketStream&gt;</computeroutput> in tests.</para><para><programlisting><codeline><highlight class="normal">MockPacketStream<sp/>mock_stream;</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(mock_stream,<sp/>...)...;</highlight></codeline>
<codeline><highlight class="normal">..<sp/>set<sp/>more<sp/>expectations<sp/>on<sp/>mock_stream<sp/>...</highlight></codeline>
<codeline><highlight class="normal">PacketReader&lt;MockPacketStream&gt;<sp/>reader(&amp;mock_stream);</highlight></codeline>
<codeline><highlight class="normal">...<sp/>exercise<sp/>reader<sp/>...</highlight></codeline>
</programlisting></para><para><heading level="2">Mocking Free Functions</heading>
</para><para>It&apos;s possible to use Google <ref refid="class_mock" kindref="compound">Mock</ref> to mock a free function (i.e. a C-style function or a static method). You just need to rewrite your code to use an interface (abstract class).</para><para>Instead of calling a free function (say, <computeroutput>OpenFile</computeroutput>) directly, introduce an interface for it and have a concrete subclass that calls the free function:</para><para><programlisting><codeline><highlight class="normal">class<sp/>FileInterface<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>Open(const<sp/>char*<sp/>path,<sp/>const<sp/>char*<sp/>mode)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>File<sp/>:<sp/>public<sp/>FileInterface<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>Open(const<sp/>char*<sp/>path,<sp/>const<sp/>char*<sp/>mode)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>OpenFile(path,<sp/>mode);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Your code should talk to <computeroutput>FileInterface</computeroutput> to open a file. Now it&apos;s easy to mock out the function.</para><para>This may seem much hassle, but in practice you often have multiple related functions that you can put in the same interface, so the per-function syntactic overhead will be much lower.</para><para>If you are concerned about the performance overhead incurred by virtual functions, and profiling confirms your concern, you can combine this with the recipe for mocking non-virtual methods.</para><para><heading level="2">The Nice, the Strict, and the Naggy</heading>
</para><para>If a mock method has no <computeroutput>EXPECT_CALL</computeroutput> spec but is called, Google <ref refid="class_mock" kindref="compound">Mock</ref> will print a warning about the &quot;uninteresting call&quot;. The rationale is:</para><para><itemizedlist>
<listitem><para>New methods may be added to an interface after a test is written. We shouldn&apos;t fail a test just because a method it doesn&apos;t know about is called.</para></listitem><listitem><para>However, this may also mean there&apos;s a bug in the test, so Google <ref refid="class_mock" kindref="compound">Mock</ref> shouldn&apos;t be silent either. If the user believes these calls are harmless, he can add an <computeroutput>EXPECT_CALL()</computeroutput> to suppress the warning.</para></listitem></itemizedlist>
</para><para>However, sometimes you may want to suppress all &quot;uninteresting call&quot; warnings, while sometimes you may want the opposite, i.e. to treat all of them as errors. Google <ref refid="class_mock" kindref="compound">Mock</ref> lets you make the decision on a per-mock-object basis.</para><para>Suppose your test uses a mock class <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput>:</para><para><programlisting><codeline><highlight class="normal">TEST(...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>mock_foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo,<sp/>DoThis());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>code<sp/>that<sp/>uses<sp/>mock_foo<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>If a method of <computeroutput>mock_foo</computeroutput> other than <computeroutput>DoThis()</computeroutput> is called, it will be reported by Google <ref refid="class_mock" kindref="compound">Mock</ref> as a warning. However, if you rewrite your test to use <computeroutput>NiceMock&lt;<ref refid="class_mock_foo" kindref="compound">MockFoo</ref>&gt;</computeroutput> instead, the warning will be gone, resulting in a cleaner test output:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::NiceMock;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>NiceMock&lt;MockFoo&gt;<sp/>mock_foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo,<sp/>DoThis());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>code<sp/>that<sp/>uses<sp/>mock_foo<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><computeroutput>NiceMock&lt;<ref refid="class_mock_foo" kindref="compound">MockFoo</ref>&gt;</computeroutput> is a subclass of <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput>, so it can be used wherever <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput> is accepted.</para><para>It also works if <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput>&apos;s constructor takes some arguments, as <computeroutput>NiceMock&lt;<ref refid="class_mock_foo" kindref="compound">MockFoo</ref>&gt;</computeroutput> &quot;inherits&quot; <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput>&apos;s constructors:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::NiceMock;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>NiceMock&lt;MockFoo&gt;<sp/>mock_foo(5,<sp/>&quot;hi&quot;);<sp/><sp/>//<sp/>Calls<sp/>MockFoo(5,<sp/>&quot;hi&quot;).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo,<sp/>DoThis());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>code<sp/>that<sp/>uses<sp/>mock_foo<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The usage of <computeroutput>StrictMock</computeroutput> is similar, except that it makes all uninteresting calls failures:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::StrictMock;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>StrictMock&lt;MockFoo&gt;<sp/>mock_foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo,<sp/>DoThis());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>code<sp/>that<sp/>uses<sp/>mock_foo<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>test<sp/>will<sp/>fail<sp/>if<sp/>a<sp/>method<sp/>of<sp/>mock_foo<sp/>other<sp/>than<sp/>DoThis()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>is<sp/>called.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>There are some caveats though (I don&apos;t like them just as much as the next guy, but sadly they are side effects of C++&apos;s limitations):</para><para><orderedlist>
<listitem><para><computeroutput>NiceMock&lt;<ref refid="class_mock_foo" kindref="compound">MockFoo</ref>&gt;</computeroutput> and <computeroutput>StrictMock&lt;<ref refid="class_mock_foo" kindref="compound">MockFoo</ref>&gt;</computeroutput> only work for mock methods defined using the <computeroutput>MOCK_METHOD*</computeroutput> family of macros <bold>directly</bold> in the <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput> class. If a mock method is defined in a <bold>base class</bold> of <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput>, the &quot;nice&quot; or &quot;strict&quot; modifier may not affect it, depending on the compiler. In particular, nesting <computeroutput>NiceMock</computeroutput> and <computeroutput>StrictMock</computeroutput> (e.g. <computeroutput>NiceMock&lt;StrictMock&lt;<ref refid="class_mock_foo" kindref="compound">MockFoo</ref>&gt; &gt;</computeroutput>) is <bold>not</bold> supported.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>The constructors of the base mock (<computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput>) cannot have arguments passed by non-const reference, which happens to be banned by the <ulink url="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">Google C++ style guide</ulink>.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>During the constructor or destructor of <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput>, the mock object is <emphasis>not</emphasis> nice or strict. This may cause surprises if the constructor or destructor calls a mock method on <computeroutput>this</computeroutput> object. (This behavior, however, is consistent with C++&apos;s general rule: if a constructor or destructor calls a virtual method of <computeroutput>this</computeroutput> object, that method is treated as non-virtual. In other words, to the base class&apos;s constructor or destructor, <computeroutput>this</computeroutput> object behaves like an instance of the base class, not the derived class. This rule is required for safety. Otherwise a base constructor may use members of a derived class before they are initialized, or a base destructor may use members of a derived class after they have been destroyed.)</para></listitem></orderedlist>
</para><para>Finally, you should be <bold>very cautious</bold> about when to use naggy or strict mocks, as they tend to make tests more brittle and harder to maintain. When you refactor your code without changing its externally visible behavior, ideally you should&apos;t need to update any tests. If your code interacts with a naggy mock, however, you may start to get spammed with warnings as the result of your change. Worse, if your code interacts with a strict mock, your tests may start to fail and you&apos;ll be forced to fix them. Our general recommendation is to use nice mocks (not yet the default) most of the time, use naggy mocks (the current default) when developing or debugging tests, and use strict mocks only as the last resort.</para><para><heading level="2">Simplifying the <ref refid="class_interface" kindref="compound">Interface</ref> without Breaking Existing Code</heading>
</para><para>Sometimes a method has a long list of arguments that is mostly uninteresting. For example,</para><para><programlisting><codeline><highlight class="normal">class<sp/>LogSink<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>send(LogSeverity<sp/>severity,<sp/>const<sp/>char*<sp/>full_filename,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>base_filename,<sp/>int<sp/>line,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>struct<sp/>tm*<sp/>tm_time,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>message,<sp/>size_t<sp/>message_len)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>This method&apos;s argument list is lengthy and hard to work with (let&apos;s say that the <computeroutput>message</computeroutput> argument is not even 0-terminated). If we mock it as is, using the mock will be awkward. If, however, we try to simplify this interface, we&apos;ll need to fix all clients depending on it, which is often infeasible.</para><para>The trick is to re-dispatch the method in the mock class:</para><para><programlisting><codeline><highlight class="normal">class<sp/>ScopedMockLog<sp/>:<sp/>public<sp/>LogSink<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>send(LogSeverity<sp/>severity,<sp/>const<sp/>char*<sp/>full_filename,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>base_filename,<sp/>int<sp/>line,<sp/>const<sp/>tm*<sp/>tm_time,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>message,<sp/>size_t<sp/>message_len)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>We<sp/>are<sp/>only<sp/>interested<sp/>in<sp/>the<sp/>log<sp/>severity,<sp/>full<sp/>file<sp/>name,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>log<sp/>message.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Log(severity,<sp/>full_filename,<sp/>std::string(message,<sp/>message_len));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Implements<sp/>the<sp/>mock<sp/>method:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/><sp/><sp/>void<sp/>Log(LogSeverity<sp/>severity,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string&amp;<sp/>file_path,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string&amp;<sp/>message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD3(Log,<sp/>void(LogSeverity<sp/>severity,<sp/>const<sp/>string&amp;<sp/>file_path,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string&amp;<sp/>message));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>By defining a new mock method with a trimmed argument list, we make the mock class much more user-friendly.</para><para><heading level="2">Alternative to Mocking Concrete Classes</heading>
</para><para>Often you may find yourself using classes that don&apos;t implement interfaces. In order to test your code that uses such a class (let&apos;s call it <computeroutput>Concrete</computeroutput>), you may be tempted to make the methods of <computeroutput>Concrete</computeroutput> virtual and then mock it.</para><para>Try not to do that.</para><para>Making a non-virtual function virtual is a big decision. It creates an extension point where subclasses can tweak your class&apos; behavior. This weakens your control on the class because now it&apos;s harder to maintain the class&apos; invariants. You should make a function virtual only when there is a valid reason for a subclass to override it.</para><para>Mocking concrete classes directly is problematic as it creates a tight coupling between the class and the tests - any small change in the class may invalidate your tests and make test maintenance a pain.</para><para>To avoid such problems, many programmers have been practicing &quot;coding
to interfaces&quot;: instead of talking to the <computeroutput>Concrete</computeroutput> class, your code would define an interface and talk to it. Then you implement that interface as an adaptor on top of <computeroutput>Concrete</computeroutput>. In tests, you can easily mock that interface to observe how your code is doing.</para><para>This technique incurs some overhead:</para><para><itemizedlist>
<listitem><para>You pay the cost of virtual function calls (usually not a problem).</para></listitem><listitem><para>There is more abstraction for the programmers to learn.</para></listitem></itemizedlist>
</para><para>However, it can also bring significant benefits in addition to better testability:</para><para><itemizedlist>
<listitem><para><computeroutput>Concrete</computeroutput>&apos;s API may not fit your problem domain very well, as you may not be the only client it tries to serve. By designing your own interface, you have a chance to tailor it to your need - you may add higher-level functionalities, rename stuff, etc instead of just trimming the class. This allows you to write your code (user of the interface) in a more natural way, which means it will be more readable, more maintainable, and you&apos;ll be more productive.</para></listitem><listitem><para>If <computeroutput>Concrete</computeroutput>&apos;s implementation ever has to change, you don&apos;t have to rewrite everywhere it is used. Instead, you can absorb the change in your implementation of the interface, and your other code and tests will be insulated from this change.</para></listitem></itemizedlist>
</para><para>Some people worry that if everyone is practicing this technique, they will end up writing lots of redundant code. This concern is totally understandable. However, there are two reasons why it may not be the case:</para><para><itemizedlist>
<listitem><para>Different projects may need to use <computeroutput>Concrete</computeroutput> in different ways, so the best interfaces for them will be different. Therefore, each of them will have its own domain-specific interface on top of <computeroutput>Concrete</computeroutput>, and they will not be the same code.</para></listitem><listitem><para>If enough projects want to use the same interface, they can always share it, just like they have been sharing <computeroutput>Concrete</computeroutput>. You can check in the interface and the adaptor somewhere near <computeroutput>Concrete</computeroutput> (perhaps in a <computeroutput>contrib</computeroutput> sub-directory) and let many projects use it.</para></listitem></itemizedlist>
</para><para>You need to weigh the pros and cons carefully for your particular problem, but I&apos;d like to assure you that the Java community has been practicing this for a long time and it&apos;s a proven effective technique applicable in a wide variety of situations. :-)</para><para><heading level="2">Delegating Calls to a Fake</heading>
</para><para>Some times you have a non-trivial fake implementation of an interface. For example:</para><para><programlisting><codeline><highlight class="normal">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~Foo()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>char<sp/>DoThis(int<sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DoThat(const<sp/>char*<sp/>s,<sp/>int*<sp/>p)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>FakeFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>char<sp/>DoThis(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(n<sp/>&gt;<sp/>0)<sp/>?<sp/>&apos;+&apos;<sp/>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(n<sp/>&lt;<sp/>0)<sp/>?<sp/>&apos;-&apos;<sp/>:<sp/>&apos;0&apos;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DoThat(const<sp/>char*<sp/>s,<sp/>int*<sp/>p)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>strlen(s);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Now you want to mock this interface such that you can set expectations on it. However, you also want to use <computeroutput>FakeFoo</computeroutput> for the default behavior, as duplicating it in the mock object is, well, a lot of work.</para><para>When you define the mock class using Google <ref refid="class_mock" kindref="compound">Mock</ref>, you can have it delegate its default action to a fake class you already have, using this pattern:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Normal<sp/>mock<sp/>method<sp/>definitions<sp/>using<sp/>Google<sp/>Mock.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoThis,<sp/>char(int<sp/>n));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(DoThat,<sp/>void(const<sp/>char*<sp/>s,<sp/>int*<sp/>p));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Delegates<sp/>the<sp/>default<sp/>actions<sp/>of<sp/>the<sp/>methods<sp/>to<sp/>a<sp/>FakeFoo<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>must<sp/>be<sp/>called<sp/>*before*<sp/>the<sp/>custom<sp/>ON_CALL()<sp/>statements.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>DelegateToFake()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ON_CALL(*this,<sp/>DoThis(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(&amp;fake_,<sp/>&amp;FakeFoo::DoThis));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ON_CALL(*this,<sp/>DoThat(_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(&amp;fake_,<sp/>&amp;FakeFoo::DoThat));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FakeFoo<sp/>fake_;<sp/><sp/>//<sp/>Keeps<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>fake<sp/>in<sp/>the<sp/>mock.</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>With that, you can use <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput> in your tests as usual. Just remember that if you don&apos;t explicitly set an action in an <computeroutput>ON_CALL()</computeroutput> or <computeroutput>EXPECT_CALL()</computeroutput>, the fake will be called upon to do it:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(AbcTest,<sp/>Xyz)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.DelegateToFake();<sp/>//<sp/>Enables<sp/>the<sp/>fake<sp/>for<sp/>delegation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Put<sp/>your<sp/>ON_CALL(foo,<sp/>...)s<sp/>here,<sp/>if<sp/>any.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>No<sp/>action<sp/>specified,<sp/>meaning<sp/>to<sp/>use<sp/>the<sp/>default<sp/>action.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThat(_,<sp/>_));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(&apos;+&apos;,<sp/>foo.DoThis(5));<sp/><sp/>//<sp/>FakeFoo::DoThis()<sp/>is<sp/>invoked.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.DoThat(&quot;Hi&quot;,<sp/>&amp;n);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>FakeFoo::DoThat()<sp/>is<sp/>invoked.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold>Some tips:</bold></para><para><itemizedlist>
<listitem><para>If you want, you can still override the default action by providing your own <computeroutput>ON_CALL()</computeroutput> or using <computeroutput>.WillOnce()</computeroutput> / <computeroutput>.WillRepeatedly()</computeroutput> in <computeroutput>EXPECT_CALL()</computeroutput>.</para></listitem><listitem><para>In <computeroutput>DelegateToFake()</computeroutput>, you only need to delegate the methods whose fake implementation you intend to use.</para></listitem><listitem><para>The general technique discussed here works for overloaded methods, but you&apos;ll need to tell the compiler which version you mean. To disambiguate a mock function (the one you specify inside the parentheses of <computeroutput>ON_CALL()</computeroutput>), see the &quot;Selecting Between Overloaded Functions&quot; section on this page; to disambiguate a fake function (the one you place inside <computeroutput>Invoke()</computeroutput>), use a <computeroutput>static_cast</computeroutput> to specify the function&apos;s type. For instance, if class <computeroutput>Foo</computeroutput> has methods <computeroutput>char DoThis(int n)</computeroutput> and <computeroutput>bool DoThis(double x) const</computeroutput>, and you want to invoke the latter, you need to write <computeroutput>Invoke(&amp;fake_, static_cast&lt;bool (FakeFoo::*)(double) const&gt;(&amp;FakeFoo::DoThis))</computeroutput> instead of <computeroutput>Invoke(&amp;fake_, &amp;FakeFoo::DoThis)</computeroutput> (The strange-looking thing inside the angled brackets of <computeroutput>static_cast</computeroutput> is the type of a function pointer to the second <computeroutput>DoThis()</computeroutput> method.).</para></listitem><listitem><para>Having to mix a mock and a fake is often a sign of something gone wrong. Perhaps you haven&apos;t got used to the interaction-based way of testing yet. Or perhaps your interface is taking on too many roles and should be split up. Therefore, <bold>don&apos;t abuse this</bold>. We would only recommend to do it as an intermediate step when you are refactoring your code.</para></listitem></itemizedlist>
</para><para>Regarding the tip on mixing a mock and a fake, here&apos;s an example on why it may be a bad sign: Suppose you have a class <computeroutput>System</computeroutput> for low-level system operations. In particular, it does file and I/O operations. And suppose you want to test how your code uses <computeroutput>System</computeroutput> to do I/O, and you just want the file operations to work normally. If you mock out the entire <computeroutput>System</computeroutput> class, you&apos;ll have to provide a fake implementation for the file operation part, which suggests that <computeroutput>System</computeroutput> is taking on too many roles.</para><para>Instead, you can define a <computeroutput>FileOps</computeroutput> interface and an <computeroutput>IOOps</computeroutput> interface and split <computeroutput>System</computeroutput>&apos;s functionalities into the two. Then you can mock <computeroutput>IOOps</computeroutput> without mocking <computeroutput>FileOps</computeroutput>.</para><para><heading level="2">Delegating Calls to a Real Object</heading>
</para><para>When using testing doubles (mocks, fakes, stubs, and etc), sometimes their behaviors will differ from those of the real objects. This difference could be either intentional (as in simulating an error such that you can test the error handling code) or unintentional. If your mocks have different behaviors than the real objects by mistake, you could end up with code that passes the tests but fails in production.</para><para>You can use the <emphasis>delegating-to-real</emphasis> technique to ensure that your mock has the same behavior as the real object while retaining the ability to validate calls. This technique is very similar to the delegating-to-fake technique, the difference being that we use a real object instead of a fake. Here&apos;s an example:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::AtLeast;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>By<sp/>default,<sp/>all<sp/>calls<sp/>are<sp/>delegated<sp/>to<sp/>the<sp/>real<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ON_CALL(*this,<sp/>DoThis())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(&amp;real_,<sp/>&amp;Foo::DoThis));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ON_CALL(*this,<sp/>DoThat(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(&amp;real_,<sp/>&amp;Foo::DoThat));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(DoThis,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoThat,<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Foo<sp/>real_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>mock;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>DoThis())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>DoThat(&quot;Hi&quot;))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AtLeast(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>use<sp/>mock<sp/>in<sp/>test<sp/>...</highlight></codeline>
</programlisting></para><para>With this, Google <ref refid="class_mock" kindref="compound">Mock</ref> will verify that your code made the right calls (with the right arguments, in the right order, called the right number of times, etc), and a real object will answer the calls (so the behavior will be the same as in production). This gives you the best of both worlds.</para><para><heading level="2">Delegating Calls to a Parent Class</heading>
</para><para>Ideally, you should code to interfaces, whose methods are all pure virtual. In reality, sometimes you do need to mock a virtual method that is not pure (i.e, it already has an implementation). For example:</para><para><programlisting><codeline><highlight class="normal">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~Foo();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>Pure(int<sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>int<sp/>Concrete(const<sp/>char*<sp/>str)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Mocking<sp/>a<sp/>pure<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Pure,<sp/>void(int<sp/>n));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Mocking<sp/>a<sp/>concrete<sp/>method.<sp/><sp/>Foo::Concrete()<sp/>is<sp/>shadowed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Concrete,<sp/>int(const<sp/>char*<sp/>str));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Sometimes you may want to call <computeroutput>Foo::Concrete()</computeroutput> instead of <computeroutput>MockFoo::Concrete()</computeroutput>. Perhaps you want to do it as part of a stub action, or perhaps your test doesn&apos;t need to mock <computeroutput>Concrete()</computeroutput> at all (but it would be oh-so painful to have to define a new mock class whenever you don&apos;t need to mock one of its methods).</para><para>The trick is to leave a back door in your mock class for accessing the real methods in the base class:</para><para><programlisting><codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Mocking<sp/>a<sp/>pure<sp/>method.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Pure,<sp/>void(int<sp/>n));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Mocking<sp/>a<sp/>concrete<sp/>method.<sp/><sp/>Foo::Concrete()<sp/>is<sp/>shadowed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Concrete,<sp/>int(const<sp/>char*<sp/>str));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Use<sp/>this<sp/>to<sp/>call<sp/>Concrete()<sp/>defined<sp/>in<sp/>Foo.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>FooConcrete(const<sp/>char*<sp/>str)<sp/>{<sp/>return<sp/>Foo::Concrete(str);<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Now, you can call <computeroutput>Foo::Concrete()</computeroutput> inside an action by:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Concrete(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(&amp;foo,<sp/>&amp;MockFoo::FooConcrete));</highlight></codeline>
</programlisting></para><para>or tell the mock object that you don&apos;t want to mock <computeroutput>Concrete()</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ON_CALL(foo,<sp/>Concrete(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(&amp;foo,<sp/>&amp;MockFoo::FooConcrete));</highlight></codeline>
</programlisting></para><para>(Why don&apos;t we just write <computeroutput>Invoke(&amp;foo, &amp;Foo::Concrete)</computeroutput>? If you do that, <computeroutput>MockFoo::Concrete()</computeroutput> will be called (and cause an infinite recursion) since <computeroutput>Foo::Concrete()</computeroutput> is virtual. That&apos;s just how C++ works.)</para><para><heading level="1">Using Matchers</heading>
</para><para><heading level="2">Matching Argument Values Exactly</heading>
</para><para>You can specify exactly which arguments a mock method is expecting:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(5))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(&apos;a&apos;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThat(&quot;Hello&quot;,<sp/>bar));</highlight></codeline>
</programlisting></para><para><heading level="2">Using Simple Matchers</heading>
</para><para>You can use matchers to match arguments that have a certain property:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Ge;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::NotNull;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(Ge(5)))<sp/><sp/>//<sp/>The<sp/>argument<sp/>must<sp/>be<sp/>&gt;=<sp/>5.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(&apos;a&apos;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThat(&quot;Hello&quot;,<sp/>NotNull()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>second<sp/>argument<sp/>must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
</programlisting></para><para>A frequently used matcher is <computeroutput>_</computeroutput>, which matches anything:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::NotNull;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThat(_,<sp/>NotNull()));</highlight></codeline>
</programlisting></para><para><heading level="2">Combining Matchers</heading>
</para><para>You can build complex matchers from existing ones using <computeroutput>AllOf()</computeroutput>, <computeroutput>AnyOf()</computeroutput>, and <computeroutput>Not()</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::AllOf;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::HasSubstr;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Ne;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Not;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>argument<sp/>must<sp/>be<sp/>&gt;<sp/>5<sp/>and<sp/>!=<sp/>10.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(AllOf(Gt(5),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(10))));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>first<sp/>argument<sp/>must<sp/>not<sp/>contain<sp/>sub-string<sp/>&quot;blah&quot;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThat(Not(HasSubstr(&quot;blah&quot;)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL));</highlight></codeline>
</programlisting></para><para><heading level="2">Casting Matchers</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> matchers are statically typed, meaning that the compiler can catch your mistake if you use a matcher of the wrong type (for example, if you use <computeroutput>Eq(5)</computeroutput> to match a <computeroutput>string</computeroutput> argument). Good for you!</para><para>Sometimes, however, you know what you&apos;re doing and want the compiler to give you some slack. One example is that you have a matcher for <computeroutput>long</computeroutput> and the argument you want to match is <computeroutput>int</computeroutput>. While the two types aren&apos;t exactly the same, there is nothing really wrong with using a <computeroutput>Matcher&lt;long&gt;</computeroutput> to match an <computeroutput>int</computeroutput> - after all, we can first convert the <computeroutput>int</computeroutput> argument to a <computeroutput>long</computeroutput> before giving it to the matcher.</para><para>To support this need, Google <ref refid="class_mock" kindref="compound">Mock</ref> gives you the <computeroutput>SafeMatcherCast&lt;T&gt;(m)</computeroutput> function. It casts a matcher <computeroutput>m</computeroutput> to type <computeroutput>Matcher&lt;T&gt;</computeroutput>. To ensure safety, Google <ref refid="class_mock" kindref="compound">Mock</ref> checks that (let <computeroutput>U</computeroutput> be the type <computeroutput>m</computeroutput> accepts):</para><para><orderedlist>
<listitem><para>Type <computeroutput>T</computeroutput> can be implicitly cast to type <computeroutput>U</computeroutput>;</para></listitem></orderedlist>
<orderedlist>
<listitem><para>When both <computeroutput>T</computeroutput> and <computeroutput>U</computeroutput> are built-in arithmetic types (<computeroutput>bool</computeroutput>, integers, and floating-point numbers), the conversion from <computeroutput>T</computeroutput> to <computeroutput>U</computeroutput> is not lossy (in other words, any value representable by <computeroutput>T</computeroutput> can also be represented by <computeroutput>U</computeroutput>); and</para></listitem></orderedlist>
<orderedlist>
<listitem><para>When <computeroutput>U</computeroutput> is a reference, <computeroutput>T</computeroutput> must also be a reference (as the underlying matcher may be interested in the address of the <computeroutput>U</computeroutput> value).</para></listitem></orderedlist>
</para><para>The code won&apos;t compile if any of these conditions isn&apos;t met.</para><para>Here&apos;s one example:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::SafeMatcherCast;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>A<sp/>base<sp/>class<sp/>and<sp/>a<sp/>child<sp/>class.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Base<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Derived<sp/>:<sp/>public<sp/>Base<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoThis,<sp/>void(Derived*<sp/>derived));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;Base*&gt;<sp/>we<sp/>got<sp/>from<sp/>somewhere.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(SafeMatcherCast&lt;Derived*&gt;(m)));</highlight></codeline>
</programlisting></para><para>If you find <computeroutput>SafeMatcherCast&lt;T&gt;(m)</computeroutput> too limiting, you can use a similar function <computeroutput>MatcherCast&lt;T&gt;(m)</computeroutput>. The difference is that <computeroutput>MatcherCast</computeroutput> works as long as you can <computeroutput>static_cast</computeroutput> type <computeroutput>T</computeroutput> to type <computeroutput>U</computeroutput>.</para><para><computeroutput>MatcherCast</computeroutput> essentially lets you bypass C++&apos;s type system (<computeroutput>static_cast</computeroutput> isn&apos;t always safe as it could throw away information, for example), so be careful not to misuse/abuse it.</para><para><heading level="2">Selecting Between Overloaded Functions</heading>
</para><para>If you expect an overloaded function to be called, the compiler may need some help on which overloaded version it is.</para><para>To disambiguate functions overloaded on the const-ness of this object, use the <computeroutput>Const()</computeroutput> argument wrapper.</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::ReturnRef;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(GetBar,<sp/>Bar&amp;());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0(GetBar,<sp/>const<sp/>Bar&amp;());</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bar<sp/>bar1,<sp/>bar2;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>GetBar())<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>non-const<sp/>GetBar().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnRef(bar1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(Const(foo),<sp/>GetBar())<sp/><sp/>//<sp/>The<sp/>const<sp/>GetBar().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnRef(bar2));</highlight></codeline>
</programlisting></para><para>(<computeroutput>Const()</computeroutput> is defined by Google <ref refid="class_mock" kindref="compound">Mock</ref> and returns a <computeroutput>const</computeroutput> reference to its argument.)</para><para>To disambiguate overloaded functions with the same number of arguments but different argument types, you may need to specify the exact type of a matcher, either by wrapping your matcher in <computeroutput>Matcher&lt;type&gt;()</computeroutput>, or using a matcher whose type is fixed (<computeroutput>TypedEq&lt;type&gt;</computeroutput>, <computeroutput>An&lt;type&gt;()</computeroutput>, etc):</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::An;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Lt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Matcher;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::TypedEq;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockPrinter<sp/>:<sp/>public<sp/>Printer<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Print,<sp/>void(int<sp/>n));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Print,<sp/>void(char<sp/>c));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(PrinterTest,<sp/>Print)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockPrinter<sp/>printer;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(printer,<sp/>Print(An&lt;int&gt;()));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>void<sp/>Print(int);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(printer,<sp/>Print(Matcher&lt;int&gt;(Lt(5))));<sp/><sp/>//<sp/>void<sp/>Print(int);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(printer,<sp/>Print(TypedEq&lt;char&gt;(&apos;a&apos;)));<sp/><sp/><sp/>//<sp/>void<sp/>Print(char);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>printer.Print(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printer.Print(6);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printer.Print(&apos;a&apos;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="2">Performing Different Actions Based on the Arguments</heading>
</para><para>When a mock method is called, the <emphasis>last</emphasis> matching expectation that&apos;s still active will be selected (think &quot;newer overrides older&quot;). So, you can make a method do different things depending on its argument values like this:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Lt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>default<sp/>case.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Return(&apos;b&apos;));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>more<sp/>specific<sp/>case.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(Lt(5)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Return(&apos;a&apos;));</highlight></codeline>
</programlisting></para><para>Now, if <computeroutput>foo.DoThis()</computeroutput> is called with a value less than 5, <computeroutput>&apos;a&apos;</computeroutput> will be returned; otherwise <computeroutput>&apos;b&apos;</computeroutput> will be returned.</para><para><heading level="2">Matching Multiple Arguments as a Whole</heading>
</para><para>Sometimes it&apos;s not enough to match the arguments individually. For example, we may want to say that the first argument must be less than the second argument. The <computeroutput>With()</computeroutput> clause allows us to match all arguments of a mock function as a whole. For example,</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Lt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Ne;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>InRange(Ne(0),<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.With(Lt());</highlight></codeline>
</programlisting></para><para>says that the first argument of <computeroutput>InRange()</computeroutput> must not be 0, and must be less than the second argument.</para><para>The expression inside <computeroutput>With()</computeroutput> must be a matcher of type <computeroutput>Matcher&lt;tr1::tuple&lt;A1, ..., An&gt; &gt;</computeroutput>, where <computeroutput>A1</computeroutput>, ..., <computeroutput>An</computeroutput> are the types of the function arguments.</para><para>You can also write <computeroutput>AllArgs(m)</computeroutput> instead of <computeroutput>m</computeroutput> inside <computeroutput>.With()</computeroutput>. The two forms are equivalent, but <computeroutput>.With(AllArgs(Lt()))</computeroutput> is more readable than <computeroutput>.With(Lt())</computeroutput>.</para><para>You can use <computeroutput>Args&lt;k1, ..., kn&gt;(m)</computeroutput> to match the <computeroutput>n</computeroutput> selected arguments (as a tuple) against <computeroutput>m</computeroutput>. For example,</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::AllOf;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Args;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Lt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Blah(_,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.With(AllOf(Args&lt;0,<sp/>1&gt;(Lt()),<sp/>Args&lt;1,<sp/>2&gt;(Lt())));</highlight></codeline>
</programlisting></para><para>says that <computeroutput>Blah()</computeroutput> will be called with arguments <computeroutput>x</computeroutput>, <computeroutput>y</computeroutput>, and <computeroutput>z</computeroutput> where <computeroutput>x &lt; y &lt; z</computeroutput>.</para><para>As a convenience and example, Google <ref refid="class_mock" kindref="compound">Mock</ref> provides some matchers for 2-tuples, including the <computeroutput>Lt()</computeroutput> matcher above. See the CheatSheet for the complete list.</para><para>Note that if you want to pass the arguments to a predicate of your own (e.g. <computeroutput>.With(Args&lt;0, 1&gt;(Truly(&amp;MyPredicate)))</computeroutput>), that predicate MUST be written to take a <computeroutput>tr1::tuple</computeroutput> as its argument; Google <ref refid="class_mock" kindref="compound">Mock</ref> will pass the <computeroutput>n</computeroutput> selected arguments as <emphasis>one</emphasis> single tuple to the predicate.</para><para><heading level="2">Using Matchers as Predicates</heading>
</para><para>Have you noticed that a matcher is just a fancy predicate that also knows how to describe itself? Many existing algorithms take predicates as arguments (e.g. those defined in STL&apos;s <computeroutput>&lt;algorithm&gt;</computeroutput> header), and it would be a shame if Google <ref refid="class_mock" kindref="compound">Mock</ref> matchers are not allowed to participate.</para><para>Luckily, you can use a matcher where a unary predicate functor is expected by wrapping it inside the <computeroutput>Matches()</computeroutput> function. For example,</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;algorithm&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;vector&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">//<sp/>How<sp/>many<sp/>elements<sp/>in<sp/>v<sp/>are<sp/>&gt;=<sp/>10?</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>count<sp/>=<sp/>count_if(v.begin(),<sp/>v.end(),<sp/>Matches(Ge(10)));</highlight></codeline>
</programlisting></para><para>Since you can build complex matchers from simpler ones easily using Google <ref refid="class_mock" kindref="compound">Mock</ref>, this gives you a way to conveniently construct composite predicates (doing the same using STL&apos;s <computeroutput>&lt;functional&gt;</computeroutput> header is just painful). For example, here&apos;s a predicate that&apos;s satisfied by any number that is &gt;= 0, &lt;= 100, and != 50:</para><para><programlisting><codeline><highlight class="normal">Matches(AllOf(Ge(0),<sp/>Le(100),<sp/>Ne(50)))</highlight></codeline>
</programlisting></para><para><heading level="2">Using Matchers in Google Test Assertions</heading>
</para><para>Since matchers are basically predicates that also know how to describe themselves, there is a way to take advantage of them in <ulink url="http://code.google.com/p/googletest/">Google Test</ulink> assertions. It&apos;s called <computeroutput>ASSERT_THAT</computeroutput> and <computeroutput>EXPECT_THAT</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">ASSERT_THAT(value,<sp/>matcher);<sp/><sp/>//<sp/>Asserts<sp/>that<sp/>value<sp/>matches<sp/>matcher.</highlight></codeline>
<codeline><highlight class="normal">EXPECT_THAT(value,<sp/>matcher);<sp/><sp/>//<sp/>The<sp/>non-fatal<sp/>version.</highlight></codeline>
</programlisting></para><para>For example, in a Google Test test you can write:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&quot;gmock/gmock.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>::testing::AllOf;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Ge;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Le;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MatchesRegex;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::StartsWith;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_THAT(Foo(),<sp/>StartsWith(&quot;Hello&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_THAT(Bar(),<sp/>MatchesRegex(&quot;Line<sp/>\\d+&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_THAT(Baz(),<sp/>AllOf(Ge(5),<sp/>Le(10)));</highlight></codeline>
</programlisting></para><para>which (as you can probably guess) executes <computeroutput>Foo()</computeroutput>, <computeroutput>Bar()</computeroutput>, and <computeroutput>Baz()</computeroutput>, and verifies that:</para><para><itemizedlist>
<listitem><para><computeroutput>Foo()</computeroutput> returns a string that starts with <computeroutput>&quot;Hello&quot;</computeroutput>.</para></listitem><listitem><para><computeroutput>Bar()</computeroutput> returns a string that matches regular expression <computeroutput>&quot;Line \\d+&quot;</computeroutput>.</para></listitem><listitem><para><computeroutput>Baz()</computeroutput> returns a number in the range [5, 10].</para></listitem></itemizedlist>
</para><para>The nice thing about these macros is that <emphasis>they read like English</emphasis>. They generate informative messages too. For example, if the first <computeroutput>EXPECT_THAT()</computeroutput> above fails, the message will be something like:</para><para><programlisting><codeline><highlight class="normal">Value<sp/>of:<sp/>Foo()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>&quot;Hi,<sp/>world!&quot;</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>starts<sp/>with<sp/>&quot;Hello&quot;</highlight></codeline>
</programlisting></para><para><bold>Credit:</bold> The idea of <computeroutput>(ASSERT|EXPECT)_THAT</computeroutput> was stolen from the <ulink url="http://code.google.com/p/hamcrest/">Hamcrest</ulink> project, which adds <computeroutput>assertThat()</computeroutput> to JUnit.</para><para><heading level="2">Using Predicates as Matchers</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> provides a built-in set of matchers. In case you find them lacking, you can use an arbitray unary predicate function or functor as a matcher - as long as the predicate accepts a value of the type you want. You do this by wrapping the predicate inside the <computeroutput>Truly()</computeroutput> function, for example:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Truly;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>IsEven(int<sp/>n)<sp/>{<sp/>return<sp/>(n<sp/>%<sp/>2)<sp/>==<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Bar()<sp/>must<sp/>be<sp/>called<sp/>with<sp/>an<sp/>even<sp/>number.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(Truly(IsEven)));</highlight></codeline>
</programlisting></para><para>Note that the predicate function / functor doesn&apos;t have to return <computeroutput>bool</computeroutput>. It works as long as the return value can be used as the condition in statement <computeroutput>if (condition) ...</computeroutput>.</para><para><heading level="2">Matching Arguments that Are Not Copyable</heading>
</para><para>When you do an <computeroutput>EXPECT_CALL(mock_obj, Foo(bar))</computeroutput>, Google <ref refid="class_mock" kindref="compound">Mock</ref> saves away a copy of <computeroutput>bar</computeroutput>. When <computeroutput>Foo()</computeroutput> is called later, Google <ref refid="class_mock" kindref="compound">Mock</ref> compares the argument to <computeroutput>Foo()</computeroutput> with the saved copy of <computeroutput>bar</computeroutput>. This way, you don&apos;t need to worry about <computeroutput>bar</computeroutput> being modified or destroyed after the <computeroutput>EXPECT_CALL()</computeroutput> is executed. The same is true when you use matchers like <computeroutput>Eq(bar)</computeroutput>, <computeroutput>Le(bar)</computeroutput>, and so on.</para><para>But what if <computeroutput>bar</computeroutput> cannot be copied (i.e. has no copy constructor)? You could define your own matcher function and use it with <computeroutput>Truly()</computeroutput>, as the previous couple of recipes have shown. Or, you may be able to get away from it if you can guarantee that <computeroutput>bar</computeroutput> won&apos;t be changed after the <computeroutput>EXPECT_CALL()</computeroutput> is executed. Just tell Google <ref refid="class_mock" kindref="compound">Mock</ref> that it should save a reference to <computeroutput>bar</computeroutput>, instead of a copy of it. Here&apos;s how:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Eq;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::ByRef;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Lt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Expects<sp/>that<sp/>Foo()&apos;s<sp/>argument<sp/>==<sp/>bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_obj,<sp/>Foo(Eq(ByRef(bar))));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Expects<sp/>that<sp/>Foo()&apos;s<sp/>argument<sp/>&lt;<sp/>bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_obj,<sp/>Foo(Lt(ByRef(bar))));</highlight></codeline>
</programlisting></para><para>Remember: if you do this, don&apos;t change <computeroutput>bar</computeroutput> after the <computeroutput>EXPECT_CALL()</computeroutput>, or the result is undefined.</para><para><heading level="2">Validating a Member of an Object</heading>
</para><para>Often a mock function takes a reference to object as an argument. When matching the argument, you may not want to compare the entire object against a fixed object, as that may be over-specification. Instead, you may need to validate a certain member variable or the result of a certain getter method of the object. You can do this with <computeroutput>Field()</computeroutput> and <computeroutput>Property()</computeroutput>. More specifically,</para><para><programlisting><codeline><highlight class="normal">Field(&amp;Foo::bar,<sp/>m)</highlight></codeline>
</programlisting></para><para>is a matcher that matches a <computeroutput>Foo</computeroutput> object whose <computeroutput>bar</computeroutput> member variable satisfies matcher <computeroutput>m</computeroutput>.</para><para><programlisting><codeline><highlight class="normal">Property(&amp;Foo::baz,<sp/>m)</highlight></codeline>
</programlisting></para><para>is a matcher that matches a <computeroutput>Foo</computeroutput> object whose <computeroutput>baz()</computeroutput> method returns a value that satisfies matcher <computeroutput>m</computeroutput>.</para><para>For example:</para><para><blockquote><para>| <computeroutput>Field(&amp;Foo::number, Ge(3))</computeroutput> | Matches <computeroutput>x</computeroutput> where <computeroutput>x.number &gt;= 3</computeroutput>. | </para></blockquote>|:--------------------------<mdash/>|:--------------------------------<mdash/>| <blockquote><para>| <computeroutput>Property(&amp;Foo::name, StartsWith(&quot;John &quot;))</computeroutput> | Matches <computeroutput>x</computeroutput> where <computeroutput>x.name()</computeroutput> starts with <computeroutput>&quot;John &quot;</computeroutput>. | </para></blockquote></para><para>Note that in <computeroutput>Property(&amp;Foo::baz, ...)</computeroutput>, method <computeroutput>baz()</computeroutput> must take no argument and be declared as <computeroutput>const</computeroutput>.</para><para>BTW, <computeroutput>Field()</computeroutput> and <computeroutput>Property()</computeroutput> can also match plain pointers to objects. For instance,</para><para><programlisting><codeline><highlight class="normal">Field(&amp;Foo::number,<sp/>Ge(3))</highlight></codeline>
</programlisting></para><para>matches a plain pointer <computeroutput>p</computeroutput> where <computeroutput>p-&gt;number &gt;= 3</computeroutput>. If <computeroutput>p</computeroutput> is <computeroutput>NULL</computeroutput>, the match will always fail regardless of the inner matcher.</para><para>What if you want to validate more than one members at the same time? Remember that there is <computeroutput>AllOf()</computeroutput>.</para><para><heading level="2">Validating the Value Pointed to by a Pointer Argument</heading>
</para><para>C++ functions often take pointers as arguments. You can use matchers like <computeroutput>IsNull()</computeroutput>, <computeroutput>NotNull()</computeroutput>, and other comparison matchers to match a pointer, but what if you want to make sure the value <emphasis>pointed to</emphasis> by the pointer, instead of the pointer itself, has a certain property? Well, you can use the <computeroutput>Pointee(m)</computeroutput> matcher.</para><para><computeroutput>Pointee(m)</computeroutput> matches a pointer iff <computeroutput>m</computeroutput> matches the value the pointer points to. For example:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Ge;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Pointee;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(Pointee(Ge(3))));</highlight></codeline>
</programlisting></para><para>expects <computeroutput>foo.Bar()</computeroutput> to be called with a pointer that points to a value greater than or equal to 3.</para><para>One nice thing about <computeroutput>Pointee()</computeroutput> is that it treats a <computeroutput>NULL</computeroutput> pointer as a match failure, so you can write <computeroutput>Pointee(m)</computeroutput> instead of</para><para><programlisting><codeline><highlight class="normal">AllOf(NotNull(),<sp/>Pointee(m))</highlight></codeline>
</programlisting></para><para>without worrying that a <computeroutput>NULL</computeroutput> pointer will crash your test.</para><para>Also, did we tell you that <computeroutput>Pointee()</computeroutput> works with both raw pointers <bold>and</bold> smart pointers (<computeroutput>linked_ptr</computeroutput>, <computeroutput>shared_ptr</computeroutput>, <computeroutput>scoped_ptr</computeroutput>, and etc)?</para><para>What if you have a pointer to pointer? You guessed it - you can use nested <computeroutput>Pointee()</computeroutput> to probe deeper inside the value. For example, <computeroutput>Pointee(Pointee(Lt(3)))</computeroutput> matches a pointer that points to a pointer that points to a number less than 3 (what a mouthful...).</para><para><heading level="2">Testing a Certain Property of an Object</heading>
</para><para>Sometimes you want to specify that an object argument has a certain property, but there is no existing matcher that does this. If you want good error messages, you should define a matcher. If you want to do it quick and dirty, you could get away with writing an ordinary function.</para><para>Let&apos;s say you have a mock function that takes an object of type <computeroutput>Foo</computeroutput>, which has an <computeroutput>int bar()</computeroutput> method and an <computeroutput>int baz()</computeroutput> method, and you want to constrain that the argument&apos;s <computeroutput>bar()</computeroutput> value plus its <computeroutput>baz()</computeroutput> value is a given number. Here&apos;s how you can define a matcher to do it:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::MatcherInterface;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MatchResultListener;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>BarPlusBazEqMatcher<sp/>:<sp/>public<sp/>MatcherInterface&lt;const<sp/>Foo&amp;&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>explicit<sp/>BarPlusBazEqMatcher(int<sp/>expected_sum)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expected_sum_(expected_sum)<sp/>{}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>MatchAndExplain(const<sp/>Foo&amp;<sp/>foo,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(foo.bar()<sp/>+<sp/>foo.baz())<sp/>==<sp/>expected_sum_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeTo(::std::ostream*<sp/>os)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;bar()<sp/>+<sp/>baz()<sp/>equals<sp/>&quot;<sp/>&lt;&lt;<sp/>expected_sum_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeNegationTo(::std::ostream*<sp/>os)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;bar()<sp/>+<sp/>baz()<sp/>does<sp/>not<sp/>equal<sp/>&quot;<sp/>&lt;&lt;<sp/>expected_sum_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>int<sp/>expected_sum_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>Matcher&lt;const<sp/>Foo&amp;&gt;<sp/>BarPlusBazEq(int<sp/>expected_sum)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>MakeMatcher(new<sp/>BarPlusBazEqMatcher(expected_sum));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(...,<sp/>DoThis(BarPlusBazEq(5)))...;</highlight></codeline>
</programlisting></para><para><heading level="2">Matching Containers</heading>
</para><para>Sometimes an STL container (e.g. list, vector, map, ...) is passed to a mock function and you may want to validate it. Since most STL containers support the <computeroutput>==</computeroutput> operator, you can write <computeroutput>Eq(expected_container)</computeroutput> or simply <computeroutput>expected_container</computeroutput> to match a container exactly.</para><para>Sometimes, though, you may want to be more flexible (for example, the first element must be an exact match, but the second element can be any positive number, and so on). Also, containers used in tests often have a small number of elements, and having to define the expected container out-of-line is a bit of a hassle.</para><para>You can use the <computeroutput>ElementsAre()</computeroutput> or <computeroutput>UnorderedElementsAre()</computeroutput> matcher in such cases:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::ElementsAre;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Gt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Foo,<sp/>void(const<sp/>vector&lt;int&gt;&amp;<sp/>numbers));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(ElementsAre(1,<sp/>Gt(0),<sp/>_,<sp/>5)));</highlight></codeline>
</programlisting></para><para>The above matcher says that the container must have 4 elements, which must be 1, greater than 0, anything, and 5 respectively.</para><para>If you instead write:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::UnorderedElementsAre;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Foo,<sp/>void(const<sp/>vector&lt;int&gt;&amp;<sp/>numbers));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(UnorderedElementsAre(1,<sp/>Gt(0),<sp/>_,<sp/>5)));</highlight></codeline>
</programlisting></para><para>It means that the container must have 4 elements, which under some permutation must be 1, greater than 0, anything, and 5 respectively.</para><para><computeroutput>ElementsAre()</computeroutput> and <computeroutput>UnorderedElementsAre()</computeroutput> are overloaded to take 0 to 10 arguments. If more are needed, you can place them in a C-style array and use <computeroutput>ElementsAreArray()</computeroutput> or <computeroutput>UnorderedElementsAreArray()</computeroutput> instead:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::ElementsAreArray;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>ElementsAreArray<sp/>accepts<sp/>an<sp/>array<sp/>of<sp/>element<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>int<sp/>expected_vector1[]<sp/>=<sp/>{<sp/>1,<sp/>5,<sp/>2,<sp/>4,<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(ElementsAreArray(expected_vector1)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Or,<sp/>an<sp/>array<sp/>of<sp/>element<sp/>matchers.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>expected_vector2<sp/>=<sp/>{<sp/>1,<sp/>Gt(2),<sp/>_,<sp/>3,<sp/>...<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(ElementsAreArray(expected_vector2)));</highlight></codeline>
</programlisting></para><para>In case the array needs to be dynamically created (and therefore the array size cannot be inferred by the compiler), you can give <computeroutput>ElementsAreArray()</computeroutput> an additional argument to specify the array size:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::ElementsAreArray;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>const<sp/>expected_vector3<sp/>=<sp/>new<sp/>int[count];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>fill<sp/>expected_vector3<sp/>with<sp/>values<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(ElementsAreArray(expected_vector3,<sp/>count)));</highlight></codeline>
</programlisting></para><para><bold>Tips:</bold></para><para><itemizedlist>
<listitem><para><computeroutput>ElementsAre*()</computeroutput> can be used to match <emphasis>any</emphasis> container that implements the STL iterator pattern (i.e. it has a <computeroutput>const_iterator</computeroutput> type and supports <computeroutput>begin()/end()</computeroutput>), not just the ones defined in STL. It will even work with container types yet to be written - as long as they follows the above pattern.</para></listitem><listitem><para>You can use nested <computeroutput>ElementsAre*()</computeroutput> to match nested (multi-dimensional) containers.</para></listitem><listitem><para>If the container is passed by pointer instead of by reference, just write <computeroutput>Pointee(ElementsAre*(...))</computeroutput>.</para></listitem><listitem><para>The order of elements <emphasis>matters</emphasis> for <computeroutput>ElementsAre*()</computeroutput>. Therefore don&apos;t use it with containers whose element order is undefined (e.g. <computeroutput>hash_map</computeroutput>).</para></listitem></itemizedlist>
</para><para><heading level="2">Sharing Matchers</heading>
</para><para>Under the hood, a Google <ref refid="class_mock" kindref="compound">Mock</ref> matcher object consists of a pointer to a ref-counted implementation object. Copying matchers is allowed and very efficient, as only the pointer is copied. When the last matcher that references the implementation object dies, the implementation object will be deleted.</para><para>Therefore, if you have some complex matcher that you want to use again and again, there is no need to build it everytime. Just assign it to a matcher variable and use that variable repeatedly! For example,</para><para><programlisting><codeline><highlight class="normal">Matcher&lt;int&gt;<sp/>in_range<sp/>=<sp/>AllOf(Gt(5),<sp/>Le(10));</highlight></codeline>
<codeline><highlight class="normal">...<sp/>use<sp/>in_range<sp/>as<sp/>a<sp/>matcher<sp/>in<sp/>multiple<sp/>EXPECT_CALLs<sp/>...</highlight></codeline>
</programlisting></para><para><heading level="1">Setting Expectations</heading>
</para><para><heading level="2">Knowing When to Expect</heading>
</para><para><computeroutput>ON_CALL</computeroutput> is likely the single most under-utilized construct in Google <ref refid="class_mock" kindref="compound">Mock</ref>.</para><para>There are basically two constructs for defining the behavior of a mock object: <computeroutput>ON_CALL</computeroutput> and <computeroutput>EXPECT_CALL</computeroutput>. The difference? <computeroutput>ON_CALL</computeroutput> defines what happens when a mock method is called, but <emphasis>doesn&apos;t imply any expectation on the method being called.</emphasis> <computeroutput>EXPECT_CALL</computeroutput> not only defines the behavior, but also sets an expectation that <emphasis>the method will be called with the given arguments, for the given number of times</emphasis> (and <emphasis>in the given order</emphasis> when you specify the order too).</para><para>Since <computeroutput>EXPECT_CALL</computeroutput> does more, isn&apos;t it better than <computeroutput>ON_CALL</computeroutput>? Not really. Every <computeroutput>EXPECT_CALL</computeroutput> adds a constraint on the behavior of the code under test. Having more constraints than necessary is <emphasis>baaad</emphasis> - even worse than not having enough constraints.</para><para>This may be counter-intuitive. How could tests that verify more be worse than tests that verify less? Isn&apos;t verification the whole point of tests?</para><para>The answer, lies in <emphasis>what</emphasis> a test should verify. <bold>A good test verifies the contract of the code.</bold> If a test over-specifies, it doesn&apos;t leave enough freedom to the implementation. As a result, changing the implementation without breaking the contract (e.g. refactoring and optimization), which should be perfectly fine to do, can break such tests. Then you have to spend time fixing them, only to see them broken again the next time the implementation is changed.</para><para>Keep in mind that one doesn&apos;t have to verify more than one property in one test. In fact, <bold>it&apos;s a good style to verify only one thing in one test.</bold> If you do that, a bug will likely break only one or two tests instead of dozens (which case would you rather debug?). If you are also in the habit of giving tests descriptive names that tell what they verify, you can often easily guess what&apos;s wrong just from the test log itself.</para><para>So use <computeroutput>ON_CALL</computeroutput> by default, and only use <computeroutput>EXPECT_CALL</computeroutput> when you actually intend to verify that the call is made. For example, you may have a bunch of <computeroutput>ON_CALL</computeroutput>s in your test fixture to set the common mock behavior shared by all tests in the same group, and write (scarcely) different <computeroutput>EXPECT_CALL</computeroutput>s in different <computeroutput>TEST_F</computeroutput>s to verify different aspects of the code&apos;s behavior. Compared with the style where each <computeroutput>TEST</computeroutput> has many <computeroutput>EXPECT_CALL</computeroutput>s, this leads to tests that are more resilient to implementational changes (and thus less likely to require maintenance) and makes the intent of the tests more obvious (so they are easier to maintain when you do need to maintain them).</para><para><heading level="2">Ignoring Uninteresting Calls</heading>
</para><para>If you are not interested in how a mock method is called, just don&apos;t say anything about it. In this case, if the method is ever called, Google <ref refid="class_mock" kindref="compound">Mock</ref> will perform its default action to allow the test program to continue. If you are not happy with the default action taken by Google <ref refid="class_mock" kindref="compound">Mock</ref>, you can override it using <computeroutput>DefaultValue&lt;T&gt;::Set()</computeroutput> (described later in this document) or <computeroutput>ON_CALL()</computeroutput>.</para><para>Please note that once you expressed interest in a particular mock method (via <computeroutput>EXPECT_CALL()</computeroutput>), all invocations to it must match some expectation. If this function is called but the arguments don&apos;t match any <computeroutput>EXPECT_CALL()</computeroutput> statement, it will be an error.</para><para><heading level="2">Disallowing Unexpected Calls</heading>
</para><para>If a mock method shouldn&apos;t be called at all, explicitly say so:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(0);</highlight></codeline>
</programlisting></para><para>If some calls to the method are allowed, but the rest are not, just list all the expected calls:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::AnyNumber;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Gt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(Gt(10)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AnyNumber());</highlight></codeline>
</programlisting></para><para>A call to <computeroutput>foo.Bar()</computeroutput> that doesn&apos;t match any of the <computeroutput>EXPECT_CALL()</computeroutput> statements will be an error.</para><para><heading level="2">Expecting Ordered Calls</heading>
</para><para>Although an <computeroutput>EXPECT_CALL()</computeroutput> statement defined earlier takes precedence when Google <ref refid="class_mock" kindref="compound">Mock</ref> tries to match a function call with an expectation, by default calls don&apos;t have to happen in the order <computeroutput>EXPECT_CALL()</computeroutput> statements are written. For example, if the arguments match the matchers in the third <computeroutput>EXPECT_CALL()</computeroutput>, but not those in the first two, then the third expectation will be used.</para><para>If you would rather have all calls occur in the order of the expectations, put the <computeroutput>EXPECT_CALL()</computeroutput> statements in a block where you define a variable of type <computeroutput>InSequence</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::InSequence;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InSequence<sp/>s;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(bar,<sp/>DoThat(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(6));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>In this example, we expect a call to <computeroutput>foo.DoThis(5)</computeroutput>, followed by two calls to <computeroutput>bar.DoThat()</computeroutput> where the argument can be anything, which are in turn followed by a call to <computeroutput>foo.DoThis(6)</computeroutput>. If a call occurred out-of-order, Google <ref refid="class_mock" kindref="compound">Mock</ref> will report an error.</para><para><heading level="2">Expecting Partially Ordered Calls</heading>
</para><para>Sometimes requiring everything to occur in a predetermined order can lead to brittle tests. For example, we may care about <computeroutput>A</computeroutput> occurring before both <computeroutput>B</computeroutput> and <computeroutput>C</computeroutput>, but aren&apos;t interested in the relative order of <computeroutput>B</computeroutput> and <computeroutput>C</computeroutput>. In this case, the test should reflect our real intent, instead of being overly constraining.</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to use the <ulink url="http://code.google.com/p/googlemock/wiki/V1_7_CheatSheet#The_After_Clause">After</ulink> clause of <computeroutput>EXPECT_CALL</computeroutput>.</para><para>Another way is via the <computeroutput>InSequence()</computeroutput> clause (not the same as the <computeroutput>InSequence</computeroutput> class), which we borrowed from jMock 2. It&apos;s less flexible than <computeroutput>After()</computeroutput>, but more convenient when you have long chains of sequential calls, as it doesn&apos;t require you to come up with different names for the expectations in the chains. Here&apos;s how it works:</para><para>If we view <computeroutput>EXPECT_CALL()</computeroutput> statements as nodes in a graph, and add an edge from node A to node B wherever A must occur before B, we can get a DAG. We use the term &quot;sequence&quot; to mean a directed path in this DAG. Now, if we decompose the DAG into sequences, we just need to know which sequences each <computeroutput>EXPECT_CALL()</computeroutput> belongs to in order to be able to reconstruct the orginal DAG.</para><para>So, to specify the partial order on the expectations we need to do two things: first to define some <computeroutput>Sequence</computeroutput> objects, and then for each <computeroutput>EXPECT_CALL()</computeroutput> say which <computeroutput>Sequence</computeroutput> objects it is part of. Expectations in the same sequence must occur in the order they are written. For example,</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Sequence;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sequence<sp/>s1,<sp/>s2;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EXPECT_CALL(foo,<sp/>A())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.InSequence(s1,<sp/>s2);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(bar,<sp/>B())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.InSequence(s1);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(bar,<sp/>C())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.InSequence(s2);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(foo,<sp/>D())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.InSequence(s2);</highlight></codeline>
</programlisting></para><para>specifies the following DAG (where <computeroutput>s1</computeroutput> is <computeroutput>A -&gt; B</computeroutput>, and <computeroutput>s2</computeroutput> is <computeroutput>A -&gt; C -&gt; D</computeroutput>):</para><para><programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>+---&gt;<sp/>B</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">A<sp/>---|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>+---&gt;<sp/>C<sp/>---&gt;<sp/>D</highlight></codeline>
</programlisting></para><para>This means that A must occur before B and C, and C must occur before D. There&apos;s no restriction about the order other than these.</para><para><heading level="2">Controlling When an Expectation Retires</heading>
</para><para>When a mock method is called, Google <ref refid="class_mock" kindref="compound">Mock</ref> only consider expectations that are still active. An expectation is active when created, and becomes inactive (aka <emphasis>retires</emphasis>) when a call that has to occur later has occurred. For example, in</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Sequence;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sequence<sp/>s1,<sp/>s2;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EXPECT_CALL(log,<sp/>Log(WARNING,<sp/>_,<sp/>&quot;File<sp/>too<sp/>large.&quot;))<sp/><sp/><sp/><sp/><sp/>//<sp/>#1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.Times(AnyNumber())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.InSequence(s1,<sp/>s2);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(log,<sp/>Log(WARNING,<sp/>_,<sp/>&quot;Data<sp/>set<sp/>is<sp/>empty.&quot;))<sp/><sp/>//<sp/>#2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.InSequence(s1);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(log,<sp/>Log(WARNING,<sp/>_,<sp/>&quot;User<sp/>not<sp/>found.&quot;))<sp/><sp/><sp/><sp/><sp/>//<sp/>#3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.InSequence(s2);</highlight></codeline>
</programlisting></para><para>as soon as either #2 or #3 is matched, #1 will retire. If a warning <computeroutput>&quot;File too large.&quot;</computeroutput> is logged after this, it will be an error.</para><para>Note that an expectation doesn&apos;t retire automatically when it&apos;s saturated. For example,</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(log,<sp/>Log(WARNING,<sp/>_,<sp/>_));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>#1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(log,<sp/>Log(WARNING,<sp/>_,<sp/>&quot;File<sp/>too<sp/>large.&quot;));<sp/><sp/>//<sp/>#2</highlight></codeline>
</programlisting></para><para>says that there will be exactly one warning with the message <computeroutput>&quot;File
too large.&quot;</computeroutput>. If the second warning contains this message too, #2 will match again and result in an upper-bound-violated error.</para><para>If this is not what you want, you can ask an expectation to retire as soon as it becomes saturated:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(log,<sp/>Log(WARNING,<sp/>_,<sp/>_));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>#1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(log,<sp/>Log(WARNING,<sp/>_,<sp/>&quot;File<sp/>too<sp/>large.&quot;))<sp/><sp/>//<sp/>#2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.RetiresOnSaturation();</highlight></codeline>
</programlisting></para><para>Here #2 can be used only once, so if you have two warnings with the message <computeroutput>&quot;File too large.&quot;</computeroutput>, the first will match #2 and the second will match #1 - there will be no error.</para><para><heading level="1">Using Actions</heading>
</para><para><heading level="2">Returning References from <ref refid="class_mock" kindref="compound">Mock</ref> Methods</heading>
</para><para>If a mock function&apos;s return type is a reference, you need to use <computeroutput>ReturnRef()</computeroutput> instead of <computeroutput>Return()</computeroutput> to return a result:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::ReturnRef;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(GetBar,<sp/>Bar&amp;());</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bar<sp/>bar;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>GetBar())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnRef(bar));</highlight></codeline>
</programlisting></para><para><heading level="2">Returning Live Values from <ref refid="class_mock" kindref="compound">Mock</ref> Methods</heading>
</para><para>The <computeroutput>Return(x)</computeroutput> action saves a copy of <computeroutput>x</computeroutput> when the action is <emphasis>created</emphasis>, and always returns the same value whenever it&apos;s executed. Sometimes you may want to instead return the <emphasis>live</emphasis> value of <computeroutput>x</computeroutput> (i.e. its value at the time when the action is <emphasis>executed</emphasis>.).</para><para>If the mock function&apos;s return type is a reference, you can do it using <computeroutput>ReturnRef(x)</computeroutput>, as shown in the previous recipe (&quot;Returning References
from Mock Methods&quot;). However, Google <ref refid="class_mock" kindref="compound">Mock</ref> doesn&apos;t let you use <computeroutput>ReturnRef()</computeroutput> in a mock function whose return type is not a reference, as doing that usually indicates a user error. So, what shall you do?</para><para>You may be tempted to try <computeroutput>ByRef()</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">using<sp/>testing::ByRef;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>testing::Return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(GetValue,<sp/>int());</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>GetValue())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Return(ByRef(x)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>foo.GetValue());</highlight></codeline>
</programlisting></para><para>Unfortunately, it doesn&apos;t work here. The above code will fail with error:</para><para><programlisting><codeline><highlight class="normal">Value<sp/>of:<sp/>foo.GetValue()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>0</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>42</highlight></codeline>
</programlisting></para><para>The reason is that <computeroutput>Return(value)</computeroutput> converts <computeroutput>value</computeroutput> to the actual return type of the mock function at the time when the action is <emphasis>created</emphasis>, not when it is <emphasis>executed</emphasis>. (This behavior was chosen for the action to be safe when <computeroutput>value</computeroutput> is a proxy object that references some temporary objects.) As a result, <computeroutput>ByRef(x)</computeroutput> is converted to an <computeroutput>int</computeroutput> value (instead of a <computeroutput>const int&amp;</computeroutput>) when the expectation is set, and <computeroutput>Return(ByRef(x))</computeroutput> will always return 0.</para><para><computeroutput>ReturnPointee(pointer)</computeroutput> was provided to solve this problem specifically. It returns the value pointed to by <computeroutput>pointer</computeroutput> at the time the action is <emphasis>executed</emphasis>:</para><para><programlisting><codeline><highlight class="normal">using<sp/>testing::ReturnPointee;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>GetValue())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(ReturnPointee(&amp;x));<sp/><sp/>//<sp/>Note<sp/>the<sp/>&amp;<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>foo.GetValue());<sp/><sp/>//<sp/>This<sp/>will<sp/>succeed<sp/>now.</highlight></codeline>
</programlisting></para><para><heading level="2">Combining Actions</heading>
</para><para>Want to do more than one thing when a function is called? That&apos;s fine. <computeroutput>DoAll()</computeroutput> allow you to do sequence of actions every time. Only the return value of the last action in the sequence will be used.</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::DoAll;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Bar,<sp/>bool(int<sp/>n));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(action_1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action_n));</highlight></codeline>
</programlisting></para><para><heading level="2">Mocking Side Effects</heading>
</para><para>Sometimes a method exhibits its effect not via returning a value but via side effects. For example, it may change some global state or modify an output argument. To mock side effects, in general you can define your own action by implementing <computeroutput><ref refid="classtesting_1_1_action_interface" kindref="compound">testing::ActionInterface</ref></computeroutput>.</para><para>If all you need to do is to change an output argument, the built-in <computeroutput>SetArgPointee()</computeroutput> action is convenient:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::SetArgPointee;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockMutator<sp/>:<sp/>public<sp/>Mutator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Mutate,<sp/>void(bool<sp/>mutate,<sp/>int*<sp/>value));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockMutator<sp/>mutator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mutator,<sp/>Mutate(true,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(SetArgPointee&lt;1&gt;(5));</highlight></codeline>
</programlisting></para><para>In this example, when <computeroutput>mutator.Mutate()</computeroutput> is called, we will assign 5 to the <computeroutput>int</computeroutput> variable pointed to by argument #1 (0-based).</para><para><computeroutput>SetArgPointee()</computeroutput> conveniently makes an internal copy of the value you pass to it, removing the need to keep the value in scope and alive. The implication however is that the value must have a copy constructor and assignment operator.</para><para>If the mock method also needs to return a value as well, you can chain <computeroutput>SetArgPointee()</computeroutput> with <computeroutput>Return()</computeroutput> using <computeroutput>DoAll()</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::SetArgPointee;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockMutator<sp/>:<sp/>public<sp/>Mutator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(MutateInt,<sp/>bool(int*<sp/>value));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockMutator<sp/>mutator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mutator,<sp/>MutateInt(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(SetArgPointee&lt;0&gt;(5),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(true)));</highlight></codeline>
</programlisting></para><para>If the output argument is an array, use the <computeroutput>SetArrayArgument&lt;N&gt;(first, last)</computeroutput> action instead. It copies the elements in source range <computeroutput>[first, last)</computeroutput> to the array pointed to by the <computeroutput>N</computeroutput>-th (0-based) argument:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::NotNull;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::SetArrayArgument;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockArrayMutator<sp/>:<sp/>public<sp/>ArrayMutator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Mutate,<sp/>void(int*<sp/>values,<sp/>int<sp/>num_values));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockArrayMutator<sp/>mutator;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>values[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mutator,<sp/>Mutate(NotNull(),<sp/>5))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(SetArrayArgument&lt;0&gt;(values,<sp/>values<sp/>+<sp/>5));</highlight></codeline>
</programlisting></para><para>This also works when the argument is an output iterator:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::SeArrayArgument;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockRolodex<sp/>:<sp/>public<sp/>Rolodex<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(GetNames,<sp/>void(std::back_insert_iterator&lt;vector&lt;string&gt;<sp/>&gt;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockRolodex<sp/>rolodex;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>names;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>names.push_back(&quot;George&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>names.push_back(&quot;John&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>names.push_back(&quot;Thomas&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(rolodex,<sp/>GetNames(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(SetArrayArgument&lt;0&gt;(names.begin(),<sp/>names.end()));</highlight></codeline>
</programlisting></para><para><heading level="2">Changing a <ref refid="class_mock" kindref="compound">Mock</ref> Object&apos;s Behavior Based on the State</heading>
</para><para>If you expect a call to change the behavior of a mock object, you can use <computeroutput><ref refid="classtesting_1_1_in_sequence" kindref="compound">testing::InSequence</ref></computeroutput> to specify different behaviors before and after the call:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::InSequence;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>seq;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(my_mock,<sp/>IsDirty())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Return(true));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(my_mock,<sp/>Flush());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(my_mock,<sp/>IsDirty())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(Return(false));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_mock.FlushIfDirty();</highlight></codeline>
</programlisting></para><para>This makes <computeroutput>my_mock.IsDirty()</computeroutput> return <computeroutput>true</computeroutput> before <computeroutput>my_mock.Flush()</computeroutput> is called and return <computeroutput>false</computeroutput> afterwards.</para><para>If the behavior change is more complex, you can store the effects in a variable and make a mock method get its return value from that variable:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::SaveArg;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ACTION_P(ReturnPointee,<sp/>p)<sp/>{<sp/>return<sp/>*p;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>previous_value<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(my_mock,<sp/>GetPrevValue())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(ReturnPointee(&amp;previous_value));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(my_mock,<sp/>UpdateValue(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(SaveArg&lt;0&gt;(&amp;previous_value));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_mock.DoSomethingToUpdateValue();</highlight></codeline>
</programlisting></para><para>Here <computeroutput>my_mock.GetPrevValue()</computeroutput> will always return the argument of the last <computeroutput>UpdateValue()</computeroutput> call.</para><para><heading level="2">Setting the Default Value for a Return Type</heading>
</para><para>If a mock method&apos;s return type is a built-in C++ type or pointer, by default it will return 0 when invoked. You only need to specify an action if this default value doesn&apos;t work for you.</para><para>Sometimes, you may want to change this default value, or you may want to specify a default value for types Google <ref refid="class_mock" kindref="compound">Mock</ref> doesn&apos;t know about. You can do this using the <computeroutput><ref refid="classtesting_1_1_default_value" kindref="compound">testing::DefaultValue</ref></computeroutput> class template:</para><para><programlisting><codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(CalculateBar,<sp/>Bar());</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bar<sp/>default_bar;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sets<sp/>the<sp/>default<sp/>return<sp/>value<sp/>for<sp/>type<sp/>Bar.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DefaultValue&lt;Bar&gt;::Set(default_bar);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>We<sp/>don&apos;t<sp/>need<sp/>to<sp/>specify<sp/>an<sp/>action<sp/>here,<sp/>as<sp/>the<sp/>default</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>return<sp/>value<sp/>works<sp/>for<sp/>us.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>CalculateBar());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.CalculateBar();<sp/><sp/>//<sp/>This<sp/>should<sp/>return<sp/>default_bar.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Unsets<sp/>the<sp/>default<sp/>return<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>DefaultValue&lt;Bar&gt;::Clear();</highlight></codeline>
</programlisting></para><para>Please note that changing the default value for a type can make you tests hard to understand. We recommend you to use this feature judiciously. For example, you may want to make sure the <computeroutput>Set()</computeroutput> and <computeroutput>Clear()</computeroutput> calls are right next to the code that uses your mock.</para><para><heading level="2">Setting the Default Actions for a <ref refid="class_mock" kindref="compound">Mock</ref> Method</heading>
</para><para>You&apos;ve learned how to change the default value of a given type. However, this may be too coarse for your purpose: perhaps you have two mock methods with the same return type and you want them to have different behaviors. The <computeroutput>ON_CALL()</computeroutput> macro allows you to customize your mock&apos;s behavior at the method level:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::AnyNumber;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ON_CALL(foo,<sp/>Sign(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(-1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ON_CALL(foo,<sp/>Sign(0))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(0));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ON_CALL(foo,<sp/>Sign(Gt(0)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(1));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Sign(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AnyNumber());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.Sign(5);<sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>return<sp/>1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.Sign(-9);<sp/><sp/>//<sp/>This<sp/>should<sp/>return<sp/>-1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.Sign(0);<sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>return<sp/>0.</highlight></codeline>
</programlisting></para><para>As you may have guessed, when there are more than one <computeroutput>ON_CALL()</computeroutput> statements, the news order take precedence over the older ones. In other words, the <bold>last</bold> one that matches the function arguments will be used. This matching order allows you to set up the common behavior in a mock object&apos;s constructor or the test fixture&apos;s set-up phase and specialize the mock&apos;s behavior later.</para><para><heading level="2">Using Functions/Methods/Functors as Actions</heading>
</para><para>If the built-in actions don&apos;t suit you, you can easily use an existing function, method, or functor as an action:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Sum,<sp/>int(int<sp/>x,<sp/>int<sp/>y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(ComplexJob,<sp/>bool(int<sp/>x));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>CalculateSum(int<sp/>x,<sp/>int<sp/>y)<sp/>{<sp/>return<sp/>x<sp/>+<sp/>y;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Helper<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ComplexJob(int<sp/>x);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Helper<sp/>helper;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Sum(_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(CalculateSum));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>ComplexJob(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(&amp;helper,<sp/>&amp;Helper::ComplexJob));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.Sum(5,<sp/>6);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Invokes<sp/>CalculateSum(5,<sp/>6).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.ComplexJob(10);<sp/><sp/>//<sp/>Invokes<sp/>helper.ComplexJob(10);</highlight></codeline>
</programlisting></para><para>The only requirement is that the type of the function, etc must be <emphasis>compatible</emphasis> with the signature of the mock function, meaning that the latter&apos;s arguments can be implicitly converted to the corresponding arguments of the former, and the former&apos;s return type can be implicitly converted to that of the latter. So, you can invoke something whose type is <emphasis>not</emphasis> exactly the same as the mock function, as long as it&apos;s safe to do so - nice, huh?</para><para><heading level="2">Invoking a Function/Method/Functor Without Arguments</heading>
</para><para><computeroutput>Invoke()</computeroutput> is very useful for doing actions that are more complex. It passes the mock function&apos;s arguments to the function or functor being invoked such that the callee has the full context of the call to work with. If the invoked function is not interested in some or all of the arguments, it can simply ignore them.</para><para>Yet, a common pattern is that a test author wants to invoke a function without the arguments of the mock function. <computeroutput>Invoke()</computeroutput> allows her to do that using a wrapper function that throws away the arguments before invoking an underlining nullary function. Needless to say, this can be tedious and obscures the intent of the test.</para><para><computeroutput>InvokeWithoutArgs()</computeroutput> solves this problem. It&apos;s like <computeroutput>Invoke()</computeroutput> except that it doesn&apos;t pass the mock function&apos;s arguments to the callee. Here&apos;s an example:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::InvokeWithoutArgs;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(ComplexJob,<sp/>bool(int<sp/>n));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>Job1()<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>ComplexJob(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(InvokeWithoutArgs(Job1));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.ComplexJob(10);<sp/><sp/>//<sp/>Invokes<sp/>Job1().</highlight></codeline>
</programlisting></para><para><heading level="2">Invoking an Argument of the <ref refid="class_mock" kindref="compound">Mock</ref> Function</heading>
</para><para>Sometimes a mock function will receive a function pointer or a functor (in other words, a &quot;callable&quot;) as an argument, e.g.</para><para><programlisting><codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(DoThis,<sp/>bool(int<sp/>n,<sp/>bool<sp/>(*fp)(int)));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>and you may want to invoke this callable argument:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Will<sp/>execute<sp/>(*fp)(5),<sp/>where<sp/>fp<sp/>is<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>second<sp/>argument<sp/>DoThis()<sp/>receives.</highlight></codeline>
</programlisting></para><para>Arghh, you need to refer to a mock function argument but C++ has no lambda (yet), so you have to define your own action. :-( Or do you really?</para><para>Well, Google <ref refid="class_mock" kindref="compound">Mock</ref> has an action to solve <emphasis>exactly</emphasis> this problem:</para><para><programlisting><codeline><highlight class="normal">InvokeArgument&lt;N&gt;(arg_1,<sp/>arg_2,<sp/>...,<sp/>arg_m)</highlight></codeline>
</programlisting></para><para>will invoke the <computeroutput>N</computeroutput>-th (0-based) argument the mock function receives, with <computeroutput>arg_1</computeroutput>, <computeroutput>arg_2</computeroutput>, ..., and <computeroutput>arg_m</computeroutput>. No matter if the argument is a function pointer or a functor, Google <ref refid="class_mock" kindref="compound">Mock</ref> handles them both.</para><para>With that, you could write:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::InvokeArgument;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(InvokeArgument&lt;1&gt;(5));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Will<sp/>execute<sp/>(*fp)(5),<sp/>where<sp/>fp<sp/>is<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>second<sp/>argument<sp/>DoThis()<sp/>receives.</highlight></codeline>
</programlisting></para><para>What if the callable takes an argument by reference? No problem - just wrap it inside <computeroutput>ByRef()</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Bar,<sp/>bool(bool<sp/>(*fp)(int,<sp/>const<sp/>Helper&amp;)));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::ByRef;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::InvokeArgument;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Helper<sp/>helper;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(InvokeArgument&lt;0&gt;(5,<sp/>ByRef(helper)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>ByRef(helper)<sp/>guarantees<sp/>that<sp/>a<sp/>reference<sp/>to<sp/>helper,<sp/>not<sp/>a<sp/>copy<sp/>of<sp/>it,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>will<sp/>be<sp/>passed<sp/>to<sp/>the<sp/>callable.</highlight></codeline>
</programlisting></para><para>What if the callable takes an argument by reference and we do <bold>not</bold> wrap the argument in <computeroutput>ByRef()</computeroutput>? Then <computeroutput>InvokeArgument()</computeroutput> will <emphasis>make a copy</emphasis> of the argument, and pass a <emphasis>reference to the copy</emphasis>, instead of a reference to the original value, to the callable. This is especially handy when the argument is a temporary value:</para><para><programlisting><codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoThat,<sp/>bool(bool<sp/>(*f)(const<sp/>double&amp;<sp/>x,<sp/>const<sp/>string&amp;<sp/>s)));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::InvokeArgument;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThat(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(InvokeArgument&lt;0&gt;(5.0,<sp/>string(&quot;Hi&quot;)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Will<sp/>execute<sp/>(*f)(5.0,<sp/>string(&quot;Hi&quot;)),<sp/>where<sp/>f<sp/>is<sp/>the<sp/>function<sp/>pointer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>DoThat()<sp/>receives.<sp/><sp/>Note<sp/>that<sp/>the<sp/>values<sp/>5.0<sp/>and<sp/>string(&quot;Hi&quot;)<sp/>are</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>temporary<sp/>and<sp/>dead<sp/>once<sp/>the<sp/>EXPECT_CALL()<sp/>statement<sp/>finishes.<sp/><sp/>Yet</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>it&apos;s<sp/>fine<sp/>to<sp/>perform<sp/>this<sp/>action<sp/>later,<sp/>since<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>are<sp/>kept<sp/>inside<sp/>the<sp/>InvokeArgument<sp/>action.</highlight></codeline>
</programlisting></para><para><heading level="2">Ignoring an Action&apos;s Result</heading>
</para><para>Sometimes you have an action that returns <emphasis>something</emphasis>, but you need an action that returns <computeroutput>void</computeroutput> (perhaps you want to use it in a mock function that returns <computeroutput>void</computeroutput>, or perhaps it needs to be used in <computeroutput>DoAll()</computeroutput> and it&apos;s not the last in the list). <computeroutput>IgnoreResult()</computeroutput> lets you do that. For example:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>Process(const<sp/>MyData&amp;<sp/>data);</highlight></codeline>
<codeline><highlight class="normal">string<sp/>DoSomething();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Abc,<sp/>void(const<sp/>MyData&amp;<sp/>data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(Xyz,<sp/>bool());</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Abc(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>.WillOnce(Invoke(Process));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>above<sp/>line<sp/>won&apos;t<sp/>compile<sp/>as<sp/>Process()<sp/>returns<sp/>int<sp/>but<sp/>Abc()<sp/>needs</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>to<sp/>return<sp/>void.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(IgnoreResult(Invoke(Process)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Xyz())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoAll(IgnoreResult(Invoke(DoSomething)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Ignores<sp/>the<sp/>string<sp/>DoSomething()<sp/>returns.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(true)));</highlight></codeline>
</programlisting></para><para>Note that you <bold>cannot</bold> use <computeroutput>IgnoreResult()</computeroutput> on an action that already returns <computeroutput>void</computeroutput>. Doing so will lead to ugly compiler errors.</para><para><heading level="2">Selecting an Action&apos;s Arguments</heading>
</para><para>Say you have a mock function <computeroutput>Foo()</computeroutput> that takes seven arguments, and you have a custom action that you want to invoke when <computeroutput>Foo()</computeroutput> is called. Trouble is, the custom action only wants three arguments:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD7(Foo,<sp/>bool(bool<sp/>visible,<sp/>const<sp/>string&amp;<sp/>name,<sp/>int<sp/>x,<sp/>int<sp/>y,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>map&lt;pair&lt;int,<sp/>int&gt;,<sp/>double&gt;&amp;<sp/>weight,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>min_weight,<sp/>double<sp/>max_wight));</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>IsVisibleInQuadrant1(bool<sp/>visible,<sp/>int<sp/>x,<sp/>int<sp/>y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>visible<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>y<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(IsVisibleInQuadrant1));<sp/><sp/>//<sp/>Uh,<sp/>won&apos;t<sp/>compile.<sp/>:-(</highlight></codeline>
</programlisting></para><para>To please the compiler God, you can to define an &quot;adaptor&quot; that has the same signature as <computeroutput>Foo()</computeroutput> and calls the custom action with the right arguments:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>MyIsVisibleInQuadrant1(bool<sp/>visible,<sp/>const<sp/>string&amp;<sp/>name,<sp/>int<sp/>x,<sp/>int<sp/>y,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>map&lt;pair&lt;int,<sp/>int&gt;,<sp/>double&gt;&amp;<sp/>weight,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>min_weight,<sp/>double<sp/>max_wight)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>IsVisibleInQuadrant1(visible,<sp/>x,<sp/>y);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(MyIsVisibleInQuadrant1));<sp/><sp/>//<sp/>Now<sp/>it<sp/>works.</highlight></codeline>
</programlisting></para><para>But isn&apos;t this awkward?</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> provides a generic <emphasis>action adaptor</emphasis>, so you can spend your time minding more important business than writing your own adaptors. Here&apos;s the syntax:</para><para><programlisting><codeline><highlight class="normal">WithArgs&lt;N1,<sp/>N2,<sp/>...,<sp/>Nk&gt;(action)</highlight></codeline>
</programlisting></para><para>creates an action that passes the arguments of the mock function at the given indices (0-based) to the inner <computeroutput>action</computeroutput> and performs it. Using <computeroutput>WithArgs</computeroutput>, our original example can be written as:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::WithArgs;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(WithArgs&lt;0,<sp/>2,<sp/>3&gt;(Invoke(IsVisibleInQuadrant1)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>No<sp/>need<sp/>to<sp/>define<sp/>your<sp/>own<sp/>adaptor.</highlight></codeline>
</programlisting></para><para>For better readability, Google <ref refid="class_mock" kindref="compound">Mock</ref> also gives you:</para><para><itemizedlist>
<listitem><para><computeroutput>WithoutArgs(action)</computeroutput> when the inner <computeroutput>action</computeroutput> takes <emphasis>no</emphasis> argument, and</para></listitem><listitem><para><computeroutput>WithArg&lt;N&gt;(action)</computeroutput> (no <computeroutput>s</computeroutput> after <computeroutput>Arg</computeroutput>) when the inner <computeroutput>action</computeroutput> takes <emphasis>one</emphasis> argument.</para></listitem></itemizedlist>
</para><para>As you may have realized, <computeroutput>InvokeWithoutArgs(...)</computeroutput> is just syntactic sugar for <computeroutput>WithoutArgs(Inovke(...))</computeroutput>.</para><para>Here are more tips:</para><para><itemizedlist>
<listitem><para>The inner action used in <computeroutput>WithArgs</computeroutput> and friends does not have to be <computeroutput>Invoke()</computeroutput> <ndash/> it can be anything.</para></listitem><listitem><para>You can repeat an argument in the argument list if necessary, e.g. <computeroutput>WithArgs&lt;2, 3, 3, 5&gt;(...)</computeroutput>.</para></listitem><listitem><para>You can change the order of the arguments, e.g. <computeroutput>WithArgs&lt;3, 2, 1&gt;(...)</computeroutput>.</para></listitem><listitem><para>The types of the selected arguments do <emphasis>not</emphasis> have to match the signature of the inner action exactly. It works as long as they can be implicitly converted to the corresponding arguments of the inner action. For example, if the 4-th argument of the mock function is an <computeroutput>int</computeroutput> and <computeroutput>my_action</computeroutput> takes a <computeroutput>double</computeroutput>, <computeroutput>WithArg&lt;4&gt;(my_action)</computeroutput> will work.</para></listitem></itemizedlist>
</para><para><heading level="2">Ignoring Arguments in Action Functions</heading>
</para><para>The selecting-an-action&apos;s-arguments recipe showed us one way to make a mock function and an action with incompatible argument lists fit together. The downside is that wrapping the action in <computeroutput>WithArgs&lt;...&gt;()</computeroutput> can get tedious for people writing the tests.</para><para>If you are defining a function, method, or functor to be used with <computeroutput>Invoke*()</computeroutput>, and you are not interested in some of its arguments, an alternative to <computeroutput>WithArgs</computeroutput> is to declare the uninteresting arguments as <computeroutput>Unused</computeroutput>. This makes the definition less cluttered and less fragile in case the types of the uninteresting arguments change. It could also increase the chance the action function can be reused. For example, given</para><para><programlisting><codeline><highlight class="normal">MOCK_METHOD3(Foo,<sp/>double(const<sp/>string&amp;<sp/>label,<sp/>double<sp/>x,<sp/>double<sp/>y));</highlight></codeline>
<codeline><highlight class="normal">MOCK_METHOD3(Bar,<sp/>double(int<sp/>index,<sp/>double<sp/>x,<sp/>double<sp/>y));</highlight></codeline>
</programlisting></para><para>instead of</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>DistanceToOriginWithLabel(const<sp/>string&amp;<sp/>label,<sp/>double<sp/>x,<sp/>double<sp/>y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>sqrt(x*x<sp/>+<sp/>y*y);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>DistanceToOriginWithIndex(int<sp/>index,<sp/>double<sp/>x,<sp/>double<sp/>y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>sqrt(x*x<sp/>+<sp/>y*y);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXEPCT_CALL(mock,<sp/>Foo(&quot;abc&quot;,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(DistanceToOriginWithLabel));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXEPCT_CALL(mock,<sp/>Bar(5,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(DistanceToOriginWithIndex));</highlight></codeline>
</programlisting></para><para>you could write</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Invoke;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Unused;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">double<sp/>DistanceToOrigin(Unused,<sp/>double<sp/>x,<sp/>double<sp/>y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>sqrt(x*x<sp/>+<sp/>y*y);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXEPCT_CALL(mock,<sp/>Foo(&quot;abc&quot;,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(DistanceToOrigin));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXEPCT_CALL(mock,<sp/>Bar(5,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(DistanceToOrigin));</highlight></codeline>
</programlisting></para><para><heading level="2">Sharing Actions</heading>
</para><para>Just like matchers, a Google <ref refid="class_mock" kindref="compound">Mock</ref> action object consists of a pointer to a ref-counted implementation object. Therefore copying actions is also allowed and very efficient. When the last action that references the implementation object dies, the implementation object will be deleted.</para><para>If you have some complex action that you want to use again and again, you may not have to build it from scratch everytime. If the action doesn&apos;t have an internal state (i.e. if it always does the same thing no matter how many times it has been called), you can assign it to an action variable and use that variable repeatedly. For example:</para><para><programlisting><codeline><highlight class="normal">Action&lt;bool(int*)&gt;<sp/>set_flag<sp/>=<sp/>DoAll(SetArgPointee&lt;0&gt;(5),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(true));</highlight></codeline>
<codeline><highlight class="normal">...<sp/>use<sp/>set_flag<sp/>in<sp/>.WillOnce()<sp/>and<sp/>.WillRepeatedly()<sp/>...</highlight></codeline>
</programlisting></para><para>However, if the action has its own state, you may be surprised if you share the action object. Suppose you have an action factory <computeroutput>IncrementCounter(init)</computeroutput> which creates an action that increments and returns a counter whose initial value is <computeroutput>init</computeroutput>, using two actions created from the same expression and using a shared action will exihibit different behaviors. Example:</para><para><programlisting><codeline><highlight class="normal">EXPECT_CALL(foo,<sp/>DoThis())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.WillRepeatedly(IncrementCounter(0));</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(foo,<sp/>DoThat())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.WillRepeatedly(IncrementCounter(0));</highlight></codeline>
<codeline><highlight class="normal">foo.DoThis();<sp/><sp/>//<sp/>Returns<sp/>1.</highlight></codeline>
<codeline><highlight class="normal">foo.DoThis();<sp/><sp/>//<sp/>Returns<sp/>2.</highlight></codeline>
<codeline><highlight class="normal">foo.DoThat();<sp/><sp/>//<sp/>Returns<sp/>1<sp/>-<sp/>Blah()<sp/>uses<sp/>a<sp/>different</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>counter<sp/>than<sp/>Bar()&apos;s.</highlight></codeline>
</programlisting></para><para>versus</para><para><programlisting><codeline><highlight class="normal">Action&lt;int()&gt;<sp/>increment<sp/>=<sp/>IncrementCounter(0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EXPECT_CALL(foo,<sp/>DoThis())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.WillRepeatedly(increment);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(foo,<sp/>DoThat())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.WillRepeatedly(increment);</highlight></codeline>
<codeline><highlight class="normal">foo.DoThis();<sp/><sp/>//<sp/>Returns<sp/>1.</highlight></codeline>
<codeline><highlight class="normal">foo.DoThis();<sp/><sp/>//<sp/>Returns<sp/>2.</highlight></codeline>
<codeline><highlight class="normal">foo.DoThat();<sp/><sp/>//<sp/>Returns<sp/>3<sp/>-<sp/>the<sp/>counter<sp/>is<sp/>shared.</highlight></codeline>
</programlisting></para><para><heading level="1">Misc Recipes on Using Google <ref refid="class_mock" kindref="compound">Mock</ref></heading>
</para><para><heading level="2">Making the Compilation Faster</heading>
</para><para>Believe it or not, the <emphasis>vast majority</emphasis> of the time spent on compiling a mock class is in generating its constructor and destructor, as they perform non-trivial tasks (e.g. verification of the expectations). What&apos;s more, mock methods with different signatures have different types and thus their constructors/destructors need to be generated by the compiler separately. As a result, if you mock many different types of methods, compiling your mock class can get really slow.</para><para>If you are experiencing slow compilation, you can move the definition of your mock class&apos; constructor and destructor out of the class body and into a <computeroutput>.cpp</computeroutput> file. This way, even if you <computeroutput>#include</computeroutput> your mock class in N files, the compiler only needs to generate its constructor and destructor once, resulting in a much faster compilation.</para><para>Let&apos;s illustrate the idea using an example. Here&apos;s the definition of a mock class before applying this recipe:</para><para><programlisting><codeline><highlight class="normal">//<sp/>File<sp/>mock_foo.h.</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Since<sp/>we<sp/>don&apos;t<sp/>declare<sp/>the<sp/>constructor<sp/>or<sp/>the<sp/>destructor,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>the<sp/>compiler<sp/>will<sp/>generate<sp/>them<sp/>in<sp/>every<sp/>translation<sp/>unit</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>where<sp/>this<sp/>mock<sp/>class<sp/>is<sp/>used.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(DoThis,<sp/>int());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoThat,<sp/>bool(const<sp/>char*<sp/>str));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>more<sp/>mock<sp/>methods<sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>After the change, it would look like:</para><para><programlisting><codeline><highlight class="normal">//<sp/>File<sp/>mock_foo.h.</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>constructor<sp/>and<sp/>destructor<sp/>are<sp/>declared,<sp/>but<sp/>not<sp/>defined,<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~MockFoo();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(DoThis,<sp/>int());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoThat,<sp/>bool(const<sp/>char*<sp/>str));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>more<sp/>mock<sp/>methods<sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting> and <programlisting><codeline><highlight class="normal">//<sp/>File<sp/>mock_foo.cpp.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;path/to/mock_foo.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>definitions<sp/>may<sp/>appear<sp/>trivial,<sp/>but<sp/>the<sp/>functions<sp/>actually<sp/>do<sp/>a</highlight></codeline>
<codeline><highlight class="normal">//<sp/>lot<sp/>of<sp/>things<sp/>through<sp/>the<sp/>constructors/destructors<sp/>of<sp/>the<sp/>member</highlight></codeline>
<codeline><highlight class="normal">//<sp/>variables<sp/>used<sp/>to<sp/>implement<sp/>the<sp/>mock<sp/>methods.</highlight></codeline>
<codeline><highlight class="normal">MockFoo::MockFoo()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">MockFoo::~MockFoo()<sp/>{}</highlight></codeline>
</programlisting></para><para><heading level="2">Forcing a Verification</heading>
</para><para>When it&apos;s being destoyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, and will generate <ulink url="http://code.google.com/p/googletest/">Google Test</ulink> failures if not. This is convenient as it leaves you with one less thing to worry about. That is, unless you are not sure if your mock object will be destoyed.</para><para>How could it be that your mock object won&apos;t eventually be destroyed? Well, it might be created on the heap and owned by the code you are testing. Suppose there&apos;s a bug in that code and it doesn&apos;t delete the mock object properly - you could end up with a passing test when there&apos;s actually a bug.</para><para>Using a heap checker is a good idea and can alleviate the concern, but its implementation may not be 100% reliable. So, sometimes you do want to <emphasis>force</emphasis> Google <ref refid="class_mock" kindref="compound">Mock</ref> to verify a mock object before it is (hopefully) destructed. You can do this with <computeroutput>Mock::VerifyAndClearExpectations(&amp;mock_object)</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">TEST(MyServerTest,<sp/>ProcessesRequest)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>using<sp/>::testing::Mock;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo*<sp/>const<sp/>foo<sp/>=<sp/>new<sp/>MockFoo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(*foo,<sp/>...)...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...<sp/>other<sp/>expectations<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>server<sp/>now<sp/>owns<sp/>foo.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyServer<sp/>server(foo);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>server.ProcessRequest(...);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>In<sp/>case<sp/>that<sp/>server&apos;s<sp/>destructor<sp/>will<sp/>forget<sp/>to<sp/>delete<sp/>foo,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>this<sp/>will<sp/>verify<sp/>the<sp/>expectations<sp/>anyway.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Mock::VerifyAndClearExpectations(foo);</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>server<sp/>is<sp/>destroyed<sp/>when<sp/>it<sp/>goes<sp/>out<sp/>of<sp/>scope<sp/>here.</highlight></codeline>
</programlisting></para><para><bold>Tip:</bold> The <computeroutput>Mock::VerifyAndClearExpectations()</computeroutput> function returns a <computeroutput>bool</computeroutput> to indicate whether the verification was successful (<computeroutput>true</computeroutput> for yes), so you can wrap that function call inside a <computeroutput>ASSERT_TRUE()</computeroutput> if there is no point going further when the verification has failed.</para><para><heading level="2">Using Check Points</heading>
</para><para>Sometimes you may want to &quot;reset&quot; a mock object at various check points in your test: at each check point, you verify that all existing expectations on the mock object have been satisfied, and then you set some new expectations on it as if it&apos;s newly created. This allows you to work with a mock object in &quot;phases&quot; whose sizes are each manageable.</para><para>One such scenario is that in your test&apos;s <computeroutput>SetUp()</computeroutput> function, you may want to put the object you are testing into a certain state, with the help from a mock object. Once in the desired state, you want to clear all expectations on the mock, such that in the <computeroutput>TEST_F</computeroutput> body you can set fresh expectations on it.</para><para>As you may have figured out, the <computeroutput>Mock::VerifyAndClearExpectations()</computeroutput> function we saw in the previous recipe can help you here. Or, if you are using <computeroutput>ON_CALL()</computeroutput> to set default actions on the mock object and want to clear the default actions as well, use <computeroutput>Mock::VerifyAndClear(&amp;mock_object)</computeroutput> instead. This function does what <computeroutput>Mock::VerifyAndClearExpectations(&amp;mock_object)</computeroutput> does and returns the same <computeroutput>bool</computeroutput>, <bold>plus</bold> it clears the <computeroutput>ON_CALL()</computeroutput> statements on <computeroutput>mock_object</computeroutput> too.</para><para>Another trick you can use to achieve the same effect is to put the expectations in sequences and insert calls to a dummy &quot;check-point&quot; function at specific places. Then you can verify that the mock function calls do happen at the right time. For example, if you are exercising code:</para><para><programlisting><codeline><highlight class="normal">Foo(1);</highlight></codeline>
<codeline><highlight class="normal">Foo(2);</highlight></codeline>
<codeline><highlight class="normal">Foo(3);</highlight></codeline>
</programlisting></para><para>and want to verify that <computeroutput>Foo(1)</computeroutput> and <computeroutput>Foo(3)</computeroutput> both invoke <computeroutput>mock.Bar(&quot;a&quot;)</computeroutput>, but <computeroutput>Foo(2)</computeroutput> doesn&apos;t invoke anything. You can write:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::MockFunction;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>InvokesBarCorrectly)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyMock<sp/>mock;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Class<sp/>MockFunction&lt;F&gt;<sp/>has<sp/>exactly<sp/>one<sp/>mock<sp/>method.<sp/><sp/>It<sp/>is<sp/>named</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Call()<sp/>and<sp/>has<sp/>type<sp/>F.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFunction&lt;void(string<sp/>check_point_name)&gt;<sp/>check;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InSequence<sp/>s;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Bar(&quot;a&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(check,<sp/>Call(&quot;1&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(check,<sp/>Call(&quot;2&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Bar(&quot;a&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Foo(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>check.Call(&quot;1&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Foo(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>check.Call(&quot;2&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Foo(3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>The expectation spec says that the first <computeroutput>Bar(&quot;a&quot;)</computeroutput> must happen before check point &quot;1&quot;, the second <computeroutput>Bar(&quot;a&quot;)</computeroutput> must happen after check point &quot;2&quot;, and nothing should happen between the two check points. The explicit check points make it easy to tell which <computeroutput>Bar(&quot;a&quot;)</computeroutput> is called by which call to <computeroutput>Foo()</computeroutput>.</para><para><heading level="2">Mocking Destructors</heading>
</para><para>Sometimes you want to make sure a mock object is destructed at the right time, e.g. after <computeroutput>bar-&gt;A()</computeroutput> is called but before <computeroutput>bar-&gt;B()</computeroutput> is called. We already know that you can specify constraints on the order of mock function calls, so all we need to do is to mock the destructor of the mock function.</para><para>This sounds simple, except for one problem: a destructor is a special function with special syntax and special semantics, and the <computeroutput>MOCK_METHOD0</computeroutput> macro doesn&apos;t work for it:</para><para><programlisting><codeline><highlight class="normal">MOCK_METHOD0(~MockFoo,<sp/>void());<sp/><sp/>//<sp/>Won&apos;t<sp/>compile!</highlight></codeline>
</programlisting></para><para>The good news is that you can use a simple pattern to achieve the same effect. First, add a mock function <computeroutput>Die()</computeroutput> to your mock class and call it in the destructor, like this:</para><para><programlisting><codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Add<sp/>the<sp/>following<sp/>two<sp/>lines<sp/>to<sp/>the<sp/>mock<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD0(Die,<sp/>void());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~MockFoo()<sp/>{<sp/>Die();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>(If the name <computeroutput>Die()</computeroutput> clashes with an existing symbol, choose another name.) Now, we have translated the problem of testing when a <computeroutput><ref refid="class_mock_foo" kindref="compound">MockFoo</ref></computeroutput> object dies to testing when its <computeroutput>Die()</computeroutput> method is called:</para><para><programlisting><codeline><highlight class="normal">MockFoo*<sp/>foo<sp/>=<sp/>new<sp/>MockFoo;</highlight></codeline>
<codeline><highlight class="normal">MockBar*<sp/>bar<sp/>=<sp/>new<sp/>MockBar;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>InSequence<sp/>s;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Expects<sp/>*foo<sp/>to<sp/>die<sp/>after<sp/>bar-&gt;A()<sp/>and<sp/>before<sp/>bar-&gt;B().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(*bar,<sp/>A());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(*foo,<sp/>Die());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(*bar,<sp/>B());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>And that&apos;s that.</para><para><heading level="2">Using Google <ref refid="class_mock" kindref="compound">Mock</ref> and Threads</heading>
</para><para><bold>IMPORTANT NOTE:</bold> What we describe in this recipe is <bold>ONLY</bold> true on platforms where Google <ref refid="class_mock" kindref="compound">Mock</ref> is thread-safe. Currently these are only platforms that support the pthreads library (this includes Linux and Mac). To make it thread-safe on other platforms we only need to implement some synchronization operations in <computeroutput>&quot;gtest/internal/gtest-port.h&quot;</computeroutput>.</para><para>In a <bold>unit</bold> test, it&apos;s best if you could isolate and test a piece of code in a single-threaded context. That avoids race conditions and dead locks, and makes debugging your test much easier.</para><para>Yet many programs are multi-threaded, and sometimes to test something we need to pound on it from more than one thread. Google <ref refid="class_mock" kindref="compound">Mock</ref> works for this purpose too.</para><para>Remember the steps for using a mock:</para><para><orderedlist>
<listitem><para>Create a mock object <computeroutput>foo</computeroutput>.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Set its default actions and expectations using <computeroutput>ON_CALL()</computeroutput> and <computeroutput>EXPECT_CALL()</computeroutput>.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>The code under test calls methods of <computeroutput>foo</computeroutput>.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Optionally, verify and reset the mock.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Destroy the mock yourself, or let the code under test destroy it. The destructor will automatically verify it.</para></listitem></orderedlist>
</para><para>If you follow the following simple rules, your mocks and threads can live happily togeter:</para><para><itemizedlist>
<listitem><para>Execute your <emphasis>test code</emphasis> (as opposed to the code being tested) in <emphasis>one</emphasis> thread. This makes your test easy to follow.</para></listitem><listitem><para>Obviously, you can do step #1 without locking.</para></listitem><listitem><para>When doing step #2 and #5, make sure no other thread is accessing <computeroutput>foo</computeroutput>. Obvious too, huh?</para></listitem><listitem><para>#3 and #4 can be done either in one thread or in multiple threads - anyway you want. Google <ref refid="class_mock" kindref="compound">Mock</ref> takes care of the locking, so you don&apos;t have to do any - unless required by your test logic.</para></listitem></itemizedlist>
</para><para>If you violate the rules (for example, if you set expectations on a mock while another thread is calling its methods), you get undefined behavior. That&apos;s not fun, so don&apos;t do it.</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> guarantees that the action for a mock function is done in the same thread that called the mock function. For example, in</para><para><programlisting><codeline><highlight class="normal">EXPECT_CALL(mock,<sp/>Foo(1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.WillOnce(action1);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(mock,<sp/>Foo(2))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.WillOnce(action2);</highlight></codeline>
</programlisting></para><para>if <computeroutput>Foo(1)</computeroutput> is called in thread 1 and <computeroutput>Foo(2)</computeroutput> is called in thread 2, Google <ref refid="class_mock" kindref="compound">Mock</ref> will execute <computeroutput>action1</computeroutput> in thread 1 and <computeroutput>action2</computeroutput> in thread 2.</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> does <emphasis>not</emphasis> impose a sequence on actions performed in different threads (doing so may create deadlocks as the actions may need to cooperate). This means that the execution of <computeroutput>action1</computeroutput> and <computeroutput>action2</computeroutput> in the above example <emphasis>may</emphasis> interleave. If this is a problem, you should add proper synchronization logic to <computeroutput>action1</computeroutput> and <computeroutput>action2</computeroutput> to make the test thread-safe.</para><para>Also, remember that <computeroutput>DefaultValue&lt;T&gt;</computeroutput> is a global resource that potentially affects <emphasis>all</emphasis> living mock objects in your program. Naturally, you won&apos;t want to mess with it from multiple threads or when there still are mocks in action.</para><para><heading level="2">Controlling How Much Information Google <ref refid="class_mock" kindref="compound">Mock</ref> Prints</heading>
</para><para>When Google <ref refid="class_mock" kindref="compound">Mock</ref> sees something that has the potential of being an error (e.g. a mock function with no expectation is called, a.k.a. an uninteresting call, which is allowed but perhaps you forgot to explicitly ban the call), it prints some warning messages, including the arguments of the function and the return value. Hopefully this will remind you to take a look and see if there is indeed a problem.</para><para>Sometimes you are confident that your tests are correct and may not appreciate such friendly messages. Some other times, you are debugging your tests or learning about the behavior of the code you are testing, and wish you could observe every mock call that happens (including argument values and the return value). Clearly, one size doesn&apos;t fit all.</para><para>You can control how much Google <ref refid="class_mock" kindref="compound">Mock</ref> tells you using the <computeroutput>--gmock_verbose=LEVEL</computeroutput> command-line flag, where <computeroutput>LEVEL</computeroutput> is a string with three possible values:</para><para><itemizedlist>
<listitem><para><computeroutput>info</computeroutput>: Google <ref refid="class_mock" kindref="compound">Mock</ref> will print all informational messages, warnings, and errors (most verbose). At this setting, Google <ref refid="class_mock" kindref="compound">Mock</ref> will also log any calls to the <computeroutput>ON_CALL/EXPECT_CALL</computeroutput> macros.</para></listitem><listitem><para><computeroutput>warning</computeroutput>: Google <ref refid="class_mock" kindref="compound">Mock</ref> will print both warnings and errors (less verbose). This is the default.</para></listitem><listitem><para><computeroutput>error</computeroutput>: Google <ref refid="class_mock" kindref="compound">Mock</ref> will print errors only (least verbose).</para></listitem></itemizedlist>
</para><para>Alternatively, you can adjust the value of that flag from within your tests like so:</para><para><programlisting><codeline><highlight class="normal">::testing::FLAGS_gmock_verbose<sp/>=<sp/>&quot;error&quot;;</highlight></codeline>
</programlisting></para><para>Now, judiciously use the right flag to enable Google <ref refid="class_mock" kindref="compound">Mock</ref> serve you better!</para><para><heading level="2">Gaining Super Vision into <ref refid="class_mock" kindref="compound">Mock</ref> Calls</heading>
</para><para>You have a test using Google <ref refid="class_mock" kindref="compound">Mock</ref>. It fails: Google <ref refid="class_mock" kindref="compound">Mock</ref> tells you that some expectations aren&apos;t satisfied. However, you aren&apos;t sure why: Is there a typo somewhere in the matchers? Did you mess up the order of the <computeroutput>EXPECT_CALL</computeroutput>s? Or is the code under test doing something wrong? How can you find out the cause?</para><para>Won&apos;t it be nice if you have X-ray vision and can actually see the trace of all <computeroutput>EXPECT_CALL</computeroutput>s and mock method calls as they are made? For each call, would you like to see its actual argument values and which <computeroutput>EXPECT_CALL</computeroutput> Google <ref refid="class_mock" kindref="compound">Mock</ref> thinks it matches?</para><para>You can unlock this power by running your test with the <computeroutput>--gmock_verbose=info</computeroutput> flag. For example, given the test program:</para><para><programlisting><codeline><highlight class="normal">using<sp/>testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>testing::HasSubstr;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>testing::Return;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(F,<sp/>void(const<sp/>string&amp;<sp/>x,<sp/>const<sp/>string&amp;<sp/>y));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(Foo,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>mock;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>F(_,<sp/>_)).WillRepeatedly(Return());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>F(&quot;a&quot;,<sp/>&quot;b&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>F(&quot;c&quot;,<sp/>HasSubstr(&quot;d&quot;)));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>mock.F(&quot;a&quot;,<sp/>&quot;good&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>mock.F(&quot;a&quot;,<sp/>&quot;b&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>if you run it with <computeroutput>--gmock_verbose=info</computeroutput>, you will see this output:</para><para><programlisting><codeline><highlight class="normal">[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>Foo.Bar</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">foo_test.cc:14:<sp/>EXPECT_CALL(mock,<sp/>F(_,<sp/>_))<sp/>invoked</highlight></codeline>
<codeline><highlight class="normal">foo_test.cc:15:<sp/>EXPECT_CALL(mock,<sp/>F(&quot;a&quot;,<sp/>&quot;b&quot;))<sp/>invoked</highlight></codeline>
<codeline><highlight class="normal">foo_test.cc:16:<sp/>EXPECT_CALL(mock,<sp/>F(&quot;c&quot;,<sp/>HasSubstr(&quot;d&quot;)))<sp/>invoked</highlight></codeline>
<codeline><highlight class="normal">foo_test.cc:14:<sp/>Mock<sp/>function<sp/>call<sp/>matches<sp/>EXPECT_CALL(mock,<sp/>F(_,<sp/>_))...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>F(@0x7fff7c8dad40&quot;a&quot;,<sp/>@0x7fff7c8dad10&quot;good&quot;)</highlight></codeline>
<codeline><highlight class="normal">foo_test.cc:15:<sp/>Mock<sp/>function<sp/>call<sp/>matches<sp/>EXPECT_CALL(mock,<sp/>F(&quot;a&quot;,<sp/>&quot;b&quot;))...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>F(@0x7fff7c8dada0&quot;a&quot;,<sp/>@0x7fff7c8dad70&quot;b&quot;)</highlight></codeline>
<codeline><highlight class="normal">foo_test.cc:16:<sp/>Failure</highlight></codeline>
<codeline><highlight class="normal">Actual<sp/>function<sp/>call<sp/>count<sp/>doesn&apos;t<sp/>match<sp/>EXPECT_CALL(mock,<sp/>F(&quot;c&quot;,<sp/>HasSubstr(&quot;d&quot;)))...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>to<sp/>be<sp/>called<sp/>once</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>never<sp/>called<sp/>-<sp/>unsatisfied<sp/>and<sp/>active</highlight></codeline>
<codeline><highlight class="normal">[<sp/><sp/>FAILED<sp/><sp/>]<sp/>Foo.Bar</highlight></codeline>
</programlisting></para><para>Suppose the bug is that the <computeroutput>&quot;c&quot;</computeroutput> in the third <computeroutput>EXPECT_CALL</computeroutput> is a typo and should actually be <computeroutput>&quot;a&quot;</computeroutput>. With the above message, you should see that the actual <computeroutput>F(&quot;a&quot;, &quot;good&quot;)</computeroutput> call is matched by the first <computeroutput>EXPECT_CALL</computeroutput>, not the third as you thought. From that it should be obvious that the third <computeroutput>EXPECT_CALL</computeroutput> is written wrong. Case solved.</para><para><heading level="2">Running Tests in Emacs</heading>
</para><para>If you build and run your tests in Emacs, the source file locations of Google <ref refid="class_mock" kindref="compound">Mock</ref> and <ulink url="http://code.google.com/p/googletest/">Google Test</ulink> errors will be highlighted. Just press <computeroutput>&lt;Enter&gt;</computeroutput> on one of them and you&apos;ll be taken to the offending line. Or, you can just type <computeroutput>C-x</computeroutput>` to jump to the next error.</para><para>To make it even easier, you can add the following lines to your <computeroutput>~/.emacs</computeroutput> file:</para><para><programlisting><codeline><highlight class="normal">(global-set-key<sp/>&quot;\M-m&quot;<sp/><sp/><sp/>&apos;compile)<sp/><sp/>;<sp/>m<sp/>is<sp/>for<sp/>make</highlight></codeline>
<codeline><highlight class="normal">(global-set-key<sp/>[M-down]<sp/>&apos;next-error)</highlight></codeline>
<codeline><highlight class="normal">(global-set-key<sp/>[M-up]<sp/><sp/><sp/>&apos;(lambda<sp/>()<sp/>(interactive)<sp/>(next-error<sp/>-1)))</highlight></codeline>
</programlisting></para><para>Then you can type <computeroutput>M-m</computeroutput> to start a build, or <computeroutput>M-up</computeroutput>/<computeroutput>M-down</computeroutput> to move back and forth between errors.</para><para><heading level="2">Fusing Google <ref refid="class_mock" kindref="compound">Mock</ref> Source Files</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref>&apos;s implementation consists of dozens of files (excluding its own tests). Sometimes you may want them to be packaged up in fewer files instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script <computeroutput>fuse_gmock_files.py</computeroutput> in the <computeroutput>scripts/</computeroutput> directory (starting with release 1.2.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run <programlisting><codeline><highlight class="normal">python<sp/>fuse_gmock_files.py<sp/>OUTPUT_DIR</highlight></codeline>
</programlisting></para><para>and you should see an <computeroutput>OUTPUT_DIR</computeroutput> directory being created with files <computeroutput><ref refid="gtest_8h_source" kindref="compound">gtest/gtest.h</ref></computeroutput>, <computeroutput><ref refid="gmock_8h_source" kindref="compound">gmock/gmock.h</ref></computeroutput>, and <computeroutput>gmock-gtest-all.cc</computeroutput> in it. These three files contain everything you need to use Google <ref refid="class_mock" kindref="compound">Mock</ref> (and Google Test). Just copy them to anywhere you want and you are ready to write tests and use mocks. You can use the <ulink url="http://code.google.com/p/googlemock/source/browse/trunk/scripts/test/Makefile">scrpts/test/Makefile</ulink> file as an example on how to compile your tests against them.</para><para><heading level="1">Extending Google <ref refid="class_mock" kindref="compound">Mock</ref></heading>
</para><para><heading level="2">Writing New Matchers Quickly</heading>
</para><para>The <computeroutput>MATCHER*</computeroutput> family of macros can be used to define custom matchers easily. The syntax:</para><para><programlisting><codeline><highlight class="normal">MATCHER(name,<sp/>description_string_expression)<sp/>{<sp/>statements;<sp/>}</highlight></codeline>
</programlisting></para><para>will define a matcher with the given name that executes the statements, which must return a <computeroutput>bool</computeroutput> to indicate if the match succeeds. Inside the statements, you can refer to the value being matched by <computeroutput>arg</computeroutput>, and refer to its type by <computeroutput>arg_type</computeroutput>.</para><para>The description string is a <computeroutput>string</computeroutput>-typed expression that documents what the matcher does, and is used to generate the failure message when the match fails. It can (and should) reference the special <computeroutput>bool</computeroutput> variable <computeroutput>negation</computeroutput>, and should evaluate to the description of the matcher when <computeroutput>negation</computeroutput> is <computeroutput>false</computeroutput>, or that of the matcher&apos;s negation when <computeroutput>negation</computeroutput> is <computeroutput>true</computeroutput>.</para><para>For convenience, we allow the description string to be empty (<computeroutput>&quot;&quot;</computeroutput>), in which case Google <ref refid="class_mock" kindref="compound">Mock</ref> will use the sequence of words in the matcher name as the description.</para><para>For example: <programlisting><codeline><highlight class="normal">MATCHER(IsDivisibleBy7,<sp/>&quot;&quot;)<sp/>{<sp/>return<sp/>(arg<sp/>%<sp/>7)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
</programlisting> allows you to write <programlisting><codeline><highlight class="normal">//<sp/>Expects<sp/>mock_foo.Bar(n)<sp/>to<sp/>be<sp/>called<sp/>where<sp/>n<sp/>is<sp/>divisible<sp/>by<sp/>7.</highlight></codeline>
<codeline><highlight class="normal">EXPECT_CALL(mock_foo,<sp/>Bar(IsDivisibleBy7()));</highlight></codeline>
</programlisting> or, <programlisting><codeline><highlight class="normal">using<sp/>::testing::Not;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_expression,<sp/>IsDivisibleBy7());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_other_expression,<sp/>Not(IsDivisibleBy7()));</highlight></codeline>
</programlisting> If the above assertions fail, they will print something like: <programlisting><codeline><highlight class="normal"><sp/><sp/>Value<sp/>of:<sp/>some_expression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Expected:<sp/>is<sp/>divisible<sp/>by<sp/>7</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Actual:<sp/>27</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Value<sp/>of:<sp/>some_other_expression</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Expected:<sp/>not<sp/>(is<sp/>divisible<sp/>by<sp/>7)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Actual:<sp/>21</highlight></codeline>
</programlisting> where the descriptions <computeroutput>&quot;is divisible by 7&quot;</computeroutput> and <computeroutput>&quot;not (is divisible
by 7)&quot;</computeroutput> are automatically calculated from the matcher name <computeroutput>IsDivisibleBy7</computeroutput>.</para><para>As you may have noticed, the auto-generated descriptions (especially those for the negation) may not be so great. You can always override them with a string expression of your own: <programlisting><codeline><highlight class="normal">MATCHER(IsDivisibleBy7,<sp/>std::string(negation<sp/>?<sp/>&quot;isn&apos;t&quot;<sp/>:<sp/>&quot;is&quot;)<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>divisible<sp/>by<sp/>7&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(arg<sp/>%<sp/>7)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Optionally, you can stream additional information to a hidden argument named <computeroutput>result_listener</computeroutput> to explain the match result. For example, a better definition of <computeroutput>IsDivisibleBy7</computeroutput> is: <programlisting><codeline><highlight class="normal">MATCHER(IsDivisibleBy7,<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((arg<sp/>%<sp/>7)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/>&quot;the<sp/>remainder<sp/>is<sp/>&quot;<sp/>&lt;&lt;<sp/>(arg<sp/>%<sp/>7);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>With this definition, the above assertion will give a better message: <programlisting><codeline><highlight class="normal">Value<sp/>of:<sp/>some_expression</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>is<sp/>divisible<sp/>by<sp/>7</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>27<sp/>(the<sp/>remainder<sp/>is<sp/>6)</highlight></codeline>
</programlisting></para><para>You should let <computeroutput>MatchAndExplain()</computeroutput> print <emphasis>any additional information</emphasis> that can help a user understand the match result. Note that it should explain why the match succeeds in case of a success (unless it&apos;s obvious) - this is useful when the matcher is used inside <computeroutput>Not()</computeroutput>. There is no need to print the argument value itself, as Google <ref refid="class_mock" kindref="compound">Mock</ref> already prints it for you.</para><para><bold>Notes:</bold></para><para><orderedlist>
<listitem><para>The type of the value being matched (<computeroutput>arg_type</computeroutput>) is determined by the context in which you use the matcher and is supplied to you by the compiler, so you don&apos;t need to worry about declaring it (nor can you). This allows the matcher to be polymorphic. For example, <computeroutput>IsDivisibleBy7()</computeroutput> can be used to match any type where the value of <computeroutput>(arg % 7) == 0</computeroutput> can be implicitly converted to a <computeroutput>bool</computeroutput>. In the <computeroutput>Bar(IsDivisibleBy7())</computeroutput> example above, if method <computeroutput>Bar()</computeroutput> takes an <computeroutput>int</computeroutput>, <computeroutput>arg_type</computeroutput> will be <computeroutput>int</computeroutput>; if it takes an <computeroutput>unsigned long</computeroutput>, <computeroutput>arg_type</computeroutput> will be <computeroutput>unsigned long</computeroutput>; and so on.</para></listitem></orderedlist>
<orderedlist>
<listitem><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> doesn&apos;t guarantee when or how many times a matcher will be invoked. Therefore the matcher logic must be <emphasis>purely functional</emphasis> (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters). This requirement must be satisfied no matter how you define the matcher (e.g. using one of the methods described in the following recipes). In particular, a matcher can never call a mock function, as that will affect the state of the mock object and Google <ref refid="class_mock" kindref="compound">Mock</ref>.</para></listitem></orderedlist>
</para><para><heading level="2">Writing New Parameterized Matchers Quickly</heading>
</para><para>Sometimes you&apos;ll want to define a matcher that has parameters. For that you can use the macro: <programlisting><codeline><highlight class="normal">MATCHER_P(name,<sp/>param_name,<sp/>description_string)<sp/>{<sp/>statements;<sp/>}</highlight></codeline>
</programlisting> where the description string can be either <computeroutput>&quot;&quot;</computeroutput> or a string expression that references <computeroutput>negation</computeroutput> and <computeroutput>param_name</computeroutput>.</para><para>For example: <programlisting><codeline><highlight class="normal">MATCHER_P(HasAbsoluteValue,<sp/>value,<sp/>&quot;&quot;)<sp/>{<sp/>return<sp/>abs(arg)<sp/>==<sp/>value;<sp/>}</highlight></codeline>
</programlisting> will allow you to write: <programlisting><codeline><highlight class="normal">EXPECT_THAT(Blah(&quot;a&quot;),<sp/>HasAbsoluteValue(n));</highlight></codeline>
</programlisting> which may lead to this message (assuming <computeroutput>n</computeroutput> is 10): <programlisting><codeline><highlight class="normal">Value<sp/>of:<sp/>Blah(&quot;a&quot;)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>has<sp/>absolute<sp/>value<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>-9</highlight></codeline>
</programlisting></para><para>Note that both the matcher description and its parameter are printed, making the message human-friendly.</para><para>In the matcher definition body, you can write <computeroutput>foo_type</computeroutput> to reference the type of a parameter named <computeroutput>foo</computeroutput>. For example, in the body of <computeroutput>MATCHER_P(HasAbsoluteValue, value)</computeroutput> above, you can write <computeroutput>value_type</computeroutput> to refer to the type of <computeroutput>value</computeroutput>.</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> also provides <computeroutput>MATCHER_P2</computeroutput>, <computeroutput>MATCHER_P3</computeroutput>, ..., up to <computeroutput>MATCHER_P10</computeroutput> to support multi-parameter matchers: <programlisting><codeline><highlight class="normal">MATCHER_Pk(name,<sp/>param_1,<sp/>...,<sp/>param_k,<sp/>description_string)<sp/>{<sp/>statements;<sp/>}</highlight></codeline>
</programlisting></para><para>Please note that the custom description string is for a particular <bold>instance</bold> of the matcher, where the parameters have been bound to actual values. Therefore usually you&apos;ll want the parameter values to be part of the description. Google <ref refid="class_mock" kindref="compound">Mock</ref> lets you do that by referencing the matcher parameters in the description string expression.</para><para>For example, <programlisting><codeline><highlight class="normal">using<sp/>::testing::PrintToString;</highlight></codeline>
<codeline><highlight class="normal">MATCHER_P2(InClosedRange,<sp/>low,<sp/>hi,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(negation<sp/>?<sp/>&quot;isn&apos;t&quot;<sp/>:<sp/>&quot;is&quot;)<sp/>+<sp/>&quot;<sp/>in<sp/>range<sp/>[&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(low)<sp/>+<sp/>&quot;,<sp/>&quot;<sp/>+<sp/>PrintToString(hi)<sp/>+<sp/>&quot;]&quot;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>low<sp/>&lt;=<sp/>arg<sp/>&amp;&amp;<sp/>arg<sp/>&lt;=<sp/>hi;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">EXPECT_THAT(3,<sp/>InClosedRange(4,<sp/>6));</highlight></codeline>
</programlisting> would generate a failure that contains the message: <programlisting><codeline><highlight class="normal">Expected:<sp/>is<sp/>in<sp/>range<sp/>[4,<sp/>6]</highlight></codeline>
</programlisting></para><para>If you specify <computeroutput>&quot;&quot;</computeroutput> as the description, the failure message will contain the sequence of words in the matcher name followed by the parameter values printed as a tuple. For example, <programlisting><codeline><highlight class="normal">MATCHER_P2(InClosedRange,<sp/>low,<sp/>hi,<sp/>&quot;&quot;)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">EXPECT_THAT(3,<sp/>InClosedRange(4,<sp/>6));</highlight></codeline>
</programlisting> would generate a failure that contains the text: <programlisting><codeline><highlight class="normal">Expected:<sp/>in<sp/>closed<sp/>range<sp/>(4,<sp/>6)</highlight></codeline>
</programlisting></para><para>For the purpose of typing, you can view <programlisting><codeline><highlight class="normal">MATCHER_Pk(Foo,<sp/>p1,<sp/>...,<sp/>pk,<sp/>description_string)<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting> as shorthand for <programlisting><codeline><highlight class="normal">template<sp/>&lt;typename<sp/>p1_type,<sp/>...,<sp/>typename<sp/>pk_type&gt;</highlight></codeline>
<codeline><highlight class="normal">FooMatcherPk&lt;p1_type,<sp/>...,<sp/>pk_type&gt;</highlight></codeline>
<codeline><highlight class="normal">Foo(p1_type<sp/>p1,<sp/>...,<sp/>pk_type<sp/>pk)<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting></para><para>When you write <computeroutput>Foo(v1, ..., vk)</computeroutput>, the compiler infers the types of the parameters <computeroutput>v1</computeroutput>, ..., and <computeroutput>vk</computeroutput> for you. If you are not happy with the result of the type inference, you can specify the types by explicitly instantiating the template, as in <computeroutput>Foo&lt;long, bool&gt;(5, false)</computeroutput>. As said earlier, you don&apos;t get to (or need to) specify <computeroutput>arg_type</computeroutput> as that&apos;s determined by the context in which the matcher is used.</para><para>You can assign the result of expression <computeroutput>Foo(p1, ..., pk)</computeroutput> to a variable of type <computeroutput>FooMatcherPk&lt;p1_type, ..., pk_type&gt;</computeroutput>. This can be useful when composing matchers. Matchers that don&apos;t have a parameter or have only one parameter have special types: you can assign <computeroutput>Foo()</computeroutput> to a <computeroutput>FooMatcher</computeroutput>-typed variable, and assign <computeroutput>Foo(p)</computeroutput> to a <computeroutput>FooMatcherP&lt;p_type&gt;</computeroutput>-typed variable.</para><para>While you can instantiate a matcher template with reference types, passing the parameters by pointer usually makes your code more readable. If, however, you still want to pass a parameter by reference, be aware that in the failure message generated by the matcher you will see the value of the referenced object but not its address.</para><para>You can overload matchers with different numbers of parameters: <programlisting><codeline><highlight class="normal">MATCHER_P(Blah,<sp/>a,<sp/>description_string_1)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">MATCHER_P2(Blah,<sp/>a,<sp/>b,<sp/>description_string_2)<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting></para><para>While it&apos;s tempting to always use the <computeroutput>MATCHER*</computeroutput> macros when defining a new matcher, you should also consider implementing <computeroutput>MatcherInterface</computeroutput> or using <computeroutput>MakePolymorphicMatcher()</computeroutput> instead (see the recipes that follow), especially if you need to use the matcher a lot. While these approaches require more work, they give you more control on the types of the value being matched and the matcher parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading matchers based on parameter types (as opposed to just based on the number of parameters).</para><para><heading level="2">Writing New Monomorphic Matchers</heading>
</para><para>A matcher of argument type <computeroutput>T</computeroutput> implements <computeroutput><ref refid="classtesting_1_1_matcher_interface" kindref="compound">testing::MatcherInterface</ref>&lt;T&gt;</computeroutput> and does two things: it tests whether a value of type <computeroutput>T</computeroutput> matches the matcher, and can describe what kind of values it matches. The latter ability is used for generating readable error messages when expectations are violated.</para><para>The interface looks like this:</para><para><programlisting><codeline><highlight class="normal">class<sp/>MatchResultListener<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Streams<sp/>x<sp/>to<sp/>the<sp/>underlying<sp/>ostream;<sp/>does<sp/>nothing<sp/>if<sp/>the<sp/>ostream</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>is<sp/>NULL.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MatchResultListener&amp;<sp/>operator&lt;&lt;(const<sp/>T&amp;<sp/>x);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>the<sp/>underlying<sp/>ostream.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::std::ostream*<sp/>stream();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MatcherInterface<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~MatcherInterface();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>matcher<sp/>matches<sp/>x;<sp/>also<sp/>explains<sp/>the<sp/>match</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>result<sp/>to<sp/>&apos;listener&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>MatchAndExplain(T<sp/>x,<sp/>MatchResultListener*<sp/>listener)<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Describes<sp/>this<sp/>matcher<sp/>to<sp/>an<sp/>ostream.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeTo(::std::ostream*<sp/>os)<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Describes<sp/>the<sp/>negation<sp/>of<sp/>this<sp/>matcher<sp/>to<sp/>an<sp/>ostream.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeNegationTo(::std::ostream*<sp/>os)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>If you need a custom matcher but <computeroutput>Truly()</computeroutput> is not a good option (for example, you may not be happy with the way <computeroutput>Truly(predicate)</computeroutput> describes itself, or you may want your matcher to be polymorphic as <computeroutput>Eq(value)</computeroutput> is), you can define a matcher to do whatever you want in two steps: first implement the matcher interface, and then define a factory function to create a matcher instance. The second step is not strictly needed but it makes the syntax of using the matcher nicer.</para><para>For example, you can define a matcher to test whether an <computeroutput>int</computeroutput> is divisible by 7 and then use it like this: <programlisting><codeline><highlight class="normal">using<sp/>::testing::MakeMatcher;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Matcher;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MatcherInterface;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MatchResultListener;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>DivisibleBy7Matcher<sp/>:<sp/>public<sp/>MatcherInterface&lt;int&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>MatchAndExplain(int<sp/>n,<sp/>MatchResultListener*<sp/>listener)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(n<sp/>%<sp/>7)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeTo(::std::ostream*<sp/>os)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;is<sp/>divisible<sp/>by<sp/>7&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeNegationTo(::std::ostream*<sp/>os)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;is<sp/>not<sp/>divisible<sp/>by<sp/>7&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>Matcher&lt;int&gt;<sp/>DivisibleBy7()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>MakeMatcher(new<sp/>DivisibleBy7Matcher);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(DivisibleBy7()));</highlight></codeline>
</programlisting></para><para>You may improve the matcher message by streaming additional information to the <computeroutput>listener</computeroutput> argument in <computeroutput>MatchAndExplain()</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">class<sp/>DivisibleBy7Matcher<sp/>:<sp/>public<sp/>MatcherInterface&lt;int&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>MatchAndExplain(int<sp/>n,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>int<sp/>remainder<sp/>=<sp/>n<sp/>%<sp/>7;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(remainder<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/>&quot;the<sp/>remainder<sp/>is<sp/>&quot;<sp/>&lt;&lt;<sp/>remainder;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>remainder<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>Then, <computeroutput>EXPECT_THAT(x, DivisibleBy7());</computeroutput> may general a message like this: <programlisting><codeline><highlight class="normal">Value<sp/>of:<sp/>x</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>is<sp/>divisible<sp/>by<sp/>7</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>23<sp/>(the<sp/>remainder<sp/>is<sp/>2)</highlight></codeline>
</programlisting></para><para><heading level="2">Writing New Polymorphic Matchers</heading>
</para><para>You&apos;ve learned how to write your own matchers in the previous recipe. Just one problem: a matcher created using <computeroutput>MakeMatcher()</computeroutput> only works for one particular type of arguments. If you want a <emphasis>polymorphic</emphasis> matcher that works with arguments of several types (for instance, <computeroutput>Eq(x)</computeroutput> can be used to match a <computeroutput>value</computeroutput> as long as <computeroutput>value</computeroutput> == <computeroutput>x</computeroutput> compiles <ndash/> <computeroutput>value</computeroutput> and <computeroutput>x</computeroutput> don&apos;t have to share the same type), you can learn the trick from <computeroutput>&quot;gmock/gmock-matchers.h&quot;</computeroutput> but it&apos;s a bit involved.</para><para>Fortunately, most of the time you can define a polymorphic matcher easily with the help of <computeroutput>MakePolymorphicMatcher()</computeroutput>. Here&apos;s how you can define <computeroutput>NotNull()</computeroutput> as an example:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::MakePolymorphicMatcher;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MatchResultListener;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::NotNull;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::PolymorphicMatcher;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>NotNullMatcher<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>implement<sp/>a<sp/>polymorphic<sp/>matcher,<sp/>first<sp/>define<sp/>a<sp/>COPYABLE<sp/>class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>that<sp/>has<sp/>three<sp/>members<sp/>MatchAndExplain(),<sp/>DescribeTo(),<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>DescribeNegationTo(),<sp/>like<sp/>the<sp/>following.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>In<sp/>this<sp/>example,<sp/>we<sp/>want<sp/>to<sp/>use<sp/>NotNull()<sp/>with<sp/>any<sp/>pointer,<sp/>so</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>MatchAndExplain()<sp/>accepts<sp/>a<sp/>pointer<sp/>of<sp/>any<sp/>type<sp/>as<sp/>its<sp/>first<sp/>argument.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>In<sp/>general,<sp/>you<sp/>can<sp/>define<sp/>MatchAndExplain()<sp/>as<sp/>an<sp/>ordinary<sp/>method<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>a<sp/>method<sp/>template,<sp/>or<sp/>even<sp/>overload<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>MatchAndExplain(T*<sp/>p,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>/*<sp/>listener<sp/>*/)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>p<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Describes<sp/>the<sp/>property<sp/>of<sp/>a<sp/>value<sp/>matching<sp/>this<sp/>matcher.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>DescribeTo(::std::ostream*<sp/>os)<sp/>const<sp/>{<sp/>*os<sp/>&lt;&lt;<sp/>&quot;is<sp/>not<sp/>NULL&quot;;<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Describes<sp/>the<sp/>property<sp/>of<sp/>a<sp/>value<sp/>NOT<sp/>matching<sp/>this<sp/>matcher.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>DescribeNegationTo(::std::ostream*<sp/>os)<sp/>const<sp/>{<sp/>*os<sp/>&lt;&lt;<sp/>&quot;is<sp/>NULL&quot;;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>To<sp/>construct<sp/>a<sp/>polymorphic<sp/>matcher,<sp/>pass<sp/>an<sp/>instance<sp/>of<sp/>the<sp/>class</highlight></codeline>
<codeline><highlight class="normal">//<sp/>to<sp/>MakePolymorphicMatcher().<sp/><sp/>Note<sp/>the<sp/>return<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">inline<sp/>PolymorphicMatcher&lt;NotNullMatcher&gt;<sp/>NotNull()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>MakePolymorphicMatcher(NotNullMatcher());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(NotNull()));<sp/><sp/>//<sp/>The<sp/>argument<sp/>must<sp/>be<sp/>a<sp/>non-NULL<sp/>pointer.</highlight></codeline>
</programlisting></para><para><bold>Note:</bold> Your polymorphic matcher class does <bold>not</bold> need to inherit from <computeroutput>MatcherInterface</computeroutput> or any other class, and its methods do <bold>not</bold> need to be virtual.</para><para>Like in a monomorphic matcher, you may explain the match result by streaming additional information to the <computeroutput>listener</computeroutput> argument in <computeroutput>MatchAndExplain()</computeroutput>.</para><para><heading level="2">Writing New Cardinalities</heading>
</para><para>A cardinality is used in <computeroutput>Times()</computeroutput> to tell Google <ref refid="class_mock" kindref="compound">Mock</ref> how many times you expect a call to occur. It doesn&apos;t have to be exact. For example, you can say <computeroutput>AtLeast(5)</computeroutput> or <computeroutput>Between(2, 4)</computeroutput>.</para><para>If the built-in set of cardinalities doesn&apos;t suit you, you are free to define your own by implementing the following interface (in namespace <computeroutput>testing</computeroutput>):</para><para><programlisting><codeline><highlight class="normal">class<sp/>CardinalityInterface<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~CardinalityInterface();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>true<sp/>iff<sp/>call_count<sp/>calls<sp/>will<sp/>satisfy<sp/>this<sp/>cardinality.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>IsSatisfiedByCallCount(int<sp/>call_count)<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>true<sp/>iff<sp/>call_count<sp/>calls<sp/>will<sp/>saturate<sp/>this<sp/>cardinality.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>IsSaturatedByCallCount(int<sp/>call_count)<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Describes<sp/>self<sp/>to<sp/>an<sp/>ostream.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeTo(::std::ostream*<sp/>os)<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>For example, to specify that a call must occur even number of times, you can write</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::Cardinality;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::CardinalityInterface;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MakeCardinality;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>EvenNumberCardinality<sp/>:<sp/>public<sp/>CardinalityInterface<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>IsSatisfiedByCallCount(int<sp/>call_count)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(call_count<sp/>%<sp/>2)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>bool<sp/>IsSaturatedByCallCount(int<sp/>call_count)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>DescribeTo(::std::ostream*<sp/>os)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>&quot;called<sp/>even<sp/>number<sp/>of<sp/>times&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Cardinality<sp/>EvenNumber()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>MakeCardinality(new<sp/>EvenNumberCardinality);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar(3))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(EvenNumber());</highlight></codeline>
</programlisting></para><para><heading level="2">Writing New Actions Quickly</heading>
</para><para>If the built-in actions don&apos;t work for you, and you find it inconvenient to use <computeroutput>Invoke()</computeroutput>, you can use a macro from the <computeroutput>ACTION*</computeroutput> family to quickly define a new action that can be used in your code as if it&apos;s a built-in action.</para><para>By writing <programlisting><codeline><highlight class="normal">ACTION(name)<sp/>{<sp/>statements;<sp/>}</highlight></codeline>
</programlisting> in a namespace scope (i.e. not inside a class or function), you will define an action with the given name that executes the statements. The value returned by <computeroutput>statements</computeroutput> will be used as the return value of the action. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as <computeroutput>argK</computeroutput>. For example: <programlisting><codeline><highlight class="normal">ACTION(IncrementArg1)<sp/>{<sp/>return<sp/>++(*arg1);<sp/>}</highlight></codeline>
</programlisting> allows you to write <programlisting><codeline><highlight class="normal">...<sp/>WillOnce(IncrementArg1());</highlight></codeline>
</programlisting></para><para>Note that you don&apos;t need to specify the types of the mock function arguments. Rest assured that your code is type-safe though: you&apos;ll get a compiler error if <computeroutput>*arg1</computeroutput> doesn&apos;t support the <computeroutput>++</computeroutput> operator, or if the type of <computeroutput>++(*arg1)</computeroutput> isn&apos;t compatible with the mock function&apos;s return type.</para><para>Another example: <programlisting><codeline><highlight class="normal">ACTION(Foo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>(*arg2)(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Blah();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*arg1<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>arg0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> defines an action <computeroutput>Foo()</computeroutput> that invokes argument #2 (a function pointer) with 5, calls function <computeroutput>Blah()</computeroutput>, sets the value pointed to by argument #1 to 0, and returns argument #0.</para><para>For more convenience and flexibility, you can also use the following pre-defined symbols in the body of <computeroutput>ACTION</computeroutput>:</para><para><table rows="5" cols="2"><row>
<entry thead="yes"><para><computeroutput>argK_type</computeroutput> </para></entry><entry thead="yes"><para>The type of the K-th (0-based) argument of the mock function  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>args</computeroutput> </para></entry><entry thead="no"><para>All arguments of the mock function as a tuple </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>args_type</computeroutput> </para></entry><entry thead="no"><para>The type of all arguments of the mock function as a tuple </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>return_type</computeroutput> </para></entry><entry thead="no"><para>The return type of the mock function </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>function_type</computeroutput> </para></entry><entry thead="no"><para>The type of the mock function </para></entry></row>
</table>
For example, when using an <computeroutput>ACTION</computeroutput> as a stub action for mock function: <programlisting><codeline><highlight class="normal">int<sp/>DoSomething(bool<sp/>flag,<sp/>int*<sp/>ptr);</highlight></codeline>
</programlisting> we have: <table rows="9" cols="2"><row>
<entry thead="yes"><para><bold>Pre-defined Symbol</bold> </para></entry><entry thead="yes"><para><bold>Is Bound To</bold>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>arg0</computeroutput> </para></entry><entry thead="no"><para>the value of <computeroutput>flag</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>arg0_type</computeroutput> </para></entry><entry thead="no"><para>the type <computeroutput>bool</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>arg1</computeroutput> </para></entry><entry thead="no"><para>the value of <computeroutput>ptr</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>arg1_type</computeroutput> </para></entry><entry thead="no"><para>the type <computeroutput>int*</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>args</computeroutput> </para></entry><entry thead="no"><para>the tuple <computeroutput>(flag, ptr)</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>args_type</computeroutput> </para></entry><entry thead="no"><para>the type <computeroutput><ref refid="classstd_1_1tr1_1_1tuple" kindref="compound">std::tr1::tuple</ref>&lt;bool, int*&gt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>return_type</computeroutput> </para></entry><entry thead="no"><para>the type <computeroutput>int</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>function_type</computeroutput> </para></entry><entry thead="no"><para>the type <computeroutput>int(bool, int*)</computeroutput> </para></entry></row>
</table>
<heading level="2">Writing New Parameterized Actions Quickly</heading>
</para><para>Sometimes you&apos;ll want to parameterize an action you define. For that we have another macro <programlisting><codeline><highlight class="normal">ACTION_P(name,<sp/>param)<sp/>{<sp/>statements;<sp/>}</highlight></codeline>
</programlisting></para><para>For example, <programlisting><codeline><highlight class="normal">ACTION_P(Add,<sp/>n)<sp/>{<sp/>return<sp/>arg0<sp/>+<sp/>n;<sp/>}</highlight></codeline>
</programlisting> will allow you to write <programlisting><codeline><highlight class="normal">//<sp/>Returns<sp/>argument<sp/>#0<sp/>+<sp/>5.</highlight></codeline>
<codeline><highlight class="normal">...<sp/>WillOnce(Add(5));</highlight></codeline>
</programlisting></para><para>For convenience, we use the term <emphasis>arguments</emphasis> for the values used to invoke the mock function, and the term <emphasis>parameters</emphasis> for the values used to instantiate an action.</para><para>Note that you don&apos;t need to provide the type of the parameter either. Suppose the parameter is named <computeroutput>param</computeroutput>, you can also use the Google-Mock-defined symbol <computeroutput>param_type</computeroutput> to refer to the type of the parameter as inferred by the compiler. For example, in the body of <computeroutput>ACTION_P(Add, n)</computeroutput> above, you can write <computeroutput>n_type</computeroutput> for the type of <computeroutput>n</computeroutput>.</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> also provides <computeroutput>ACTION_P2</computeroutput>, <computeroutput>ACTION_P3</computeroutput>, and etc to support multi-parameter actions. For example, <programlisting><codeline><highlight class="normal">ACTION_P2(ReturnDistanceTo,<sp/>x,<sp/>y)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>dx<sp/>=<sp/>arg0<sp/>-<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>dy<sp/>=<sp/>arg1<sp/>-<sp/>y;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>sqrt(dx*dx<sp/>+<sp/>dy*dy);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> lets you write <programlisting><codeline><highlight class="normal">...<sp/>WillOnce(ReturnDistanceTo(5.0,<sp/>26.5));</highlight></codeline>
</programlisting></para><para>You can view <computeroutput>ACTION</computeroutput> as a degenerated parameterized action where the number of parameters is 0.</para><para>You can also easily define actions overloaded on the number of parameters: <programlisting><codeline><highlight class="normal">ACTION_P(Plus,<sp/>a)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">ACTION_P2(Plus,<sp/>a,<sp/>b)<sp/>{<sp/>...<sp/>}</highlight></codeline>
</programlisting></para><para><heading level="2">Restricting the Type of an Argument or Parameter in an ACTION</heading>
</para><para>For maximum brevity and reusability, the <computeroutput>ACTION*</computeroutput> macros don&apos;t ask you to provide the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.</para><para>Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example: <programlisting><codeline><highlight class="normal">ACTION(Foo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Makes<sp/>sure<sp/>arg0<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>int.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>n<sp/>=<sp/>arg0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>use<sp/>n<sp/>instead<sp/>of<sp/>arg0<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ACTION_P(Bar,<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Makes<sp/>sure<sp/>the<sp/>type<sp/>of<sp/>arg1<sp/>is<sp/>const<sp/>char*.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::StaticAssertTypeEq&lt;const<sp/>char*,<sp/>arg1_type&gt;();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Makes<sp/>sure<sp/>param<sp/>can<sp/>be<sp/>converted<sp/>to<sp/>bool.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>flag<sp/>=<sp/>param;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> where <computeroutput>StaticAssertTypeEq</computeroutput> is a compile-time assertion in Google Test that verifies two types are the same.</para><para><heading level="2">Writing New Action Templates Quickly</heading>
</para><para>Sometimes you want to give an action explicit template parameters that cannot be inferred from its value parameters. <computeroutput>ACTION_TEMPLATE()</computeroutput> supports that and can be viewed as an extension to <computeroutput>ACTION()</computeroutput> and <computeroutput>ACTION_P*()</computeroutput>.</para><para>The syntax: <programlisting><codeline><highlight class="normal">ACTION_TEMPLATE(ActionName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_m_TEMPLATE_PARAMS(kind1,<sp/>name1,<sp/>...,<sp/>kind_m,<sp/>name_m),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_n_VALUE_PARAMS(p1,<sp/>...,<sp/>p_n))<sp/>{<sp/>statements;<sp/>}</highlight></codeline>
</programlisting></para><para>defines an action template that takes <emphasis>m</emphasis> explicit template parameters and <emphasis>n</emphasis> value parameters, where <emphasis>m</emphasis> is between 1 and 10, and <emphasis>n</emphasis> is between 0 and 10. <computeroutput>name_i</computeroutput> is the name of the i-th template parameter, and <computeroutput>kind_i</computeroutput> specifies whether it&apos;s a <computeroutput>typename</computeroutput>, an integral constant, or a template. <computeroutput>p_i</computeroutput> is the name of the i-th value parameter.</para><para>Example: <programlisting><codeline><highlight class="normal">//<sp/>DuplicateArg&lt;k,<sp/>T&gt;(output)<sp/>converts<sp/>the<sp/>k-th<sp/>argument<sp/>of<sp/>the<sp/>mock</highlight></codeline>
<codeline><highlight class="normal">//<sp/>function<sp/>to<sp/>type<sp/>T<sp/>and<sp/>copies<sp/>it<sp/>to<sp/>*output.</highlight></codeline>
<codeline><highlight class="normal">ACTION_TEMPLATE(DuplicateArg,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note<sp/>the<sp/>comma<sp/>between<sp/>int<sp/>and<sp/>k:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_2_TEMPLATE_PARAMS(int,<sp/>k,<sp/>typename,<sp/>T),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_1_VALUE_PARAMS(output))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*output<sp/>=<sp/>T(std::tr1::get&lt;k&gt;(args));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>To create an instance of an action template, write: <programlisting><codeline><highlight class="normal">ActionName&lt;t1,<sp/>...,<sp/>t_m&gt;(v1,<sp/>...,<sp/>v_n)</highlight></codeline>
</programlisting> where the <computeroutput>t</computeroutput>s are the template arguments and the <computeroutput>v</computeroutput>s are the value arguments. The value argument types are inferred by the compiler. For example: <programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>n;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Foo(_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DuplicateArg&lt;1,<sp/>unsigned<sp/>char&gt;(&amp;n));</highlight></codeline>
</programlisting></para><para>If you want to explicitly specify the value argument types, you can provide additional template arguments: <programlisting><codeline><highlight class="normal">ActionName&lt;t1,<sp/>...,<sp/>t_m,<sp/>u1,<sp/>...,<sp/>u_k&gt;(v1,<sp/>...,<sp/>v_n)</highlight></codeline>
</programlisting> where <computeroutput>u_i</computeroutput> is the desired type of <computeroutput>v_i</computeroutput>.</para><para><computeroutput>ACTION_TEMPLATE</computeroutput> and <computeroutput>ACTION</computeroutput>/<computeroutput>ACTION_P*</computeroutput> can be overloaded on the number of value parameters, but not on the number of template parameters. Without the restriction, the meaning of the following is unclear:</para><para><programlisting><codeline><highlight class="normal">OverloadedAction&lt;int,<sp/>bool&gt;(x);</highlight></codeline>
</programlisting></para><para>Are we using a single-template-parameter action where <computeroutput>bool</computeroutput> refers to the type of <computeroutput>x</computeroutput>, or a two-template-parameter action where the compiler is asked to infer the type of <computeroutput>x</computeroutput>?</para><para><heading level="2">Using the ACTION Object&apos;s Type</heading>
</para><para>If you are writing a function that returns an <computeroutput>ACTION</computeroutput> object, you&apos;ll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple: <table rows="8" cols="3"><row>
<entry thead="yes"><para><bold>Given Definition</bold> </para></entry><entry thead="yes"><para><bold>Expression</bold> </para></entry><entry thead="yes"><para><bold>Has Type</bold>  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>ACTION(Foo)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Foo()</computeroutput> </para></entry><entry thead="no"><para><computeroutput>FooAction</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>ACTION_TEMPLATE(Foo, HAS_m_TEMPLATE_PARAMS(...), AND_0_VALUE_PARAMS())</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Foo&lt;t1, ..., t_m&gt;()</computeroutput> </para></entry><entry thead="no"><para><computeroutput>FooAction&lt;t1, ..., t_m&gt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>ACTION_P(Bar, param)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Bar(int_value)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>BarActionP&lt;int&gt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>ACTION_TEMPLATE(Bar, HAS_m_TEMPLATE_PARAMS(...), AND_1_VALUE_PARAMS(p1))</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Bar&lt;t1, ..., t_m&gt;(int_value)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>FooActionP&lt;t1, ..., t_m, int&gt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>ACTION_P2(Baz, p1, p2)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Baz(bool_value, int_value)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>BazActionP2&lt;bool, int&gt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>ACTION_TEMPLATE(Baz, HAS_m_TEMPLATE_PARAMS(...), AND_2_VALUE_PARAMS(p1, p2))</computeroutput> </para></entry><entry thead="no"><para><computeroutput>Baz&lt;t1, ..., t_m&gt;(bool_value, int_value)</computeroutput> </para></entry><entry thead="no"><para><computeroutput>FooActionP2&lt;t1, ..., t_m, bool, int&gt;</computeroutput> </para></entry></row>
<row>
<entry thead="no"><para>... </para></entry><entry thead="no"><para>... </para></entry><entry thead="no"><para>... </para></entry></row>
</table>
Note that we have to pick different suffixes (<computeroutput>Action</computeroutput>, <computeroutput>ActionP</computeroutput>, <computeroutput>ActionP2</computeroutput>, and etc) for actions with different numbers of value parameters, or the action definitions cannot be overloaded on the number of them.</para><para><heading level="2">Writing New Monomorphic Actions</heading>
</para><para>While the <computeroutput>ACTION*</computeroutput> macros are very convenient, sometimes they are inappropriate. For example, despite the tricks shown in the previous recipes, they don&apos;t let you directly specify the types of the mock function arguments and the action parameters, which in general leads to unoptimized compiler error messages that can baffle unfamiliar users. They also don&apos;t allow overloading actions based on parameter types without jumping through some hoops.</para><para>An alternative to the <computeroutput>ACTION*</computeroutput> macros is to implement <computeroutput><ref refid="classtesting_1_1_action_interface" kindref="compound">testing::ActionInterface</ref>&lt;F&gt;</computeroutput>, where <computeroutput>F</computeroutput> is the type of the mock function in which the action will be used. For example:</para><para><programlisting><codeline><highlight class="normal">template<sp/>&lt;typename<sp/>F&gt;class<sp/>ActionInterface<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~ActionInterface();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Performs<sp/>the<sp/>action.<sp/><sp/>Result<sp/>is<sp/>the<sp/>return<sp/>type<sp/>of<sp/>function<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>F,<sp/>and<sp/>ArgumentTuple<sp/>is<sp/>the<sp/>tuple<sp/>of<sp/>arguments<sp/>of<sp/>F.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>For<sp/>example,<sp/>if<sp/>F<sp/>is<sp/>int(bool,<sp/>const<sp/>string&amp;),<sp/>then<sp/>Result<sp/>would</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>be<sp/>int,<sp/>and<sp/>ArgumentTuple<sp/>would<sp/>be<sp/>tr1::tuple&lt;bool,<sp/>const<sp/>string&amp;&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>Result<sp/>Perform(const<sp/>ArgumentTuple&amp;<sp/>args)<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::Action;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::ActionInterface;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::MakeAction;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">typedef<sp/>int<sp/>IncrementMethod(int*);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>IncrementArgumentAction<sp/>:<sp/>public<sp/>ActionInterface&lt;IncrementMethod&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>int<sp/>Perform(const<sp/>tr1::tuple&lt;int*&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int*<sp/>p<sp/>=<sp/>tr1::get&lt;0&gt;(args);<sp/><sp/>//<sp/>Grabs<sp/>the<sp/>first<sp/>argument.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*p++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Action&lt;IncrementMethod&gt;<sp/>IncrementArgument()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>MakeAction(new<sp/>IncrementArgumentAction);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Baz(_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(IncrementArgument());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.Baz(&amp;n);<sp/><sp/>//<sp/>Should<sp/>return<sp/>5<sp/>and<sp/>change<sp/>n<sp/>to<sp/>6.</highlight></codeline>
</programlisting></para><para><heading level="2">Writing New Polymorphic Actions</heading>
</para><para>The previous recipe showed you how to define your own action. This is all good, except that you need to know the type of the function in which the action will be used. Sometimes that can be a problem. For example, if you want to use the action in functions with <emphasis>different</emphasis> types (e.g. like <computeroutput>Return()</computeroutput> and <computeroutput>SetArgPointee()</computeroutput>).</para><para>If an action can be used in several types of mock functions, we say it&apos;s <emphasis>polymorphic</emphasis>. The <computeroutput>MakePolymorphicAction()</computeroutput> function template makes it easy to define such an action:</para><para><programlisting><codeline><highlight class="normal">namespace<sp/>testing<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>Impl&gt;</highlight></codeline>
<codeline><highlight class="normal">PolymorphicAction&lt;Impl&gt;<sp/>MakePolymorphicAction(const<sp/>Impl&amp;<sp/>impl);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>testing</highlight></codeline>
</programlisting></para><para>As an example, let&apos;s define an action that returns the second argument in the mock function&apos;s argument list. The first step is to define an implementation class:</para><para><programlisting><codeline><highlight class="normal">class<sp/>ReturnSecondArgumentAction<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>Result,<sp/>typename<sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Result<sp/>Perform(const<sp/>ArgumentTuple&amp;<sp/>args)<sp/>const<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>To<sp/>get<sp/>the<sp/>i-th<sp/>(0-based)<sp/>argument,<sp/>use<sp/>tr1::get&lt;i&gt;(args).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>tr1::get&lt;1&gt;(args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>This implementation class does <emphasis>not</emphasis> need to inherit from any particular class. What matters is that it must have a <computeroutput>Perform()</computeroutput> method template. This method template takes the mock function&apos;s arguments as a tuple in a <bold>single</bold> argument, and returns the result of the action. It can be either <computeroutput>const</computeroutput> or not, but must be invokable with exactly one template argument, which is the result type. In other words, you must be able to call <computeroutput>Perform&lt;R&gt;(args)</computeroutput> where <computeroutput>R</computeroutput> is the mock function&apos;s return type and <computeroutput>args</computeroutput> is its arguments in a tuple.</para><para>Next, we use <computeroutput>MakePolymorphicAction()</computeroutput> to turn an instance of the implementation class into the polymorphic action we need. It will be convenient to have a wrapper for this:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::MakePolymorphicAction;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>::testing::PolymorphicAction;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">PolymorphicAction&lt;ReturnSecondArgumentAction&gt;<sp/>ReturnSecondArgument()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>MakePolymorphicAction(ReturnSecondArgumentAction());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Now, you can use this polymorphic action the same way you use the built-in ones:</para><para><programlisting><codeline><highlight class="normal">using<sp/>::testing::_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD2(DoThis,<sp/>int(bool<sp/>flag,<sp/>int<sp/>n));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MOCK_METHOD3(DoThat,<sp/>string(int<sp/>x,<sp/>const<sp/>char*<sp/>str1,<sp/>const<sp/>char*<sp/>str2));</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>MockFoo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThis(_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnSecondArgument());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>DoThat(_,<sp/>_,<sp/>_))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnSecondArgument());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.DoThis(true,<sp/>5);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>return<sp/>5.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>foo.DoThat(1,<sp/>&quot;Hi&quot;,<sp/>&quot;Bye&quot;);<sp/><sp/>//<sp/>Will<sp/>return<sp/>&quot;Hi&quot;.</highlight></codeline>
</programlisting></para><para><heading level="2">Teaching Google <ref refid="class_mock" kindref="compound">Mock</ref> How to Print Your Values</heading>
</para><para>When an uninteresting or unexpected call occurs, Google <ref refid="class_mock" kindref="compound">Mock</ref> prints the argument values and the stack trace to help you debug. Assertion macros like <computeroutput>EXPECT_THAT</computeroutput> and <computeroutput>EXPECT_EQ</computeroutput> also print the values in question when the assertion fails. Google <ref refid="class_mock" kindref="compound">Mock</ref> and Google Test do this using Google Test&apos;s user-extensible value printer.</para><para>This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the <computeroutput>&lt;&lt;</computeroutput> operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out. <ulink url="http://code.google.com/p/googletest/wiki/AdvancedGuide#Teaching_Google_Test_How_to_Print_Your_Values">Google Test&apos;s advanced guide</ulink> explains how to extend the printer to do a better job at printing your particular type than to dump the bytes. </para>    </detaileddescription>
  </compounddef>
</doxygen>
