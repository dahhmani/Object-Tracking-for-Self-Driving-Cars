<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock__output__test___8cc" kind="file" language="C++">
    <compoundname>gmock_output_test_.cc</compoundname>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="2784">
        <label>sys/stat.h</label>
      </node>
      <node id="2806">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="2779" relation="include">
        </childnode>
      </node>
      <node id="2800">
        <label>iomanip</label>
      </node>
      <node id="2797">
        <label>limits</label>
      </node>
      <node id="2788">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="2775">
        <label>assert.h</label>
      </node>
      <node id="2811">
        <label>iterator</label>
      </node>
      <node id="2799">
        <label>float.h</label>
      </node>
      <node id="2770">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="2771" relation="include">
        </childnode>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2773" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2796" relation="include">
        </childnode>
      </node>
      <node id="2831">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2822" relation="include">
        </childnode>
      </node>
      <node id="2815">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="2776">
        <label>stdlib.h</label>
      </node>
      <node id="2804">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="2782" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
      </node>
      <node id="2816">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="2817" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2804" relation="include">
        </childnode>
      </node>
      <node id="2830">
        <label>gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="2811" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2826" relation="include">
        </childnode>
      </node>
      <node id="2767">
        <label>errno.h</label>
      </node>
      <node id="2828">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="2824">
        <label>gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="2825" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
      </node>
      <node id="2765">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="2766" relation="include">
        </childnode>
        <childnode refid="2820" relation="include">
        </childnode>
        <childnode refid="2822" relation="include">
        </childnode>
        <childnode refid="2824" relation="include">
        </childnode>
        <childnode refid="2829" relation="include">
        </childnode>
        <childnode refid="2830" relation="include">
        </childnode>
        <childnode refid="2826" relation="include">
        </childnode>
        <childnode refid="2831" relation="include">
        </childnode>
        <childnode refid="2832" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
      </node>
      <node id="2769">
        <label>string</label>
      </node>
      <node id="2801">
        <label>map</label>
      </node>
      <node id="2795">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="2814">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="2810" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
      </node>
      <node id="2781">
        <label>stddef.h</label>
      </node>
      <node id="2819">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="2772">
        <label>ostream</label>
      </node>
      <node id="2789">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="2821">
        <label>limits.h</label>
      </node>
      <node id="2822">
        <label>gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="2766" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2823" relation="include">
        </childnode>
      </node>
      <node id="2807">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="2808" relation="include">
        </childnode>
      </node>
      <node id="2764">
        <label>vendor/googletest/googlemock/test/gmock_output_test_.cc</label>
        <link refid="gmock__output__test___8cc"/>
        <childnode refid="2765" relation="include">
        </childnode>
        <childnode refid="2771" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2796" relation="include">
        </childnode>
      </node>
      <node id="2783">
        <label>sys/types.h</label>
      </node>
      <node id="2782">
        <label>string.h</label>
      </node>
      <node id="2766">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="2767" relation="include">
        </childnode>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
      </node>
      <node id="2793">
        <label>typeinfo</label>
      </node>
      <node id="2774">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="2775" relation="include">
        </childnode>
        <childnode refid="2776" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2778" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2795" relation="include">
        </childnode>
      </node>
      <node id="2790">
        <label>unistd.h</label>
      </node>
      <node id="2787">
        <label>vector</label>
      </node>
      <node id="2813">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="2803">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="2797" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
      </node>
      <node id="2786">
        <label>utility</label>
      </node>
      <node id="2825">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="2801" relation="include">
        </childnode>
        <childnode refid="2802" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2766" relation="include">
        </childnode>
        <childnode refid="2820" relation="include">
        </childnode>
        <childnode refid="2826" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2796" relation="include">
        </childnode>
      </node>
      <node id="2785">
        <label>sstream</label>
      </node>
      <node id="2778">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="2776" relation="include">
        </childnode>
        <childnode refid="2775" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
      </node>
      <node id="2826">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="2827" relation="include">
        </childnode>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2811" relation="include">
        </childnode>
        <childnode refid="2797" relation="include">
        </childnode>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2770" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2796" relation="include">
        </childnode>
        <childnode refid="2828" relation="include">
        </childnode>
      </node>
      <node id="2827">
        <label>math.h</label>
      </node>
      <node id="2829">
        <label>gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="2825" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
      </node>
      <node id="2817">
        <label>iosfwd</label>
      </node>
      <node id="2820">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="2821" relation="include">
        </childnode>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2774" relation="include">
        </childnode>
        <childnode refid="2796" relation="include">
        </childnode>
      </node>
      <node id="2805">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="2804" relation="include">
        </childnode>
      </node>
      <node id="2777">
        <label>iostream</label>
      </node>
      <node id="2796">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="2797" relation="include">
        </childnode>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2804" relation="include">
        </childnode>
        <childnode refid="2807" relation="include">
        </childnode>
        <childnode refid="2803" relation="include">
        </childnode>
        <childnode refid="2809" relation="include">
        </childnode>
        <childnode refid="2812" relation="include">
        </childnode>
        <childnode refid="2815" relation="include">
        </childnode>
        <childnode refid="2816" relation="include">
        </childnode>
        <childnode refid="2818" relation="include">
        </childnode>
        <childnode refid="2819" relation="include">
        </childnode>
      </node>
      <node id="2794">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="2786" relation="include">
        </childnode>
      </node>
      <node id="2791">
        <label>strings.h</label>
      </node>
      <node id="2780">
        <label>ctype.h</label>
      </node>
      <node id="2818">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2806" relation="include">
        </childnode>
      </node>
      <node id="2779">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2781" relation="include">
        </childnode>
        <childnode refid="2776" relation="include">
        </childnode>
        <childnode refid="2771" relation="include">
        </childnode>
        <childnode refid="2782" relation="include">
        </childnode>
        <childnode refid="2783" relation="include">
        </childnode>
        <childnode refid="2784" relation="include">
        </childnode>
        <childnode refid="2768" relation="include">
        </childnode>
        <childnode refid="2777" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2788" relation="include">
        </childnode>
        <childnode refid="2789" relation="include">
        </childnode>
        <childnode refid="2790" relation="include">
        </childnode>
        <childnode refid="2791" relation="include">
        </childnode>
        <childnode refid="2792" relation="include">
        </childnode>
        <childnode refid="2793" relation="include">
        </childnode>
        <childnode refid="2794" relation="include">
        </childnode>
      </node>
      <node id="2798">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2799" relation="include">
        </childnode>
        <childnode refid="2782" relation="include">
        </childnode>
        <childnode refid="2800" relation="include">
        </childnode>
        <childnode refid="2797" relation="include">
        </childnode>
        <childnode refid="2801" relation="include">
        </childnode>
        <childnode refid="2802" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2803" relation="include">
        </childnode>
        <childnode refid="2804" relation="include">
        </childnode>
        <childnode refid="2805" relation="include">
        </childnode>
        <childnode refid="2806" relation="include">
        </childnode>
      </node>
      <node id="2832">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="2830" relation="include">
        </childnode>
      </node>
      <node id="2823">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="internal_2custom_2gmock-generated-actions_8h_source"/>
      </node>
      <node id="2810">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="2780" relation="include">
        </childnode>
        <childnode refid="2811" relation="include">
        </childnode>
        <childnode refid="2802" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2778" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2812" relation="include">
        </childnode>
      </node>
      <node id="2773">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="2774" relation="include">
        </childnode>
      </node>
      <node id="2802">
        <label>set</label>
      </node>
      <node id="2809">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2810" relation="include">
        </childnode>
        <childnode refid="2814" relation="include">
        </childnode>
      </node>
      <node id="2768">
        <label>algorithm</label>
      </node>
      <node id="2792">
        <label>regex.h</label>
      </node>
      <node id="2771">
        <label>stdio.h</label>
      </node>
      <node id="2808">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2771" relation="include">
        </childnode>
      </node>
      <node id="2812">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="2772" relation="include">
        </childnode>
        <childnode refid="2785" relation="include">
        </childnode>
        <childnode refid="2769" relation="include">
        </childnode>
        <childnode refid="2786" relation="include">
        </childnode>
        <childnode refid="2787" relation="include">
        </childnode>
        <childnode refid="2779" relation="include">
        </childnode>
        <childnode refid="2798" relation="include">
        </childnode>
        <childnode refid="2813" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_mock_foo" prot="public">MockFoo</innerclass>
    <innerclass refid="class_g_mock_output_test" prot="public">GMockOutputTest</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmock__output__test___8cc_1a5cae7729bb06b3064b765a06e58c2566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, ExpectedCall)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>ExpectedCall</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="68" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1acafecaf97c5e08925e452e670cc9c60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, ExpectedCallToVoidFunction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>ExpectedCallToVoidFunction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="77" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a9ea40a88b30f8b5507efbf486ac06761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, ExplicitActionsRunOut)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>ExplicitActionsRunOut</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="86" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a87e290b73a27f69e2352986b95a09fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UnexpectedCall)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UnexpectedCall</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="94" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1aba5c783b0346beacc83af5ced4aeb7db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UnexpectedCallToVoidFunction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UnexpectedCallToVoidFunction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="101" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1afa4ca5a73e2af24d016e48ee70e10901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, ExcessiveCall)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>ExcessiveCall</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="108" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1ad8406b814788092ad25da61038706134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, ExcessiveCallToVoidFunction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>ExcessiveCallToVoidFunction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="115" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="115" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1aa9159573c3f5f5bc7be3475e7398afc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UninterestingCall)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UninterestingCall</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="122" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1ad6bc4a5b1d635a65363653eff36f6f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UninterestingCallToVoidFunction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UninterestingCallToVoidFunction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="126" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a887f8f9cf09ffea984dcdb87c692c745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, RetiredExpectation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>RetiredExpectation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="130" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="130" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1aab78247f3f1aa1b95feb21150d8e7643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UnsatisfiedPrerequisite)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UnsatisfiedPrerequisite</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="140" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="140" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1aa8df8651de0f2d9f7d1dd765eec89998" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UnsatisfiedPrerequisites)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UnsatisfiedPrerequisites</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="154" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="154" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a3e14c0f9607348fdca074ccc6589fbdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UnsatisfiedWith)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UnsatisfiedWith</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="170" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a662a66a60e7b302feb2dfa4a6b59bf98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UnsatisfiedExpectation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UnsatisfiedExpectation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="174" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="174" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a0e3e9858cc7be4771edbe0f346f304f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, MismatchArguments)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>MismatchArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="182" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a6e68cce05dc47eea2b0376a1ce4baa23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, MismatchWith)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>MismatchWith</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="190" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="190" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a4cea140a4bc751ea563614b827496a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, MismatchArgumentsAndWith)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>MismatchArgumentsAndWith</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="198" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="198" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a4ac1ba04aede81f6771240e1c719a28e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UnexpectedCallWithDefaultAction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UnexpectedCallWithDefaultAction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="206" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="206" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a521e2dc9f8197c96e992901a5e39f5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, ExcessiveCallWithDefaultAction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>ExcessiveCallWithDefaultAction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="218" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="218" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1afcf833faaa33197a2f9815425f101d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, UninterestingCallWithDefaultAction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>UninterestingCallWithDefaultAction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="233" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="233" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a885556bf2f15e4a3d2eddac44dd7fc2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, ExplicitActionsRunOutWithDefaultAction)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>ExplicitActionsRunOutWithDefaultAction</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="243" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="243" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1add20a01035182eac6e1278d06e001d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(GMockOutputTest, CatchesLeakedMocks)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref></type>
        </param>
        <param>
          <type>CatchesLeakedMocks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="254" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="254" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1af634a5c16bccc1861e3fab3181bad4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void TestCatchesLeakedMocksInAdHocTests</definition>
        <argsstring>()</argsstring>
        <name>TestCatchesLeakedMocksInAdHocTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="271" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="271" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="gmock__output__test___8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc" line="281" column="1" bodyfile="vendor/googletest/googlemock/test/gmock_output_test_.cc" bodystart="281" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Google<sp/>Mock&apos;s<sp/>output<sp/>in<sp/>various<sp/>scenarios.<sp/><sp/>This<sp/>ensures<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock&apos;s<sp/>messages<sp/>are<sp/>readable<sp/>and<sp/>useful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::_;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::AnyNumber;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ge;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">testing::InSequence</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">testing::NaggyMock</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ref;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Return;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">testing::Sequence</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="class_mock_foo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockFoo<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>MockFoo()<sp/>{}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>MOCK_METHOD3(Bar,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Bar2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Bar3,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(MockFoo);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_g_mock_output_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockFoo&gt;</ref><sp/>foo_;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>ExpectedCall)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>testing::GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(0,<sp/>_));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>testing::GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>ExpectedCallToVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>testing::GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar3(0,<sp/>_));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>foo_.Bar3(0,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>testing::GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>ExplicitActionsRunOut)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(_,<sp/>_))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(2)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>2);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Explicit<sp/>actions<sp/>in<sp/>EXPECT_CALL<sp/>run<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UnexpectedCall)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(0,<sp/>_));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Unexpected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UnexpectedCallToVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar3(0,<sp/>_));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>foo_.Bar3(1,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Unexpected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>foo_.Bar3(0,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>ExcessiveCall)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(0,<sp/>_));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Excessive<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>ExcessiveCallToVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar3(0,<sp/>_));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>foo_.Bar3(0,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>foo_.Bar3(0,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Excessive<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UninterestingCall)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Uninteresting<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UninterestingCallToVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>foo_.Bar3(0,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Uninteresting<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>RetiredExpectation)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(_,<sp/>_))</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.RetiresOnSaturation();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(0,<sp/>0));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>1);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Matches<sp/>a<sp/>retired<sp/>expectation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>0);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UnsatisfiedPrerequisite)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref><sp/>s;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar(_,<sp/>0,<sp/>_));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(0,<sp/>0));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(1,<sp/>_));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Has<sp/>one<sp/>immediate<sp/>unsatisfied<sp/>pre-requisite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>foo_.Bar(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>0);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>0);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UnsatisfiedPrerequisites)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref><sp/>s1,<sp/>s2;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar(_,<sp/>0,<sp/>_))</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.InSequence(s1);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(0,<sp/>0))</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.InSequence(s2);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(1,<sp/>_))</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.InSequence(s1,<sp/>s2);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Has<sp/>two<sp/>immediate<sp/>unsatisfied<sp/>pre-requisites</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>foo_.Bar(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>0);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>0);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UnsatisfiedWith)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(_,<sp/>_)).With(Ge());</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UnsatisfiedExpectation)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar(_,<sp/>_,<sp/>_));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(0,<sp/>_))</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(2);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>1);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>MismatchArguments)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar(Ref(s),<sp/>_,<sp/>Ge(0)));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>foo_.Bar(</highlight><highlight class="stringliteral">&quot;Ho&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>-0.1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mismatch<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>foo_.Bar(s,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>MismatchWith)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(Ge(2),<sp/>Ge(1)))</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.With(Ge());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>3);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mismatch<sp/>With()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>1);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>MismatchArgumentsAndWith)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(Ge(2),<sp/>Ge(1)))</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.With(Ge());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>3);<sp/><sp/></highlight><highlight class="comment">//<sp/>Mismatch<sp/>arguments<sp/>and<sp/>mismatch<sp/>With()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>1);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UnexpectedCallWithDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>ON_CALL(foo_,<sp/>Bar2(_,<sp/>_))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>action<sp/>#1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>ON_CALL(foo_,<sp/>Bar2(1,<sp/>_))</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>action<sp/>#2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(2,<sp/>2));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Unexpected<sp/>call,<sp/>takes<sp/>default<sp/>action<sp/>#2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>foo_.Bar2(0,<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Unexpected<sp/>call,<sp/>takes<sp/>default<sp/>action<sp/>#1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>ExcessiveCallWithDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>ON_CALL(foo_,<sp/>Bar2(_,<sp/>_))</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>action<sp/>#1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>ON_CALL(foo_,<sp/>Bar2(1,<sp/>_))</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>action<sp/>#2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(2,<sp/>2));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(1,<sp/>1));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>Excessive<sp/>call,<sp/>takes<sp/>default<sp/>action<sp/>#1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Expected<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Excessive<sp/>call,<sp/>takes<sp/>default<sp/>action<sp/>#2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>UninterestingCallWithDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>ON_CALL(foo_,<sp/>Bar2(_,<sp/>_))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>action<sp/>#1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>ON_CALL(foo_,<sp/>Bar2(1,<sp/>_))</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>action<sp/>#2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>2);<sp/><sp/></highlight><highlight class="comment">//<sp/>Uninteresting<sp/>call,<sp/>takes<sp/>default<sp/>action<sp/>#1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Uninteresting<sp/>call,<sp/>takes<sp/>default<sp/>action<sp/>#2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>ExplicitActionsRunOutWithDefaultAction)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>ON_CALL(foo_,<sp/>Bar2(_,<sp/>_))</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>action<sp/>#1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo_,<sp/>Bar2(_,<sp/>_))</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(2)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>foo_.Bar2(2,<sp/>2);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>foo_.Bar2(1,<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>Explicit<sp/>actions<sp/>in<sp/>EXPECT_CALL<sp/>run<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_g_mock_output_test" kindref="compound">GMockOutputTest</ref>,<sp/>CatchesLeakedMocks)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>MockFoo*<sp/>foo1<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockFoo;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>MockFoo*<sp/>foo2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockFoo;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invokes<sp/>ON_CALL<sp/>on<sp/>foo1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>ON_CALL(*foo1,<sp/>Bar(_,<sp/>_,<sp/>_)).WillByDefault(Return(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invokes<sp/>EXPECT_CALL<sp/>on<sp/>foo2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*foo2,<sp/>Bar2(_,<sp/>_));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*foo2,<sp/>Bar2(1,<sp/>_));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*foo2,<sp/>Bar3(_,<sp/>_)).Times(AnyNumber());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>foo2-&gt;Bar2(2,<sp/>1);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>foo2-&gt;Bar2(1,<sp/>1);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>foo1<sp/>and<sp/>foo2<sp/>are<sp/>deliberately<sp/>leaked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestCatchesLeakedMocksInAdHocTests()<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>MockFoo*<sp/><ref refid="namespacefoo" kindref="compound">foo</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MockFoo;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Invokes<sp/>EXPECT_CALL<sp/>on<sp/>foo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*foo,<sp/>Bar2(_,<sp/>_));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>foo-&gt;Bar2(2,<sp/>1);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>foo<sp/>is<sp/>deliberately<sp/>leaked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>testing::InitGoogleMock(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensures<sp/>that<sp/>the<sp/>tests<sp/>pass<sp/>no<sp/>matter<sp/>what<sp/>value<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--gmock_catch_leaked_mocks<sp/>and<sp/>--gmock_verbose<sp/>the<sp/>user<sp/>specifies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>testing::GMOCK_FLAG(catch_leaked_mocks)<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>testing::GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>TestCatchesLeakedMocksInAdHocTests();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/test/gmock_output_test_.cc"/>
  </compounddef>
</doxygen>
