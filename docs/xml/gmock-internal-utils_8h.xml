<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-internal-utils_8h" kind="file" language="C++">
    <compoundname>gmock-internal-utils.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">ostream</includes>
    <includes local="no">string</includes>
    <includes refid="gmock-generated-internal-utils_8h" local="yes">gmock/internal/gmock-generated-internal-utils.h</includes>
    <includes refid="gmock-port_8h" local="yes">gmock/internal/gmock-port.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gmock-actions_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-actions.h</includedby>
    <includedby refid="gmock-generated-function-mockers_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h</includedby>
    <includedby refid="gmock-matchers_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-matchers.h</includedby>
    <includedby refid="gmock-spec-builders_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h</includedby>
    <includedby refid="gmock_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock.h</includedby>
    <includedby refid="gmock-cardinalities_8cc" local="yes">vendor/googletest/googlemock/src/gmock-cardinalities.cc</includedby>
    <includedby refid="gmock-internal-utils_8cc" local="yes">vendor/googletest/googlemock/src/gmock-internal-utils.cc</includedby>
    <includedby refid="gmock-generated-internal-utils__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock-generated-internal-utils_test.cc</includedby>
    <includedby refid="gmock-internal-utils__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock-internal-utils_test.cc</includedby>
    <incdepgraph>
      <node id="1044">
        <label>sys/stat.h</label>
      </node>
      <node id="1067">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1061">
        <label>iomanip</label>
      </node>
      <node id="1058">
        <label>limits</label>
      </node>
      <node id="1049">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="1035">
        <label>assert.h</label>
      </node>
      <node id="1072">
        <label>iterator</label>
      </node>
      <node id="1060">
        <label>float.h</label>
      </node>
      <node id="1029">
        <label>vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h"/>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1057" relation="include">
        </childnode>
      </node>
      <node id="1076">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="1036">
        <label>stdlib.h</label>
      </node>
      <node id="1065">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="1042" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1077">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="1078" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1065" relation="include">
        </childnode>
      </node>
      <node id="1032">
        <label>string</label>
      </node>
      <node id="1062">
        <label>map</label>
      </node>
      <node id="1056">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="1075">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="1071" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1041">
        <label>stddef.h</label>
      </node>
      <node id="1080">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="1031">
        <label>ostream</label>
      </node>
      <node id="1050">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="1068">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="1069" relation="include">
        </childnode>
      </node>
      <node id="1043">
        <label>sys/types.h</label>
      </node>
      <node id="1042">
        <label>string.h</label>
      </node>
      <node id="1054">
        <label>typeinfo</label>
      </node>
      <node id="1034">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1056" relation="include">
        </childnode>
      </node>
      <node id="1051">
        <label>unistd.h</label>
      </node>
      <node id="1048">
        <label>vector</label>
      </node>
      <node id="1074">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="1064">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1047">
        <label>utility</label>
      </node>
      <node id="1046">
        <label>sstream</label>
      </node>
      <node id="1038">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1078">
        <label>iosfwd</label>
      </node>
      <node id="1066">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="1065" relation="include">
        </childnode>
      </node>
      <node id="1037">
        <label>iostream</label>
      </node>
      <node id="1057">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1064" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1073" relation="include">
        </childnode>
        <childnode refid="1076" relation="include">
        </childnode>
        <childnode refid="1077" relation="include">
        </childnode>
        <childnode refid="1079" relation="include">
        </childnode>
        <childnode refid="1080" relation="include">
        </childnode>
      </node>
      <node id="1055">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="1047" relation="include">
        </childnode>
      </node>
      <node id="1052">
        <label>strings.h</label>
      </node>
      <node id="1040">
        <label>ctype.h</label>
      </node>
      <node id="1079">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1067" relation="include">
        </childnode>
      </node>
      <node id="1039">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1042" relation="include">
        </childnode>
        <childnode refid="1043" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1049" relation="include">
        </childnode>
        <childnode refid="1050" relation="include">
        </childnode>
        <childnode refid="1051" relation="include">
        </childnode>
        <childnode refid="1052" relation="include">
        </childnode>
        <childnode refid="1053" relation="include">
        </childnode>
        <childnode refid="1054" relation="include">
        </childnode>
        <childnode refid="1055" relation="include">
        </childnode>
      </node>
      <node id="1059">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1060" relation="include">
        </childnode>
        <childnode refid="1042" relation="include">
        </childnode>
        <childnode refid="1061" relation="include">
        </childnode>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1062" relation="include">
        </childnode>
        <childnode refid="1063" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1064" relation="include">
        </childnode>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1067" relation="include">
        </childnode>
      </node>
      <node id="1071">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1072" relation="include">
        </childnode>
        <childnode refid="1063" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1073" relation="include">
        </childnode>
      </node>
      <node id="1033">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="1034" relation="include">
        </childnode>
      </node>
      <node id="1063">
        <label>set</label>
      </node>
      <node id="1070">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1071" relation="include">
        </childnode>
        <childnode refid="1075" relation="include">
        </childnode>
      </node>
      <node id="1045">
        <label>algorithm</label>
      </node>
      <node id="1053">
        <label>regex.h</label>
      </node>
      <node id="1030">
        <label>stdio.h</label>
      </node>
      <node id="1069">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1030" relation="include">
        </childnode>
      </node>
      <node id="1073">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1032" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1081">
        <label>vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h"/>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1084">
        <label>vendor/googletest/googlemock/include/gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1091">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1088">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1085">
        <label>vendor/googletest/googlemock/include/gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
      </node>
      <node id="1083">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="1084" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1082">
        <label>vendor/googletest/googlemock/include/gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="1083" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1087">
        <label>vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1089" relation="include">
        </childnode>
      </node>
      <node id="1090">
        <label>vendor/googletest/googlemock/include/gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1089">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1092">
        <label>vendor/googletest/googlemock/include/gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1086">
        <label>vendor/googletest/googlemock/test/gmock_link_test.h</label>
        <link refid="gmock__link__test_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtesting_1_1internal_1_1_pointee_of" prot="public">testing::internal::PointeeOf</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_pointee_of_3_01_t_01_5_01_4" prot="public">testing::internal::PointeeOf&lt; T * &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_linked_ptr_less_than" prot="public">testing::internal::LinkedPtrLessThan</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_kind_of" prot="public">testing::internal::KindOf</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" prot="public">testing::internal::LosslessArithmeticConvertibleImpl</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_bool_00_01bool_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kBool, bool, kBool, bool &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_integer_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kBool, bool, kInteger, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_floating_point_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kBool, bool, kFloatingPoint, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_bool_00_01bool_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kInteger, From, kBool, bool &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_integer_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kInteger, From, kInteger, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_floating_point_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kInteger, From, kFloatingPoint, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_from_00_01k_bool_00_01bool_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kFloatingPoint, From, kBool, bool &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_from_00_01k_integer_00_01_to_01_4" prot="public">testing::internal::LosslessArithmeticConvertibleImpl&lt; kFloatingPoint, From, kInteger, To &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__reference" prot="public">testing::internal::is_reference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1is__reference_3_01_t_01_6_01_4" prot="public">testing::internal::is_reference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1type__equals" prot="public">testing::internal::type_equals</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1type__equals_3_01_t_00_01_t_01_4" prot="public">testing::internal::type_equals&lt; T, T &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1remove__reference" prot="public">testing::internal::remove_reference</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1remove__reference_3_01_t_01_6_01_4" prot="public">testing::internal::remove_reference&lt; T &amp; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_decay_array" prot="public">testing::internal::DecayArray</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_decay_array_3_01_t[_n]_4" prot="public">testing::internal::DecayArray&lt; T[N]&gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_decay_array_3_01_t[]_4" prot="public">testing::internal::DecayArray&lt; T[]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view" prot="public">testing::internal::StlContainerView</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view_3_01_element[_n]_4" prot="public">testing::internal::StlContainerView&lt; Element[N]&gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_stl_container_view_3_01_1_1testing_1_1tuple_3_01_element_pointer_00_01_size_01_4_01_4" prot="public">testing::internal::StlContainerView&lt; ::testing::tuple&lt; ElementPointer, Size &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_from_key" prot="public">testing::internal::RemoveConstFromKey</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_remove_const_from_key_3_01std_1_1pair_3_01const_01_k_00_01_v_01_4_01_4" prot="public">testing::internal::RemoveConstFromKey&lt; std::pair&lt; const K, V &gt; &gt;</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_boolean_constant" prot="public">testing::internal::BooleanConstant</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-internal-utils_8h_1a0725bd2b3326d282677e5197e53cc5e9" prot="public" static="no">
        <name>GMOCK_WCHAR_T_IS_NATIVE_</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="104" column="11" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-internal-utils_8h_1a7d8a1871d7a30543a4e1882a8b2bbcd8" prot="public" static="no">
        <name>GMOCK_DECLARE_KIND_</name>
        <param><defname>type</defname></param>
        <param><defname>kind</defname></param>
        <initializer>template &lt;&gt; struct KindOf&lt;type&gt; { enum { value = kind }; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="136" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-internal-utils_8h_1a72b01bdd08b78e927270885ca880ead4" prot="public" static="no">
        <name>GMOCK_KIND_OF_</name>
        <param><defname>type</defname></param>
        <initializer>static_cast&lt; ::testing::internal::TypeKind&gt;( \
      ::<ref refid="structtesting_1_1internal_1_1_kind_of" kindref="compound">testing::internal::KindOf</ref>&lt;type&gt;::value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="168" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-internal-utils_8h_1a8ee49a1af821b48fd83849c050d0d5a2" prot="public" static="no">
        <name>GMOCK_IS_SIGNED_</name>
        <param><defname>T</defname></param>
        <initializer>(static_cast&lt;T&gt;(-1) &lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" line="173" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>defines<sp/>some<sp/>utilities<sp/>useful<sp/>for<sp/>implementing<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mock.<sp/><sp/>They<sp/>are<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice,<sp/>so<sp/>please<sp/>DO<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>USE<sp/>THEM<sp/>IN<sp/>USER<sp/>CODE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-generated-internal-utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>identifier<sp/>name<sp/>to<sp/>a<sp/>space-separated<sp/>list<sp/>of<sp/>lower-case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>words.<sp/><sp/>Each<sp/>maximum<sp/>substring<sp/>of<sp/>the<sp/>form<sp/>[A-Za-z][a-z]*|\d+<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>treated<sp/>as<sp/>one<sp/>word.<sp/><sp/>For<sp/>example,<sp/>both<sp/>&quot;FooBar123&quot;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;foo_bar_123&quot;<sp/>are<sp/>converted<sp/>to<sp/>&quot;foo<sp/>bar<sp/>123&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ConvertIdentifierNameToWords(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>id_name);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PointeeOf&lt;Pointer&gt;::type<sp/>is<sp/>the<sp/>type<sp/>of<sp/>a<sp/>value<sp/>pointed<sp/>to<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pointer,<sp/>which<sp/>can<sp/>be<sp/>either<sp/>a<sp/>smart<sp/>pointer<sp/>or<sp/>a<sp/>raw<sp/>pointer.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>following<sp/>default<sp/>implementation<sp/>is<sp/>for<sp/>the<sp/>case<sp/>where<sp/>Pointer<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>smart<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er&gt;</highlight></codeline>
<codeline lineno="63" refid="structtesting_1_1internal_1_1_pointee_of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_pointee_of" kindref="compound">PointeeOf</ref><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Smart<sp/>pointer<sp/>classes<sp/>define<sp/>type<sp/>element_type<sp/>as<sp/>the<sp/>type<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>their<sp/>pointees.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pointer::element_type<sp/>type;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>specialization<sp/>is<sp/>for<sp/>the<sp/>raw<sp/>pointer<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="70" refid="structtesting_1_1internal_1_1_pointee_of_3_01_t_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_pointee_of" kindref="compound">PointeeOf</ref>&lt;T*&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetRawPointer(p)<sp/>returns<sp/>the<sp/>raw<sp/>pointer<sp/>underlying<sp/>p<sp/>when<sp/>p<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>smart<sp/>pointer,<sp/>or<sp/>returns<sp/>p<sp/>itself<sp/>when<sp/>p<sp/>is<sp/>already<sp/>a<sp/>raw<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>default<sp/>implementation<sp/>is<sp/>for<sp/>the<sp/>smart<sp/>pointer<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Pointer::element_type*<sp/>GetRawPointer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Pointer&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.get();</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overloaded<sp/>version<sp/>is<sp/>for<sp/>the<sp/>raw<sp/>pointer<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Element*<sp/>GetRawPointer(Element*<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>comparator<sp/>allows<sp/>linked_ptr<sp/>to<sp/>be<sp/>stored<sp/>in<sp/>sets.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85" refid="structtesting_1_1internal_1_1_linked_ptr_less_than" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_linked_ptr_less_than" kindref="compound">LinkedPtrLessThan</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(const<sp/>::testing::internal::linked_ptr&lt;T&gt;&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::testing::internal::linked_ptr&lt;T&gt;&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.get()<sp/>&lt;<sp/>rhs.get();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Symbian<sp/>compilation<sp/>can<sp/>be<sp/>done<sp/>with<sp/>wchar_t<sp/>being<sp/>either<sp/>a<sp/>native</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>or<sp/>a<sp/>typedef.<sp/><sp/>Using<sp/>Google<sp/>Mock<sp/>with<sp/>OpenC<sp/>without<sp/>wchar_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>should<sp/>require<sp/>the<sp/>definition<sp/>of<sp/>_STLP_NO_WCHAR_T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>treats<sp/>wchar_t<sp/>as<sp/>a<sp/>native<sp/>type<sp/>usually,<sp/>but<sp/>treats<sp/>it<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>as<sp/>unsigned<sp/>short<sp/>when<sp/>the<sp/>compiler<sp/>option<sp/>/Zc:wchar_t-<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified.<sp/><sp/>It<sp/>defines<sp/>_NATIVE_WCHAR_T_DEFINED<sp/>symbol<sp/>when<sp/>wchar_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>native<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(GTEST_OS_SYMBIAN<sp/>&amp;&amp;<sp/>defined(_STLP_NO_WCHAR_T))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(_NATIVE_WCHAR_T_DEFINED))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>is<sp/>a<sp/>typedef.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GMOCK_WCHAR_T_IS_NATIVE_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signed<sp/>wchar_t<sp/>and<sp/>unsigned<sp/>wchar_t<sp/>are<sp/>NOT<sp/>in<sp/>the<sp/>C++<sp/>standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>them<sp/>is<sp/>a<sp/>bad<sp/>practice<sp/>and<sp/>not<sp/>portable.<sp/><sp/>So<sp/>DON&apos;T<sp/>use<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Still,<sp/>Google<sp/>Mock<sp/>is<sp/>designed<sp/>to<sp/>work<sp/>even<sp/>if<sp/>the<sp/>user<sp/>uses<sp/>signed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wchar_t<sp/>or<sp/>unsigned<sp/>wchar_t<sp/>(obviously,<sp/>assuming<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supports<sp/>them).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>gcc,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>wchar_t<sp/>==<sp/>signed<sp/>wchar_t<sp/>!=<sp/>unsigned<sp/>wchar_t<sp/>==<sp/>unsigned<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signed/unsigned<sp/>wchar_t<sp/>are<sp/>valid<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GMOCK_HAS_SIGNED_WCHAR_T_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>what<sp/>follows,<sp/>we<sp/>use<sp/>the<sp/>term<sp/>&quot;kind&quot;<sp/>to<sp/>indicate<sp/>whether<sp/>a<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>bool,<sp/>an<sp/>integer<sp/>type<sp/>(excluding<sp/>bool),<sp/>a<sp/>floating-point<sp/>type,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>none<sp/>of<sp/>them.<sp/><sp/>This<sp/>categorization<sp/>is<sp/>useful<sp/>for<sp/>determining</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>matcher<sp/>argument<sp/>type<sp/>can<sp/>be<sp/>safely<sp/>converted<sp/>to<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>in<sp/>the<sp/>implementation<sp/>of<sp/>SafeMatcherCast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>TypeKind<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>kBool,<sp/>kInteger,<sp/>kFloatingPoint,<sp/>kOther</highlight></codeline>
<codeline lineno="128"><highlight class="normal">};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KindOf&lt;T&gt;::value<sp/>is<sp/>the<sp/>kind<sp/>of<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structtesting_1_1internal_1_1_kind_of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_kind_of" kindref="compound">KindOf</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>value<sp/>=<sp/>kOther<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>kind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>macro<sp/>declares<sp/>that<sp/>the<sp/>kind<sp/>of<sp/>&apos;type&apos;<sp/>is<sp/>&apos;kind&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_DECLARE_KIND_(type,<sp/>kind)<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/>struct<sp/>KindOf&lt;type&gt;<sp/>{<sp/>enum<sp/>{<sp/>value<sp/>=<sp/>kind<sp/>};<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>kBool);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>standard<sp/>integer<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>kInteger);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>kInteger);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>kInteger);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>kInteger);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>kInteger);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>kInteger);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>kInteger);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>kInteger);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>kInteger);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GMOCK_WCHAR_T_IS_NATIVE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">,<sp/>kInteger);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Non-standard<sp/>integer<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">GMOCK_DECLARE_KIND_(Int64,<sp/>kInteger);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">GMOCK_DECLARE_KIND_(UInt64,<sp/>kInteger);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>standard<sp/>floating-point<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>kFloatingPoint);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>kFloatingPoint);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">GMOCK_DECLARE_KIND_(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>kFloatingPoint);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GMOCK_DECLARE_KIND_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Evaluates<sp/>to<sp/>the<sp/>kind<sp/>of<sp/>&apos;type&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_KIND_OF_(type)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/>static_cast&lt;<sp/>::testing::internal::TypeKind&gt;(<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::internal::KindOf&lt;type&gt;::value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Evaluates<sp/>to<sp/>true<sp/>iff<sp/>integer<sp/>type<sp/>T<sp/>is<sp/>signed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_IS_SIGNED_(T)<sp/>(static_cast&lt;T&gt;(-1)<sp/>&lt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LosslessArithmeticConvertibleImpl&lt;kFromKind,<sp/>From,<sp/>kToKind,<sp/>To&gt;::value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>true<sp/>iff<sp/>arithmetic<sp/>type<sp/>From<sp/>can<sp/>be<sp/>losslessly<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arithmetic<sp/>type<sp/>To.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>the<sp/>user&apos;s<sp/>responsibility<sp/>to<sp/>ensure<sp/>that<sp/>both<sp/>From<sp/>and<sp/>To<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>raw<sp/>(i.e.<sp/>has<sp/>no<sp/>CV<sp/>modifier,<sp/>is<sp/>not<sp/>a<sp/>pointer,<sp/>and<sp/>is<sp/>not<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference)<sp/>built-in<sp/>arithmetic<sp/>types,<sp/>kFromKind<sp/>is<sp/>the<sp/>kind<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From,<sp/>and<sp/>kToKind<sp/>is<sp/>the<sp/>kind<sp/>of<sp/>To;<sp/>the<sp/>value<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation-defined<sp/>when<sp/>the<sp/>above<sp/>pre-condition<sp/>is<sp/>violated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;TypeKind<sp/>kFromKind,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From,<sp/>TypeKind<sp/>kToKind,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="185" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" kindref="compound">LosslessArithmeticConvertibleImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref><sp/>{};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>bool<sp/>to<sp/>bool<sp/>is<sp/>lossless.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="189" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_bool_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" kindref="compound">LosslessArithmeticConvertibleImpl</ref>&lt;kBool,<sp/>bool,<sp/>kBool,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">true_type</ref><sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>bool<sp/>to<sp/>any<sp/>integer<sp/>type<sp/>is<sp/>lossless.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="194" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_integer_00_01_to_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" kindref="compound">LosslessArithmeticConvertibleImpl</ref>&lt;kBool,<sp/>bool,<sp/>kInteger,<sp/><ref refid="classtesting_1_1internal_1_1_to" kindref="compound">To</ref>&gt;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">true_type</ref><sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>bool<sp/>to<sp/>any<sp/>floating-point<sp/>type<sp/>is<sp/>lossless.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="199" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_floating_point_00_01_to_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" kindref="compound">LosslessArithmeticConvertibleImpl</ref>&lt;kBool,<sp/>bool,<sp/>kFloatingPoint,<sp/>To&gt;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">true_type</ref><sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>an<sp/>integer<sp/>to<sp/>bool<sp/>is<sp/>lossy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From&gt;</highlight></codeline>
<codeline lineno="204" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_bool_00_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" kindref="compound">LosslessArithmeticConvertibleImpl</ref>&lt;kInteger,<sp/>From,<sp/>kBool,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref><sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>an<sp/>integer<sp/>to<sp/>another<sp/>non-bool<sp/>integer<sp/>is<sp/>lossless<sp/>iff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>target<sp/>type&apos;s<sp/>range<sp/>encloses<sp/>the<sp/>source<sp/>type&apos;s<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="210" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_integer_00_01_to_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl" kindref="compound">LosslessArithmeticConvertibleImpl</ref>&lt;kInteger,<sp/>From,<sp/>kInteger,<sp/>To&gt;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">bool_constant</ref>&lt;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>converting<sp/>from<sp/>a<sp/>smaller<sp/>size<sp/>to<sp/>a<sp/>larger<sp/>size,<sp/>we<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fine<sp/>as<sp/>long<sp/>as<sp/>we<sp/>are<sp/>not<sp/>converting<sp/>from<sp/>signed<sp/>to<sp/>unsigned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((sizeof(From)<sp/>&lt;<sp/>sizeof(To))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!GMOCK_IS_SIGNED_(From)<sp/>||<sp/>GMOCK_IS_SIGNED_(To)))<sp/>||</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>converting<sp/>between<sp/>the<sp/>same<sp/>size,<sp/>the<sp/>signedness<sp/>must<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((sizeof(From)<sp/>==<sp/>sizeof(To))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GMOCK_IS_SIGNED_(From)<sp/>==<sp/>GMOCK_IS_SIGNED_(To)))&gt;<sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">#undef<sp/>GMOCK_IS_SIGNED_</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>an<sp/>integer<sp/>to<sp/>a<sp/>floating-point<sp/>type<sp/>may<sp/>be<sp/>lossy,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>format<sp/>of<sp/>a<sp/>floating-point<sp/>number<sp/>is<sp/>implementation-defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">template<sp/>&lt;typename<sp/>From,<sp/>typename<sp/>To&gt;</highlight></codeline>
<codeline lineno="225" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01k_floating_point_00_01_to_01_4" refkind="compound"><highlight class="normal">struct<sp/>LosslessArithmeticConvertibleImpl&lt;kInteger,<sp/>From,<sp/>kFloatingPoint,<sp/>To&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>false_type<sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>a<sp/>floating-point<sp/>to<sp/>bool<sp/>is<sp/>lossy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal">template<sp/>&lt;typename<sp/>From&gt;</highlight></codeline>
<codeline lineno="230" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_from_00_01k_bool_00_01bool_01_4" refkind="compound"><highlight class="normal">struct<sp/>LosslessArithmeticConvertibleImpl&lt;kFloatingPoint,<sp/>From,<sp/>kBool,<sp/>bool&gt;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>false_type<sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>a<sp/>floating-point<sp/>to<sp/>an<sp/>integer<sp/>is<sp/>lossy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">template<sp/>&lt;typename<sp/>From,<sp/>typename<sp/>To&gt;</highlight></codeline>
<codeline lineno="235" refid="structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_from_00_01k_integer_00_01_to_01_4" refkind="compound"><highlight class="normal">struct<sp/>LosslessArithmeticConvertibleImpl&lt;kFloatingPoint,<sp/>From,<sp/>kInteger,<sp/>To&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>false_type<sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converting<sp/>a<sp/>floating-point<sp/>to<sp/>another<sp/>floating-point<sp/>is<sp/>lossless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iff<sp/>the<sp/>target<sp/>type<sp/>is<sp/>at<sp/>least<sp/>as<sp/>big<sp/>as<sp/>the<sp/>source<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">template<sp/>&lt;typename<sp/>From,<sp/>typename<sp/>To&gt;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">struct<sp/>LosslessArithmeticConvertibleImpl&lt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>kFloatingPoint,<sp/>From,<sp/>kFloatingPoint,<sp/>To&gt;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>bool_constant&lt;sizeof(From)<sp/>&lt;=<sp/>sizeof(To)&gt;<sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LosslessArithmeticConvertible&lt;From,<sp/>To&gt;::value<sp/>is<sp/>true<sp/>iff<sp/>arithmetic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>From<sp/>can<sp/>be<sp/>losslessly<sp/>converted<sp/>to<sp/>arithmetic<sp/>type<sp/>To.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>the<sp/>user&apos;s<sp/>responsibility<sp/>to<sp/>ensure<sp/>that<sp/>both<sp/>From<sp/>and<sp/>To<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>raw<sp/>(i.e.<sp/>has<sp/>no<sp/>CV<sp/>modifier,<sp/>is<sp/>not<sp/>a<sp/>pointer,<sp/>and<sp/>is<sp/>not<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference)<sp/>built-in<sp/>arithmetic<sp/>types;<sp/>the<sp/>value<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation-defined<sp/>when<sp/>the<sp/>above<sp/>pre-condition<sp/>is<sp/>violated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">template<sp/>&lt;typename<sp/>From,<sp/>typename<sp/>To&gt;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">struct<sp/>LosslessArithmeticConvertible</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>public<sp/>LosslessArithmeticConvertibleImpl&lt;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>GMOCK_KIND_OF_(From),<sp/>From,<sp/>GMOCK_KIND_OF_(To),<sp/>To&gt;<sp/>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>interface<sp/>knows<sp/>how<sp/>to<sp/>report<sp/>a<sp/>Google<sp/>Mock<sp/>failure<sp/>(either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-fatal<sp/>or<sp/>fatal).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">class<sp/>FailureReporterInterface<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>a<sp/>failure<sp/>(either<sp/>non-fatal<sp/>or<sp/>fatal).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>enum<sp/>FailureType<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>kNonfatal,<sp/>kFatal</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>virtual<sp/>~FailureReporterInterface()<sp/>{}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reports<sp/>a<sp/>failure<sp/>that<sp/>occurred<sp/>at<sp/>the<sp/>given<sp/>source<sp/>file<sp/>location.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>ReportFailure(FailureType<sp/>type,<sp/>const<sp/>char*<sp/>file,<sp/>int<sp/>line,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string&amp;<sp/>message)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>failure<sp/>reporter<sp/>used<sp/>by<sp/>Google<sp/>Mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">GTEST_API_<sp/>FailureReporterInterface*<sp/>GetFailureReporter();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>condition<sp/>is<sp/>true;<sp/>aborts<sp/>the<sp/>process<sp/>with<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>if<sp/>condition<sp/>is<sp/>false.<sp/><sp/>We<sp/>cannot<sp/>use<sp/>LOG(FATAL)<sp/>or<sp/>CHECK()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>Google<sp/>Mock<sp/>might<sp/>be<sp/>used<sp/>to<sp/>mock<sp/>the<sp/>log<sp/>sink<sp/>itself.<sp/><sp/>We</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inline<sp/>this<sp/>function<sp/>to<sp/>prevent<sp/>it<sp/>from<sp/>showing<sp/>up<sp/>in<sp/>the<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">inline<sp/>void<sp/>Assert(bool<sp/>condition,<sp/>const<sp/>char*<sp/>file,<sp/>int<sp/>line,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>if<sp/>(!condition)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>GetFailureReporter()-&gt;ReportFailure(FailureReporterInterface::kFatal,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>line,<sp/>msg);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal">inline<sp/>void<sp/>Assert(bool<sp/>condition,<sp/>const<sp/>char*<sp/>file,<sp/>int<sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>Assert(condition,<sp/>file,<sp/>line,<sp/>&quot;Assertion<sp/>failed.&quot;);</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>condition<sp/>is<sp/>true;<sp/>generates<sp/>a<sp/>non-fatal<sp/>failure<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>condition<sp/>is<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">inline<sp/>void<sp/>Expect(bool<sp/>condition,<sp/>const<sp/>char*<sp/>file,<sp/>int<sp/>line,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>string&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>if<sp/>(!condition)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>GetFailureReporter()-&gt;ReportFailure(FailureReporterInterface::kNonfatal,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>line,<sp/>msg);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal">inline<sp/>void<sp/>Expect(bool<sp/>condition,<sp/>const<sp/>char*<sp/>file,<sp/>int<sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>Expect(condition,<sp/>file,<sp/>line,<sp/></highlight><highlight class="stringliteral">&quot;Expectation<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Severity<sp/>level<sp/>of<sp/>a<sp/>log.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>LogSeverity<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>kInfo<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>kWarning<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="309"><highlight class="normal">};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Valid<sp/>values<sp/>for<sp/>the<sp/>--gmock_verbose<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>logs<sp/>(informational<sp/>and<sp/>warnings)<sp/>are<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kInfoVerbosity[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Only<sp/>warnings<sp/>are<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kWarningVerbosity[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>logs<sp/>are<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kErrorVerbosity[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>a<sp/>log<sp/>with<sp/>the<sp/>given<sp/>severity<sp/>is<sp/>visible<sp/>according</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>--gmock_verbose<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>LogIsVisible(LogSeverity<sp/>severity);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>message<sp/>to<sp/>stdout<sp/>iff<sp/>&apos;severity&apos;<sp/>&gt;=<sp/>the<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specified<sp/>by<sp/>the<sp/>--gmock_verbose<sp/>flag.<sp/><sp/>If<sp/>stack_frames_to_skip<sp/>&gt;=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>0,<sp/>also<sp/>prints<sp/>the<sp/>stack<sp/>trace<sp/>excluding<sp/>the<sp/>top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack_frames_to_skip<sp/>frames.<sp/><sp/>In<sp/>opt<sp/>mode,<sp/>any<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack_frames_to_skip<sp/>is<sp/>treated<sp/>as<sp/>0,<sp/>since<sp/>we<sp/>don&apos;t<sp/>know<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>calls<sp/>will<sp/>be<sp/>inlined<sp/>by<sp/>the<sp/>compiler<sp/>and<sp/>need<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conservative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Log(LogSeverity<sp/>severity,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>message,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stack_frames_to_skip);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>group<sp/>all<sp/>type<sp/>utilities<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type<sp/>traits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is_reference&lt;T&gt;::value<sp/>is<sp/>non-zero<sp/>iff<sp/>T<sp/>is<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="structtesting_1_1internal_1_1is__reference" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1is__reference" kindref="compound">is_reference</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref><sp/>{};</highlight></codeline>
<codeline lineno="341" refid="structtesting_1_1internal_1_1is__reference_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1is__reference" kindref="compound">is_reference</ref>&lt;T&amp;&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">true_type</ref><sp/>{};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type_equals&lt;T1,<sp/>T2&gt;::value<sp/>is<sp/>non-zero<sp/>iff<sp/>T1<sp/>and<sp/>T2<sp/>are<sp/>the<sp/>same<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="structtesting_1_1internal_1_1type__equals" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1type__equals" kindref="compound">type_equals</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">false_type</ref><sp/>{};</highlight></codeline>
<codeline lineno="345" refid="structtesting_1_1internal_1_1type__equals_3_01_t_00_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1type__equals" kindref="compound">type_equals</ref>&lt;T,<sp/>T&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">true_type</ref><sp/>{};</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>remove_reference&lt;T&gt;::type<sp/>removes<sp/>the<sp/>reference<sp/>from<sp/>type<sp/>T,<sp/>if<sp/>any.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="structtesting_1_1internal_1_1remove__reference" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1remove__reference" kindref="compound">remove_reference</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="structtesting_1_1internal_1_1remove__reference_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1remove__reference" kindref="compound">remove_reference</ref>&lt;T&amp;&gt;<sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};<sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DecayArray&lt;T&gt;::type<sp/>turns<sp/>an<sp/>array<sp/>type<sp/>U[N]<sp/>to<sp/>const<sp/>U*<sp/>and<sp/>preserves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>types.<sp/><sp/>Useful<sp/>for<sp/>saving<sp/>a<sp/>copy<sp/>of<sp/>a<sp/>function<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="structtesting_1_1internal_1_1_decay_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">DecayArray</ref><sp/>{<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;<sp/>};<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="structtesting_1_1internal_1_1_decay_array_3_01_t[_n]_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">DecayArray</ref>&lt;T[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>type;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">};</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sometimes<sp/>people<sp/>use<sp/>arrays<sp/>whose<sp/>size<sp/>is<sp/>not<sp/>available<sp/>at<sp/>the<sp/>use<sp/>site</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>extern<sp/>const<sp/>char<sp/>kNamePrefix[]).<sp/><sp/>This<sp/>specialization<sp/>covers<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="structtesting_1_1internal_1_1_decay_array_3_01_t[]_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">DecayArray</ref>&lt;T[]&gt;<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>type;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">};</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Disable<sp/>MSVC<sp/>warnings<sp/>for<sp/>infinite<sp/>recursion,<sp/>since<sp/>in<sp/>this<sp/>case<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>recursion<sp/>is<sp/>unreachable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:4717)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Invalid&lt;T&gt;()<sp/>is<sp/>usable<sp/>as<sp/>an<sp/>expression<sp/>of<sp/>type<sp/>T,<sp/>but<sp/>will<sp/>terminate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>program<sp/>with<sp/>an<sp/>assertion<sp/>failure<sp/>if<sp/>actually<sp/>run.<sp/><sp/>This<sp/>is<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>value<sp/>of<sp/>type<sp/>T<sp/>is<sp/>needed<sp/>for<sp/>compilation,<sp/>but<sp/>the<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>not<sp/>really<sp/>be<sp/>executed<sp/>(or<sp/>we<sp/>don&apos;t<sp/>care<sp/>if<sp/>the<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>crashes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>Invalid()<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>Assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>-1,<sp/></highlight><highlight class="stringliteral">&quot;Internal<sp/>error:<sp/>attempt<sp/>to<sp/>return<sp/>invalid<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>statement<sp/>is<sp/>unreachable,<sp/>and<sp/>would<sp/>never<sp/>terminate<sp/>even<sp/>if<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>be<sp/>reached.<sp/>It<sp/>is<sp/>provided<sp/>only<sp/>to<sp/>placate<sp/>compiler<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>missing<sp/>return<sp/>statements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Invalid&lt;T&gt;();</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>a<sp/>raw<sp/>type<sp/>(i.e.<sp/>having<sp/>no<sp/>top-level<sp/>reference<sp/>or<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modifier)<sp/>RawContainer<sp/>that&apos;s<sp/>either<sp/>an<sp/>STL-style<sp/>container<sp/>or<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>native<sp/>array,<sp/>class<sp/>StlContainerView&lt;RawContainer&gt;<sp/>has<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>following<sp/>members:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>type<sp/>is<sp/>a<sp/>type<sp/>that<sp/>provides<sp/>an<sp/>STL-style<sp/>container<sp/>view<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>(i.e.<sp/>implements<sp/>the<sp/>STL<sp/>container<sp/>concept<sp/>for)<sp/>RawContainer;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>const_reference<sp/>is<sp/>a<sp/>type<sp/>that<sp/>provides<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>RawContainer;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>ConstReference(raw_container)<sp/>returns<sp/>a<sp/>const<sp/>reference<sp/>to<sp/>an<sp/>STL-style</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>container<sp/>view<sp/>to<sp/>raw_container,<sp/>which<sp/>is<sp/>a<sp/>RawContainer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>Copy(raw_container)<sp/>returns<sp/>an<sp/>STL-style<sp/>container<sp/>view<sp/>of<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>copy<sp/>of<sp/>raw_container,<sp/>which<sp/>is<sp/>a<sp/>RawContainer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>generic<sp/>version<sp/>is<sp/>used<sp/>when<sp/>RawContainer<sp/>itself<sp/>is<sp/>already<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STL-style<sp/>container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RawContainer&gt;</highlight></codeline>
<codeline lineno="406" refid="classtesting_1_1internal_1_1_stl_container_view" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_stl_container_view" kindref="compound">StlContainerView</ref><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>RawContainer<sp/>type;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type&amp;<sp/>const_reference;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const_reference<sp/>ConstReference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawContainer&amp;<sp/>container)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensures<sp/>that<sp/>RawContainer<sp/>is<sp/>not<sp/>a<sp/>const<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::StaticAssertTypeEq&lt;RawContainer,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_REMOVE_CONST_(RawContainer)&gt;();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type<sp/>Copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawContainer&amp;<sp/>container)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container;<sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal">};</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>specialization<sp/>is<sp/>used<sp/>when<sp/>RawContainer<sp/>is<sp/>a<sp/>native<sp/>array<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Element,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="422" refid="classtesting_1_1internal_1_1_stl_container_view_3_01_element[_n]_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_stl_container_view" kindref="compound">StlContainerView</ref>&lt;Element[N]&gt;<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_CONST_(Element)<sp/>RawElement;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_native_array" kindref="compound">internal::NativeArray&lt;RawElement&gt;</ref><sp/><ref refid="classtesting_1_1internal_1_1_native_array" kindref="compound">type</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NativeArray&lt;T&gt;<sp/>can<sp/>represent<sp/>a<sp/>native<sp/>array<sp/>either<sp/>by<sp/>value<sp/>or<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reference<sp/>(selected<sp/>by<sp/>a<sp/>constructor<sp/>argument),<sp/>so<sp/>&apos;const<sp/>type&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>to<sp/>reference<sp/>a<sp/>const<sp/>native<sp/>array.<sp/><sp/>We<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;typedef<sp/>const<sp/>type&amp;<sp/>const_reference&apos;<sp/>here,<sp/>as<sp/>that<sp/>would<sp/>mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ConstReference()<sp/>has<sp/>to<sp/>return<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>local<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/><ref refid="classtesting_1_1internal_1_1_native_array" kindref="compound">const_reference</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const_reference<sp/>ConstReference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element<sp/>(&amp;array)[N])<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ensures<sp/>that<sp/>Element<sp/>is<sp/>not<sp/>a<sp/>const<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::StaticAssertTypeEq&lt;Element,<sp/>RawElement&gt;();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>Nokia<sp/>Symbian<sp/>compiler<sp/>confuses<sp/>itself<sp/>in<sp/>template<sp/>instantiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>this<sp/>call<sp/>without<sp/>the<sp/>cast<sp/>to<sp/>Element*:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>call<sp/>&apos;[testing::internal::NativeArray&lt;char<sp/>*&gt;].NativeArray(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>{lval}<sp/>const<sp/>char<sp/>*[4],<sp/>long,<sp/>testing::internal::RelationToSource)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;testing::internal::NativeArray&lt;char<sp/>*&gt;::NativeArray(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>char<sp/>*const<sp/>*,<sp/>unsigned<sp/>int,<sp/>testing::internal::RelationToSource)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(instantiating:<sp/>&apos;testing::internal::ContainsMatcherImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&lt;const<sp/>char<sp/>*<sp/>(&amp;)[4]&gt;::Matches(const<sp/>char<sp/>*<sp/>(&amp;)[4])<sp/>const&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(instantiating:<sp/>&apos;testing::internal::StlContainerView&lt;char<sp/>*[4]&gt;::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ConstReference(const<sp/>char<sp/>*<sp/>(&amp;)[4])&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(and<sp/>though<sp/>the<sp/>N<sp/>parameter<sp/>type<sp/>is<sp/>mismatched<sp/>in<sp/>the<sp/>above<sp/>explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>of<sp/>it<sp/>doesn&apos;t<sp/>help<sp/>-<sp/>only<sp/>the<sp/>conversion<sp/>of<sp/>the<sp/>array).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(const_cast&lt;Element*&gt;(&amp;array[0]),<sp/>N,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1_relation_to_source_reference" kindref="compound">RelationToSourceReference</ref>());</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(array,<sp/>N,<sp/><ref refid="structtesting_1_1internal_1_1_relation_to_source_reference" kindref="compound">RelationToSourceReference</ref>());</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type<sp/>Copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Element<sp/>(&amp;array)[N])<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(const_cast&lt;Element*&gt;(&amp;array[0]),<sp/>N,<sp/><ref refid="structtesting_1_1internal_1_1_relation_to_source_copy" kindref="compound">RelationToSourceCopy</ref>());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(array,<sp/>N,<sp/><ref refid="structtesting_1_1internal_1_1_relation_to_source_copy" kindref="compound">RelationToSourceCopy</ref>());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal">};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>specialization<sp/>is<sp/>used<sp/>when<sp/>RawContainer<sp/>is<sp/>a<sp/>native<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>represented<sp/>as<sp/>a<sp/>(pointer,<sp/>size)<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ElementPo</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Size&gt;</highlight></codeline>
<codeline lineno="468" refid="classtesting_1_1internal_1_1_stl_container_view_3_01_1_1testing_1_1tuple_3_01_element_pointer_00_01_size_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_stl_container_view" kindref="compound">StlContainerView</ref>&lt;<sp/>::testing::tuple&lt;ElementPointer,<sp/>Size&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>GTEST_REMOVE_CONST_(</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::PointeeOf&lt;ElementPointer&gt;::type)<sp/>RawElement;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_native_array" kindref="compound">internal::NativeArray&lt;RawElement&gt;</ref><sp/><ref refid="classtesting_1_1internal_1_1_native_array" kindref="compound">type</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type<sp/><ref refid="classtesting_1_1internal_1_1_native_array" kindref="compound">const_reference</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>const_reference<sp/>ConstReference(</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::testing::tuple&lt;ElementPointer,<sp/>Size&gt;&amp;<sp/>array)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(get&lt;0&gt;(array),<sp/>get&lt;1&gt;(array),<sp/><ref refid="structtesting_1_1internal_1_1_relation_to_source_reference" kindref="compound">RelationToSourceReference</ref>());</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>type<sp/>Copy(const<sp/>::testing::tuple&lt;ElementPointer,<sp/>Size&gt;&amp;<sp/>array)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(get&lt;0&gt;(array),<sp/>get&lt;1&gt;(array),<sp/><ref refid="structtesting_1_1internal_1_1_relation_to_source_copy" kindref="compound">RelationToSourceCopy</ref>());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">};</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>specialization<sp/>prevents<sp/>the<sp/>user<sp/>from<sp/>instantiating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StlContainer<sp/>with<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_stl_container_view" kindref="compound">StlContainerView</ref>&lt;T&amp;&gt;;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>transform<sp/>to<sp/>remove<sp/>constness<sp/>from<sp/>the<sp/>first<sp/>part<sp/>of<sp/>a<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pairs<sp/>like<sp/>that<sp/>are<sp/>used<sp/>as<sp/>the<sp/>value_type<sp/>of<sp/>associative<sp/>containers,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>transform<sp/>produces<sp/>a<sp/>similar<sp/>but<sp/>assignable<sp/>pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="492" refid="structtesting_1_1internal_1_1_remove_const_from_key" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_remove_const_from_key" kindref="compound">RemoveConstFromKey</ref><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>type;</highlight></codeline>
<codeline lineno="494"><highlight class="normal">};</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Partially<sp/>specialized<sp/>to<sp/>remove<sp/>constness<sp/>from<sp/>std::pair&lt;const<sp/>K,<sp/>V&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>V&gt;</highlight></codeline>
<codeline lineno="498" refid="structtesting_1_1internal_1_1_remove_const_from_key_3_01std_1_1pair_3_01const_01_k_00_01_v_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_remove_const_from_key" kindref="compound">RemoveConstFromKey</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::pair&lt;const<sp/>K,<sp/>V&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::pair&lt;K,<sp/>V&gt;<sp/>type;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">};</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mapping<sp/>from<sp/>booleans<sp/>to<sp/>types.<sp/>Similar<sp/>to<sp/>boost::bool_&lt;kValue&gt;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::integral_constant&lt;bool,<sp/>kValue&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kValue&gt;</highlight></codeline>
<codeline lineno="505" refid="structtesting_1_1internal_1_1_boolean_constant" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_boolean_constant" kindref="compound">BooleanConstant</ref><sp/>{};</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h"/>
  </compounddef>
</doxygen>
