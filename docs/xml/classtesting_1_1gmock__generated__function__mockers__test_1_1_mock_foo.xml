<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" kind="class" language="C++" prot="public">
    <compoundname>testing::gmock_generated_function_mockers_test::MockFoo</compoundname>
    <basecompoundref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface" prot="public" virt="non-virtual">testing::gmock_generated_function_mockers_test::FooInterface</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a05d4aeb00d75b5dbf627a5db2c0ada7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MockFoo</definition>
        <argsstring>()</argsstring>
        <name>MockFoo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="125" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a03e7f723e9909b031fc6df22f41aac7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(VoidReturning, void(int n))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>VoidReturning</type>
        </param>
        <param>
          <type>void(int n)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a25b99ec3b994318b7ecb0578da113136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD0</definition>
        <argsstring>(Nullary, int())</argsstring>
        <name>MOCK_METHOD0</name>
        <param>
          <type>Nullary</type>
        </param>
        <param>
          <type>int()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a9f9ce709a5b13e319eeb348e6eae3d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(Unary, bool(int))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>Unary</type>
        </param>
        <param>
          <type>bool(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a50f8c94d6fab258d49e1d4a15ea7a7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD2</definition>
        <argsstring>(Binary, long(short, int))</argsstring>
        <name>MOCK_METHOD2</name>
        <param>
          <type>Binary</type>
        </param>
        <param>
          <type>long(short, int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1aeb9b35bc4054018f6a80c811a58404e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD10</definition>
        <argsstring>(Decimal, int(bool, char, short, int, long, float, double, unsigned, char *, const string &amp;str))</argsstring>
        <name>MOCK_METHOD10</name>
        <param>
          <type>Decimal</type>
        </param>
        <param>
          <type>int(bool, char, short, int, long, float, double, unsigned, char *, const string &amp;str)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a785cbef820189a974170cea52b0d97d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(TakesNonConstReference, bool(int &amp;))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>TakesNonConstReference</type>
        </param>
        <param>
          <type>bool(int &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a605c84c3375d02769b0288d7637b552f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(TakesConstReference, string(const int &amp;))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>TakesConstReference</type>
        </param>
        <param>
          <type>string(const int &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a7b548776b156454bcddecaca6294c52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(TakesConst, bool(const int))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>TakesConst</type>
        </param>
        <param>
          <type>bool(const int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a5fb8c71ba44b97fbc8945905a9835215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD0</definition>
        <argsstring>(ReturnTypeWithComma, std::map&lt; int, string &gt;())</argsstring>
        <name>MOCK_METHOD0</name>
        <param>
          <type>ReturnTypeWithComma</type>
        </param>
        <param>
          <type>std::map&lt; int, string &gt;</type>
          <array>()</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a777b7b57ac125e2fe868e6cda46833fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_CONST_METHOD1</definition>
        <argsstring>(ReturnTypeWithComma, std::map&lt; int, string &gt;(int))</argsstring>
        <name>MOCK_CONST_METHOD1</name>
        <param>
          <type>ReturnTypeWithComma</type>
        </param>
        <param>
          <type>std::map&lt; int, string &gt;</type>
          <array>int</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a1666c565d1b48b351a1a453f6f87ff22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD0</definition>
        <argsstring>(OverloadedOnArgumentNumber, int())</argsstring>
        <name>MOCK_METHOD0</name>
        <param>
          <type>OverloadedOnArgumentNumber</type>
        </param>
        <param>
          <type>int()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a45014dba5c27e9d59af3a94e0d324096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(OverloadedOnArgumentNumber, int(int))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>OverloadedOnArgumentNumber</type>
        </param>
        <param>
          <type>int(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1ad900c5945fc52a0a95ca1480207c7add" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(OverloadedOnArgumentType, int(int))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>OverloadedOnArgumentType</type>
        </param>
        <param>
          <type>int(int)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1ab4b323a9c06a48c1116d55419195c1a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(OverloadedOnArgumentType, char(char))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>OverloadedOnArgumentType</type>
        </param>
        <param>
          <type>char(char)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a291ff46b043d00d0f0acb081c5c36f2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD0</definition>
        <argsstring>(OverloadedOnConstness, int())</argsstring>
        <name>MOCK_METHOD0</name>
        <param>
          <type>OverloadedOnConstness</type>
        </param>
        <param>
          <type>int()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1aa0da575ad3061850662c5f401ddb30c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_CONST_METHOD0</definition>
        <argsstring>(OverloadedOnConstness, char())</argsstring>
        <name>MOCK_CONST_METHOD0</name>
        <param>
          <type>OverloadedOnConstness</type>
        </param>
        <param>
          <type>char()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a33077a71c1c5178c25b0a4aa099d5f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(TypeWithHole, int(int(*)()))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>TypeWithHole</type>
        </param>
        <param>
          <type>int(int(*)())</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1ad07ace4f4288418de7d9740e143da4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::MOCK_METHOD1</definition>
        <argsstring>(TypeWithComma, int(const std::map&lt; int, string &gt; &amp;))</argsstring>
        <name>MOCK_METHOD1</name>
        <param>
          <type>TypeWithComma</type>
        </param>
        <param>
          <type>int(const std::map&lt; int, string &gt; &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="160" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a9401c622e7314948b9075b0338945cfc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_generated_function_mockers_test::MockFoo::GTEST_DISALLOW_COPY_AND_ASSIGN_</definition>
        <argsstring>(MockFoo)</argsstring>
        <name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" kindref="compound">MockFoo</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="176" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1524">
        <label>testing::gmock_generated_function_mockers_test::FooInterface</label>
        <link refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface"/>
      </node>
      <node id="1523">
        <label>testing::gmock_generated_function_mockers_test::MockFoo</label>
        <link refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo"/>
        <childnode refid="1524" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1526">
        <label>testing::gmock_generated_function_mockers_test::FooInterface</label>
        <link refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface"/>
      </node>
      <node id="1525">
        <label>testing::gmock_generated_function_mockers_test::MockFoo</label>
        <link refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo"/>
        <childnode refid="1526" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="123" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" bodystart="123" bodyend="177"/>
    <listofallmembers>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a59ea28b711ece054ce9d57c2dc574ba0" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>Binary</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a5c5886880581d8dd420c9a187ff884b2" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>Decimal</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a9401c622e7314948b9075b0338945cfc" prot="private" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1aa0da575ad3061850662c5f401ddb30c2" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_CONST_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a777b7b57ac125e2fe868e6cda46833fc" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_CONST_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a25b99ec3b994318b7ecb0578da113136" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a5fb8c71ba44b97fbc8945905a9835215" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a1666c565d1b48b351a1a453f6f87ff22" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a291ff46b043d00d0f0acb081c5c36f2e" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD0</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a03e7f723e9909b031fc6df22f41aac7f" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a9f9ce709a5b13e319eeb348e6eae3d18" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a785cbef820189a974170cea52b0d97d9" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a605c84c3375d02769b0288d7637b552f" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a7b548776b156454bcddecaca6294c52f" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a45014dba5c27e9d59af3a94e0d324096" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1ad900c5945fc52a0a95ca1480207c7add" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1ab4b323a9c06a48c1116d55419195c1a6" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a33077a71c1c5178c25b0a4aa099d5f2c" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1ad07ace4f4288418de7d9740e143da4ef" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD1</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1aeb9b35bc4054018f6a80c811a58404e3" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD10</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a50f8c94d6fab258d49e1d4a15ea7a7af" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MOCK_METHOD2</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo_1a05d4aeb00d75b5dbf627a5db2c0ada7f" prot="public" virt="non-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>MockFoo</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a633e753eafa7f82dde22ecf9492f341c" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>Nullary</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1ae9e86ac64fa9acedfb1fa747174c7f43" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>OverloadedOnArgumentNumber</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a1b5ff8cc745af475e0abba5d2858e1c9" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>OverloadedOnArgumentNumber</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1ad9cc9a11570403fb8378ed6620892ec6" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>OverloadedOnArgumentType</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a8cb6caa44216ba29fc228b016523abe9" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>OverloadedOnArgumentType</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1afbbe6ec72ae237de05e109dea5b03f4f" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>OverloadedOnConstness</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1ab40007385078cdb675616a21ef254df4" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>OverloadedOnConstness</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a8c53e87edf0b9da878e5259f02b7f5dc" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>TakesConst</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a3db03c9698ecddfc62f2a1ed2f3c32c2" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>TakesConstReference</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a694354adfffcee58093298bc12182ff5" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>TakesNonConstReference</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a654ade1e68b5adb922149898bfe4ccda" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>TypeWithComma</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1a9e92ef227dc68806f85ebff9c8a6102a" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>TypeWithHole</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1ae0885ac29bc4a3f180f6573d8b1a341e" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>Unary</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1adf968115cf1260004d8abe372dc71c85" prot="public" virt="pure-virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>VoidReturning</name></member>
      <member refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface_1ad4eb4709c9ae9b1cdaded8d05567cdbb" prot="public" virt="virtual"><scope>testing::gmock_generated_function_mockers_test::MockFoo</scope><name>~FooInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
