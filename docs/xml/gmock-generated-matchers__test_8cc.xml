<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-generated-matchers__test_8cc" kind="file" language="C++">
    <compoundname>gmock-generated-matchers_test.cc</compoundname>
    <includes refid="gmock-generated-matchers_8h" local="yes">gmock/gmock-generated-matchers.h</includes>
    <includes local="no">list</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="1946">
        <label>sys/stat.h</label>
      </node>
      <node id="1978">
        <label>list</label>
      </node>
      <node id="1964">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1958">
        <label>iomanip</label>
      </node>
      <node id="1930">
        <label>limits</label>
      </node>
      <node id="1947">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="1937">
        <label>assert.h</label>
      </node>
      <node id="1923">
        <label>iterator</label>
      </node>
      <node id="1957">
        <label>float.h</label>
      </node>
      <node id="1933">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1935" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1989">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1984" relation="include">
        </childnode>
      </node>
      <node id="1972">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="1938">
        <label>stdlib.h</label>
      </node>
      <node id="1962">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1973">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="1974" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
      </node>
      <node id="1922">
        <label>gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="1923" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
      </node>
      <node id="1981">
        <label>errno.h</label>
      </node>
      <node id="1977">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="1986">
        <label>gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="1987" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
      </node>
      <node id="1979">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="1980" relation="include">
        </childnode>
        <childnode refid="1982" relation="include">
        </childnode>
        <childnode refid="1984" relation="include">
        </childnode>
        <childnode refid="1986" relation="include">
        </childnode>
        <childnode refid="1988" relation="include">
        </childnode>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1989" relation="include">
        </childnode>
        <childnode refid="1990" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
      </node>
      <node id="1925">
        <label>string</label>
      </node>
      <node id="1959">
        <label>map</label>
      </node>
      <node id="1954">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="1971">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="1968" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1943">
        <label>stddef.h</label>
      </node>
      <node id="1976">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="1931">
        <label>ostream</label>
      </node>
      <node id="1948">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="1983">
        <label>limits.h</label>
      </node>
      <node id="1984">
        <label>gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="1980" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1985" relation="include">
        </childnode>
      </node>
      <node id="1965">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="1966" relation="include">
        </childnode>
      </node>
      <node id="1945">
        <label>sys/types.h</label>
      </node>
      <node id="1944">
        <label>string.h</label>
      </node>
      <node id="1980">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="1981" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
      </node>
      <node id="1952">
        <label>typeinfo</label>
      </node>
      <node id="1936">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1954" relation="include">
        </childnode>
      </node>
      <node id="1949">
        <label>unistd.h</label>
      </node>
      <node id="1926">
        <label>vector</label>
      </node>
      <node id="1970">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="1961">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1932">
        <label>utility</label>
      </node>
      <node id="1987">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1980" relation="include">
        </childnode>
        <childnode refid="1982" relation="include">
        </childnode>
        <childnode refid="1927" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1924">
        <label>sstream</label>
      </node>
      <node id="1940">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1937" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
      </node>
      <node id="1927">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="1928" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1923" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1933" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
        <childnode refid="1977" relation="include">
        </childnode>
      </node>
      <node id="1928">
        <label>math.h</label>
      </node>
      <node id="1988">
        <label>gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="1987" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
      </node>
      <node id="1974">
        <label>iosfwd</label>
      </node>
      <node id="1982">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="1983" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1936" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1963">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="1962" relation="include">
        </childnode>
      </node>
      <node id="1939">
        <label>iostream</label>
      </node>
      <node id="1955">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1965" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1967" relation="include">
        </childnode>
        <childnode refid="1969" relation="include">
        </childnode>
        <childnode refid="1972" relation="include">
        </childnode>
        <childnode refid="1973" relation="include">
        </childnode>
        <childnode refid="1975" relation="include">
        </childnode>
        <childnode refid="1976" relation="include">
        </childnode>
      </node>
      <node id="1953">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="1932" relation="include">
        </childnode>
      </node>
      <node id="1950">
        <label>strings.h</label>
      </node>
      <node id="1921">
        <label>vendor/googletest/googlemock/test/gmock-generated-matchers_test.cc</label>
        <link refid="gmock-generated-matchers__test_8cc"/>
        <childnode refid="1922" relation="include">
        </childnode>
        <childnode refid="1978" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1979" relation="include">
        </childnode>
        <childnode refid="1955" relation="include">
        </childnode>
        <childnode refid="1991" relation="include">
        </childnode>
      </node>
      <node id="1942">
        <label>ctype.h</label>
      </node>
      <node id="1975">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
      </node>
      <node id="1941">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1943" relation="include">
        </childnode>
        <childnode refid="1938" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1945" relation="include">
        </childnode>
        <childnode refid="1946" relation="include">
        </childnode>
        <childnode refid="1929" relation="include">
        </childnode>
        <childnode refid="1939" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1947" relation="include">
        </childnode>
        <childnode refid="1948" relation="include">
        </childnode>
        <childnode refid="1949" relation="include">
        </childnode>
        <childnode refid="1950" relation="include">
        </childnode>
        <childnode refid="1951" relation="include">
        </childnode>
        <childnode refid="1952" relation="include">
        </childnode>
        <childnode refid="1953" relation="include">
        </childnode>
      </node>
      <node id="1956">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1957" relation="include">
        </childnode>
        <childnode refid="1944" relation="include">
        </childnode>
        <childnode refid="1958" relation="include">
        </childnode>
        <childnode refid="1930" relation="include">
        </childnode>
        <childnode refid="1959" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1961" relation="include">
        </childnode>
        <childnode refid="1962" relation="include">
        </childnode>
        <childnode refid="1963" relation="include">
        </childnode>
        <childnode refid="1964" relation="include">
        </childnode>
      </node>
      <node id="1990">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="1922" relation="include">
        </childnode>
      </node>
      <node id="1985">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="internal_2custom_2gmock-generated-actions_8h_source"/>
      </node>
      <node id="1968">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="1942" relation="include">
        </childnode>
        <childnode refid="1923" relation="include">
        </childnode>
        <childnode refid="1960" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1940" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1969" relation="include">
        </childnode>
      </node>
      <node id="1935">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="1936" relation="include">
        </childnode>
      </node>
      <node id="1960">
        <label>set</label>
      </node>
      <node id="1967">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1968" relation="include">
        </childnode>
        <childnode refid="1971" relation="include">
        </childnode>
      </node>
      <node id="1929">
        <label>algorithm</label>
      </node>
      <node id="1951">
        <label>regex.h</label>
      </node>
      <node id="1991">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="1955" relation="include">
        </childnode>
      </node>
      <node id="1934">
        <label>stdio.h</label>
      </node>
      <node id="1966">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1934" relation="include">
        </childnode>
      </node>
      <node id="1969">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="1931" relation="include">
        </childnode>
        <childnode refid="1924" relation="include">
        </childnode>
        <childnode refid="1925" relation="include">
        </childnode>
        <childnode refid="1932" relation="include">
        </childnode>
        <childnode refid="1926" relation="include">
        </childnode>
        <childnode refid="1941" relation="include">
        </childnode>
        <childnode refid="1956" relation="include">
        </childnode>
        <childnode refid="1970" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacematcher__test">matcher_test</innernamespace>
    <innernamespace refid="namespaceadl__test">adl_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>built-in<sp/>matchers<sp/>generated<sp/>by<sp/>a<sp/>script.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-generated-matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::list;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::map;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::stringstream;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::get;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::make_tuple;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::tuple;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::_;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Args;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Contains;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ElementsAre;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ElementsAreArray;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Eq;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ge;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Gt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Le;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Lt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::MakeMatcher;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">testing::Matcher</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher_interface" kindref="compound">testing::MatcherInterface</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">testing::MatchResultListener</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ne;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Not;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Pointee;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::PrintToString;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ref;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StaticAssertTypeEq;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StrEq;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Value;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_elements_are_array_matcher" kindref="compound">testing::internal::ElementsAreArrayMatcher</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::string;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>description<sp/>of<sp/>the<sp/>given<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Describe(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>m.DescribeTo(&amp;ss);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>description<sp/>of<sp/>the<sp/>negation<sp/>of<sp/>the<sp/>given<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>DescribeNegation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;T&gt;&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>m.DescribeNegationTo(&amp;ss);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>reason<sp/>why<sp/>x<sp/>matches,<sp/>or<sp/>doesn&apos;t<sp/>match,<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Explain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherType&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>m.ExplainMatchResultTo(x,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Args&lt;k0,<sp/>...,<sp/>kn&gt;(m).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsZeroTemplateArg)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>bool&gt;<sp/>t(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Args&lt;&gt;(Eq(tuple&lt;&gt;())));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;&gt;(Ne(tuple&lt;&gt;()))));</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsOneTemplateArg)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>bool&gt;<sp/>t(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Args&lt;0&gt;(Eq(make_tuple(5))));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Args&lt;1&gt;(Eq(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;1&gt;(Eq(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)))));</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsTwoTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;short,<sp/>int,<sp/>long&gt;<sp/>t(4,<sp/>5,<sp/>6L);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;0,<sp/>1&gt;(Lt())));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;1,<sp/>2&gt;(Lt())));</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;0,<sp/>2&gt;(Gt())));</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsRepeatedTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;short,<sp/>int,<sp/>long&gt;<sp/>t(4,<sp/>5,<sp/>6L);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;0,<sp/>0&gt;(Eq())));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;1,<sp/>1&gt;(Ne())));</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsDecreasingTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;short,<sp/>int,<sp/>long&gt;<sp/>t(4,<sp/>5,<sp/>6L);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;2,<sp/>0&gt;(Gt())));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>Not(Args&lt;2,<sp/>1&gt;(Lt())));</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>MATCHER*()<sp/>macros<sp/>trigger<sp/>warning<sp/>C4100<sp/>(unreferenced<sp/>formal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter)<sp/>in<sp/>MSVC<sp/>with<sp/>-W4.<sp/><sp/>Unfortunately<sp/>they<sp/>cannot<sp/>be<sp/>fixed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>macro<sp/>definition,<sp/>as<sp/>the<sp/>warnings<sp/>are<sp/>generated<sp/>when<sp/>the<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>expanded<sp/>and<sp/>macro<sp/>expansion<sp/>cannot<sp/>contain<sp/>#pragma.<sp/><sp/>Therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>suppress<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:4100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">MATCHER(SumIsZero,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;0&gt;(arg)<sp/>+<sp/>get&lt;1&gt;(arg)<sp/>+<sp/>get&lt;2&gt;(arg)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsMoreTemplateArgsThanArityOfOriginalTuple)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(-1,<sp/>2),<sp/>(Args&lt;0,<sp/>0,<sp/>1&gt;(SumIsZero())));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(1,<sp/>2),<sp/>Not(Args&lt;0,<sp/>0,<sp/>1&gt;(SumIsZero())));</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">TEST(ArgsTest,<sp/>CanBeNested)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;short,<sp/>int,<sp/>long,<sp/>int&gt;<sp/>t(4,<sp/>5,<sp/>6L,<sp/>6);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;1,<sp/>2,<sp/>3&gt;(Args&lt;1,<sp/>2&gt;(Eq()))));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>EXPECT_THAT(t,<sp/>(Args&lt;0,<sp/>1,<sp/>3&gt;(Args&lt;0,<sp/>2&gt;(Lt()))));</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">TEST(ArgsTest,<sp/>CanMatchTupleByValue)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tuple&lt;char,<sp/>int,<sp/>int&gt;<sp/>Tuple3;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;Tuple3&gt;<sp/>m<sp/>=<sp/>Args&lt;1,<sp/>2&gt;(Lt());</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>1,<sp/>2)));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>2,<sp/>2)));</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">TEST(ArgsTest,<sp/>CanMatchTupleByReference)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tuple&lt;char,<sp/>char,<sp/>int&gt;<sp/>Tuple3;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>Tuple3&amp;&gt;<sp/>m<sp/>=<sp/>Args&lt;0,<sp/>1&gt;(Lt());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>2)));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple3(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>2)));</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Validates<sp/>that<sp/>arg<sp/>is<sp/>printed<sp/>as<sp/>str.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">MATCHER_P(PrintsAs,<sp/>str,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::PrintToString(arg)<sp/>==<sp/>str;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">TEST(ArgsTest,<sp/>AcceptsTenTemplateArgs)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(0,<sp/>1L,<sp/>2,<sp/>3L,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9),</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Args&lt;9,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0&gt;(</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintsAs(</highlight><highlight class="stringliteral">&quot;(9,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0)&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(0,<sp/>1L,<sp/>2,<sp/>3L,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9),</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(Args&lt;9,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0&gt;(</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintsAs(</highlight><highlight class="stringliteral">&quot;(0,<sp/>8,<sp/>7,<sp/>6,<sp/>5,<sp/>4,<sp/>3,<sp/>2,<sp/>1,<sp/>0)&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">TEST(ArgsTest,<sp/>DescirbesSelfCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;tuple&lt;int,<sp/>bool,<sp/>char&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>Args&lt;2,<sp/>0&gt;(Lt());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>whose<sp/>fields<sp/>(#2,<sp/>#0)<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>first<sp/>&lt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">TEST(ArgsTest,<sp/>DescirbesNestedArgsCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>tuple&lt;int,<sp/>bool,<sp/>char,<sp/>int&gt;&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Args&lt;0,<sp/>2,<sp/>3&gt;(Args&lt;2,<sp/>0&gt;(Lt()));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>whose<sp/>fields<sp/>(#0,<sp/>#2,<sp/>#3)<sp/>are<sp/>a<sp/>tuple<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#2,<sp/>#0)<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">TEST(ArgsTest,<sp/>DescribesNegationCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;tuple&lt;int,<sp/>char&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>Args&lt;1,<sp/>0&gt;(Gt());</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>tuple<sp/>whose<sp/>fields<sp/>(#1,<sp/>#0)<sp/>aren&apos;t<sp/>a<sp/>pair<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>first<sp/>&gt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">TEST(ArgsTest,<sp/>ExplainsMatchResultWithoutInnerExplanation)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;tuple&lt;bool,<sp/>int,<sp/>int&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>Args&lt;1,<sp/>2&gt;(Eq());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#1,<sp/>#2)<sp/>are<sp/>(42,<sp/>42)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42,<sp/>42)));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#1,<sp/>#2)<sp/>are<sp/>(42,<sp/>43)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42,<sp/>43)));</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>Args&lt;&gt;&apos;s<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LessThanMatcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;tuple&lt;char,<sp/>int&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(tuple&lt;char,<sp/>int&gt;<sp/>value,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>get&lt;0&gt;(value)<sp/>-<sp/>get&lt;1&gt;(value);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>first<sp/>value<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>more<sp/>than<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal">};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">Matcher&lt;tuple&lt;char,<sp/>int&gt;<sp/>&gt;<sp/>LessThan()<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LessThanMatcher);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">TEST(ArgsTest,<sp/>ExplainsMatchResultWithInnerExplanation)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;tuple&lt;char,<sp/>int,<sp/>int&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>Args&lt;0,<sp/>2&gt;(LessThan());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#0,<sp/>#2)<sp/>are<sp/>(&apos;a&apos;<sp/>(97,<sp/>0x61),<sp/>42),<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>first<sp/>value<sp/>is<sp/>55<sp/>more<sp/>than<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>42,<sp/>42)));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>fields<sp/>(#0,<sp/>#2)<sp/>are<sp/>(&apos;\\0&apos;,<sp/>43)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_tuple(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>42,<sp/>43)));</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>ExplainMatchResultTo().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GreaterThanMatcher<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>MatcherInterface&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>GreaterThanMatcher(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs)<sp/>:<sp/>rhs_(rhs)<sp/>{}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>greater<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchResultListener*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>lhs<sp/>-<sp/>rhs_;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>more<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>the<sp/>same<sp/>as<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>-diff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>less<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs_;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">};</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">Matcher&lt;int&gt;<sp/>GreaterThan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>GreaterThanMatcher(n));</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>ElementsAre().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanDescribeExpectingNoElement)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>vector&lt;int&gt;&amp;&gt;<sp/>m<sp/>=<sp/>ElementsAre();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>empty&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanDescribeExpectingOneElement)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(Gt(5));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>1<sp/>element<sp/>that<sp/>is<sp/>&gt;<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanDescribeExpectingManyElements)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>Matcher&lt;list&lt;string&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(StrEq(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>2<sp/>elements<sp/>where\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#0<sp/>is<sp/>equal<sp/>to<sp/>\&quot;one\&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#1<sp/>is<sp/>equal<sp/>to<sp/>\&quot;two\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanDescribeNegationOfExpectingNoElement)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>empty&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanDescribeNegationOfExpectingOneElment)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>list&lt;int&gt;&amp;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(Gt(5));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>1<sp/>element,<sp/>or\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#0<sp/>isn&apos;t<sp/>&gt;<sp/>5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanDescribeNegationOfExpectingManyElements)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>list&lt;string&gt;&amp;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>2<sp/>elements,<sp/>or\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#0<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>\&quot;one\&quot;,<sp/>or\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#1<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>\&quot;two\&quot;&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">TEST(ElementsAreTest,<sp/>DoesNotExplainTrivialMatch)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>list&lt;int&gt;&amp;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(1,<sp/>Ne(2));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>list&lt;int&gt;<sp/>test_list;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>test_list.push_back(1);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>test_list.push_back(3);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_list));<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>explain<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TEST(ElementsAreTest,<sp/>ExplainsNonTrivialMatch)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>vector&lt;int&gt;&amp;<sp/>&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(GreaterThan(1),<sp/>0,<sp/>GreaterThan(2));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>10,<sp/>0,<sp/>100<sp/>};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#0<sp/>matches,<sp/>which<sp/>is<sp/>9<sp/>more<sp/>than<sp/>1,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>whose<sp/>element<sp/>#2<sp/>matches,<sp/>which<sp/>is<sp/>98<sp/>more<sp/>than<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_vector));</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanExplainMismatchWrongSize)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>list&lt;int&gt;&amp;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(1,<sp/>3);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>list&lt;int&gt;<sp/>test_list;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>explain<sp/>when<sp/>the<sp/>container<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_list));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>test_list.push_back(1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>1<sp/>element&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_list));</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal">TEST(ElementsAreTest,<sp/>CanExplainMismatchRightSize)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>vector&lt;int&gt;&amp;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(1,<sp/>GreaterThan(5));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>v.push_back(2);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>v.push_back(1);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#0<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>v));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>v[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#1<sp/>doesn&apos;t<sp/>match,<sp/>which<sp/>is<sp/>4<sp/>less<sp/>than<sp/>5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>v));</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesOneElementVector)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAre(StrEq(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesOneElementList)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>list&lt;string&gt;<sp/>test_list;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>test_list.push_back(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_list,<sp/>ElementsAre(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesThreeElementVector)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAre(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">),<sp/>_));</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesOneElementEqMatcher)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>test_vector.push_back(4);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAre(Eq(4)));</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesOneElementAnyMatcher)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>test_vector.push_back(4);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAre(_));</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesOneElementValue)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>test_vector.push_back(4);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAre(4));</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesThreeElementsMixedMatchers)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>test_vector.push_back(1);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>test_vector.push_back(2);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>test_vector.push_back(3);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAre(1,<sp/>Eq(2),<sp/>_));</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">TEST(ElementsAreTest,<sp/>MatchesTenElementVector)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>0,<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9<sp/>};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>element<sp/>list<sp/>can<sp/>contain<sp/>values<sp/>and/or<sp/>matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>different<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(0,<sp/>Ge(0),<sp/>_,<sp/>3,<sp/>4,<sp/>Ne(2),<sp/>Eq(6),<sp/>7,<sp/>8,<sp/>_));</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">TEST(ElementsAreTest,<sp/>DoesNotMatchWrongSize)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;string&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(StrEq(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_vector));</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal">TEST(ElementsAreTest,<sp/>DoesNotMatchWrongValue)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;other<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;string&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(StrEq(</highlight><highlight class="stringliteral">&quot;test<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_vector));</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">TEST(ElementsAreTest,<sp/>DoesNotMatchWrongOrder)<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;string&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>ElementsAre(</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>StrEq(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">),<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">),<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_vector));</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">TEST(ElementsAreTest,<sp/>WorksForNestedContainer)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>strings[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>vector&lt;list&lt;char&gt;<sp/>&gt;<sp/>nested;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>GTEST_ARRAY_SIZE_(strings);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>nested.push_back(list&lt;char&gt;(strings[i],<sp/>strings[i]<sp/>+<sp/>strlen(strings[i])));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>EXPECT_THAT(nested,<sp/>ElementsAre(ElementsAre(</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">,<sp/>Ne(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(</highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/>_,<sp/>_,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>EXPECT_THAT(nested,<sp/>Not(ElementsAre(ElementsAre(</highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(</highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/>_,<sp/>_,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">TEST(ElementsAreTest,<sp/>WorksWithByRefElementMatchers)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>0,<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>v(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>EXPECT_THAT(v,<sp/>ElementsAre(Ref(v[0]),<sp/>Ref(v[1]),<sp/>Ref(v[2])));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>EXPECT_THAT(v,<sp/>Not(ElementsAre(Ref(v[0]),<sp/>Ref(v[1]),<sp/>Ref(a[2]))));</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">TEST(ElementsAreTest,<sp/>WorksWithContainerPointerUsingPointee)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>0,<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>v(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;v,<sp/>Pointee(ElementsAre(0,<sp/>1,<sp/>_)));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;v,<sp/>Not(Pointee(ElementsAre(0,<sp/>_,<sp/>3))));</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">TEST(ElementsAreTest,<sp/>WorksWithNativeArrayPassedByReference)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array[]<sp/>=<sp/>{<sp/>0,<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array,<sp/>ElementsAre(0,<sp/>1,<sp/>_));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array,<sp/>Not(ElementsAre(1,<sp/>_,<sp/>_)));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array,<sp/>Not(ElementsAre(0,<sp/>_)));</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NativeArrayPassedAsPointerAndSize<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>NativeArrayPassedAsPointerAndSize()<sp/>{}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Helper,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>array,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(NativeArrayPassedAsPointerAndSize);</highlight></codeline>
<codeline lineno="506"><highlight class="normal">};</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal">TEST(ElementsAreTest,<sp/>WorksWithNativeArrayPassedAsPointerAndSize)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array[]<sp/>=<sp/>{<sp/>0,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>::testing::tuple&lt;int*,<sp/>size_t&gt;<sp/>array_as_tuple(array,<sp/>2);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array_as_tuple,<sp/>ElementsAre(0,<sp/>1));</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array_as_tuple,<sp/>Not(ElementsAre(0)));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>NativeArrayPassedAsPointerAndSize<sp/>helper;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>Helper(_,<sp/>_))</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.With(ElementsAre(0,<sp/>1));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>helper.Helper(array,<sp/>2);</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">TEST(ElementsAreTest,<sp/>WorksWithTwoDimensionalNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a2[][3]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a2,<sp/>ElementsAre(ElementsAre(</highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a2,<sp/>ElementsAre(StrEq(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a2,<sp/>ElementsAre(Not(ElementsAre(</highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">TEST(ElementsAreTest,<sp/>AcceptsStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>array[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array,<sp/>ElementsAre(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array,<sp/>Not(ElementsAre(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;too&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>test<sp/>passes<sp/>a<sp/>value<sp/>of<sp/>type<sp/>const<sp/>char[]<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>template<sp/>that<sp/>expects<sp/>const<sp/>T&amp;.<sp/><sp/>Some<sp/>versions<sp/>of<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generates<sp/>a<sp/>compiler<sp/>error<sp/>C2665<sp/>for<sp/>that.<sp/><sp/>We<sp/>believe<sp/>it&apos;s<sp/>a<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>MSVC.<sp/><sp/>Therefore<sp/>this<sp/>test<sp/>is<sp/>#if-ed<sp/>out<sp/>for<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declared<sp/>here<sp/>with<sp/>the<sp/>size<sp/>unknown.<sp/><sp/>Defined<sp/>AFTER<sp/>the<sp/>following<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kHi[];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">TEST(ElementsAreTest,<sp/>AcceptsArrayWithUnknownSize)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>size<sp/>of<sp/>kHi<sp/>is<sp/>not<sp/>known<sp/>in<sp/>this<sp/>test,<sp/>but<sp/>ElementsAre()<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>accept<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>array1[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array1,<sp/>ElementsAre(kHi));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>array2[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;ho&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array2,<sp/>Not(ElementsAre(kHi)));</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kHi[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">TEST(ElementsAreTest,<sp/>MakesCopyOfArguments)<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>x<sp/>and<sp/>y.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">::testing::internal::ElementsAreMatcher&lt;testing::tuple&lt;int, int&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polymorphic_matcher<sp/>=<sp/>ElementsAre(x,<sp/>y);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Changing<sp/>x<sp/>and<sp/>y<sp/>now<sp/>shouldn&apos;t<sp/>affect<sp/>the<sp/>meaning<sp/>of<sp/>the<sp/>above<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array1[]<sp/>=<sp/>{<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array1,<sp/>polymorphic_matcher);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>array2[]<sp/>=<sp/>{<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>EXPECT_THAT(array2,<sp/>Not(polymorphic_matcher));</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>ElementsAreArray().<sp/><sp/>Since<sp/>ElementsAreArray()<sp/>shares<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>implementation<sp/>with<sp/>ElementsAre(),<sp/>we<sp/>don&apos;t<sp/>test<sp/>it<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thoroughly<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>CanBeCreatedWithValueArray)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(a));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>test_vector[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(ElementsAreArray(a)));</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>CanBeCreatedWithArraySize)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(a,<sp/>GTEST_ARRAY_SIZE_(a)));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>p<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>test_vector[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(ElementsAreArray(p,<sp/>GTEST_ARRAY_SIZE_(a))));</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>CanBeCreatedWithoutArraySize)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(a));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>test_vector[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(ElementsAreArray(a)));</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>CanBeCreatedWithMatcherArray)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;string&gt;<sp/>kMatcherArray[]<sp/>=</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">),<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">),<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">)<sp/>};</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>test_vector;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;one&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;two&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(kMatcherArray));</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>test_vector.push_back(</highlight><highlight class="stringliteral">&quot;three&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(ElementsAreArray(kMatcherArray)));</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>CanBeCreatedWithVector)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>expected(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(expected));</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>test_vector.push_back(4);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(ElementsAreArray(expected)));</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>TakesInitializerList)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>};</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>ElementsAreArray({<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>}));</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(ElementsAreArray({<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>4<sp/>})));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(ElementsAreArray({<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>6<sp/>})));</highlight></codeline>
<codeline lineno="640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>TakesInitializerListOfCStrings)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>ElementsAreArray({<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal"><sp/>}));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(ElementsAreArray({<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal"><sp/>})));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(ElementsAreArray({<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ef&quot;</highlight><highlight class="normal"><sp/>})));</highlight></codeline>
<codeline lineno="647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>TakesInitializerListOfSameTypedMatchers)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>};</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>ElementsAreArray(</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3),<sp/>Eq(4),<sp/>Eq(5)<sp/>}));</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(ElementsAreArray(</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3),<sp/>Eq(4),<sp/>Eq(6)<sp/>})));</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">TEST(ElementsAreArrayTest,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>TakesInitializerListOfDifferentTypedMatchers)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5<sp/>};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compiler<sp/>cannot<sp/>infer<sp/>the<sp/>type<sp/>of<sp/>the<sp/>initializer<sp/>list<sp/>if<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>have<sp/>different<sp/>types.<sp/><sp/>We<sp/>must<sp/>explicitly<sp/>specify<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unified<sp/>element<sp/>type<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>ElementsAreArray&lt;Matcher&lt;int&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Eq(1),<sp/>Ne(-2),<sp/>Ge(3),<sp/>Le(4),<sp/>Eq(5)<sp/>}));</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(ElementsAreArray&lt;Matcher&lt;int&gt;<sp/>&gt;(</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>Eq(1),<sp/>Ne(-2),<sp/>Ge(3),<sp/>Le(4),<sp/>Eq(6)<sp/>})));</highlight></codeline>
<codeline lineno="667"><highlight class="normal">}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>CanBeCreatedWithMatcherVector)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>kMatchers[]<sp/>=<sp/>{<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3)<sp/>};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;Matcher&lt;int&gt;<sp/>&gt;<sp/>expected(</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kMatchers,<sp/>kMatchers<sp/>+<sp/>GTEST_ARRAY_SIZE_(kMatchers));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(expected));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>test_vector.push_back(4);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(ElementsAreArray(expected)));</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>CanBeCreatedWithIteratorRange)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>expected(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(expected.begin(),<sp/>expected.end()));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pointers<sp/>are<sp/>iterators,<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>ElementsAreArray(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a)));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>empty<sp/>range<sp/>of<sp/>NULL<sp/>pointers<sp/>should<sp/>also<sp/>be<sp/>okay.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>null_int<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(ElementsAreArray(null_int,<sp/>null_int)));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>EXPECT_THAT((vector&lt;int&gt;()),<sp/>ElementsAreArray(null_int,<sp/>null_int));</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>ElementsAre()<sp/>and<sp/>ElementsAreArray()<sp/>share<sp/>much<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation,<sp/>we<sp/>only<sp/>do<sp/>a<sp/>sanity<sp/>test<sp/>for<sp/>native<sp/>arrays<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>WorksWithNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>::std::string<sp/>a[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ho&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>::std::string<sp/>b[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ho&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>ElementsAreArray(b));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>ElementsAreArray(b,<sp/>2));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(ElementsAreArray(b,<sp/>1)));</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal">TEST(ElementsAreArrayTest,<sp/>SourceLifeSpan)<sp/>{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_vector(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>expect(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>ElementsAreArrayMatcher&lt;int&gt;<sp/>matcher_maker<sp/>=</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAreArray(expect.begin(),<sp/>expect.end());</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>matcher_maker);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Changing<sp/>in<sp/>place<sp/>the<sp/>values<sp/>that<sp/>initialized<sp/>matcher_maker<sp/>should<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>affect<sp/>matcher_maker<sp/>anymore.<sp/>It<sp/>should<sp/>have<sp/>made<sp/>its<sp/>own<sp/>copy<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>vector&lt;int&gt;::iterator<sp/>Iter;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Iter<sp/>it<sp/>=<sp/>expect.begin();<sp/>it<sp/>!=<sp/>expect.end();<sp/>++it)<sp/>{<sp/>*it<sp/>+=<sp/>10;<sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>matcher_maker);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>test_vector.push_back(3);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>EXPECT_THAT(test_vector,<sp/>Not(matcher_maker));</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>the<sp/>MATCHER*()<sp/>macro<sp/>family.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>simple<sp/>MATCHER()<sp/>definition<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">MATCHER(IsEven,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(arg<sp/>%<sp/>2)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal">TEST(MatcherMacroTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>IsEven();</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(6));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(7));</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>even)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>6));</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>7));</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>tests<sp/>that<sp/>the<sp/>description<sp/>string<sp/>can<sp/>reference<sp/>&apos;negation&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">MATCHER(IsEven2,<sp/>negation<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>odd&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((arg<sp/>%<sp/>2)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>result_listener,<sp/>a<sp/>listener</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>supplied<sp/>by<sp/>the<sp/>MATCHER<sp/>macro<sp/>implicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(arg<sp/>%<sp/>2);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>tests<sp/>that<sp/>the<sp/>description<sp/>string<sp/>can<sp/>reference<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">MATCHER_P2(EqSumOf,<sp/>x,<sp/>y,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(negation<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>equal&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;equals&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>the<sp/>sum<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToString(x)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>PrintToString(y))<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg<sp/>==<sp/>(x<sp/>+<sp/>y))<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>*result_listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>the<sp/>underlying<sp/>stream<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result_listener.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result_listener-&gt;stream()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*result_listener-&gt;stream()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;diff<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(x<sp/>+<sp/>y<sp/>-<sp/>arg);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>matcher<sp/>description<sp/>can<sp/>reference<sp/>&apos;negation&apos;<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal">TEST(MatcherMacroTest,<sp/>DescriptionCanReferenceNegationAndParameters)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m1<sp/>=<sp/>IsEven2();</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>odd&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m2<sp/>=<sp/>EqSumOf(5,<sp/>9);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;equals<sp/>the<sp/>sum<sp/>of<sp/>5<sp/>and<sp/>9&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>equal<sp/>the<sp/>sum<sp/>of<sp/>5<sp/>and<sp/>9&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>explaining<sp/>match<sp/>result<sp/>in<sp/>a<sp/>MATCHER*<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">TEST(MatcherMacroTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m1<sp/>=<sp/>IsEven2();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>4));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>5));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m2<sp/>=<sp/>EqSumOf(1,<sp/>2);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>3));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;diff<sp/>==<sp/>-1&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>4));</highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>MATCHER()<sp/>can<sp/>reference<sp/>the<sp/>type<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>being<sp/>matched.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal">MATCHER(IsEmptyString,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;<sp/>::std::string,<sp/>arg_type&gt;();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">MATCHER(IsEmptyStringByRef,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>::std::string&amp;,<sp/>arg_type&gt;();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal">TEST(MatcherMacroTest,<sp/>CanReferenceArgType)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;<sp/>::std::string&gt;<sp/>m1<sp/>=<sp/>IsEmptyString();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>::std::string&amp;&gt;<sp/>m2<sp/>=<sp/>IsEmptyStringByRef();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MATCHER()<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacematcher__test" kindref="compound">matcher_test</ref><sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal">MATCHER(IsOdd,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(arg<sp/>%<sp/>2)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>matcher_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">TEST(MatcherMacroTest,<sp/>WorksInNamespace)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>matcher_test::IsOdd();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(4));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(5));</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Value()<sp/>can<sp/>be<sp/>used<sp/>to<sp/>compose<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">MATCHER(IsPositiveOdd,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value(arg,<sp/>matcher_test::IsOdd())<sp/>&amp;&amp;<sp/>arg<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal">TEST(MatcherMacroTest,<sp/>CanBeComposedUsingValue)<sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>EXPECT_THAT(3,<sp/>IsPositiveOdd());</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>EXPECT_THAT(4,<sp/>Not(IsPositiveOdd()));</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1,<sp/>Not(IsPositiveOdd()));</highlight></codeline>
<codeline lineno="835"><highlight class="normal">}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>simple<sp/>MATCHER_P()<sp/>definition<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal">MATCHER_P(IsGreaterThan32And,<sp/>n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>&gt;<sp/>32<sp/>&amp;&amp;<sp/>arg<sp/>&gt;<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">TEST(MatcherPMacroTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>IsGreaterThan32And(5);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(36));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(5));</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>36));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>description<sp/>is<sp/>calculated<sp/>correctly<sp/>from<sp/>the<sp/>matcher<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal">MATCHER_P(_is_Greater_Than32and_,<sp/>n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>&gt;<sp/>32<sp/>&amp;&amp;<sp/>arg<sp/>&gt;<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">TEST(MatcherPMacroTest,<sp/>GeneratesCorrectDescription)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;int&gt;<sp/>m<sp/>=<sp/>_is_Greater_Than32and_(5);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>greater<sp/>than<sp/>32<sp/>and<sp/>5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>36));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>MATCHER_P<sp/>matcher<sp/>can<sp/>be<sp/>explicitly<sp/>instantiated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>reference<sp/>parameter<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UncopyableFoo<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>UncopyableFoo(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>UncopyableFoo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UncopyableFoo&amp;);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UncopyableFoo&amp;);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="875"><highlight class="normal">};</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal">MATCHER_P(ReferencesUncopyable,<sp/>variable,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg<sp/>==<sp/>&amp;variable;<sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">TEST(MatcherPMacroTest,<sp/>WorksWhenExplicitlyInstantiatedWithReference)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>UncopyableFoo<sp/>foo1(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">),<sp/>foo2(</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>UncopyableFoo&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReferencesUncopyable&lt;const<sp/>UncopyableFoo&amp;&gt;(foo1);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo1));</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(foo2));</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>the<sp/>address<sp/>of<sp/>the<sp/>parameter<sp/>printed,<sp/>as<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>likely<sp/>it<sp/>will<sp/>just<sp/>annoy<sp/>the<sp/>user.<sp/><sp/>If<sp/>the<sp/>address<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interesting,<sp/>the<sp/>user<sp/>should<sp/>consider<sp/>passing<sp/>the<sp/>parameter<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;references<sp/>uncopyable<sp/>1-byte<sp/>object<sp/>&lt;31&gt;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="892"><highlight class="normal">}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>MATCHER_Pn()<sp/>can<sp/>reference<sp/>the<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal">MATCHER_P3(ParamTypesAreIntLongAndChar,<sp/><ref refid="namespacefoo" kindref="compound">foo</ref>,<sp/><ref refid="namespacebar" kindref="compound">bar</ref>,<sp/>baz,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int,<sp/>foo_type&gt;();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;long,<sp/>bar_type&gt;();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;char,<sp/>baz_type&gt;();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>CanReferenceParamTypes)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>ParamTypesAreIntLongAndChar(10,<sp/>20L,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="907"><highlight class="normal">}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>MATCHER_Pn<sp/>matcher<sp/>can<sp/>be<sp/>explicitly<sp/>instantiated<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal">MATCHER_P2(ReferencesAnyOf,<sp/>variable1,<sp/>variable2,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg<sp/>==<sp/>&amp;variable1<sp/>||<sp/>&amp;arg<sp/>==<sp/>&amp;variable2;</highlight></codeline>
<codeline lineno="914"><highlight class="normal">}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>WorksWhenExplicitlyInstantiatedWithReferences)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>UncopyableFoo<sp/>foo1(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">),<sp/>foo2(</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">),<sp/>foo3(</highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>UncopyableFoo&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReferencesAnyOf&lt;const<sp/>UncopyableFoo&amp;,<sp/>const<sp/>UncopyableFoo&amp;&gt;(foo1,<sp/>foo2);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo1));</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo2));</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(foo3));</highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">TEST(MatcherPnMacroTest,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>GeneratesCorretDescriptionWhenExplicitlyInstantiatedWithReferences)<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>UncopyableFoo<sp/>foo1(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">),<sp/>foo2(</highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>UncopyableFoo&amp;&gt;<sp/>m<sp/>=</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReferencesAnyOf&lt;const<sp/>UncopyableFoo&amp;,<sp/>const<sp/>UncopyableFoo&amp;&gt;(foo1,<sp/>foo2);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>want<sp/>the<sp/>addresses<sp/>of<sp/>the<sp/>parameters<sp/>printed,<sp/>as<sp/>most</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>likely<sp/>they<sp/>will<sp/>just<sp/>annoy<sp/>the<sp/>user.<sp/><sp/>If<sp/>the<sp/>addresses<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>interesting,<sp/>the<sp/>user<sp/>should<sp/>consider<sp/>passing<sp/>the<sp/>parameters<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointers<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;references<sp/>any<sp/>of<sp/>(1-byte<sp/>object<sp/>&lt;31&gt;,<sp/>1-byte<sp/>object<sp/>&lt;32&gt;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>simple<sp/>MATCHER_P2()<sp/>definition<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal">MATCHER_P2(IsNotInClosedRange,<sp/>low,<sp/>hi,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>&lt;<sp/>low<sp/>||<sp/>arg<sp/>&gt;<sp/>hi;<sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Matcher&lt;const<sp/>long&amp;&gt;<sp/>m<sp/>=<sp/>IsNotInClosedRange(10,<sp/>20);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(36L));</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(15L));</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>in<sp/>closed<sp/>range<sp/>(10,<sp/>20)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>not<sp/>in<sp/>closed<sp/>range<sp/>(10,<sp/>20))&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>36L));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>15L));</highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MATCHER*()<sp/>definitions<sp/>can<sp/>be<sp/>overloaded<sp/>on<sp/>the<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>parameters;<sp/>also<sp/>tests<sp/>MATCHER_Pn()<sp/>where<sp/>n<sp/>&gt;=<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal">MATCHER(EqualsSumOf,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal">MATCHER_P(EqualsSumOf,<sp/>a,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a;<sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal">MATCHER_P2(EqualsSumOf,<sp/>a,<sp/>b,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal">MATCHER_P3(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal">MATCHER_P4(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d;<sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal">MATCHER_P5(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;<sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal">MATCHER_P6(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal">MATCHER_P7(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g;</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal">MATCHER_P8(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g<sp/>+<sp/>h;</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal">MATCHER_P9(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g<sp/>+<sp/>h<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal">MATCHER_P10(EqualsSumOf,<sp/>a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f<sp/>+<sp/>g<sp/>+<sp/>h<sp/>+<sp/>i<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>CanBeOverloadedOnNumberOfParameters)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>EqualsSumOf());</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>EqualsSumOf(1));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>EXPECT_THAT(12,<sp/>EqualsSumOf(10,<sp/>2));</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>EXPECT_THAT(123,<sp/>EqualsSumOf(100,<sp/>20,<sp/>3));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1234,<sp/>EqualsSumOf(1000,<sp/>200,<sp/>30,<sp/>4));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>EXPECT_THAT(12345,<sp/>EqualsSumOf(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdef&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefg&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefgh&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghi&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghij&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>Not(EqualsSumOf()));</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1,<sp/>Not(EqualsSumOf(1)));</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-12,<sp/>Not(EqualsSumOf(10,<sp/>2)));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-123,<sp/>Not(EqualsSumOf(100,<sp/>20,<sp/>3)));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-1234,<sp/>Not(EqualsSumOf(1000,<sp/>200,<sp/>30,<sp/>4)));</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>EXPECT_THAT(-12345,<sp/>Not(EqualsSumOf(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5)));</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdef<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefg<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefgh<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghi<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcdefghij<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/>::std::string(</highlight><highlight class="stringliteral">&quot;j&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1021"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>MATCHER_Pn()<sp/>definition<sp/>can<sp/>be<sp/>instantiated<sp/>with<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compatible<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>WorksForDifferentParameterTypes)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>EXPECT_THAT(123,<sp/>EqualsSumOf(100L,<sp/>20,<sp/>static_cast&lt;char&gt;(3)));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcd&quot;</highlight><highlight class="normal">,<sp/>EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>EXPECT_THAT(124,<sp/>Not(EqualsSumOf(100L,<sp/>20,<sp/>static_cast&lt;char&gt;(3))));</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;abcde&quot;</highlight><highlight class="normal">,<sp/>Not(EqualsSumOf(::std::string(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>matcher<sp/>body<sp/>can<sp/>promote<sp/>the<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal">MATCHER_P2(EqConcat,<sp/>prefix,<sp/>suffix,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>lines<sp/>promote<sp/>the<sp/>two<sp/>parameters<sp/>to<sp/>desired<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>std::string<sp/>prefix_str(prefix);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>suffix_char<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(suffix);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg<sp/>==<sp/>prefix_str<sp/>+<sp/>suffix_char;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>SimpleTypePromotion)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>Matcher&lt;std::string&gt;<sp/>no_promo<sp/>=</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqConcat(std::string(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>std::string&amp;&gt;<sp/>promo<sp/>=</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqConcat(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>static_cast&lt;int&gt;(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(no_promo.Matches(</highlight><highlight class="stringliteral">&quot;fool&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(promo.Matches(</highlight><highlight class="stringliteral">&quot;fool&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(no_promo.Matches(</highlight><highlight class="stringliteral">&quot;foot&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(promo.Matches(</highlight><highlight class="stringliteral">&quot;foot&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>the<sp/>type<sp/>of<sp/>a<sp/>MATCHER*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>TypesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EqualsSumOf()<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>EqualsSumOfMatcher<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcher<sp/>a0<sp/>=<sp/>EqualsSumOf();</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EqualsSumOf(1)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>EqualsSumOfMatcherP<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP&lt;int&gt;<sp/>a1<sp/>=<sp/>EqualsSumOf(1);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EqualsSumOf(p1,<sp/>...,<sp/>pk)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>EqualsSumOfMatcherPk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP2&lt;int,<sp/>char&gt;<sp/>a2<sp/>=<sp/>EqualsSumOf(1,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP3&lt;int,<sp/>int,<sp/>char&gt;<sp/>a3<sp/>=<sp/>EqualsSumOf(1,<sp/>2,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP4&lt;int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a4<sp/>=<sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP5&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a5<sp/>=</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP6&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a6<sp/>=</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP7&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a7<sp/>=</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP8&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a8<sp/>=</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP9&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a9<sp/>=</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>EqualsSumOfMatcherP10&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a10<sp/>=</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EqualsSumOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>&quot;unused<sp/>variable&quot;<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>(void)a0;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>(void)a1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>(void)a2;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>(void)a3;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>(void)a4;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>(void)a5;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>(void)a6;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>(void)a7;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>(void)a8;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>(void)a9;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>(void)a10;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>matcher-typed<sp/>parameters<sp/>can<sp/>be<sp/>used<sp/>in<sp/>Value()<sp/>inside<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MATCHER_Pn<sp/>definition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Succeeds<sp/>if<sp/>arg<sp/>matches<sp/>exactly<sp/>2<sp/>of<sp/>the<sp/>3<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">MATCHER_P3(TwoOf,<sp/>m1,<sp/>m2,<sp/>m3,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Value(arg,<sp/>m1))</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>static_cast&lt;int&gt;(Value(arg,<sp/>m2))<sp/>+<sp/>static_cast&lt;int&gt;(Value(arg,<sp/>m3));</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>==<sp/>2;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal">TEST(MatcherPnMacroTest,<sp/>CanUseMatcherTypedParameterInValue)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,<sp/>TwoOf(Gt(0),<sp/>Lt(50),<sp/>Eq(10)));</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Not(TwoOf(Gt(-1),<sp/>Lt(1),<sp/>Eq(0))));</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Contains().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal">TEST(ContainsTest,<sp/>ListMatchesWhenElementIsInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>list&lt;int&gt;<sp/>some_list;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>some_list.push_back(3);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>some_list.push_back(1);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>some_list.push_back(2);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(1));</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(Gt(2.5)));</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Contains(Eq(2.0f)));</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>list&lt;string&gt;<sp/>another_list;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>another_list.push_back(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>another_list.push_back(</highlight><highlight class="stringliteral">&quot;fie&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>another_list.push_back(</highlight><highlight class="stringliteral">&quot;foe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>another_list.push_back(</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_list,<sp/>Contains(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">TEST(ContainsTest,<sp/>ListDoesNotMatchWhenElementIsNotInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>list&lt;int&gt;<sp/>some_list;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>some_list.push_back(3);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>some_list.push_back(1);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_list,<sp/>Not(Contains(4)));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal">TEST(ContainsTest,<sp/>SetMatchesWhenElementIsInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>some_set;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>some_set.insert(3);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>some_set.insert(1);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>some_set.insert(2);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_set,<sp/>Contains(Eq(1.0)));</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_set,<sp/>Contains(Eq(3.0f)));</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_set,<sp/>Contains(2));</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>set&lt;const<sp/>char*&gt;<sp/>another_set;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>another_set.insert(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>another_set.insert(</highlight><highlight class="stringliteral">&quot;fie&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>another_set.insert(</highlight><highlight class="stringliteral">&quot;foe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>another_set.insert(</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_set,<sp/>Contains(Eq(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">TEST(ContainsTest,<sp/>SetDoesNotMatchWhenElementIsNotInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>some_set;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>some_set.insert(3);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>some_set.insert(1);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_set,<sp/>Not(Contains(4)));</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>set&lt;const<sp/>char*&gt;<sp/>c_string_set;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>c_string_set.insert(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>EXPECT_THAT(c_string_set,<sp/>Not(Contains(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">).c_str())));</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal">TEST(ContainsTest,<sp/>ExplainsMatchResultCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[2]<sp/>=<sp/>{<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>Matcher&lt;const<sp/>int<sp/>(&amp;)[2]&gt;<sp/>m<sp/>=<sp/>Contains(2);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#1<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(3);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(GreaterThan(0));</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#0<sp/>matches,<sp/>which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Contains(GreaterThan(10));</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal">TEST(ContainsTest,<sp/>DescribesItselfCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;<sp/>&gt;<sp/>m<sp/>=<sp/>Contains(1);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;contains<sp/>at<sp/>least<sp/>one<sp/>element<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>Matcher&lt;vector&lt;int&gt;<sp/>&gt;<sp/>m2<sp/>=<sp/>Not(m);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>contain<sp/>any<sp/>element<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal">TEST(ContainsTest,<sp/>MapMatchesWhenElementIsInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>map&lt;const<sp/>char*,<sp/>int&gt;<sp/>my_map;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacebar" kindref="compound">bar</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>my_map[bar]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>EXPECT_THAT(my_map,<sp/>Contains(pair&lt;const<sp/>char*<sp/>const,<sp/>int&gt;(bar,<sp/>2)));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>int&gt;<sp/>another_map;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;fie&quot;</highlight><highlight class="normal">]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;foe&quot;</highlight><highlight class="normal">]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_map,<sp/>Contains(pair&lt;const<sp/>string,<sp/>int&gt;(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">),<sp/>1)));</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_map,<sp/>Contains(pair&lt;const<sp/>string,<sp/>int&gt;(</highlight><highlight class="stringliteral">&quot;fie&quot;</highlight><highlight class="normal">,<sp/>2)));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal">TEST(ContainsTest,<sp/>MapDoesNotMatchWhenElementIsNotInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>int&gt;<sp/>some_map;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>some_map[1]<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>some_map[2]<sp/>=<sp/>22;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_map,<sp/>Not(Contains(pair&lt;const<sp/>int,<sp/>int&gt;(2,<sp/>23))));</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal">TEST(ContainsTest,<sp/>ArrayMatchesWhenElementIsInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>string_array[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fie&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;foe&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>EXPECT_THAT(string_array,<sp/>Contains(Eq(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal">TEST(ContainsTest,<sp/>ArrayDoesNotMatchWhenElementIsNotInContainer)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_array[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4<sp/>};</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>EXPECT_THAT(int_array,<sp/>Not(Contains(5)));</highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal">TEST(ContainsTest,<sp/>AcceptsMatcher)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Contains(Gt(2)));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(Contains(Gt(4))));</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal">TEST(ContainsTest,<sp/>WorksForNativeArrayAsTuple)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2<sp/>};</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(pointer,<sp/>2),<sp/>Contains(1));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(pointer,<sp/>2),<sp/>Not(Contains(Gt(3))));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal">TEST(ContainsTest,<sp/>WorksForTwoDimensionalNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[][3]<sp/>=<sp/>{<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>},<sp/>{<sp/>4,<sp/>5,<sp/>6<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Contains(ElementsAre(4,<sp/>5,<sp/>6)));</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Contains(Contains(5)));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(Contains(ElementsAre(3,<sp/>4,<sp/>5))));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Contains(Not(Contains(5))));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal">TEST(AllOfTest,<sp/>HugeMatcher)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>using<sp/>AllOf<sp/>with<sp/>many<sp/>arguments<sp/>doesn&apos;t<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>compiler<sp/>to<sp/>exceed<sp/>template<sp/>instantiation<sp/>depth<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>testing::AllOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AllOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_)));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal">TEST(AnyOfTest,<sp/>HugeMatcher)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>using<sp/>AnyOf<sp/>with<sp/>many<sp/>arguments<sp/>doesn&apos;t<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>compiler<sp/>to<sp/>exceed<sp/>template<sp/>instantiation<sp/>depth<sp/>limit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>testing::AnyOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AnyOf(_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_)));</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceadl__test" kindref="compound">adl_test</ref><sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>implementation<sp/>of<sp/>::testing::AllOf<sp/>and<sp/>::testing::AnyOf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>issue<sp/>unqualified<sp/>recursive<sp/>calls.<sp/><sp/>If<sp/>they<sp/>do,<sp/>the<sp/>argument<sp/>dependent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>lookup<sp/>will<sp/>cause<sp/>AllOf/AnyOf<sp/>in<sp/>the<sp/>&apos;adl_test&apos;<sp/>namespace<sp/>to<sp/>be<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>a<sp/>candidate<sp/>and<sp/>the<sp/>compilation<sp/>will<sp/>break<sp/>due<sp/>to<sp/>an<sp/>ambiguous<sp/>overload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>must<sp/>be<sp/>in<sp/>the<sp/>same<sp/>namespace<sp/>as<sp/>AllOf/AnyOf<sp/>to<sp/>make<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dependent<sp/>lookup<sp/>find<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal">MATCHER(M,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AllOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>t2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal">TEST(AllOfTest,<sp/>DoesNotCallAllOfUnqualified)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,<sp/>testing::AllOf(</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M()));</highlight></codeline>
<codeline lineno="1270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal">AnyOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>t2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal">TEST(AnyOfTest,<sp/>DoesNotCallAnyOfUnqualified)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,<sp/>testing::AnyOf(</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M(),<sp/>M()));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>adl_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/test/gmock-generated-matchers_test.cc"/>
  </compounddef>
</doxygen>
