<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacetesting_1_1gmock__matchers__test" kind="namespace" language="C++">
    <compoundname>testing::gmock_matchers_test</compoundname>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_a_class" prot="public">testing::gmock_matchers_test::AClass</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_all_args_helper" prot="public">testing::gmock_matchers_test::AllArgsHelper</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" prot="public">testing::gmock_matchers_test::AStruct</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_backtracking_b_p_m_test" prot="public">testing::gmock_matchers_test::BacktrackingBPMTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_base" prot="public">testing::gmock_matchers_test::Base</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" prot="public">testing::gmock_matchers_test::BipartiteNonSquareTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" prot="public">testing::gmock_matchers_test::BipartiteRandomTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" prot="public">testing::gmock_matchers_test::BipartiteTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" prot="public">testing::gmock_matchers_test::ConstPropagatingPtr</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" prot="public">testing::gmock_matchers_test::ConvertibleFromAny</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" prot="public">testing::gmock_matchers_test::ConvertibleToBool</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_derived" prot="public">testing::gmock_matchers_test::Derived</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_derived_class" prot="public">testing::gmock_matchers_test::DerivedClass</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_derived_struct" prot="public">testing::gmock_matchers_test::DerivedStruct</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" prot="public">testing::gmock_matchers_test::DivisibleByImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl" prot="public">testing::gmock_matchers_test::EvenMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" prot="public">testing::gmock_matchers_test::FloatingPointNearTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" prot="public">testing::gmock_matchers_test::FloatingPointTest</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_functor" prot="public">testing::gmock_matchers_test::Functor</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher" prot="public">testing::gmock_matchers_test::GreaterThanMatcher</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" prot="public">testing::gmock_matchers_test::IntReferenceWrapper</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_int_value" prot="public">testing::gmock_matchers_test::IntValue</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_is_greater_than" prot="public">testing::gmock_matchers_test::IsGreaterThan</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_is_half_of_matcher" prot="public">testing::gmock_matchers_test::IsHalfOfMatcher</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_new_even_matcher_impl" prot="public">testing::gmock_matchers_test::NewEvenMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" prot="public">testing::gmock_matchers_test::NotCopyable</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_other_derived" prot="public">testing::gmock_matchers_test::OtherDerived</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_polymorphic_functor" prot="public">testing::gmock_matchers_test::PolymorphicFunctor</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_polymorphic_is_even_impl" prot="public">testing::gmock_matchers_test::PolymorphicIsEvenImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_references_bar_or_is_zero_impl" prot="public">testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_referencing_functor" prot="public">testing::gmock_matchers_test::ReferencingFunctor</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" prot="public">testing::gmock_matchers_test::Streamlike</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_type" prot="public">testing::gmock_matchers_test::Type</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" prot="public">testing::gmock_matchers_test::Uncopyable</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" prot="public">testing::gmock_matchers_test::UnorderedElementsAreTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" prot="public">testing::gmock_matchers_test::Unprintable</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gmock-matchers__test_8cc_1a8b82c859cd28da9e7f7d4c6091a3165c" prot="public" static="no">
        <type>::testing::tuple&lt; long, int &gt;</type>
        <definition>typedef ::testing::tuple&lt;long, int&gt; testing::gmock_matchers_test::Tuple2</definition>
        <argsstring></argsstring>
        <name>Tuple2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1930" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-matchers__test_8cc_1a145329e433869625f9f0e98a0cdfd7b4" prot="public" static="no">
        <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest</ref>&lt; float &gt;</type>
        <definition>typedef FloatingPointTest&lt;float&gt; testing::gmock_matchers_test::FloatTest</definition>
        <argsstring></argsstring>
        <name>FloatTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2900" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-matchers__test_8cc_1a426b51f464dcb48033946e1bf3cc8795" prot="public" static="no">
        <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatingPointNearTest</ref>&lt; float &gt;</type>
        <definition>typedef FloatingPointNearTest&lt;float&gt; testing::gmock_matchers_test::FloatNearTest</definition>
        <argsstring></argsstring>
        <name>FloatNearTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2956" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2956" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-matchers__test_8cc_1a944cdd366ed240f29ae8e3ebc753ad5c" prot="public" static="no">
        <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest</ref>&lt; double &gt;</type>
        <definition>typedef FloatingPointTest&lt;double&gt; testing::gmock_matchers_test::DoubleTest</definition>
        <argsstring></argsstring>
        <name>DoubleTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3015" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gmock-matchers__test_8cc_1aea537d0183ccc65b5c49a75d711993c8" prot="public" static="no">
        <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatingPointNearTest</ref>&lt; double &gt;</type>
        <definition>typedef FloatingPointNearTest&lt;double&gt; testing::gmock_matchers_test::DoubleNearTest</definition>
        <argsstring></argsstring>
        <name>DoubleNearTest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3071" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3071" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1a55dcc962203a3a3361d2e7e00ed99b4d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::gmock_matchers_test::g_bar</definition>
        <argsstring></argsstring>
        <name>g_bar</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="439" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1a3536e68112ffbb1f76887cd15bb45c15" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::gmock_matchers_test::foo</definition>
        <argsstring></argsstring>
        <name>foo</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2452" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2452" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8cf8614a7c9adc8fb00e8af04895f97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; int &gt;</type>
        <definition>Matcher&lt;int&gt; testing::gmock_matchers_test::GreaterThan</definition>
        <argsstring>(int n)</argsstring>
        <name>GreaterThan</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="188" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5d48d2ef7ca374de369c5f0a30e32343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string testing::gmock_matchers_test::OfType</definition>
        <argsstring>(const string &amp;type_name)</argsstring>
        <name>OfType</name>
        <param>
          <type>const string &amp;</type>
          <declname>type_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="192" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="192" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a36ae44e4f6c8e9fe3fe9162132503717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>string</type>
        <definition>string testing::gmock_matchers_test::Describe</definition>
        <argsstring>(const Matcher&lt; T &gt; &amp;m)</argsstring>
        <name>Describe</name>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="202" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1afbc8022da5a58aa467ec414ab3e90908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>string</type>
        <definition>string testing::gmock_matchers_test::DescribeNegation</definition>
        <argsstring>(const Matcher&lt; T &gt; &amp;m)</argsstring>
        <name>DescribeNegation</name>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="210" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="210" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6215aeb6213a03f4233924ef1c74d968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MatcherType</type>
          </param>
          <param>
            <type>typename Value</type>
          </param>
        </templateparamlist>
        <type>string</type>
        <definition>string testing::gmock_matchers_test::Explain</definition>
        <argsstring>(const MatcherType &amp;m, const Value &amp;x)</argsstring>
        <name>Explain</name>
        <param>
          <type>const MatcherType &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const Value &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="218" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7bc21ec910c3861034d1336fecfcc260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchResultListenerTest, StreamingWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchResultListenerTest</type>
        </param>
        <param>
          <type>StreamingWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="224" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="224" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1abc02b215e80c57464c83abdf297b9db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchResultListenerTest, CanAccessUnderlyingStream)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchResultListenerTest</type>
        </param>
        <param>
          <type>CanAccessUnderlyingStream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="240" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="240" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac7ee3826ca24c20fa2a8b388c72eedb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchResultListenerTest, IsInterestedWorks)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchResultListenerTest</type>
        </param>
        <param>
          <type>IsInterestedWorks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="247" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="247" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2d73acaddb6b28a827ce0e475ffc9cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherInterfaceTest, CanBeImplementedUsingPublishedAPI)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherInterfaceTest</type>
        </param>
        <param>
          <type>CanBeImplementedUsingPublishedAPI</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="274" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad212c5ac3ef7a102a6b1712e40e06a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherInterfaceTest, CanBeImplementedUsingNewAPI)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherInterfaceTest</type>
        </param>
        <param>
          <type>CanBeImplementedUsingNewAPI</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="299" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="299" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8843a1545b9e09d73b565cf94f2e5f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTest, CanBeDefaultConstructed)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTest</type>
        </param>
        <param>
          <type>CanBeDefaultConstructed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="308" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="308" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3dee288df7e811f817850a5187c42669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTest, CanBeConstructedFromMatcherInterface)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTest</type>
        </param>
        <param>
          <type>CanBeConstructedFromMatcherInterface</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="313" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="313" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2bd9ad37a8b9f03b10a15ed322c3249c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTest, CanBeImplicitlyConstructedFromValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTest</type>
        </param>
        <param>
          <type>CanBeImplicitlyConstructedFromValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="321" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a0de94b029c8a13180276e411f4d75f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTest, CanBeImplicitlyConstructedFromNULL)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTest</type>
        </param>
        <param>
          <type>CanBeImplicitlyConstructedFromNULL</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="328" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="328" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab37bd0e535503a8f39e34b0554b2fb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTest, IsCopyable)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTest</type>
        </param>
        <param>
          <type>IsCopyable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="336" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="336" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae85f2ec21822e884ac9ff58741d420d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTest, CanDescribeItself)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTest</type>
        </param>
        <param>
          <type>CanDescribeItself</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="350" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aee6cef32b22ddd6ce8b87578c3de4198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTest, MatchAndExplain)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTest</type>
        </param>
        <param>
          <type>MatchAndExplain</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="356" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="356" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a17fb479932a88dc4e334327c5e12c8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StringMatcherTest, CanBeImplicitlyConstructedFromCStringLiteral)</argsstring>
        <name>TEST</name>
        <param>
          <type>StringMatcherTest</type>
        </param>
        <param>
          <type>CanBeImplicitlyConstructedFromCStringLiteral</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="369" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="369" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6786eca17f1fc4d6250470cc21ec79f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StringMatcherTest, CanBeImplicitlyConstructedFromString)</argsstring>
        <name>TEST</name>
        <param>
          <type>StringMatcherTest</type>
        </param>
        <param>
          <type>CanBeImplicitlyConstructedFromString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="381" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="381" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae433e93168010d7316b40ef4a5088d09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MakeMatcherTest, ConstructsMatcherFromMatcherInterface)</argsstring>
        <name>TEST</name>
        <param>
          <type>MakeMatcherTest</type>
        </param>
        <param>
          <type>ConstructsMatcherFromMatcherInterface</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="432" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac07376a5dff45a905b7eb96e621ce3aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1gmock__matchers__test_1_1_references_bar_or_is_zero_impl" kindref="compound">ReferencesBarOrIsZeroImpl</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;ReferencesBarOrIsZeroImpl&gt; testing::gmock_matchers_test::ReferencesBarOrIsZero</definition>
        <argsstring>()</argsstring>
        <name>ReferencesBarOrIsZero</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="458" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="458" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aad0604e47fea147ae133d134b4606a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MakePolymorphicMatcherTest, ConstructsMatcherUsingOldAPI)</argsstring>
        <name>TEST</name>
        <param>
          <type>MakePolymorphicMatcherTest</type>
        </param>
        <param>
          <type>ConstructsMatcherUsingOldAPI</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="462" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="462" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8a0035a0de2d219d89ff7070762ece72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1gmock__matchers__test_1_1_polymorphic_is_even_impl" kindref="compound">PolymorphicIsEvenImpl</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;PolymorphicIsEvenImpl&gt; testing::gmock_matchers_test::PolymorphicIsEven</definition>
        <argsstring>()</argsstring>
        <name>PolymorphicIsEven</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="501" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="501" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a619d872aa86419c5093327f64c466df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MakePolymorphicMatcherTest, ConstructsMatcherUsingNewAPI)</argsstring>
        <name>TEST</name>
        <param>
          <type>MakePolymorphicMatcherTest</type>
        </param>
        <param>
          <type>ConstructsMatcherUsingNewAPI</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="505" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="505" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1afffaa6f2c436edb7c46e7a16ed2de825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromPolymorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromPolymorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="530" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="530" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a68565741c989968637db5a9e10e55020" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::gmock_matchers_test::IsPositiveIntValue</definition>
        <argsstring>(const IntValue &amp;foo)</argsstring>
        <name>IsPositiveIntValue</name>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__matchers__test_1_1_int_value" kindref="compound">IntValue</ref> &amp;</type>
          <declname>foo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="549" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="549" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa7a28536a6c59d56bbbbdb4fa5ba9e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromCompatibleType)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromCompatibleType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="555" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="555" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9d25aac0defd9296bf207cacd342aff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromConstReferenceToNonReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromConstReferenceToNonReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="571" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="571" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4bb3955a1e0b603c0156c98a2dc49eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromReferenceToNonReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromReferenceToNonReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="579" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="579" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6fd48b8275f96d9d4ee840f0ec590fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromNonReferenceToConstReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromNonReferenceToConstReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="587" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="587" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab8d3174b8f1ab799906938ed9984643b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromNonReferenceToReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromNonReferenceToReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="595" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="595" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8f845dd5b1bcdc660926d67dce32b5d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromSameType)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromSameType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="605" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="605" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af0b7ba716a9150ff6db37abda4b44fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::gmock_matchers_test::operator==</definition>
        <argsstring>(const ConvertibleFromAny &amp;a, const ConvertibleFromAny &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="622" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="622" bodyend="624"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2a2abd1e49c201ae26ed96211d4225eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ostream &amp;</type>
        <definition>ostream&amp; testing::gmock_matchers_test::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;os, const ConvertibleFromAny &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="626" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="626" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a42e4d7d26704516436281897cb41bb1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, ConversionConstructorIsUsed)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>ConversionConstructorIsUsed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="630" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="630" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae51787fccc0f0a27e3725039c6cd48dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, FromConvertibleFromAny)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>FromConvertibleFromAny</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="636" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="636" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a33c068c32bf5118e5be92771b146db77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::gmock_matchers_test::operator==</definition>
        <argsstring>(const IntReferenceWrapper &amp;a, const IntReferenceWrapper &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" kindref="compound">IntReferenceWrapper</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" kindref="compound">IntReferenceWrapper</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="648" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="648" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae99c08c8a815964b61f98a4785cf79b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherCastTest, ValueIsNotCopied)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherCastTest</type>
        </param>
        <param>
          <type>ValueIsNotCopied</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="652" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="652" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a29c04361c022a71711dbf9d3cf2a5050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromPolymorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromPolymorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="676" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="676" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a70bbe53742db988a828d9e8201e34770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromLosslesslyConvertibleArithmeticType)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromLosslesslyConvertibleArithmeticType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="685" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="685" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a937469149aee65efde526091af1e4f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromBaseClass)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromBaseClass</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="698" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="698" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a14ba7c67551222321056e4da6708010f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromConstReferenceToReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromConstReferenceToReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="712" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="712" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad53741423311d4f76d9d980f59ec8d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromNonReferenceToConstReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromNonReferenceToConstReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="722" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="722" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a362ce5b2b395dfd6363e4d80b49951f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromNonReferenceToReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromNonReferenceToReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="730" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="730" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9fc149b429176a45e45267132ae901bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromSameType)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromSameType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="740" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="740" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa608f074e26876d41333cd265c4ca008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, ConversionConstructorIsUsed)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>ConversionConstructorIsUsed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="747" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="747" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a0490279eed67f8fa45f83c4951e1d8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, FromConvertibleFromAny)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>FromConvertibleFromAny</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="753" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="753" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac82f8355af7a1e6ba3b67ba8423a1d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SafeMatcherCastTest, ValueIsNotCopied)</argsstring>
        <name>TEST</name>
        <param>
          <type>SafeMatcherCastTest</type>
        </param>
        <param>
          <type>ValueIsNotCopied</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="760" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="760" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7672c72f955b937542acd87d18dd7ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExpectThat, TakesLiterals)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectThat</type>
        </param>
        <param>
          <type>TakesLiterals</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="767" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="767" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aafaf5273bd3d8ba273a5dd243d3a52ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExpectThat, TakesFunctions)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExpectThat</type>
        </param>
        <param>
          <type>TakesFunctions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="773" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="773" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af15da53cdc65283b8ca688a03801fd12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ATest, MatchesAnyValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>ATest</type>
        </param>
        <param>
          <type>MatchesAnyValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="783" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="783" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2b2dfb85d18883b07f7d13d21abee2fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ATest, WorksForDerivedClass)</argsstring>
        <name>TEST</name>
        <param>
          <type>ATest</type>
        </param>
        <param>
          <type>WorksForDerivedClass</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="797" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="797" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a24432bc861bee430fb8ac1a4e5463ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ATest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>ATest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="807" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="807" bodyend="809"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a15bf6771986d1e9f675f29861f7551c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AnTest, MatchesAnyValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnTest</type>
        </param>
        <param>
          <type>MatchesAnyValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="812" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="812" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac3b18688ca5b5cf2d6137ce3e7397691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AnTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="827" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="827" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3fc77fa5ca709ef70963026fd7114552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnderscoreTest, MatchesAnyValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnderscoreTest</type>
        </param>
        <param>
          <type>MatchesAnyValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="833" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="833" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a25ae831c15c9ca918ed847ba147ac572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnderscoreTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnderscoreTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="848" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="848" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2ac5d4c2fae3e7f2e6c6be657a61f86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EqTest, MatchesEqualValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>EqTest</type>
        </param>
        <param>
          <type>MatchesEqualValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="854" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="854" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4b9f261a3b98ba0e0bca21b69d593241" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::gmock_matchers_test::operator==</definition>
        <argsstring>(const Unprintable &amp;, const Unprintable &amp;)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" kindref="compound">Unprintable</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" kindref="compound">Unprintable</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="874" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="874" bodyend="877"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1c86e845cb44f34eeac4863041c871c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EqTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>EqTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="879" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="879" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac3ea755ba2a8bb480cee70aa37ccafc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EqTest, IsPolymorphic)</argsstring>
        <name>TEST</name>
        <param>
          <type>EqTest</type>
        </param>
        <param>
          <type>IsPolymorphic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="886" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="886" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3e8d6cc259c1410a85572bc773bb21b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TypedEqTest, ChecksEqualityForGivenType)</argsstring>
        <name>TEST</name>
        <param>
          <type>TypedEqTest</type>
        </param>
        <param>
          <type>ChecksEqualityForGivenType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="897" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="897" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9baf261536023ac58ed65cdafcaf1602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TypedEqTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>TypedEqTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="908" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="908" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae0255a5de2ef537512379c3f8ff9e34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TypedEqTest, HasSpecifiedType)</argsstring>
        <name>TEST</name>
        <param>
          <type>TypedEqTest</type>
        </param>
        <param>
          <type>HasSpecifiedType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="926" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="926" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7d73fdbbee36ccf241ec6e328175655b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(GeTest, ImplementsGreaterThanOrEqual)</argsstring>
        <name>TEST</name>
        <param>
          <type>GeTest</type>
        </param>
        <param>
          <type>ImplementsGreaterThanOrEqual</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="933" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="933" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2718c8d5456b62ab7b060b2723939a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(GeTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>GeTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="941" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="941" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a87a9ac189a12e0b85964f03b3b9998b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(GtTest, ImplementsGreaterThan)</argsstring>
        <name>TEST</name>
        <param>
          <type>GtTest</type>
        </param>
        <param>
          <type>ImplementsGreaterThan</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="947" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="947" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2981bbdbf9cbd8864a6dde4ff4b06050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(GtTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>GtTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="955" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="955" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af0cd1cfc3ff1272bfe06f31c5eb3ab8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(LeTest, ImplementsLessThanOrEqual)</argsstring>
        <name>TEST</name>
        <param>
          <type>LeTest</type>
        </param>
        <param>
          <type>ImplementsLessThanOrEqual</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="961" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="961" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a463bc4f6cdca489c05ad691e1254e2f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(LeTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>LeTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="969" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="969" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9f332401730e637d5c3923924dc339e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(LtTest, ImplementsLessThan)</argsstring>
        <name>TEST</name>
        <param>
          <type>LtTest</type>
        </param>
        <param>
          <type>ImplementsLessThan</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="975" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="975" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae29bb32c74970fc22e7ac5d86e7e6c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(LtTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>LtTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="983" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="983" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7319f919e57cf349f733bbdb56177daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NeTest, ImplementsNotEqual)</argsstring>
        <name>TEST</name>
        <param>
          <type>NeTest</type>
        </param>
        <param>
          <type>ImplementsNotEqual</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="989" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="989" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8a743510a5256803d75c2d7735ec515a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NeTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>NeTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="997" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="997" bodyend="1000"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae1c2971c161e051bf52b86b62c51bb95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsNullTest, MatchesNullPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsNullTest</type>
        </param>
        <param>
          <type>MatchesNullPointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1003" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1003" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a0b1655e1640b7da6e1e7cc35074d9274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsNullTest, LinkedPtr)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsNullTest</type>
        </param>
        <param>
          <type>LinkedPtr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1031" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1031" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1afaaf0776096c0ad62de8236ab1b774d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsNullTest, ReferenceToConstLinkedPtr)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsNullTest</type>
        </param>
        <param>
          <type>ReferenceToConstLinkedPtr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1040" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1040" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5ba91e0b79fcc0b17b1c1e373e741c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsNullTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsNullTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1059" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1059" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a694ea33511eab7822b88d8e74b388534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NotNullTest, MatchesNonNullPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type>NotNullTest</type>
        </param>
        <param>
          <type>MatchesNonNullPointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1066" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1066" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aec956599ef91df968fec972247c7a28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NotNullTest, LinkedPtr)</argsstring>
        <name>TEST</name>
        <param>
          <type>NotNullTest</type>
        </param>
        <param>
          <type>LinkedPtr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1079" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1079" bodyend="1086"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9e9560feb52f60475f653c15cc7466aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NotNullTest, ReferenceToConstLinkedPtr)</argsstring>
        <name>TEST</name>
        <param>
          <type>NotNullTest</type>
        </param>
        <param>
          <type>ReferenceToConstLinkedPtr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1088" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1088" bodyend="1095"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a68da7653e6a480c60a3a03fe8afb20fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NotNullTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>NotNullTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1107" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1107" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a199983108927dadee9bd2e03ddd6057d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(RefTest, MatchesSameVariable)</argsstring>
        <name>TEST</name>
        <param>
          <type>RefTest</type>
        </param>
        <param>
          <type>MatchesSameVariable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1114" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1114" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad8fc5a82cbb4b5b8147798be06d7059b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(RefTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>RefTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1123" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1123" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af1e64d057f2c46cc17f1c96a075cde6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(RefTest, CanBeUsedAsMatcherForConstReference)</argsstring>
        <name>TEST</name>
        <param>
          <type>RefTest</type>
        </param>
        <param>
          <type>CanBeUsedAsMatcherForConstReference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1133" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1133" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a03b45cf0f65f33208ac378b8603ff67a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(RefTest, IsCovariant)</argsstring>
        <name>TEST</name>
        <param>
          <type>RefTest</type>
        </param>
        <param>
          <type>IsCovariant</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1145" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1145" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab73595bcf8dd511b519b640248136ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(RefTest, ExplainsResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>RefTest</type>
        </param>
        <param>
          <type>ExplainsResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1159" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1159" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5956b46686ad29d2d29b313bce9eba8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrEqTest, MatchesEqualString)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrEqTest</type>
        </param>
        <param>
          <type>MatchesEqualString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1171" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1171" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1cb9d74bdf937816807e91b842b22c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrEqTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrEqTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1182" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1182" bodyend="1194"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3c0a0ca54e3d34c55bd30c2b5572d902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrNeTest, MatchesUnequalString)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrNeTest</type>
        </param>
        <param>
          <type>MatchesUnequalString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1196" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1196" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4daef0c28c6b07cb3d6a6306c05599b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrNeTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrNeTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1207" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1207" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae0c0b82b3895923747dc70cb9339a8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrCaseEqTest, MatchesEqualStringIgnoringCase)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrCaseEqTest</type>
        </param>
        <param>
          <type>MatchesEqualStringIgnoringCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1212" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1212" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa159c9a52c6dc18cb7f214fbb5bddece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrCaseEqTest, MatchesEqualStringWith0IgnoringCase)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrCaseEqTest</type>
        </param>
        <param>
          <type>MatchesEqualStringWith0IgnoringCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1224" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1224" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab4fb6542ea3a7789850668a9266a80ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrCaseEqTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrCaseEqTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1249" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1249" bodyend="1252"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9a627f8538cfff62fbaee86ac465f6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrCaseNeTest, MatchesUnequalStringIgnoringCase)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrCaseNeTest</type>
        </param>
        <param>
          <type>MatchesUnequalStringIgnoringCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1254" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1254" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae953891c7961b6ffd51dc712be8d24de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StrCaseNeTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>StrCaseNeTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1266" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1266" bodyend="1269"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2a1043a0b8bfb4bc0b5fb539317132a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(HasSubstrTest, WorksForStringClasses)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasSubstrTest</type>
        </param>
        <param>
          <type>WorksForStringClasses</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1272" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1272" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a147dde340ba8f77308cd116d3bb831d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(HasSubstrTest, WorksForCStrings)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasSubstrTest</type>
        </param>
        <param>
          <type>WorksForCStrings</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1283" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1283" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae47e8ad8f8a4a33ac08b596eb839380e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(HasSubstrTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>HasSubstrTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1296" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1296" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acdbdca45a537261fd168cdb8df9348d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(KeyTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>KeyTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1301" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1301" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a38169c972e14fef59a41e532fb5b431e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(KeyTest, ExplainsResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>KeyTest</type>
        </param>
        <param>
          <type>ExplainsResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1307" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1307" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a39f4f76617c414ab715b701eb82eeee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(KeyTest, MatchesCorrectly)</argsstring>
        <name>TEST</name>
        <param>
          <type>KeyTest</type>
        </param>
        <param>
          <type>MatchesCorrectly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1315" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1315" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6b05d274d57a4aa120bb497c34ce3a68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(KeyTest, SafelyCastsInnerMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>KeyTest</type>
        </param>
        <param>
          <type>SafelyCastsInnerMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1323" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1323" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af9f4e295413489a7e3acafc59584c3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(KeyTest, InsideContainsUsingMap)</argsstring>
        <name>TEST</name>
        <param>
          <type>KeyTest</type>
        </param>
        <param>
          <type>InsideContainsUsingMap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1331" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1331" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af90ca00690094484af6c34eadf4dd7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(KeyTest, InsideContainsUsingMultimap)</argsstring>
        <name>TEST</name>
        <param>
          <type>KeyTest</type>
        </param>
        <param>
          <type>InsideContainsUsingMultimap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1340" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1340" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5689064ea3fe50424dd1ea036d107aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PairTest, Typing)</argsstring>
        <name>TEST</name>
        <param>
          <type>PairTest</type>
        </param>
        <param>
          <type>Typing</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1356" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1356" bodyend="1364"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a672ba279448f634fae495ed7dc9260bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PairTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>PairTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1366" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1366" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4ee8f3967e3658cd7bd340558922f131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PairTest, CanExplainMatchResultTo)</argsstring>
        <name>TEST</name>
        <param>
          <type>PairTest</type>
        </param>
        <param>
          <type>CanExplainMatchResultTo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1381" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1381" bodyend="1417"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acdb02e9ac603c91b35602751f6a81239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PairTest, MatchesCorrectly)</argsstring>
        <name>TEST</name>
        <param>
          <type>PairTest</type>
        </param>
        <param>
          <type>MatchesCorrectly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1419" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1419" bodyend="1437"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad2110445fe8f2f8ca947540f2a400228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PairTest, SafelyCastsInnerMatchers)</argsstring>
        <name>TEST</name>
        <param>
          <type>PairTest</type>
        </param>
        <param>
          <type>SafelyCastsInnerMatchers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1439" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1439" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9785412a9e786b1f81387204df577c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PairTest, InsideContainsUsingMap)</argsstring>
        <name>TEST</name>
        <param>
          <type>PairTest</type>
        </param>
        <param>
          <type>InsideContainsUsingMap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1449" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1449" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac8a66c592ff57cce28b6f1d5211fd370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StartsWithTest, MatchesStringWithGivenPrefix)</argsstring>
        <name>TEST</name>
        <param>
          <type>StartsWithTest</type>
        </param>
        <param>
          <type>MatchesStringWithGivenPrefix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1462" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1462" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a492143bbe0627c563c5d0c65bf3f4d5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StartsWithTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>StartsWithTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1476" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1476" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac3d41540d2ae7956d33c9eae1be67d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EndsWithTest, MatchesStringWithGivenSuffix)</argsstring>
        <name>TEST</name>
        <param>
          <type>EndsWithTest</type>
        </param>
        <param>
          <type>MatchesStringWithGivenSuffix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1483" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1483" bodyend="1495"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a80da065ed9f5fb87add88ae2bc14056d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EndsWithTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>EndsWithTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1497" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1497" bodyend="1500"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5983e981b59498c6427ddb183c414bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchesRegexTest, MatchesStringMatchingGivenRegex)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchesRegexTest</type>
        </param>
        <param>
          <type>MatchesStringMatchingGivenRegex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1504" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1504" bodyend="1514"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acb4e75ec699fe1bc178e7ec32fb479c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchesRegexTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchesRegexTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1516" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1516" bodyend="1522"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a0a23f3ff8f97ccf74cd64673edc6694f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainsRegexTest, MatchesStringContainingGivenRegex)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainsRegexTest</type>
        </param>
        <param>
          <type>MatchesStringContainingGivenRegex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1526" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1526" bodyend="1536"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac3d469a146dec0c6ede2b46ff992c8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainsRegexTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainsRegexTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1538" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1538" bodyend="1544"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a768adf8450910e4c3ac0cb2caec8a4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Eq2Test, MatchesEqualArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>Eq2Test</type>
        </param>
        <param>
          <type>MatchesEqualArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1934" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1934" bodyend="1938"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a45da3962b4ae052dd47e1ae1bfd8b762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Eq2Test, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>Eq2Test</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1941" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1941" bodyend="1944"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a100bae52c11f2e44a141652002d3bee2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Ge2Test, MatchesGreaterThanOrEqualArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>Ge2Test</type>
        </param>
        <param>
          <type>MatchesGreaterThanOrEqualArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1948" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1948" bodyend="1953"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aaee5baf487e6234d1d8b6779b70a15c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Ge2Test, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>Ge2Test</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1956" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1956" bodyend="1959"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4ef0cb0e88b7801075798649189d7b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Gt2Test, MatchesGreaterThanArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>Gt2Test</type>
        </param>
        <param>
          <type>MatchesGreaterThanArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1963" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1963" bodyend="1968"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae7351eb01d03897324b2fe03045f2c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Gt2Test, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>Gt2Test</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1971" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1971" bodyend="1974"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1add304ba60989990fc78a616c9592a948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Le2Test, MatchesLessThanOrEqualArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>Le2Test</type>
        </param>
        <param>
          <type>MatchesLessThanOrEqualArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1978" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1978" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a75d0bbfa66d404aa458f0739297c9edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Le2Test, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>Le2Test</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1986" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1986" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac7ecdd71d0cc49438f7ad1863fdfab05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Lt2Test, MatchesLessThanArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>Lt2Test</type>
        </param>
        <param>
          <type>MatchesLessThanArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="1993" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="1993" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9f557c4688b2907704650cc18cfd9dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Lt2Test, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>Lt2Test</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2001" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2001" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a69692057d2825f6fc8a37265667867c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Ne2Test, MatchesUnequalArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>Ne2Test</type>
        </param>
        <param>
          <type>MatchesUnequalArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2008" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2008" bodyend="2013"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acedf2eda13385067ee70bdb7d6073427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(Ne2Test, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>Ne2Test</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2016" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2016" bodyend="2019"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab41b57eeaea5568064b6ed3725316c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NotTest, NegatesMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>NotTest</type>
        </param>
        <param>
          <type>NegatesMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2022" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2022" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a831db2bf90c3950953cdceaefebddd40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NotTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>NotTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2030" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2030" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a46849e0c019e331f830ed91137fa417a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(NotTest, NotMatcherSafelyCastsMonomorphicMatchers)</argsstring>
        <name>TEST</name>
        <param>
          <type>NotTest</type>
        </param>
        <param>
          <type>NotMatcherSafelyCastsMonomorphicMatchers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2036" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2036" bodyend="2043"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a51d8731c3824a6acdaa594645dd46779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::gmock_matchers_test::AllOfMatches</definition>
        <argsstring>(int num, const Matcher&lt; int &gt; &amp;m)</argsstring>
        <name>AllOfMatches</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; int &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2046" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2046" bodyend="2053"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7714d041eb2dd2e233db7f175fedef5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllOfTest, MatchesWhenAllMatch)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllOfTest</type>
        </param>
        <param>
          <type>MatchesWhenAllMatch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2057" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2057" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a31056975d89eea2786997cf18b086bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllOfTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllOfTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2124" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2124" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a86c15b3bc163321c7a56aeb0b1709b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllOfTest, CanDescribeNegation)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllOfTest</type>
        </param>
        <param>
          <type>CanDescribeNegation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2154" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2154" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4196a4000390e2378954d55b4f6d2893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllOfTest, AllOfMatcherSafelyCastsMonomorphicMatchers)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllOfTest</type>
        </param>
        <param>
          <type>AllOfMatcherSafelyCastsMonomorphicMatchers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2186" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2186" bodyend="2198"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2b9f4a791dd4f1fb9f8a1400883a5db4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllOfTest, ExplainsResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllOfTest</type>
        </param>
        <param>
          <type>ExplainsResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2200" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2200" bodyend="2241"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa4e9deb0a98413e62516451e7c060c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::gmock_matchers_test::AnyOfMatches</definition>
        <argsstring>(int num, const Matcher&lt; int &gt; &amp;m)</argsstring>
        <name>AnyOfMatches</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; int &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2244" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2244" bodyend="2251"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4949d40a1ac77182274189c21848af00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AnyOfTest, MatchesWhenAnyMatches)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnyOfTest</type>
        </param>
        <param>
          <type>MatchesWhenAnyMatches</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2255" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2255" bodyend="2294"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a00bd490bf974b3f3485a1b0fde9fa490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AnyOfTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnyOfTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2315" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2315" bodyend="2340"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acc5e849e0765f00a48581e9480f3c8e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AnyOfTest, CanDescribeNegation)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnyOfTest</type>
        </param>
        <param>
          <type>CanDescribeNegation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2343" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2343" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8fb1598253450afeb0440682cd23999e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AnyOfTest, AnyOfMatcherSafelyCastsMonomorphicMatchers)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnyOfTest</type>
        </param>
        <param>
          <type>AnyOfMatcherSafelyCastsMonomorphicMatchers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2371" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2371" bodyend="2383"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad4c09014fce6029575e2c337cde85bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AnyOfTest, ExplainsResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>AnyOfTest</type>
        </param>
        <param>
          <type>ExplainsResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2385" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2385" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a70e728cf67d0224c3ebb9eb8959cc39d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int testing::gmock_matchers_test::IsPositive</definition>
        <argsstring>(double x)</argsstring>
        <name>IsPositive</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2435" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2435" bodyend="2437"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1abdce9daf2e3d3721d68f76680129f03b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::gmock_matchers_test::ReferencesFooAndIsZero</definition>
        <argsstring>(const int &amp;n)</argsstring>
        <name>ReferencesFooAndIsZero</name>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2456" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2456" bodyend="2458"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab7761562a8ffea67a485f3f649f6430a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TrulyTest, MatchesWhatSatisfiesThePredicate)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrulyTest</type>
        </param>
        <param>
          <type>MatchesWhatSatisfiesThePredicate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2462" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2462" bodyend="2466"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab3e259f3ae45e199474d7c6d554852f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TrulyTest, CanBeUsedWithFunctor)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrulyTest</type>
        </param>
        <param>
          <type>CanBeUsedWithFunctor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2469" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2469" bodyend="2473"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a248045bc57c8bad87b7d185b5c292f60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" kindref="compound">ConvertibleToBool</ref></type>
        <definition>ConvertibleToBool testing::gmock_matchers_test::IsNotZero</definition>
        <argsstring>(int number)</argsstring>
        <name>IsNotZero</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2485" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2485" bodyend="2487"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a24529fd7834d272009af74106422fe54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TrulyTest, PredicateCanReturnAClassConvertibleToBool)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrulyTest</type>
        </param>
        <param>
          <type>PredicateCanReturnAClassConvertibleToBool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2492" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2492" bodyend="2496"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af474a9719e614d521c71bdf7c39f6a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TrulyTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrulyTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2499" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2499" bodyend="2503"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae702d436c52bd37fe3e8d405d7e6a691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(TrulyTest, WorksForByRefArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>TrulyTest</type>
        </param>
        <param>
          <type>WorksForByRefArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2507" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2507" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6617484cbb644af9882fc5d853112aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchesTest, IsSatisfiedByWhatMatchesTheMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchesTest</type>
        </param>
        <param>
          <type>IsSatisfiedByWhatMatchesTheMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2516" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2516" bodyend="2519"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6cfa391c9035262ccdc0d8f59e037b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchesTest, WorksOnByRefArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchesTest</type>
        </param>
        <param>
          <type>WorksOnByRefArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2523" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2523" bodyend="2527"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9fd734ae5afb64a7285503bc0870c255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatchesTest, WorksWithMatcherOnNonRefType)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatchesTest</type>
        </param>
        <param>
          <type>WorksWithMatcherOnNonRefType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2531" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2531" bodyend="2535"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a150118d4e990ba9fb9978329e742c931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ValueTest, WorksWithPolymorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValueTest</type>
        </param>
        <param>
          <type>WorksWithPolymorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2540" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2540" bodyend="2543"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a53403682e9ffc12152b0b1c7f55dfa12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ValueTest, WorksWithMonomorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>ValueTest</type>
        </param>
        <param>
          <type>WorksWithMonomorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2545" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2545" bodyend="2554"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a985e2bc1546b67de764d759de111e8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, WorksWithPolymorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>WorksWithPolymorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2556" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2556" bodyend="2564"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aeff2711a03b27a66c1c98ed97ff49b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, WorksWithMonomorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>WorksWithMonomorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2566" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2566" bodyend="2576"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab4f04d3b75ca92e4f5fd711b9f2a514a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::MATCHER_P</definition>
        <argsstring>(Really, inner_matcher, &quot;&quot;)</argsstring>
        <name>MATCHER_P</name>
        <param>
          <type>Really</type>
        </param>
        <param>
          <type>inner_matcher</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2578" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2578" bodyend="2580"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae57edef8890da6b929dd0d21c2f7c071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, WorksInsideMATCHER)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>WorksInsideMATCHER</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2582" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2582" bodyend="2584"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aeea300647af4c7611f4e491cabcbf950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllArgsTest, WorksForTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllArgsTest</type>
        </param>
        <param>
          <type>WorksForTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2586" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2586" bodyend="2589"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aacc3ed6d6a0f9ff552019d0d58817b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllArgsTest, WorksForNonTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllArgsTest</type>
        </param>
        <param>
          <type>WorksForNonTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2591" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2591" bodyend="2594"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad62534535946b2ef45457fb653f73a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(AllArgsTest, WorksInWithClause)</argsstring>
        <name>TEST</name>
        <param>
          <type>AllArgsTest</type>
        </param>
        <param>
          <type>WorksInWithClause</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2606" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2606" bodyend="2618"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad37559f9112c04334a62ce9617cf1349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherAssertionTest, WorksWhenMatcherIsSatisfied)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherAssertionTest</type>
        </param>
        <param>
          <type>WorksWhenMatcherIsSatisfied</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2622" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2622" bodyend="2627"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2f3755be7052d6e7769e3323053399d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherAssertionTest, WorksWhenMatcherIsNotSatisfied)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherAssertionTest</type>
        </param>
        <param>
          <type>WorksWhenMatcherIsNotSatisfied</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2631" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2631" bodyend="2652"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1afcf1287c7fd759157367026613ddd727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherAssertionTest, WorksForByRefArguments)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherAssertionTest</type>
        </param>
        <param>
          <type>WorksForByRefArguments</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2656" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2656" bodyend="2668"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a0fe4bde05f667c4877e3b4a4a7bde002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherAssertionTest, WorksForMonomorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherAssertionTest</type>
        </param>
        <param>
          <type>WorksForMonomorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2684" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2684" bodyend="2700"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a69257e935b4334c835b3ad26acea9104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatTest, FloatEqApproximatelyMatchesFloats)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatTest</ref></type>
        </param>
        <param>
          <type>FloatEqApproximatelyMatchesFloats</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2902" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2902" bodyend="2904"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1abb691880cd22f6f444c978547b13f792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatTest, NanSensitiveFloatEqApproximatelyMatchesFloats)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveFloatEqApproximatelyMatchesFloats</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2906" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2906" bodyend="2908"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a111f0c8a5ec17b47e8eb6226e1c2cb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatTest, FloatEqCannotMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatTest</ref></type>
        </param>
        <param>
          <type>FloatEqCannotMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2910" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2910" bodyend="2916"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4e9d89902e088a10915b4f9463ac0f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatTest, NanSensitiveFloatEqCanMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveFloatEqCanMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2918" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2918" bodyend="2924"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a264de01a5019e5c358116845bf5edd14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatTest, FloatEqCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatTest</ref></type>
        </param>
        <param>
          <type>FloatEqCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2926" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2926" bodyend="2938"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a95a2bbc273ff70fc364c5c9c4697834c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatTest, NanSensitiveFloatEqCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveFloatEqCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2940" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2940" bodyend="2952"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6897409da5003f20f891d8a5ecabdc99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatNearTest, FloatNearMatches)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatNearTest</ref></type>
        </param>
        <param>
          <type>FloatNearMatches</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2958" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2958" bodyend="2960"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad396e996ed685fd80cbd78740b8d01a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatNearTest, NanSensitiveFloatNearApproximatelyMatchesFloats)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatNearTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveFloatNearApproximatelyMatchesFloats</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2962" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2962" bodyend="2964"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad56232046efe7b4d5169a15fd15a2001" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatNearTest, FloatNearCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatNearTest</ref></type>
        </param>
        <param>
          <type>FloatNearCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2966" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2966" bodyend="2980"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4e90d53ea578d6b767559d8615a4c0c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatNearTest, NanSensitiveFloatNearCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatNearTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveFloatNearCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2982" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2982" bodyend="2996"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2cd2ceebefa14a5d564a3bca60ed6572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatNearTest, FloatNearCannotMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatNearTest</ref></type>
        </param>
        <param>
          <type>FloatNearCannotMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="2998" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="2998" bodyend="3004"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae7521865828fba53b45cc2819bec1273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(FloatNearTest, NanSensitiveFloatNearCanMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatNearTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveFloatNearCanMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3006" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3006" bodyend="3012"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1b33dc485faca8c69184f3feb0476290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleTest, DoubleEqApproximatelyMatchesDoubles)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">DoubleTest</ref></type>
        </param>
        <param>
          <type>DoubleEqApproximatelyMatchesDoubles</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3017" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3017" bodyend="3019"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab100ee4a4b0340e31212fb43c9e28255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleTest, NanSensitiveDoubleEqApproximatelyMatchesDoubles)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">DoubleTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveDoubleEqApproximatelyMatchesDoubles</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3021" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3021" bodyend="3023"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4c34f3f339de72d3f4f96a08a5125b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleTest, DoubleEqCannotMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">DoubleTest</ref></type>
        </param>
        <param>
          <type>DoubleEqCannotMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3025" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3025" bodyend="3031"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab42c199ae0008ce7550f584742caec28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleTest, NanSensitiveDoubleEqCanMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">DoubleTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveDoubleEqCanMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3033" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3033" bodyend="3039"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5975fb5a50e5364fe21422093680a559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleTest, DoubleEqCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">DoubleTest</ref></type>
        </param>
        <param>
          <type>DoubleEqCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3041" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3041" bodyend="3053"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2d101d1823617f9b1346ee64cdce5216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleTest, NanSensitiveDoubleEqCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">DoubleTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveDoubleEqCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3055" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3055" bodyend="3067"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab2949593472038919b8f3e1b2da204bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleNearTest, DoubleNearMatches)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref></type>
        </param>
        <param>
          <type>DoubleNearMatches</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3073" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3073" bodyend="3075"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1add8765ad2bb98f4b064ee77b4c21a612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleNearTest, NanSensitiveDoubleNearApproximatelyMatchesDoubles)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveDoubleNearApproximatelyMatchesDoubles</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3077" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3077" bodyend="3079"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a31d14a68cacbaab3fafd26247cc11f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleNearTest, DoubleNearCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref></type>
        </param>
        <param>
          <type>DoubleNearCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3081" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3081" bodyend="3095"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4250d3de38128f3452a0a9e93173bdb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleNearTest, ExplainsResultWhenMatchFails)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref></type>
        </param>
        <param>
          <type>ExplainsResultWhenMatchFails</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3097" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3097" bodyend="3108"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad147bef4b26c0a060cb4d25fe517a3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleNearTest, NanSensitiveDoubleNearCanDescribeSelf)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveDoubleNearCanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3110" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3110" bodyend="3124"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9542b930e1de4d087a8655855edcc13c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleNearTest, DoubleNearCannotMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref></type>
        </param>
        <param>
          <type>DoubleNearCannotMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3126" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3126" bodyend="3132"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7c8d850697cb6cc030a4b05eeecffb72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(DoubleNearTest, NanSensitiveDoubleNearCanMatchNaN)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref></type>
        </param>
        <param>
          <type>NanSensitiveDoubleNearCanMatchNaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3134" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3134" bodyend="3140"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad6a13303d164fa9ca035a137840b78cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, RawPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>RawPointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3142" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3142" bodyend="3150"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a84a21ee7de697401049cb932f859ee33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, RawPointerToConst)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>RawPointerToConst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3152" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3152" bodyend="3160"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aebba40e49fe790490ba88984fdc7c7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, ReferenceToConstRawPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>ReferenceToConstRawPointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3162" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3162" bodyend="3170"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2d2296f6b23130be225b8df48746dfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, ReferenceToNonConstRawPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>ReferenceToNonConstRawPointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3172" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3172" bodyend="3182"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3d3f285bba1766bf9daf840a16e79924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::MATCHER_P</definition>
        <argsstring>(FieldIIs, inner_matcher, &quot;&quot;)</argsstring>
        <name>MATCHER_P</name>
        <param>
          <type>FieldIIs</type>
        </param>
        <param>
          <type>inner_matcher</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3184" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3184" bodyend="3186"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9d851a5bb597fa45b5d1cf3f295398e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, WorksWithConstPropagatingPointers)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>WorksWithConstPropagatingPointers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3304" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3304" bodyend="3314"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac778a9cebf9306a5efd27cc1186d8269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, NeverMatchesNull)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>NeverMatchesNull</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3316" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3316" bodyend="3319"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1afe22e8230dc7a34498e4b2f91dcdd7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, MatchesAgainstAValue)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>MatchesAgainstAValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3322" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3322" bodyend="3330"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac8b9baa938635d587f0b0df1073208e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3332" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3332" bodyend="3337"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a263ede06f6b32a625bb40e4f4c58c8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, CanExplainMatchResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>CanExplainMatchResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3339" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3339" bodyend="3348"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a00128de027ff6f49f82a7011dd346d43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointeeTest, AlwaysExplainsPointee)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointeeTest</type>
        </param>
        <param>
          <type>AlwaysExplainsPointee</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3350" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3350" bodyend="3354"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7c429b4fa8a7835724d9e28033e908b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::gmock_matchers_test::ValueIsPositive</definition>
        <argsstring>(const Uncopyable &amp;x)</argsstring>
        <name>ValueIsPositive</name>
        <param>
          <type>const <ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3371" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3371" bodyend="3371"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a55a8eba9beb33753baf7690d4cb9cd7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::MATCHER_P</definition>
        <argsstring>(UncopyableIs, inner_matcher, &quot;&quot;)</argsstring>
        <name>MATCHER_P</name>
        <param>
          <type>UncopyableIs</type>
        </param>
        <param>
          <type>inner_matcher</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3373" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3373" bodyend="3375"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a57213a63527bbd66c024dd1cfafe92d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, WorksForNonConstField)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>WorksForNonConstField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3401" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3401" bodyend="3408"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a065efc397a420d3dde87909b4a9a6285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, WorksForConstField)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>WorksForConstField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3411" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3411" bodyend="3418"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac26d681f09865b0727ca32343d974907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, WorksForUncopyableField)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>WorksForUncopyableField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3421" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3421" bodyend="3428"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a56b1c75b98aaa5c9d3a6dec2d3ba30dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, WorksForPointerField)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>WorksForPointerField</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3431" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3431" bodyend="3445"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1afcb890c159493e250477408a453b08d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, WorksForByRefArgument)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>WorksForByRefArgument</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3448" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3448" bodyend="3455"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae720452c3587433e26bea2ea7e91f8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, WorksForArgumentOfSubType)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>WorksForArgumentOfSubType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3459" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3459" bodyend="3468"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a27058ed7297742f08419bc5feb3ef687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, WorksForCompatibleMatcherType)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>WorksForCompatibleMatcherType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3472" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3472" bodyend="3481"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac43583cb3c4221aa6bd0132c2cb3fed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3484" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3484" bodyend="3489"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae1279ce8e2a3a6c6f0d4dbe436c9da02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldTest, CanExplainMatchResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldTest</type>
        </param>
        <param>
          <type>CanExplainMatchResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3492" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3492" bodyend="3503"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af5c12cdd12f8778074ad0714b83858ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldForPointerTest, WorksForPointerToConst)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldForPointerTest</type>
        </param>
        <param>
          <type>WorksForPointerToConst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3506" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3506" bodyend="3513"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac339a26bf6100a2eb2dd4bf908f8448c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldForPointerTest, WorksForPointerToNonConst)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldForPointerTest</type>
        </param>
        <param>
          <type>WorksForPointerToNonConst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3516" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3516" bodyend="3523"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a603253edc7a2310c8a1db225cb589a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldForPointerTest, WorksForReferenceToConstPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldForPointerTest</type>
        </param>
        <param>
          <type>WorksForReferenceToConstPointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3526" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3526" bodyend="3533"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a06a1c8d949707ab606627e9f6efe87b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldForPointerTest, DoesNotMatchNull)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldForPointerTest</type>
        </param>
        <param>
          <type>DoesNotMatchNull</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3536" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3536" bodyend="3539"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5447541a290e16a81aec6dd975983d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldForPointerTest, WorksForArgumentOfSubType)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldForPointerTest</type>
        </param>
        <param>
          <type>WorksForArgumentOfSubType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3543" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3543" bodyend="3552"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a056670af8fc7bd3dfd170435dbf08c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldForPointerTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldForPointerTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3555" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3555" bodyend="3560"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6a4ffd283f91f4e085aa582aedefe38e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FieldForPointerTest, CanExplainMatchResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>FieldForPointerTest</type>
        </param>
        <param>
          <type>CanExplainMatchResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3563" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3563" bodyend="3575"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9c42c3b244c7b4d63040e469d5b31e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, WorksForNonReferenceProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>WorksForNonReferenceProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3613" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3613" bodyend="3622"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7254899c6d45df648d5b4ef6eece3ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, WorksForReferenceToConstProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>WorksForReferenceToConstProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3626" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3626" bodyend="3635"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5b7b02e8fcef1aff9a4afc81d5fb5d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, WorksForReferenceToNonConstProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>WorksForReferenceToNonConstProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3639" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3639" bodyend="3648"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af703b24e2bee13cf7a042f699809a5ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, WorksForByValueArgument)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>WorksForByValueArgument</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3652" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3652" bodyend="3661"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a38a5ad623dda9ef0f48ebaf65485d18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, WorksForArgumentOfSubType)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>WorksForArgumentOfSubType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3665" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3665" bodyend="3676"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a17b7a59d1dbca0692ebaa71e6f46f1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, WorksForCompatibleMatcherType)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>WorksForCompatibleMatcherType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3680" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3680" bodyend="3689"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8c749e210723e33547e58fe8822fb85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3692" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3692" bodyend="3698"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aff810d2cdd79c55d483965a28bb5069a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyTest, CanExplainMatchResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyTest</type>
        </param>
        <param>
          <type>CanExplainMatchResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3701" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3701" bodyend="3712"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac9222439b8e0b1e080650d667044c140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyForPointerTest, WorksForPointerToConst)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyForPointerTest</type>
        </param>
        <param>
          <type>WorksForPointerToConst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3715" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3715" bodyend="3724"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acc639f3cbeacf4af712bf02ac451b160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyForPointerTest, WorksForPointerToNonConst)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyForPointerTest</type>
        </param>
        <param>
          <type>WorksForPointerToNonConst</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3727" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3727" bodyend="3736"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a028687dfb04ec008ea129f9cc95aac62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyForPointerTest, WorksForReferenceToConstPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyForPointerTest</type>
        </param>
        <param>
          <type>WorksForReferenceToConstPointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3740" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3740" bodyend="3749"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a78762b60c9d0c985916b698e6d4c55e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyForPointerTest, WorksForReferenceToNonConstProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyForPointerTest</type>
        </param>
        <param>
          <type>WorksForReferenceToNonConstProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3752" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3752" bodyend="3755"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4c2f4b483550e2e70b09eea3836b83e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyForPointerTest, WorksForArgumentOfSubType)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyForPointerTest</type>
        </param>
        <param>
          <type>WorksForArgumentOfSubType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3759" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3759" bodyend="3770"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a064fc5dd5ca0106e8ed0fbc483472186" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyForPointerTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyForPointerTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3773" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3773" bodyend="3779"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1a7e2a9641a06e492d58c75d900330d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PropertyForPointerTest, CanExplainMatchResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>PropertyForPointerTest</type>
        </param>
        <param>
          <type>CanExplainMatchResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3782" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3782" bodyend="3796"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2399c4fae49f898c02f57a42047d80f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string testing::gmock_matchers_test::IntToStringFunction</definition>
        <argsstring>(int input)</argsstring>
        <name>IntToStringFunction</name>
        <param>
          <type>int</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3802" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3802" bodyend="3802"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5aea17c7d3dd74cbc0cbf181b3a9e5f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForFunctionPointers)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForFunctionPointers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3804" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3804" bodyend="3809"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1b5240d2272b679d7e3035554c2c5688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, CanDescribeItself)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>CanDescribeItself</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3812" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3812" bodyend="3819"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6e957b9dcda1186c6274a8895d1514b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int testing::gmock_matchers_test::IntFunction</definition>
        <argsstring>(int input)</argsstring>
        <name>IntFunction</name>
        <param>
          <type>int</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3822" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3822" bodyend="3822"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab7fe283b2955ca8bb11b2984a08eef33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, CanExplainMatchResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>CanExplainMatchResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3824" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3824" bodyend="3832"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a86f01e29ee48050d401fceca21d1041e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForNonReferenceResults)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForNonReferenceResults</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3836" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3836" bodyend="3841"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a48350ba4c1ce65694ec07e9c1c49a452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double &amp;</type>
        <definition>double&amp; testing::gmock_matchers_test::DoubleFunction</definition>
        <argsstring>(double &amp;input)</argsstring>
        <name>DoubleFunction</name>
        <param>
          <type>double &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3845" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3845" bodyend="3845"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa6f7dd285163d5880cfd6685bec8cab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref> &amp;</type>
        <definition>Uncopyable&amp; testing::gmock_matchers_test::RefUncopyableFunction</definition>
        <argsstring>(Uncopyable &amp;obj)</argsstring>
        <name>RefUncopyableFunction</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3847" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3847" bodyend="3849"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a505e866c4066d27854cb6754c66a3eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForReferenceToNonConstResults)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForReferenceToNonConstResults</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3851" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3851" bodyend="3867"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5fdf1ecaf8e8e8ef5d57c311e675841d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const string &amp;</type>
        <definition>const string&amp; testing::gmock_matchers_test::StringFunction</definition>
        <argsstring>(const string &amp;input)</argsstring>
        <name>StringFunction</name>
        <param>
          <type>const string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3871" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3871" bodyend="3871"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a17b952cce22be6338fb1369f886d61c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForReferenceToConstResults)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForReferenceToConstResults</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3873" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3873" bodyend="3880"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1aceb307c843f0f5532053e390a7c654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForCompatibleMatcherTypes)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForCompatibleMatcherTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3884" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3884" bodyend="3890"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4c929e5b46a503a9bb48c8b88dcbbf2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfDeathTest, DiesOnNullFunctionPointers)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfDeathTest</type>
        </param>
        <param>
          <type>DiesOnNullFunctionPointers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3894" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3894" bodyend="3898"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1638ee6460100cbe21c65b6cdc06579a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForFunctionReferences)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForFunctionReferences</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3902" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3902" bodyend="3906"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a19b7a39915f7ad5a0b741caf7ae4e619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForFunctors)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForFunctors</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3916" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3916" bodyend="3921"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a976290e53e319b06c51a94f7e450d765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForPolymorphicFunctors)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForPolymorphicFunctors</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3932" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3932" bodyend="3942"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af3164fc302e0b727c1eb745bdeb959f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int *</type>
        <definition>const int* testing::gmock_matchers_test::ReferencingFunction</definition>
        <argsstring>(const int &amp;n)</argsstring>
        <name>ReferencingFunction</name>
        <param>
          <type>const int &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3944" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3944" bodyend="3944"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a00ee08657c9e9e0c306be7b84cd2848c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ResultOfTest, WorksForReferencingCallables)</argsstring>
        <name>TEST</name>
        <param>
          <type>ResultOfTest</type>
        </param>
        <param>
          <type>WorksForReferencingCallables</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3951" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3951" bodyend="3961"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac5b1fd3b6a8141c7e83ef6040ed4630f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;DivisibleByImpl&gt; testing::gmock_matchers_test::DivisibleBy</definition>
        <argsstring>(int n)</argsstring>
        <name>DivisibleBy</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3990" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3990" bodyend="3992"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa9a60a406d9f495de8c8552abf577dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, AllOf_False_False)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>AllOf_False_False</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="3996" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="3996" bodyend="3999"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a099aebb5417d5bd85e11aefe935ec345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, AllOf_False_True)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>AllOf_False_True</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4003" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4003" bodyend="4006"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5d386691eaed59994a1d2b65f94b23a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, AllOf_True_False)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>AllOf_True_False</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4010" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4010" bodyend="4013"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a16545b298640b253502d604f52ea95e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, AllOf_True_True)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>AllOf_True_True</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4017" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4017" bodyend="4020"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af1ba4010a24716a51a302f9a518023b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainMatchResultTest, AllOf_True_True_2)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainMatchResultTest</type>
        </param>
        <param>
          <type>AllOf_True_True_2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4022" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4022" bodyend="4025"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a102b10d9064f6e0037e3f3f0c3e76e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ExplainmatcherResultTest, MonomorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>ExplainmatcherResultTest</type>
        </param>
        <param>
          <type>MonomorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4027" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4027" bodyend="4030"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aab82f120c70dc7d8bc2fd74ac6897486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ByRefTest, AllowsNotCopyableConstValueInMatchers)</argsstring>
        <name>TEST</name>
        <param>
          <type>ByRefTest</type>
        </param>
        <param>
          <type>AllowsNotCopyableConstValueInMatchers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4055" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4055" bodyend="4062"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5ed7b822889a34f018c2ba8f21941fd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ByRefTest, AllowsNotCopyableValueInMatchers)</argsstring>
        <name>TEST</name>
        <param>
          <type>ByRefTest</type>
        </param>
        <param>
          <type>AllowsNotCopyableValueInMatchers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4064" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4064" bodyend="4071"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab63796f77c7572f6f1aef01cb140f99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsEmptyTest, ImplementsIsEmpty)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsEmptyTest</type>
        </param>
        <param>
          <type>ImplementsIsEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4073" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4073" bodyend="4080"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a22f0cacccee169b7390741b9815f4281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsEmptyTest, WorksWithString)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsEmptyTest</type>
        </param>
        <param>
          <type>WorksWithString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4082" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4082" bodyend="4089"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1adcf3743190f973f2773296d0772e8950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsEmptyTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsEmptyTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4091" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4091" bodyend="4095"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1c168c284000d05d63bf5e9df10d1b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsEmptyTest, ExplainsResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsEmptyTest</type>
        </param>
        <param>
          <type>ExplainsResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4097" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4097" bodyend="4103"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1abe619d5d1910e1f2e8b169622d1d8592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SizeIsTest, ImplementsSizeIs)</argsstring>
        <name>TEST</name>
        <param>
          <type>SizeIsTest</type>
        </param>
        <param>
          <type>ImplementsSizeIs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4105" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4105" bodyend="4115"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aea77169d6c56b88b5c99273d5a2bc0f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SizeIsTest, WorksWithMap)</argsstring>
        <name>TEST</name>
        <param>
          <type>SizeIsTest</type>
        </param>
        <param>
          <type>WorksWithMap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4117" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4117" bodyend="4127"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a53bcd375786f69d889a8e8891ff8e0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SizeIsTest, WorksWithReferences)</argsstring>
        <name>TEST</name>
        <param>
          <type>SizeIsTest</type>
        </param>
        <param>
          <type>WorksWithReferences</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4129" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4129" bodyend="4135"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1adc9720306de1626aa7e523637ca64dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SizeIsTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>SizeIsTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4137" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4137" bodyend="4141"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6c218845fd345302c490ef53f0d36995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(SizeIsTest, ExplainsResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>SizeIsTest</type>
        </param>
        <param>
          <type>ExplainsResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4143" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4143" bodyend="4161"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab84ac6cfde20f21ed69d5d7aa882ea1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, MultipleValuesMissing)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>MultipleValuesMissing</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4239" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4239" bodyend="4248"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acc28beb0f3d3fbd8923bad7eb08ce6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, MultipleValuesAdded)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>MultipleValuesAdded</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4252" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4252" bodyend="4261"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acb0d845f828c2d5a551e4db0611f2853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, MultipleValuesAddedAndRemoved)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>MultipleValuesAddedAndRemoved</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4264" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4264" bodyend="4274"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6bce9564bb713ffb690b776e35d2e6cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, MultiSetOfIntDuplicateDifference)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>MultiSetOfIntDuplicateDifference</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4278" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4278" bodyend="4288"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab7bcbeeeb23094cff6f2882304c05134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, WorksForMaps)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>WorksForMaps</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4292" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4292" bodyend="4308"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae5e5420340c8cf91d24af11feca669b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, WorksForNativeArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>WorksForNativeArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4310" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4310" bodyend="4317"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3cf0d2f2c08e34ca0b7e11ff27b4a7ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, WorksForTwoDimensionalNativeArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>WorksForTwoDimensionalNativeArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4319" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4319" bodyend="4331"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a94e4a2a02cde84ac51e37cda1813bc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, WorksForNativeArrayAsTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>WorksForNativeArrayAsTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4333" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4333" bodyend="4344"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af7a978384d567d133240fb1899ec1658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ContainerEqExtraTest, CopiesNativeArrayParameter)</argsstring>
        <name>TEST</name>
        <param>
          <type>ContainerEqExtraTest</type>
        </param>
        <param>
          <type>CopiesNativeArrayParameter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4346" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4346" bodyend="4362"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9d88fbc6e2d01b66a1c10b192b25a802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedByTest, WorksForEmptyContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedByTest</type>
        </param>
        <param>
          <type>WorksForEmptyContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4364" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4364" bodyend="4368"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3095e5533ec12a67377dec6b0769d9a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedByTest, WorksForNonEmptyContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedByTest</type>
        </param>
        <param>
          <type>WorksForNonEmptyContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4370" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4370" bodyend="4380"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a24d3caacabfef918b7a5b9dacc5e3a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedByTest, WorksForNonVectorContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedByTest</type>
        </param>
        <param>
          <type>WorksForNonVectorContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4382" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4382" bodyend="4391"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a33b65fc6db83270b5c29073dbbf69c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedByTest, WorksForNativeArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedByTest</type>
        </param>
        <param>
          <type>WorksForNativeArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4393" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4393" bodyend="4400"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1afc2d1e86837d8e3103748cb2e96b61c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedByTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedByTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4402" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4402" bodyend="4412"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ada0850ab21beccb47802aab36c06d163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedByTest, ExplainsMatchResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedByTest</type>
        </param>
        <param>
          <type>ExplainsMatchResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4414" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4414" bodyend="4420"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a76aaffd49c78fdee18f11fae5ea3f6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForEmptyContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForEmptyContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4425" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4425" bodyend="4429"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2bfbef7e777d319e3d96fc98340bb558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForNonEmptyContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForNonEmptyContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4431" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4431" bodyend="4439"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acc4a96f3aa369fda8f554f5ac4495f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForMapTypes)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForMapTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4441" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4441" bodyend="4450"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab5de36ad02781be67163ae24d08b5454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForMultiMapTypes)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForMultiMapTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4452" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4452" bodyend="4472"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a587c3799433426782ccdcfe5cb07f5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForPolymorphicMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForPolymorphicMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4474" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4474" bodyend="4480"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a0975bae51ce06a819dc1437134fd7f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForVectorConstRefMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForVectorConstRefMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4482" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4482" bodyend="4490"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5aa4eed927d4a1a8ea306d5e47dce94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(StreamlikeTest, Iteration)</argsstring>
        <name>TEST</name>
        <param>
          <type>StreamlikeTest</type>
        </param>
        <param>
          <type>Iteration</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4572" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4572" bodyend="4581"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1add74820690e798ae8a365d08b68ddf71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(BeginEndDistanceIsTest, WorksWithNonStdList)</argsstring>
        <name>TEST</name>
        <param>
          <type>BeginEndDistanceIsTest</type>
        </param>
        <param>
          <type>WorksWithNonStdList</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4597" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4597" bodyend="4601"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa4ef2a94a7d75aa6116e8537deaa5f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(BeginEndDistanceIsTest, CanDescribeSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>BeginEndDistanceIsTest</type>
        </param>
        <param>
          <type>CanDescribeSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4603" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4603" bodyend="4608"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a89445da783c74dfa09c9c09531646f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(BeginEndDistanceIsTest, ExplainsResult)</argsstring>
        <name>TEST</name>
        <param>
          <type>BeginEndDistanceIsTest</type>
        </param>
        <param>
          <type>ExplainsResult</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4610" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4610" bodyend="4638"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a8de8e3760418cfcd33913cd30f16d117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForStreamlike)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForStreamlike</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4640" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4640" bodyend="4647"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa6bfe7b6cc288d93f60b9f52e095b233" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(WhenSortedTest, WorksForVectorConstRefMatcherOnStreamlike)</argsstring>
        <name>TEST</name>
        <param>
          <type>WhenSortedTest</type>
        </param>
        <param>
          <type>WorksForVectorConstRefMatcherOnStreamlike</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4649" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4649" bodyend="4655"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1adb0f512a2369d69f056e42e1cc5f3fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ElemensAreStreamTest, WorksForStreamlike)</argsstring>
        <name>TEST</name>
        <param>
          <type>ElemensAreStreamTest</type>
        </param>
        <param>
          <type>WorksForStreamlike</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4660" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4660" bodyend="4665"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5cc317a80c3501cb7f53d07043b7270c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ElemensAreArrayStreamTest, WorksForStreamlike)</argsstring>
        <name>TEST</name>
        <param>
          <type>ElemensAreArrayStreamTest</type>
        </param>
        <param>
          <type>WorksForStreamlike</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4667" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4667" bodyend="4681"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab403dce87c2d198a4f709d7f781d03c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ElementsAreTest, WorksWithUncopyable)</argsstring>
        <name>TEST</name>
        <param>
          <type>ElementsAreTest</type>
        </param>
        <param>
          <type>WorksWithUncopyable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4683" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4683" bodyend="4688"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a290280b9e89a57833c9fc706d153b98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(ElementsAreTest, TakesStlContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>ElementsAreTest</type>
        </param>
        <param>
          <type>TakesStlContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4690" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4690" bodyend="4701"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1adb7e47654f1536fc049243f765292825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedElementsAreArrayTest, SucceedsWhenExpected)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedElementsAreArrayTest</type>
        </param>
        <param>
          <type>SucceedsWhenExpected</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4705" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4705" bodyend="4713"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3d7df4fa0dd3e8247f4c2d4b02d801f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedElementsAreArrayTest, VectorBool)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedElementsAreArrayTest</type>
        </param>
        <param>
          <type>VectorBool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4715" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4715" bodyend="4723"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1ff2a93a8f031a5b23dbc699a462043b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedElementsAreArrayTest, WorksForStreamlike)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedElementsAreArrayTest</type>
        </param>
        <param>
          <type>WorksForStreamlike</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4725" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4725" bodyend="4742"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa3a960ec78e2b1e860c305f4598f39ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedElementsAreArrayTest, TakesStlContainer)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedElementsAreArrayTest</type>
        </param>
        <param>
          <type>TakesStlContainer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4744" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4744" bodyend="4755"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ab09132c3b991b8f104f3091370d2fe55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, WorksWithUncopyable)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>WorksWithUncopyable</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4798" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4798" bodyend="4804"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a177c3db59da001df2441deb1ddb083af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, SucceedsWhenExpected)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>SucceedsWhenExpected</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4806" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4806" bodyend="4814"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a62fd481b1160a667c785e6009ff87163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, FailsWhenAnElementMatchesNoMatcher)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>FailsWhenAnElementMatchesNoMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4816" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4816" bodyend="4827"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2affca2a152e4537c2f06518eaa2eac5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, WorksForStreamlike)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>WorksForStreamlike</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4829" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4829" bodyend="4838"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a074ca2babea203d1a54d69ff1fde5c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, Performance)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>Performance</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4846" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4846" bodyend="4857"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a4437de9d40efd87f73b738ef38c2d70f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, PerformanceHalfStrict)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>PerformanceHalfStrict</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4862" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4862" bodyend="4876"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5dd3b28b540c1ef01e623f840c48e7b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, FailMessageCountWrong)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>FailMessageCountWrong</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4878" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4878" bodyend="4885"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7dc8c467fe0d6f26c0ee643be56eb590" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, FailMessageCountWrongZero)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>FailMessageCountWrongZero</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4887" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4887" bodyend="4893"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a11b785087491ae58b074fa8dbbc88cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, FailMessageUnmatchedMatchers)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>FailMessageUnmatchedMatchers</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4895" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4895" bodyend="4906"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a6dfb50dcbb543de71fcc4d09844d36b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, FailMessageUnmatchedElements)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>FailMessageUnmatchedElements</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4908" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4908" bodyend="4919"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2395b7e71b7ad50af72caa61c10e6898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, FailMessageUnmatchedMatcherAndElement)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>FailMessageUnmatchedMatcherAndElement</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4921" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4921" bodyend="4937"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a5ec14aa1e31cb496e5366f583e29dfeb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>static string testing::gmock_matchers_test::EMString</definition>
        <argsstring>(int element, int matcher)</argsstring>
        <name>EMString</name>
        <param>
          <type>int</type>
          <declname>element</declname>
        </param>
        <param>
          <type>int</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4940" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4940" bodyend="4944"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ac70f9f9717f35352349b076654094f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, FailMessageImperfectMatchOnly)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>FailMessageImperfectMatchOnly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4946" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4946" bodyend="4974"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a937f4d835023cd6322eb7d32596f3f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, Describe)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>Describe</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4976" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4976" bodyend="4989"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3c4c92b68a08c5d541e46ed367e216ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(UnorderedElementsAreTest, DescribeNegation)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref></type>
        </param>
        <param>
          <type>DescribeNegation</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="4991" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="4991" bodyend="5004"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a09321a8d4a4c40ab1e369fbdf92b0414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Graph</type>
          </param>
        </templateparamlist>
        <type>ElementMatcherPairs</type>
        <definition>ElementMatcherPairs testing::gmock_matchers_test::FindBacktrackingMaxBPM</definition>
        <argsstring>(const Graph &amp;g)</argsstring>
        <name>FindBacktrackingMaxBPM</name>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5091" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5091" bodyend="5093"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a20589d957fcfe5399e249084dbc23e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_P</definition>
        <argsstring>(BipartiteTest, Exhaustive)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" kindref="compound">BipartiteTest</ref></type>
        </param>
        <param>
          <type>Exhaustive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5102" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5102" bodyend="5125"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a16ff96ce4f97da6215f889baccd57e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(AllGraphs, BipartiteTest, ::testing::Range(0, 5))</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>AllGraphs</type>
        </param>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" kindref="compound">BipartiteTest</ref></type>
        </param>
        <param>
          <type>::testing::Range(0, 5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a7d2395b1cb6a90bdc8d46ae06f99f6c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_F</definition>
        <argsstring>(BipartiteNonSquareTest, SimpleBacktracking)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" kindref="compound">BipartiteNonSquareTest</ref></type>
        </param>
        <param>
          <type>SimpleBacktracking</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5135" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5135" bodyend="5152"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3ac913ed55a7ac2636ae7bfce04296e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_P</definition>
        <argsstring>(BipartiteNonSquareTest, Exhaustive)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" kindref="compound">BipartiteNonSquareTest</ref></type>
        </param>
        <param>
          <type>Exhaustive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5155" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5155" bodyend="5168"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a64ef722e930c3088ddea704ac20194b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(AllGraphs, BipartiteNonSquareTest, testing::Values(std::make_pair(1, 2), std::make_pair(2, 1), std::make_pair(3, 2), std::make_pair(2, 3), std::make_pair(4, 1), std::make_pair(1, 4), std::make_pair(4, 3), std::make_pair(3, 4)))</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>AllGraphs</type>
        </param>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" kindref="compound">BipartiteNonSquareTest</ref></type>
        </param>
        <param>
          <type>testing::Values(std::make_pair(1, 2), std::make_pair(2, 1), std::make_pair(3, 2), std::make_pair(2, 3), std::make_pair(4, 1), std::make_pair(1, 4), std::make_pair(4, 3), std::make_pair(3, 4))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ace6351a5a34b746491458140b06534ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST_P</definition>
        <argsstring>(BipartiteRandomTest, LargerNets)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" kindref="compound">BipartiteRandomTest</ref></type>
        </param>
        <param>
          <type>LargerNets</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5186" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5186" bodyend="5205"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a857f48ffb1fc6f5ce61aec79b5c94da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(Samples, BipartiteRandomTest, testing::Values(std::make_pair(5, 10000), std::make_pair(6, 5000), std::make_pair(7, 2000), std::make_pair(8, 500), std::make_pair(9, 100)))</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>Samples</type>
        </param>
        <param>
          <type><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" kindref="compound">BipartiteRandomTest</ref></type>
        </param>
        <param>
          <type>testing::Values(std::make_pair(5, 10000), std::make_pair(6, 5000), std::make_pair(7, 2000), std::make_pair(8, 500), std::make_pair(9, 100))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aef0bf5f855b1e75c63ec45408b5a23ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsReadableTypeNameTest, ReturnsTrueForShortNames)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsReadableTypeNameTest</type>
        </param>
        <param>
          <type>ReturnsTrueForShortNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5218" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5218" bodyend="5223"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a839515535e3e75d4f80ba6ae8f7347ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsReadableTypeNameTest, ReturnsTrueForLongNonTemplateNonFunctionNames)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsReadableTypeNameTest</type>
        </param>
        <param>
          <type>ReturnsTrueForLongNonTemplateNonFunctionNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5225" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5225" bodyend="5229"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad1630d47de9f4fcdc00ab4962eaeea05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsReadableTypeNameTest, ReturnsFalseForLongTemplateNames)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsReadableTypeNameTest</type>
        </param>
        <param>
          <type>ReturnsFalseForLongTemplateNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5231" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5231" bodyend="5235"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a30516b1c70e14132d1d87ab08b96aa2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(IsReadableTypeNameTest, ReturnsFalseForLongFunctionTypeNames)</argsstring>
        <name>TEST</name>
        <param>
          <type>IsReadableTypeNameTest</type>
        </param>
        <param>
          <type>ReturnsFalseForLongFunctionTypeNames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5237" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5237" bodyend="5239"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa633c0b7e0f0316c23bff10e9963f773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(JoinAsTupleTest, JoinsEmptyTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>JoinAsTupleTest</type>
        </param>
        <param>
          <type>JoinsEmptyTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5243" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5243" bodyend="5245"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1acaec7fcf41bb1cdf7124b443e7ab28e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(JoinAsTupleTest, JoinsOneTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>JoinAsTupleTest</type>
        </param>
        <param>
          <type>JoinsOneTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5247" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5247" bodyend="5250"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a0831a9160c5420fcd363e4a520f0fb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(JoinAsTupleTest, JoinsTwoTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>JoinAsTupleTest</type>
        </param>
        <param>
          <type>JoinsTwoTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5252" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5252" bodyend="5255"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a56811b12ff298040a3d44dba0a2e4a8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(JoinAsTupleTest, JoinsTenTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>JoinAsTupleTest</type>
        </param>
        <param>
          <type>JoinsTenTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5257" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5257" bodyend="5261"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae104f652fab7d1b3c3873f6987401481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(FormatMatcherDescriptionTest, WorksForEmptyDescription)</argsstring>
        <name>TEST</name>
        <param>
          <type>FormatMatcherDescriptionTest</type>
        </param>
        <param>
          <type>WorksForEmptyDescription</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5265" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5265" bodyend="5280"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae29925e94a9396fe3c7fab6efaff8d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PolymorphicMatcherTest, CanAccessMutableImpl)</argsstring>
        <name>TEST</name>
        <param>
          <type>PolymorphicMatcherTest</type>
        </param>
        <param>
          <type>CanAccessMutableImpl</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5283" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5283" bodyend="5290"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a918a64c4594ef6b30f53d735c2e6e6ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PolymorphicMatcherTest, CanAccessImpl)</argsstring>
        <name>TEST</name>
        <param>
          <type>PolymorphicMatcherTest</type>
        </param>
        <param>
          <type>CanAccessImpl</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5293" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5293" bodyend="5297"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1abc9816afa3c83fc92e2c6ecfb2dd8e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(MatcherTupleTest, ExplainsMatchFailure)</argsstring>
        <name>TEST</name>
        <param>
          <type>MatcherTupleTest</type>
        </param>
        <param>
          <type>ExplainsMatchFailure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5299" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5299" bodyend="5321"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1adf46df588332aa839b52af952fface1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EachTest, ExplainsMatchResultCorrectly)</argsstring>
        <name>TEST</name>
        <param>
          <type>EachTest</type>
        </param>
        <param>
          <type>ExplainsMatchResultCorrectly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5325" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5325" bodyend="5348"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a183c4b7acec060c6fe3dee650bc97e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EachTest, DescribesItselfCorrectly)</argsstring>
        <name>TEST</name>
        <param>
          <type>EachTest</type>
        </param>
        <param>
          <type>DescribesItselfCorrectly</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5350" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5350" bodyend="5356"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1310e7e85bf8ea8f2281850167e15465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EachTest, MatchesVectorWhenAllElementsMatch)</argsstring>
        <name>TEST</name>
        <param>
          <type>EachTest</type>
        </param>
        <param>
          <type>MatchesVectorWhenAllElementsMatch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5358" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5358" bodyend="5376"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a53e7c1a04b8f178af52eeaa9f190cb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EachTest, MatchesMapWhenAllElementsMatch)</argsstring>
        <name>TEST</name>
        <param>
          <type>EachTest</type>
        </param>
        <param>
          <type>MatchesMapWhenAllElementsMatch</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5378" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5378" bodyend="5394"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a74f7c802ddb6879d3c76ff08d3e242b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EachTest, AcceptsMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>EachTest</type>
        </param>
        <param>
          <type>AcceptsMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5396" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5396" bodyend="5400"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aef6eeafb03f698d16206836bbb6f05b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(EachTest, WorksForNativeArrayAsTuple)</argsstring>
        <name>TEST</name>
        <param>
          <type>EachTest</type>
        </param>
        <param>
          <type>WorksForNativeArrayAsTuple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5402" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5402" bodyend="5407"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ace0a8f64b108c7a9c32c2cac15185461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1gmock__matchers__test_1_1_is_half_of_matcher" kindref="compound">IsHalfOfMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;IsHalfOfMatcher&gt; testing::gmock_matchers_test::IsHalfOf</definition>
        <argsstring>()</argsstring>
        <name>IsHalfOf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5433" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5433" bodyend="5435"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a2c4c39058405e13e6c6b7fcf8e6bfe43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, DescribesSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>DescribesSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5437" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5437" bodyend="5450"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9be60ebc74e280d7eb6668bfa316a765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, MakesCopyOfRhs)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>MakesCopyOfRhs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5452" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5452" bodyend="5464"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ad0e797104a482eba2d6c137cf9b676a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, WorksForLhsNativeArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>WorksForLhsNativeArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5466" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5466" bodyend="5474"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1adabf6a3ceda0024d630d2ece31e37f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, WorksForRhsNativeArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>WorksForRhsNativeArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5476" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5476" bodyend="5484"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a1f73a8fa9dd9560bd606a990444a81fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, RejectsWrongSize)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>RejectsWrongSize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5496" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5496" bodyend="5505"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a135ad7162da91c9a234193fbbe5ef775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, RejectsWrongContent)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>RejectsWrongContent</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5507" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5507" bodyend="5514"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a42b98b370f1897cecfafbbfba53f4f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, AcceptsCorrectContent)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>AcceptsCorrectContent</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5516" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5516" bodyend="5521"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9bbef6d651166c37af32c54923bcd849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(PointwiseTest, AllowsMonomorphicInnerMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>PointwiseTest</type>
        </param>
        <param>
          <type>AllowsMonomorphicInnerMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5523" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5523" bodyend="5535"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af3307f88a321331155a146d49974e3e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, DescribesSelf)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>DescribesSelf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5537" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5537" bodyend="5561"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a05e9bbee9d19692f45a846c2ff45e016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, MakesCopyOfRhs)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>MakesCopyOfRhs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5563" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5563" bodyend="5575"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a57e330a5ae600f65d4daa2ed57bbc887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, WorksForLhsNativeArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>WorksForLhsNativeArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5577" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5577" bodyend="5585"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1ae75a933b86db4c43a7bec2ffa97692ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, WorksForRhsNativeArray)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>WorksForRhsNativeArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5587" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5587" bodyend="5595"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a50412d02c70f8303a087e6832d26ba62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, RejectsWrongSize)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>RejectsWrongSize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5607" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5607" bodyend="5616"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a9a9a85c6598ab74463703acbd01aa1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, RejectsWrongContent)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>RejectsWrongContent</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5618" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5618" bodyend="5625"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1aa68bf48e4a8fa41fcd60f59cc60ede8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, AcceptsCorrectContentInSameOrder)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>AcceptsCorrectContentInSameOrder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5627" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5627" bodyend="5631"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1a3d48732b4a6069cfcf5c0dde6027dad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, AcceptsCorrectContentInDifferentOrder)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>AcceptsCorrectContentInDifferentOrder</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5633" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5633" bodyend="5637"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers__test_8cc_1af16d28a9f3a07b8ef2962b868b4f8399" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::gmock_matchers_test::TEST</definition>
        <argsstring>(UnorderedPointwiseTest, AllowsMonomorphicInnerMatcher)</argsstring>
        <name>TEST</name>
        <param>
          <type>UnorderedPointwiseTest</type>
        </param>
        <param>
          <type>AllowsMonomorphicInnerMatcher</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5639" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5639" bodyend="5649"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="67" column="1"/>
  </compounddef>
</doxygen>
