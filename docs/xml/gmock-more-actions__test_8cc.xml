<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-more-actions__test_8cc" kind="file" language="C++">
    <compoundname>gmock-more-actions_test.cc</compoundname>
    <includes refid="gmock-more-actions_8h" local="yes">gmock/gmock-more-actions.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-linked__ptr_8h" local="yes">gtest/internal/gtest-linked_ptr.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="2162">
        <label>sys/stat.h</label>
      </node>
      <node id="2184">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="2157" relation="include">
        </childnode>
      </node>
      <node id="2199">
        <label>functional</label>
      </node>
      <node id="2178">
        <label>iomanip</label>
      </node>
      <node id="2175">
        <label>limits</label>
      </node>
      <node id="2166">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="2153">
        <label>assert.h</label>
      </node>
      <node id="2189">
        <label>iterator</label>
      </node>
      <node id="2177">
        <label>float.h</label>
      </node>
      <node id="2148">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="2149" relation="include">
        </childnode>
        <childnode refid="2150" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2151" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
        <childnode refid="2174" relation="include">
        </childnode>
      </node>
      <node id="2142">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="2143" relation="include">
        </childnode>
        <childnode refid="2144" relation="include">
        </childnode>
      </node>
      <node id="2193">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="2154">
        <label>stdlib.h</label>
      </node>
      <node id="2182">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
      </node>
      <node id="2194">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="2195" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2182" relation="include">
        </childnode>
      </node>
      <node id="2209">
        <label>gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="2189" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2205" relation="include">
        </childnode>
      </node>
      <node id="2146">
        <label>errno.h</label>
      </node>
      <node id="2207">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="2203">
        <label>gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="2204" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
      </node>
      <node id="2200">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="2145" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
        <childnode refid="2144" relation="include">
        </childnode>
        <childnode refid="2203" relation="include">
        </childnode>
        <childnode refid="2208" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2205" relation="include">
        </childnode>
        <childnode refid="2142" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
      </node>
      <node id="2147">
        <label>string</label>
      </node>
      <node id="2179">
        <label>map</label>
      </node>
      <node id="2173">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="2192">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
      </node>
      <node id="2159">
        <label>stddef.h</label>
      </node>
      <node id="2197">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="2150">
        <label>ostream</label>
      </node>
      <node id="2167">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="2202">
        <label>limits.h</label>
      </node>
      <node id="2144">
        <label>gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="2145" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
      </node>
      <node id="2185">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="2186" relation="include">
        </childnode>
      </node>
      <node id="2161">
        <label>sys/types.h</label>
      </node>
      <node id="2160">
        <label>string.h</label>
      </node>
      <node id="2145">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="2146" relation="include">
        </childnode>
        <childnode refid="2143" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
      </node>
      <node id="2171">
        <label>typeinfo</label>
      </node>
      <node id="2152">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="2153" relation="include">
        </childnode>
        <childnode refid="2154" relation="include">
        </childnode>
        <childnode refid="2155" relation="include">
        </childnode>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2173" relation="include">
        </childnode>
      </node>
      <node id="2168">
        <label>unistd.h</label>
      </node>
      <node id="2165">
        <label>vector</label>
      </node>
      <node id="2191">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="2181">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="2175" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
      </node>
      <node id="2164">
        <label>utility</label>
      </node>
      <node id="2204">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="2179" relation="include">
        </childnode>
        <childnode refid="2180" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2145" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
        <childnode refid="2205" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
        <childnode refid="2174" relation="include">
        </childnode>
      </node>
      <node id="2163">
        <label>sstream</label>
      </node>
      <node id="2156">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="2154" relation="include">
        </childnode>
        <childnode refid="2153" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
      </node>
      <node id="2205">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="2206" relation="include">
        </childnode>
        <childnode refid="2143" relation="include">
        </childnode>
        <childnode refid="2189" relation="include">
        </childnode>
        <childnode refid="2175" relation="include">
        </childnode>
        <childnode refid="2150" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2148" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
        <childnode refid="2174" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
      </node>
      <node id="2206">
        <label>math.h</label>
      </node>
      <node id="2208">
        <label>gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="2204" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
      </node>
      <node id="2195">
        <label>iosfwd</label>
      </node>
      <node id="2141">
        <label>vendor/googletest/googlemock/test/gmock-more-actions_test.cc</label>
        <link refid="gmock-more-actions__test_8cc"/>
        <childnode refid="2142" relation="include">
        </childnode>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
        <childnode refid="2174" relation="include">
        </childnode>
        <childnode refid="2156" relation="include">
        </childnode>
      </node>
      <node id="2201">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2150" relation="include">
        </childnode>
        <childnode refid="2152" relation="include">
        </childnode>
        <childnode refid="2174" relation="include">
        </childnode>
      </node>
      <node id="2183">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="2182" relation="include">
        </childnode>
      </node>
      <node id="2155">
        <label>iostream</label>
      </node>
      <node id="2174">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="2175" relation="include">
        </childnode>
        <childnode refid="2150" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2182" relation="include">
        </childnode>
        <childnode refid="2185" relation="include">
        </childnode>
        <childnode refid="2181" relation="include">
        </childnode>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2190" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2194" relation="include">
        </childnode>
        <childnode refid="2196" relation="include">
        </childnode>
        <childnode refid="2197" relation="include">
        </childnode>
      </node>
      <node id="2172">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="2164" relation="include">
        </childnode>
      </node>
      <node id="2169">
        <label>strings.h</label>
      </node>
      <node id="2158">
        <label>ctype.h</label>
      </node>
      <node id="2196">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2184" relation="include">
        </childnode>
      </node>
      <node id="2157">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2159" relation="include">
        </childnode>
        <childnode refid="2154" relation="include">
        </childnode>
        <childnode refid="2149" relation="include">
        </childnode>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2161" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2143" relation="include">
        </childnode>
        <childnode refid="2155" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2166" relation="include">
        </childnode>
        <childnode refid="2167" relation="include">
        </childnode>
        <childnode refid="2168" relation="include">
        </childnode>
        <childnode refid="2169" relation="include">
        </childnode>
        <childnode refid="2170" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2176">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2177" relation="include">
        </childnode>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2178" relation="include">
        </childnode>
        <childnode refid="2175" relation="include">
        </childnode>
        <childnode refid="2179" relation="include">
        </childnode>
        <childnode refid="2180" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2181" relation="include">
        </childnode>
        <childnode refid="2182" relation="include">
        </childnode>
        <childnode refid="2183" relation="include">
        </childnode>
        <childnode refid="2184" relation="include">
        </childnode>
      </node>
      <node id="2210">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="2209" relation="include">
        </childnode>
      </node>
      <node id="2198">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="internal_2custom_2gmock-generated-actions_8h_source"/>
      </node>
      <node id="2188">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="2158" relation="include">
        </childnode>
        <childnode refid="2189" relation="include">
        </childnode>
        <childnode refid="2180" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2156" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2190" relation="include">
        </childnode>
      </node>
      <node id="2151">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="2152" relation="include">
        </childnode>
      </node>
      <node id="2180">
        <label>set</label>
      </node>
      <node id="2187">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2192" relation="include">
        </childnode>
      </node>
      <node id="2143">
        <label>algorithm</label>
      </node>
      <node id="2170">
        <label>regex.h</label>
      </node>
      <node id="2149">
        <label>stdio.h</label>
      </node>
      <node id="2186">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2149" relation="include">
        </childnode>
      </node>
      <node id="2190">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="2150" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2147" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2157" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2191" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1_nullary_functor" prot="public">testing::gmock_more_actions_test::NullaryFunctor</innerclass>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1_void_nullary_functor" prot="public">testing::gmock_more_actions_test::VoidNullaryFunctor</innerclass>
    <innerclass refid="structtesting_1_1gmock__more__actions__test_1_1_unary_functor" prot="public">testing::gmock_more_actions_test::UnaryFunctor</innerclass>
    <innerclass refid="structtesting_1_1gmock__more__actions__test_1_1_sum_of5_functor" prot="public">testing::gmock_more_actions_test::SumOf5Functor</innerclass>
    <innerclass refid="structtesting_1_1gmock__more__actions__test_1_1_sum_of6_functor" prot="public">testing::gmock_more_actions_test::SumOf6Functor</innerclass>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1_foo" prot="public">testing::gmock_more_actions_test::Foo</innerclass>
    <innerclass refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" prot="public">testing::gmock_more_actions_test::DeletionTester</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__more__actions__test">testing::gmock_more_actions_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>built-in<sp/>actions<sp/>in<sp/>gmock-more-actions.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-more-actions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-linked_ptr.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_more_actions_test<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">using<sp/>::std::plus;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">using<sp/>::std::string;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::get;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::make_tuple;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::tuple;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::tuple_element;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::_;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">testing::Action</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">testing::ActionInterface</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::DeleteArg;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Invoke;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Return;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ReturnArg;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ReturnPointee;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::SaveArg;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::SaveArgPointee;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::SetArgReferee;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StaticAssertTypeEq;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">testing::Unused</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::WithArg;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::WithoutArgs;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">testing::internal::linked_ptr</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>suppressing<sp/>compiler<sp/>warnings<sp/>on<sp/>conversion<sp/>possibly<sp/>losing<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Short(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions<sp/>and<sp/>functors<sp/>for<sp/>testing<sp/>Invoke()<sp/>and<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classtesting_1_1gmock__more__actions__test_1_1_nullary_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1_nullary_functor" kindref="compound">NullaryFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidNullary()<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classtesting_1_1gmock__more__actions__test_1_1_void_nullary_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1_void_nullary_functor" kindref="compound">VoidNullaryFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal">};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Plus1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidUnary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ByConstRef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_double<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ReferencesGlobalDouble(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;x<sp/>==<sp/>&amp;g_double;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ByNonConstRef(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="structtesting_1_1gmock__more__actions__test_1_1_unary_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__more__actions__test_1_1_unary_functor" kindref="compound">UnaryFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>?<sp/>1<sp/>:<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Binary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input<sp/>+<sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidBinary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ternary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y<sp/>+<sp/>z;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidTernary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d;<sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOfFirst2(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">Unused</ref>,<sp/><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">Unused</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidFunctionWithFourArguments(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat4(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf5(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;<sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="structtesting_1_1gmock__more__actions__test_1_1_sum_of5_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__more__actions__test_1_1_sum_of5_functor" kindref="compound">SumOf5Functor</ref><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat5(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf6(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structtesting_1_1gmock__more__actions__test_1_1_sum_of6_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__more__actions__test_1_1_sum_of6_functor" kindref="compound">SumOf6Functor</ref><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat6(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat7(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat9(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9;</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat10(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s10)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9<sp/>+<sp/>s10;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classtesting_1_1gmock__more__actions__test_1_1_foo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref>()<sp/>:<sp/>value_(123)<sp/>{}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">short</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_<sp/>+<sp/>x);<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Binary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str<sp/>+<sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ternary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>+<sp/>x<sp/>+<sp/>y*z;<sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>value_;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOfLast2(<ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">Unused</ref>,<sp/><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">Unused</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b;<sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf5(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;<sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf6(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat7(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat9(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat10(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s10)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9<sp/>+<sp/>s10;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>nullary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">TEST(InvokeTest,<sp/>Nullary)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a<sp/>=<sp/>Invoke(Nullary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>unary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">TEST(InvokeTest,<sp/>Unary)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;bool(int)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(Unary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a.Perform(make_tuple(1)));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(make_tuple(-1)));</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>binary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST(InvokeTest,<sp/>Binary)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const char*(const char*, short)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(Binary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_EQ(p<sp/>+<sp/>2,<sp/>a.Perform(make_tuple(p,<sp/>Short(2))));</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>ternary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">TEST(InvokeTest,<sp/>Ternary)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, char, short)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(Ternary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a.Perform(make_tuple(1,<sp/></highlight><highlight class="charliteral">&apos;\2&apos;</highlight><highlight class="normal">,<sp/>Short(3))));</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>4-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes4Arguments)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, int, int)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(SumOf4);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1234,<sp/>a.Perform(make_tuple(1000,<sp/>200,<sp/>30,<sp/>4)));</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>5-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes5Arguments)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, int, int, int)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(SumOf5);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(make_tuple(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5)));</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>6-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes6Arguments)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, int, int, int, int)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(SumOf6);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,<sp/>a.Perform(make_tuple(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6)));</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>that<sp/>turns<sp/>the<sp/>type<sp/>of<sp/>a<sp/>C-string<sp/>literal<sp/>from<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char[N]<sp/>to<sp/>const<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>CharPtr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>7-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes7Arguments)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(Concat7);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>8-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes8Arguments)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(Concat8);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345678&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>9-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes9Arguments)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/>Invoke(Concat9);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>10-argument<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionThatTakes10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/>Invoke(Concat10);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>functions<sp/>with<sp/>parameters<sp/>declared<sp/>as<sp/>Unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionWithUnusedParameters)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, double, const string&amp;)&gt;</ref><sp/>a1<sp/>=</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(SumOfFirst2);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12,<sp/>a1.Perform(</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>tuple&lt;int,<sp/>int,<sp/>double,<sp/>const<sp/>string&amp;&gt;(10,<sp/>2,<sp/>5.6,<sp/>s)));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, bool, int*)&gt;</ref><sp/>a2<sp/>=</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(SumOfFirst2);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>EXPECT_EQ(23,<sp/>a2.Perform(make_tuple(20,<sp/>3,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>static_cast&lt;int*&gt;(NULL))));</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>methods<sp/>with<sp/>parameters<sp/>declared<sp/>as<sp/>Unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">TEST(InvokeTest,<sp/>MethodWithUnusedParameters)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(string, bool, int, int)&gt;</ref><sp/>a1<sp/>=</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOfLast2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12,<sp/>a1.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>10,<sp/>2)));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(char, double, int, int)&gt;</ref><sp/>a2<sp/>=</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOfLast2);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>EXPECT_EQ(23,<sp/>a2.Perform(make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>2.5,<sp/>20,<sp/>3)));</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">TEST(InvokeTest,<sp/>Functor)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;long(long, int)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(plus&lt;long&gt;());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3L,<sp/>a.Perform(make_tuple(1,<sp/>2)));</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke(f)<sp/>as<sp/>an<sp/>action<sp/>of<sp/>a<sp/>compatible<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">TEST(InvokeTest,<sp/>FunctionWithCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;long(int, short, char, bool)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(SumOf4);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4321,<sp/>a.Perform(make_tuple(4000,<sp/>Short(300),<sp/>Char(20),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>an<sp/>object<sp/>pointer<sp/>and<sp/>a<sp/>method<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>nullary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Nullary)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Nullary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>a.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>unary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Unary)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;short(long)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Unary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4123,<sp/>a.Perform(make_tuple(4000)));</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>binary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Binary)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(const string&amp;, char)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Binary);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s(</highlight><highlight class="stringliteral">&quot;Hell&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>a.Perform(</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tuple&lt;const<sp/>string&amp;,<sp/>char&gt;(s,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>ternary<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">TEST(InvokeMethodTest,<sp/>Ternary)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, bool, char)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Ternary);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1124,<sp/>a.Perform(make_tuple(1000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>Char(1))));</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>4-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes4Arguments)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, int, int)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf4);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1357,<sp/>a.Perform(make_tuple(1000,<sp/>200,<sp/>30,<sp/>4)));</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>5-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes5Arguments)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, int, int, int)&gt;</ref><sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf5);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(make_tuple(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5)));</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>6-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes6Arguments)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int, int, int, int, int)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf6);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,<sp/>a.Perform(make_tuple(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6)));</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>7-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes7Arguments)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat7);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>8-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes8Arguments)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat8);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345678&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>9-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes9Arguments)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat9);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke()<sp/>with<sp/>a<sp/>10-argument<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodThatTakes10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=<sp/>Invoke(&amp;foo,<sp/>&amp;Foo::Concat10);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>Invoke(f)<sp/>as<sp/>an<sp/>action<sp/>of<sp/>a<sp/>compatible<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">TEST(InvokeMethodTest,<sp/>MethodWithCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_foo" kindref="compound">Foo</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;long(int, short, char, bool)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Invoke(&amp;foo,<sp/>&amp;Foo::SumOf4);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4444,<sp/>a.Perform(make_tuple(4000,<sp/>Short(300),<sp/>Char(20),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithoutArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>no<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal">TEST(WithoutArgsTest,<sp/>NoArg)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int n)&gt;</ref><sp/>a<sp/>=<sp/>WithoutArgs(Invoke(Nullary));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(make_tuple(2)));</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArg<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>1<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">TEST(WithArgTest,<sp/>OneArg)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;bool(double x, int n)&gt;</ref><sp/>b<sp/>=<sp/>WithArg&lt;1&gt;(Invoke(Unary));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(b.Perform(make_tuple(1.5,<sp/>-1)));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(b.Perform(make_tuple(1.5,<sp/>1)));</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">TEST(ReturnArgActionTest,<sp/>WorksForOneArgIntArg0)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a<sp/>=<sp/>ReturnArg&lt;0&gt;();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a.Perform(make_tuple(5)));</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">TEST(ReturnArgActionTest,<sp/>WorksForMultiArgBoolArg0)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;bool(bool, bool, bool)&gt;</ref><sp/>a<sp/>=<sp/>ReturnArg&lt;0&gt;();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">TEST(ReturnArgActionTest,<sp/>WorksForMultiArgStringArg2)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(int, int, string, int)&gt;</ref><sp/>a<sp/>=<sp/>ReturnArg&lt;2&gt;();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;seven&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(5,<sp/>6,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;seven&quot;</highlight><highlight class="normal">),<sp/>8)));</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">TEST(SaveArgActionTest,<sp/>WorksForSameType)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(int n)&gt;</ref><sp/>a1<sp/>=<sp/>SaveArg&lt;0&gt;(&amp;result);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(5));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>result);</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal">TEST(SaveArgActionTest,<sp/>WorksForCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(bool, char)&gt;</ref><sp/>a1<sp/>=<sp/>SaveArg&lt;1&gt;(&amp;result);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal">TEST(SaveArgPointeeActionTest,<sp/>WorksForSameType)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(const int*)&gt;</ref><sp/>a1<sp/>=<sp/>SaveArgPointee&lt;0&gt;(&amp;result);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(&amp;value));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>result);</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">TEST(SaveArgPointeeActionTest,<sp/>WorksForCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(bool, char*)&gt;</ref><sp/>a1<sp/>=<sp/>SaveArgPointee&lt;1&gt;(&amp;result);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;value));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>result);</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">TEST(SaveArgPointeeActionTest,<sp/>WorksForLinkedPtr)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;int&gt;</ref><sp/>value(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(5));</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(linked_ptr&lt;int&gt;</ref>)&gt;<sp/>a1<sp/>=<sp/>SaveArgPointee&lt;0&gt;(&amp;result);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(value));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>result);</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal">TEST(SetArgRefereeActionTest,<sp/>WorksForSameType)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(int&amp;)&gt;</ref><sp/>a1<sp/>=<sp/>SetArgReferee&lt;0&gt;(1);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>a1.Perform(tuple&lt;int&amp;&gt;(value));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>value);</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">TEST(SetArgRefereeActionTest,<sp/>WorksForCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(int, int&amp;)&gt;</ref><sp/>a1<sp/>=<sp/>SetArgReferee&lt;1&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>a1.Perform(tuple&lt;int,<sp/>int&amp;&gt;(0,<sp/>value));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">TEST(SetArgRefereeActionTest,<sp/>WorksWithExtraArguments)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(bool, int, int&amp;, const char*)&gt;</ref><sp/>a1<sp/>=<sp/>SetArgReferee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>a1.Perform(tuple&lt;bool,<sp/>int,<sp/>int&amp;,<sp/>const<sp/>char*&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>0,<sp/>value,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>value);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>verify<sp/>that<sp/>its<sp/>destructor<sp/>is<sp/>called:<sp/>it<sp/>will<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>bool<sp/>provided<sp/>to<sp/>the<sp/>constructor<sp/>to<sp/>true<sp/>when<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_deleted)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>is_deleted_(is_deleted)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>bit<sp/>is<sp/>set<sp/>to<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>*is_deleted_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>~<ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref>()<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>*is_deleted_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_deleted_;</highlight></codeline>
<codeline lineno="577"><highlight class="normal">};</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">TEST(DeleteArgActionTest,<sp/>OneArg)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_deleted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref>*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref>(&amp;is_deleted);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(DeletionTester*)&gt;</ref><sp/>a1<sp/>=<sp/>DeleteArg&lt;0&gt;();<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(is_deleted);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(t));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_deleted);</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">TEST(DeleteArgActionTest,<sp/>TenArgs)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_deleted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref>*<sp/>t<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref>(&amp;is_deleted);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;void(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="classtesting_1_1gmock__more__actions__test_1_1_deletion_tester" kindref="compound">DeletionTester</ref>*)&gt;<sp/>a1<sp/>=<sp/>DeleteArg&lt;9&gt;();</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(is_deleted);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5,<sp/>6,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>t));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(is_deleted);</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">TEST(ThrowActionTest,<sp/>ThrowsGivenExceptionInVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(int n)&gt;</ref><sp/>a<sp/>=<sp/>Throw(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>EXPECT_THROW(a.Perform(make_tuple(0)),<sp/>char);</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MyException<sp/>{};</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">TEST(ThrowActionTest,<sp/>ThrowsGivenExceptionInNonVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;double(char ch)&gt;</ref><sp/>a<sp/>=<sp/>Throw(MyException());</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_THROW(a.Perform(make_tuple(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)),<sp/>MyException);</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal">TEST(ThrowActionTest,<sp/>ThrowsGivenExceptionInNullaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;double()&gt;</ref><sp/>a<sp/>=<sp/>Throw(MyException());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>EXPECT_THROW(a.Perform(make_tuple()),<sp/>MyException);</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>sets<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>N-th<sp/>(0-based)<sp/>argument<sp/>to<sp/>values<sp/>in<sp/>range<sp/>[first,<sp/>last).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArray)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbers[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;MyFunction&gt;</ref><sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(numbers,<sp/>numbers<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[4]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pn<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch[4]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pch<sp/>=<sp/>ch;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>a.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pn,<sp/>pch));</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n[0]);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n[1]);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>n[2]);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[3]);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[0]);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[1]);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[2]);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[3]);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>first<sp/>and<sp/>last<sp/>are<sp/>iterators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>std::string<sp/>letters<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>SetArrayArgument&lt;2&gt;(letters.begin(),<sp/>letters.end());</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>std::fill_n(n,<sp/>4,<sp/>0);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>std::fill_n(ch,<sp/>4,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>a.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pn,<sp/>pch));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[0]);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[1]);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[2]);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[3]);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>ch[0]);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>ch[1]);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>ch[2]);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>ch[3]);</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>where<sp/>first<sp/>==<sp/>last.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArrayWithEmptyRange)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbers[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;MyFunction&gt;</ref><sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(numbers,<sp/>numbers);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[4]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pn<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>a.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pn));</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[0]);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[1]);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[2]);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>n[3]);</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>where<sp/>*first<sp/>is<sp/>convertible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(but<sp/>not<sp/>equal)<sp/>to<sp/>the<sp/>argument<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArrayWithConvertibleType)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>chars[]<sp/>=<sp/>{<sp/>97,<sp/>98,<sp/>99<sp/>};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;MyFunction&gt;</ref><sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(chars,<sp/>chars<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>codes[4]<sp/>=<sp/>{<sp/>111,<sp/>222,<sp/>333,<sp/>444<sp/>};</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pcodes<sp/>=<sp/>codes;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>a.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>pcodes));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>EXPECT_EQ(97,<sp/>codes[0]);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>EXPECT_EQ(98,<sp/>codes[1]);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>EXPECT_EQ(99,<sp/>codes[2]);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>EXPECT_EQ(444,<sp/>codes[3]);</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>SetArrayArgument&lt;N&gt;(first,<sp/>last)<sp/>with<sp/>iterator<sp/>as<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal">TEST(SetArrayArgumentTest,<sp/>SetsTheNthArrayWithIteratorArgument)<sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MyFunction(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>std::back_insert_iterator&lt;std::string&gt;);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>std::string<sp/>letters<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abc&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;MyFunction&gt;</ref><sp/>a<sp/>=<sp/>SetArrayArgument&lt;1&gt;(letters.begin(),<sp/>letters.end());</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>a.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>back_inserter(s)));</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>EXPECT_EQ(letters,<sp/>s);</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">TEST(ReturnPointeeTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a<sp/>=<sp/>ReturnPointee(&amp;n);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>a.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>43;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>EXPECT_EQ(43,<sp/>a.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_generated_actions_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/test/gmock-more-actions_test.cc"/>
  </compounddef>
</doxygen>
