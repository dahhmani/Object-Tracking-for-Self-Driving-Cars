<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gen__gtest__pred__impl_8py" kind="file" language="Python">
    <compoundname>gen_gtest_pred_impl.py</compoundname>
    <innernamespace refid="namespacegen__gtest__pred__impl">gen_gtest_pred_impl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2006,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">#<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">#<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">#<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">#<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">#<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;gen_gtest_pred_impl.py<sp/>v0.1</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">Generates<sp/>the<sp/>implementation<sp/>of<sp/>Google<sp/>Test<sp/>predicate<sp/>assertions<sp/>and</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">accompanying<sp/>tests.</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">Usage:</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"><sp/><sp/>gen_gtest_pred_impl.py<sp/>MAX_ARITY</highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">where<sp/>MAX_ARITY<sp/>is<sp/>a<sp/>positive<sp/>integer.</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">The<sp/>command<sp/>generates<sp/>the<sp/>implementation<sp/>of<sp/>up-to<sp/>MAX_ARITY-ary</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">predicate<sp/>assertions,<sp/>and<sp/>writes<sp/>it<sp/>to<sp/>file<sp/>gtest_pred_impl.h<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">directory<sp/>where<sp/>the<sp/>script<sp/>is.<sp/><sp/>It<sp/>also<sp/>generates<sp/>the<sp/>accompanying</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">unit<sp/>test<sp/>in<sp/>file<sp/>gtest_pred_impl_unittest.cc.</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal">__author__<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;wan@google.com<sp/>(Zhanyong<sp/>Wan)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Where<sp/>this<sp/>script<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">SCRIPT_DIR<sp/>=<sp/>os.path.dirname(sys.argv[0])</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Where<sp/>to<sp/>store<sp/>the<sp/>generated<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">HEADER<sp/>=<sp/>os.path.join(SCRIPT_DIR,<sp/></highlight><highlight class="stringliteral">&apos;../include/gtest/gtest_pred_impl.h&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Where<sp/>to<sp/>store<sp/>the<sp/>generated<sp/>unit<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">UNIT_TEST<sp/>=<sp/>os.path.join(SCRIPT_DIR,<sp/></highlight><highlight class="stringliteral">&apos;../test/gtest_pred_impl_unittest.cc&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">HeaderPreamble(n):</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>preamble<sp/>for<sp/>the<sp/>header<sp/>file.</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>n:<sp/><sp/>the<sp/>maximum<sp/>arity<sp/>of<sp/>the<sp/>predicate<sp/>macros<sp/>to<sp/>be<sp/>generated.</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>map<sp/>that<sp/>defines<sp/>the<sp/>values<sp/>used<sp/>in<sp/>the<sp/>preamble<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>DEFS<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;today&apos;</highlight><highlight class="normal"><sp/>:<sp/>time.strftime(</highlight><highlight class="stringliteral">&apos;%m/%d/%Y&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;year&apos;</highlight><highlight class="normal"><sp/>:<sp/>time.strftime(</highlight><highlight class="stringliteral">&apos;%Y&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;command&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;%s<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(os.path.basename(sys.argv[0]),<sp/>n),</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;n&apos;</highlight><highlight class="normal"><sp/>:<sp/>n</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;//<sp/>Copyright<sp/>2006,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral">//<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral">//<sp/>met:</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral">//<sp/>distribution.</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral">//<sp/>This<sp/>file<sp/>is<sp/>AUTOMATICALLY<sp/>GENERATED<sp/>on<sp/>%(today)s<sp/>by<sp/>command</highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral">//<sp/>&apos;%(command)s&apos;.<sp/><sp/>DO<sp/>NOT<sp/>EDIT<sp/>BY<sp/>HAND!</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral">//<sp/>Implements<sp/>a<sp/>family<sp/>of<sp/>generic<sp/>predicate<sp/>assertion<sp/>macros.</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral">#define<sp/>GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral">//<sp/>Makes<sp/>sure<sp/>this<sp/>header<sp/>is<sp/>not<sp/>included<sp/>before<sp/>gtest.h.</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral">#<sp/>error<sp/>Do<sp/>not<sp/>include<sp/>gtest_pred_impl.h<sp/>directly.<sp/><sp/>Include<sp/>gtest.h<sp/>instead.</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral">#endif<sp/><sp/>//<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral">//<sp/>This<sp/>header<sp/>implements<sp/>a<sp/>family<sp/>of<sp/>generic<sp/>predicate<sp/>assertion</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral">//<sp/>macros:</highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral">//<sp/><sp/><sp/>ASSERT_PRED_FORMAT1(pred_format,<sp/>v1)</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral">//<sp/><sp/><sp/>ASSERT_PRED_FORMAT2(pred_format,<sp/>v1,<sp/>v2)</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral">//<sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral">//<sp/>where<sp/>pred_format<sp/>is<sp/>a<sp/>function<sp/>or<sp/>functor<sp/>that<sp/>takes<sp/>n<sp/>(in<sp/>the</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral">//<sp/>case<sp/>of<sp/>ASSERT_PRED_FORMATn)<sp/>values<sp/>and<sp/>their<sp/>source<sp/>expression</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral">//<sp/>text,<sp/>and<sp/>returns<sp/>a<sp/>testing::AssertionResult.<sp/><sp/>See<sp/>the<sp/>definition</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral">//<sp/>of<sp/>ASSERT_EQ<sp/>in<sp/>gtest.h<sp/>for<sp/>an<sp/>example.</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral">//<sp/>If<sp/>you<sp/>don&apos;t<sp/>care<sp/>about<sp/>formatting,<sp/>you<sp/>can<sp/>use<sp/>the<sp/>more</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral">//<sp/>restrictive<sp/>version:</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral">//<sp/><sp/><sp/>ASSERT_PRED1(pred,<sp/>v1)</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral">//<sp/><sp/><sp/>ASSERT_PRED2(pred,<sp/>v1,<sp/>v2)</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral">//<sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral">//<sp/>where<sp/>pred<sp/>is<sp/>an<sp/>n-ary<sp/>function<sp/>or<sp/>functor<sp/>that<sp/>returns<sp/>bool,</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral">//<sp/>and<sp/>the<sp/>values<sp/>v1,<sp/>v2,<sp/>...,<sp/>must<sp/>support<sp/>the<sp/>&lt;&lt;<sp/>operator<sp/>for</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral">//<sp/>streaming<sp/>to<sp/>std::ostream.</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral">//<sp/>We<sp/>also<sp/>define<sp/>the<sp/>EXPECT_*<sp/>variations.</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral">//<sp/>For<sp/>now<sp/>we<sp/>only<sp/>support<sp/>predicates<sp/>whose<sp/>arity<sp/>is<sp/>at<sp/>most<sp/>%(n)s.</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral">//<sp/>Please<sp/>email<sp/>googletestframework@googlegroups.com<sp/>if<sp/>you<sp/>need</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral">//<sp/>support<sp/>for<sp/>higher<sp/>arities.</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral">//<sp/>GTEST_ASSERT_<sp/>is<sp/>the<sp/>basic<sp/>statement<sp/>to<sp/>which<sp/>all<sp/>of<sp/>the<sp/>assertions</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral">//<sp/>in<sp/>this<sp/>file<sp/>reduce.<sp/><sp/>Don&apos;t<sp/>use<sp/>this<sp/>in<sp/>your<sp/>code.</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral">#define<sp/>GTEST_ASSERT_(expression,<sp/>on_failure)<sp/>\\</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\\</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/>if<sp/>(const<sp/>::testing::AssertionResult<sp/>gtest_ar<sp/>=<sp/>(expression))<sp/>\\</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>;<sp/>\\</highlight></codeline>
<codeline lineno="159"><highlight class="stringliteral"><sp/><sp/>else<sp/>\\</highlight></codeline>
<codeline lineno="160"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>on_failure(gtest_ar.failure_message())</highlight></codeline>
<codeline lineno="161"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Arity(n):</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>English<sp/>name<sp/>of<sp/>the<sp/>given<sp/>arity.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>n<sp/>&lt;<sp/>0:</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>n<sp/>&lt;=<sp/>3:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[</highlight><highlight class="stringliteral">&apos;nullary&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;unary&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;binary&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;ternary&apos;</highlight><highlight class="normal">][n]</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;%s-ary&apos;</highlight><highlight class="normal"><sp/>%<sp/>n</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Title(word):</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>given<sp/>word<sp/>in<sp/>title<sp/>case.<sp/><sp/>The<sp/>difference<sp/>between</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"><sp/><sp/>this<sp/>and<sp/>string&apos;s<sp/>title()<sp/>method<sp/>is<sp/>that<sp/>Title(&apos;4-ary&apos;)<sp/>is<sp/>&apos;4-ary&apos;</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/>while<sp/>&apos;4-ary&apos;.title()<sp/>is<sp/>&apos;4-Ary&apos;.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word[0].upper()<sp/>+<sp/>word[1:]</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">OneTo(n):</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>list<sp/>[1,<sp/>2,<sp/>3,<sp/>...,<sp/>n].&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>range(1,<sp/>n<sp/>+<sp/>1)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">Iter(n,<sp/>format,<sp/>sep=&apos;&apos;):</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Given<sp/>a<sp/>positive<sp/>integer<sp/>n,<sp/>a<sp/>format<sp/>string<sp/>that<sp/>contains<sp/>0<sp/>or</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral"><sp/><sp/>more<sp/>&apos;%s&apos;<sp/>format<sp/>specs,<sp/>and<sp/>optionally<sp/>a<sp/>separator<sp/>string,<sp/>returns</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral"><sp/><sp/>the<sp/>join<sp/>of<sp/>n<sp/>strings,<sp/>each<sp/>formatted<sp/>with<sp/>the<sp/>format<sp/>string<sp/>on<sp/>an</highlight></codeline>
<codeline lineno="193"><highlight class="stringliteral"><sp/><sp/>iterator<sp/>ranged<sp/>from<sp/>1<sp/>to<sp/>n.</highlight></codeline>
<codeline lineno="194"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="195"><highlight class="stringliteral"><sp/><sp/>Example:</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"><sp/><sp/>Iter(3,<sp/>&apos;v%s&apos;,<sp/>sep=&apos;,<sp/>&apos;)<sp/>returns<sp/>&apos;v1,<sp/>v2,<sp/>v3&apos;.</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>How<sp/>many<sp/>&apos;%s&apos;<sp/>specs<sp/>are<sp/>in<sp/>format?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>spec_count<sp/>=<sp/>len(format.split(</highlight><highlight class="stringliteral">&apos;%s&apos;</highlight><highlight class="normal">))<sp/>-<sp/>1</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sep.join([format<sp/>%<sp/>(spec_count<sp/>*<sp/>(i,))<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>OneTo(n)])</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">ImplementationForArity(n):</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>implementation<sp/>of<sp/>n-ary<sp/>predicate<sp/>assertions.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>map<sp/>the<sp/>defines<sp/>the<sp/>values<sp/>used<sp/>in<sp/>the<sp/>implementation<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>DEFS<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;n&apos;</highlight><highlight class="normal"><sp/>:<sp/>str(n),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;vs&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;vts&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;#v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;arity&apos;</highlight><highlight class="normal"><sp/>:<sp/>Arity(n),</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Arity&apos;</highlight><highlight class="normal"><sp/>:<sp/>Title(Arity(n))</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>impl<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="218"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="219"><highlight class="stringliteral">//<sp/>Helper<sp/>function<sp/>for<sp/>implementing<sp/>{EXPECT|ASSERT}_PRED%(n)s.<sp/><sp/>Don&apos;t<sp/>use</highlight></codeline>
<codeline lineno="220"><highlight class="stringliteral">//<sp/>this<sp/>in<sp/>your<sp/>code.</highlight></codeline>
<codeline lineno="221"><highlight class="stringliteral">template<sp/>&lt;typename<sp/>Pred&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="224"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>T%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;&gt;</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral">AssertionResult<sp/>AssertPred%(n)sHelper(const<sp/>char*<sp/>pred_text&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>e%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="233"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pred<sp/>pred&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="236"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T%s&amp;<sp/>v%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/>if<sp/>(pred(%(vs)s))<sp/>return<sp/>AssertionSuccess();</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>return<sp/>AssertionFailure()<sp/>&lt;&lt;<sp/>pred_text<sp/>&lt;&lt;<sp/>&quot;(&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>e%s&quot;&quot;&quot;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/>&lt;&lt;<sp/>&quot;)<sp/>evaluates<sp/>to<sp/>false,<sp/>where&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;\\n&quot;<sp/>&lt;&lt;<sp/>e%s<sp/>&lt;&lt;<sp/>&quot;<sp/>evaluates<sp/>to<sp/>&quot;<sp/>&lt;&lt;<sp/>v%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;;</highlight></codeline>
<codeline lineno="254"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="255"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="256"><highlight class="stringliteral">//<sp/>Internal<sp/>macro<sp/>for<sp/>implementing<sp/>{EXPECT|ASSERT}_PRED_FORMAT%(n)s.</highlight></codeline>
<codeline lineno="257"><highlight class="stringliteral">//<sp/>Don&apos;t<sp/>use<sp/>this<sp/>in<sp/>your<sp/>code.</highlight></codeline>
<codeline lineno="258"><highlight class="stringliteral">#define<sp/>GTEST_PRED_FORMAT%(n)s_(pred_format,<sp/>%(vs)s,<sp/>on_failure)\\</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral"><sp/><sp/>GTEST_ASSERT_(pred_format(%(vts)s,<sp/>%(vs)s),<sp/>\\</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on_failure)</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral">//<sp/>Internal<sp/>macro<sp/>for<sp/>implementing<sp/>{EXPECT|ASSERT}_PRED%(n)s.<sp/><sp/>Don&apos;t<sp/>use</highlight></codeline>
<codeline lineno="263"><highlight class="stringliteral">//<sp/>this<sp/>in<sp/>your<sp/>code.</highlight></codeline>
<codeline lineno="264"><highlight class="stringliteral">#define<sp/>GTEST_PRED%(n)s_(pred,<sp/>%(vs)s,<sp/>on_failure)\\</highlight></codeline>
<codeline lineno="265"><highlight class="stringliteral"><sp/><sp/>GTEST_ASSERT_(::testing::AssertPred%(n)sHelper(#pred&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,<sp/>\\</highlight></codeline>
<codeline lineno="268"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#v%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,<sp/>\\</highlight></codeline>
<codeline lineno="271"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pred&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,<sp/>\\</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>impl<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;),<sp/>on_failure)</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral">//<sp/>%(Arity)s<sp/>predicate<sp/>assertion<sp/>macros.</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral">#define<sp/>EXPECT_PRED_FORMAT%(n)s(pred_format,<sp/>%(vs)s)<sp/>\\</highlight></codeline>
<codeline lineno="280"><highlight class="stringliteral"><sp/><sp/>GTEST_PRED_FORMAT%(n)s_(pred_format,<sp/>%(vs)s,<sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="281"><highlight class="stringliteral">#define<sp/>EXPECT_PRED%(n)s(pred,<sp/>%(vs)s)<sp/>\\</highlight></codeline>
<codeline lineno="282"><highlight class="stringliteral"><sp/><sp/>GTEST_PRED%(n)s_(pred,<sp/>%(vs)s,<sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="283"><highlight class="stringliteral">#define<sp/>ASSERT_PRED_FORMAT%(n)s(pred_format,<sp/>%(vs)s)<sp/>\\</highlight></codeline>
<codeline lineno="284"><highlight class="stringliteral"><sp/><sp/>GTEST_PRED_FORMAT%(n)s_(pred_format,<sp/>%(vs)s,<sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="285"><highlight class="stringliteral">#define<sp/>ASSERT_PRED%(n)s(pred,<sp/>%(vs)s)<sp/>\\</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral"><sp/><sp/>GTEST_PRED%(n)s_(pred,<sp/>%(vs)s,<sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">HeaderPostamble():</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>postamble<sp/>for<sp/>the<sp/>header<sp/>file.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral">#endif<sp/><sp/>//<sp/>GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GenerateFile(path,<sp/>content):</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Given<sp/>a<sp/>file<sp/>path<sp/>and<sp/>a<sp/>content<sp/>string,<sp/>overwrites<sp/>it<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="304"><highlight class="stringliteral"><sp/><sp/>given<sp/>content.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;Updating<sp/>file<sp/>%s<sp/>.<sp/>.<sp/>.&apos;</highlight><highlight class="normal"><sp/>%<sp/>path</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>f<sp/>=<sp/>file(path,<sp/></highlight><highlight class="stringliteral">&apos;w+&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>&gt;&gt;f,<sp/>content,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>f.close()</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;File<sp/>%s<sp/>has<sp/>been<sp/>updated.&apos;</highlight><highlight class="normal"><sp/>%<sp/>path</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GenerateHeader(n):</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Given<sp/>the<sp/>maximum<sp/>arity<sp/>n,<sp/>updates<sp/>the<sp/>header<sp/>file<sp/>that<sp/>implements</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/>the<sp/>predicate<sp/>assertions.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>GenerateFile(HEADER,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeaderPreamble(n)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join([ImplementationForArity(i)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>OneTo(n)])</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>HeaderPostamble())</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">UnitTestPreamble():</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>preamble<sp/>for<sp/>the<sp/>unit<sp/>test<sp/>file.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>map<sp/>that<sp/>defines<sp/>the<sp/>values<sp/>used<sp/>in<sp/>the<sp/>preamble<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>DEFS<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;today&apos;</highlight><highlight class="normal"><sp/>:<sp/>time.strftime(</highlight><highlight class="stringliteral">&apos;%m/%d/%Y&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;year&apos;</highlight><highlight class="normal"><sp/>:<sp/>time.strftime(</highlight><highlight class="stringliteral">&apos;%Y&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;command&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&apos;%s<sp/>%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(os.path.basename(sys.argv[0]),<sp/>sys.argv[1]),</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;//<sp/>Copyright<sp/>2006,<sp/>Google<sp/>Inc.</highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral">//<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="340"><highlight class="stringliteral">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral">//<sp/>met:</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral">//<sp/>distribution.</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="363"><highlight class="stringliteral">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral">//<sp/>This<sp/>file<sp/>is<sp/>AUTOMATICALLY<sp/>GENERATED<sp/>on<sp/>%(today)s<sp/>by<sp/>command</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral">//<sp/>&apos;%(command)s&apos;.<sp/><sp/>DO<sp/>NOT<sp/>EDIT<sp/>BY<sp/>HAND!</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral">//<sp/>Regression<sp/>test<sp/>for<sp/>gtest_pred_impl.h</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="370"><highlight class="stringliteral">//<sp/>This<sp/>file<sp/>is<sp/>generated<sp/>by<sp/>a<sp/>script<sp/>and<sp/>quite<sp/>long.<sp/><sp/>If<sp/>you<sp/>intend<sp/>to</highlight></codeline>
<codeline lineno="371"><highlight class="stringliteral">//<sp/>learn<sp/>how<sp/>Google<sp/>Test<sp/>works<sp/>by<sp/>reading<sp/>its<sp/>unit<sp/>tests,<sp/>read</highlight></codeline>
<codeline lineno="372"><highlight class="stringliteral">//<sp/>gtest_unittest.cc<sp/>instead.</highlight></codeline>
<codeline lineno="373"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="374"><highlight class="stringliteral">//<sp/>This<sp/>is<sp/>intended<sp/>as<sp/>a<sp/>regression<sp/>test<sp/>for<sp/>the<sp/>Google<sp/>Test<sp/>predicate</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral">//<sp/>assertions.<sp/><sp/>We<sp/>compile<sp/>it<sp/>as<sp/>part<sp/>of<sp/>the<sp/>gtest_unittest<sp/>target</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral">//<sp/>only<sp/>to<sp/>keep<sp/>the<sp/>implementation<sp/>tidy<sp/>and<sp/>compact,<sp/>as<sp/>it<sp/>is<sp/>quite</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral">//<sp/>involved<sp/>to<sp/>set<sp/>up<sp/>the<sp/>stage<sp/>for<sp/>testing<sp/>Google<sp/>Test<sp/>using<sp/>Google</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral">//<sp/>Test<sp/>itself.</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral">//</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral">//<sp/>Currently,<sp/>gtest_unittest<sp/>takes<sp/>~11<sp/>seconds<sp/>to<sp/>run<sp/>in<sp/>the<sp/>testing</highlight></codeline>
<codeline lineno="381"><highlight class="stringliteral">//<sp/>daemon.<sp/><sp/>In<sp/>the<sp/>future,<sp/>if<sp/>it<sp/>grows<sp/>too<sp/>large<sp/>and<sp/>needs<sp/>much<sp/>more</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral">//<sp/>time<sp/>to<sp/>finish,<sp/>we<sp/>should<sp/>consider<sp/>separating<sp/>this<sp/>file<sp/>into<sp/>a</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral">//<sp/>stand-alone<sp/>regression<sp/>test.</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral">#include<sp/>&quot;gtest/gtest.h&quot;</highlight></codeline>
<codeline lineno="388"><highlight class="stringliteral">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight></codeline>
<codeline lineno="389"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="390"><highlight class="stringliteral">//<sp/>A<sp/>user-defined<sp/>data<sp/>type.</highlight></codeline>
<codeline lineno="391"><highlight class="stringliteral">struct<sp/>Bool<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="stringliteral"><sp/><sp/>explicit<sp/>Bool(int<sp/>val)<sp/>:<sp/>value(val<sp/>!=<sp/>0)<sp/>{}</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral"><sp/><sp/>bool<sp/>operator&gt;(int<sp/>n)<sp/>const<sp/>{<sp/>return<sp/>value<sp/>&gt;<sp/>Bool(n).value;<sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/>Bool<sp/>operator+(const<sp/>Bool&amp;<sp/>rhs)<sp/>const<sp/>{<sp/>return<sp/>Bool(value<sp/>+<sp/>rhs.value);<sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="398"><highlight class="stringliteral"><sp/><sp/>bool<sp/>operator==(const<sp/>Bool&amp;<sp/>rhs)<sp/>const<sp/>{<sp/>return<sp/>value<sp/>==<sp/>rhs.value;<sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral"><sp/><sp/>bool<sp/>value;</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral">//<sp/>Enables<sp/>Bool<sp/>to<sp/>be<sp/>used<sp/>in<sp/>assertions.</highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/>const<sp/>Bool&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral"><sp/><sp/>return<sp/>os<sp/>&lt;&lt;<sp/>(x.value<sp/>?<sp/>&quot;true&quot;<sp/>:<sp/>&quot;false&quot;);</highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="407"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="408"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">TestsForArity(n):</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>tests<sp/>for<sp/>n-ary<sp/>predicate<sp/>assertions.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>map<sp/>that<sp/>defines<sp/>the<sp/>values<sp/>used<sp/>in<sp/>the<sp/>template<sp/>for<sp/>the<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>DEFS<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;n&apos;</highlight><highlight class="normal"><sp/>:<sp/>n,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;es&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;e%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;vs&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;vts&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;#v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;tvs&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;T%s<sp/>v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;int_vs&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;int<sp/>v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Bool_vs&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;Bool<sp/>v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;types&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;typename<sp/>T%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;,<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;v_sum&apos;</highlight><highlight class="normal"><sp/>:<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;<sp/>+<sp/>&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;arity&apos;</highlight><highlight class="normal"><sp/>:<sp/>Arity(n),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;Arity&apos;</highlight><highlight class="normal"><sp/>:<sp/>Title(Arity(n)),</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>tests<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;//<sp/>Sample<sp/>functions/functors<sp/>for<sp/>testing<sp/>%(arity)s<sp/>predicate<sp/>assertions.</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral">//<sp/>A<sp/>%(arity)s<sp/>predicate<sp/>function.</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral">template<sp/>&lt;%(types)s&gt;</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral">bool<sp/>PredFunction%(n)s(%(tvs)s)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral"><sp/><sp/>return<sp/>%(v_sum)s<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="437"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral">//<sp/>The<sp/>following<sp/>two<sp/>functions<sp/>are<sp/>needed<sp/>to<sp/>circumvent<sp/>a<sp/>bug<sp/>in</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral">//<sp/>gcc<sp/>2.95.3,<sp/>which<sp/>sometimes<sp/>has<sp/>problem<sp/>with<sp/>the<sp/>above<sp/>template</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral">//<sp/>function.</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral">bool<sp/>PredFunction%(n)sInt(%(int_vs)s)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral"><sp/><sp/>return<sp/>%(v_sum)s<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="444"><highlight class="stringliteral">bool<sp/>PredFunction%(n)sBool(%(Bool_vs)s)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="stringliteral"><sp/><sp/>return<sp/>%(v_sum)s<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="447"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="450"><highlight class="stringliteral">//<sp/>A<sp/>%(arity)s<sp/>predicate<sp/>functor.</highlight></codeline>
<codeline lineno="451"><highlight class="stringliteral">struct<sp/>PredFunctor%(n)s<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="stringliteral"><sp/><sp/>template<sp/>&lt;%(types)s&gt;</highlight></codeline>
<codeline lineno="453"><highlight class="stringliteral"><sp/><sp/>bool<sp/>operator()(&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;const<sp/>T%s&amp;<sp/>v%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="456"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>%(v_sum)s<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="462"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="465"><highlight class="stringliteral">//<sp/>A<sp/>%(arity)s<sp/>predicate-formatter<sp/>function.</highlight></codeline>
<codeline lineno="466"><highlight class="stringliteral">template<sp/>&lt;%(types)s&gt;</highlight></codeline>
<codeline lineno="467"><highlight class="stringliteral">testing::AssertionResult<sp/>PredFormatFunction%(n)s(&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;const<sp/>char*<sp/>e%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="470"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="473"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T%s&amp;<sp/>v%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="stringliteral"><sp/><sp/>if<sp/>(PredFunction%(n)s(%(vs)s))</highlight></codeline>
<codeline lineno="477"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionSuccess();</highlight></codeline>
<codeline lineno="478"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="479"><highlight class="stringliteral"><sp/><sp/>return<sp/>testing::AssertionFailure()</highlight></codeline>
<codeline lineno="480"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;e%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&apos;<sp/>&lt;&lt;<sp/>&quot;<sp/>+<sp/>&quot;<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="485"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>positive,<sp/>but<sp/>evaluates<sp/>to<sp/>&quot;</highlight></codeline>
<codeline lineno="486"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>%(v_sum)s<sp/>&lt;&lt;<sp/>&quot;.&quot;;</highlight></codeline>
<codeline lineno="487"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="488"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="491"><highlight class="stringliteral">//<sp/>A<sp/>%(arity)s<sp/>predicate-formatter<sp/>functor.</highlight></codeline>
<codeline lineno="492"><highlight class="stringliteral">struct<sp/>PredFormatFunctor%(n)s<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="stringliteral"><sp/><sp/>template<sp/>&lt;%(types)s&gt;</highlight></codeline>
<codeline lineno="494"><highlight class="stringliteral"><sp/><sp/>testing::AssertionResult<sp/>operator()(&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;const<sp/>char*<sp/>e%s&apos;</highlight><highlight class="normal">,<sp/>sep=</highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="497"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;,</highlight></codeline>
<codeline lineno="500"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T%s&amp;<sp/>v%s&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>PredFormatFunction%(n)s(%(es)s,<sp/>%(vs)s);</highlight></codeline>
<codeline lineno="504"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="506"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="509"><highlight class="stringliteral">//<sp/>Tests<sp/>for<sp/>{EXPECT|ASSERT}_PRED_FORMAT%(n)s.</highlight></codeline>
<codeline lineno="510"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="511"><highlight class="stringliteral">class<sp/>Predicate%(n)sTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="stringliteral"><sp/>protected:</highlight></codeline>
<codeline lineno="513"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>expected_to_finish_<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="515"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>finished_<sp/>=<sp/>false;&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="518"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;n%s_<sp/>=<sp/>&apos;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;0;</highlight></codeline>
<codeline lineno="519"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="523"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>TearDown()<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>Verifies<sp/>that<sp/>each<sp/>of<sp/>the<sp/>predicate&apos;s<sp/>arguments<sp/>was<sp/>evaluated</highlight></codeline>
<codeline lineno="525"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>exactly<sp/>once.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join([</highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="528"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>n%s_)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="529"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;The<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>evaluate<sp/>argument<sp/>%s<sp/>&quot;</highlight></codeline>
<codeline lineno="530"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;exactly<sp/>once.&quot;;&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>(i,<sp/>i<sp/>+<sp/>1)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>OneTo(n)])</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="533"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="534"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>Verifies<sp/>that<sp/>the<sp/>control<sp/>flow<sp/>in<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected.</highlight></codeline>
<codeline lineno="535"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(expected_to_finish_<sp/>&amp;&amp;<sp/>!finished_)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/>&quot;The<sp/>predicate<sp/>assertion<sp/>unexpactedly<sp/>aborted<sp/>the<sp/>test.&quot;;</highlight></codeline>
<codeline lineno="537"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(!expected_to_finish_<sp/>&amp;&amp;<sp/>finished_)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/>&quot;The<sp/>failed<sp/>predicate<sp/>assertion<sp/>didn&apos;t<sp/>abort<sp/>the<sp/>test<sp/>&quot;</highlight></codeline>
<codeline lineno="539"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;as<sp/>expected.&quot;;</highlight></codeline>
<codeline lineno="540"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="stringliteral"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="543"><highlight class="stringliteral"><sp/><sp/>//<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>function<sp/>is<sp/>expected<sp/>to<sp/>run<sp/>to<sp/>finish.</highlight></codeline>
<codeline lineno="544"><highlight class="stringliteral"><sp/><sp/>static<sp/>bool<sp/>expected_to_finish_;</highlight></codeline>
<codeline lineno="545"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="546"><highlight class="stringliteral"><sp/><sp/>//<sp/>true<sp/>iff<sp/>the<sp/>test<sp/>function<sp/>did<sp/>run<sp/>to<sp/>finish.</highlight></codeline>
<codeline lineno="547"><highlight class="stringliteral"><sp/><sp/>static<sp/>bool<sp/>finished_;</highlight></codeline>
<codeline lineno="548"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="551"><highlight class="stringliteral"><sp/><sp/>static<sp/>int<sp/>n%s_;&quot;&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="554"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="555"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="556"><highlight class="stringliteral">bool<sp/>Predicate%(n)sTest::expected_to_finish_;</highlight></codeline>
<codeline lineno="557"><highlight class="stringliteral">bool<sp/>Predicate%(n)sTest::finished_;</highlight></codeline>
<codeline lineno="558"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;int<sp/>Predicate%%(n)sTest::n%s_;</highlight></codeline>
<codeline lineno="561"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal">)<sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="564"><highlight class="stringliteral">typedef<sp/>Predicate%(n)sTest<sp/>EXPECT_PRED_FORMAT%(n)sTest;</highlight></codeline>
<codeline lineno="565"><highlight class="stringliteral">typedef<sp/>Predicate%(n)sTest<sp/>ASSERT_PRED_FORMAT%(n)sTest;</highlight></codeline>
<codeline lineno="566"><highlight class="stringliteral">typedef<sp/>Predicate%(n)sTest<sp/>EXPECT_PRED%(n)sTest;</highlight></codeline>
<codeline lineno="567"><highlight class="stringliteral">typedef<sp/>Predicate%(n)sTest<sp/>ASSERT_PRED%(n)sTest;</highlight></codeline>
<codeline lineno="568"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GenTest(use_format,<sp/>use_assert,<sp/>expect_failure,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_functor,<sp/>use_user_type):</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>test<sp/>for<sp/>a<sp/>predicate<sp/>assertion<sp/>macro.</highlight></codeline>
<codeline lineno="573"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="574"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Args:</highlight></codeline>
<codeline lineno="575"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>use_format:<sp/><sp/><sp/><sp/><sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>is<sp/>a<sp/>*_PRED_FORMAT*.</highlight></codeline>
<codeline lineno="576"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>use_assert:<sp/><sp/><sp/><sp/><sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>is<sp/>a<sp/>ASSERT_*.</highlight></codeline>
<codeline lineno="577"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>expect_failure:<sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>is<sp/>expected<sp/>to<sp/>fail.</highlight></codeline>
<codeline lineno="578"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>use_functor:<sp/><sp/><sp/><sp/>true<sp/>iff<sp/>the<sp/>first<sp/>argument<sp/>of<sp/>the<sp/>assertion<sp/>is</highlight></codeline>
<codeline lineno="579"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>functor<sp/>(as<sp/>opposed<sp/>to<sp/>a<sp/>function)</highlight></codeline>
<codeline lineno="580"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>use_user_type:<sp/><sp/>true<sp/>iff<sp/>the<sp/>predicate<sp/>functor/function<sp/>takes</highlight></codeline>
<codeline lineno="581"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argument(s)<sp/>of<sp/>a<sp/>user-defined<sp/>type.</highlight></codeline>
<codeline lineno="582"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="583"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Example:</highlight></codeline>
<codeline lineno="584"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="585"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>GenTest(1,<sp/>0,<sp/>0,<sp/>1,<sp/>0)<sp/>returns<sp/>a<sp/>test<sp/>that<sp/>tests<sp/>the<sp/>behavior</highlight></codeline>
<codeline lineno="586"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>a<sp/>successful<sp/>EXPECT_PRED_FORMATn()<sp/>that<sp/>takes<sp/>a<sp/>functor</highlight></codeline>
<codeline lineno="587"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>whose<sp/>arguments<sp/>have<sp/>built-in<sp/>types.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_assert:</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assrt<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;ASSERT&apos;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>&apos;assert&apos;<sp/>is<sp/>reserved,<sp/>so<sp/>we<sp/>cannot<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>that<sp/>identifier<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assrt<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;EXPECT&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>assertion<sp/>=<sp/>assrt<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;_PRED&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_format:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred_format<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;PredFormat&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assertion<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;_FORMAT&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred_format<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Pred&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>assertion<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;%(n)s&apos;</highlight><highlight class="normal"><sp/>%<sp/>DEFS</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_functor:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred_format_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;functor&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred_format<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;Functor%(n)s()&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred_format_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;function&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pred_format<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;Function%(n)s&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>use_format:</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_user_type:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pred_format<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;Bool&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pred_format<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;Int&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>test_name<sp/>=<sp/>pred_format_type.title()</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_user_type:</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;user-defined<sp/>type<sp/>(Bool)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;OnUserType&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>expect_failure:</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Bool(n%s_++)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;Bool(++n%s_)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg_type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;built-in<sp/>type<sp/>(int)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_name<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;OnBuiltInType&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>expect_failure:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;n%s_++&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;++n%s_&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>expect_failure:</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_or_failed<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;failed&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_or_not<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;expected.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_name<sp/>+=<sp/><sp/></highlight><highlight class="stringliteral">&apos;Failure&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>successful_or_failed<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;successful&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_or_not<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;UNEXPECTED!&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test_name<sp/>+=<sp/><sp/></highlight><highlight class="stringliteral">&apos;Success&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>A<sp/>map<sp/>that<sp/>defines<sp/>the<sp/>values<sp/>used<sp/>in<sp/>the<sp/>test<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>defs<sp/>=<sp/>DEFS.copy()</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>defs.update({</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;assert&apos;</highlight><highlight class="normal"><sp/>:<sp/>assrt,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;assertion&apos;</highlight><highlight class="normal"><sp/>:<sp/>assertion,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;test_name&apos;</highlight><highlight class="normal"><sp/>:<sp/>test_name,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;pf_type&apos;</highlight><highlight class="normal"><sp/>:<sp/>pred_format_type,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;pf&apos;</highlight><highlight class="normal"><sp/>:<sp/>pred_format,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;arg_type&apos;</highlight><highlight class="normal"><sp/>:<sp/>arg_type,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;arg&apos;</highlight><highlight class="normal"><sp/>:<sp/>arg,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;successful&apos;</highlight><highlight class="normal"><sp/>:<sp/>successful_or_failed,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;expected&apos;</highlight><highlight class="normal"><sp/>:<sp/>expected_or_not,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="658"><highlight class="stringliteral">//<sp/>Tests<sp/>a<sp/>%(successful)s<sp/>%(assertion)s<sp/>where<sp/>the</highlight></codeline>
<codeline lineno="659"><highlight class="stringliteral">//<sp/>predicate-formatter<sp/>is<sp/>a<sp/>%(pf_type)s<sp/>on<sp/>a<sp/>%(arg_type)s.</highlight></codeline>
<codeline lineno="660"><highlight class="stringliteral">TEST_F(%(assertion)sTest,<sp/>%(test_name)s)<sp/>{&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>defs</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>indent<sp/>=<sp/>(len(assertion)<sp/>+<sp/>3)*</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>extra_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>expect_failure:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_indent<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>use_assert:</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="669"><highlight class="stringliteral"><sp/><sp/>expected_to_finish_<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="670"><highlight class="stringliteral"><sp/><sp/>EXPECT_FATAL_FAILURE({<sp/><sp/>//<sp/>NOLINT&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="673"><highlight class="stringliteral"><sp/><sp/>EXPECT_NONFATAL_FAILURE({<sp/><sp/>//<sp/>NOLINT&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>extra_indent<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/><sp/>%(assertion)s(%(pf)s&quot;&quot;&quot;</highlight><highlight class="normal"><sp/>%<sp/>defs</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>=<sp/>test<sp/>%<sp/>defs</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>+=<sp/>Iter(n,<sp/></highlight><highlight class="stringliteral">&apos;,\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>indent<sp/>+<sp/>extra_indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;%(arg)s&apos;</highlight><highlight class="normal"><sp/>%<sp/>defs)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;);\n&apos;</highlight><highlight class="normal"><sp/>+<sp/>extra_indent<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>finished_<sp/>=<sp/>true;\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>expect_failure:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;<sp/><sp/>},<sp/>&quot;&quot;);\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>test<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;}\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">#<sp/>Generates<sp/>tests<sp/>for<sp/>all<sp/>2**6<sp/>=<sp/>64<sp/>combinations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>tests<sp/>+=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join([GenTest(use_format,<sp/>use_assert,<sp/>expect_failure,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_functor,<sp/>use_user_type)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>use_format<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[0,<sp/>1]</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>use_assert<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[0,<sp/>1]</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>expect_failure<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[0,<sp/>1]</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>use_functor<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[0,<sp/>1]</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>use_user_type<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[0,<sp/>1]</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>])</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tests</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">UnitTestPostamble():</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>postamble<sp/>for<sp/>the<sp/>tests.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">GenerateUnitTest(n):</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>the<sp/>tests<sp/>for<sp/>up-to<sp/>n-ary<sp/>predicate<sp/>assertions.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>GenerateFile(UNIT_TEST,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnitTestPreamble()</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join([TestsForArity(i)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>OneTo(n)])</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>UnitTestPostamble())</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_Main():</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;The<sp/>entry<sp/>point<sp/>of<sp/>the<sp/>script.<sp/><sp/>Generates<sp/>the<sp/>header<sp/>file<sp/>and<sp/>its</highlight></codeline>
<codeline lineno="717"><highlight class="stringliteral"><sp/><sp/>unit<sp/>test.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>len(sys.argv)<sp/>!=<sp/>2:</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/>__doc__</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">print</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;Author:<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>__author__</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>sys.exit(1)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>int(sys.argv[1])</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>GenerateHeader(n)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>GenerateUnitTest(n)</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>_Main()</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googletest/scripts/gen_gtest_pred_impl.py"/>
  </compounddef>
</doxygen>
