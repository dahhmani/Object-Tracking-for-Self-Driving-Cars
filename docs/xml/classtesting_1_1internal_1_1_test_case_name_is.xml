<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtesting_1_1internal_1_1_test_case_name_is" kind="class" language="C++" prot="public">
    <compoundname>testing::internal::TestCaseNameIs</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtesting_1_1internal_1_1_test_case_name_is_1a4e780c6613a81c4f14fc57e00c61474b" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string testing::internal::TestCaseNameIs::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="4487" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4487" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1internal_1_1_test_case_name_is_1a7c983707f4cfe7f36dbabc95da5113c4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::internal::TestCaseNameIs::TestCaseNameIs</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>TestCaseNameIs</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="4478" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4478" bodyend="4479"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_test_case_name_is_1aa96c4e9facbaa7043c8f0b34465d1eae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::TestCaseNameIs::operator()</definition>
        <argsstring>(const TestCase *test_case) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_case" kindref="compound">TestCase</ref> *</type>
          <declname>test_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="4482" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4482" bodyend="4484"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="vendor/googletest/googletest/src/gtest.cc" line="4475" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="4475" bodyend="4488"/>
    <listofallmembers>
      <member refid="classtesting_1_1internal_1_1_test_case_name_is_1a4e780c6613a81c4f14fc57e00c61474b" prot="private" virt="non-virtual"><scope>testing::internal::TestCaseNameIs</scope><name>name_</name></member>
      <member refid="classtesting_1_1internal_1_1_test_case_name_is_1aa96c4e9facbaa7043c8f0b34465d1eae" prot="public" virt="non-virtual"><scope>testing::internal::TestCaseNameIs</scope><name>operator()</name></member>
      <member refid="classtesting_1_1internal_1_1_test_case_name_is_1a7c983707f4cfe7f36dbabc95da5113c4" prot="public" virt="non-virtual"><scope>testing::internal::TestCaseNameIs</scope><name>TestCaseNameIs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
