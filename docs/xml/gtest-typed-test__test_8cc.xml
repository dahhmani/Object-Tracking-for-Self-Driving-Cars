<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gtest-typed-test__test_8cc" kind="file" language="C++">
    <compoundname>gtest-typed-test_test.cc</compoundname>
    <includes refid="gtest-typed-test__test_8h" local="yes">test/gtest-typed-test_test.h</includes>
    <includes local="no">set</includes>
    <includes local="no">vector</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gtest__all__test_8cc" local="yes">vendor/googletest/googletest/test/gtest_all_test.cc</includedby>
    <incdepgraph>
      <node id="5959">
        <label>sys/stat.h</label>
      </node>
      <node id="5979">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="5952" relation="include">
        </childnode>
      </node>
      <node id="5973">
        <label>iomanip</label>
      </node>
      <node id="5948">
        <label>limits</label>
      </node>
      <node id="5986">
        <label>assert.h</label>
      </node>
      <node id="5965">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="5984">
        <label>iterator</label>
      </node>
      <node id="5972">
        <label>float.h</label>
      </node>
      <node id="5990">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="5955">
        <label>stdlib.h</label>
      </node>
      <node id="5977">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="5957" relation="include">
        </childnode>
        <childnode refid="5963" relation="include">
        </childnode>
        <childnode refid="5952" relation="include">
        </childnode>
      </node>
      <node id="5991">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="5992" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5977" relation="include">
        </childnode>
      </node>
      <node id="5963">
        <label>string</label>
      </node>
      <node id="5974">
        <label>map</label>
      </node>
      <node id="5989">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="5983" relation="include">
        </childnode>
        <childnode refid="5952" relation="include">
        </childnode>
      </node>
      <node id="5954">
        <label>stddef.h</label>
      </node>
      <node id="5994">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="5949">
        <label>ostream</label>
      </node>
      <node id="5966">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="5980">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="5981" relation="include">
        </childnode>
      </node>
      <node id="5958">
        <label>sys/types.h</label>
      </node>
      <node id="5957">
        <label>string.h</label>
      </node>
      <node id="5970">
        <label>typeinfo</label>
      </node>
      <node id="5967">
        <label>unistd.h</label>
      </node>
      <node id="5950">
        <label>vector</label>
      </node>
      <node id="5988">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="5946">
        <label>test/gtest-typed-test_test.h</label>
        <link refid="gtest-typed-test__test_8h_source"/>
        <childnode refid="5947" relation="include">
        </childnode>
      </node>
      <node id="5976">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="5948" relation="include">
        </childnode>
        <childnode refid="5952" relation="include">
        </childnode>
      </node>
      <node id="5964">
        <label>utility</label>
      </node>
      <node id="5962">
        <label>sstream</label>
      </node>
      <node id="5985">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="5955" relation="include">
        </childnode>
        <childnode refid="5986" relation="include">
        </childnode>
        <childnode refid="5952" relation="include">
        </childnode>
      </node>
      <node id="5945">
        <label>vendor/googletest/googletest/test/gtest-typed-test_test.cc</label>
        <link refid="gtest-typed-test__test_8cc"/>
        <childnode refid="5946" relation="include">
        </childnode>
        <childnode refid="5975" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5947" relation="include">
        </childnode>
      </node>
      <node id="5992">
        <label>iosfwd</label>
      </node>
      <node id="5978">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="5977" relation="include">
        </childnode>
      </node>
      <node id="5961">
        <label>iostream</label>
      </node>
      <node id="5971">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="5964" relation="include">
        </childnode>
      </node>
      <node id="5947">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="5948" relation="include">
        </childnode>
        <childnode refid="5949" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5977" relation="include">
        </childnode>
        <childnode refid="5980" relation="include">
        </childnode>
        <childnode refid="5976" relation="include">
        </childnode>
        <childnode refid="5982" relation="include">
        </childnode>
        <childnode refid="5987" relation="include">
        </childnode>
        <childnode refid="5990" relation="include">
        </childnode>
        <childnode refid="5991" relation="include">
        </childnode>
        <childnode refid="5993" relation="include">
        </childnode>
        <childnode refid="5994" relation="include">
        </childnode>
      </node>
      <node id="5968">
        <label>strings.h</label>
      </node>
      <node id="5953">
        <label>ctype.h</label>
      </node>
      <node id="5993">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="5952" relation="include">
        </childnode>
        <childnode refid="5979" relation="include">
        </childnode>
      </node>
      <node id="5952">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="5953" relation="include">
        </childnode>
        <childnode refid="5954" relation="include">
        </childnode>
        <childnode refid="5955" relation="include">
        </childnode>
        <childnode refid="5956" relation="include">
        </childnode>
        <childnode refid="5957" relation="include">
        </childnode>
        <childnode refid="5958" relation="include">
        </childnode>
        <childnode refid="5959" relation="include">
        </childnode>
        <childnode refid="5960" relation="include">
        </childnode>
        <childnode refid="5961" relation="include">
        </childnode>
        <childnode refid="5962" relation="include">
        </childnode>
        <childnode refid="5963" relation="include">
        </childnode>
        <childnode refid="5964" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5965" relation="include">
        </childnode>
        <childnode refid="5966" relation="include">
        </childnode>
        <childnode refid="5967" relation="include">
        </childnode>
        <childnode refid="5968" relation="include">
        </childnode>
        <childnode refid="5969" relation="include">
        </childnode>
        <childnode refid="5970" relation="include">
        </childnode>
        <childnode refid="5971" relation="include">
        </childnode>
      </node>
      <node id="5951">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="5952" relation="include">
        </childnode>
        <childnode refid="5953" relation="include">
        </childnode>
        <childnode refid="5972" relation="include">
        </childnode>
        <childnode refid="5957" relation="include">
        </childnode>
        <childnode refid="5973" relation="include">
        </childnode>
        <childnode refid="5948" relation="include">
        </childnode>
        <childnode refid="5974" relation="include">
        </childnode>
        <childnode refid="5975" relation="include">
        </childnode>
        <childnode refid="5963" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5976" relation="include">
        </childnode>
        <childnode refid="5977" relation="include">
        </childnode>
        <childnode refid="5978" relation="include">
        </childnode>
        <childnode refid="5979" relation="include">
        </childnode>
      </node>
      <node id="5983">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="5953" relation="include">
        </childnode>
        <childnode refid="5984" relation="include">
        </childnode>
        <childnode refid="5975" relation="include">
        </childnode>
        <childnode refid="5964" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5985" relation="include">
        </childnode>
        <childnode refid="5952" relation="include">
        </childnode>
        <childnode refid="5987" relation="include">
        </childnode>
      </node>
      <node id="5975">
        <label>set</label>
      </node>
      <node id="5982">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="5952" relation="include">
        </childnode>
        <childnode refid="5964" relation="include">
        </childnode>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5983" relation="include">
        </childnode>
        <childnode refid="5989" relation="include">
        </childnode>
      </node>
      <node id="5960">
        <label>algorithm</label>
      </node>
      <node id="5969">
        <label>regex.h</label>
      </node>
      <node id="5956">
        <label>stdio.h</label>
      </node>
      <node id="5981">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5956" relation="include">
        </childnode>
      </node>
      <node id="5987">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="5949" relation="include">
        </childnode>
        <childnode refid="5962" relation="include">
        </childnode>
        <childnode refid="5963" relation="include">
        </childnode>
        <childnode refid="5964" relation="include">
        </childnode>
        <childnode refid="5950" relation="include">
        </childnode>
        <childnode refid="5952" relation="include">
        </childnode>
        <childnode refid="5951" relation="include">
        </childnode>
        <childnode refid="5988" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_common_test" prot="public">CommonTest</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest-typed-test__test_8cc_1a7d2c906b58ca05100fcea4e00858d2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(DummyTest, TypedTestsAreNotSupportedOnThisPlatform)</argsstring>
        <name>TEST</name>
        <param>
          <type>DummyTest</type>
        </param>
        <param>
          <type>TypedTestsAreNotSupportedOnThisPlatform</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest-typed-test_test.cc" line="378" column="1" bodyfile="vendor/googletest/googletest/test/gtest-typed-test_test.cc" bodystart="378" bodyend="378"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test/gtest-typed-test_test.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>testing<sp/>that<sp/>SetUpTestCase()/TearDownTestCase(),<sp/>fixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor/dtor,<sp/>and<sp/>SetUp()/TearDown()<sp/>work<sp/>correctly<sp/>in<sp/>typed<sp/>tests<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type-parameterized<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="45" refid="class_common_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_common_test" kindref="compound">CommonTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>some<sp/>technical<sp/>reason,<sp/>SetUpTestCase()<sp/>and<sp/>TearDownTestCase()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>public.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestCase()<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(5);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestCase()<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>shared_;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>&apos;protected:&apos;<sp/>is<sp/>optional.<sp/><sp/>There&apos;s<sp/>no<sp/>harm<sp/>in<sp/>making<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>members<sp/>of<sp/>this<sp/>fixture<sp/>class<sp/>template<sp/>public.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>used<sp/>to<sp/>use<sp/>std::list<sp/>here,<sp/>but<sp/>switched<sp/>to<sp/>std::vector<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC&apos;s<sp/>&lt;list&gt;<sp/>doesn&apos;t<sp/>compile<sp/>cleanly<sp/>with<sp/>/W4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>Vector;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::set&lt;int&gt;<sp/>IntSet;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="class_common_test" kindref="compound">CommonTest</ref>()<sp/>:<sp/>value_(1)<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="class_common_test" kindref="compound">CommonTest</ref>()<sp/>{<sp/>EXPECT_EQ(3,<sp/>value_);<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>value_);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>value_++;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDown()<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/>value_);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>value_++;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/>shared_;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">T*<sp/><ref refid="class_common_test" kindref="compound">CommonTest&lt;T&gt;::shared_</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>#ifdef<sp/>block<sp/>tests<sp/>typed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TYPED_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Types;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetUpTestCase()/TearDownTestCase(),<sp/>fixture<sp/>ctor/dtor,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>SetUp()/TearDown()<sp/>work<sp/>correctly<sp/>in<sp/>typed<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;char,<sp/>int&gt;<sp/>TwoTypes;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">TYPED_TEST_CASE(<ref refid="class_common_test" kindref="compound">CommonTest</ref>,<sp/>TwoTypes);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">TYPED_TEST(<ref refid="class_common_test" kindref="compound">CommonTest</ref>,<sp/>ValuesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>TestFixture::<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*TestFixture::shared_);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Typedefs<sp/>in<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>be<sp/>visited<sp/>via<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;typename<sp/>TestFixture::&quot;<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TestFixture::Vector<sp/>empty;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>empty.size());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TestFixture::IntSet<sp/>empty2;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0U,<sp/>empty2.size());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>must<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;this&apos;,<sp/>as<sp/>required<sp/>by<sp/>C++<sp/>for<sp/>class<sp/>templates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>test<sp/>makes<sp/>sure<sp/>shared_<sp/>is<sp/>not<sp/>deleted<sp/>after<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">TYPED_TEST(<ref refid="class_common_test" kindref="compound">CommonTest</ref>,<sp/>ValuesAreStillCorrect)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>also<sp/>be<sp/>visited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>via<sp/>&apos;this&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(this-&gt;shared_<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*this-&gt;shared_);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TypeParam<sp/>can<sp/>be<sp/>used<sp/>to<sp/>refer<sp/>to<sp/>the<sp/>type<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>EXPECT_EQ(static_cast&lt;TypeParam&gt;(2),<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>multiple<sp/>TYPED_TEST_CASE&apos;s<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>translation<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypedTest1<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>second<sp/>argument<sp/>of<sp/>TYPED_TEST_CASE<sp/>can<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>single<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">TYPED_TEST_CASE(TypedTest1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">TYPED_TEST(TypedTest1,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypedTest2<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>second<sp/>argument<sp/>of<sp/>TYPED_TEST_CASE<sp/>can<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Types&lt;...&gt;<sp/>type<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">TYPED_TEST_CASE(TypedTest2,<sp/>Types&lt;int&gt;);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>verifies<sp/>that<sp/>tests<sp/>from<sp/>different<sp/>typed<sp/>test<sp/>cases<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>share<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">TYPED_TEST(TypedTest2,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>typed<sp/>test<sp/>case<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">library1<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NumericTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;int,<sp/>long&gt;<sp/>NumericTypes;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">TYPED_TEST_CASE(NumericTest,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">TYPED_TEST(NumericTest,<sp/>DefaultIsZero)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>TypeParam());</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>library1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_TYPED_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>#ifdef<sp/>block<sp/>tests<sp/>type-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TYPED_TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Types;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::TypedTestCasePState;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>TypedTestCasePState.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypedTestCasePStateTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;A&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;B&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>TypedTestCasePState<sp/>state_;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(TypedTestCasePStateTest,<sp/>SucceedsForMatchingList)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tests<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>C&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_EQ(tests,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>tests));</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>the<sp/>order<sp/>of<sp/>the<sp/>tests<sp/>and<sp/>spaces<sp/>around<sp/>the<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>matter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(TypedTestCasePStateTest,<sp/>IgnoresOrderAndSpaces)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tests<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;A,C,<sp/><sp/><sp/>B&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>EXPECT_EQ(tests,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>tests));</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>TypedTestCasePStateTest<sp/>TypedTestCasePStateDeathTest;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(TypedTestCasePStateDeathTest,<sp/>DetectsDuplicates)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>A,<sp/>C&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.1.?:<sp/>Test<sp/>A<sp/>is<sp/>listed<sp/>more<sp/>than<sp/>once\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(TypedTestCasePStateDeathTest,<sp/>DetectsExtraTest)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>C,<sp/>D&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.1.?:<sp/>No<sp/>test<sp/>named<sp/>D<sp/>can<sp/>be<sp/>found<sp/>in<sp/>this<sp/>test<sp/>case\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(TypedTestCasePStateDeathTest,<sp/>DetectsMissedTest)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>C&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.1.?:<sp/>You<sp/>forgot<sp/>to<sp/>list<sp/>test<sp/>B\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>defining<sp/>a<sp/>test<sp/>for<sp/>a<sp/>parameterized<sp/>test<sp/>case<sp/>generates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>run-time<sp/>error<sp/>if<sp/>the<sp/>test<sp/>case<sp/>has<sp/>been<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(TypedTestCasePStateDeathTest,<sp/>DetectsTestAfterRegistration)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>state_.VerifyRegisteredTestNames(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;A,<sp/>B,<sp/>C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state_.AddTestName(</highlight><highlight class="stringliteral">&quot;foo.cc&quot;</highlight><highlight class="normal">,<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;FooTest&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;foo\\.cc.2.?:<sp/>Test<sp/>D<sp/>must<sp/>be<sp/>defined<sp/>before<sp/>REGISTER_TYPED_TEST_CASE_P&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\\(FooTest,<sp/>\\.\\.\\.\\)\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SetUpTestCase()/TearDownTestCase(),<sp/>fixture<sp/>ctor/dtor,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>SetUp()/TearDown()<sp/>work<sp/>correctly<sp/>in<sp/>type-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DerivedTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_common_test" kindref="compound">CommonTest</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">TYPED_TEST_CASE_P(DerivedTest);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">TYPED_TEST_P(DerivedTest,<sp/>ValuesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>TestFixture::<sp/>prefix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*TestFixture::shared_);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>must<sp/>be<sp/>visited<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;this&apos;,<sp/>as<sp/>required<sp/>by<sp/>C++<sp/>for<sp/>class<sp/>templates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>second<sp/>test<sp/>makes<sp/>sure<sp/>shared_<sp/>is<sp/>not<sp/>deleted<sp/>after<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">TYPED_TEST_P(DerivedTest,<sp/>ValuesAreStillCorrect)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>members<sp/>of<sp/>the<sp/>fixture<sp/>class<sp/>template<sp/>can<sp/>also<sp/>be<sp/>visited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>via<sp/>&apos;this&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>ASSERT_TRUE(this-&gt;shared_<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>*this-&gt;shared_);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>this-&gt;value_);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(DerivedTest,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValuesAreCorrect,<sp/>ValuesAreStillCorrect);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;short,<sp/>long&gt;<sp/>MyTwoTypes;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(My,<sp/>DerivedTest,<sp/>MyTwoTypes);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>multiple<sp/>TYPED_TEST_CASE_P&apos;s<sp/>can<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>translation<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypedTestP1<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">TYPED_TEST_CASE_P(TypedTestP1);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>that<sp/>the<sp/>code<sp/>between<sp/>TYPED_TEST_CASE_P()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TYPED_TEST_P()<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IntAfterTypedTestCaseP;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">TYPED_TEST_P(TypedTestP1,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="283"><highlight class="normal">TYPED_TEST_P(TypedTestP1,<sp/>B)<sp/>{}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>that<sp/>the<sp/>code<sp/>between<sp/>TYPED_TEST_P()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REGISTER_TYPED_TEST_CASE_P()<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IntBeforeRegisterTypedTestCaseP;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(TypedTestP1,<sp/>A,<sp/>B);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypedTestP2<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal">};</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">TYPED_TEST_CASE_P(TypedTestP2);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>verifies<sp/>that<sp/>tests<sp/>from<sp/>different<sp/>type-parameterized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>cases<sp/>can<sp/>share<sp/>the<sp/>same<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">TYPED_TEST_P(TypedTestP2,<sp/>A)<sp/>{}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(TypedTestP2,<sp/>A);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>code<sp/>between<sp/>TYPED_TEST_CASE_P()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REGISTER_TYPED_TEST_CASE_P()<sp/>is<sp/>not<sp/>enclosed<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">IntAfterTypedTestCaseP<sp/>after<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">IntBeforeRegisterTypedTestCaseP<sp/>before<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>last<sp/>argument<sp/>of<sp/>INSTANTIATE_TYPED_TEST_CASE_P()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>either<sp/>a<sp/>single<sp/>type<sp/>or<sp/>a<sp/>Types&lt;...&gt;<sp/>type<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(Int,<sp/>TypedTestP1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(Int,<sp/>TypedTestP2,<sp/>Types&lt;int&gt;);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>same<sp/>type-parameterized<sp/>test<sp/>case<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>more<sp/>than<sp/>once<sp/>in<sp/>the<sp/>same<sp/>translation<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(Double,<sp/>TypedTestP2,<sp/>Types&lt;double&gt;);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>same<sp/>type-parameterized<sp/>test<sp/>case<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>in<sp/>different<sp/>translation<sp/>units<sp/>linked<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(ContainerTest<sp/>is<sp/>also<sp/>instantiated<sp/>in<sp/>gtest-typed-test_test.cc.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;std::vector&lt;double&gt;,<sp/>std::set&lt;char&gt;<sp/>&gt;<sp/>MyContainers;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(My,<sp/>ContainerTest,<sp/>MyContainers);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>type-parameterized<sp/>test<sp/>case<sp/>can<sp/>be<sp/>defined<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiated<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">library2<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NumericTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal">};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">TYPED_TEST_CASE_P(NumericTest);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">TYPED_TEST_P(NumericTest,<sp/>DefaultIsZero)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>TypeParam());</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">TYPED_TEST_P(NumericTest,<sp/>ZeroIsLessThanOne)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>EXPECT_LT(TypeParam(0),<sp/>TypeParam(1));</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(NumericTest,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefaultIsZero,<sp/>ZeroIsLessThanOne);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;int,<sp/>double&gt;<sp/>NumericTypes;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(My,<sp/>NumericTest,<sp/>NumericTypes);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GetTestName()<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testing::UnitTest::GetInstance()-&gt;current_test_info()-&gt;name();</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>the<sp/>stripping<sp/>of<sp/>space<sp/>from<sp/>test<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TrimmedTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">Test</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="352"><highlight class="normal">TYPED_TEST_CASE_P(TrimmedTest);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test1)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test1&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test2)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test2&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test3)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test3&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test4)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test4&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal">TYPED_TEST_P(TrimmedTest,<sp/>Test5)<sp/>{<sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Test5&quot;</highlight><highlight class="normal">,<sp/>GetTestName());<sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>TrimmedTest,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>Test1,<sp/>Test2,Test3<sp/>,<sp/>Test4<sp/>,Test5<sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MyPair<sp/>{};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Be<sp/>sure<sp/>to<sp/>try<sp/>a<sp/>type<sp/>with<sp/>a<sp/>comma<sp/>in<sp/>its<sp/>name<sp/>just<sp/>in<sp/>case<sp/>it<sp/>matters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Types&lt;int,<sp/>double,<sp/>MyPair&lt;int,<sp/>int&gt;<sp/>&gt;<sp/>TrimTypes;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(My,<sp/>TrimmedTest,<sp/>TrimTypes);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>library2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_TYPED_TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(GTEST_HAS_TYPED_TEST)<sp/>&amp;&amp;<sp/>!defined(GTEST_HAS_TYPED_TEST_P)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>may<sp/>not<sp/>support<sp/>type-parameterized<sp/>tests<sp/>with<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compilers.<sp/>If<sp/>we<sp/>use<sp/>conditional<sp/>compilation<sp/>to<sp/>compile<sp/>out<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>referring<sp/>to<sp/>the<sp/>gtest_main<sp/>library,<sp/>MSVC<sp/>linker<sp/>will<sp/>not<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>library<sp/>at<sp/>all<sp/>and<sp/>consequently<sp/>complain<sp/>about<sp/>missing<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>point<sp/>defined<sp/>in<sp/>that<sp/>library<sp/>(fatal<sp/>error<sp/>LNK1561:<sp/>entry<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>defined).<sp/>This<sp/>dummy<sp/>test<sp/>keeps<sp/>gtest_main<sp/>linked<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">TEST(DummyTest,<sp/>TypedTestsAreNotSupportedOnThisPlatform)<sp/>{}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>#if<sp/>!defined(GTEST_HAS_TYPED_TEST)<sp/>&amp;&amp;<sp/>!defined(GTEST_HAS_TYPED_TEST_P)</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googletest/test/gtest-typed-test_test.cc"/>
  </compounddef>
</doxygen>
