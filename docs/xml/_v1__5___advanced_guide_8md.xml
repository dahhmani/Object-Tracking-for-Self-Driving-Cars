<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_v1__5___advanced_guide_8md" kind="file" language="Markdown">
    <compoundname>V1_5_AdvancedGuide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>that<sp/>you<sp/>have<sp/>read<sp/>[Primer](V1_5_Primer.md)<sp/>and<sp/>learned<sp/>how<sp/>to<sp/>write<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Google<sp/>Test,<sp/>it&apos;s<sp/>time<sp/>to<sp/>learn<sp/>some<sp/>new<sp/>tricks.<sp/>This<sp/>document</highlight></codeline>
<codeline><highlight class="normal">will<sp/>show<sp/>you<sp/>more<sp/>assertions<sp/>as<sp/>well<sp/>as<sp/>how<sp/>to<sp/>construct<sp/>complex</highlight></codeline>
<codeline><highlight class="normal">failure<sp/>messages,<sp/>propagate<sp/>fatal<sp/>failures,<sp/>reuse<sp/>and<sp/>speed<sp/>up<sp/>your</highlight></codeline>
<codeline><highlight class="normal">test<sp/>fixtures,<sp/>and<sp/>use<sp/>various<sp/>flags<sp/>with<sp/>your<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>More<sp/>Assertions<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>section<sp/>covers<sp/>some<sp/>less<sp/>frequently<sp/>used,<sp/>but<sp/>still<sp/>significant,</highlight></codeline>
<codeline><highlight class="normal">assertions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Explicit<sp/>Success<sp/>and<sp/>Failure<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">These<sp/>three<sp/>assertions<sp/>do<sp/>not<sp/>actually<sp/>test<sp/>a<sp/>value<sp/>or<sp/>expression.<sp/>Instead,</highlight></codeline>
<codeline><highlight class="normal">they<sp/>generate<sp/>a<sp/>success<sp/>or<sp/>failure<sp/>directly.<sp/>Like<sp/>the<sp/>macros<sp/>that<sp/>actually</highlight></codeline>
<codeline><highlight class="normal">perform<sp/>a<sp/>test,<sp/>you<sp/>may<sp/>stream<sp/>a<sp/>custom<sp/>failure<sp/>message<sp/>into<sp/>the<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`SUCCEED();`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-------------|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Generates<sp/>a<sp/>success.<sp/>This<sp/>does<sp/>NOT<sp/>make<sp/>the<sp/>overall<sp/>test<sp/>succeed.<sp/>A<sp/>test<sp/>is</highlight></codeline>
<codeline><highlight class="normal">considered<sp/>successful<sp/>only<sp/>if<sp/>none<sp/>of<sp/>its<sp/>assertions<sp/>fail<sp/>during<sp/>its<sp/>execution.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note:<sp/>`SUCCEED()`<sp/>is<sp/>purely<sp/>documentary<sp/>and<sp/>currently<sp/>doesn&apos;t<sp/>generate<sp/>any</highlight></codeline>
<codeline><highlight class="normal">user-visible<sp/>output.<sp/>However,<sp/>we<sp/>may<sp/>add<sp/>`SUCCEED()`<sp/>messages<sp/>to<sp/>Google<sp/>Test&apos;s</highlight></codeline>
<codeline><highlight class="normal">output<sp/>in<sp/>the<sp/>future.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`FAIL();`<sp/><sp/>|<sp/>`ADD_FAILURE();`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-----------|:-----------------|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`FAIL*`<sp/>generates<sp/>a<sp/>fatal<sp/>failure<sp/>while<sp/>`ADD_FAILURE*`<sp/>generates<sp/>a<sp/>nonfatal</highlight></codeline>
<codeline><highlight class="normal">failure.<sp/>These<sp/>are<sp/>useful<sp/>when<sp/>control<sp/>flow,<sp/>rather<sp/>than<sp/>a<sp/>Boolean<sp/>expression,</highlight></codeline>
<codeline><highlight class="normal">deteremines<sp/>the<sp/>test&apos;s<sp/>success<sp/>or<sp/>failure.<sp/>For<sp/>example,<sp/>you<sp/>might<sp/>want<sp/>to<sp/>write</highlight></codeline>
<codeline><highlight class="normal">something<sp/>like:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">switch(expression)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>case<sp/>1:<sp/>...<sp/>some<sp/>checks<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>case<sp/>2:<sp/>...<sp/>some<sp/>other<sp/>checks</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>default:<sp/>FAIL()<sp/>&lt;&lt;<sp/>&quot;We<sp/>shouldn&apos;t<sp/>get<sp/>here.&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Exception<sp/>Assertions<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">These<sp/>are<sp/>for<sp/>verifying<sp/>that<sp/>a<sp/>piece<sp/>of<sp/>code<sp/>throws<sp/>(or<sp/>does<sp/>not</highlight></codeline>
<codeline><highlight class="normal">throw)<sp/>an<sp/>exception<sp/>of<sp/>the<sp/>given<sp/>type:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_THROW(`_statement_,<sp/>_exception\_type_`);`<sp/><sp/>|<sp/>`EXPECT_THROW(`_statement_,<sp/>_exception\_type_`);`<sp/><sp/>|<sp/>_statement_<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>the<sp/>given<sp/>type<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_ANY_THROW(`_statement_`);`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>`EXPECT_ANY_THROW(`_statement_`);`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>_statement_<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>any<sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_NO_THROW(`_statement_`);`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>`EXPECT_NO_THROW(`_statement_`);`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>_statement_<sp/>doesn&apos;t<sp/>throw<sp/>any<sp/>exception<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Examples:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">ASSERT_THROW(Foo(5),<sp/>bar_exception);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">EXPECT_NO_THROW({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bar(&amp;n);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>version<sp/>1.1.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Predicate<sp/>Assertions<sp/>for<sp/>Better<sp/>Error<sp/>Messages<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Even<sp/>though<sp/>Google<sp/>Test<sp/>has<sp/>a<sp/>rich<sp/>set<sp/>of<sp/>assertions,<sp/>they<sp/>can<sp/>never<sp/>be</highlight></codeline>
<codeline><highlight class="normal">complete,<sp/>as<sp/>it&apos;s<sp/>impossible<sp/>(nor<sp/>a<sp/>good<sp/>idea)<sp/>to<sp/>anticipate<sp/>all<sp/>the<sp/>scenarios</highlight></codeline>
<codeline><highlight class="normal">a<sp/>user<sp/>might<sp/>run<sp/>into.<sp/>Therefore,<sp/>sometimes<sp/>a<sp/>user<sp/>has<sp/>to<sp/>use<sp/>`EXPECT_TRUE()`</highlight></codeline>
<codeline><highlight class="normal">to<sp/>check<sp/>a<sp/>complex<sp/>expression,<sp/>for<sp/>lack<sp/>of<sp/>a<sp/>better<sp/>macro.<sp/>This<sp/>has<sp/>the<sp/>problem</highlight></codeline>
<codeline><highlight class="normal">of<sp/>not<sp/>showing<sp/>you<sp/>the<sp/>values<sp/>of<sp/>the<sp/>parts<sp/>of<sp/>the<sp/>expression,<sp/>making<sp/>it<sp/>hard<sp/>to</highlight></codeline>
<codeline><highlight class="normal">understand<sp/>what<sp/>went<sp/>wrong.<sp/>As<sp/>a<sp/>workaround,<sp/>some<sp/>users<sp/>choose<sp/>to<sp/>construct<sp/>the</highlight></codeline>
<codeline><highlight class="normal">failure<sp/>message<sp/>by<sp/>themselves,<sp/>streaming<sp/>it<sp/>into<sp/>`EXPECT_TRUE()`.<sp/>However,<sp/>this</highlight></codeline>
<codeline><highlight class="normal">is<sp/>awkward<sp/>especially<sp/>when<sp/>the<sp/>expression<sp/>has<sp/>side-effects<sp/>or<sp/>is<sp/>expensive<sp/>to</highlight></codeline>
<codeline><highlight class="normal">evaluate.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>gives<sp/>you<sp/>three<sp/>different<sp/>options<sp/>to<sp/>solve<sp/>this<sp/>problem:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Using<sp/>an<sp/>Existing<sp/>Boolean<sp/>Function<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>already<sp/>have<sp/>a<sp/>function<sp/>or<sp/>a<sp/>functor<sp/>that<sp/>returns<sp/>`bool`<sp/>(or<sp/>a<sp/>type</highlight></codeline>
<codeline><highlight class="normal">that<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>`bool`),<sp/>you<sp/>can<sp/>use<sp/>it<sp/>in<sp/>a<sp/>_predicate</highlight></codeline>
<codeline><highlight class="normal">assertion_<sp/>to<sp/>get<sp/>the<sp/>function<sp/>arguments<sp/>printed<sp/>for<sp/>free:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_PRED1(`_pred1,<sp/>val1_`);`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>`EXPECT_PRED1(`_pred1,<sp/>val1_`);`<sp/>|<sp/>_pred1(val1)_<sp/>returns<sp/>true<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_PRED2(`_pred2,<sp/>val1,<sp/>val2_`);`<sp/>|<sp/>`EXPECT_PRED2(`_pred2,<sp/>val1,<sp/>val2_`);`<sp/>|<sp/><sp/>_pred2(val1,<sp/>val2)_<sp/>returns<sp/>true<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>above,<sp/>_predn_<sp/>is<sp/>an<sp/>_n_-ary<sp/>predicate<sp/>function<sp/>or<sp/>functor,<sp/>where</highlight></codeline>
<codeline><highlight class="normal">_val1_,<sp/>_val2_,<sp/>...,<sp/>and<sp/>_valn_<sp/>are<sp/>its<sp/>arguments.<sp/>The<sp/>assertion<sp/>succeeds</highlight></codeline>
<codeline><highlight class="normal">if<sp/>the<sp/>predicate<sp/>returns<sp/>`true`<sp/>when<sp/>applied<sp/>to<sp/>the<sp/>given<sp/>arguments,<sp/>and<sp/>fails</highlight></codeline>
<codeline><highlight class="normal">otherwise.<sp/>When<sp/>the<sp/>assertion<sp/>fails,<sp/>it<sp/>prints<sp/>the<sp/>value<sp/>of<sp/>each<sp/>argument.<sp/>In</highlight></codeline>
<codeline><highlight class="normal">either<sp/>case,<sp/>the<sp/>arguments<sp/>are<sp/>evaluated<sp/>exactly<sp/>once.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here&apos;s<sp/>an<sp/>example.<sp/>Given</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>true<sp/>iff<sp/>m<sp/>and<sp/>n<sp/>have<sp/>no<sp/>common<sp/>divisors<sp/>except<sp/>1.</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>MutuallyPrime(int<sp/>m,<sp/>int<sp/>n)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>a<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>b<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>int<sp/>c<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">the<sp/>assertion<sp/>`EXPECT_PRED2(MutuallyPrime,<sp/>a,<sp/>b);`<sp/>will<sp/>succeed,<sp/>while<sp/>the</highlight></codeline>
<codeline><highlight class="normal">assertion<sp/>`EXPECT_PRED2(MutuallyPrime,<sp/>b,<sp/>c);`<sp/>will<sp/>fail<sp/>with<sp/>the<sp/>message</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;</highlight></codeline>
<codeline><highlight class="normal">!MutuallyPrime(b,<sp/>c)<sp/>is<sp/>false,<sp/>where&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">b<sp/>is<sp/>4&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">c<sp/>is<sp/>10&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Notes:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>If<sp/>you<sp/>see<sp/>a<sp/>compiler<sp/>error<sp/>&quot;no<sp/>matching<sp/>function<sp/>to<sp/>call&quot;<sp/>when<sp/>using<sp/>`ASSERT_PRED*`<sp/>or<sp/>`EXPECT_PRED*`,<sp/>please<sp/>see<sp/>[this](V1_5_FAQ.md#the-compiler-complains-about-undefined-references-to-some-static-const-member-variables-but-i-did-define-them-in-the-class-body-whats-wrong)<sp/>for<sp/>how<sp/>to<sp/>resolve<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Currently<sp/>we<sp/>only<sp/>provide<sp/>predicate<sp/>assertions<sp/>of<sp/>arity<sp/>&lt;=<sp/>5.<sp/>If<sp/>you<sp/>need<sp/>a<sp/>higher-arity<sp/>assertion,<sp/>let<sp/>us<sp/>know.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Using<sp/>a<sp/>Function<sp/>That<sp/>Returns<sp/>an<sp/>AssertionResult<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">While<sp/>`EXPECT_PRED*()`<sp/>and<sp/>friends<sp/>are<sp/>handy<sp/>for<sp/>a<sp/>quick<sp/>job,<sp/>the</highlight></codeline>
<codeline><highlight class="normal">syntax<sp/>is<sp/>not<sp/>satisfactory:<sp/>you<sp/>have<sp/>to<sp/>use<sp/>different<sp/>macros<sp/>for</highlight></codeline>
<codeline><highlight class="normal">different<sp/>arities,<sp/>and<sp/>it<sp/>feels<sp/>more<sp/>like<sp/>Lisp<sp/>than<sp/>C++.<sp/><sp/>The</highlight></codeline>
<codeline><highlight class="normal">`::testing::AssertionResult`<sp/>class<sp/>solves<sp/>this<sp/>problem.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">An<sp/>`AssertionResult`<sp/>object<sp/>represents<sp/>the<sp/>result<sp/>of<sp/>an<sp/>assertion</highlight></codeline>
<codeline><highlight class="normal">(whether<sp/>it&apos;s<sp/>a<sp/>success<sp/>or<sp/>a<sp/>failure,<sp/>and<sp/>an<sp/>associated<sp/>message).<sp/><sp/>You</highlight></codeline>
<codeline><highlight class="normal">can<sp/>create<sp/>an<sp/>`AssertionResult`<sp/>using<sp/>one<sp/>of<sp/>these<sp/>factory</highlight></codeline>
<codeline><highlight class="normal">functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>testing<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>an<sp/>AssertionResult<sp/>object<sp/>to<sp/>indicate<sp/>that<sp/>an<sp/>assertion<sp/>has</highlight></codeline>
<codeline><highlight class="normal">//<sp/>succeeded.</highlight></codeline>
<codeline><highlight class="normal">AssertionResult<sp/>AssertionSuccess();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>an<sp/>AssertionResult<sp/>object<sp/>to<sp/>indicate<sp/>that<sp/>an<sp/>assertion<sp/>has</highlight></codeline>
<codeline><highlight class="normal">//<sp/>failed.</highlight></codeline>
<codeline><highlight class="normal">AssertionResult<sp/>AssertionFailure();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>then<sp/>use<sp/>the<sp/>`&lt;&lt;`<sp/>operator<sp/>to<sp/>stream<sp/>messages<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`AssertionResult`<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>provide<sp/>more<sp/>readable<sp/>messages<sp/>in<sp/>Boolean<sp/>assertions</highlight></codeline>
<codeline><highlight class="normal">(e.g.<sp/>`EXPECT_TRUE()`),<sp/>write<sp/>a<sp/>predicate<sp/>function<sp/>that<sp/>returns</highlight></codeline>
<codeline><highlight class="normal">`AssertionResult`<sp/>instead<sp/>of<sp/>`bool`.<sp/>For<sp/>example,<sp/>if<sp/>you<sp/>define</highlight></codeline>
<codeline><highlight class="normal">`IsEven()`<sp/>as:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">::testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionSuccess();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">instead<sp/>of:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>(n<sp/>%<sp/>2)<sp/>==<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">the<sp/>failed<sp/>assertion<sp/>`EXPECT_TRUE(IsEven(Fib(4)))`<sp/>will<sp/>print:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>!IsEven(Fib(4))&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">Actual:<sp/>false<sp/>(*3<sp/>is<sp/>odd*)&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>true&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">instead<sp/>of<sp/>a<sp/>more<sp/>opaque</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>!IsEven(Fib(4))&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">Actual:<sp/>false&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>true&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>informative<sp/>messages<sp/>in<sp/>`EXPECT_FALSE`<sp/>and<sp/>`ASSERT_FALSE`</highlight></codeline>
<codeline><highlight class="normal">as<sp/>well,<sp/>and<sp/>are<sp/>fine<sp/>with<sp/>making<sp/>the<sp/>predicate<sp/>slower<sp/>in<sp/>the<sp/>success</highlight></codeline>
<codeline><highlight class="normal">case,<sp/>you<sp/>can<sp/>supply<sp/>a<sp/>success<sp/>message:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">::testing::AssertionResult<sp/>IsEven(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionSuccess()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>even&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionFailure()<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>odd&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then<sp/>the<sp/>statement<sp/>`EXPECT_FALSE(IsEven(Fib(6)))`<sp/>will<sp/>print</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>!IsEven(Fib(6))&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">Actual:<sp/>true<sp/>(8<sp/>is<sp/>even)&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>false&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>version<sp/>1.4.1.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Using<sp/>a<sp/>Predicate-Formatter<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>find<sp/>the<sp/>default<sp/>message<sp/>generated<sp/>by<sp/>`(ASSERT|EXPECT)_PRED*`<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`(ASSERT|EXPECT)_(TRUE|FALSE)`<sp/>unsatisfactory,<sp/>or<sp/>some<sp/>arguments<sp/>to<sp/>your</highlight></codeline>
<codeline><highlight class="normal">predicate<sp/>do<sp/>not<sp/>support<sp/>streaming<sp/>to<sp/>`ostream`,<sp/>you<sp/>can<sp/>instead<sp/>use<sp/>the</highlight></codeline>
<codeline><highlight class="normal">following<sp/>_predicate-formatter<sp/>assertions_<sp/>to<sp/>_fully_<sp/>customize<sp/>how<sp/>the</highlight></codeline>
<codeline><highlight class="normal">message<sp/>is<sp/>formatted:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_PRED_FORMAT1(`_pred\_format1,<sp/>val1_`);`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>`EXPECT_PRED_FORMAT1(`_pred\_format1,<sp/>val1_`);<sp/>|<sp/>_pred\_format1(val1)_<sp/>is<sp/>successful<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_PRED_FORMAT2(`_pred\_format2,<sp/>val1,<sp/>val2_`);`<sp/>|<sp/>`EXPECT_PRED_FORMAT2(`_pred\_format2,<sp/>val1,<sp/>val2_`);`<sp/>|<sp/>_pred\_format2(val1,<sp/>val2)_<sp/>is<sp/>successful<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`...`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>`...`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>`...`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>difference<sp/>between<sp/>this<sp/>and<sp/>the<sp/>previous<sp/>two<sp/>groups<sp/>of<sp/>macros<sp/>is<sp/>that<sp/>instead<sp/>of</highlight></codeline>
<codeline><highlight class="normal">a<sp/>predicate,<sp/>`(ASSERT|EXPECT)_PRED_FORMAT*`<sp/>take<sp/>a<sp/>_predicate-formatter_</highlight></codeline>
<codeline><highlight class="normal">(_pred\_formatn_),<sp/>which<sp/>is<sp/>a<sp/>function<sp/>or<sp/>functor<sp/>with<sp/>the<sp/>signature:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`::testing::AssertionResult<sp/>PredicateFormattern(const<sp/>char*<sp/>`_expr1_`,<sp/>const<sp/>char*<sp/>`_expr2_`,<sp/>...<sp/>const<sp/>char*<sp/>`_exprn_`,<sp/>T1<sp/>`_val1_`,<sp/>T2<sp/>`_val2_`,<sp/>...<sp/>Tn<sp/>`_valn_`);`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">where<sp/>_val1_,<sp/>_val2_,<sp/>...,<sp/>and<sp/>_valn_<sp/>are<sp/>the<sp/>values<sp/>of<sp/>the<sp/>predicate</highlight></codeline>
<codeline><highlight class="normal">arguments,<sp/>and<sp/>_expr1_,<sp/>_expr2_,<sp/>...,<sp/>and<sp/>_exprn_<sp/>are<sp/>the<sp/>corresponding</highlight></codeline>
<codeline><highlight class="normal">expressions<sp/>as<sp/>they<sp/>appear<sp/>in<sp/>the<sp/>source<sp/>code.<sp/>The<sp/>types<sp/>`T1`,<sp/>`T2`,<sp/>...,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`Tn`<sp/>can<sp/>be<sp/>either<sp/>value<sp/>types<sp/>or<sp/>reference<sp/>types.<sp/>For<sp/>example,<sp/>if<sp/>an</highlight></codeline>
<codeline><highlight class="normal">argument<sp/>has<sp/>type<sp/>`Foo`,<sp/>you<sp/>can<sp/>declare<sp/>it<sp/>as<sp/>either<sp/>`Foo`<sp/>or<sp/>`const<sp/>Foo&amp;`,</highlight></codeline>
<codeline><highlight class="normal">whichever<sp/>is<sp/>appropriate.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>predicate-formatter<sp/>returns<sp/>a<sp/>`::testing::AssertionResult`<sp/>object<sp/>to<sp/>indicate</highlight></codeline>
<codeline><highlight class="normal">whether<sp/>the<sp/>assertion<sp/>has<sp/>succeeded<sp/>or<sp/>not.<sp/>The<sp/>only<sp/>way<sp/>to<sp/>create<sp/>such<sp/>an</highlight></codeline>
<codeline><highlight class="normal">object<sp/>is<sp/>to<sp/>call<sp/>one<sp/>of<sp/>these<sp/>factory<sp/>functions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>an<sp/>example,<sp/>let&apos;s<sp/>improve<sp/>the<sp/>failure<sp/>message<sp/>in<sp/>the<sp/>previous<sp/>example,<sp/>which<sp/>uses<sp/>`EXPECT_PRED2()`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Returns<sp/>the<sp/>smallest<sp/>prime<sp/>common<sp/>divisor<sp/>of<sp/>m<sp/>and<sp/>n,</highlight></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>1<sp/>when<sp/>m<sp/>and<sp/>n<sp/>are<sp/>mutually<sp/>prime.</highlight></codeline>
<codeline><highlight class="normal">int<sp/>SmallestPrimeCommonDivisor(int<sp/>m,<sp/>int<sp/>n)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>A<sp/>predicate-formatter<sp/>for<sp/>asserting<sp/>that<sp/>two<sp/>integers<sp/>are<sp/>mutually<sp/>prime.</highlight></codeline>
<codeline><highlight class="normal">::testing::AssertionResult<sp/>AssertMutuallyPrime(const<sp/>char*<sp/>m_expr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>n_expr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>m,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(MutuallyPrime(m,<sp/>n))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::testing::AssertionSuccess();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>::testing::AssertionFailure()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_expr<sp/>&lt;&lt;<sp/>&quot;<sp/>and<sp/>&quot;<sp/>&lt;&lt;<sp/>n_expr<sp/>&lt;&lt;<sp/>&quot;<sp/>(&quot;<sp/>&lt;&lt;<sp/>m<sp/>&lt;&lt;<sp/>&quot;<sp/>and<sp/>&quot;<sp/>&lt;&lt;<sp/>n</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;)<sp/>are<sp/>not<sp/>mutually<sp/>prime,<sp/>&quot;<sp/>&lt;&lt;<sp/>&quot;as<sp/>they<sp/>have<sp/>a<sp/>common<sp/>divisor<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SmallestPrimeCommonDivisor(m,<sp/>n);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">With<sp/>this<sp/>predicate-formatter,<sp/>we<sp/>can<sp/>use</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">EXPECT_PRED_FORMAT2(AssertMutuallyPrime,<sp/>b,<sp/>c);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">to<sp/>generate<sp/>the<sp/>message</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;</highlight></codeline>
<codeline><highlight class="normal">b<sp/>and<sp/>c<sp/>(4<sp/>and<sp/>10)<sp/>are<sp/>not<sp/>mutually<sp/>prime,<sp/>as<sp/>they<sp/>have<sp/>a<sp/>common<sp/>divisor<sp/>2.&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>you<sp/>may<sp/>have<sp/>realized,<sp/>many<sp/>of<sp/>the<sp/>assertions<sp/>we<sp/>introduced<sp/>earlier<sp/>are</highlight></codeline>
<codeline><highlight class="normal">special<sp/>cases<sp/>of<sp/>`(EXPECT|ASSERT)_PRED_FORMAT*`.<sp/>In<sp/>fact,<sp/>most<sp/>of<sp/>them<sp/>are</highlight></codeline>
<codeline><highlight class="normal">indeed<sp/>defined<sp/>using<sp/>`(EXPECT|ASSERT)_PRED_FORMAT*`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Floating-Point<sp/>Comparison<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Comparing<sp/>floating-point<sp/>numbers<sp/>is<sp/>tricky.<sp/>Due<sp/>to<sp/>round-off<sp/>errors,<sp/>it<sp/>is</highlight></codeline>
<codeline><highlight class="normal">very<sp/>unlikely<sp/>that<sp/>two<sp/>floating-points<sp/>will<sp/>match<sp/>exactly.<sp/>Therefore,</highlight></codeline>
<codeline><highlight class="normal">`ASSERT_EQ`<sp/>&apos;s<sp/>naive<sp/>comparison<sp/>usually<sp/>doesn&apos;t<sp/>work.<sp/>And<sp/>since<sp/>floating-points</highlight></codeline>
<codeline><highlight class="normal">can<sp/>have<sp/>a<sp/>wide<sp/>value<sp/>range,<sp/>no<sp/>single<sp/>fixed<sp/>error<sp/>bound<sp/>works.<sp/>It&apos;s<sp/>better<sp/>to</highlight></codeline>
<codeline><highlight class="normal">compare<sp/>by<sp/>a<sp/>fixed<sp/>relative<sp/>error<sp/>bound,<sp/>except<sp/>for<sp/>values<sp/>close<sp/>to<sp/>0<sp/>due<sp/>to</highlight></codeline>
<codeline><highlight class="normal">the<sp/>loss<sp/>of<sp/>precision<sp/>there.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>general,<sp/>for<sp/>floating-point<sp/>comparison<sp/>to<sp/>make<sp/>sense,<sp/>the<sp/>user<sp/>needs<sp/>to</highlight></codeline>
<codeline><highlight class="normal">carefully<sp/>choose<sp/>the<sp/>error<sp/>bound.<sp/>If<sp/>they<sp/>don&apos;t<sp/>want<sp/>or<sp/>care<sp/>to,<sp/>comparing<sp/>in</highlight></codeline>
<codeline><highlight class="normal">terms<sp/>of<sp/>Units<sp/>in<sp/>the<sp/>Last<sp/>Place<sp/>(ULPs)<sp/>is<sp/>a<sp/>good<sp/>default,<sp/>and<sp/>Google<sp/>Test</highlight></codeline>
<codeline><highlight class="normal">provides<sp/>assertions<sp/>to<sp/>do<sp/>this.<sp/>Full<sp/>details<sp/>about<sp/>ULPs<sp/>are<sp/>quite<sp/>long;<sp/>if<sp/>you</highlight></codeline>
<codeline><highlight class="normal">want<sp/>to<sp/>learn<sp/>more,<sp/>see</highlight></codeline>
<codeline><highlight class="normal">[this<sp/>article<sp/>on<sp/>float<sp/>comparison](http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Floating-Point<sp/>Macros<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_FLOAT_EQ(`_expected,<sp/>actual_`);`<sp/><sp/>|<sp/>`EXPECT_FLOAT_EQ(`_expected,<sp/>actual_`);`<sp/>|<sp/>the<sp/>two<sp/>`float`<sp/>values<sp/>are<sp/>almost<sp/>equal<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_DOUBLE_EQ(`_expected,<sp/>actual_`);`<sp/>|<sp/>`EXPECT_DOUBLE_EQ(`_expected,<sp/>actual_`);`<sp/>|<sp/>the<sp/>two<sp/>`double`<sp/>values<sp/>are<sp/>almost<sp/>equal<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>&quot;almost<sp/>equal&quot;,<sp/>we<sp/>mean<sp/>the<sp/>two<sp/>values<sp/>are<sp/>within<sp/>4<sp/>ULP&apos;s<sp/>from<sp/>each</highlight></codeline>
<codeline><highlight class="normal">other.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>assertions<sp/>allow<sp/>you<sp/>to<sp/>choose<sp/>the<sp/>acceptable<sp/>error<sp/>bound:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_NEAR(`_val1,<sp/>val2,<sp/>abs\_error_`);`<sp/>|<sp/>`EXPECT_NEAR`_(val1,<sp/>val2,<sp/>abs\_error_`);`<sp/>|<sp/>the<sp/>difference<sp/>between<sp/>_val1_<sp/>and<sp/>_val2_<sp/>doesn&apos;t<sp/>exceed<sp/>the<sp/>given<sp/>absolute<sp/>error<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Floating-Point<sp/>Predicate-Format<sp/>Functions<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Some<sp/>floating-point<sp/>operations<sp/>are<sp/>useful,<sp/>but<sp/>not<sp/>that<sp/>often<sp/>used.<sp/>In<sp/>order</highlight></codeline>
<codeline><highlight class="normal">to<sp/>avoid<sp/>an<sp/>explosion<sp/>of<sp/>new<sp/>macros,<sp/>we<sp/>provide<sp/>them<sp/>as<sp/>predicate-format</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>that<sp/>can<sp/>be<sp/>used<sp/>in<sp/>predicate<sp/>assertion<sp/>macros<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal">`EXPECT_PRED_FORMAT2`,<sp/>etc).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">EXPECT_PRED_FORMAT2(::testing::FloatLE,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline><highlight class="normal">EXPECT_PRED_FORMAT2(::testing::DoubleLE,<sp/>val1,<sp/>val2);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Verifies<sp/>that<sp/>_val1_<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>almost<sp/>equal<sp/>to,<sp/>_val2_.<sp/>You<sp/>can</highlight></codeline>
<codeline><highlight class="normal">replace<sp/>`EXPECT_PRED_FORMAT2`<sp/>in<sp/>the<sp/>above<sp/>table<sp/>with<sp/>`ASSERT_PRED_FORMAT2`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Windows<sp/>HRESULT<sp/>assertions<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">These<sp/>assertions<sp/>test<sp/>for<sp/>`HRESULT`<sp/>success<sp/>or<sp/>failure.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_HRESULT_SUCCEEDED(`_expression_`);`<sp/>|<sp/>`EXPECT_HRESULT_SUCCEEDED(`_expression_`);`<sp/>|<sp/>_expression_<sp/>is<sp/>a<sp/>success<sp/>`HRESULT`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_HRESULT_FAILED(`_expression_`);`<sp/><sp/><sp/><sp/>|<sp/>`EXPECT_HRESULT_FAILED(`_expression_`);`<sp/><sp/><sp/><sp/>|<sp/>_expression_<sp/>is<sp/>a<sp/>failure<sp/>`HRESULT`<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>generated<sp/>output<sp/>contains<sp/>the<sp/>human-readable<sp/>error<sp/>message</highlight></codeline>
<codeline><highlight class="normal">associated<sp/>with<sp/>the<sp/>`HRESULT`<sp/>code<sp/>returned<sp/>by<sp/>_expression_.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>might<sp/>use<sp/>them<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">CComPtr<sp/>shell;</highlight></codeline>
<codeline><highlight class="normal">ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L&quot;Shell.Application&quot;));</highlight></codeline>
<codeline><highlight class="normal">CComVariant<sp/>empty;</highlight></codeline>
<codeline><highlight class="normal">ASSERT_HRESULT_SUCCEEDED(shell-&gt;ShellExecute(CComBSTR(url),<sp/>empty,<sp/>empty,<sp/>empty,<sp/>empty));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Windows.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Type<sp/>Assertions<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>call<sp/>the<sp/>function</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">::testing::StaticAssertTypeEq&lt;T1,<sp/>T2&gt;();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">to<sp/>assert<sp/>that<sp/>types<sp/>`T1`<sp/>and<sp/>`T2`<sp/>are<sp/>the<sp/>same.<sp/><sp/>The<sp/>function<sp/>does</highlight></codeline>
<codeline><highlight class="normal">nothing<sp/>if<sp/>the<sp/>assertion<sp/>is<sp/>satisfied.<sp/><sp/>If<sp/>the<sp/>types<sp/>are<sp/>different,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>function<sp/>call<sp/>will<sp/>fail<sp/>to<sp/>compile,<sp/>and<sp/>the<sp/>compiler<sp/>error<sp/>message</highlight></codeline>
<codeline><highlight class="normal">will<sp/>likely<sp/>(depending<sp/>on<sp/>the<sp/>compiler)<sp/>show<sp/>you<sp/>the<sp/>actual<sp/>values<sp/>of</highlight></codeline>
<codeline><highlight class="normal">`T1`<sp/>and<sp/>`T2`.<sp/><sp/>This<sp/>is<sp/>mainly<sp/>useful<sp/>inside<sp/>template<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Caveat:_<sp/>When<sp/>used<sp/>inside<sp/>a<sp/>member<sp/>function<sp/>of<sp/>a<sp/>class<sp/>template<sp/>or<sp/>a</highlight></codeline>
<codeline><highlight class="normal">function<sp/>template,<sp/>`StaticAssertTypeEq&lt;T1,<sp/>T2&gt;()`<sp/>is<sp/>effective<sp/>_only<sp/>if_</highlight></codeline>
<codeline><highlight class="normal">the<sp/>function<sp/>is<sp/>instantiated.<sp/><sp/>For<sp/>example,<sp/>given:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;<sp/>class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>void<sp/>Bar()<sp/>{<sp/>::testing::StaticAssertTypeEq&lt;int,<sp/>T&gt;();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">the<sp/>code:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Test1()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">will<sp/>_not_<sp/>generate<sp/>a<sp/>compiler<sp/>error,<sp/>as<sp/>`Foo&lt;bool&gt;::Bar()`<sp/>is<sp/>never</highlight></codeline>
<codeline><highlight class="normal">actually<sp/>instantiated.<sp/><sp/>Instead,<sp/>you<sp/>need:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Test2()<sp/>{<sp/>Foo&lt;bool&gt;<sp/>foo;<sp/>foo.Bar();<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">to<sp/>cause<sp/>a<sp/>compiler<sp/>error.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>version<sp/>1.3.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Assertion<sp/>Placement<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>assertions<sp/>in<sp/>any<sp/>C++<sp/>function.<sp/>In<sp/>particular,<sp/>it<sp/>doesn&apos;t</highlight></codeline>
<codeline><highlight class="normal">have<sp/>to<sp/>be<sp/>a<sp/>method<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class.<sp/>The<sp/>one<sp/>constraint<sp/>is</highlight></codeline>
<codeline><highlight class="normal">that<sp/>assertions<sp/>that<sp/>generate<sp/>a<sp/>fatal<sp/>failure<sp/>(`FAIL*`<sp/>and<sp/>`ASSERT_*`)</highlight></codeline>
<codeline><highlight class="normal">can<sp/>only<sp/>be<sp/>used<sp/>in<sp/>void-returning<sp/>functions.<sp/>This<sp/>is<sp/>a<sp/>consequence<sp/>of</highlight></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>not<sp/>using<sp/>exceptions.<sp/>By<sp/>placing<sp/>it<sp/>in<sp/>a<sp/>non-void<sp/>function</highlight></codeline>
<codeline><highlight class="normal">you&apos;ll<sp/>get<sp/>a<sp/>confusing<sp/>compile<sp/>error<sp/>like</highlight></codeline>
<codeline><highlight class="normal">`&quot;error:<sp/>void<sp/>value<sp/>not<sp/>ignored<sp/>as<sp/>it<sp/>ought<sp/>to<sp/>be&quot;`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>need<sp/>to<sp/>use<sp/>assertions<sp/>in<sp/>a<sp/>function<sp/>that<sp/>returns<sp/>non-void,<sp/>one<sp/>option</highlight></codeline>
<codeline><highlight class="normal">is<sp/>to<sp/>make<sp/>the<sp/>function<sp/>return<sp/>the<sp/>value<sp/>in<sp/>an<sp/>out<sp/>parameter<sp/>instead.<sp/>For</highlight></codeline>
<codeline><highlight class="normal">example,<sp/>you<sp/>can<sp/>rewrite<sp/>`T2<sp/>Foo(T1<sp/>x)`<sp/>to<sp/>`void<sp/>Foo(T1<sp/>x,<sp/>T2*<sp/>result)`.<sp/>You</highlight></codeline>
<codeline><highlight class="normal">need<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>`*result`<sp/>contains<sp/>some<sp/>sensible<sp/>value<sp/>even<sp/>when<sp/>the</highlight></codeline>
<codeline><highlight class="normal">function<sp/>returns<sp/>prematurely.<sp/>As<sp/>the<sp/>function<sp/>now<sp/>returns<sp/>`void`,<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline><highlight class="normal">any<sp/>assertion<sp/>inside<sp/>of<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>changing<sp/>the<sp/>function&apos;s<sp/>type<sp/>is<sp/>not<sp/>an<sp/>option,<sp/>you<sp/>should<sp/>just<sp/>use</highlight></codeline>
<codeline><highlight class="normal">assertions<sp/>that<sp/>generate<sp/>non-fatal<sp/>failures,<sp/>such<sp/>as<sp/>`ADD_FAILURE*`<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`EXPECT_*`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Note_:<sp/>Constructors<sp/>and<sp/>destructors<sp/>are<sp/>not<sp/>considered<sp/>void-returning</highlight></codeline>
<codeline><highlight class="normal">functions,<sp/>according<sp/>to<sp/>the<sp/>C++<sp/>language<sp/>specification,<sp/>and<sp/>so<sp/>you<sp/>may<sp/>not<sp/>use</highlight></codeline>
<codeline><highlight class="normal">fatal<sp/>assertions<sp/>in<sp/>them.<sp/>You&apos;ll<sp/>get<sp/>a<sp/>compilation<sp/>error<sp/>if<sp/>you<sp/>try.<sp/>A<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">workaround<sp/>is<sp/>to<sp/>transfer<sp/>the<sp/>entire<sp/>body<sp/>of<sp/>the<sp/>constructor<sp/>or<sp/>destructor<sp/>to<sp/>a</highlight></codeline>
<codeline><highlight class="normal">private<sp/>void-returning<sp/>method.<sp/>However,<sp/>you<sp/>should<sp/>be<sp/>aware<sp/>that<sp/>a<sp/>fatal</highlight></codeline>
<codeline><highlight class="normal">assertion<sp/>failure<sp/>in<sp/>a<sp/>constructor<sp/>does<sp/>not<sp/>terminate<sp/>the<sp/>current<sp/>test,<sp/>as<sp/>your</highlight></codeline>
<codeline><highlight class="normal">intuition<sp/>might<sp/>suggest;<sp/>it<sp/>merely<sp/>returns<sp/>from<sp/>the<sp/>constructor<sp/>early,<sp/>possibly</highlight></codeline>
<codeline><highlight class="normal">leaving<sp/>your<sp/>object<sp/>in<sp/>a<sp/>partially-constructed<sp/>state.<sp/>Likewise,<sp/>a<sp/>fatal</highlight></codeline>
<codeline><highlight class="normal">assertion<sp/>failure<sp/>in<sp/>a<sp/>destructor<sp/>may<sp/>leave<sp/>your<sp/>object<sp/>in<sp/>a</highlight></codeline>
<codeline><highlight class="normal">partially-destructed<sp/>state.<sp/>Use<sp/>assertions<sp/>carefully<sp/>in<sp/>these<sp/>situations!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Death<sp/>Tests<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>many<sp/>applications,<sp/>there<sp/>are<sp/>assertions<sp/>that<sp/>can<sp/>cause<sp/>application<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">if<sp/>a<sp/>condition<sp/>is<sp/>not<sp/>met.<sp/>These<sp/>sanity<sp/>checks,<sp/>which<sp/>ensure<sp/>that<sp/>the<sp/>program</highlight></codeline>
<codeline><highlight class="normal">is<sp/>in<sp/>a<sp/>known<sp/>good<sp/>state,<sp/>are<sp/>there<sp/>to<sp/>fail<sp/>at<sp/>the<sp/>earliest<sp/>possible<sp/>time<sp/>after</highlight></codeline>
<codeline><highlight class="normal">some<sp/>program<sp/>state<sp/>is<sp/>corrupted.<sp/>If<sp/>the<sp/>assertion<sp/>checks<sp/>the<sp/>wrong<sp/>condition,</highlight></codeline>
<codeline><highlight class="normal">then<sp/>the<sp/>program<sp/>may<sp/>proceed<sp/>in<sp/>an<sp/>erroneous<sp/>state,<sp/>which<sp/>could<sp/>lead<sp/>to<sp/>memory</highlight></codeline>
<codeline><highlight class="normal">corruption,<sp/>security<sp/>holes,<sp/>or<sp/>worse.<sp/>Hence<sp/>it<sp/>is<sp/>vitally<sp/>important<sp/>to<sp/>test</highlight></codeline>
<codeline><highlight class="normal">that<sp/>such<sp/>assertion<sp/>statements<sp/>work<sp/>as<sp/>expected.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Since<sp/>these<sp/>precondition<sp/>checks<sp/>cause<sp/>the<sp/>processes<sp/>to<sp/>die,<sp/>we<sp/>call<sp/>such<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">_death<sp/>tests_.<sp/>More<sp/>generally,<sp/>any<sp/>test<sp/>that<sp/>checks<sp/>that<sp/>a<sp/>program<sp/>terminates</highlight></codeline>
<codeline><highlight class="normal">in<sp/>an<sp/>expected<sp/>fashion<sp/>is<sp/>also<sp/>a<sp/>death<sp/>test.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>test<sp/>`EXPECT_*()/ASSERT_*()`<sp/>failures<sp/>in<sp/>your<sp/>test<sp/>code,<sp/>see<sp/>[Catching<sp/>Failures](#catching-failures).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>How<sp/>to<sp/>Write<sp/>a<sp/>Death<sp/>Test<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>has<sp/>the<sp/>following<sp/>macros<sp/>to<sp/>support<sp/>death<sp/>tests:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_DEATH(`_statement,<sp/>regex_`);<sp/>|<sp/>`EXPECT_DEATH(`_statement,<sp/>regex_`);<sp/>|<sp/>_statement_<sp/>crashes<sp/>with<sp/>the<sp/>given<sp/>error<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_DEATH_IF_SUPPORTED(`_statement,<sp/>regex_`);<sp/>|<sp/>`EXPECT_DEATH_IF_SUPPORTED(`_statement,<sp/>regex_`);<sp/>|<sp/>if<sp/>death<sp/>tests<sp/>are<sp/>supported,<sp/>verifies<sp/>that<sp/>_statement_<sp/>crashes<sp/>with<sp/>the<sp/>given<sp/>error;<sp/>otherwise<sp/>verifies<sp/>nothing<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_EXIT(`_statement,<sp/>predicate,<sp/>regex_`);<sp/>|<sp/>`EXPECT_EXIT(`_statement,<sp/>predicate,<sp/>regex_`);<sp/>|_statement_<sp/>exits<sp/>with<sp/>the<sp/>given<sp/>error<sp/>and<sp/>its<sp/>exit<sp/>code<sp/>matches<sp/>_predicate_<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">where<sp/>_statement_<sp/>is<sp/>a<sp/>statement<sp/>that<sp/>is<sp/>expected<sp/>to<sp/>cause<sp/>the<sp/>process<sp/>to</highlight></codeline>
<codeline><highlight class="normal">die,<sp/>_predicate_<sp/>is<sp/>a<sp/>function<sp/>or<sp/>function<sp/>object<sp/>that<sp/>evaluates<sp/>an<sp/>integer</highlight></codeline>
<codeline><highlight class="normal">exit<sp/>status,<sp/>and<sp/>_regex_<sp/>is<sp/>a<sp/>regular<sp/>expression<sp/>that<sp/>the<sp/>stderr<sp/>output<sp/>of</highlight></codeline>
<codeline><highlight class="normal">_statement_<sp/>is<sp/>expected<sp/>to<sp/>match.<sp/>Note<sp/>that<sp/>_statement_<sp/>can<sp/>be<sp/>_any<sp/>valid</highlight></codeline>
<codeline><highlight class="normal">statement_<sp/>(including<sp/>_compound<sp/>statement_)<sp/>and<sp/>doesn&apos;t<sp/>have<sp/>to<sp/>be<sp/>an</highlight></codeline>
<codeline><highlight class="normal">expression.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>usual,<sp/>the<sp/>`ASSERT`<sp/>variants<sp/>abort<sp/>the<sp/>current<sp/>test<sp/>function,<sp/>while<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`EXPECT`<sp/>variants<sp/>do<sp/>not.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**<sp/>We<sp/>use<sp/>the<sp/>word<sp/>&quot;crash&quot;<sp/>here<sp/>to<sp/>mean<sp/>that<sp/>the<sp/>process</highlight></codeline>
<codeline><highlight class="normal">terminates<sp/>with<sp/>a<sp/>_non-zero_<sp/>exit<sp/>status<sp/>code.<sp/><sp/>There<sp/>are<sp/>two</highlight></codeline>
<codeline><highlight class="normal">possibilities:<sp/>either<sp/>the<sp/>process<sp/>has<sp/>called<sp/>`exit()`<sp/>or<sp/>`_exit()`</highlight></codeline>
<codeline><highlight class="normal">with<sp/>a<sp/>non-zero<sp/>value,<sp/>or<sp/>it<sp/>may<sp/>be<sp/>killed<sp/>by<sp/>a<sp/>signal.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>means<sp/>that<sp/>if<sp/>_statement_<sp/>terminates<sp/>the<sp/>process<sp/>with<sp/>a<sp/>0<sp/>exit</highlight></codeline>
<codeline><highlight class="normal">code,<sp/>it<sp/>is<sp/>_not_<sp/>considered<sp/>a<sp/>crash<sp/>by<sp/>`EXPECT_DEATH`.<sp/><sp/>Use</highlight></codeline>
<codeline><highlight class="normal">`EXPECT_EXIT`<sp/>instead<sp/>if<sp/>this<sp/>is<sp/>the<sp/>case,<sp/>or<sp/>if<sp/>you<sp/>want<sp/>to<sp/>restrict</highlight></codeline>
<codeline><highlight class="normal">the<sp/>exit<sp/>code<sp/>more<sp/>precisely.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>predicate<sp/>here<sp/>must<sp/>accept<sp/>an<sp/>`int`<sp/>and<sp/>return<sp/>a<sp/>`bool`.<sp/>The<sp/>death<sp/>test</highlight></codeline>
<codeline><highlight class="normal">succeeds<sp/>only<sp/>if<sp/>the<sp/>predicate<sp/>returns<sp/>`true`.<sp/>Google<sp/>Test<sp/>defines<sp/>a<sp/>few</highlight></codeline>
<codeline><highlight class="normal">predicates<sp/>that<sp/>handle<sp/>the<sp/>most<sp/>common<sp/>cases:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">::testing::ExitedWithCode(exit_code)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>expression<sp/>is<sp/>`true`<sp/>if<sp/>the<sp/>program<sp/>exited<sp/>normally<sp/>with<sp/>the<sp/>given<sp/>exit</highlight></codeline>
<codeline><highlight class="normal">code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">::testing::KilledBySignal(signal_number)<sp/><sp/>//<sp/>Not<sp/>available<sp/>on<sp/>Windows.</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>expression<sp/>is<sp/>`true`<sp/>if<sp/>the<sp/>program<sp/>was<sp/>killed<sp/>by<sp/>the<sp/>given<sp/>signal.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`*_DEATH`<sp/>macros<sp/>are<sp/>convenient<sp/>wrappers<sp/>for<sp/>`*_EXIT`<sp/>that<sp/>use<sp/>a<sp/>predicate</highlight></codeline>
<codeline><highlight class="normal">that<sp/>verifies<sp/>the<sp/>process&apos;<sp/>exit<sp/>code<sp/>is<sp/>non-zero.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>a<sp/>death<sp/>test<sp/>only<sp/>cares<sp/>about<sp/>three<sp/>things:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>does<sp/>_statement_<sp/>abort<sp/>or<sp/>exit<sp/>the<sp/>process?</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>`ASSERT_EXIT`<sp/>and<sp/>`EXPECT_EXIT`)<sp/>does<sp/>the<sp/>exit<sp/>status<sp/>satisfy<sp/>_predicate_?<sp/><sp/>Or<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>`ASSERT_DEATH`<sp/>and<sp/>`EXPECT_DEATH`)<sp/>is<sp/>the<sp/>exit<sp/>status<sp/>non-zero?<sp/><sp/>And</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>does<sp/>the<sp/>stderr<sp/>output<sp/>match<sp/>_regex_?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>particular,<sp/>if<sp/>_statement_<sp/>generates<sp/>an<sp/>`ASSERT_*`<sp/>or<sp/>`EXPECT_*`<sp/>failure,<sp/>it<sp/>will<sp/>**not**<sp/>cause<sp/>the<sp/>death<sp/>test<sp/>to<sp/>fail,<sp/>as<sp/>Google<sp/>Test<sp/>assertions<sp/>don&apos;t<sp/>abort<sp/>the<sp/>process.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>write<sp/>a<sp/>death<sp/>test,<sp/>simply<sp/>use<sp/>one<sp/>of<sp/>the<sp/>above<sp/>macros<sp/>inside<sp/>your<sp/>test</highlight></codeline>
<codeline><highlight class="normal">function.<sp/>For<sp/>example,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST(My*DeathTest*,<sp/>Foo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>death<sp/>test<sp/>uses<sp/>a<sp/>compound<sp/>statement.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH({<sp/>int<sp/>n<sp/>=<sp/>5;<sp/>Foo(&amp;n);<sp/>},<sp/>&quot;Error<sp/>on<sp/>line<sp/>.*<sp/>of<sp/>Foo()&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>NormalExit)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EXIT(NormalExit(),<sp/>::testing::ExitedWithCode(0),<sp/>&quot;Success&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>KillMyself)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EXIT(KillMyself(),<sp/>::testing::KilledBySignal(SIGKILL),<sp/>&quot;Sending<sp/>myself<sp/>unblockable<sp/>signal&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">verifies<sp/>that:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>calling<sp/>`Foo(5)`<sp/>causes<sp/>the<sp/>process<sp/>to<sp/>die<sp/>with<sp/>the<sp/>given<sp/>error<sp/>message,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>calling<sp/>`NormalExit()`<sp/>causes<sp/>the<sp/>process<sp/>to<sp/>print<sp/>`&quot;Success&quot;`<sp/>to<sp/>stderr<sp/>and<sp/>exit<sp/>with<sp/>exit<sp/>code<sp/>0,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>calling<sp/>`KillMyself()`<sp/>kills<sp/>the<sp/>process<sp/>with<sp/>signal<sp/>`SIGKILL`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>test<sp/>function<sp/>body<sp/>may<sp/>contain<sp/>other<sp/>assertions<sp/>and<sp/>statements<sp/>as<sp/>well,<sp/>if</highlight></codeline>
<codeline><highlight class="normal">necessary.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Important:_<sp/>We<sp/>strongly<sp/>recommend<sp/>you<sp/>to<sp/>follow<sp/>the<sp/>convention<sp/>of<sp/>naming<sp/>your</highlight></codeline>
<codeline><highlight class="normal">test<sp/>case<sp/>(not<sp/>test)<sp/>`*DeathTest`<sp/>when<sp/>it<sp/>contains<sp/>a<sp/>death<sp/>test,<sp/>as</highlight></codeline>
<codeline><highlight class="normal">demonstrated<sp/>in<sp/>the<sp/>above<sp/>example.<sp/>The<sp/>`Death<sp/>Tests<sp/>And<sp/>Threads`<sp/>section<sp/>below</highlight></codeline>
<codeline><highlight class="normal">explains<sp/>why.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>test<sp/>fixture<sp/>class<sp/>is<sp/>shared<sp/>by<sp/>normal<sp/>tests<sp/>and<sp/>death<sp/>tests,<sp/>you</highlight></codeline>
<codeline><highlight class="normal">can<sp/>use<sp/>typedef<sp/>to<sp/>introduce<sp/>an<sp/>alias<sp/>for<sp/>the<sp/>fixture<sp/>class<sp/>and<sp/>avoid</highlight></codeline>
<codeline><highlight class="normal">duplicating<sp/>its<sp/>code:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::Test<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">typedef<sp/>FooTest<sp/>FooDeathTest;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>DoesThis)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>normal<sp/>test</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooDeathTest,<sp/>DoesThat)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>death<sp/>test</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows<sp/>(requires<sp/>MSVC<sp/>8.0<sp/>or<sp/>above),<sp/>Cygwin,<sp/>and<sp/>Mac<sp/>(the<sp/>latter<sp/>three<sp/>are<sp/>supported<sp/>since<sp/>v1.3.0).<sp/><sp/>`(ASSERT|EXPECT)_DEATH_IF_SUPPORTED`<sp/>are<sp/>new<sp/>in<sp/>v1.4.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Regular<sp/>Expression<sp/>Syntax<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">On<sp/>POSIX<sp/>systems<sp/>(e.g.<sp/>Linux,<sp/>Cygwin,<sp/>and<sp/>Mac),<sp/>Google<sp/>Test<sp/>uses<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[POSIX<sp/>extended<sp/>regular<sp/>expression](http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap09.html#tag_09_04)</highlight></codeline>
<codeline><highlight class="normal">syntax<sp/>in<sp/>death<sp/>tests.<sp/>To<sp/>learn<sp/>about<sp/>this<sp/>syntax,<sp/>you<sp/>may<sp/>want<sp/>to<sp/>read<sp/>this<sp/>[Wikipedia<sp/>entry](http://en.wikipedia.org/wiki/Regular_expression#POSIX_Extended_Regular_Expressions).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">On<sp/>Windows,<sp/>Google<sp/>Test<sp/>uses<sp/>its<sp/>own<sp/>simple<sp/>regular<sp/>expression</highlight></codeline>
<codeline><highlight class="normal">implementation.<sp/>It<sp/>lacks<sp/>many<sp/>features<sp/>you<sp/>can<sp/>find<sp/>in<sp/>POSIX<sp/>extended</highlight></codeline>
<codeline><highlight class="normal">regular<sp/>expressions.<sp/><sp/>For<sp/>example,<sp/>we<sp/>don&apos;t<sp/>support<sp/>union<sp/>(`&quot;x|y&quot;`),</highlight></codeline>
<codeline><highlight class="normal">grouping<sp/>(`&quot;(xy)&quot;`),<sp/>brackets<sp/>(`&quot;[xy]&quot;`),<sp/>and<sp/>repetition<sp/>count</highlight></codeline>
<codeline><highlight class="normal">(`&quot;x{5,7}&quot;`),<sp/>among<sp/>others.<sp/>Below<sp/>is<sp/>what<sp/>we<sp/>do<sp/>support<sp/>(`A`<sp/>denotes<sp/>a</highlight></codeline>
<codeline><highlight class="normal">literal<sp/>character,<sp/>period<sp/>(`.`),<sp/>or<sp/>a<sp/>single<sp/>`\\`<sp/>escape<sp/>sequence;<sp/>`x`</highlight></codeline>
<codeline><highlight class="normal">and<sp/>`y`<sp/>denote<sp/>regular<sp/>expressions.):</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`c`<sp/>|<sp/>matches<sp/>any<sp/>literal<sp/>character<sp/>`c`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:----|:----------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\d`<sp/>|<sp/>matches<sp/>any<sp/>decimal<sp/>digit<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\D`<sp/>|<sp/>matches<sp/>any<sp/>character<sp/>that&apos;s<sp/>not<sp/>a<sp/>decimal<sp/>digit<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\f`<sp/>|<sp/>matches<sp/>`\f`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\n`<sp/>|<sp/>matches<sp/>`\n`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\r`<sp/>|<sp/>matches<sp/>`\r`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\s`<sp/>|<sp/>matches<sp/>any<sp/>ASCII<sp/>whitespace,<sp/>including<sp/>`\n`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\S`<sp/>|<sp/>matches<sp/>any<sp/>character<sp/>that&apos;s<sp/>not<sp/>a<sp/>whitespace<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\t`<sp/>|<sp/>matches<sp/>`\t`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\v`<sp/>|<sp/>matches<sp/>`\v`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\w`<sp/>|<sp/>matches<sp/>any<sp/>letter,<sp/>`_`,<sp/>or<sp/>decimal<sp/>digit<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\W`<sp/>|<sp/>matches<sp/>any<sp/>character<sp/>that<sp/>`\\w`<sp/>doesn&apos;t<sp/>match<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`\\c`<sp/>|<sp/>matches<sp/>any<sp/>literal<sp/>character<sp/>`c`,<sp/>which<sp/>must<sp/>be<sp/>a<sp/>punctuation<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`.`<sp/>|<sp/>matches<sp/>any<sp/>single<sp/>character<sp/>except<sp/>`\n`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`A?`<sp/>|<sp/>matches<sp/>0<sp/>or<sp/>1<sp/>occurrences<sp/>of<sp/>`A`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`A*`<sp/>|<sp/>matches<sp/>0<sp/>or<sp/>many<sp/>occurrences<sp/>of<sp/>`A`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`A+`<sp/>|<sp/>matches<sp/>1<sp/>or<sp/>many<sp/>occurrences<sp/>of<sp/>`A`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`^`<sp/>|<sp/>matches<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>string<sp/>(not<sp/>that<sp/>of<sp/>each<sp/>line)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`$`<sp/>|<sp/>matches<sp/>the<sp/>end<sp/>of<sp/>a<sp/>string<sp/>(not<sp/>that<sp/>of<sp/>each<sp/>line)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`xy`<sp/>|<sp/>matches<sp/>`x`<sp/>followed<sp/>by<sp/>`y`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>help<sp/>you<sp/>determine<sp/>which<sp/>capability<sp/>is<sp/>available<sp/>on<sp/>your<sp/>system,</highlight></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>defines<sp/>macro<sp/>`GTEST_USES_POSIX_RE=1`<sp/>when<sp/>it<sp/>uses<sp/>POSIX</highlight></codeline>
<codeline><highlight class="normal">extended<sp/>regular<sp/>expressions,<sp/>or<sp/>`GTEST_USES_SIMPLE_RE=1`<sp/>when<sp/>it<sp/>uses</highlight></codeline>
<codeline><highlight class="normal">the<sp/>simple<sp/>version.<sp/><sp/>If<sp/>you<sp/>want<sp/>your<sp/>death<sp/>tests<sp/>to<sp/>work<sp/>in<sp/>both</highlight></codeline>
<codeline><highlight class="normal">cases,<sp/>you<sp/>can<sp/>either<sp/>`#if`<sp/>on<sp/>these<sp/>macros<sp/>or<sp/>use<sp/>the<sp/>more<sp/>limited</highlight></codeline>
<codeline><highlight class="normal">syntax<sp/>only.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>How<sp/>It<sp/>Works<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Under<sp/>the<sp/>hood,<sp/>`ASSERT_EXIT()`<sp/>spawns<sp/>a<sp/>new<sp/>process<sp/>and<sp/>executes<sp/>the</highlight></codeline>
<codeline><highlight class="normal">death<sp/>test<sp/>statement<sp/>in<sp/>that<sp/>process.<sp/>The<sp/>details<sp/>of<sp/>of<sp/>how<sp/>precisely</highlight></codeline>
<codeline><highlight class="normal">that<sp/>happens<sp/>depend<sp/>on<sp/>the<sp/>platform<sp/>and<sp/>the<sp/>variable</highlight></codeline>
<codeline><highlight class="normal">`::testing::GTEST_FLAG(death_test_style)`<sp/>(which<sp/>is<sp/>initialized<sp/>from<sp/>the</highlight></codeline>
<codeline><highlight class="normal">command-line<sp/>flag<sp/>`--gtest_death_test_style`).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>On<sp/>POSIX<sp/>systems,<sp/>`fork()`<sp/>(or<sp/>`clone()`<sp/>on<sp/>Linux)<sp/>is<sp/>used<sp/>to<sp/>spawn<sp/>the<sp/>child,<sp/>after<sp/>which:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>variable&apos;s<sp/>value<sp/>is<sp/>`&quot;fast&quot;`,<sp/>the<sp/>death<sp/>test<sp/>statement<sp/>is<sp/>immediately<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>variable&apos;s<sp/>value<sp/>is<sp/>`&quot;threadsafe&quot;`,<sp/>the<sp/>child<sp/>process<sp/>re-executes<sp/>the<sp/>unit<sp/>test<sp/>binary<sp/>just<sp/>as<sp/>it<sp/>was<sp/>originally<sp/>invoked,<sp/>but<sp/>with<sp/>some<sp/>extra<sp/>flags<sp/>to<sp/>cause<sp/>just<sp/>the<sp/>single<sp/>death<sp/>test<sp/>under<sp/>consideration<sp/>to<sp/>be<sp/>run.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>On<sp/>Windows,<sp/>the<sp/>child<sp/>is<sp/>spawned<sp/>using<sp/>the<sp/>`CreateProcess()`<sp/>API,<sp/>and<sp/>re-executes<sp/>the<sp/>binary<sp/>to<sp/>cause<sp/>just<sp/>the<sp/>single<sp/>death<sp/>test<sp/>under<sp/>consideration<sp/>to<sp/>be<sp/>run<sp/>-<sp/>much<sp/>like<sp/>the<sp/>`threadsafe`<sp/>mode<sp/>on<sp/>POSIX.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Other<sp/>values<sp/>for<sp/>the<sp/>variable<sp/>are<sp/>illegal<sp/>and<sp/>will<sp/>cause<sp/>the<sp/>death<sp/>test<sp/>to</highlight></codeline>
<codeline><highlight class="normal">fail.<sp/>Currently,<sp/>the<sp/>flag&apos;s<sp/>default<sp/>value<sp/>is<sp/>`&quot;fast&quot;`.<sp/>However,<sp/>we<sp/>reserve<sp/>the</highlight></codeline>
<codeline><highlight class="normal">right<sp/>to<sp/>change<sp/>it<sp/>in<sp/>the<sp/>future.<sp/>Therefore,<sp/>your<sp/>tests<sp/>should<sp/>not<sp/>depend<sp/>on</highlight></codeline>
<codeline><highlight class="normal">this.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>either<sp/>case,<sp/>the<sp/>parent<sp/>process<sp/>waits<sp/>for<sp/>the<sp/>child<sp/>process<sp/>to<sp/>complete,<sp/>and<sp/>checks<sp/>that</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>the<sp/>child&apos;s<sp/>exit<sp/>status<sp/>satisfies<sp/>the<sp/>predicate,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>the<sp/>child&apos;s<sp/>stderr<sp/>matches<sp/>the<sp/>regular<sp/>expression.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>death<sp/>test<sp/>statement<sp/>runs<sp/>to<sp/>completion<sp/>without<sp/>dying,<sp/>the<sp/>child</highlight></codeline>
<codeline><highlight class="normal">process<sp/>will<sp/>nonetheless<sp/>terminate,<sp/>and<sp/>the<sp/>assertion<sp/>fails.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Death<sp/>Tests<sp/>And<sp/>Threads<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>reason<sp/>for<sp/>the<sp/>two<sp/>death<sp/>test<sp/>styles<sp/>has<sp/>to<sp/>do<sp/>with<sp/>thread<sp/>safety.<sp/>Due<sp/>to</highlight></codeline>
<codeline><highlight class="normal">well-known<sp/>problems<sp/>with<sp/>forking<sp/>in<sp/>the<sp/>presence<sp/>of<sp/>threads,<sp/>death<sp/>tests<sp/>should</highlight></codeline>
<codeline><highlight class="normal">be<sp/>run<sp/>in<sp/>a<sp/>single-threaded<sp/>context.<sp/>Sometimes,<sp/>however,<sp/>it<sp/>isn&apos;t<sp/>feasible<sp/>to</highlight></codeline>
<codeline><highlight class="normal">arrange<sp/>that<sp/>kind<sp/>of<sp/>environment.<sp/>For<sp/>example,<sp/>statically-initialized<sp/>modules</highlight></codeline>
<codeline><highlight class="normal">may<sp/>start<sp/>threads<sp/>before<sp/>main<sp/>is<sp/>ever<sp/>reached.<sp/>Once<sp/>threads<sp/>have<sp/>been<sp/>created,</highlight></codeline>
<codeline><highlight class="normal">it<sp/>may<sp/>be<sp/>difficult<sp/>or<sp/>impossible<sp/>to<sp/>clean<sp/>them<sp/>up.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>has<sp/>three<sp/>features<sp/>intended<sp/>to<sp/>raise<sp/>awareness<sp/>of<sp/>threading<sp/>issues.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>A<sp/>warning<sp/>is<sp/>emitted<sp/>if<sp/>multiple<sp/>threads<sp/>are<sp/>running<sp/>when<sp/>a<sp/>death<sp/>test<sp/>is<sp/>encountered.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Test<sp/>cases<sp/>with<sp/>a<sp/>name<sp/>ending<sp/>in<sp/>&quot;DeathTest&quot;<sp/>are<sp/>run<sp/>before<sp/>all<sp/>other<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>It<sp/>uses<sp/>`clone()`<sp/>instead<sp/>of<sp/>`fork()`<sp/>to<sp/>spawn<sp/>the<sp/>child<sp/>process<sp/>on<sp/>Linux<sp/>(`clone()`<sp/>is<sp/>not<sp/>available<sp/>on<sp/>Cygwin<sp/>and<sp/>Mac),<sp/>as<sp/>`fork()`<sp/>is<sp/>more<sp/>likely<sp/>to<sp/>cause<sp/>the<sp/>child<sp/>to<sp/>hang<sp/>when<sp/>the<sp/>parent<sp/>process<sp/>has<sp/>multiple<sp/>threads.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It&apos;s<sp/>perfectly<sp/>fine<sp/>to<sp/>create<sp/>threads<sp/>inside<sp/>a<sp/>death<sp/>test<sp/>statement;<sp/>they<sp/>are</highlight></codeline>
<codeline><highlight class="normal">executed<sp/>in<sp/>a<sp/>separate<sp/>process<sp/>and<sp/>cannot<sp/>affect<sp/>the<sp/>parent.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Death<sp/>Test<sp/>Styles<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>&quot;threadsafe&quot;<sp/>death<sp/>test<sp/>style<sp/>was<sp/>introduced<sp/>in<sp/>order<sp/>to<sp/>help<sp/>mitigate<sp/>the</highlight></codeline>
<codeline><highlight class="normal">risks<sp/>of<sp/>testing<sp/>in<sp/>a<sp/>possibly<sp/>multithreaded<sp/>environment.<sp/>It<sp/>trades<sp/>increased</highlight></codeline>
<codeline><highlight class="normal">test<sp/>execution<sp/>time<sp/>(potentially<sp/>dramatically<sp/>so)<sp/>for<sp/>improved<sp/>thread<sp/>safety.</highlight></codeline>
<codeline><highlight class="normal">We<sp/>suggest<sp/>using<sp/>the<sp/>faster,<sp/>default<sp/>&quot;fast&quot;<sp/>style<sp/>unless<sp/>your<sp/>test<sp/>has<sp/>specific</highlight></codeline>
<codeline><highlight class="normal">problems<sp/>with<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>choose<sp/>a<sp/>particular<sp/>style<sp/>of<sp/>death<sp/>tests<sp/>by<sp/>setting<sp/>the<sp/>flag</highlight></codeline>
<codeline><highlight class="normal">programmatically:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">::testing::FLAGS_gtest_death_test_style<sp/>=<sp/>&quot;threadsafe&quot;;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>do<sp/>this<sp/>in<sp/>`main()`<sp/>to<sp/>set<sp/>the<sp/>style<sp/>for<sp/>all<sp/>death<sp/>tests<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">binary,<sp/>or<sp/>in<sp/>individual<sp/>tests.<sp/>Recall<sp/>that<sp/>flags<sp/>are<sp/>saved<sp/>before<sp/>running<sp/>each</highlight></codeline>
<codeline><highlight class="normal">test<sp/>and<sp/>restored<sp/>afterwards,<sp/>so<sp/>you<sp/>need<sp/>not<sp/>do<sp/>that<sp/>yourself.<sp/>For<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>TestOne)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::FLAGS_gtest_death_test_style<sp/>=<sp/>&quot;threadsafe&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>test<sp/>is<sp/>run<sp/>in<sp/>the<sp/>&quot;threadsafe&quot;<sp/>style:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH(ThisShouldDie(),<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyDeathTest,<sp/>TestTwo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>test<sp/>is<sp/>run<sp/>in<sp/>the<sp/>&quot;fast&quot;<sp/>style:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_DEATH(ThisShouldDie(),<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::FLAGS_gtest_death_test_style<sp/>=<sp/>&quot;fast&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Caveats<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>_statement_<sp/>argument<sp/>of<sp/>`ASSERT_EXIT()`<sp/>can<sp/>be<sp/>any<sp/>valid<sp/>C++<sp/>statement</highlight></codeline>
<codeline><highlight class="normal">except<sp/>that<sp/>it<sp/>can<sp/>not<sp/>return<sp/>from<sp/>the<sp/>current<sp/>function.<sp/>This<sp/>means</highlight></codeline>
<codeline><highlight class="normal">_statement_<sp/>should<sp/>not<sp/>contain<sp/>`return`<sp/>or<sp/>a<sp/>macro<sp/>that<sp/>might<sp/>return<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal">`ASSERT_TRUE()`<sp/>).<sp/>If<sp/>_statement_<sp/>returns<sp/>before<sp/>it<sp/>crashes,<sp/>Google<sp/>Test<sp/>will</highlight></codeline>
<codeline><highlight class="normal">print<sp/>an<sp/>error<sp/>message,<sp/>and<sp/>the<sp/>test<sp/>will<sp/>fail.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Since<sp/>_statement_<sp/>runs<sp/>in<sp/>the<sp/>child<sp/>process,<sp/>any<sp/>in-memory<sp/>side<sp/>effect<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal">modifying<sp/>a<sp/>variable,<sp/>releasing<sp/>memory,<sp/>etc)<sp/>it<sp/>causes<sp/>will<sp/>_not_<sp/>be<sp/>observable</highlight></codeline>
<codeline><highlight class="normal">in<sp/>the<sp/>parent<sp/>process.<sp/>In<sp/>particular,<sp/>if<sp/>you<sp/>release<sp/>memory<sp/>in<sp/>a<sp/>death<sp/>test,</highlight></codeline>
<codeline><highlight class="normal">your<sp/>program<sp/>will<sp/>fail<sp/>the<sp/>heap<sp/>check<sp/>as<sp/>the<sp/>parent<sp/>process<sp/>will<sp/>never<sp/>see<sp/>the</highlight></codeline>
<codeline><highlight class="normal">memory<sp/>reclaimed.<sp/>To<sp/>solve<sp/>this<sp/>problem,<sp/>you<sp/>can</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>try<sp/>not<sp/>to<sp/>free<sp/>memory<sp/>in<sp/>a<sp/>death<sp/>test;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>free<sp/>the<sp/>memory<sp/>again<sp/>in<sp/>the<sp/>parent<sp/>process;<sp/>or</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>do<sp/>not<sp/>use<sp/>the<sp/>heap<sp/>checker<sp/>in<sp/>your<sp/>program.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Due<sp/>to<sp/>an<sp/>implementation<sp/>detail,<sp/>you<sp/>cannot<sp/>place<sp/>multiple<sp/>death<sp/>test</highlight></codeline>
<codeline><highlight class="normal">assertions<sp/>on<sp/>the<sp/>same<sp/>line;<sp/>otherwise,<sp/>compilation<sp/>will<sp/>fail<sp/>with<sp/>an<sp/>unobvious</highlight></codeline>
<codeline><highlight class="normal">error<sp/>message.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Despite<sp/>the<sp/>improved<sp/>thread<sp/>safety<sp/>afforded<sp/>by<sp/>the<sp/>&quot;threadsafe&quot;<sp/>style<sp/>of<sp/>death</highlight></codeline>
<codeline><highlight class="normal">test,<sp/>thread<sp/>problems<sp/>such<sp/>as<sp/>deadlock<sp/>are<sp/>still<sp/>possible<sp/>in<sp/>the<sp/>presence<sp/>of</highlight></codeline>
<codeline><highlight class="normal">handlers<sp/>registered<sp/>with<sp/>`pthread_atfork(3)`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Using<sp/>Assertions<sp/>in<sp/>Sub-routines<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Adding<sp/>Traces<sp/>to<sp/>Assertions<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>test<sp/>sub-routine<sp/>is<sp/>called<sp/>from<sp/>several<sp/>places,<sp/>when<sp/>an<sp/>assertion</highlight></codeline>
<codeline><highlight class="normal">inside<sp/>it<sp/>fails,<sp/>it<sp/>can<sp/>be<sp/>hard<sp/>to<sp/>tell<sp/>which<sp/>invocation<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">sub-routine<sp/>the<sp/>failure<sp/>is<sp/>from.<sp/><sp/>You<sp/>can<sp/>alleviate<sp/>this<sp/>problem<sp/>using</highlight></codeline>
<codeline><highlight class="normal">extra<sp/>logging<sp/>or<sp/>custom<sp/>failure<sp/>messages,<sp/>but<sp/>that<sp/>usually<sp/>clutters<sp/>up</highlight></codeline>
<codeline><highlight class="normal">your<sp/>tests.<sp/>A<sp/>better<sp/>solution<sp/>is<sp/>to<sp/>use<sp/>the<sp/>`SCOPED_TRACE`<sp/>macro:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`SCOPED_TRACE(`_message_`);`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-----------------------------|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">where<sp/>_message_<sp/>can<sp/>be<sp/>anything<sp/>streamable<sp/>to<sp/>`std::ostream`.<sp/>This</highlight></codeline>
<codeline><highlight class="normal">macro<sp/>will<sp/>cause<sp/>the<sp/>current<sp/>file<sp/>name,<sp/>line<sp/>number,<sp/>and<sp/>the<sp/>given</highlight></codeline>
<codeline><highlight class="normal">message<sp/>to<sp/>be<sp/>added<sp/>in<sp/>every<sp/>failure<sp/>message.<sp/>The<sp/>effect<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">undone<sp/>when<sp/>the<sp/>control<sp/>leaves<sp/>the<sp/>current<sp/>lexical<sp/>scope.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">10:<sp/>void<sp/>Sub1(int<sp/>n)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">11:<sp/><sp/><sp/>EXPECT_EQ(1,<sp/>Bar(n));</highlight></codeline>
<codeline><highlight class="normal">12:<sp/><sp/><sp/>EXPECT_EQ(2,<sp/>Bar(n<sp/>+<sp/>1));</highlight></codeline>
<codeline><highlight class="normal">13:<sp/>}</highlight></codeline>
<codeline><highlight class="normal">14:</highlight></codeline>
<codeline><highlight class="normal">15:<sp/>TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal">16:<sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal">17:<sp/><sp/><sp/><sp/><sp/>SCOPED_TRACE(&quot;A&quot;);<sp/><sp/>//<sp/>This<sp/>trace<sp/>point<sp/>will<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline><highlight class="normal">18:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>every<sp/>failure<sp/>in<sp/>this<sp/>scope.</highlight></codeline>
<codeline><highlight class="normal">19:<sp/><sp/><sp/><sp/><sp/>Sub1(1);</highlight></codeline>
<codeline><highlight class="normal">20:<sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">21:<sp/><sp/><sp/>//<sp/>Now<sp/>it<sp/>won&apos;t.</highlight></codeline>
<codeline><highlight class="normal">22:<sp/><sp/><sp/>Sub1(9);</highlight></codeline>
<codeline><highlight class="normal">23:<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">could<sp/>result<sp/>in<sp/>messages<sp/>like<sp/>these:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:11:<sp/>Failure</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>Bar(n)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Trace:</highlight></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:17:<sp/>A</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">path/to/foo_test.cc:12:<sp/>Failure</highlight></codeline>
<codeline><highlight class="normal">Value<sp/>of:<sp/>Bar(n<sp/>+<sp/>1)</highlight></codeline>
<codeline><highlight class="normal">Expected:<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Actual:<sp/>3</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Without<sp/>the<sp/>trace,<sp/>it<sp/>would&apos;ve<sp/>been<sp/>difficult<sp/>to<sp/>know<sp/>which<sp/>invocation</highlight></codeline>
<codeline><highlight class="normal">of<sp/>`Sub1()`<sp/>the<sp/>two<sp/>failures<sp/>come<sp/>from<sp/>respectively.<sp/>(You<sp/>could<sp/>add<sp/>an</highlight></codeline>
<codeline><highlight class="normal">extra<sp/>message<sp/>to<sp/>each<sp/>assertion<sp/>in<sp/>`Sub1()`<sp/>to<sp/>indicate<sp/>the<sp/>value<sp/>of</highlight></codeline>
<codeline><highlight class="normal">`n`,<sp/>but<sp/>that&apos;s<sp/>tedious.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Some<sp/>tips<sp/>on<sp/>using<sp/>`SCOPED_TRACE`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>With<sp/>a<sp/>suitable<sp/>message,<sp/>it&apos;s<sp/>often<sp/>enough<sp/>to<sp/>use<sp/>`SCOPED_TRACE`<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>a<sp/>sub-routine,<sp/>instead<sp/>of<sp/>at<sp/>each<sp/>call<sp/>site.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>When<sp/>calling<sp/>sub-routines<sp/>inside<sp/>a<sp/>loop,<sp/>make<sp/>the<sp/>loop<sp/>iterator<sp/>part<sp/>of<sp/>the<sp/>message<sp/>in<sp/>`SCOPED_TRACE`<sp/>such<sp/>that<sp/>you<sp/>can<sp/>know<sp/>which<sp/>iteration<sp/>the<sp/>failure<sp/>is<sp/>from.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Sometimes<sp/>the<sp/>line<sp/>number<sp/>of<sp/>the<sp/>trace<sp/>point<sp/>is<sp/>enough<sp/>for<sp/>identifying<sp/>the<sp/>particular<sp/>invocation<sp/>of<sp/>a<sp/>sub-routine.<sp/>In<sp/>this<sp/>case,<sp/>you<sp/>don&apos;t<sp/>have<sp/>to<sp/>choose<sp/>a<sp/>unique<sp/>message<sp/>for<sp/>`SCOPED_TRACE`.<sp/>You<sp/>can<sp/>simply<sp/>use<sp/>`&quot;&quot;`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>You<sp/>can<sp/>use<sp/>`SCOPED_TRACE`<sp/>in<sp/>an<sp/>inner<sp/>scope<sp/>when<sp/>there<sp/>is<sp/>one<sp/>in<sp/>the<sp/>outer<sp/>scope.<sp/>In<sp/>this<sp/>case,<sp/>all<sp/>active<sp/>trace<sp/>points<sp/>will<sp/>be<sp/>included<sp/>in<sp/>the<sp/>failure<sp/>messages,<sp/>in<sp/>reverse<sp/>order<sp/>they<sp/>are<sp/>encountered.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>The<sp/>trace<sp/>dump<sp/>is<sp/>clickable<sp/>in<sp/>Emacs&apos;<sp/>compilation<sp/>buffer<sp/>-<sp/>hit<sp/>return<sp/>on<sp/>a<sp/>line<sp/>number<sp/>and<sp/>you&apos;ll<sp/>be<sp/>taken<sp/>to<sp/>that<sp/>line<sp/>in<sp/>the<sp/>source<sp/>file!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Propagating<sp/>Fatal<sp/>Failures<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>common<sp/>pitfall<sp/>when<sp/>using<sp/>`ASSERT_*`<sp/>and<sp/>`FAIL*`<sp/>is<sp/>not<sp/>understanding<sp/>that</highlight></codeline>
<codeline><highlight class="normal">when<sp/>they<sp/>fail<sp/>they<sp/>only<sp/>abort<sp/>the<sp/>_current<sp/>function_,<sp/>not<sp/>the<sp/>entire<sp/>test.<sp/>For</highlight></codeline>
<codeline><highlight class="normal">example,<sp/>the<sp/>following<sp/>test<sp/>will<sp/>segfault:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Subroutine()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Generates<sp/>a<sp/>fatal<sp/>failure<sp/>and<sp/>aborts<sp/>the<sp/>current<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>following<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Subroutine();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>intended<sp/>behavior<sp/>is<sp/>for<sp/>the<sp/>fatal<sp/>failure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>in<sp/>Subroutine()<sp/>to<sp/>abort<sp/>the<sp/>entire<sp/>test.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>actual<sp/>behavior:<sp/>the<sp/>function<sp/>goes<sp/>on<sp/>after<sp/>Subroutine()<sp/>returns.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int*<sp/>p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*p<sp/>=<sp/>3;<sp/>//<sp/>Segfault!</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Since<sp/>we<sp/>don&apos;t<sp/>use<sp/>exceptions,<sp/>it<sp/>is<sp/>technically<sp/>impossible<sp/>to</highlight></codeline>
<codeline><highlight class="normal">implement<sp/>the<sp/>intended<sp/>behavior<sp/>here.<sp/><sp/>To<sp/>alleviate<sp/>this,<sp/>Google<sp/>Test</highlight></codeline>
<codeline><highlight class="normal">provides<sp/>two<sp/>solutions.<sp/><sp/>You<sp/>could<sp/>use<sp/>either<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`(ASSERT|EXPECT)_NO_FATAL_FAILURE`<sp/>assertions<sp/>or<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`HasFatalFailure()`<sp/>function.<sp/><sp/>They<sp/>are<sp/>described<sp/>in<sp/>the<sp/>following<sp/>two</highlight></codeline>
<codeline><highlight class="normal">subsections.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Asserting<sp/>on<sp/>Subroutines<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">As<sp/>shown<sp/>above,<sp/>if<sp/>your<sp/>test<sp/>calls<sp/>a<sp/>subroutine<sp/>that<sp/>has<sp/>an<sp/>`ASSERT_*`</highlight></codeline>
<codeline><highlight class="normal">failure<sp/>in<sp/>it,<sp/>the<sp/>test<sp/>will<sp/>continue<sp/>after<sp/>the<sp/>subroutine</highlight></codeline>
<codeline><highlight class="normal">returns.<sp/>This<sp/>may<sp/>not<sp/>be<sp/>what<sp/>you<sp/>want.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Often<sp/>people<sp/>want<sp/>fatal<sp/>failures<sp/>to<sp/>propagate<sp/>like<sp/>exceptions.<sp/><sp/>For</highlight></codeline>
<codeline><highlight class="normal">that<sp/>Google<sp/>Test<sp/>offers<sp/>the<sp/>following<sp/>macros:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Fatal<sp/>assertion**<sp/>|<sp/>**Nonfatal<sp/>assertion**<sp/>|<sp/>**Verifies**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------|:-----------------------|:-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ASSERT_NO_FATAL_FAILURE(`_statement_`);`<sp/>|<sp/>`EXPECT_NO_FATAL_FAILURE(`_statement_`);`<sp/>|<sp/>_statement_<sp/>doesn&apos;t<sp/>generate<sp/>any<sp/>new<sp/>fatal<sp/>failures<sp/>in<sp/>the<sp/>current<sp/>thread.<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Only<sp/>failures<sp/>in<sp/>the<sp/>thread<sp/>that<sp/>executes<sp/>the<sp/>assertion<sp/>are<sp/>checked<sp/>to</highlight></codeline>
<codeline><highlight class="normal">determine<sp/>the<sp/>result<sp/>of<sp/>this<sp/>type<sp/>of<sp/>assertions.<sp/><sp/>If<sp/>_statement_</highlight></codeline>
<codeline><highlight class="normal">creates<sp/>new<sp/>threads,<sp/>failures<sp/>in<sp/>these<sp/>threads<sp/>are<sp/>ignored.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Examples:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">ASSERT_NO_FATAL_FAILURE(Foo());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal">EXPECT_NO_FATAL_FAILURE({</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>Bar();</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.<sp/>Assertions<sp/>from<sp/>multiple<sp/>threads</highlight></codeline>
<codeline><highlight class="normal">are<sp/>currently<sp/>not<sp/>supported.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Checking<sp/>for<sp/>Failures<sp/>in<sp/>the<sp/>Current<sp/>Test<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`HasFatalFailure()`<sp/>in<sp/>the<sp/>`::testing::Test`<sp/>class<sp/>returns<sp/>`true`<sp/>if<sp/>an</highlight></codeline>
<codeline><highlight class="normal">assertion<sp/>in<sp/>the<sp/>current<sp/>test<sp/>has<sp/>suffered<sp/>a<sp/>fatal<sp/>failure.<sp/>This</highlight></codeline>
<codeline><highlight class="normal">allows<sp/>functions<sp/>to<sp/>catch<sp/>fatal<sp/>failures<sp/>in<sp/>a<sp/>sub-routine<sp/>and<sp/>return</highlight></codeline>
<codeline><highlight class="normal">early.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>HasFatalFailure();</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>typical<sp/>usage,<sp/>which<sp/>basically<sp/>simulates<sp/>the<sp/>behavior<sp/>of<sp/>a<sp/>thrown</highlight></codeline>
<codeline><highlight class="normal">exception,<sp/>is:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>Bar)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Subroutine();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Aborts<sp/>if<sp/>Subroutine()<sp/>had<sp/>a<sp/>fatal<sp/>failure.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(HasFatalFailure())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>following<sp/>won&apos;t<sp/>be<sp/>executed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>`HasFatalFailure()`<sp/>is<sp/>used<sp/>outside<sp/>of<sp/>`TEST()`<sp/>,<sp/>`TEST_F()`<sp/>,<sp/>or<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">fixture,<sp/>you<sp/>must<sp/>add<sp/>the<sp/>`::testing::Test::`<sp/>prefix,<sp/>as<sp/>in:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(::testing::Test::HasFatalFailure())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Similarly,<sp/>`HasNonfatalFailure()`<sp/>returns<sp/>`true`<sp/>if<sp/>the<sp/>current<sp/>test</highlight></codeline>
<codeline><highlight class="normal">has<sp/>at<sp/>least<sp/>one<sp/>non-fatal<sp/>failure,<sp/>and<sp/>`HasFailure()`<sp/>returns<sp/>`true`</highlight></codeline>
<codeline><highlight class="normal">if<sp/>the<sp/>current<sp/>test<sp/>has<sp/>at<sp/>least<sp/>one<sp/>failure<sp/>of<sp/>either<sp/>kind.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.<sp/><sp/>`HasNonfatalFailure()`<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`HasFailure()`<sp/>are<sp/>available<sp/>since<sp/>version<sp/>1.4.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Logging<sp/>Additional<sp/>Information<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>your<sp/>test<sp/>code,<sp/>you<sp/>can<sp/>call<sp/>`RecordProperty(&quot;key&quot;,<sp/>value)`<sp/>to<sp/>log</highlight></codeline>
<codeline><highlight class="normal">additional<sp/>information,<sp/>where<sp/>`value`<sp/>can<sp/>be<sp/>either<sp/>a<sp/>C<sp/>string<sp/>or<sp/>a<sp/>32-bit</highlight></codeline>
<codeline><highlight class="normal">integer.<sp/>The<sp/>_last_<sp/>value<sp/>recorded<sp/>for<sp/>a<sp/>key<sp/>will<sp/>be<sp/>emitted<sp/>to<sp/>the<sp/>XML<sp/>output</highlight></codeline>
<codeline><highlight class="normal">if<sp/>you<sp/>specify<sp/>one.<sp/>For<sp/>example,<sp/>the<sp/>test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST_F(WidgetUsageTest,<sp/>MinAndMaxWidgets)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RecordProperty(&quot;MaximumWidgets&quot;,<sp/>ComputeMaxUsage());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>RecordProperty(&quot;MinimumWidgets&quot;,<sp/>ComputeMinUsage());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">will<sp/>output<sp/>XML<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;testcase<sp/>name=&quot;MinAndMaxWidgets&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;6&quot;<sp/>classname=&quot;WidgetUsageTest&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MaximumWidgets=&quot;12&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinimumWidgets=&quot;9&quot;<sp/>/&gt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Note_:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`RecordProperty()`<sp/>is<sp/>a<sp/>static<sp/>member<sp/>of<sp/>the<sp/>`Test`<sp/>class.<sp/>Therefore<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>prefixed<sp/>with<sp/>`::testing::Test::`<sp/>if<sp/>used<sp/>outside<sp/>of<sp/>the<sp/>`TEST`<sp/>body<sp/>and<sp/>the<sp/>test<sp/>fixture<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`key`<sp/>must<sp/>be<sp/>a<sp/>valid<sp/>XML<sp/>attribute<sp/>name,<sp/>and<sp/>cannot<sp/>conflict<sp/>with<sp/>the<sp/>ones<sp/>already<sp/>used<sp/>by<sp/>Google<sp/>Test<sp/>(`name`,<sp/>`status`,<sp/><sp/><sp/><sp/><sp/>`time`,<sp/>and<sp/>`classname`).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Sharing<sp/>Resources<sp/>Between<sp/>Tests<sp/>in<sp/>the<sp/>Same<sp/>Test<sp/>Case<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>creates<sp/>a<sp/>new<sp/>test<sp/>fixture<sp/>object<sp/>for<sp/>each<sp/>test<sp/>in<sp/>order<sp/>to<sp/>make</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>independent<sp/>and<sp/>easier<sp/>to<sp/>debug.<sp/>However,<sp/>sometimes<sp/>tests<sp/>use<sp/>resources</highlight></codeline>
<codeline><highlight class="normal">that<sp/>are<sp/>expensive<sp/>to<sp/>set<sp/>up,<sp/>making<sp/>the<sp/>one-copy-per-test<sp/>model<sp/>prohibitively</highlight></codeline>
<codeline><highlight class="normal">expensive.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>tests<sp/>don&apos;t<sp/>change<sp/>the<sp/>resource,<sp/>there&apos;s<sp/>no<sp/>harm<sp/>in<sp/>them<sp/>sharing<sp/>a</highlight></codeline>
<codeline><highlight class="normal">single<sp/>resource<sp/>copy.<sp/>So,<sp/>in<sp/>addition<sp/>to<sp/>per-test<sp/>set-up/tear-down,<sp/>Google<sp/>Test</highlight></codeline>
<codeline><highlight class="normal">also<sp/>supports<sp/>per-test-case<sp/>set-up/tear-down.<sp/>To<sp/>use<sp/>it:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>In<sp/>your<sp/>test<sp/>fixture<sp/>class<sp/>(say<sp/>`FooTest`<sp/>),<sp/>define<sp/>as<sp/>`static`<sp/>some<sp/>member<sp/>variables<sp/>to<sp/>hold<sp/>the<sp/>shared<sp/>resources.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>In<sp/>the<sp/>same<sp/>test<sp/>fixture<sp/>class,<sp/>define<sp/>a<sp/>`static<sp/>void<sp/>SetUpTestCase()`<sp/>function<sp/>(remember<sp/>not<sp/>to<sp/>spell<sp/>it<sp/>as<sp/>**`SetupTestCase`**<sp/>with<sp/>a<sp/>small<sp/>`u`!)<sp/>to<sp/>set<sp/>up<sp/>the<sp/>shared<sp/>resources<sp/>and<sp/>a<sp/>`static<sp/>void<sp/>TearDownTestCase()`<sp/>function<sp/>to<sp/>tear<sp/>them<sp/>down.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">That&apos;s<sp/>it!<sp/>Google<sp/>Test<sp/>automatically<sp/>calls<sp/>`SetUpTestCase()`<sp/>before<sp/>running<sp/>the</highlight></codeline>
<codeline><highlight class="normal">_first<sp/>test_<sp/>in<sp/>the<sp/>`FooTest`<sp/>test<sp/>case<sp/>(i.e.<sp/>before<sp/>creating<sp/>the<sp/>first</highlight></codeline>
<codeline><highlight class="normal">`FooTest`<sp/>object),<sp/>and<sp/>calls<sp/>`TearDownTestCase()`<sp/>after<sp/>running<sp/>the<sp/>_last<sp/>test_</highlight></codeline>
<codeline><highlight class="normal">in<sp/>it<sp/>(i.e.<sp/>after<sp/>deleting<sp/>the<sp/>last<sp/>`FooTest`<sp/>object).<sp/>In<sp/>between,<sp/>the<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">can<sp/>use<sp/>the<sp/>shared<sp/>resources.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Remember<sp/>that<sp/>the<sp/>test<sp/>order<sp/>is<sp/>undefined,<sp/>so<sp/>your<sp/>code<sp/>can&apos;t<sp/>depend<sp/>on<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">preceding<sp/>or<sp/>following<sp/>another.<sp/>Also,<sp/>the<sp/>tests<sp/>must<sp/>either<sp/>not<sp/>modify<sp/>the</highlight></codeline>
<codeline><highlight class="normal">state<sp/>of<sp/>any<sp/>shared<sp/>resource,<sp/>or,<sp/>if<sp/>they<sp/>do<sp/>modify<sp/>the<sp/>state,<sp/>they<sp/>must</highlight></codeline>
<codeline><highlight class="normal">restore<sp/>the<sp/>state<sp/>to<sp/>its<sp/>original<sp/>value<sp/>before<sp/>passing<sp/>control<sp/>to<sp/>the<sp/>next</highlight></codeline>
<codeline><highlight class="normal">test.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here&apos;s<sp/>an<sp/>example<sp/>of<sp/>per-test-case<sp/>set-up<sp/>and<sp/>tear-down:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Per-test-case<sp/>set-up.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Called<sp/>before<sp/>the<sp/>first<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Can<sp/>be<sp/>omitted<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>SetUpTestCase()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/>new<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Per-test-case<sp/>tear-down.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Called<sp/>after<sp/>the<sp/>last<sp/>test<sp/>in<sp/>this<sp/>test<sp/>case.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Can<sp/>be<sp/>omitted<sp/>if<sp/>not<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>void<sp/>TearDownTestCase()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delete<sp/>shared_resource_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>shared_resource_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>define<sp/>per-test<sp/>set-up<sp/>and<sp/>tear-down<sp/>logic<sp/>as<sp/>usual.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>TearDown()<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Some<sp/>expensive<sp/>resource<sp/>shared<sp/>by<sp/>all<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>T*<sp/>shared_resource_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">T*<sp/>FooTest::shared_resource_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Test1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>shared_resource<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Test2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>shared_resource<sp/>here<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Global<sp/>Set-Up<sp/>and<sp/>Tear-Down<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Just<sp/>as<sp/>you<sp/>can<sp/>do<sp/>set-up<sp/>and<sp/>tear-down<sp/>at<sp/>the<sp/>test<sp/>level<sp/>and<sp/>the<sp/>test<sp/>case</highlight></codeline>
<codeline><highlight class="normal">level,<sp/>you<sp/>can<sp/>also<sp/>do<sp/>it<sp/>at<sp/>the<sp/>test<sp/>program<sp/>level.<sp/>Here&apos;s<sp/>how.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">First,<sp/>you<sp/>subclass<sp/>the<sp/>`::testing::Environment`<sp/>class<sp/>to<sp/>define<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">environment,<sp/>which<sp/>knows<sp/>how<sp/>to<sp/>set-up<sp/>and<sp/>tear-down:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Environment<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>~Environment()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>set<sp/>up<sp/>the<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>tear<sp/>down<sp/>the<sp/>environment.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>virtual<sp/>void<sp/>TearDown()<sp/>{}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>you<sp/>register<sp/>an<sp/>instance<sp/>of<sp/>your<sp/>environment<sp/>class<sp/>with<sp/>Google<sp/>Test<sp/>by</highlight></codeline>
<codeline><highlight class="normal">calling<sp/>the<sp/>`::testing::AddGlobalTestEnvironment()`<sp/>function:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Environment*<sp/>AddGlobalTestEnvironment(Environment*<sp/>env);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now,<sp/>when<sp/>`RUN_ALL_TESTS()`<sp/>is<sp/>called,<sp/>it<sp/>first<sp/>calls<sp/>the<sp/>`SetUp()`<sp/>method<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>environment<sp/>object,<sp/>then<sp/>runs<sp/>the<sp/>tests<sp/>if<sp/>there<sp/>was<sp/>no<sp/>fatal<sp/>failures,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">finally<sp/>calls<sp/>`TearDown()`<sp/>of<sp/>the<sp/>environment<sp/>object.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It&apos;s<sp/>OK<sp/>to<sp/>register<sp/>multiple<sp/>environment<sp/>objects.<sp/>In<sp/>this<sp/>case,<sp/>their<sp/>`SetUp()`</highlight></codeline>
<codeline><highlight class="normal">will<sp/>be<sp/>called<sp/>in<sp/>the<sp/>order<sp/>they<sp/>are<sp/>registered,<sp/>and<sp/>their<sp/>`TearDown()`<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">called<sp/>in<sp/>the<sp/>reverse<sp/>order.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>Google<sp/>Test<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>registered<sp/>environment<sp/>objects.</highlight></codeline>
<codeline><highlight class="normal">Therefore<sp/>**do<sp/>not<sp/>delete<sp/>them**<sp/>by<sp/>yourself.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>should<sp/>call<sp/>`AddGlobalTestEnvironment()`<sp/>before<sp/>`RUN_ALL_TESTS()`<sp/>is</highlight></codeline>
<codeline><highlight class="normal">called,<sp/>probably<sp/>in<sp/>`main()`.<sp/>If<sp/>you<sp/>use<sp/>`gtest_main`,<sp/>you<sp/>need<sp/>to<sp/><sp/><sp/><sp/><sp/><sp/>call</highlight></codeline>
<codeline><highlight class="normal">this<sp/>before<sp/>`main()`<sp/>starts<sp/>for<sp/>it<sp/>to<sp/>take<sp/>effect.<sp/>One<sp/>way<sp/>to<sp/>do<sp/>this<sp/>is<sp/>to</highlight></codeline>
<codeline><highlight class="normal">define<sp/>a<sp/>global<sp/>variable<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">::testing::Environment*<sp/>const<sp/>foo_env<sp/>=<sp/>::testing::AddGlobalTestEnvironment(new<sp/>FooEnvironment);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">However,<sp/>we<sp/>strongly<sp/>recommend<sp/>you<sp/>to<sp/>write<sp/>your<sp/>own<sp/>`main()`<sp/>and<sp/>call</highlight></codeline>
<codeline><highlight class="normal">`AddGlobalTestEnvironment()`<sp/>there,<sp/>as<sp/>relying<sp/>on<sp/>initialization<sp/>of<sp/>global</highlight></codeline>
<codeline><highlight class="normal">variables<sp/>makes<sp/>the<sp/>code<sp/>harder<sp/>to<sp/>read<sp/>and<sp/>may<sp/>cause<sp/>problems<sp/>when<sp/>you</highlight></codeline>
<codeline><highlight class="normal">register<sp/>multiple<sp/>environments<sp/>from<sp/>different<sp/>translation<sp/>units<sp/>and<sp/>the</highlight></codeline>
<codeline><highlight class="normal">environments<sp/>have<sp/>dependencies<sp/>among<sp/>them<sp/>(remember<sp/>that<sp/>the<sp/>compiler<sp/>doesn&apos;t</highlight></codeline>
<codeline><highlight class="normal">guarantee<sp/>the<sp/>order<sp/>in<sp/>which<sp/>global<sp/>variables<sp/>from<sp/>different<sp/>translation<sp/>units</highlight></codeline>
<codeline><highlight class="normal">are<sp/>initialized).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Value<sp/>Parameterized<sp/>Tests<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Value-parameterized<sp/>tests_<sp/>allow<sp/>you<sp/>to<sp/>test<sp/>your<sp/>code<sp/>with<sp/>different</highlight></codeline>
<codeline><highlight class="normal">parameters<sp/>without<sp/>writing<sp/>multiple<sp/>copies<sp/>of<sp/>the<sp/>same<sp/>test.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Suppose<sp/>you<sp/>write<sp/>a<sp/>test<sp/>for<sp/>your<sp/>code<sp/>and<sp/>then<sp/>realize<sp/>that<sp/>your<sp/>code<sp/>is<sp/>affected<sp/>by<sp/>a<sp/>presence<sp/>of<sp/>a<sp/>Boolean<sp/>command<sp/>line<sp/>flag.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST(MyCodeTest,<sp/>TestFoo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>A<sp/>code<sp/>to<sp/>test<sp/>foo().</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Usually<sp/>people<sp/>factor<sp/>their<sp/>test<sp/>code<sp/>into<sp/>a<sp/>function<sp/>with<sp/>a<sp/>Boolean<sp/>parameter<sp/>in<sp/>such<sp/>situations.<sp/>The<sp/>function<sp/>sets<sp/>the<sp/>flag,<sp/>then<sp/>executes<sp/>the<sp/>testing<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">void<sp/>TestFooHelper(bool<sp/>flag_value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>flag<sp/>=<sp/>flag_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>A<sp/>code<sp/>to<sp/>test<sp/>foo().</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST(MyCodeTest,<sp/>TestFooo)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestFooHelper(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestFooHelper(true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">But<sp/>this<sp/>setup<sp/>has<sp/>serious<sp/>drawbacks.<sp/>First,<sp/>when<sp/>a<sp/>test<sp/>assertion<sp/>fails<sp/>in<sp/>your<sp/>tests,<sp/>it<sp/>becomes<sp/>unclear<sp/>what<sp/>value<sp/>of<sp/>the<sp/>parameter<sp/>caused<sp/>it<sp/>to<sp/>fail.<sp/>You<sp/>can<sp/>stream<sp/>a<sp/>clarifying<sp/>message<sp/>into<sp/>your<sp/>`EXPECT`/`ASSERT`<sp/>statements,<sp/>but<sp/>it<sp/>you&apos;ll<sp/>have<sp/>to<sp/>do<sp/>it<sp/>with<sp/>all<sp/>of<sp/>them.<sp/>Second,<sp/>you<sp/>have<sp/>to<sp/>add<sp/>one<sp/>such<sp/>helper<sp/>function<sp/>per<sp/>test.<sp/>What<sp/>if<sp/>you<sp/>have<sp/>ten<sp/>tests?<sp/>Twenty?<sp/>A<sp/>hundred?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Value-parameterized<sp/>tests<sp/>will<sp/>let<sp/>you<sp/>write<sp/>your<sp/>test<sp/>only<sp/>once<sp/>and<sp/>then<sp/>easily<sp/>instantiate<sp/>and<sp/>run<sp/>it<sp/>with<sp/>an<sp/>arbitrary<sp/>number<sp/>of<sp/>parameter<sp/>values.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>are<sp/>some<sp/>other<sp/>situations<sp/>when<sp/>value-parameterized<sp/>tests<sp/>come<sp/>handy:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>You<sp/>wan<sp/>to<sp/>test<sp/>different<sp/>implementations<sp/>of<sp/>an<sp/>OO<sp/>interface.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>You<sp/>want<sp/>to<sp/>test<sp/>your<sp/>code<sp/>over<sp/>various<sp/>inputs<sp/>(a.k.a.<sp/>data-driven<sp/>testing).<sp/>This<sp/>feature<sp/>is<sp/>easy<sp/>to<sp/>abuse,<sp/>so<sp/>please<sp/>exercise<sp/>your<sp/>good<sp/>sense<sp/>when<sp/>doing<sp/>it!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>How<sp/>to<sp/>Write<sp/>Value-Parameterized<sp/>Tests<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>write<sp/>value-parameterized<sp/>tests,<sp/>first<sp/>you<sp/>should<sp/>define<sp/>a<sp/>fixture</highlight></codeline>
<codeline><highlight class="normal">class.<sp/>It<sp/>must<sp/>be<sp/>derived<sp/>from<sp/>`::testing::TestWithParam&lt;T&gt;`,<sp/>where<sp/>`T`</highlight></codeline>
<codeline><highlight class="normal">is<sp/>the<sp/>type<sp/>of<sp/>your<sp/>parameter<sp/>values.<sp/>`TestWithParam&lt;T&gt;`<sp/>is<sp/>itself</highlight></codeline>
<codeline><highlight class="normal">derived<sp/>from<sp/>`::testing::Test`.<sp/>`T`<sp/>can<sp/>be<sp/>any<sp/>copyable<sp/>type.<sp/>If<sp/>it&apos;s</highlight></codeline>
<codeline><highlight class="normal">a<sp/>raw<sp/>pointer,<sp/>you<sp/>are<sp/>responsible<sp/>for<sp/>managing<sp/>the<sp/>lifespan<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">pointed<sp/>values.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::TestWithParam&lt;const<sp/>char*&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>You<sp/>can<sp/>implement<sp/>all<sp/>the<sp/>usual<sp/>fixture<sp/>class<sp/>members<sp/>here.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>access<sp/>the<sp/>test<sp/>parameter,<sp/>call<sp/>GetParam()<sp/>from<sp/>class</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>TestWithParam&lt;T&gt;.</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>use<sp/>the<sp/>`TEST_P`<sp/>macro<sp/>to<sp/>define<sp/>as<sp/>many<sp/>test<sp/>patterns<sp/>using</highlight></codeline>
<codeline><highlight class="normal">this<sp/>fixture<sp/>as<sp/>you<sp/>want.<sp/><sp/>The<sp/>`_P`<sp/>suffix<sp/>is<sp/>for<sp/>&quot;parameterized&quot;<sp/>or</highlight></codeline>
<codeline><highlight class="normal">&quot;pattern&quot;,<sp/>whichever<sp/>you<sp/>prefer<sp/>to<sp/>think.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST_P(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>access<sp/>the<sp/>test<sp/>parameter<sp/>with<sp/>the<sp/>GetParam()<sp/>method</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>of<sp/>the<sp/>TestWithParam&lt;T&gt;<sp/>class:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_TRUE(foo.Blah(GetParam()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_P(FooTest,<sp/>HasBlahBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>you<sp/>can<sp/>use<sp/>`INSTANTIATE_TEST_CASE_P`<sp/>to<sp/>instantiate<sp/>the<sp/>test</highlight></codeline>
<codeline><highlight class="normal">case<sp/>with<sp/>any<sp/>set<sp/>of<sp/>parameters<sp/>you<sp/>want.<sp/>Google<sp/>Test<sp/>defines<sp/>a<sp/>number<sp/>of</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>for<sp/>generating<sp/>test<sp/>parameters.<sp/>They<sp/>return<sp/>what<sp/>we<sp/>call</highlight></codeline>
<codeline><highlight class="normal">(surprise!)<sp/>_parameter<sp/>generators_.<sp/>Here<sp/>is<sp/>a<sp/>summary<sp/>of<sp/>them,</highlight></codeline>
<codeline><highlight class="normal">which<sp/>are<sp/>all<sp/>in<sp/>the<sp/>`testing`<sp/>namespace:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`Range(begin,<sp/>end[,<sp/>step])`<sp/>|<sp/>Yields<sp/>values<sp/>`{begin,<sp/>begin+step,<sp/>begin+step+step,<sp/>...}`.<sp/>The<sp/>values<sp/>do<sp/>not<sp/>include<sp/>`end`.<sp/>`step`<sp/>defaults<sp/>to<sp/>1.<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:----------------------------|:------------------------------------------------------------------------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Values(v1,<sp/>v2,<sp/>...,<sp/>vN)`<sp/><sp/><sp/>|<sp/>Yields<sp/>values<sp/>`{v1,<sp/>v2,<sp/>...,<sp/>vN}`.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`ValuesIn(container)`<sp/>and<sp/>`ValuesIn(begin,<sp/>end)`<sp/>|<sp/>Yields<sp/>values<sp/>from<sp/>a<sp/>C-style<sp/>array,<sp/>an<sp/>STL-style<sp/>container,<sp/>or<sp/>an<sp/>iterator<sp/>range<sp/>`[begin,<sp/>end)`.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Bool()`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Yields<sp/>sequence<sp/>`{false,<sp/>true}`.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Combine(g1,<sp/>g2,<sp/>...,<sp/>gN)`<sp/><sp/>|<sp/>Yields<sp/>all<sp/>combinations<sp/>(the<sp/>Cartesian<sp/>product<sp/>for<sp/>the<sp/>math<sp/>savvy)<sp/>of<sp/>the<sp/>values<sp/>generated<sp/>by<sp/>the<sp/>`N`<sp/>generators.<sp/>This<sp/>is<sp/>only<sp/>available<sp/>if<sp/>your<sp/>system<sp/>provides<sp/>the<sp/>`&lt;tr1/tuple&gt;`<sp/>header.<sp/>If<sp/>you<sp/>are<sp/>sure<sp/>your<sp/>system<sp/>does,<sp/>and<sp/>Google<sp/>Test<sp/>disagrees,<sp/>you<sp/>can<sp/>override<sp/>it<sp/>by<sp/>defining<sp/>`GTEST_HAS_TR1_TUPLE=1`.<sp/>See<sp/>comments<sp/>in<sp/>[include/gtest/internal/gtest-port.h](../include/gtest/internal/gtest-port.h)<sp/>for<sp/>more<sp/>information.<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>more<sp/>details,<sp/>see<sp/>the<sp/>comments<sp/>at<sp/>the<sp/>definitions<sp/>of<sp/>these<sp/>functions<sp/>in<sp/>the<sp/>[source<sp/>code](../include/gtest/gtest-param-test.h).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>statement<sp/>will<sp/>instantiate<sp/>tests<sp/>from<sp/>the<sp/>`FooTest`<sp/>test<sp/>case</highlight></codeline>
<codeline><highlight class="normal">each<sp/>with<sp/>parameter<sp/>values<sp/>`&quot;meeny&quot;`,<sp/>`&quot;miny&quot;`,<sp/>and<sp/>`&quot;moe&quot;`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_CASE_P(InstantiationName,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FooTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Values(&quot;meeny&quot;,<sp/>&quot;miny&quot;,<sp/>&quot;moe&quot;));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>distinguish<sp/>different<sp/>instances<sp/>of<sp/>the<sp/>pattern<sp/>(yes,<sp/>you<sp/>can</highlight></codeline>
<codeline><highlight class="normal">instantiate<sp/>it<sp/>more<sp/>than<sp/>once),<sp/>the<sp/>first<sp/>argument<sp/>to</highlight></codeline>
<codeline><highlight class="normal">`INSTANTIATE_TEST_CASE_P`<sp/>is<sp/>a<sp/>prefix<sp/>that<sp/>will<sp/>be<sp/>added<sp/>to<sp/>the<sp/>actual</highlight></codeline>
<codeline><highlight class="normal">test<sp/>case<sp/>name.<sp/>Remember<sp/>to<sp/>pick<sp/>unique<sp/>prefixes<sp/>for<sp/>different</highlight></codeline>
<codeline><highlight class="normal">instantiations.<sp/>The<sp/>tests<sp/>from<sp/>the<sp/>instantiation<sp/>above<sp/>will<sp/>have<sp/>these</highlight></codeline>
<codeline><highlight class="normal">names:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`InstantiationName/FooTest.DoesBlah/0`<sp/>for<sp/>`&quot;meeny&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`InstantiationName/FooTest.DoesBlah/1`<sp/>for<sp/>`&quot;miny&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`InstantiationName/FooTest.DoesBlah/2`<sp/>for<sp/>`&quot;moe&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`InstantiationName/FooTest.HasBlahBlah/0`<sp/>for<sp/>`&quot;meeny&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`InstantiationName/FooTest.HasBlahBlah/1`<sp/>for<sp/>`&quot;miny&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`InstantiationName/FooTest.HasBlahBlah/2`<sp/>for<sp/>`&quot;moe&quot;`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>use<sp/>these<sp/>names<sp/>in<sp/>[--gtest\-filter](#running-a-subset-of-the-tests).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>statement<sp/>will<sp/>instantiate<sp/>all<sp/>tests<sp/>from<sp/>`FooTest`<sp/>again,<sp/>each</highlight></codeline>
<codeline><highlight class="normal">with<sp/>parameter<sp/>values<sp/>`&quot;cat&quot;`<sp/>and<sp/>`&quot;dog&quot;`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">const<sp/>char*<sp/>pets[]<sp/>=<sp/>{&quot;cat&quot;,<sp/>&quot;dog&quot;};</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TEST_CASE_P(AnotherInstantiationName,<sp/>FooTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::ValuesIn(pets));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>tests<sp/>from<sp/>the<sp/>instantiation<sp/>above<sp/>will<sp/>have<sp/>these<sp/>names:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`AnotherInstantiationName/FooTest.DoesBlah/0`<sp/>for<sp/>`&quot;cat&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`AnotherInstantiationName/FooTest.DoesBlah/1`<sp/>for<sp/>`&quot;dog&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`AnotherInstantiationName/FooTest.HasBlahBlah/0`<sp/>for<sp/>`&quot;cat&quot;`</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`AnotherInstantiationName/FooTest.HasBlahBlah/1`<sp/>for<sp/>`&quot;dog&quot;`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Please<sp/>note<sp/>that<sp/>`INSTANTIATE_TEST_CASE_P`<sp/>will<sp/>instantiate<sp/>_all_</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>in<sp/>the<sp/>given<sp/>test<sp/>case,<sp/>whether<sp/>their<sp/>definitions<sp/>come<sp/>before<sp/>or</highlight></codeline>
<codeline><highlight class="normal">_after_<sp/>the<sp/>`INSTANTIATE_TEST_CASE_P`<sp/>statement.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>see</highlight></codeline>
<codeline><highlight class="normal">[these](../samples/sample7_unittest.cc)</highlight></codeline>
<codeline><highlight class="normal">[files](../samples/sample8_unittest.cc)<sp/>for<sp/>more<sp/>examples.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability_:<sp/>Linux,<sp/>Windows<sp/>(requires<sp/>MSVC<sp/>8.0<sp/>or<sp/>above),<sp/>Mac;<sp/>since<sp/>version<sp/>1.2.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Creating<sp/>Value-Parameterized<sp/>Abstract<sp/>Tests<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>above,<sp/>we<sp/>define<sp/>and<sp/>instantiate<sp/>`FooTest`<sp/>in<sp/>the<sp/>same<sp/>source</highlight></codeline>
<codeline><highlight class="normal">file.<sp/>Sometimes<sp/>you<sp/>may<sp/>want<sp/>to<sp/>define<sp/>value-parameterized<sp/>tests<sp/>in<sp/>a</highlight></codeline>
<codeline><highlight class="normal">library<sp/>and<sp/>let<sp/>other<sp/>people<sp/>instantiate<sp/>them<sp/>later.<sp/>This<sp/>pattern<sp/>is</highlight></codeline>
<codeline><highlight class="normal">known<sp/>as<sp/>&lt;i&gt;abstract<sp/>tests&lt;/i&gt;.<sp/>As<sp/>an<sp/>example<sp/>of<sp/>its<sp/>application,<sp/>when<sp/>you</highlight></codeline>
<codeline><highlight class="normal">are<sp/>designing<sp/>an<sp/>interface<sp/>you<sp/>can<sp/>write<sp/>a<sp/>standard<sp/>suite<sp/>of<sp/>abstract</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>(perhaps<sp/>using<sp/>a<sp/>factory<sp/>function<sp/>as<sp/>the<sp/>test<sp/>parameter)<sp/>that</highlight></codeline>
<codeline><highlight class="normal">all<sp/>implementations<sp/>of<sp/>the<sp/>interface<sp/>are<sp/>expected<sp/>to<sp/>pass.<sp/>When</highlight></codeline>
<codeline><highlight class="normal">someone<sp/>implements<sp/>the<sp/>interface,<sp/>he<sp/>can<sp/>instantiate<sp/>your<sp/>suite<sp/>to<sp/>get</highlight></codeline>
<codeline><highlight class="normal">all<sp/>the<sp/>interface-conformance<sp/>tests<sp/>for<sp/>free.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>define<sp/>abstract<sp/>tests,<sp/>you<sp/>should<sp/>organize<sp/>your<sp/>code<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Put<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>parameterized<sp/>test<sp/>fixture<sp/>class<sp/>(e.g.<sp/>`FooTest`)<sp/>in<sp/>a<sp/>header<sp/>file,<sp/>say<sp/>`foo_param_test.h`.<sp/>Think<sp/>of<sp/>this<sp/>as<sp/>_declaring_<sp/>your<sp/>abstract<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Put<sp/>the<sp/>`TEST_P`<sp/>definitions<sp/>in<sp/>`foo_param_test.cc`,<sp/>which<sp/>includes<sp/>`foo_param_test.h`.<sp/>Think<sp/>of<sp/>this<sp/>as<sp/>_implementing_<sp/>your<sp/>abstract<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>they<sp/>are<sp/>defined,<sp/>you<sp/>can<sp/>instantiate<sp/>them<sp/>by<sp/>including</highlight></codeline>
<codeline><highlight class="normal">`foo_param_test.h`,<sp/>invoking<sp/>`INSTANTIATE_TEST_CASE_P()`,<sp/>and<sp/>linking</highlight></codeline>
<codeline><highlight class="normal">with<sp/>`foo_param_test.cc`.<sp/>You<sp/>can<sp/>instantiate<sp/>the<sp/>same<sp/>abstract<sp/>test</highlight></codeline>
<codeline><highlight class="normal">case<sp/>multiple<sp/>times,<sp/>possibly<sp/>in<sp/>different<sp/>source<sp/>files.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Typed<sp/>Tests<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Suppose<sp/>you<sp/>have<sp/>multiple<sp/>implementations<sp/>of<sp/>the<sp/>same<sp/>interface<sp/>and</highlight></codeline>
<codeline><highlight class="normal">want<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>all<sp/>of<sp/>them<sp/>satisfy<sp/>some<sp/>common<sp/>requirements.</highlight></codeline>
<codeline><highlight class="normal">Or,<sp/>you<sp/>may<sp/>have<sp/>defined<sp/>several<sp/>types<sp/>that<sp/>are<sp/>supposed<sp/>to<sp/>conform<sp/>to</highlight></codeline>
<codeline><highlight class="normal">the<sp/>same<sp/>&quot;concept&quot;<sp/>and<sp/>you<sp/>want<sp/>to<sp/>verify<sp/>it.<sp/><sp/>In<sp/>both<sp/>cases,<sp/>you<sp/>want</highlight></codeline>
<codeline><highlight class="normal">the<sp/>same<sp/>test<sp/>logic<sp/>repeated<sp/>for<sp/>different<sp/>types.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">While<sp/>you<sp/>can<sp/>write<sp/>one<sp/>`TEST`<sp/>or<sp/>`TEST_F`<sp/>for<sp/>each<sp/>type<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline><highlight class="normal">test<sp/>(and<sp/>you<sp/>may<sp/>even<sp/>factor<sp/>the<sp/>test<sp/>logic<sp/>into<sp/>a<sp/>function<sp/>template</highlight></codeline>
<codeline><highlight class="normal">that<sp/>you<sp/>invoke<sp/>from<sp/>the<sp/>`TEST`),<sp/>it&apos;s<sp/>tedious<sp/>and<sp/>doesn&apos;t<sp/>scale:</highlight></codeline>
<codeline><highlight class="normal">if<sp/>you<sp/>want<sp/>_m_<sp/>tests<sp/>over<sp/>_n_<sp/>types,<sp/>you&apos;ll<sp/>end<sp/>up<sp/>writing<sp/>_m\*n_</highlight></codeline>
<codeline><highlight class="normal">`TEST`s.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Typed<sp/>tests_<sp/>allow<sp/>you<sp/>to<sp/>repeat<sp/>the<sp/>same<sp/>test<sp/>logic<sp/>over<sp/>a<sp/>list<sp/>of</highlight></codeline>
<codeline><highlight class="normal">types.<sp/><sp/>You<sp/>only<sp/>need<sp/>to<sp/>write<sp/>the<sp/>test<sp/>logic<sp/>once,<sp/>although<sp/>you<sp/>must</highlight></codeline>
<codeline><highlight class="normal">know<sp/>the<sp/>type<sp/>list<sp/>when<sp/>writing<sp/>typed<sp/>tests.<sp/><sp/>Here&apos;s<sp/>how<sp/>you<sp/>do<sp/>it:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">First,<sp/>define<sp/>a<sp/>fixture<sp/>class<sp/>template.<sp/><sp/>It<sp/>should<sp/>be<sp/>parameterized</highlight></codeline>
<codeline><highlight class="normal">by<sp/>a<sp/>type.<sp/><sp/>Remember<sp/>to<sp/>derive<sp/>it<sp/>from<sp/>`::testing::Test`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typedef<sp/>std::list&lt;T&gt;<sp/>List;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>T<sp/>shared_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Next,<sp/>associate<sp/>a<sp/>list<sp/>of<sp/>types<sp/>with<sp/>the<sp/>test<sp/>case,<sp/>which<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">repeated<sp/>for<sp/>each<sp/>type<sp/>in<sp/>the<sp/>list:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>::testing::Types&lt;char,<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>MyTypes;</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_CASE(FooTest,<sp/>MyTypes);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`typedef`<sp/>is<sp/>necessary<sp/>for<sp/>the<sp/>`TYPED_TEST_CASE`<sp/>macro<sp/>to<sp/>parse</highlight></codeline>
<codeline><highlight class="normal">correctly.<sp/><sp/>Otherwise<sp/>the<sp/>compiler<sp/>will<sp/>think<sp/>that<sp/>each<sp/>comma<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">type<sp/>list<sp/>introduces<sp/>a<sp/>new<sp/>macro<sp/>argument.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>use<sp/>`TYPED_TEST()`<sp/>instead<sp/>of<sp/>`TEST_F()`<sp/>to<sp/>define<sp/>a<sp/>typed<sp/>test</highlight></codeline>
<codeline><highlight class="normal">for<sp/>this<sp/>test<sp/>case.<sp/><sp/>You<sp/>can<sp/>repeat<sp/>this<sp/>as<sp/>many<sp/>times<sp/>as<sp/>you<sp/>want:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>refer<sp/>to<sp/>the<sp/>special<sp/>name<sp/>TypeParam<sp/>to<sp/>get<sp/>the<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>parameter.<sp/><sp/>Since<sp/>we<sp/>are<sp/>inside<sp/>a<sp/>derived<sp/>class<sp/>template,<sp/>C++<sp/>requires</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>us<sp/>to<sp/>visit<sp/>the<sp/>members<sp/>of<sp/>FooTest<sp/>via<sp/>&apos;this&apos;.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TypeParam<sp/>n<sp/>=<sp/>this-&gt;value_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>visit<sp/>static<sp/>members<sp/>of<sp/>the<sp/>fixture,<sp/>add<sp/>the<sp/>&apos;TestFixture::&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>prefix.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>n<sp/>+=<sp/>TestFixture::shared_;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>To<sp/>refer<sp/>to<sp/>typedefs<sp/>in<sp/>the<sp/>fixture,<sp/>add<sp/>the<sp/>&apos;typename<sp/>TestFixture::&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>prefix.<sp/><sp/>The<sp/>&apos;typename&apos;<sp/>is<sp/>required<sp/>to<sp/>satisfy<sp/>the<sp/>compiler.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>typename<sp/>TestFixture::List<sp/>values;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>values.push_back(n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TYPED_TEST(FooTest,<sp/>HasPropertyA)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>see<sp/>`samples/sample6_unittest.cc`<sp/>for<sp/>a<sp/>complete<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows<sp/>(requires<sp/>MSVC<sp/>8.0<sp/>or<sp/>above),<sp/>Mac;</highlight></codeline>
<codeline><highlight class="normal">since<sp/>version<sp/>1.1.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Type-Parameterized<sp/>Tests<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Type-parameterized<sp/>tests_<sp/>are<sp/>like<sp/>typed<sp/>tests,<sp/>except<sp/>that<sp/>they</highlight></codeline>
<codeline><highlight class="normal">don&apos;t<sp/>require<sp/>you<sp/>to<sp/>know<sp/>the<sp/>list<sp/>of<sp/>types<sp/>ahead<sp/>of<sp/>time.<sp/><sp/>Instead,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>can<sp/>define<sp/>the<sp/>test<sp/>logic<sp/>first<sp/>and<sp/>instantiate<sp/>it<sp/>with<sp/>different</highlight></codeline>
<codeline><highlight class="normal">type<sp/>lists<sp/>later.<sp/><sp/>You<sp/>can<sp/>even<sp/>instantiate<sp/>it<sp/>more<sp/>than<sp/>once<sp/>in<sp/>the</highlight></codeline>
<codeline><highlight class="normal">same<sp/>program.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>are<sp/>designing<sp/>an<sp/>interface<sp/>or<sp/>concept,<sp/>you<sp/>can<sp/>define<sp/>a<sp/>suite</highlight></codeline>
<codeline><highlight class="normal">of<sp/>type-parameterized<sp/>tests<sp/>to<sp/>verify<sp/>properties<sp/>that<sp/>any<sp/>valid</highlight></codeline>
<codeline><highlight class="normal">implementation<sp/>of<sp/>the<sp/>interface/concept<sp/>should<sp/>have.<sp/><sp/>Then,<sp/>the<sp/>author</highlight></codeline>
<codeline><highlight class="normal">of<sp/>each<sp/>implementation<sp/>can<sp/>just<sp/>instantiate<sp/>the<sp/>test<sp/>suite<sp/>with<sp/>his</highlight></codeline>
<codeline><highlight class="normal">type<sp/>to<sp/>verify<sp/>that<sp/>it<sp/>conforms<sp/>to<sp/>the<sp/>requirements,<sp/>without<sp/>having<sp/>to</highlight></codeline>
<codeline><highlight class="normal">write<sp/>similar<sp/>tests<sp/>repeatedly.<sp/><sp/>Here&apos;s<sp/>an<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">First,<sp/>define<sp/>a<sp/>fixture<sp/>class<sp/>template,<sp/>as<sp/>we<sp/>did<sp/>with<sp/>typed<sp/>tests:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Next,<sp/>declare<sp/>that<sp/>you<sp/>will<sp/>define<sp/>a<sp/>type-parameterized<sp/>test<sp/>case:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_CASE_P(FooTest);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`_P`<sp/>suffix<sp/>is<sp/>for<sp/>&quot;parameterized&quot;<sp/>or<sp/>&quot;pattern&quot;,<sp/>whichever<sp/>you</highlight></codeline>
<codeline><highlight class="normal">prefer<sp/>to<sp/>think.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Then,<sp/>use<sp/>`TYPED_TEST_P()`<sp/>to<sp/>define<sp/>a<sp/>type-parameterized<sp/>test.<sp/><sp/>You</highlight></codeline>
<codeline><highlight class="normal">can<sp/>repeat<sp/>this<sp/>as<sp/>many<sp/>times<sp/>as<sp/>you<sp/>want:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TYPED_TEST_P(FooTest,<sp/>DoesBlah)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Inside<sp/>a<sp/>test,<sp/>refer<sp/>to<sp/>TypeParam<sp/>to<sp/>get<sp/>the<sp/>type<sp/>parameter.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TypeParam<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TYPED_TEST_P(FooTest,<sp/>HasPropertyA)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>the<sp/>tricky<sp/>part:<sp/>you<sp/>need<sp/>to<sp/>register<sp/>all<sp/>test<sp/>patterns<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`REGISTER_TYPED_TEST_CASE_P`<sp/>macro<sp/>before<sp/>you<sp/>can<sp/>instantiate<sp/>them.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>first<sp/>argument<sp/>of<sp/>the<sp/>macro<sp/>is<sp/>the<sp/>test<sp/>case<sp/>name;<sp/>the<sp/>rest<sp/>are</highlight></codeline>
<codeline><highlight class="normal">the<sp/>names<sp/>of<sp/>the<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(FooTest,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DoesBlah,<sp/>HasPropertyA);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>you<sp/>are<sp/>free<sp/>to<sp/>instantiate<sp/>the<sp/>pattern<sp/>with<sp/>the<sp/>types<sp/>you</highlight></codeline>
<codeline><highlight class="normal">want.<sp/><sp/>If<sp/>you<sp/>put<sp/>the<sp/>above<sp/>code<sp/>in<sp/>a<sp/>header<sp/>file,<sp/>you<sp/>can<sp/>`#include`</highlight></codeline>
<codeline><highlight class="normal">it<sp/>in<sp/>multiple<sp/>C++<sp/>source<sp/>files<sp/>and<sp/>instantiate<sp/>it<sp/>multiple<sp/>times.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>::testing::Types&lt;char,<sp/>int,<sp/>unsigned<sp/>int&gt;<sp/>MyTypes;</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(My,<sp/>FooTest,<sp/>MyTypes);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>distinguish<sp/>different<sp/>instances<sp/>of<sp/>the<sp/>pattern,<sp/>the<sp/>first<sp/>argument</highlight></codeline>
<codeline><highlight class="normal">to<sp/>the<sp/>`INSTANTIATE_TYPED_TEST_CASE_P`<sp/>macro<sp/>is<sp/>a<sp/>prefix<sp/>that<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">added<sp/>to<sp/>the<sp/>actual<sp/>test<sp/>case<sp/>name.<sp/><sp/>Remember<sp/>to<sp/>pick<sp/>unique<sp/>prefixes</highlight></codeline>
<codeline><highlight class="normal">for<sp/>different<sp/>instances.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">In<sp/>the<sp/>special<sp/>case<sp/>where<sp/>the<sp/>type<sp/>list<sp/>contains<sp/>only<sp/>one<sp/>type,<sp/>you</highlight></codeline>
<codeline><highlight class="normal">can<sp/>write<sp/>that<sp/>type<sp/>directly<sp/>without<sp/>`::testing::Types&lt;...&gt;`,<sp/>like<sp/>this:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(My,<sp/>FooTest,<sp/>int);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>see<sp/>`samples/sample6_unittest.cc`<sp/>for<sp/>a<sp/>complete<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows<sp/>(requires<sp/>MSVC<sp/>8.0<sp/>or<sp/>above),<sp/>Mac;</highlight></codeline>
<codeline><highlight class="normal">since<sp/>version<sp/>1.1.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Testing<sp/>Private<sp/>Code<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>change<sp/>your<sp/>software&apos;s<sp/>internal<sp/>implementation,<sp/>your<sp/>tests<sp/>should<sp/>not</highlight></codeline>
<codeline><highlight class="normal">break<sp/>as<sp/>long<sp/>as<sp/>the<sp/>change<sp/>is<sp/>not<sp/>observable<sp/>by<sp/>users.<sp/>Therefore,<sp/>per<sp/>the</highlight></codeline>
<codeline><highlight class="normal">_black-box<sp/>testing<sp/>principle_,<sp/>most<sp/>of<sp/>the<sp/>time<sp/>you<sp/>should<sp/>test<sp/>your<sp/>code</highlight></codeline>
<codeline><highlight class="normal">through<sp/>its<sp/>public<sp/>interfaces.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>still<sp/>find<sp/>yourself<sp/>needing<sp/>to<sp/>test<sp/>internal<sp/>implementation<sp/>code,</highlight></codeline>
<codeline><highlight class="normal">consider<sp/>if<sp/>there&apos;s<sp/>a<sp/>better<sp/>design<sp/>that<sp/>wouldn&apos;t<sp/>require<sp/>you<sp/>to<sp/>do<sp/>so.<sp/>If<sp/>you</highlight></codeline>
<codeline><highlight class="normal">absolutely<sp/>have<sp/>to<sp/>test<sp/>non-public<sp/>interface<sp/>code<sp/>though,<sp/>you<sp/>can.<sp/>There<sp/>are</highlight></codeline>
<codeline><highlight class="normal">two<sp/>cases<sp/>to<sp/>consider:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Static<sp/>functions<sp/>(_not_<sp/>the<sp/>same<sp/>as<sp/>static<sp/>member<sp/>functions!)<sp/>or<sp/>unnamed<sp/>namespaces,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Private<sp/>or<sp/>protected<sp/>class<sp/>members</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Static<sp/>Functions<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Both<sp/>static<sp/>functions<sp/>and<sp/>definitions/declarations<sp/>in<sp/>an<sp/>unnamed<sp/>namespace<sp/>are</highlight></codeline>
<codeline><highlight class="normal">only<sp/>visible<sp/>within<sp/>the<sp/>same<sp/>translation<sp/>unit.<sp/>To<sp/>test<sp/>them,<sp/>you<sp/>can<sp/>`#include`</highlight></codeline>
<codeline><highlight class="normal">the<sp/>entire<sp/>`.cc`<sp/>file<sp/>being<sp/>tested<sp/>in<sp/>your<sp/>`*_test.cc`<sp/>file.<sp/>(`#include`ing<sp/>`.cc`</highlight></codeline>
<codeline><highlight class="normal">files<sp/>is<sp/>not<sp/>a<sp/>good<sp/>way<sp/>to<sp/>reuse<sp/>code<sp/>-<sp/>you<sp/>should<sp/>not<sp/>do<sp/>this<sp/>in<sp/>production</highlight></codeline>
<codeline><highlight class="normal">code!)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">However,<sp/>a<sp/>better<sp/>approach<sp/>is<sp/>to<sp/>move<sp/>the<sp/>private<sp/>code<sp/>into<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`foo::internal`<sp/>namespace,<sp/>where<sp/>`foo`<sp/>is<sp/>the<sp/>namespace<sp/>your<sp/>project<sp/>normally</highlight></codeline>
<codeline><highlight class="normal">uses,<sp/>and<sp/>put<sp/>the<sp/>private<sp/>declarations<sp/>in<sp/>a<sp/>`*-internal.h`<sp/>file.<sp/>Your</highlight></codeline>
<codeline><highlight class="normal">production<sp/>`.cc`<sp/>files<sp/>and<sp/>your<sp/>tests<sp/>are<sp/>allowed<sp/>to<sp/>include<sp/>this<sp/>internal</highlight></codeline>
<codeline><highlight class="normal">header,<sp/>but<sp/>your<sp/>clients<sp/>are<sp/>not.<sp/>This<sp/>way,<sp/>you<sp/>can<sp/>fully<sp/>test<sp/>your<sp/>internal</highlight></codeline>
<codeline><highlight class="normal">implementation<sp/>without<sp/>leaking<sp/>it<sp/>to<sp/>your<sp/>clients.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Private<sp/>Class<sp/>Members<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Private<sp/>class<sp/>members<sp/>are<sp/>only<sp/>accessible<sp/>from<sp/>within<sp/>the<sp/>class<sp/>or<sp/>by<sp/>friends.</highlight></codeline>
<codeline><highlight class="normal">To<sp/>access<sp/>a<sp/>class&apos;<sp/>private<sp/>members,<sp/>you<sp/>can<sp/>declare<sp/>your<sp/>test<sp/>fixture<sp/>as<sp/>a</highlight></codeline>
<codeline><highlight class="normal">friend<sp/>to<sp/>the<sp/>class<sp/>and<sp/>define<sp/>accessors<sp/>in<sp/>your<sp/>fixture.<sp/>Tests<sp/>using<sp/>the</highlight></codeline>
<codeline><highlight class="normal">fixture<sp/>can<sp/>then<sp/>access<sp/>the<sp/>private<sp/>members<sp/>of<sp/>your<sp/>production<sp/>class<sp/>via<sp/>the</highlight></codeline>
<codeline><highlight class="normal">accessors<sp/>in<sp/>the<sp/>fixture.<sp/>Note<sp/>that<sp/>even<sp/>though<sp/>your<sp/>fixture<sp/>is<sp/>a<sp/>friend<sp/>to</highlight></codeline>
<codeline><highlight class="normal">your<sp/>production<sp/>class,<sp/>your<sp/>tests<sp/>are<sp/>not<sp/>automatically<sp/>friends<sp/>to<sp/>it,<sp/>as<sp/>they</highlight></codeline>
<codeline><highlight class="normal">are<sp/>technically<sp/>defined<sp/>in<sp/>sub-classes<sp/>of<sp/>the<sp/>fixture.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Another<sp/>way<sp/>to<sp/>test<sp/>private<sp/>members<sp/>is<sp/>to<sp/>refactor<sp/>them<sp/>into<sp/>an<sp/>implementation</highlight></codeline>
<codeline><highlight class="normal">class,<sp/>which<sp/>is<sp/>then<sp/>declared<sp/>in<sp/>a<sp/>`*-internal.h`<sp/>file.<sp/>Your<sp/>clients<sp/>aren&apos;t</highlight></codeline>
<codeline><highlight class="normal">allowed<sp/>to<sp/>include<sp/>this<sp/>header<sp/>but<sp/>your<sp/>tests<sp/>can.<sp/>Such<sp/>is<sp/>called<sp/>the<sp/>Pimpl</highlight></codeline>
<codeline><highlight class="normal">(Private<sp/>Implementation)<sp/>idiom.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Or,<sp/>you<sp/>can<sp/>declare<sp/>an<sp/>individual<sp/>test<sp/>as<sp/>a<sp/>friend<sp/>of<sp/>your<sp/>class<sp/>by<sp/>adding<sp/>this</highlight></codeline>
<codeline><highlight class="normal">line<sp/>in<sp/>the<sp/>class<sp/>body:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">FRIEND_TEST(TestCaseName,<sp/>TestName);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">//<sp/>foo.h</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;gtest/gtest_prod.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Defines<sp/>FRIEND_TEST.</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FRIEND_TEST(FooTest,<sp/>BarReturnsZeroOnNull);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>Bar(void*<sp/>x);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>foo_test.cc</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>BarReturnsZeroOnNull)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>foo.Bar(NULL));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Uses<sp/>Foo&apos;s<sp/>private<sp/>member<sp/>Bar().</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Pay<sp/>special<sp/>attention<sp/>when<sp/>your<sp/>class<sp/>is<sp/>defined<sp/>in<sp/>a<sp/>namespace,<sp/>as<sp/>you<sp/>should</highlight></codeline>
<codeline><highlight class="normal">define<sp/>your<sp/>test<sp/>fixtures<sp/>and<sp/>tests<sp/>in<sp/>the<sp/>same<sp/>namespace<sp/>if<sp/>you<sp/>want<sp/>them<sp/>to</highlight></codeline>
<codeline><highlight class="normal">be<sp/>friends<sp/>of<sp/>your<sp/>class.<sp/>For<sp/>example,<sp/>if<sp/>the<sp/>code<sp/>to<sp/>be<sp/>tested<sp/>looks<sp/>like:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>my_namespace<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>friend<sp/>class<sp/>FooTest;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FRIEND_TEST(FooTest,<sp/>Bar);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>FRIEND_TEST(FooTest,<sp/>Baz);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>definition<sp/>of<sp/>the<sp/>class<sp/>Foo</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>my_namespace</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Your<sp/>test<sp/>code<sp/>should<sp/>be<sp/>something<sp/>like:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>my_namespace<sp/>{</highlight></codeline>
<codeline><highlight class="normal">class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>protected:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Bar)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">TEST_F(FooTest,<sp/>Baz)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>my_namespace</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Catching<sp/>Failures<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>are<sp/>building<sp/>a<sp/>testing<sp/>utility<sp/>on<sp/>top<sp/>of<sp/>Google<sp/>Test,<sp/>you&apos;ll</highlight></codeline>
<codeline><highlight class="normal">want<sp/>to<sp/>test<sp/>your<sp/>utility.<sp/><sp/>What<sp/>framework<sp/>would<sp/>you<sp/>use<sp/>to<sp/>test<sp/>it?</highlight></codeline>
<codeline><highlight class="normal">Google<sp/>Test,<sp/>of<sp/>course.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>challenge<sp/>is<sp/>to<sp/>verify<sp/>that<sp/>your<sp/>testing<sp/>utility<sp/>reports<sp/>failures</highlight></codeline>
<codeline><highlight class="normal">correctly.<sp/><sp/>In<sp/>frameworks<sp/>that<sp/>report<sp/>a<sp/>failure<sp/>by<sp/>throwing<sp/>an</highlight></codeline>
<codeline><highlight class="normal">exception,<sp/>you<sp/>could<sp/>catch<sp/>the<sp/>exception<sp/>and<sp/>assert<sp/>on<sp/>it.<sp/><sp/>But<sp/>Google</highlight></codeline>
<codeline><highlight class="normal">Test<sp/>doesn&apos;t<sp/>use<sp/>exceptions,<sp/>so<sp/>how<sp/>do<sp/>we<sp/>test<sp/>that<sp/>a<sp/>piece<sp/>of<sp/>code</highlight></codeline>
<codeline><highlight class="normal">generates<sp/>an<sp/>expected<sp/>failure?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`&lt;gtest/gtest-spi.h&gt;`<sp/>contains<sp/>some<sp/>constructs<sp/>to<sp/>do<sp/>this.<sp/><sp/>After</highlight></codeline>
<codeline><highlight class="normal">`#include`ing<sp/>this<sp/>header,<sp/>you<sp/>can<sp/>use</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`EXPECT_FATAL_FAILURE(`_statement,<sp/>substring_`);`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:--------------------------------------------------|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">to<sp/>assert<sp/>that<sp/>_statement_<sp/>generates<sp/>a<sp/>fatal<sp/>(e.g.<sp/>`ASSERT_*`)<sp/>failure</highlight></codeline>
<codeline><highlight class="normal">whose<sp/>message<sp/>contains<sp/>the<sp/>given<sp/>_substring_,<sp/>or<sp/>use</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`EXPECT_NONFATAL_FAILURE(`_statement,<sp/>substring_`);`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-----------------------------------------------------|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>you<sp/>are<sp/>expecting<sp/>a<sp/>non-fatal<sp/>(e.g.<sp/>`EXPECT_*`)<sp/>failure.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>technical<sp/>reasons,<sp/>there<sp/>are<sp/>some<sp/>caveats:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>You<sp/>cannot<sp/>stream<sp/>a<sp/>failure<sp/>message<sp/>to<sp/>either<sp/>macro.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>_statement_<sp/>in<sp/>`EXPECT_FATAL_FAILURE()`<sp/>cannot<sp/>reference<sp/>local<sp/>non-static<sp/>variables<sp/>or<sp/>non-static<sp/>members<sp/>of<sp/>`this`<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>_statement_<sp/>in<sp/>`EXPECT_FATAL_FAILURE()`<sp/>cannot<sp/>return<sp/>a<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Note:_<sp/>Google<sp/>Test<sp/>is<sp/>designed<sp/>with<sp/>threads<sp/>in<sp/>mind.<sp/><sp/>Once<sp/>the</highlight></codeline>
<codeline><highlight class="normal">synchronization<sp/>primitives<sp/>in<sp/>`&lt;gtest/internal/gtest-port.h&gt;`<sp/>have</highlight></codeline>
<codeline><highlight class="normal">been<sp/>implemented,<sp/>Google<sp/>Test<sp/>will<sp/>become<sp/>thread-safe,<sp/>meaning<sp/>that</highlight></codeline>
<codeline><highlight class="normal">you<sp/>can<sp/>then<sp/>use<sp/>assertions<sp/>in<sp/>multiple<sp/>threads<sp/>concurrently.<sp/><sp/>Before</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">that,<sp/>however,<sp/>Google<sp/>Test<sp/>only<sp/>supports<sp/>single-threaded<sp/>usage.<sp/><sp/>Once</highlight></codeline>
<codeline><highlight class="normal">thread-safe,<sp/>`EXPECT_FATAL_FAILURE()`<sp/>and<sp/>`EXPECT_NONFATAL_FAILURE()`</highlight></codeline>
<codeline><highlight class="normal">will<sp/>capture<sp/>failures<sp/>in<sp/>the<sp/>current<sp/>thread<sp/>only.<sp/>If<sp/>_statement_</highlight></codeline>
<codeline><highlight class="normal">creates<sp/>new<sp/>threads,<sp/>failures<sp/>in<sp/>these<sp/>threads<sp/>will<sp/>be<sp/>ignored.<sp/><sp/>If</highlight></codeline>
<codeline><highlight class="normal">you<sp/>want<sp/>to<sp/>capture<sp/>failures<sp/>from<sp/>all<sp/>threads<sp/>instead,<sp/>you<sp/>should<sp/>use</highlight></codeline>
<codeline><highlight class="normal">the<sp/>following<sp/>macros:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`EXPECT_FATAL_FAILURE_ON_ALL_THREADS(`_statement,<sp/>substring_`);`<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-----------------------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(`_statement,<sp/>substring_`);`<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Getting<sp/>the<sp/>Current<sp/>Test&apos;s<sp/>Name<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sometimes<sp/>a<sp/>function<sp/>may<sp/>need<sp/>to<sp/>know<sp/>the<sp/>name<sp/>of<sp/>the<sp/>currently<sp/>running<sp/>test.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>you<sp/>may<sp/>be<sp/>using<sp/>the<sp/>`SetUp()`<sp/>method<sp/>of<sp/>your<sp/>test<sp/>fixture<sp/>to<sp/>set</highlight></codeline>
<codeline><highlight class="normal">the<sp/>golden<sp/>file<sp/>name<sp/>based<sp/>on<sp/>which<sp/>test<sp/>is<sp/>running.<sp/>The<sp/>`::testing::TestInfo`</highlight></codeline>
<codeline><highlight class="normal">class<sp/>has<sp/>this<sp/>information:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>testing<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>TestInfo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Returns<sp/>the<sp/>test<sp/>case<sp/>name<sp/>and<sp/>the<sp/>test<sp/>name,<sp/>respectively.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>NOT<sp/>delete<sp/>or<sp/>free<sp/>the<sp/>return<sp/>value<sp/>-<sp/>it&apos;s<sp/>managed<sp/>by<sp/>the</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>TestInfo<sp/>class.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>char*<sp/>test_case_name()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>char*<sp/>name()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>testing</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>To<sp/>obtain<sp/>a<sp/>`TestInfo`<sp/>object<sp/>for<sp/>the<sp/>currently<sp/>running<sp/>test,<sp/>call</highlight></codeline>
<codeline><highlight class="normal">`current_test_info()`<sp/>on<sp/>the<sp/>`UnitTest`<sp/>singleton<sp/>object:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Gets<sp/>information<sp/>about<sp/>the<sp/>currently<sp/>running<sp/>test.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Do<sp/>NOT<sp/>delete<sp/>the<sp/>returned<sp/>object<sp/>-<sp/>it&apos;s<sp/>managed<sp/>by<sp/>the<sp/>UnitTest<sp/>class.</highlight></codeline>
<codeline><highlight class="normal">const<sp/>::testing::TestInfo*<sp/>const<sp/>test_info<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;current_test_info();</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;We<sp/>are<sp/>in<sp/>test<sp/>%s<sp/>of<sp/>test<sp/>case<sp/>%s.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info-&gt;name(),<sp/>test_info-&gt;test_case_name());</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`current_test_info()`<sp/>returns<sp/>a<sp/>null<sp/>pointer<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.<sp/>In</highlight></codeline>
<codeline><highlight class="normal">particular,<sp/>you<sp/>cannot<sp/>find<sp/>the<sp/>test<sp/>case<sp/>name<sp/>in<sp/>`TestCaseSetUp()`,</highlight></codeline>
<codeline><highlight class="normal">`TestCaseTearDown()`<sp/>(where<sp/>you<sp/>know<sp/>the<sp/>test<sp/>case<sp/>name<sp/>implicitly),<sp/>or</highlight></codeline>
<codeline><highlight class="normal">functions<sp/>called<sp/>from<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Extending<sp/>Google<sp/>Test<sp/>by<sp/>Handling<sp/>Test<sp/>Events<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>provides<sp/>an<sp/>&lt;b&gt;event<sp/>listener<sp/>API&lt;/b&gt;<sp/>to<sp/>let<sp/>you<sp/>receive</highlight></codeline>
<codeline><highlight class="normal">notifications<sp/>about<sp/>the<sp/>progress<sp/>of<sp/>a<sp/>test<sp/>program<sp/>and<sp/>test</highlight></codeline>
<codeline><highlight class="normal">failures.<sp/>The<sp/>events<sp/>you<sp/>can<sp/>listen<sp/>to<sp/>include<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>program,<sp/>a<sp/>test<sp/>case,<sp/>or<sp/>a<sp/>test<sp/>method,<sp/>among<sp/>others.<sp/>You<sp/>may</highlight></codeline>
<codeline><highlight class="normal">use<sp/>this<sp/>API<sp/>to<sp/>augment<sp/>or<sp/>replace<sp/>the<sp/>standard<sp/>console<sp/>output,</highlight></codeline>
<codeline><highlight class="normal">replace<sp/>the<sp/>XML<sp/>output,<sp/>or<sp/>provide<sp/>a<sp/>completely<sp/>different<sp/>form<sp/>of</highlight></codeline>
<codeline><highlight class="normal">output,<sp/>such<sp/>as<sp/>a<sp/>GUI<sp/>or<sp/>a<sp/>database.<sp/>You<sp/>can<sp/>also<sp/>use<sp/>test<sp/>events<sp/>as</highlight></codeline>
<codeline><highlight class="normal">checkpoints<sp/>to<sp/>implement<sp/>a<sp/>resource<sp/>leak<sp/>checker,<sp/>for<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>v1.4.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Defining<sp/>Event<sp/>Listeners<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>define<sp/>a<sp/>event<sp/>listener,<sp/>you<sp/>subclass<sp/>either</highlight></codeline>
<codeline><highlight class="normal">[testing::TestEventListener](../include/gtest/gtest.h#L855)</highlight></codeline>
<codeline><highlight class="normal">or<sp/>[testing::EmptyTestEventListener](../include/gtest/gtest.h#L905).</highlight></codeline>
<codeline><highlight class="normal">The<sp/>former<sp/>is<sp/>an<sp/>(abstract)<sp/>interface,<sp/>where<sp/>&lt;i&gt;each<sp/>pure<sp/>virtual<sp/>method&lt;br&gt;</highlight></codeline>
<codeline><highlight class="normal">can<sp/>be<sp/>overridden<sp/>to<sp/>handle<sp/>a<sp/>test<sp/>event&lt;/i&gt;<sp/>(For<sp/>example,<sp/>when<sp/>a<sp/>test</highlight></codeline>
<codeline><highlight class="normal">starts,<sp/>the<sp/>`OnTestStart()`<sp/>method<sp/>will<sp/>be<sp/>called.).<sp/>The<sp/>latter<sp/>provides</highlight></codeline>
<codeline><highlight class="normal">an<sp/>empty<sp/>implementation<sp/>of<sp/>all<sp/>methods<sp/>in<sp/>the<sp/>interface,<sp/>such<sp/>that<sp/>a</highlight></codeline>
<codeline><highlight class="normal">subclass<sp/>only<sp/>needs<sp/>to<sp/>override<sp/>the<sp/>methods<sp/>it<sp/>cares<sp/>about.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>an<sp/>event<sp/>is<sp/>fired,<sp/>its<sp/>context<sp/>is<sp/>passed<sp/>to<sp/>the<sp/>handler<sp/>function</highlight></codeline>
<codeline><highlight class="normal">as<sp/>an<sp/>argument.<sp/>The<sp/>following<sp/>argument<sp/>types<sp/>are<sp/>used:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[UnitTest](../include/gtest/gtest.h#L1007)<sp/>reflects<sp/>the<sp/>state<sp/>of<sp/>the<sp/>entire<sp/>test<sp/>program,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[TestCase](../include/gtest/gtest.h#L689)<sp/>has<sp/>information<sp/>about<sp/>a<sp/>test<sp/>case,<sp/>which<sp/>can<sp/>contain<sp/>one<sp/>or<sp/>more<sp/>tests,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[TestInfo](../include/gtest/gtest.h#L599)<sp/>contains<sp/>the<sp/>state<sp/>of<sp/>a<sp/>test,<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>[TestPartResult](../include/gtest/gtest-test-part.h#L42)<sp/>represents<sp/>the<sp/>result<sp/>of<sp/>a<sp/>test<sp/>assertion.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">An<sp/>event<sp/>handler<sp/>function<sp/>can<sp/>examine<sp/>the<sp/>argument<sp/>it<sp/>receives<sp/>to<sp/>find</highlight></codeline>
<codeline><highlight class="normal">out<sp/>interesting<sp/>information<sp/>about<sp/>the<sp/>event<sp/>and<sp/>the<sp/>test<sp/>program&apos;s</highlight></codeline>
<codeline><highlight class="normal">state.<sp/><sp/>Here&apos;s<sp/>an<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>class<sp/>MinimalistPrinter<sp/>:<sp/>public<sp/>::testing::EmptyTestEventListener<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Called<sp/>before<sp/>a<sp/>test<sp/>starts.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>OnTestStart(const<sp/>::testing::TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;***<sp/>Test<sp/>%s.%s<sp/>starting.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.test_case_name(),<sp/>test_info.name());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Called<sp/>after<sp/>a<sp/>failed<sp/>assertion<sp/>or<sp/>a<sp/>SUCCESS().</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>OnTestPartResult(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>::testing::TestPartResult&amp;<sp/>test_part_result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;%s<sp/>in<sp/>%s:%d\n%s\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.failed()<sp/>?<sp/>&quot;***<sp/>Failure&quot;<sp/>:<sp/>&quot;Success&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.file_name(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.line_number(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_part_result.summary());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Called<sp/>after<sp/>a<sp/>test<sp/>ends.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>OnTestEnd(const<sp/>::testing::TestInfo&amp;<sp/>test_info)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;***<sp/>Test<sp/>%s.%s<sp/>ending.\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_info.test_case_name(),<sp/>test_info.name());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Using<sp/>Event<sp/>Listeners<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>use<sp/>the<sp/>event<sp/>listener<sp/>you<sp/>have<sp/>defined,<sp/>add<sp/>an<sp/>instance<sp/>of<sp/>it<sp/>to</highlight></codeline>
<codeline><highlight class="normal">the<sp/>Google<sp/>Test<sp/>event<sp/>listener<sp/>list<sp/>(represented<sp/>by<sp/>class</highlight></codeline>
<codeline><highlight class="normal">[TestEventListeners](../include/gtest/gtest.h#L929)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>note<sp/>the<sp/>&quot;s&quot;<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>name)<sp/>in<sp/>your</highlight></codeline>
<codeline><highlight class="normal">`main()`<sp/>function,<sp/>before<sp/>calling<sp/>`RUN_ALL_TESTS()`:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>hold<sp/>of<sp/>the<sp/>event<sp/>listener<sp/>list.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::TestEventListeners&amp;<sp/>listeners<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::testing::UnitTest::GetInstance()-&gt;listeners();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Adds<sp/>a<sp/>listener<sp/>to<sp/>the<sp/>end.<sp/><sp/>Google<sp/>Test<sp/>takes<sp/>the<sp/>ownership.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>listeners.Append(new<sp/>MinimalistPrinter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There&apos;s<sp/>only<sp/>one<sp/>problem:<sp/>the<sp/>default<sp/>test<sp/>result<sp/>printer<sp/>is<sp/>still<sp/>in</highlight></codeline>
<codeline><highlight class="normal">effect,<sp/>so<sp/>its<sp/>output<sp/>will<sp/>mingle<sp/>with<sp/>the<sp/>output<sp/>from<sp/>your<sp/>minimalist</highlight></codeline>
<codeline><highlight class="normal">printer.<sp/>To<sp/>suppress<sp/>the<sp/>default<sp/>printer,<sp/>just<sp/>release<sp/>it<sp/>from<sp/>the</highlight></codeline>
<codeline><highlight class="normal">event<sp/>listener<sp/>list<sp/>and<sp/>delete<sp/>it.<sp/>You<sp/>can<sp/>do<sp/>so<sp/>by<sp/>adding<sp/>one<sp/>line:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delete<sp/>listeners.Release(listeners.default_result_printer());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>listeners.Append(new<sp/>MinimalistPrinter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now,<sp/>sit<sp/>back<sp/>and<sp/>enjoy<sp/>a<sp/>completely<sp/>different<sp/>output<sp/>from<sp/>your</highlight></codeline>
<codeline><highlight class="normal">tests.<sp/>For<sp/>more<sp/>details,<sp/>you<sp/>can<sp/>read<sp/>this</highlight></codeline>
<codeline><highlight class="normal">[sample](../samples/sample9_unittest.cc).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>append<sp/>more<sp/>than<sp/>one<sp/>listener<sp/>to<sp/>the<sp/>list.<sp/>When<sp/>an<sp/>`On*Start()`</highlight></codeline>
<codeline><highlight class="normal">or<sp/>`OnTestPartResult()`<sp/>event<sp/>is<sp/>fired,<sp/>the<sp/>listeners<sp/>will<sp/>receive<sp/>it<sp/>in</highlight></codeline>
<codeline><highlight class="normal">the<sp/>order<sp/>they<sp/>appear<sp/>in<sp/>the<sp/>list<sp/>(since<sp/>new<sp/>listeners<sp/>are<sp/>added<sp/>to</highlight></codeline>
<codeline><highlight class="normal">the<sp/>end<sp/>of<sp/>the<sp/>list,<sp/>the<sp/>default<sp/>text<sp/>printer<sp/>and<sp/>the<sp/>default<sp/>XML</highlight></codeline>
<codeline><highlight class="normal">generator<sp/>will<sp/>receive<sp/>the<sp/>event<sp/>first).<sp/>An<sp/>`On*End()`<sp/>event<sp/>will<sp/>be</highlight></codeline>
<codeline><highlight class="normal">received<sp/>by<sp/>the<sp/>listeners<sp/>in<sp/>the<sp/>_reverse_<sp/>order.<sp/>This<sp/>allows<sp/>output<sp/>by</highlight></codeline>
<codeline><highlight class="normal">listeners<sp/>added<sp/>later<sp/>to<sp/>be<sp/>framed<sp/>by<sp/>output<sp/>from<sp/>listeners<sp/>added</highlight></codeline>
<codeline><highlight class="normal">earlier.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Generating<sp/>Failures<sp/>in<sp/>Listeners<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>use<sp/>failure-raising<sp/>macros<sp/>(`EXPECT_*()`,<sp/>`ASSERT_*()`,</highlight></codeline>
<codeline><highlight class="normal">`FAIL()`,<sp/>etc)<sp/>when<sp/>processing<sp/>an<sp/>event.<sp/>There<sp/>are<sp/>some<sp/>restrictions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>You<sp/>cannot<sp/>generate<sp/>any<sp/>failure<sp/>in<sp/>`OnTestPartResult()`<sp/>(otherwise<sp/>it<sp/>will<sp/>cause<sp/>`OnTestPartResult()`<sp/>to<sp/>be<sp/>called<sp/>recursively).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>A<sp/>listener<sp/>that<sp/>handles<sp/>`OnTestPartResult()`<sp/>is<sp/>not<sp/>allowed<sp/>to<sp/>generate<sp/>any<sp/>failure.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>you<sp/>add<sp/>listeners<sp/>to<sp/>the<sp/>listener<sp/>list,<sp/>you<sp/>should<sp/>put<sp/>listeners</highlight></codeline>
<codeline><highlight class="normal">that<sp/>handle<sp/>`OnTestPartResult()`<sp/>_before_<sp/>listeners<sp/>that<sp/>can<sp/>generate</highlight></codeline>
<codeline><highlight class="normal">failures.<sp/>This<sp/>ensures<sp/>that<sp/>failures<sp/>generated<sp/>by<sp/>the<sp/>latter<sp/>are</highlight></codeline>
<codeline><highlight class="normal">attributed<sp/>to<sp/>the<sp/>right<sp/>test<sp/>by<sp/>the<sp/>former.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">We<sp/>have<sp/>a<sp/>sample<sp/>of<sp/>failure-raising<sp/>listener</highlight></codeline>
<codeline><highlight class="normal">[here](../samples/sample10_unittest.cc).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Running<sp/>Test<sp/>Programs:<sp/>Advanced<sp/>Options<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>test<sp/>programs<sp/>are<sp/>ordinary<sp/>executables.<sp/>Once<sp/>built,<sp/>you<sp/>can<sp/>run</highlight></codeline>
<codeline><highlight class="normal">them<sp/>directly<sp/>and<sp/>affect<sp/>their<sp/>behavior<sp/>via<sp/>the<sp/>following<sp/>environment<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">and/or<sp/>command<sp/>line<sp/>flags.<sp/>For<sp/>the<sp/>flags<sp/>to<sp/>work,<sp/>your<sp/>programs<sp/>must<sp/>call</highlight></codeline>
<codeline><highlight class="normal">`::testing::InitGoogleTest()`<sp/>before<sp/>calling<sp/>`RUN_ALL_TESTS()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>see<sp/>a<sp/>list<sp/>of<sp/>supported<sp/>flags<sp/>and<sp/>their<sp/>usage,<sp/>please<sp/>run<sp/>your<sp/>test</highlight></codeline>
<codeline><highlight class="normal">program<sp/>with<sp/>the<sp/>`--help`<sp/>flag.<sp/><sp/>You<sp/>can<sp/>also<sp/>use<sp/>`-h`,<sp/>`-?`,<sp/>or<sp/>`/?`</highlight></codeline>
<codeline><highlight class="normal">for<sp/>short.<sp/><sp/>This<sp/>feature<sp/>is<sp/>added<sp/>in<sp/>version<sp/>1.3.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>an<sp/>option<sp/>is<sp/>specified<sp/>both<sp/>by<sp/>an<sp/>environment<sp/>variable<sp/>and<sp/>by<sp/>a</highlight></codeline>
<codeline><highlight class="normal">flag,<sp/>the<sp/>latter<sp/>takes<sp/>precedence.<sp/><sp/>Most<sp/>of<sp/>the<sp/>options<sp/>can<sp/>also<sp/>be</highlight></codeline>
<codeline><highlight class="normal">set/read<sp/>in<sp/>code:<sp/>to<sp/>access<sp/>the<sp/>value<sp/>of<sp/>command<sp/>line<sp/>flag</highlight></codeline>
<codeline><highlight class="normal">`--gtest_foo`,<sp/>write<sp/>`::testing::GTEST_FLAG(foo)`.<sp/><sp/>A<sp/>common<sp/>pattern<sp/>is</highlight></codeline>
<codeline><highlight class="normal">to<sp/>set<sp/>the<sp/>value<sp/>of<sp/>a<sp/>flag<sp/>before<sp/>calling<sp/>`::testing::InitGoogleTest()`</highlight></codeline>
<codeline><highlight class="normal">to<sp/>change<sp/>the<sp/>default<sp/>value<sp/>of<sp/>the<sp/>flag:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Disables<sp/>elapsed<sp/>time<sp/>by<sp/>default.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::GTEST_FLAG(print_time)<sp/>=<sp/>false;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>override<sp/>the<sp/>flag<sp/>on<sp/>the<sp/>command<sp/>line.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Selecting<sp/>Tests<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>section<sp/>shows<sp/>various<sp/>options<sp/>for<sp/>choosing<sp/>which<sp/>tests<sp/>to<sp/>run.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Listing<sp/>Test<sp/>Names<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sometimes<sp/>it<sp/>is<sp/>necessary<sp/>to<sp/>list<sp/>the<sp/>available<sp/>tests<sp/>in<sp/>a<sp/>program<sp/>before</highlight></codeline>
<codeline><highlight class="normal">running<sp/>them<sp/>so<sp/>that<sp/>a<sp/>filter<sp/>may<sp/>be<sp/>applied<sp/>if<sp/>needed.<sp/>Including<sp/>the<sp/>flag</highlight></codeline>
<codeline><highlight class="normal">`--gtest_list_tests`<sp/>overrides<sp/>all<sp/>other<sp/>flags<sp/>and<sp/>lists<sp/>tests<sp/>in<sp/>the<sp/>following</highlight></codeline>
<codeline><highlight class="normal">format:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TestCase1.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName2</highlight></codeline>
<codeline><highlight class="normal">TestCase2.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TestName</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">None<sp/>of<sp/>the<sp/>tests<sp/>listed<sp/>are<sp/>actually<sp/>run<sp/>if<sp/>the<sp/>flag<sp/>is<sp/>provided.<sp/>There<sp/>is<sp/>no</highlight></codeline>
<codeline><highlight class="normal">corresponding<sp/>environment<sp/>variable<sp/>for<sp/>this<sp/>flag.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Running<sp/>a<sp/>Subset<sp/>of<sp/>the<sp/>Tests<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>a<sp/>Google<sp/>Test<sp/>program<sp/>runs<sp/>all<sp/>tests<sp/>the<sp/>user<sp/>has<sp/>defined.</highlight></codeline>
<codeline><highlight class="normal">Sometimes,<sp/>you<sp/>want<sp/>to<sp/>run<sp/>only<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>tests<sp/>(e.g.<sp/>for<sp/>debugging<sp/>or</highlight></codeline>
<codeline><highlight class="normal">quickly<sp/>verifying<sp/>a<sp/>change).<sp/>If<sp/>you<sp/>set<sp/>the<sp/>`GTEST_FILTER`<sp/>environment<sp/>variable</highlight></codeline>
<codeline><highlight class="normal">or<sp/>the<sp/>`--gtest_filter`<sp/>flag<sp/>to<sp/>a<sp/>filter<sp/>string,<sp/>Google<sp/>Test<sp/>will<sp/>only<sp/>run<sp/>the</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>whose<sp/>full<sp/>names<sp/>(in<sp/>the<sp/>form<sp/>of<sp/>`TestCaseName.TestName`)<sp/>match<sp/>the</highlight></codeline>
<codeline><highlight class="normal">filter.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>format<sp/>of<sp/>a<sp/>filter<sp/>is<sp/>a<sp/>&apos;`:`&apos;-separated<sp/>list<sp/>of<sp/>wildcard<sp/>patterns<sp/>(called</highlight></codeline>
<codeline><highlight class="normal">the<sp/>positive<sp/>patterns)<sp/>optionally<sp/>followed<sp/>by<sp/>a<sp/>&apos;`-`&apos;<sp/>and<sp/>another</highlight></codeline>
<codeline><highlight class="normal">&apos;`:`&apos;-separated<sp/>pattern<sp/>list<sp/>(called<sp/>the<sp/>negative<sp/>patterns).<sp/>A<sp/>test<sp/>matches<sp/>the</highlight></codeline>
<codeline><highlight class="normal">filter<sp/>if<sp/>and<sp/>only<sp/>if<sp/>it<sp/>matches<sp/>any<sp/>of<sp/>the<sp/>positive<sp/>patterns<sp/>but<sp/>does<sp/>not</highlight></codeline>
<codeline><highlight class="normal">match<sp/>any<sp/>of<sp/>the<sp/>negative<sp/>patterns.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>pattern<sp/>may<sp/>contain<sp/>`&apos;*&apos;`<sp/>(matches<sp/>any<sp/>string)<sp/>or<sp/>`&apos;?&apos;`<sp/>(matches<sp/>any<sp/>single</highlight></codeline>
<codeline><highlight class="normal">character).<sp/>For<sp/>convenience,<sp/>the<sp/>filter<sp/>`&apos;*-NegativePatterns&apos;`<sp/>can<sp/>be<sp/>also</highlight></codeline>
<codeline><highlight class="normal">written<sp/>as<sp/>`&apos;-NegativePatterns&apos;`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`./foo_test`<sp/>Has<sp/>no<sp/>flag,<sp/>and<sp/>thus<sp/>runs<sp/>all<sp/>its<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`./foo_test<sp/>--gtest_filter=*`<sp/>Also<sp/>runs<sp/>everything,<sp/>due<sp/>to<sp/>the<sp/>single<sp/>match-everything<sp/>`*`<sp/>value.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`./foo_test<sp/>--gtest_filter=FooTest.*`<sp/>Runs<sp/>everything<sp/>in<sp/>test<sp/>case<sp/>`FooTest`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`./foo_test<sp/>--gtest_filter=*Null*:*Constructor*`<sp/>Runs<sp/>any<sp/>test<sp/>whose<sp/>full<sp/>name<sp/>contains<sp/>either<sp/>`&quot;Null&quot;`<sp/>or<sp/>`&quot;Constructor&quot;`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`./foo_test<sp/>--gtest_filter=-*DeathTest.*`<sp/>Runs<sp/>all<sp/>non-death<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`./foo_test<sp/>--gtest_filter=FooTest.*-FooTest.Bar`<sp/>Runs<sp/>everything<sp/>in<sp/>test<sp/>case<sp/>`FooTest`<sp/>except<sp/>`FooTest.Bar`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Temporarily<sp/>Disabling<sp/>Tests<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>have<sp/>a<sp/>broken<sp/>test<sp/>that<sp/>you<sp/>cannot<sp/>fix<sp/>right<sp/>away,<sp/>you<sp/>can<sp/>add<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`DISABLED_`<sp/>prefix<sp/>to<sp/>its<sp/>name.<sp/>This<sp/>will<sp/>exclude<sp/>it<sp/>from<sp/>execution.<sp/>This<sp/>is</highlight></codeline>
<codeline><highlight class="normal">better<sp/>than<sp/>commenting<sp/>out<sp/>the<sp/>code<sp/>or<sp/>using<sp/>`#if<sp/>0`,<sp/>as<sp/>disabled<sp/>tests<sp/>are</highlight></codeline>
<codeline><highlight class="normal">still<sp/>compiled<sp/>(and<sp/>thus<sp/>won&apos;t<sp/>rot).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>need<sp/>to<sp/>disable<sp/>all<sp/>tests<sp/>in<sp/>a<sp/>test<sp/>case,<sp/>you<sp/>can<sp/>either<sp/>add<sp/>`DISABLED_`</highlight></codeline>
<codeline><highlight class="normal">to<sp/>the<sp/>front<sp/>of<sp/>the<sp/>name<sp/>of<sp/>each<sp/>test,<sp/>or<sp/>alternatively<sp/>add<sp/>it<sp/>to<sp/>the<sp/>front<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>test<sp/>case<sp/>name.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>the<sp/>following<sp/>tests<sp/>won&apos;t<sp/>be<sp/>run<sp/>by<sp/>Google<sp/>Test,<sp/>even<sp/>though<sp/>they</highlight></codeline>
<codeline><highlight class="normal">will<sp/>still<sp/>be<sp/>compiled:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>that<sp/>Foo<sp/>does<sp/>Abc.</highlight></codeline>
<codeline><highlight class="normal">TEST(FooTest,<sp/>DISABLED_DoesAbc)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>DISABLED_BarTest<sp/>:<sp/>public<sp/>::testing::Test<sp/>{<sp/>...<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Tests<sp/>that<sp/>Bar<sp/>does<sp/>Xyz.</highlight></codeline>
<codeline><highlight class="normal">TEST_F(DISABLED_BarTest,<sp/>DoesXyz)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Note:_<sp/>This<sp/>feature<sp/>should<sp/>only<sp/>be<sp/>used<sp/>for<sp/>temporary<sp/>pain-relief.<sp/>You<sp/>still</highlight></codeline>
<codeline><highlight class="normal">have<sp/>to<sp/>fix<sp/>the<sp/>disabled<sp/>tests<sp/>at<sp/>a<sp/>later<sp/>date.<sp/>As<sp/>a<sp/>reminder,<sp/>Google<sp/>Test<sp/>will</highlight></codeline>
<codeline><highlight class="normal">print<sp/>a<sp/>banner<sp/>warning<sp/>you<sp/>if<sp/>a<sp/>test<sp/>program<sp/>contains<sp/>any<sp/>disabled<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Tip:_<sp/>You<sp/>can<sp/>easily<sp/>count<sp/>the<sp/>number<sp/>of<sp/>disabled<sp/>tests<sp/>you<sp/>have</highlight></codeline>
<codeline><highlight class="normal">using<sp/>`grep`.<sp/>This<sp/>number<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>metric<sp/>for<sp/>improving<sp/>your</highlight></codeline>
<codeline><highlight class="normal">test<sp/>quality.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Temporarily<sp/>Enabling<sp/>Disabled<sp/>Tests<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>include<sp/>[disabled<sp/>tests](#temporarily-disabling-tests)<sp/>in<sp/>test</highlight></codeline>
<codeline><highlight class="normal">execution,<sp/>just<sp/>invoke<sp/>the<sp/>test<sp/>program<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`--gtest_also_run_disabled_tests`<sp/>flag<sp/>or<sp/>set<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`GTEST_ALSO_RUN_DISABLED_TESTS`<sp/>environment<sp/>variable<sp/>to<sp/>a<sp/>value<sp/>other</highlight></codeline>
<codeline><highlight class="normal">than<sp/>`0`.<sp/><sp/>You<sp/>can<sp/>combine<sp/>this<sp/>with<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[--gtest\_filter](#running-a-subset-of-the-tests)<sp/>flag<sp/>to<sp/>further<sp/>select</highlight></codeline>
<codeline><highlight class="normal">which<sp/>disabled<sp/>tests<sp/>to<sp/>run.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>version<sp/>1.3.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Repeating<sp/>the<sp/>Tests<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>in<sp/>a<sp/>while<sp/>you&apos;ll<sp/>run<sp/>into<sp/>a<sp/>test<sp/>whose<sp/>result<sp/>is<sp/>hit-or-miss.<sp/>Perhaps<sp/>it</highlight></codeline>
<codeline><highlight class="normal">will<sp/>fail<sp/>only<sp/>1%<sp/>of<sp/>the<sp/>time,<sp/>making<sp/>it<sp/>rather<sp/>hard<sp/>to<sp/>reproduce<sp/>the<sp/>bug<sp/>under</highlight></codeline>
<codeline><highlight class="normal">a<sp/>debugger.<sp/>This<sp/>can<sp/>be<sp/>a<sp/>major<sp/>source<sp/>of<sp/>frustration.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`--gtest_repeat`<sp/>flag<sp/>allows<sp/>you<sp/>to<sp/>repeat<sp/>all<sp/>(or<sp/>selected)<sp/>test<sp/>methods</highlight></codeline>
<codeline><highlight class="normal">in<sp/>a<sp/>program<sp/>many<sp/>times.<sp/>Hopefully,<sp/>a<sp/>flaky<sp/>test<sp/>will<sp/>eventually<sp/>fail<sp/>and<sp/>give</highlight></codeline>
<codeline><highlight class="normal">you<sp/>a<sp/>chance<sp/>to<sp/>debug.<sp/>Here&apos;s<sp/>how<sp/>to<sp/>use<sp/>it:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>`$<sp/>foo_test<sp/>--gtest_repeat=1000`<sp/>|<sp/>Repeat<sp/>foo\_test<sp/>1000<sp/>times<sp/>and<sp/>don&apos;t<sp/>stop<sp/>at<sp/>failures.<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:---------------------------------|:--------------------------------------------------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`$<sp/>foo_test<sp/>--gtest_repeat=-1`<sp/><sp/><sp/>|<sp/>A<sp/>negative<sp/>count<sp/>means<sp/>repeating<sp/>forever.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`$<sp/>foo_test<sp/>--gtest_repeat=1000<sp/>--gtest_break_on_failure`<sp/>|<sp/>Repeat<sp/>foo\_test<sp/>1000<sp/>times,<sp/>stopping<sp/>at<sp/>the<sp/>first<sp/>failure.<sp/>This<sp/>is<sp/>especially<sp/>useful<sp/>when<sp/>running<sp/>under<sp/>a<sp/>debugger:<sp/>when<sp/>the<sp/>testfails,<sp/>it<sp/>will<sp/>drop<sp/>into<sp/>the<sp/>debugger<sp/>and<sp/>you<sp/>can<sp/>then<sp/>inspect<sp/>variables<sp/>and<sp/>stacks.<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`$<sp/>foo_test<sp/>--gtest_repeat=1000<sp/>--gtest_filter=FooBar`<sp/>|<sp/>Repeat<sp/>the<sp/>tests<sp/>whose<sp/>name<sp/>matches<sp/>the<sp/>filter<sp/>1000<sp/>times.<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>your<sp/>test<sp/>program<sp/>contains<sp/>global<sp/>set-up/tear-down<sp/>code<sp/>registered</highlight></codeline>
<codeline><highlight class="normal">using<sp/>`AddGlobalTestEnvironment()`,<sp/>it<sp/>will<sp/>be<sp/>repeated<sp/>in<sp/>each</highlight></codeline>
<codeline><highlight class="normal">iteration<sp/>as<sp/>well,<sp/>as<sp/>the<sp/>flakiness<sp/>may<sp/>be<sp/>in<sp/>it.<sp/>You<sp/>can<sp/>also<sp/>specify</highlight></codeline>
<codeline><highlight class="normal">the<sp/>repeat<sp/>count<sp/>by<sp/>setting<sp/>the<sp/>`GTEST_REPEAT`<sp/>environment<sp/>variable.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Shuffling<sp/>the<sp/>Tests<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>specify<sp/>the<sp/>`--gtest_shuffle`<sp/>flag<sp/>(or<sp/>set<sp/>the<sp/>`GTEST_SHUFFLE`</highlight></codeline>
<codeline><highlight class="normal">environment<sp/>variable<sp/>to<sp/>`1`)<sp/>to<sp/>run<sp/>the<sp/>tests<sp/>in<sp/>a<sp/>program<sp/>in<sp/>a<sp/>random</highlight></codeline>
<codeline><highlight class="normal">order.<sp/>This<sp/>helps<sp/>to<sp/>reveal<sp/>bad<sp/>dependencies<sp/>between<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>Google<sp/>Test<sp/>uses<sp/>a<sp/>random<sp/>seed<sp/>calculated<sp/>from<sp/>the<sp/>current</highlight></codeline>
<codeline><highlight class="normal">time.<sp/>Therefore<sp/>you&apos;ll<sp/>get<sp/>a<sp/>different<sp/>order<sp/>every<sp/>time.<sp/>The<sp/>console</highlight></codeline>
<codeline><highlight class="normal">output<sp/>includes<sp/>the<sp/>random<sp/>seed<sp/>value,<sp/>such<sp/>that<sp/>you<sp/>can<sp/>reproduce<sp/>an</highlight></codeline>
<codeline><highlight class="normal">order-related<sp/>test<sp/>failure<sp/>later.<sp/>To<sp/>specify<sp/>the<sp/>random<sp/>seed</highlight></codeline>
<codeline><highlight class="normal">explicitly,<sp/>use<sp/>the<sp/>`--gtest_random_seed=SEED`<sp/>flag<sp/>(or<sp/>set<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`GTEST_RANDOM_SEED`<sp/>environment<sp/>variable),<sp/>where<sp/>`SEED`<sp/>is<sp/>an<sp/>integer</highlight></codeline>
<codeline><highlight class="normal">between<sp/>0<sp/>and<sp/>99999.<sp/>The<sp/>seed<sp/>value<sp/>0<sp/>is<sp/>special:<sp/>it<sp/>tells<sp/>Google<sp/>Test</highlight></codeline>
<codeline><highlight class="normal">to<sp/>do<sp/>the<sp/>default<sp/>behavior<sp/>of<sp/>calculating<sp/>the<sp/>seed<sp/>from<sp/>the<sp/>current</highlight></codeline>
<codeline><highlight class="normal">time.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>combine<sp/>this<sp/>with<sp/>`--gtest_repeat=N`,<sp/>Google<sp/>Test<sp/>will<sp/>pick<sp/>a</highlight></codeline>
<codeline><highlight class="normal">different<sp/>random<sp/>seed<sp/>and<sp/>re-shuffle<sp/>the<sp/>tests<sp/>in<sp/>each<sp/>iteration.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>v1.4.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Controlling<sp/>Test<sp/>Output<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>section<sp/>teaches<sp/>how<sp/>to<sp/>tweak<sp/>the<sp/>way<sp/>test<sp/>results<sp/>are<sp/>reported.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Colored<sp/>Terminal<sp/>Output<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>can<sp/>use<sp/>colors<sp/>in<sp/>its<sp/>terminal<sp/>output<sp/>to<sp/>make<sp/>it<sp/>easier<sp/>to<sp/>spot</highlight></codeline>
<codeline><highlight class="normal">the<sp/>separation<sp/>between<sp/>tests,<sp/>and<sp/>whether<sp/>tests<sp/>passed.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>set<sp/>the<sp/>GTEST\_COLOR<sp/>environment<sp/>variable<sp/>or<sp/>set<sp/>the<sp/>`--gtest_color`</highlight></codeline>
<codeline><highlight class="normal">command<sp/>line<sp/>flag<sp/>to<sp/>`yes`,<sp/>`no`,<sp/>or<sp/>`auto`<sp/>(the<sp/>default)<sp/>to<sp/>enable<sp/>colors,</highlight></codeline>
<codeline><highlight class="normal">disable<sp/>colors,<sp/>or<sp/>let<sp/>Google<sp/>Test<sp/>decide.<sp/>When<sp/>the<sp/>value<sp/>is<sp/>`auto`,<sp/>Google</highlight></codeline>
<codeline><highlight class="normal">Test<sp/>will<sp/>use<sp/>colors<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>output<sp/>goes<sp/>to<sp/>a<sp/>terminal<sp/>and<sp/>(on</highlight></codeline>
<codeline><highlight class="normal">non-Windows<sp/>platforms)<sp/>the<sp/>`TERM`<sp/>environment<sp/>variable<sp/>is<sp/>set<sp/>to<sp/>`xterm`<sp/>or</highlight></codeline>
<codeline><highlight class="normal">`xterm-color`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Suppressing<sp/>the<sp/>Elapsed<sp/>Time<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">By<sp/>default,<sp/>Google<sp/>Test<sp/>prints<sp/>the<sp/>time<sp/>it<sp/>takes<sp/>to<sp/>run<sp/>each<sp/>test.<sp/><sp/>To</highlight></codeline>
<codeline><highlight class="normal">suppress<sp/>that,<sp/>run<sp/>the<sp/>test<sp/>program<sp/>with<sp/>the<sp/>`--gtest_print_time=0`</highlight></codeline>
<codeline><highlight class="normal">command<sp/>line<sp/>flag.<sp/><sp/>Setting<sp/>the<sp/>`GTEST_PRINT_TIME`<sp/>environment</highlight></codeline>
<codeline><highlight class="normal">variable<sp/>to<sp/>`0`<sp/>has<sp/>the<sp/>same<sp/>effect.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.<sp/><sp/>(In<sp/>Google<sp/>Test<sp/>1.3.0<sp/>and<sp/>lower,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>default<sp/>behavior<sp/>is<sp/>that<sp/>the<sp/>elapsed<sp/>time<sp/>is<sp/>**not**<sp/>printed.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Generating<sp/>an<sp/>XML<sp/>Report<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>can<sp/>emit<sp/>a<sp/>detailed<sp/>XML<sp/>report<sp/>to<sp/>a<sp/>file<sp/>in<sp/>addition<sp/>to<sp/>its<sp/>normal</highlight></codeline>
<codeline><highlight class="normal">textual<sp/>output.<sp/>The<sp/>report<sp/>contains<sp/>the<sp/>duration<sp/>of<sp/>each<sp/>test,<sp/>and<sp/>thus<sp/>can</highlight></codeline>
<codeline><highlight class="normal">help<sp/>you<sp/>identify<sp/>slow<sp/>tests.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>generate<sp/>the<sp/>XML<sp/>report,<sp/>set<sp/>the<sp/>`GTEST_OUTPUT`<sp/>environment<sp/>variable<sp/>or<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`--gtest_output`<sp/>flag<sp/>to<sp/>the<sp/>string<sp/>`&quot;xml:_path_to_output_file_&quot;`,<sp/>which<sp/>will</highlight></codeline>
<codeline><highlight class="normal">create<sp/>the<sp/>file<sp/>at<sp/>the<sp/>given<sp/>location.<sp/>You<sp/>can<sp/>also<sp/>just<sp/>use<sp/>the<sp/>string</highlight></codeline>
<codeline><highlight class="normal">`&quot;xml&quot;`,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>output<sp/>can<sp/>be<sp/>found<sp/>in<sp/>the<sp/>`test_detail.xml`<sp/>file<sp/>in</highlight></codeline>
<codeline><highlight class="normal">the<sp/>current<sp/>directory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>specify<sp/>a<sp/>directory<sp/>(for<sp/>example,<sp/>`&quot;xml:output/directory/&quot;`<sp/>on<sp/>Linux<sp/>or</highlight></codeline>
<codeline><highlight class="normal">`&quot;xml:output\directory\&quot;`<sp/>on<sp/>Windows),<sp/>Google<sp/>Test<sp/>will<sp/>create<sp/>the<sp/>XML<sp/>file<sp/>in</highlight></codeline>
<codeline><highlight class="normal">that<sp/>directory,<sp/>named<sp/>after<sp/>the<sp/>test<sp/>executable<sp/>(e.g.<sp/>`foo_test.xml`<sp/>for<sp/>test</highlight></codeline>
<codeline><highlight class="normal">program<sp/>`foo_test`<sp/>or<sp/>`foo_test.exe`).<sp/>If<sp/>the<sp/>file<sp/>already<sp/>exists<sp/>(perhaps<sp/>left</highlight></codeline>
<codeline><highlight class="normal">over<sp/>from<sp/>a<sp/>previous<sp/>run),<sp/>Google<sp/>Test<sp/>will<sp/>pick<sp/>a<sp/>different<sp/>name<sp/>(e.g.</highlight></codeline>
<codeline><highlight class="normal">`foo_test_1.xml`)<sp/>to<sp/>avoid<sp/>overwriting<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>report<sp/>uses<sp/>the<sp/>format<sp/>described<sp/>here.<sp/><sp/>It<sp/>is<sp/>based<sp/>on<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`junitreport`<sp/>Ant<sp/>task<sp/>and<sp/>can<sp/>be<sp/>parsed<sp/>by<sp/>popular<sp/>continuous<sp/>build</highlight></codeline>
<codeline><highlight class="normal">systems<sp/>like<sp/>[Hudson](https://hudson.dev.java.net/).<sp/>Since<sp/>that<sp/>format</highlight></codeline>
<codeline><highlight class="normal">was<sp/>originally<sp/>intended<sp/>for<sp/>Java,<sp/>a<sp/>little<sp/>interpretation<sp/>is<sp/>required</highlight></codeline>
<codeline><highlight class="normal">to<sp/>make<sp/>it<sp/>apply<sp/>to<sp/>Google<sp/>Test<sp/>tests,<sp/>as<sp/>shown<sp/>here:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;testsuites<sp/>name=&quot;AllTests&quot;<sp/>...&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;testsuite<sp/>name=&quot;test_case_name&quot;<sp/>...&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;test_name&quot;<sp/>...&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;...&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/testsuite&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/testsuites&gt;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>The<sp/>root<sp/>`&lt;testsuites&gt;`<sp/>element<sp/>corresponds<sp/>to<sp/>the<sp/>entire<sp/>test<sp/>program.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`&lt;testsuite&gt;`<sp/>elements<sp/>correspond<sp/>to<sp/>Google<sp/>Test<sp/>test<sp/>cases.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>`&lt;testcase&gt;`<sp/>elements<sp/>correspond<sp/>to<sp/>Google<sp/>Test<sp/>test<sp/>functions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>instance,<sp/>the<sp/>following<sp/>program</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST(MathTest,<sp/>Addition)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">TEST(MathTest,<sp/>Subtraction)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">TEST(LogicTest,<sp/>NonContradiction)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">could<sp/>generate<sp/>this<sp/>report:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">&lt;?xml<sp/>version=&quot;1.0&quot;<sp/>encoding=&quot;UTF-8&quot;?&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;testsuites<sp/>tests=&quot;3&quot;<sp/>failures=&quot;1&quot;<sp/>errors=&quot;0&quot;<sp/>time=&quot;35&quot;<sp/>name=&quot;AllTests&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;testsuite<sp/>name=&quot;MathTest&quot;<sp/>tests=&quot;2&quot;<sp/>failures=&quot;1&quot;*<sp/>errors=&quot;0&quot;<sp/>time=&quot;15&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;Addition&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;7&quot;<sp/>classname=&quot;&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;Value<sp/>of:<sp/>add(1,<sp/>1)&amp;#x0A;<sp/>Actual:<sp/>3&amp;#x0A;Expected:<sp/>2&quot;<sp/>type=&quot;&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;failure<sp/>message=&quot;Value<sp/>of:<sp/>add(1,<sp/>-1)&amp;#x0A;<sp/>Actual:<sp/>1&amp;#x0A;Expected:<sp/>0&quot;<sp/>type=&quot;&quot;/&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;Subtraction&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;5&quot;<sp/>classname=&quot;&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/testsuite&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;testsuite<sp/>name=&quot;LogicTest&quot;<sp/>tests=&quot;1&quot;<sp/>failures=&quot;0&quot;<sp/>errors=&quot;0&quot;<sp/>time=&quot;5&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;testcase<sp/>name=&quot;NonContradiction&quot;<sp/>status=&quot;run&quot;<sp/>time=&quot;5&quot;<sp/>classname=&quot;&quot;&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&lt;/testcase&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;/testsuite&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/testsuites&gt;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Things<sp/>to<sp/>note:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>The<sp/>`tests`<sp/>attribute<sp/>of<sp/>a<sp/>`&lt;testsuites&gt;`<sp/>or<sp/>`&lt;testsuite&gt;`<sp/>element<sp/>tells<sp/>how<sp/>many<sp/>test<sp/>functions<sp/>the<sp/>Google<sp/>Test<sp/>program<sp/>or<sp/>test<sp/>case<sp/>contains,<sp/>while<sp/>the<sp/>`failures`<sp/>attribute<sp/>tells<sp/>how<sp/>many<sp/>of<sp/>them<sp/>failed.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>The<sp/>`time`<sp/>attribute<sp/>expresses<sp/>the<sp/>duration<sp/>of<sp/>the<sp/>test,<sp/>test<sp/>case,<sp/>or<sp/>entire<sp/>test<sp/>program<sp/>in<sp/>milliseconds.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Each<sp/>`&lt;failure&gt;`<sp/>element<sp/>corresponds<sp/>to<sp/>a<sp/>single<sp/>failed<sp/>Google<sp/>Test<sp/>assertion.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Some<sp/>JUnit<sp/>concepts<sp/>don&apos;t<sp/>apply<sp/>to<sp/>Google<sp/>Test,<sp/>yet<sp/>we<sp/>have<sp/>to<sp/>conform<sp/>to<sp/>the<sp/>DTD.<sp/>Therefore<sp/>you&apos;ll<sp/>see<sp/>some<sp/>dummy<sp/>elements<sp/>and<sp/>attributes<sp/>in<sp/>the<sp/>report.<sp/>You<sp/>can<sp/>safely<sp/>ignore<sp/>these<sp/>parts.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Controlling<sp/>How<sp/>Failures<sp/>Are<sp/>Reported<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Turning<sp/>Assertion<sp/>Failures<sp/>into<sp/>Break-Points<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>running<sp/>test<sp/>programs<sp/>under<sp/>a<sp/>debugger,<sp/>it&apos;s<sp/>very<sp/>convenient<sp/>if<sp/>the</highlight></codeline>
<codeline><highlight class="normal">debugger<sp/>can<sp/>catch<sp/>an<sp/>assertion<sp/>failure<sp/>and<sp/>automatically<sp/>drop<sp/>into<sp/>interactive</highlight></codeline>
<codeline><highlight class="normal">mode.<sp/>Google<sp/>Test&apos;s<sp/>_break-on-failure_<sp/>mode<sp/>supports<sp/>this<sp/>behavior.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>enable<sp/>it,<sp/>set<sp/>the<sp/>`GTEST_BREAK_ON_FAILURE`<sp/>environment<sp/>variable<sp/>to<sp/>a<sp/>value</highlight></codeline>
<codeline><highlight class="normal">other<sp/>than<sp/>`0`<sp/>.<sp/>Alternatively,<sp/>you<sp/>can<sp/>use<sp/>the<sp/>`--gtest_break_on_failure`</highlight></codeline>
<codeline><highlight class="normal">command<sp/>line<sp/>flag.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Suppressing<sp/>Pop-ups<sp/>Caused<sp/>by<sp/>Exceptions<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">On<sp/>Windows,<sp/>Google<sp/>Test<sp/>may<sp/>be<sp/>used<sp/>with<sp/>exceptions<sp/>enabled.<sp/>Even<sp/>when</highlight></codeline>
<codeline><highlight class="normal">exceptions<sp/>are<sp/>disabled,<sp/>an<sp/>application<sp/>can<sp/>still<sp/>throw<sp/>structured<sp/>exceptions</highlight></codeline>
<codeline><highlight class="normal">(SEH&apos;s).<sp/>If<sp/>a<sp/>test<sp/>throws<sp/>an<sp/>exception,<sp/>by<sp/>default<sp/>Google<sp/>Test<sp/>doesn&apos;t<sp/>try<sp/>to</highlight></codeline>
<codeline><highlight class="normal">catch<sp/>it.<sp/>Instead,<sp/>you&apos;ll<sp/>see<sp/>a<sp/>pop-up<sp/>dialog,<sp/>at<sp/>which<sp/>point<sp/>you<sp/>can<sp/>attach</highlight></codeline>
<codeline><highlight class="normal">the<sp/>process<sp/>to<sp/>a<sp/>debugger<sp/>and<sp/>easily<sp/>find<sp/>out<sp/>what<sp/>went<sp/>wrong.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">However,<sp/>if<sp/>you<sp/>don&apos;t<sp/>want<sp/>to<sp/>see<sp/>the<sp/>pop-ups<sp/>(for<sp/>example,<sp/>if<sp/>you<sp/>run<sp/>the</highlight></codeline>
<codeline><highlight class="normal">tests<sp/>in<sp/>a<sp/>batch<sp/>job),<sp/>set<sp/>the<sp/>`GTEST_CATCH_EXCEPTIONS`<sp/>environment<sp/>variable<sp/>to</highlight></codeline>
<codeline><highlight class="normal">a<sp/>non-<sp/>`0`<sp/>value,<sp/>or<sp/>use<sp/>the<sp/>`--gtest_catch_exceptions`<sp/>flag.<sp/>Google<sp/>Test<sp/>now</highlight></codeline>
<codeline><highlight class="normal">catches<sp/>all<sp/>test-thrown<sp/>exceptions<sp/>and<sp/>logs<sp/>them<sp/>as<sp/>failures.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Windows.<sp/>`GTEST_CATCH_EXCEPTIONS`<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`--gtest_catch_exceptions`<sp/>have<sp/>no<sp/>effect<sp/>on<sp/>Google<sp/>Test&apos;s<sp/>behavior<sp/>on<sp/>Linux<sp/>or</highlight></codeline>
<codeline><highlight class="normal">Mac,<sp/>even<sp/>if<sp/>exceptions<sp/>are<sp/>enabled.<sp/>It<sp/>is<sp/>possible<sp/>to<sp/>add<sp/>support<sp/>for<sp/>catching</highlight></codeline>
<codeline><highlight class="normal">exceptions<sp/>on<sp/>these<sp/>platforms,<sp/>but<sp/>it<sp/>is<sp/>not<sp/>implemented<sp/>yet.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Letting<sp/>Another<sp/>Testing<sp/>Framework<sp/>Drive<sp/>###</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>work<sp/>on<sp/>a<sp/>project<sp/>that<sp/>has<sp/>already<sp/>been<sp/>using<sp/>another<sp/>testing</highlight></codeline>
<codeline><highlight class="normal">framework<sp/>and<sp/>is<sp/>not<sp/>ready<sp/>to<sp/>completely<sp/>switch<sp/>to<sp/>Google<sp/>Test<sp/>yet,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>can<sp/>get<sp/>much<sp/>of<sp/>Google<sp/>Test&apos;s<sp/>benefit<sp/>by<sp/>using<sp/>its<sp/>assertions<sp/>in</highlight></codeline>
<codeline><highlight class="normal">your<sp/>existing<sp/>tests.<sp/><sp/>Just<sp/>change<sp/>your<sp/>`main()`<sp/>function<sp/>to<sp/>look</highlight></codeline>
<codeline><highlight class="normal">like:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;gtest/gtest.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::GTEST_FLAG(throw_on_failure)<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Important:<sp/>Google<sp/>Test<sp/>must<sp/>be<sp/>initialized.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>...<sp/>whatever<sp/>your<sp/>existing<sp/>testing<sp/>framework<sp/>requires<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">With<sp/>that,<sp/>you<sp/>can<sp/>use<sp/>Google<sp/>Test<sp/>assertions<sp/>in<sp/>addition<sp/>to<sp/>the</highlight></codeline>
<codeline><highlight class="normal">native<sp/>assertions<sp/>your<sp/>testing<sp/>framework<sp/>provides,<sp/>for<sp/>example:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">void<sp/>TestFooDoesBar()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Foo<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>EXPECT_LE(foo.Bar(1),<sp/>100);<sp/><sp/><sp/><sp/><sp/>//<sp/>A<sp/>Google<sp/>Test<sp/>assertion.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>CPPUNIT_ASSERT(foo.IsEmpty());<sp/><sp/>//<sp/>A<sp/>native<sp/>assertion.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>Google<sp/>Test<sp/>assertion<sp/>fails,<sp/>it<sp/>will<sp/>print<sp/>an<sp/>error<sp/>message<sp/>and</highlight></codeline>
<codeline><highlight class="normal">throw<sp/>an<sp/>exception,<sp/>which<sp/>will<sp/>be<sp/>treated<sp/>as<sp/>a<sp/>failure<sp/>by<sp/>your<sp/>host</highlight></codeline>
<codeline><highlight class="normal">testing<sp/>framework.<sp/><sp/>If<sp/>you<sp/>compile<sp/>your<sp/>code<sp/>with<sp/>exceptions<sp/>disabled,</highlight></codeline>
<codeline><highlight class="normal">a<sp/>failed<sp/>Google<sp/>Test<sp/>assertion<sp/>will<sp/>instead<sp/>exit<sp/>your<sp/>program<sp/>with<sp/>a</highlight></codeline>
<codeline><highlight class="normal">non-zero<sp/>code,<sp/>which<sp/>will<sp/>also<sp/>signal<sp/>a<sp/>test<sp/>failure<sp/>to<sp/>your<sp/>test</highlight></codeline>
<codeline><highlight class="normal">runner.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>don&apos;t<sp/>write<sp/>`::testing::GTEST_FLAG(throw_on_failure)<sp/>=<sp/>true;`<sp/>in</highlight></codeline>
<codeline><highlight class="normal">your<sp/>`main()`,<sp/>you<sp/>can<sp/>alternatively<sp/>enable<sp/>this<sp/>feature<sp/>by<sp/>specifying</highlight></codeline>
<codeline><highlight class="normal">the<sp/>`--gtest_throw_on_failure`<sp/>flag<sp/>on<sp/>the<sp/>command-line<sp/>or<sp/>setting<sp/>the</highlight></codeline>
<codeline><highlight class="normal">`GTEST_THROW_ON_FAILURE`<sp/>environment<sp/>variable<sp/>to<sp/>a<sp/>non-zero<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>v1.3.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Distributing<sp/>Test<sp/>Functions<sp/>to<sp/>Multiple<sp/>Machines<sp/>##</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>have<sp/>more<sp/>than<sp/>one<sp/>machine<sp/>you<sp/>can<sp/>use<sp/>to<sp/>run<sp/>a<sp/>test<sp/>program,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>might<sp/>want<sp/>to<sp/>run<sp/>the<sp/>test<sp/>functions<sp/>in<sp/>parallel<sp/>and<sp/>get<sp/>the</highlight></codeline>
<codeline><highlight class="normal">result<sp/>faster.<sp/><sp/>We<sp/>call<sp/>this<sp/>technique<sp/>_sharding_,<sp/>where<sp/>each<sp/>machine</highlight></codeline>
<codeline><highlight class="normal">is<sp/>called<sp/>a<sp/>_shard_.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>is<sp/>compatible<sp/>with<sp/>test<sp/>sharding.<sp/><sp/>To<sp/>take<sp/>advantage<sp/>of</highlight></codeline>
<codeline><highlight class="normal">this<sp/>feature,<sp/>your<sp/>test<sp/>runner<sp/>(not<sp/>part<sp/>of<sp/>Google<sp/>Test)<sp/>needs<sp/>to<sp/>do</highlight></codeline>
<codeline><highlight class="normal">the<sp/>following:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Allocate<sp/>a<sp/>number<sp/>of<sp/>machines<sp/>(shards)<sp/>to<sp/>run<sp/>the<sp/>tests.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>On<sp/>each<sp/>shard,<sp/>set<sp/>the<sp/>`GTEST_TOTAL_SHARDS`<sp/>environment<sp/>variable<sp/>to<sp/>the<sp/>total<sp/>number<sp/>of<sp/>shards.<sp/><sp/>It<sp/>must<sp/>be<sp/>the<sp/>same<sp/>for<sp/>all<sp/>shards.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>On<sp/>each<sp/>shard,<sp/>set<sp/>the<sp/>`GTEST_SHARD_INDEX`<sp/>environment<sp/>variable<sp/>to<sp/>the<sp/>index<sp/>of<sp/>the<sp/>shard.<sp/><sp/>Different<sp/>shards<sp/>must<sp/>be<sp/>assigned<sp/>different<sp/>indices,<sp/>which<sp/>must<sp/>be<sp/>in<sp/>the<sp/>range<sp/>`[0,<sp/>GTEST_TOTAL_SHARDS<sp/>-<sp/>1]`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Run<sp/>the<sp/>same<sp/>test<sp/>program<sp/>on<sp/>all<sp/>shards.<sp/><sp/>When<sp/>Google<sp/>Test<sp/>sees<sp/>the<sp/>above<sp/>two<sp/>environment<sp/>variables,<sp/>it<sp/>will<sp/>select<sp/>a<sp/>subset<sp/>of<sp/>the<sp/>test<sp/>functions<sp/>to<sp/>run.<sp/><sp/>Across<sp/>all<sp/>shards,<sp/>each<sp/>test<sp/>function<sp/>in<sp/>the<sp/>program<sp/>will<sp/>be<sp/>run<sp/>exactly<sp/>once.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>1.<sp/>Wait<sp/>for<sp/>all<sp/>shards<sp/>to<sp/>finish,<sp/>then<sp/>collect<sp/>and<sp/>report<sp/>the<sp/>results.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Your<sp/>project<sp/>may<sp/>have<sp/>tests<sp/>that<sp/>were<sp/>written<sp/>without<sp/>Google<sp/>Test<sp/>and</highlight></codeline>
<codeline><highlight class="normal">thus<sp/>don&apos;t<sp/>understand<sp/>this<sp/>protocol.<sp/><sp/>In<sp/>order<sp/>for<sp/>your<sp/>test<sp/>runner<sp/>to</highlight></codeline>
<codeline><highlight class="normal">figure<sp/>out<sp/>which<sp/>test<sp/>supports<sp/>sharding,<sp/>it<sp/>can<sp/>set<sp/>the<sp/>environment</highlight></codeline>
<codeline><highlight class="normal">variable<sp/>`GTEST_SHARD_STATUS_FILE`<sp/>to<sp/>a<sp/>non-existent<sp/>file<sp/>path.<sp/><sp/>If<sp/>a</highlight></codeline>
<codeline><highlight class="normal">test<sp/>program<sp/>supports<sp/>sharding,<sp/>it<sp/>will<sp/>create<sp/>this<sp/>file<sp/>to</highlight></codeline>
<codeline><highlight class="normal">acknowledge<sp/>the<sp/>fact<sp/>(the<sp/>actual<sp/>contents<sp/>of<sp/>the<sp/>file<sp/>are<sp/>not</highlight></codeline>
<codeline><highlight class="normal">important<sp/>at<sp/>this<sp/>time;<sp/>although<sp/>we<sp/>may<sp/>stick<sp/>some<sp/>useful<sp/>information</highlight></codeline>
<codeline><highlight class="normal">in<sp/>it<sp/>in<sp/>the<sp/>future.);<sp/>otherwise<sp/>it<sp/>will<sp/>not<sp/>create<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here&apos;s<sp/>an<sp/>example<sp/>to<sp/>make<sp/>it<sp/>clear.<sp/><sp/>Suppose<sp/>you<sp/>have<sp/>a<sp/>test<sp/>program</highlight></codeline>
<codeline><highlight class="normal">`foo_test`<sp/>that<sp/>contains<sp/>the<sp/>following<sp/>5<sp/>test<sp/>functions:</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">TEST(A,<sp/>V)</highlight></codeline>
<codeline><highlight class="normal">TEST(A,<sp/>W)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>X)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>Y)</highlight></codeline>
<codeline><highlight class="normal">TEST(B,<sp/>Z)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">and<sp/>you<sp/>have<sp/>3<sp/>machines<sp/>at<sp/>your<sp/>disposal.<sp/><sp/>To<sp/>run<sp/>the<sp/>test<sp/>functions<sp/>in</highlight></codeline>
<codeline><highlight class="normal">parallel,<sp/>you<sp/>would<sp/>set<sp/>`GTEST_TOTAL_SHARDS`<sp/>to<sp/>3<sp/>on<sp/>all<sp/>machines,<sp/>and</highlight></codeline>
<codeline><highlight class="normal">set<sp/>`GTEST_SHARD_INDEX`<sp/>to<sp/>0,<sp/>1,<sp/>and<sp/>2<sp/>on<sp/>the<sp/>machines<sp/>respectively.</highlight></codeline>
<codeline><highlight class="normal">Then<sp/>you<sp/>would<sp/>run<sp/>the<sp/>same<sp/>`foo_test`<sp/>on<sp/>each<sp/>machine.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test<sp/>reserves<sp/>the<sp/>right<sp/>to<sp/>change<sp/>how<sp/>the<sp/>work<sp/>is<sp/>distributed</highlight></codeline>
<codeline><highlight class="normal">across<sp/>the<sp/>shards,<sp/>but<sp/>here&apos;s<sp/>one<sp/>possible<sp/>scenario:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Machine<sp/>#0<sp/>runs<sp/>`A.V`<sp/>and<sp/>`B.X`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Machine<sp/>#1<sp/>runs<sp/>`A.W`<sp/>and<sp/>`B.Y`.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Machine<sp/>#2<sp/>runs<sp/>`B.Z`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Availability:_<sp/>Linux,<sp/>Windows,<sp/>Mac;<sp/>since<sp/>version<sp/>1.3.0.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Fusing<sp/>Google<sp/>Test<sp/>Source<sp/>Files<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>Test&apos;s<sp/>implementation<sp/>consists<sp/>of<sp/>~30<sp/>files<sp/>(excluding<sp/>its<sp/>own</highlight></codeline>
<codeline><highlight class="normal">tests).<sp/><sp/>Sometimes<sp/>you<sp/>may<sp/>want<sp/>them<sp/>to<sp/>be<sp/>packaged<sp/>up<sp/>in<sp/>two<sp/>files<sp/>(a</highlight></codeline>
<codeline><highlight class="normal">`.h`<sp/>and<sp/>a<sp/>`.cc`)<sp/>instead,<sp/>such<sp/>that<sp/>you<sp/>can<sp/>easily<sp/>copy<sp/>them<sp/>to<sp/>a<sp/>new</highlight></codeline>
<codeline><highlight class="normal">machine<sp/>and<sp/>start<sp/>hacking<sp/>there.<sp/><sp/>For<sp/>this<sp/>we<sp/>provide<sp/>an<sp/>experimental</highlight></codeline>
<codeline><highlight class="normal">Python<sp/>script<sp/>`fuse_gtest_files.py`<sp/>in<sp/>the<sp/>`scripts/`<sp/>directory<sp/>(since<sp/>release<sp/>1.3.0).</highlight></codeline>
<codeline><highlight class="normal">Assuming<sp/>you<sp/>have<sp/>Python<sp/>2.4<sp/>or<sp/>above<sp/>installed<sp/>on<sp/>your<sp/>machine,<sp/>just</highlight></codeline>
<codeline><highlight class="normal">go<sp/>to<sp/>that<sp/>directory<sp/>and<sp/>run</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">python<sp/>fuse_gtest_files.py<sp/>OUTPUT_DIR</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">and<sp/>you<sp/>should<sp/>see<sp/>an<sp/>`OUTPUT_DIR`<sp/>directory<sp/>being<sp/>created<sp/>with<sp/>files</highlight></codeline>
<codeline><highlight class="normal">`gtest/gtest.h`<sp/>and<sp/>`gtest/gtest-all.cc`<sp/>in<sp/>it.<sp/><sp/>These<sp/>files<sp/>contain</highlight></codeline>
<codeline><highlight class="normal">everything<sp/>you<sp/>need<sp/>to<sp/>use<sp/>Google<sp/>Test.<sp/><sp/>Just<sp/>copy<sp/>them<sp/>to<sp/>anywhere</highlight></codeline>
<codeline><highlight class="normal">you<sp/>want<sp/>and<sp/>you<sp/>are<sp/>ready<sp/>to<sp/>write<sp/>tests.<sp/><sp/>You<sp/>can<sp/>use<sp/>the</highlight></codeline>
<codeline><highlight class="normal">[scrpts/test/Makefile](../scripts/test/Makefile)</highlight></codeline>
<codeline><highlight class="normal">file<sp/>as<sp/>an<sp/>example<sp/>on<sp/>how<sp/>to<sp/>compile<sp/>your<sp/>tests<sp/>against<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Where<sp/>to<sp/>Go<sp/>from<sp/>Here<sp/>#</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Congratulations!<sp/>You&apos;ve<sp/>now<sp/>learned<sp/>more<sp/>advanced<sp/>Google<sp/>Test<sp/>tools<sp/>and<sp/>are</highlight></codeline>
<codeline><highlight class="normal">ready<sp/>to<sp/>tackle<sp/>more<sp/>complex<sp/>testing<sp/>tasks.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>dive<sp/>even<sp/>deeper,<sp/>you</highlight></codeline>
<codeline><highlight class="normal">can<sp/>read<sp/>the<sp/>[FAQ](V1_5_FAQ.md).</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googletest/docs/V1_5_AdvancedGuide.md"/>
  </compounddef>
</doxygen>
