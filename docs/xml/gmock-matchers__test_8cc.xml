<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-matchers__test_8cc" kind="file" language="C++">
    <compoundname>gmock-matchers_test.cc</compoundname>
    <includes refid="gmock-matchers_8h" local="yes">gmock/gmock-matchers.h</includes>
    <includes refid="gmock-more-matchers_8h" local="yes">gmock/gmock-more-matchers.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">deque</includes>
    <includes local="no">functional</includes>
    <includes local="no">iostream</includes>
    <includes local="no">iterator</includes>
    <includes local="no">limits</includes>
    <includes local="no">list</includes>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="2090">
        <label>sys/stat.h</label>
      </node>
      <node id="2127">
        <label>list</label>
      </node>
      <node id="2108">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="2085" relation="include">
        </childnode>
      </node>
      <node id="2126">
        <label>functional</label>
      </node>
      <node id="2102">
        <label>iomanip</label>
      </node>
      <node id="2071">
        <label>limits</label>
      </node>
      <node id="2091">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="2081">
        <label>assert.h</label>
      </node>
      <node id="2070">
        <label>iterator</label>
      </node>
      <node id="2101">
        <label>float.h</label>
      </node>
      <node id="2077">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="2078" relation="include">
        </childnode>
        <childnode refid="2072" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2079" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
      </node>
      <node id="2138">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="2069" relation="include">
        </childnode>
        <childnode refid="2133" relation="include">
        </childnode>
      </node>
      <node id="2116">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="2082">
        <label>stdlib.h</label>
      </node>
      <node id="2106">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
      </node>
      <node id="2117">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="2118" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
      </node>
      <node id="2123">
        <label>gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="2070" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2067" relation="include">
        </childnode>
      </node>
      <node id="2130">
        <label>errno.h</label>
      </node>
      <node id="2121">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="2135">
        <label>gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="2136" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
      </node>
      <node id="2128">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="2129" relation="include">
        </childnode>
        <childnode refid="2131" relation="include">
        </childnode>
        <childnode refid="2133" relation="include">
        </childnode>
        <childnode refid="2135" relation="include">
        </childnode>
        <childnode refid="2137" relation="include">
        </childnode>
        <childnode refid="2123" relation="include">
        </childnode>
        <childnode refid="2067" relation="include">
        </childnode>
        <childnode refid="2138" relation="include">
        </childnode>
        <childnode refid="2122" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
      </node>
      <node id="2074">
        <label>string</label>
      </node>
      <node id="2103">
        <label>map</label>
      </node>
      <node id="2098">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="2115">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="2112" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
      </node>
      <node id="2087">
        <label>stddef.h</label>
      </node>
      <node id="2120">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="2072">
        <label>ostream</label>
      </node>
      <node id="2092">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="2132">
        <label>limits.h</label>
      </node>
      <node id="2133">
        <label>gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="2129" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2134" relation="include">
        </childnode>
      </node>
      <node id="2066">
        <label>vendor/googletest/googlemock/test/gmock-matchers_test.cc</label>
        <link refid="gmock-matchers__test_8cc"/>
        <childnode refid="2067" relation="include">
        </childnode>
        <childnode refid="2122" relation="include">
        </childnode>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2124" relation="include">
        </childnode>
        <childnode refid="2125" relation="include">
        </childnode>
        <childnode refid="2126" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2070" relation="include">
        </childnode>
        <childnode refid="2071" relation="include">
        </childnode>
        <childnode refid="2127" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2128" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
        <childnode refid="2139" relation="include">
        </childnode>
      </node>
      <node id="2109">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="2110" relation="include">
        </childnode>
      </node>
      <node id="2089">
        <label>sys/types.h</label>
      </node>
      <node id="2088">
        <label>string.h</label>
      </node>
      <node id="2129">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="2130" relation="include">
        </childnode>
        <childnode refid="2069" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
      </node>
      <node id="2096">
        <label>typeinfo</label>
      </node>
      <node id="2080">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="2081" relation="include">
        </childnode>
        <childnode refid="2082" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2084" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2098" relation="include">
        </childnode>
      </node>
      <node id="2093">
        <label>unistd.h</label>
      </node>
      <node id="2076">
        <label>vector</label>
      </node>
      <node id="2114">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="2105">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="2071" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
      </node>
      <node id="2075">
        <label>utility</label>
      </node>
      <node id="2136">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2129" relation="include">
        </childnode>
        <childnode refid="2131" relation="include">
        </childnode>
        <childnode refid="2067" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
      </node>
      <node id="2073">
        <label>sstream</label>
      </node>
      <node id="2084">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="2082" relation="include">
        </childnode>
        <childnode refid="2081" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
      </node>
      <node id="2067">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="2068" relation="include">
        </childnode>
        <childnode refid="2069" relation="include">
        </childnode>
        <childnode refid="2070" relation="include">
        </childnode>
        <childnode refid="2071" relation="include">
        </childnode>
        <childnode refid="2072" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2077" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
        <childnode refid="2121" relation="include">
        </childnode>
      </node>
      <node id="2124">
        <label>time.h</label>
      </node>
      <node id="2068">
        <label>math.h</label>
      </node>
      <node id="2137">
        <label>gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="2136" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
      </node>
      <node id="2118">
        <label>iosfwd</label>
      </node>
      <node id="2131">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="2132" relation="include">
        </childnode>
        <childnode refid="2072" relation="include">
        </childnode>
        <childnode refid="2080" relation="include">
        </childnode>
        <childnode refid="2099" relation="include">
        </childnode>
      </node>
      <node id="2107">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="2106" relation="include">
        </childnode>
      </node>
      <node id="2083">
        <label>iostream</label>
      </node>
      <node id="2099">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="2071" relation="include">
        </childnode>
        <childnode refid="2072" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2109" relation="include">
        </childnode>
        <childnode refid="2105" relation="include">
        </childnode>
        <childnode refid="2111" relation="include">
        </childnode>
        <childnode refid="2113" relation="include">
        </childnode>
        <childnode refid="2116" relation="include">
        </childnode>
        <childnode refid="2117" relation="include">
        </childnode>
        <childnode refid="2119" relation="include">
        </childnode>
        <childnode refid="2120" relation="include">
        </childnode>
      </node>
      <node id="2097">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="2075" relation="include">
        </childnode>
      </node>
      <node id="2094">
        <label>strings.h</label>
      </node>
      <node id="2125">
        <label>deque</label>
      </node>
      <node id="2086">
        <label>ctype.h</label>
      </node>
      <node id="2119">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
      </node>
      <node id="2085">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="2086" relation="include">
        </childnode>
        <childnode refid="2087" relation="include">
        </childnode>
        <childnode refid="2082" relation="include">
        </childnode>
        <childnode refid="2078" relation="include">
        </childnode>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2089" relation="include">
        </childnode>
        <childnode refid="2090" relation="include">
        </childnode>
        <childnode refid="2069" relation="include">
        </childnode>
        <childnode refid="2083" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2091" relation="include">
        </childnode>
        <childnode refid="2092" relation="include">
        </childnode>
        <childnode refid="2093" relation="include">
        </childnode>
        <childnode refid="2094" relation="include">
        </childnode>
        <childnode refid="2095" relation="include">
        </childnode>
        <childnode refid="2096" relation="include">
        </childnode>
        <childnode refid="2097" relation="include">
        </childnode>
      </node>
      <node id="2100">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2086" relation="include">
        </childnode>
        <childnode refid="2101" relation="include">
        </childnode>
        <childnode refid="2088" relation="include">
        </childnode>
        <childnode refid="2102" relation="include">
        </childnode>
        <childnode refid="2071" relation="include">
        </childnode>
        <childnode refid="2103" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2105" relation="include">
        </childnode>
        <childnode refid="2106" relation="include">
        </childnode>
        <childnode refid="2107" relation="include">
        </childnode>
        <childnode refid="2108" relation="include">
        </childnode>
      </node>
      <node id="2122">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="2123" relation="include">
        </childnode>
      </node>
      <node id="2134">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="internal_2custom_2gmock-generated-actions_8h_source"/>
      </node>
      <node id="2112">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="2086" relation="include">
        </childnode>
        <childnode refid="2070" relation="include">
        </childnode>
        <childnode refid="2104" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2084" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2113" relation="include">
        </childnode>
      </node>
      <node id="2079">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="2080" relation="include">
        </childnode>
      </node>
      <node id="2104">
        <label>set</label>
      </node>
      <node id="2111">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2112" relation="include">
        </childnode>
        <childnode refid="2115" relation="include">
        </childnode>
      </node>
      <node id="2069">
        <label>algorithm</label>
      </node>
      <node id="2095">
        <label>regex.h</label>
      </node>
      <node id="2139">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="2099" relation="include">
        </childnode>
      </node>
      <node id="2078">
        <label>stdio.h</label>
      </node>
      <node id="2110">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2078" relation="include">
        </childnode>
      </node>
      <node id="2113">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="2072" relation="include">
        </childnode>
        <childnode refid="2073" relation="include">
        </childnode>
        <childnode refid="2074" relation="include">
        </childnode>
        <childnode refid="2075" relation="include">
        </childnode>
        <childnode refid="2076" relation="include">
        </childnode>
        <childnode refid="2085" relation="include">
        </childnode>
        <childnode refid="2100" relation="include">
        </childnode>
        <childnode refid="2114" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher" prot="public">testing::gmock_matchers_test::GreaterThanMatcher</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl" prot="public">testing::gmock_matchers_test::EvenMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_new_even_matcher_impl" prot="public">testing::gmock_matchers_test::NewEvenMatcherImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_references_bar_or_is_zero_impl" prot="public">testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_polymorphic_is_even_impl" prot="public">testing::gmock_matchers_test::PolymorphicIsEvenImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_int_value" prot="public">testing::gmock_matchers_test::IntValue</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" prot="public">testing::gmock_matchers_test::ConvertibleFromAny</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" prot="public">testing::gmock_matchers_test::IntReferenceWrapper</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_base" prot="public">testing::gmock_matchers_test::Base</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_derived" prot="public">testing::gmock_matchers_test::Derived</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_other_derived" prot="public">testing::gmock_matchers_test::OtherDerived</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" prot="public">testing::gmock_matchers_test::Unprintable</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_type" prot="public">testing::gmock_matchers_test::Type</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_is_greater_than" prot="public">testing::gmock_matchers_test::IsGreaterThan</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" prot="public">testing::gmock_matchers_test::ConvertibleToBool</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_all_args_helper" prot="public">testing::gmock_matchers_test::AllArgsHelper</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" prot="public">testing::gmock_matchers_test::FloatingPointTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" prot="public">testing::gmock_matchers_test::FloatingPointNearTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" prot="public">testing::gmock_matchers_test::ConstPropagatingPtr</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" prot="public">testing::gmock_matchers_test::Uncopyable</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" prot="public">testing::gmock_matchers_test::AStruct</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_derived_struct" prot="public">testing::gmock_matchers_test::DerivedStruct</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_a_class" prot="public">testing::gmock_matchers_test::AClass</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_derived_class" prot="public">testing::gmock_matchers_test::DerivedClass</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_functor" prot="public">testing::gmock_matchers_test::Functor</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_polymorphic_functor" prot="public">testing::gmock_matchers_test::PolymorphicFunctor</innerclass>
    <innerclass refid="structtesting_1_1gmock__matchers__test_1_1_referencing_functor" prot="public">testing::gmock_matchers_test::ReferencingFunctor</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" prot="public">testing::gmock_matchers_test::DivisibleByImpl</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" prot="public">testing::gmock_matchers_test::NotCopyable</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" prot="public">testing::gmock_matchers_test::Streamlike</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_streamlike_1_1_const_iter" prot="private">testing::gmock_matchers_test::Streamlike::ConstIter</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_streamlike_1_1_const_iter_1_1_post_incr_proxy" prot="public">testing::gmock_matchers_test::Streamlike::ConstIter::PostIncrProxy</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" prot="public">testing::gmock_matchers_test::UnorderedElementsAreTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_backtracking_b_p_m_test" prot="public">testing::gmock_matchers_test::BacktrackingBPMTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" prot="public">testing::gmock_matchers_test::BipartiteTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" prot="public">testing::gmock_matchers_test::BipartiteNonSquareTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" prot="public">testing::gmock_matchers_test::BipartiteRandomTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__matchers__test_1_1_is_half_of_matcher" prot="public">testing::gmock_matchers_test::IsHalfOfMatcher</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test">testing::gmock_matchers_test</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1a4e49839887adcdf7fe848238b2a1f4d4" prot="private" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t kUnused</definition>
        <argsstring></argsstring>
        <name>kUnused</name>
        <initializer>= static_cast&lt;size_t&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5034" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1ad88eea96f82ba29e252f3e07cdb84378" prot="private" static="no" mutable="no">
        <type>const Graph *</type>
        <definition>const Graph* graph_</definition>
        <argsstring></argsstring>
        <name>graph_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5075" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1a08a6ed0fb0d954b75bc716d7e1027d39" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; lhs_used_</definition>
        <argsstring></argsstring>
        <name>lhs_used_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5076" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5076" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1a92a5f54fbf6a5d2eab027a03744756f3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; rhs_used_</definition>
        <argsstring></argsstring>
        <name>rhs_used_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5077" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5077" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1aab3de6f08394dc65ac9dba5b3bcc5a44" prot="private" static="no" mutable="no">
        <type>ElementMatcherPairs</type>
        <definition>ElementMatcherPairs matches_</definition>
        <argsstring></argsstring>
        <name>matches_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5078" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-matchers__test_8cc_1af7014f387b012eaf69559acac016b3f4" prot="private" static="no" mutable="no">
        <type>ElementMatcherPairs</type>
        <definition>ElementMatcherPairs best_so_far_</definition>
        <argsstring></argsstring>
        <name>best_so_far_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc" line="5079" column="1" bodyfile="vendor/googletest/googlemock/test/gmock-matchers_test.cc" bodystart="5079" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>some<sp/>commonly<sp/>used<sp/>argument<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-more-matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;deque&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_FORWARD_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;forward_list&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>JoinAsTuple(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Strings&amp;<sp/>fields);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_matchers_test<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::greater;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::less;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::list;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::make_pair;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::map;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::multimap;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::multiset;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::ostream;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::set;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::stringstream;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::A;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::AllArgs;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::AllOf;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::An;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::AnyOf;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ByRef;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ContainsRegex;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::DoubleEq;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::DoubleNear;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::EndsWith;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Eq;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ExplainMatchResult;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Field;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::FloatEq;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::FloatNear;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ge;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::HasSubstr;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::IsEmpty;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::IsNull;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Key;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Le;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Lt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::MakeMatcher;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::MakePolymorphicMatcher;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">testing::MatchResultListener</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">testing::Matcher</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::MatcherCast;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher_interface" kindref="compound">testing::MatcherInterface</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Matches;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::MatchesRegex;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::NanSensitiveDoubleEq;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::NanSensitiveDoubleNear;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::NanSensitiveFloatEq;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::NanSensitiveFloatNear;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ne;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Not;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::NotNull;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Pair;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Pointee;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Pointwise;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">testing::PolymorphicMatcher</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Property;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ref;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ResultOf;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::SizeIs;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StartsWith;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StrCaseEq;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StrCaseNe;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StrEq;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StrNe;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">testing::StringMatchResultListener</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Truly;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::TypedEq;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::UnorderedPointwise;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Value;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::WhenSorted;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::WhenSortedBy;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::_;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::get;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_dummy_match_result_listener" kindref="compound">testing::internal::DummyMatchResultListener</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::ElementMatcherPair;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::ElementMatcherPairs;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::ExplainMatchFailureTupleTo;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">testing::internal::FloatingEqMatcher</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::FormatMatcherDescription;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::IsReadableTypeName;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::JoinAsTuple;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">testing::internal::linked_ptr</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_match_matrix" kindref="compound">testing::internal::MatchMatrix</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_r_e" kindref="compound">testing::internal::RE</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1scoped__ptr" kindref="compound">testing::internal::scoped_ptr</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_stream_match_result_listener" kindref="compound">testing::internal::StreamMatchResultListener</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::Strings;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">testing::internal::linked_ptr</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1scoped__ptr" kindref="compound">testing::internal::scoped_ptr</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::string;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::make_tuple;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::tuple;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>ExplainMatchResultTo().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher" kindref="compound">GreaterThanMatcher</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher_interface" kindref="compound">MatcherInterface</ref>&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher" kindref="compound">GreaterThanMatcher</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs)<sp/>:<sp/>rhs_(rhs)<sp/>{}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref>*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>lhs<sp/>-<sp/>rhs_;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>diff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>more<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diff<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>the<sp/>same<sp/>as<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>-diff<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>less<sp/>than<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>&gt;<sp/>rhs_;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs_;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>GreaterThan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher" kindref="compound">GreaterThanMatcher</ref>(n));</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>OfType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>type_name)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;<sp/>(of<sp/>type<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>type_name<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>description<sp/>of<sp/>the<sp/>given<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Describe(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;T&gt;</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>m.DescribeTo(&amp;ss);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>description<sp/>of<sp/>the<sp/>negation<sp/>of<sp/>the<sp/>given<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>DescribeNegation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;T&gt;</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>m.DescribeNegationTo(&amp;ss);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>reason<sp/>why<sp/>x<sp/>matches,<sp/>or<sp/>doesn&apos;t<sp/>match,<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Explain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatcherType&amp;<sp/>m,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>ExplainMatchResult(m,<sp/>x,<sp/>&amp;listener);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listener.str();</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">TEST(MatchResultListenerTest,<sp/>StreamingWorks)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>5;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;hi5&quot;</highlight><highlight class="normal">,<sp/>listener.str());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>listener.Clear();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>listener.str());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>listener<sp/>&lt;&lt;<sp/>42;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">,<sp/>listener.str());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streaming<sp/>shouldn&apos;t<sp/>crash<sp/>when<sp/>the<sp/>underlying<sp/>ostream<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_dummy_match_result_listener" kindref="compound">DummyMatchResultListener</ref><sp/>dummy;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>dummy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>5;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">TEST(MatchResultListenerTest,<sp/>CanAccessUnderlyingStream)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<ref refid="classtesting_1_1internal_1_1_dummy_match_result_listener" kindref="compound">DummyMatchResultListener</ref>().stream()<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<ref refid="classtesting_1_1internal_1_1_stream_match_result_listener" kindref="compound">StreamMatchResultListener</ref>(NULL).stream()<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;std::cout,<sp/><ref refid="classtesting_1_1internal_1_1_stream_match_result_listener" kindref="compound">StreamMatchResultListener</ref>(&amp;std::cout).stream());</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST(MatchResultListenerTest,<sp/>IsInterestedWorks)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref>().IsInterested());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(<ref refid="classtesting_1_1internal_1_1_stream_match_result_listener" kindref="compound">StreamMatchResultListener</ref>(&amp;std::cout).IsInterested());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(<ref refid="classtesting_1_1internal_1_1_dummy_match_result_listener" kindref="compound">DummyMatchResultListener</ref>().IsInterested());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(<ref refid="classtesting_1_1internal_1_1_stream_match_result_listener" kindref="compound">StreamMatchResultListener</ref>(NULL).IsInterested());</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>the<sp/>MatcherInterface&lt;T&gt;<sp/>interface<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl" kindref="compound">EvenMatcherImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher_interface" kindref="compound">MatcherInterface</ref>&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref>*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>%<sp/>2<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>even<sp/>number&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>deliberately<sp/>don&apos;t<sp/>define<sp/>DescribeNegationTo()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ExplainMatchResultTo()<sp/>here,<sp/>to<sp/>make<sp/>sure<sp/>the<sp/>definition<sp/>of<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>methods<sp/>is<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">};</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>the<sp/>MatcherInterface<sp/>API<sp/>doesn&apos;t<sp/>change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">TEST(MatcherInterfaceTest,<sp/>CanBeImplementedUsingPublishedAPI)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl" kindref="compound">EvenMatcherImpl</ref><sp/>m;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>implementing<sp/>a<sp/>monomorphic<sp/>matcher<sp/>using<sp/>MatchAndExplain().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="classtesting_1_1gmock__matchers__test_1_1_new_even_matcher_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_new_even_matcher_impl" kindref="compound">NewEvenMatcherImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher_interface" kindref="compound">MatcherInterface</ref>&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref>*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>x<sp/>%<sp/>2<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>a<sp/>listener<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;value<sp/>%<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener-&gt;stream()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>a<sp/>listener&apos;s<sp/>underlying<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener-&gt;stream()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(x<sp/>%<sp/>2);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>even<sp/>number&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">TEST(MatcherInterfaceTest,<sp/>CanBeImplementedUsingNewAPI)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>MakeMatcher(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_new_even_matcher_impl" kindref="compound">NewEvenMatcherImpl</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(3));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;value<sp/>%<sp/>2<sp/>==<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>2));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;value<sp/>%<sp/>2<sp/>==<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>3));</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>default-constructing<sp/>a<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">TEST(MatcherTest,<sp/>CanBeDefaultConstructed)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Matcher&lt;T&gt;<sp/>can<sp/>be<sp/>constructed<sp/>from<sp/>a<sp/>MatcherInterface&lt;T&gt;*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">TEST(MatcherTest,<sp/>CanBeConstructedFromMatcherInterface)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher_interface" kindref="compound">MatcherInterface&lt;int&gt;</ref>*<sp/>impl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl" kindref="compound">EvenMatcherImpl</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m(impl);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(4));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(5));</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>value<sp/>can<sp/>be<sp/>used<sp/>in<sp/>place<sp/>of<sp/>Eq(value).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">TEST(MatcherTest,<sp/>CanBeImplicitlyConstructedFromValue)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(5));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(6));</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NULL<sp/>can<sp/>be<sp/>used<sp/>in<sp/>place<sp/>of<sp/>Eq(NULL).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">TEST(MatcherTest,<sp/>CanBeImplicitlyConstructedFromNULL)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(&amp;n));</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>matchers<sp/>are<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">TEST(MatcherTest,<sp/>IsCopyable)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;bool&gt;</ref><sp/>m1<sp/>=<sp/>Eq(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>assignment<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>m1<sp/>=<sp/>Eq(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Matcher&lt;T&gt;::DescribeTo()<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatcherInterface&lt;T&gt;::DescribeTo().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">TEST(MatcherTest,<sp/>CanDescribeItself)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>even<sp/>number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(<ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl" kindref="compound">EvenMatcherImpl</ref>)));</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Matcher&lt;T&gt;::MatchAndExplain().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">TEST(MatcherTest,<sp/>MatchAndExplain)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>GreaterThan(0);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener1;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.MatchAndExplain(42,<sp/>&amp;listener1));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>42<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,<sp/>listener1.str());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener2;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.MatchAndExplain(-9,<sp/>&amp;listener2));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>9<sp/>less<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,<sp/>listener2.str());</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>C-string<sp/>literal<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matcher&lt;string&gt;<sp/>or<sp/>Matcher&lt;const<sp/>string&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">TEST(StringMatcherTest,<sp/>CanBeImplicitlyConstructedFromCStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>string<sp/>object<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matcher&lt;string&gt;<sp/>or<sp/>Matcher&lt;const<sp/>string&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal">TEST(StringMatcherTest,<sp/>CanBeImplicitlyConstructedFromString)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m1<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STRING_PIECE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>C-string<sp/>literal<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matcher&lt;StringPiece&gt;<sp/>or<sp/>Matcher&lt;const<sp/>StringPiece&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">TEST(StringPieceMatcherTest,<sp/>CanBeImplicitlyConstructedFromCStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;StringPiece&gt;</ref><sp/>m1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="stringliteral">&quot;dogs&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const StringPiece&amp;&gt;</ref><sp/>m2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;dogs&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>string<sp/>object<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matcher&lt;StringPiece&gt;<sp/>or<sp/>Matcher&lt;const<sp/>StringPiece&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">TEST(StringPieceMatcherTest,<sp/>CanBeImplicitlyConstructedFromString)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;StringPiece&gt;</ref><sp/>m1<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="stringliteral">&quot;dogs&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const StringPiece&amp;&gt;</ref><sp/>m2<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;dogs&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>StringPiece<sp/>object<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matcher&lt;StringPiece&gt;<sp/>or<sp/>Matcher&lt;const<sp/>StringPiece&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">TEST(StringPieceMatcherTest,<sp/>CanBeImplicitlyConstructedFromStringPiece)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;StringPiece&gt;</ref><sp/>m1<sp/>=<sp/>StringPiece(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="stringliteral">&quot;dogs&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const StringPiece&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StringPiece(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;cats&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;dogs&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STRING_PIECE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MakeMatcher()<sp/>constructs<sp/>a<sp/>Matcher&lt;T&gt;<sp/>from<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MatcherInterface*<sp/>without<sp/>requiring<sp/>the<sp/>user<sp/>to<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>write<sp/>the<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">TEST(MakeMatcherTest,<sp/>ConstructsMatcherFromMatcherInterface)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher_interface" kindref="compound">MatcherInterface&lt;int&gt;</ref>*<sp/>dummy_impl<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>MakeMatcher(dummy_impl);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MakePolymorphicMatcher()<sp/>can<sp/>construct<sp/>a<sp/>polymorphic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matcher<sp/>from<sp/>its<sp/>implementation<sp/>using<sp/>the<sp/>old<sp/>API.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g_bar<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="440" refid="classtesting_1_1gmock__matchers__test_1_1_references_bar_or_is_zero_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_references_bar_or_is_zero_impl" kindref="compound">ReferencesBarOrIsZeroImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref>*<sp/></highlight><highlight class="comment">/*<sp/>listener<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>&amp;x;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>==<sp/>&amp;g_bar<sp/>||<sp/>x<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;g_bar<sp/>or<sp/>zero&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>reference<sp/>g_bar<sp/>and<sp/>is<sp/>not<sp/>zero&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal">};</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>verifies<sp/>that<sp/>MakePolymorphicMatcher()<sp/>returns<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>PolymorphicMatcher&lt;T&gt;<sp/>where<sp/>T<sp/>is<sp/>the<sp/>argument&apos;s<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher&lt;ReferencesBarOrIsZeroImpl&gt;</ref><sp/>ReferencesBarOrIsZero()<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(<ref refid="classtesting_1_1gmock__matchers__test_1_1_references_bar_or_is_zero_impl" kindref="compound">ReferencesBarOrIsZeroImpl</ref>());</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">TEST(MakePolymorphicMatcherTest,<sp/>ConstructsMatcherUsingOldAPI)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>polymorphic<sp/>matcher<sp/>to<sp/>match<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m1<sp/>=<sp/>ReferencesBarOrIsZero();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(0));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>identity<sp/>of<sp/>a<sp/>by-reference<sp/>argument<sp/>is<sp/>preserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(g_bar));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(1));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;g_bar<sp/>or<sp/>zero&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>polymorphic<sp/>matcher<sp/>to<sp/>match<sp/>a<sp/>value<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m2<sp/>=<sp/>ReferencesBarOrIsZero();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(0.0));</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(0.1));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;g_bar<sp/>or<sp/>zero&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>implementing<sp/>a<sp/>polymorphic<sp/>matcher<sp/>using<sp/>MatchAndExplain().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="classtesting_1_1gmock__matchers__test_1_1_polymorphic_is_even_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_polymorphic_is_even_impl" kindref="compound">PolymorphicIsEvenImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>odd&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x,<sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref>*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>the<sp/>listener<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listener-&gt;stream()<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>we<sp/>can<sp/>stream<sp/>to<sp/>the<sp/>listener&apos;s<sp/>underlying<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener-&gt;stream()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>==<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(x<sp/>%<sp/>2);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(x<sp/>%<sp/>2)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher&lt;PolymorphicIsEvenImpl&gt;</ref><sp/>PolymorphicIsEven()<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(<ref refid="classtesting_1_1gmock__matchers__test_1_1_polymorphic_is_even_impl" kindref="compound">PolymorphicIsEvenImpl</ref>());</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">TEST(MakePolymorphicMatcherTest,<sp/>ConstructsMatcherUsingNewAPI)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>PolymorphicIsEven()<sp/>as<sp/>a<sp/>Matcher&lt;int&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>PolymorphicIsEven();</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(42));</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(43));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>not_m1<sp/>=<sp/>Not(m1);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>odd&quot;</highlight><highlight class="normal">,<sp/>Describe(not_m1));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>42));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>PolymorphicIsEven()<sp/>as<sp/>a<sp/>Matcher&lt;char&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref><sp/>m2<sp/>=<sp/>PolymorphicIsEven();</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&apos;\x42&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&apos;\x43&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref><sp/>not_m2<sp/>=<sp/>Not(m2);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>odd&quot;</highlight><highlight class="normal">,<sp/>Describe(not_m2));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/></highlight><highlight class="stringliteral">&apos;\x42&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>polymorphic<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromPolymorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>MatcherCast&lt;int&gt;(Eq(5));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(5));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(6));</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>casting<sp/>matchers<sp/>between<sp/>compatible<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="classtesting_1_1gmock__matchers__test_1_1_int_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_int_value" kindref="compound">IntValue</ref><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>int<sp/>can<sp/>be<sp/>statically<sp/>(although<sp/>not<sp/>implicitly)<sp/>cast<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IntValue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_int_value" kindref="compound">IntValue</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>casting<sp/>matchers<sp/>between<sp/>compatible<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPositiveIntValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_int_value" kindref="compound">IntValue</ref>&amp;<sp/><ref refid="namespacefoo" kindref="compound">foo</ref>)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>foo.value()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;U&gt;<sp/>where<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>statically<sp/>converted<sp/>to<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromCompatibleType)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>Eq(2.0);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m2<sp/>=<sp/>MatcherCast&lt;int&gt;(m1);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(2));</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(3));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;IntValue&gt;</ref><sp/>m3<sp/>=<sp/>Truly(IsPositiveIntValue);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m4<sp/>=<sp/>MatcherCast&lt;int&gt;(m3);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>following,<sp/>the<sp/>arguments<sp/>1<sp/>and<sp/>0<sp/>are<sp/>statically<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>IntValue<sp/>objects,<sp/>and<sp/>then<sp/>tested<sp/>by<sp/>the<sp/>IsPositiveIntValue()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m4.Matches(1));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m4.Matches(0));</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;const<sp/>T&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromConstReferenceToNonReference)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m2<sp/>=<sp/>MatcherCast&lt;int&gt;(m1);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(0));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(1));</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;T&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromReferenceToNonReference)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m2<sp/>=<sp/>MatcherCast&lt;int&gt;(m1);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(0));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(1));</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;const<sp/>T&amp;&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromNonReferenceToConstReference)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>MatcherCast&lt;const<sp/>int&amp;&gt;(m1);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(0));</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(1));</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;T&amp;&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromNonReferenceToReference)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>MatcherCast&lt;int&amp;&gt;(m1);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(n));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(n));</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromSameType)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m2<sp/>=<sp/>MatcherCast&lt;int&gt;(m1);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(0));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(1));</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implicitly<sp/>convertible<sp/>from<sp/>any<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/></highlight><highlight class="comment">/*a_value*/</highlight><highlight class="normal">)<sp/>:<sp/>value(-1)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD_FAILURE()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Conversion<sp/>constructor<sp/>called&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="620"><highlight class="normal">};</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.value<sp/>==<sp/>b.value;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">ostream&amp;<sp/>operator&lt;&lt;(ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>&amp;<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>a.value;</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">TEST(MatcherCastTest,<sp/>ConversionConstructorIsUsed)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;ConvertibleFromAny&gt;</ref><sp/>m<sp/>=<sp/>MatcherCast&lt;ConvertibleFromAny&gt;(1);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(1)));</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(2)));</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal">TEST(MatcherCastTest,<sp/>FromConvertibleFromAny)<sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;ConvertibleFromAny&gt;</ref><sp/>m<sp/>=</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MatcherCast&lt;ConvertibleFromAny&gt;(Eq(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(1)));</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(1)));</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(2)));</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" kindref="compound">IntReferenceWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" kindref="compound">IntReferenceWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>a_value)<sp/>:<sp/>value(&amp;a_value)<sp/>{}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>value;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" kindref="compound">IntReferenceWrapper</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_int_reference_wrapper" kindref="compound">IntReferenceWrapper</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.value<sp/>==<sp/>b.value;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">TEST(MatcherCastTest,<sp/>ValueIsNotCopied)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;IntReferenceWrapper&gt;</ref><sp/>m<sp/>=<sp/>MatcherCast&lt;IntReferenceWrapper&gt;(n);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>matcher<sp/>holds<sp/>a<sp/>reference<sp/>to<sp/>n,<sp/>not<sp/>to<sp/>its<sp/>temporary<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n));</highlight></codeline>
<codeline lineno="657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="classtesting_1_1gmock__matchers__test_1_1_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal">};</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="classtesting_1_1gmock__matchers__test_1_1_derived" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref>()<sp/>:<sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="671"><highlight class="normal">};</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="classtesting_1_1gmock__matchers__test_1_1_other_derived" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_other_derived" kindref="compound">OtherDerived</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref><sp/>{};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SafeMatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>polymorphic<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromPolymorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref><sp/>m2<sp/>=<sp/>SafeMatcherCast&lt;char&gt;(Eq(32));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SafeMatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;U&gt;<sp/>where</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>and<sp/>U<sp/>are<sp/>arithmetic<sp/>types<sp/>and<sp/>T<sp/>can<sp/>be<sp/>losslessly<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>U.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromLosslesslyConvertibleArithmeticType)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>DoubleEq(1.0);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m2<sp/>=<sp/>SafeMatcherCast&lt;float&gt;(m1);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(1.0f));</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(2.0f));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref><sp/>m3<sp/>=<sp/>SafeMatcherCast&lt;char&gt;(TypedEq&lt;int&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SafeMatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;U&gt;<sp/>where<sp/>T<sp/>and<sp/>U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>pointers<sp/>or<sp/>references<sp/>to<sp/>a<sp/>derived<sp/>and<sp/>a<sp/>base<sp/>class,<sp/>correspondingly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromBaseClass)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>d,<sp/>d2;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Base*&gt;</ref><sp/>m1<sp/>=<sp/>Eq(&amp;d);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Derived*&gt;</ref><sp/>m2<sp/>=<sp/>SafeMatcherCast&lt;Derived*&gt;(m1);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(&amp;d));</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(&amp;d2));</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Base&amp;&gt;</ref><sp/>m3<sp/>=<sp/>Ref(d);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Derived&amp;&gt;</ref><sp/>m4<sp/>=<sp/>SafeMatcherCast&lt;Derived&amp;&gt;(m3);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m4.Matches(d));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m4.Matches(d2));</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SafeMatcherCast&lt;T&amp;&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;const<sp/>T&amp;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromConstReferenceToReference)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m1<sp/>=<sp/>Ref(n);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>SafeMatcherCast&lt;int&amp;&gt;(m1);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(n));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(n1));</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>MatcherCast&lt;const<sp/>T&amp;&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromNonReferenceToConstReference)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>SafeMatcherCast&lt;const<sp/>int&amp;&gt;(m1);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(0));</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(1));</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SafeMatcherCast&lt;T&amp;&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromNonReferenceToReference)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>SafeMatcherCast&lt;int&amp;&gt;(m1);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(n));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(n));</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>SafeMatcherCast&lt;T&gt;(m)<sp/>works<sp/>when<sp/>m<sp/>is<sp/>a<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromSameType)<sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m2<sp/>=<sp/>SafeMatcherCast&lt;int&gt;(m1);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(0));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(1));</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>ConversionConstructorIsUsed)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;ConvertibleFromAny&gt;</ref><sp/>m<sp/>=<sp/>SafeMatcherCast&lt;ConvertibleFromAny&gt;(1);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(1)));</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(2)));</highlight></codeline>
<codeline lineno="751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>FromConvertibleFromAny)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;ConvertibleFromAny&gt;</ref><sp/>m<sp/>=</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SafeMatcherCast&lt;ConvertibleFromAny&gt;(Eq(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(1)));</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(1)));</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(<ref refid="structtesting_1_1gmock__matchers__test_1_1_convertible_from_any" kindref="compound">ConvertibleFromAny</ref>(2)));</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">TEST(SafeMatcherCastTest,<sp/>ValueIsNotCopied)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;IntReferenceWrapper&gt;</ref><sp/>m<sp/>=<sp/>SafeMatcherCast&lt;IntReferenceWrapper&gt;(n);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>that<sp/>the<sp/>matcher<sp/>holds<sp/>a<sp/>reference<sp/>to<sp/>n,<sp/>not<sp/>to<sp/>its<sp/>temporary<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n));</highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal">TEST(ExpectThat,<sp/>TakesLiterals)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1,<sp/>1);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>EXPECT_THAT(1.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">TEST(ExpectThat,<sp/>TakesFunctions)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Helper<sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Func()<sp/>{}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>void<sp/>(*func)()<sp/>=<sp/>Helper::Func;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>EXPECT_THAT(func,<sp/>Helper::Func);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>EXPECT_THAT(func,<sp/>&amp;Helper::Func);</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>A&lt;T&gt;()<sp/>matches<sp/>any<sp/>value<sp/>of<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal">TEST(ATest,<sp/>MatchesAnyValue)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>matcher<sp/>for<sp/>a<sp/>value<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>A&lt;double&gt;();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(91.43));</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(-15.32));</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>matcher<sp/>for<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>-6;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>A&lt;int&amp;&gt;();</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(a));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(b));</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal">TEST(ATest,<sp/>WorksForDerivedClass)<sp/>{</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref><sp/>base;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>derived;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;base,<sp/>A&lt;Base*&gt;());</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>shouldn&apos;t<sp/>compile:<sp/>EXPECT_THAT(&amp;base,<sp/>A&lt;Derived*&gt;());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;derived,<sp/>A&lt;Base*&gt;());</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;derived,<sp/>A&lt;Derived*&gt;());</highlight></codeline>
<codeline lineno="804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>A&lt;T&gt;()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal">TEST(ATest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>Describe(A&lt;bool&gt;()));</highlight></codeline>
<codeline lineno="809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>An&lt;T&gt;()<sp/>matches<sp/>any<sp/>value<sp/>of<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal">TEST(AnTest,<sp/>MatchesAnyValue)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>matcher<sp/>for<sp/>a<sp/>value<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>An&lt;int&gt;();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(9143));</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(-1532));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>a<sp/>matcher<sp/>for<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>-6;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>An&lt;int&amp;&gt;();</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(a));</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(b));</highlight></codeline>
<codeline lineno="824"><highlight class="normal">}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>An&lt;T&gt;()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">TEST(AnTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>Describe(An&lt;int&gt;()));</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>_<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>any<sp/>type<sp/>and<sp/>matches<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>of<sp/>that<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">TEST(UnderscoreTest,<sp/>MatchesAnyValue)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>_<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>a<sp/>value<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>_;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(123));</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(-242));</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>_<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const bool&amp;&gt;</ref><sp/>m2<sp/>=<sp/>_;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(a));</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(b));</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>_<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal">TEST(UnderscoreTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>_;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Eq(x)<sp/>matches<sp/>any<sp/>value<sp/>equal<sp/>to<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal">TEST(EqTest,<sp/>MatchesEqualValue)<sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2<sp/>C-strings<sp/>with<sp/>same<sp/>content<sp/>but<sp/>different<sp/>addresses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a1[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a2[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m1<sp/>=<sp/>Eq(a1);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(a1));</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(a2));</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Eq(v)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" kindref="compound">Unprintable</ref><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" kindref="compound">Unprintable</ref>()<sp/>:<sp/>c_(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c_;</highlight></codeline>
<codeline lineno="872"><highlight class="normal">};</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" kindref="compound">Unprintable</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>lhs<sp/>*/</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" kindref="compound">Unprintable</ref>&amp;<sp/></highlight><highlight class="comment">/*<sp/>rhs<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal">TEST(EqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Unprintable&gt;</ref><sp/>m<sp/>=<sp/>Eq(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unprintable" kindref="compound">Unprintable</ref>());</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>1-byte<sp/>object<sp/>&lt;61&gt;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Eq(v)<sp/>can<sp/>be<sp/>used<sp/>to<sp/>match<sp/>any<sp/>type<sp/>that<sp/>supports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparing<sp/>with<sp/>type<sp/>T,<sp/>where<sp/>T<sp/>is<sp/>v&apos;s<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">TEST(EqTest,<sp/>IsPolymorphic)<sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Eq(1);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(1));</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(2));</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref><sp/>m2<sp/>=<sp/>Eq(1);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="charliteral">&apos;\1&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>TypedEq&lt;T&gt;(v)<sp/>matches<sp/>values<sp/>of<sp/>type<sp/>T<sp/>that&apos;s<sp/>equal<sp/>to<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal">TEST(TypedEqTest,<sp/>ChecksEqualityForGivenType)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref><sp/>m1<sp/>=<sp/>TypedEq&lt;char&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m2<sp/>=<sp/>TypedEq&lt;int&gt;(6);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(6));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(7));</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>TypedEq(v)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal">TEST(TypedEqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(TypedEq&lt;int&gt;(2)));</highlight></codeline>
<codeline lineno="910"><highlight class="normal">}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>TypedEq&lt;T&gt;(v)<sp/>has<sp/>type<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type&lt;T&gt;::IsTypeOf(v)<sp/>compiles<sp/>iff<sp/>the<sp/>type<sp/>of<sp/>value<sp/>v<sp/>is<sp/>T,<sp/>where<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>&quot;bare&quot;<sp/>type<sp/>(i.e.<sp/>not<sp/>in<sp/>the<sp/>form<sp/>of<sp/>const<sp/>U<sp/>or<sp/>U&amp;).<sp/><sp/>If<sp/>v&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>not<sp/>T,<sp/>the<sp/>compiler<sp/>will<sp/>generate<sp/>a<sp/>message<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;undefined<sp/>referece&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="919" refid="structtesting_1_1gmock__matchers__test_1_1_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_type" kindref="compound">Type</ref><sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsTypeOf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/></highlight><highlight class="comment">/*<sp/>v<sp/>*/</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IsTypeOf(T2<sp/>v);</highlight></codeline>
<codeline lineno="924"><highlight class="normal">};</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">TEST(TypedEqTest,<sp/>HasSpecifiedType)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verfies<sp/>that<sp/>the<sp/>type<sp/>of<sp/>TypedEq&lt;T&gt;(v)<sp/>is<sp/>Matcher&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_type" kindref="compound">Type&lt;Matcher&lt;int&gt;</ref><sp/>&gt;::IsTypeOf(TypedEq&lt;int&gt;(5));</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_type" kindref="compound">Type&lt;Matcher&lt;double&gt;</ref><sp/>&gt;::IsTypeOf(TypedEq&lt;double&gt;(5));</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ge(v)<sp/>matches<sp/>anything<sp/>&gt;=<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">TEST(GeTest,<sp/>ImplementsGreaterThanOrEqual)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Ge(0);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(1));</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(0));</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(-1));</highlight></codeline>
<codeline lineno="938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ge(v)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal">TEST(GeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Ge(5);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>&gt;=<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Gt(v)<sp/>matches<sp/>anything<sp/>&gt;<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal">TEST(GtTest,<sp/>ImplementsGreaterThan)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>Gt(0);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(1.0));</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(0.0));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(-1.0));</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Gt(v)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">TEST(GtTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>&gt;<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Le(v)<sp/>matches<sp/>anything<sp/>&lt;=<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal">TEST(LeTest,<sp/>ImplementsLessThanOrEqual)<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref><sp/>m1<sp/>=<sp/>Le(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="966"><highlight class="normal">}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Le(v)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal">TEST(LeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Le(5);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>&lt;=<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Lt(v)<sp/>matches<sp/>anything<sp/>&lt;<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal">TEST(LtTest,<sp/>ImplementsLessThan)<sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m1<sp/>=<sp/>Lt(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;Abc&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="stringliteral">&quot;Hello,<sp/>world!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Lt(v)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal">TEST(LtTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Lt(5);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>&lt;<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ne(v)<sp/>matches<sp/>anything<sp/>!=<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">TEST(NeTest,<sp/>ImplementsNotEqual)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m1<sp/>=<sp/>Ne(0);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(1));</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(-1));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(0));</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ne(v)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal">TEST(NeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Ne(5);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNull()<sp/>matches<sp/>any<sp/>NULL<sp/>pointer<sp/>of<sp/>any<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal">TEST(IsNullTest,<sp/>MatchesNullPointer)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m1<sp/>=<sp/>IsNull();</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(p1));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(&amp;n));</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m2<sp/>=<sp/>IsNull();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(p2));</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Nokia&apos;s<sp/>Symbian<sp/>compiler<sp/>generates:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gmock-matchers.h:<sp/>ambiguous<sp/>access<sp/>to<sp/>overloaded<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gmock-matchers.h:<sp/>&apos;testing::Matcher&lt;void<sp/>*&gt;::Matcher(void<sp/>*)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gmock-matchers.h:<sp/>&apos;testing::Matcher&lt;void<sp/>*&gt;::Matcher(const<sp/>testing::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MatcherInterface&lt;void<sp/>*&gt;<sp/>*)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gmock-matchers.h:<sp/><sp/>(point<sp/>of<sp/>instantiation:<sp/>&apos;testing::</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>gmock_matchers_test::IsNullTest_MatchesNullPointer_Test::TestBody()&apos;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>gmock-matchers.h:<sp/><sp/><sp/>(instantiating:<sp/>&apos;testing::PolymorphicMatc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;void*&gt;</ref><sp/>m3<sp/>=<sp/>IsNull();</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p3<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(p3));</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(reinterpret_cast&lt;void*&gt;(0xbeef)));</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal">TEST(IsNullTest,<sp/>LinkedPtr)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;linked_ptr&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>IsNull();</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;int&gt;</ref><sp/>null_p;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;int&gt;</ref><sp/>non_null_p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(null_p));</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(non_null_p));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">TEST(IsNullTest,<sp/>ReferenceToConstLinkedPtr)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const linked_ptr&lt;double&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>IsNull();</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;double&gt;</ref><sp/>null_p;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;double&gt;</ref><sp/>non_null_p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(null_p));</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(non_null_p));</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_FUNCTION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal">TEST(IsNullTest,<sp/>StdFunction)<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;std::function&lt;void()&gt;</ref>&gt;<sp/>m<sp/>=<sp/>IsNull();</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;()));</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches([]{}));</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_FUNCTION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>IsNull()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal">TEST(IsNullTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m<sp/>=<sp/>IsNull();</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NULL&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NULL&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NotNull()<sp/>matches<sp/>any<sp/>non-NULL<sp/>pointer<sp/>of<sp/>any<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal">TEST(NotNullTest,<sp/>MatchesNonNullPointer)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m1<sp/>=<sp/>NotNull();</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p1<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(p1));</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(&amp;n));</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m2<sp/>=<sp/>NotNull();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p2<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(p2));</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal">TEST(NotNullTest,<sp/>LinkedPtr)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;linked_ptr&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>NotNull();</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;int&gt;</ref><sp/>null_p;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;int&gt;</ref><sp/>non_null_p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(null_p));</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(non_null_p));</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal">TEST(NotNullTest,<sp/>ReferenceToConstLinkedPtr)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const linked_ptr&lt;double&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>NotNull();</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;double&gt;</ref><sp/>null_p;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;double&gt;</ref><sp/>non_null_p(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(null_p));</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(non_null_p));</highlight></codeline>
<codeline lineno="1095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_FUNCTION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">TEST(NotNullTest,<sp/>StdFunction)<sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;std::function&lt;void()&gt;</ref>&gt;<sp/>m<sp/>=<sp/>NotNull();</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches([]{}));</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;()));</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_FUNCTION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NotNull()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal">TEST(NotNullTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m<sp/>=<sp/>NotNull();</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NULL&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ref(variable)<sp/>matches<sp/>an<sp/>argument<sp/>that<sp/>references</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&apos;variable&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal">TEST(RefTest,<sp/>MatchesSameVariable)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ref(a);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(b));</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ref(variable)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">TEST(RefTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ref(n);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;references<sp/>the<sp/>variable<sp/>@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>&amp;n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(ss.str()),<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>Ref(non_const_varialbe)<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>matcher<sp/>for<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal">TEST(RefTest,<sp/>CanBeUsedAsMatcherForConstReference)<sp/>{</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ref(a);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(b));</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ref(variable)<sp/>is<sp/>covariant,<sp/>i.e.<sp/>Ref(derived)<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>wherever<sp/>Ref(base)<sp/>can<sp/>be<sp/>used<sp/>(Ref(derived)<sp/>is<sp/>a<sp/>sub-type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>Ref(base),<sp/>but<sp/>not<sp/>vice<sp/>versa.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal">TEST(RefTest,<sp/>IsCovariant)<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref><sp/>base,<sp/>base2;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>derived;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Base&amp;&gt;</ref><sp/>m1<sp/>=<sp/>Ref(base);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(base));</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(base2));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(derived));</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>m1<sp/>=<sp/>Ref(derived);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(derived));</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(base));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(base2));</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal">TEST(RefTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(<ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref>(Ref(n)),<sp/>n),</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>located<sp/>@&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(<ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref>(Ref(n)),<sp/>m),</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>located<sp/>@&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>string<sp/>comparison<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">TEST(StrEqTest,<sp/>MatchesEqualString)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>StrEq(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal">TEST(StrEqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m<sp/>=<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;Hi-\&apos;\&quot;?\\\a\b\f\n\r\t\v\xD3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>\&quot;Hi-\&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\r\\t\\v\\xD3\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str(</highlight><highlight class="stringliteral">&quot;01204500800&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>str[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m2<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>\&quot;012\\04500800\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>str[0]<sp/>=<sp/>str[6]<sp/>=<sp/>str[7]<sp/>=<sp/>str[9]<sp/>=<sp/>str[10]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m3<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>\&quot;\\012\\045\\0\\08\\0\\0\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal">TEST(StrNeTest,<sp/>MatchesUnequalString)<sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>StrNe(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m2<sp/>=<sp/>StrNe(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal">TEST(StrNeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>StrNe(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal">TEST(StrCaseEqTest,<sp/>MatchesEqualStringIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseEq(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseEq(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal">TEST(StrCaseEqTest,<sp/>MatchesEqualStringWith0IgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str1(</highlight><highlight class="stringliteral">&quot;oabocdooeoo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str2(</highlight><highlight class="stringliteral">&quot;OABOCDOOEOO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m0<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m0.Matches(str2<sp/>+<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(1,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>str1[3]<sp/>=<sp/>str2[3]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m1<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(str2));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>str1[0]<sp/>=<sp/>str1[6]<sp/>=<sp/>str1[7]<sp/>=<sp/>str1[10]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>str2[0]<sp/>=<sp/>str2[6]<sp/>=<sp/>str2[7]<sp/>=<sp/>str2[10]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>str1[9]<sp/>=<sp/>str2[9]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(str2));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m3<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(str2));</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(str2<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>str2.append(1,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(str2));</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(str2,<sp/>0,<sp/>9)));</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">TEST(StrCaseEqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m<sp/>=<sp/>StrCaseEq(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>(ignoring<sp/>case)<sp/>\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal">TEST(StrCaseNeTest,<sp/>MatchesUnequalStringIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseNe(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseNe(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal">TEST(StrCaseNeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseNe(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>(ignoring<sp/>case)<sp/>\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr()<sp/>works<sp/>for<sp/>matching<sp/>string-typed<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal">TEST(HasSubstrTest,<sp/>WorksForStringClasses)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m1<sp/>=<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(std::string(</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(std::string(</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr()<sp/>works<sp/>for<sp/>matching<sp/>C-string-typed<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal">TEST(HasSubstrTest,<sp/>WorksForCStrings)<sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char*&gt;</ref><sp/>m1<sp/>=<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(const_cast&lt;char*&gt;(</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(const_cast&lt;char*&gt;(</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m2<sp/>=<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(NULL));</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr(s)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">TEST(HasSubstrTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;string&gt;</ref><sp/>m<sp/>=<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;foo\n\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>substring<sp/>\&quot;foo\\n\\\&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal">TEST(KeyTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const pair&lt;std::string, int&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>Key(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>key<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>\&quot;foo\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>a<sp/>key<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>\&quot;foo\&quot;&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal">TEST(KeyTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;pair&lt;int, bool&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>Key(GreaterThan(10));</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>first<sp/>field<sp/>is<sp/>a<sp/>value<sp/>which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_pair(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>first<sp/>field<sp/>is<sp/>a<sp/>value<sp/>which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_pair(15,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal">TEST(KeyTest,<sp/>MatchesCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>pair&lt;int,<sp/>std::string&gt;<sp/>p(25,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Key(25));</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Key(42)));</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Key(Ge(20)));</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Key(Lt(25))));</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal">TEST(KeyTest,<sp/>SafelyCastsInnerMatcher)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>is_positive<sp/>=<sp/>Gt(0);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>is_negative<sp/>=<sp/>Lt(0);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>pair&lt;char,<sp/>bool&gt;<sp/>p(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Key(is_positive));</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Key(is_negative)));</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal">TEST(KeyTest,<sp/>InsideContainsUsingMap)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>char&gt;<sp/>container;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>container.insert(make_pair(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>container.insert(make_pair(2,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>container.insert(make_pair(4,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Contains(Key(1)));</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(Contains(Key(3))));</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal">TEST(KeyTest,<sp/>InsideContainsUsingMultimap)<sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>multimap&lt;int,<sp/>char&gt;<sp/>container;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>container.insert(make_pair(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>container.insert(make_pair(2,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>container.insert(make_pair(4,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(Contains(Key(25))));</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>container.insert(make_pair(25,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Contains(Key(25)));</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>container.insert(make_pair(25,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Contains(Key(25)));</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Contains(Key(1)));</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(Contains(Key(3))));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">TEST(PairTest,<sp/>Typing)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>verifies<sp/>the<sp/>following<sp/>type<sp/>conversions<sp/>can<sp/>be<sp/>compiled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const pair&lt;const char*, int&gt;</ref>&amp;&gt;<sp/>m1<sp/>=<sp/>Pair(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const pair&lt;const char*, int&gt;</ref><sp/>&gt;<sp/>m2<sp/>=<sp/>Pair(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;pair&lt;const char*, int&gt;</ref><sp/>&gt;<sp/>m3<sp/>=<sp/>Pair(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;pair&lt;int, const std::string&gt;</ref><sp/>&gt;<sp/>m4<sp/>=<sp/>Pair(25,<sp/></highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;pair&lt;const std::string, int&gt;</ref><sp/>&gt;<sp/>m5<sp/>=<sp/>Pair(</highlight><highlight class="stringliteral">&quot;25&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal">TEST(PairTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const pair&lt;std::string, int&gt;</ref>&amp;&gt;<sp/>m1<sp/>=<sp/>Pair(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>42);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>first<sp/>field<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>\&quot;foo\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>has<sp/>a<sp/>second<sp/>field<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>42&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>first<sp/>field<sp/>that<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>\&quot;foo\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>or<sp/>has<sp/>a<sp/>second<sp/>field<sp/>that<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>42&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Double<sp/>and<sp/>triple<sp/>negation<sp/>(1<sp/>or<sp/>2<sp/>times<sp/>not<sp/>and<sp/>description<sp/>of<sp/>negation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const pair&lt;int, int&gt;</ref>&amp;&gt;<sp/>m2<sp/>=<sp/>Not(Pair(Not(13),<sp/>42));</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>a<sp/>first<sp/>field<sp/>that<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>13&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>and<sp/>has<sp/>a<sp/>second<sp/>field<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>42&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">TEST(PairTest,<sp/>CanExplainMatchResultTo)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>neither<sp/>field<sp/>matches,<sp/>Pair()<sp/>should<sp/>explain<sp/>about<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;pair&lt;int, int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>Pair(GreaterThan(0),<sp/>GreaterThan(0));</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>first<sp/>field<sp/>does<sp/>not<sp/>match,<sp/>which<sp/>is<sp/>1<sp/>less<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_pair(-1,<sp/>-2)));</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>first<sp/>field<sp/>matches<sp/>but<sp/>the<sp/>second<sp/>doesn&apos;t,<sp/>Pair()<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain<sp/>about<sp/>the<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>second<sp/>field<sp/>does<sp/>not<sp/>match,<sp/>which<sp/>is<sp/>2<sp/>less<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_pair(1,<sp/>-2)));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>first<sp/>field<sp/>doesn&apos;t<sp/>match<sp/>but<sp/>the<sp/>second<sp/>does,<sp/>Pair()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>explain<sp/>about<sp/>the<sp/>first<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>first<sp/>field<sp/>does<sp/>not<sp/>match,<sp/>which<sp/>is<sp/>1<sp/>less<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_pair(-1,<sp/>2)));</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>both<sp/>fields<sp/>match,<sp/>Pair()<sp/>should<sp/>explain<sp/>about<sp/>them<sp/>both.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>both<sp/>fields<sp/>match,<sp/>where<sp/>the<sp/>first<sp/>field<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0,<sp/>and<sp/>the<sp/>second<sp/>field<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>2<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>make_pair(1,<sp/>2)));</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>only<sp/>the<sp/>first<sp/>match<sp/>has<sp/>an<sp/>explanation,<sp/>only<sp/>this<sp/>explanation<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;pair&lt;int, int&gt;</ref><sp/>&gt;<sp/>explain_first<sp/>=<sp/>Pair(GreaterThan(0),<sp/>0);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>both<sp/>fields<sp/>match,<sp/>where<sp/>the<sp/>first<sp/>field<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(explain_first,<sp/>make_pair(1,<sp/>0)));</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>only<sp/>the<sp/>second<sp/>match<sp/>has<sp/>an<sp/>explanation,<sp/>only<sp/>this<sp/>explanation<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;pair&lt;int, int&gt;</ref><sp/>&gt;<sp/>explain_second<sp/>=<sp/>Pair(0,<sp/>GreaterThan(0));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>both<sp/>fields<sp/>match,<sp/>where<sp/>the<sp/>second<sp/>field<sp/>is<sp/>a<sp/>value<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(explain_second,<sp/>make_pair(0,<sp/>1)));</highlight></codeline>
<codeline lineno="1417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal">TEST(PairTest,<sp/>MatchesCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>pair&lt;int,<sp/>std::string&gt;<sp/>p(25,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Both<sp/>fields<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Pair(25,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Pair(Ge(20),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;o&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;first&apos;<sp/>doesnt&apos;<sp/>match,<sp/>but<sp/>&apos;second&apos;<sp/>matches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(42,<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(Lt(25),<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;first&apos;<sp/>matches,<sp/>but<sp/>&apos;second&apos;<sp/>doesn&apos;t<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(25,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(25,<sp/>Not(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Neither<sp/>field<sp/>matches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(13,<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(Lt(13),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal">TEST(PairTest,<sp/>SafelyCastsInnerMatchers)<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>is_positive<sp/>=<sp/>Gt(0);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>is_negative<sp/>=<sp/>Lt(0);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/>pair&lt;char,<sp/>bool&gt;<sp/>p(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Pair(is_positive,<sp/>_));</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(is_negative,<sp/>_)));</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Pair(_,<sp/>is_positive));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>EXPECT_THAT(p,<sp/>Not(Pair(_,<sp/>is_negative)));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal">TEST(PairTest,<sp/>InsideContainsUsingMap)<sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>char&gt;<sp/>container;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>container.insert(make_pair(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>container.insert(make_pair(2,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>container.insert(make_pair(4,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Contains(Pair(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Contains(Pair(1,<sp/>_)));</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Contains(Pair(_,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(Contains(Pair(3,<sp/>_))));</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>StartsWith(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal">TEST(StartsWithTest,<sp/>MatchesStringWithGivenPrefix)<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m1<sp/>=<sp/>StartsWith(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hi<sp/>Hi!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;High&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal">TEST(StartsWithTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::string&gt;</ref><sp/>m<sp/>=<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;starts<sp/>with<sp/>\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EndsWith(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal">TEST(EndsWithTest,<sp/>MatchesStringWithGivenSuffix)<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m1<sp/>=<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>EndsWith(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Wow<sp/>Hi<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Super<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;Hi<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal">TEST(EndsWithTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::string&gt;</ref><sp/>m<sp/>=<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;ends<sp/>with<sp/>\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>MatchesRegex().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal">TEST(MatchesRegexTest,<sp/>MatchesStringMatchingGivenRegex)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m1<sp/>=<sp/>MatchesRegex(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;az&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;abcz&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>MatchesRegex(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_r_e" kindref="compound">RE</ref>(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;azbz&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;az1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;1az&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal">TEST(MatchesRegexTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::string&gt;</ref><sp/>m1<sp/>=<sp/>MatchesRegex(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hi.*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;matches<sp/>regular<sp/>expression<sp/>\&quot;Hi.*\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m2<sp/>=<sp/>MatchesRegex(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_r_e" kindref="compound">RE</ref>(</highlight><highlight class="stringliteral">&quot;a.*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;matches<sp/>regular<sp/>expression<sp/>\&quot;a.*\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ContainsRegex().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal">TEST(ContainsRegexTest,<sp/>MatchesStringContainingGivenRegex)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m1<sp/>=<sp/>ContainsRegex(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;az&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(</highlight><highlight class="stringliteral">&quot;0abcz1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>m2<sp/>=<sp/>ContainsRegex(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_r_e" kindref="compound">RE</ref>(</highlight><highlight class="stringliteral">&quot;a.*z&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;azbz&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(</highlight><highlight class="stringliteral">&quot;az1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(</highlight><highlight class="stringliteral">&quot;1a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal">TEST(ContainsRegexTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::string&gt;</ref><sp/>m1<sp/>=<sp/>ContainsRegex(</highlight><highlight class="stringliteral">&quot;Hi.*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;contains<sp/>regular<sp/>expression<sp/>\&quot;Hi.*\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m2<sp/>=<sp/>ContainsRegex(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_r_e" kindref="compound">RE</ref>(</highlight><highlight class="stringliteral">&quot;a.*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;contains<sp/>regular<sp/>expression<sp/>\&quot;a.*\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal">TEST(StdWideStrEqTest,<sp/>MatchesEqual)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrEq(::std::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m3<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74D&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74E&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>::std::wstring<sp/>str(L</highlight><highlight class="stringliteral">&quot;01204500800&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>str[3]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m4<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m4.Matches(str));</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>str[0]<sp/>=<sp/>str[6]<sp/>=<sp/>str[7]<sp/>=<sp/>str[9]<sp/>=<sp/>str[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m5<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m5.Matches(str));</highlight></codeline>
<codeline lineno="1569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal">TEST(StdWideStrEqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::std::wstring&gt;</ref><sp/>m<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;Hi-\&apos;\&quot;?\\\a\b\f\n\r\t\v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;Hi-\&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\r\\t\\v\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::std::wstring&gt;</ref><sp/>m2<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;\\xD3\\x576\\x8D3\\xC74D\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/>::std::wstring<sp/>str(L</highlight><highlight class="stringliteral">&quot;01204500800&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>str[3]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m4<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;012\\04500800\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m4));</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/>str[0]<sp/>=<sp/>str[6]<sp/>=<sp/>str[7]<sp/>=<sp/>str[9]<sp/>=<sp/>str[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m5<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;\\012\\045\\0\\08\\0\\0\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m5));</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal">TEST(StdWideStrNeTest,<sp/>MatchesUnequalString)<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrNe(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::std::wstring&gt;</ref><sp/>m2<sp/>=<sp/>StrNe(::std::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal">TEST(StdWideStrNeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrNe(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal">TEST(StdWideStrCaseEqTest,<sp/>MatchesEqualStringIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseEq(::std::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseEq(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal">TEST(StdWideStrCaseEqTest,<sp/>MatchesEqualStringWith0IgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>::std::wstring<sp/>str1(L</highlight><highlight class="stringliteral">&quot;oabocdooeoo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>::std::wstring<sp/>str2(L</highlight><highlight class="stringliteral">&quot;OABOCDOOEOO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m0<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m0.Matches(str2<sp/>+<sp/>::std::wstring(1,<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>str1[3]<sp/>=<sp/>str2[3]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m1<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(str2));</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>str1[0]<sp/>=<sp/>str1[6]<sp/>=<sp/>str1[7]<sp/>=<sp/>str1[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>str2[0]<sp/>=<sp/>str2[6]<sp/>=<sp/>str2[7]<sp/>=<sp/>str2[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>str1[9]<sp/>=<sp/>str2[9]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(str2));</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m3<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(str2));</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(str2<sp/>+<sp/>L</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>str2.append(1,<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(str2));</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(::std::wstring(str2,<sp/>0,<sp/>9)));</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal">TEST(StdWideStrCaseEqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::std::wstring&gt;</ref><sp/>m<sp/>=<sp/>StrCaseEq(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>(ignoring<sp/>case)<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal">TEST(StdWideStrCaseNeTest,<sp/>MatchesUnequalStringIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseNe(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::std::wstring&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseNe(::std::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal">TEST(StdWideStrCaseNeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseNe(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>(ignoring<sp/>case)<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr()<sp/>works<sp/>for<sp/>matching<sp/>wstring-typed<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal">TEST(StdWideHasSubstrTest,<sp/>WorksForStringClasses)<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::std::wstring&gt;</ref><sp/>m1<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(::std::wstring(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(::std::wstring(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(::std::wstring(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(::std::wstring(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr()<sp/>works<sp/>for<sp/>matching<sp/>C-wide-string-typed<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal">TEST(StdWideHasSubstrTest,<sp/>WorksForCStrings)<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;wchar_t*&gt;</ref><sp/>m1<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(const_cast&lt;wchar_t*&gt;(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(const_cast&lt;wchar_t*&gt;(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m2<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(NULL));</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr(s)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal">TEST(StdWideHasSubstrTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::std::wstring&gt;</ref><sp/>m<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo\n\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>substring<sp/>L\&quot;foo\\n\\\&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>StartsWith(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal">TEST(StdWideStartsWithTest,<sp/>MatchesStringWithGivenPrefix)<sp/>{</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m1<sp/>=<sp/>StartsWith(::std::wstring(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StartsWith(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi<sp/>Hi!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;High&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal">TEST(StdWideStartsWithTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&gt;</ref><sp/>m<sp/>=<sp/>StartsWith(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;starts<sp/>with<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EndsWith(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal">TEST(StdWideEndsWithTest,<sp/>MatchesStringWithGivenSuffix)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m1<sp/>=<sp/>EndsWith(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>EndsWith(::std::wstring(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Wow<sp/>Hi<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Super<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal">TEST(StdWideEndsWithTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::std::wstring&gt;</ref><sp/>m<sp/>=<sp/>EndsWith(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;ends<sp/>with<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal">TEST(GlobalWideStrEqTest,<sp/>MatchesEqual)<sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrEq(::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m3<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74D&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74E&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/>::wstring<sp/>str(L</highlight><highlight class="stringliteral">&quot;01204500800&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>str[3]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m4<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m4.Matches(str));</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>str[0]<sp/>=<sp/>str[6]<sp/>=<sp/>str[7]<sp/>=<sp/>str[9]<sp/>=<sp/>str[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m5<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m5.Matches(str));</highlight></codeline>
<codeline lineno="1760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal">TEST(GlobalWideStrEqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::wstring&gt;</ref><sp/>m<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;Hi-\&apos;\&quot;?\\\a\b\f\n\r\t\v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;Hi-\&apos;\\\&quot;?\\\\\\a\\b\\f\\n\\r\\t\\v\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::wstring&gt;</ref><sp/>m2<sp/>=<sp/>StrEq(L</highlight><highlight class="stringliteral">&quot;\xD3\x576\x8D3\xC74D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;\\xD3\\x576\\x8D3\\xC74D\&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>Describe(m2));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>::wstring<sp/>str(L</highlight><highlight class="stringliteral">&quot;01204500800&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>str[3]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m4<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;012\\04500800\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m4));</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>str[0]<sp/>=<sp/>str[6]<sp/>=<sp/>str[7]<sp/>=<sp/>str[9]<sp/>=<sp/>str[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m5<sp/>=<sp/>StrEq(str);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>L\&quot;\\012\\045\\0\\08\\0\\0\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m5));</highlight></codeline>
<codeline lineno="1778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal">TEST(GlobalWideStrNeTest,<sp/>MatchesUnequalString)<sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrNe(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::wstring&gt;</ref><sp/>m2<sp/>=<sp/>StrNe(::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal">TEST(GlobalWideStrNeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrNe(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal">TEST(GlobalWideStrCaseEqTest,<sp/>MatchesEqualStringIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseEq(::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseEq(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal">TEST(GlobalWideStrCaseEqTest,<sp/>MatchesEqualStringWith0IgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>::wstring<sp/>str1(L</highlight><highlight class="stringliteral">&quot;oabocdooeoo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>::wstring<sp/>str2(L</highlight><highlight class="stringliteral">&quot;OABOCDOOEOO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m0<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m0.Matches(str2<sp/>+<sp/>::wstring(1,<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>str1[3]<sp/>=<sp/>str2[3]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m1<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(str2));</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>str1[0]<sp/>=<sp/>str1[6]<sp/>=<sp/>str1[7]<sp/>=<sp/>str1[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>str2[0]<sp/>=<sp/>str2[6]<sp/>=<sp/>str2[7]<sp/>=<sp/>str2[10]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>str1[9]<sp/>=<sp/>str2[9]<sp/>=<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(str2));</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m3<sp/>=<sp/>StrCaseEq(str1);</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m3.Matches(str2));</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(str2<sp/>+<sp/>L</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/>str2.append(1,<sp/>L</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(str2));</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m3.Matches(::wstring(str2,<sp/>0,<sp/>9)));</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal">TEST(GlobalWideStrCaseEqTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::wstring&gt;</ref><sp/>m<sp/>=<sp/>StrCaseEq(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>(ignoring<sp/>case)<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal">TEST(GlobalWideStrCaseNeTest,<sp/>MatchesUnequalStringIgnoringCase)<sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseNe(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(L</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::wstring&gt;</ref><sp/>m2<sp/>=<sp/>StrCaseNe(::wstring(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal">TEST(GlobalWideStrCaseNeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m<sp/>=<sp/>StrCaseNe(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>(ignoring<sp/>case)<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr()<sp/>works<sp/>for<sp/>matching<sp/>wstring-typed<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal">TEST(GlobalWideHasSubstrTest,<sp/>WorksForStringClasses)<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::wstring&gt;</ref><sp/>m1<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(::wstring(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(::wstring(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(::wstring(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(::wstring(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr()<sp/>works<sp/>for<sp/>matching<sp/>C-wide-string-typed<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal">TEST(GlobalWideHasSubstrTest,<sp/>WorksForCStrings)<sp/>{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;wchar_t*&gt;</ref><sp/>m1<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(const_cast&lt;wchar_t*&gt;(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(const_cast&lt;wchar_t*&gt;(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m2<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;I<sp/>love<sp/>food.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;tofo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(NULL));</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>HasSubstr(s)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal">TEST(GlobalWideHasSubstrTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ::wstring&gt;</ref><sp/>m<sp/>=<sp/>HasSubstr(L</highlight><highlight class="stringliteral">&quot;foo\n\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;has<sp/>substring<sp/>L\&quot;foo\\n\\\&quot;\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>StartsWith(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal">TEST(GlobalWideStartsWithTest,<sp/>MatchesStringWithGivenPrefix)<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m1<sp/>=<sp/>StartsWith(::wstring(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>StartsWith(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi<sp/>Hi!&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;High&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;H&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal">TEST(GlobalWideStartsWithTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&gt;</ref><sp/>m<sp/>=<sp/>StartsWith(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;starts<sp/>with<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>EndsWith(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal">TEST(GlobalWideEndsWithTest,<sp/>MatchesStringWithGivenSuffix)<sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const wchar_t*&gt;</ref><sp/>m1<sp/>=<sp/>EndsWith(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m1.Matches(L</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m1.Matches(NULL));</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&amp;&gt;</ref><sp/>m2<sp/>=<sp/>EndsWith(::wstring(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Wow<sp/>Hi<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Super<sp/>Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m2.Matches(L</highlight><highlight class="stringliteral">&quot;Hi<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1920"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal">TEST(GlobalWideEndsWithTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ::wstring&gt;</ref><sp/>m<sp/>=<sp/>EndsWith(L</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;ends<sp/>with<sp/>L\&quot;Hi\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal">typedef<sp/>::testing::tuple&lt;long,<sp/>int&gt;<sp/>Tuple2;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Eq()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>==<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal">TEST(Eq2Test,<sp/>MatchesEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Eq();</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Eq()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal">TEST(Eq2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Eq();</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>equal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ge()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&gt;=<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1948"><highlight class="normal">TEST(Ge2Test,<sp/>MatchesGreaterThanOrEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ge();</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ge()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal">TEST(Ge2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ge();</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&gt;=<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Gt()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&gt;<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal">TEST(Gt2Test,<sp/>MatchesGreaterThanArguments)<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Gt();</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Gt()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal">TEST(Gt2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Gt();</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&gt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Le()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&lt;=<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal">TEST(Le2Test,<sp/>MatchesLessThanOrEqualArguments)<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Le();</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="1983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Le()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal">TEST(Le2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Le();</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;=<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="1989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Lt()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>&lt;<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal">TEST(Lt2Test,<sp/>MatchesLessThanArguments)<sp/>{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Lt();</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="1998"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Lt()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal">TEST(Lt2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Lt();</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>&lt;<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="2004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ne()<sp/>matches<sp/>a<sp/>2-tuple<sp/>where<sp/>the<sp/>first<sp/>field<sp/>!=<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal">TEST(Ne2Test,<sp/>MatchesUnequalArguments)<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ne();</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>6)));</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(Tuple2(5L,<sp/>4)));</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(Tuple2(5L,<sp/>5)));</highlight></codeline>
<codeline lineno="2013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Ne()<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal">TEST(Ne2Test,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Tuple2&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ne();</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;are<sp/>an<sp/>unequal<sp/>pair&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="2019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Not(m)<sp/>matches<sp/>any<sp/>value<sp/>that<sp/>doesn&apos;t<sp/>match<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal">TEST(NotTest,<sp/>NegatesMatcher)<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Not(Eq(2));</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="2027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Not(m)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal">TEST(NotTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Not(Eq(5));</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="2033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>monomorphic<sp/>matchers<sp/>are<sp/>safely<sp/>cast<sp/>by<sp/>the<sp/>Not<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal">TEST(NotTest,<sp/>NotMatcherSafelyCastsMonomorphicMatchers)<sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>greater_than_5<sp/>is<sp/>a<sp/>monomorphic<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>greater_than_5<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"></highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m<sp/>=<sp/>Not(greater_than_5);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>Not(greater_than_5);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m3<sp/>=<sp/>Not(m);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>to<sp/>allow<sp/>easy<sp/>testing<sp/>of<sp/>AllOf<sp/>matchers<sp/>with<sp/>num<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllOfMatches(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(Describe(m));</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(0));</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m.Matches(i));</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(num<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="2053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AllOf(m1,<sp/>...,<sp/>mn)<sp/>matches<sp/>any<sp/>value<sp/>that<sp/>matches<sp/>all<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal">TEST(AllOfTest,<sp/>MatchesWhenAllMatch)<sp/>{</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Le(2),<sp/>Ge(1));</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2));</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(3));</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2));</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1));</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2),<sp/>Ne(3));</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(4));</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(3));</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1));</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Ge(0),<sp/>Lt(10),<sp/>Ne(3),<sp/>Ne(5),<sp/>Ne(7));</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(0));</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(3));</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>tests<sp/>for<sp/>varying<sp/>number<sp/>of<sp/>sub-matchers.<sp/>Due<sp/>to<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>sub-matchers<sp/>are<sp/>handled<sp/>it<sp/>is<sp/>enough<sp/>to<sp/>test<sp/>every<sp/>sub-matcher<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>sub-matchers<sp/>using<sp/>the<sp/>same<sp/>matcher<sp/>type.<sp/>Varying<sp/>matcher<sp/>types<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>checked<sp/>for<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/>AllOfMatches(2,<sp/>AllOf(Ne(1),<sp/>Ne(2)));</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/>AllOfMatches(3,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3)));</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/>AllOfMatches(4,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4)));</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/>AllOfMatches(5,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5)));</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>AllOfMatches(6,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6)));</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/>AllOfMatches(7,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7)));</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/>AllOfMatches(8,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(8)));</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/>AllOfMatches(9,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(8),<sp/>Ne(9)));</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/>AllOfMatches(10,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8),</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(9),<sp/>Ne(10)));</highlight></codeline>
<codeline lineno="2099"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_LANG_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>variadic<sp/>version<sp/>of<sp/>the<sp/>AllOfMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal">TEST(AllOfTest,<sp/>VariadicMatchesWhenAllMatch)<sp/>{</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>AllOf<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>right<sp/>namespace<sp/>and<sp/>does<sp/>not<sp/>depend<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ADL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/>::testing::AllOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8),</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(9),<sp/>Ne(10),<sp/>Ne(11));</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Describe(m),<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>11))))))))))&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/>AllOfMatches(11,<sp/>m);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/>AllOfMatches(50,<sp/>AllOf(Ne(1),<sp/>Ne(2),<sp/>Ne(3),<sp/>Ne(4),<sp/>Ne(5),<sp/>Ne(6),<sp/>Ne(7),<sp/>Ne(8),</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(9),<sp/>Ne(10),<sp/>Ne(11),<sp/>Ne(12),<sp/>Ne(13),<sp/>Ne(14),<sp/>Ne(15),</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(16),<sp/>Ne(17),<sp/>Ne(18),<sp/>Ne(19),<sp/>Ne(20),<sp/>Ne(21),<sp/>Ne(22),</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(23),<sp/>Ne(24),<sp/>Ne(25),<sp/>Ne(26),<sp/>Ne(27),<sp/>Ne(28),<sp/>Ne(29),</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(30),<sp/>Ne(31),<sp/>Ne(32),<sp/>Ne(33),<sp/>Ne(34),<sp/>Ne(35),<sp/>Ne(36),</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(37),<sp/>Ne(38),<sp/>Ne(39),<sp/>Ne(40),<sp/>Ne(41),<sp/>Ne(42),<sp/>Ne(43),</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(44),<sp/>Ne(45),<sp/>Ne(46),<sp/>Ne(47),<sp/>Ne(48),<sp/>Ne(49),</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ne(50)));</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_LANG_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AllOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal">TEST(AllOfTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Le(2),<sp/>Ge(1));</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;=<sp/>2)<sp/>and<sp/>(is<sp/>&gt;=<sp/>1)&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2));</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&gt;<sp/>0)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>1)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>2))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2),<sp/>Ne(3));</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((is<sp/>&gt;<sp/>0)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>1))<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>2)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>3))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Ge(0),<sp/>Lt(10),<sp/>Ne(3),<sp/>Ne(5),<sp/>Ne(7));</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((is<sp/>&gt;=<sp/>0)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;<sp/>10))<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>3)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>5)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>7)))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AllOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>its<sp/>negation<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal">TEST(AllOfTest,<sp/>CanDescribeNegation)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Le(2),<sp/>Ge(1));</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;=<sp/>2)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&gt;=<sp/>1)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2));</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&gt;<sp/>0)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>1)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>2))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Gt(0),<sp/>Ne(1),<sp/>Ne(2),<sp/>Ne(3));</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>&gt;<sp/>0)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>1))<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>2)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>3))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(Ge(0),<sp/>Lt(10),<sp/>Ne(3),<sp/>Ne(5),<sp/>Ne(7));</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>&gt;=<sp/>0)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;<sp/>10))<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>3)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>5)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>7)))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>monomorphic<sp/>matchers<sp/>are<sp/>safely<sp/>cast<sp/>by<sp/>the<sp/>AllOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal">TEST(AllOfTest,<sp/>AllOfMatcherSafelyCastsMonomorphicMatchers)<sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>greater_than_5<sp/>and<sp/>less_than_10<sp/>are<sp/>monomorphic<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>greater_than_5<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>less_than_10<sp/>=<sp/>Lt(10);</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m3<sp/>=<sp/>AllOf(greater_than_5,<sp/>m2);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>BothOf<sp/>works<sp/>when<sp/>composing<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m4<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m5<sp/>=<sp/>AllOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal">TEST(AllOfTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>give<sp/>an<sp/>explanation,<sp/>so<sp/>only<sp/>the<sp/>first<sp/>matcher&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation<sp/>is<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>Lt(30));</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>15<sp/>more<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>25));</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>20<sp/>more<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>10<sp/>more<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>30));</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>Lt(30),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>15<sp/>more<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>25));</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20),<sp/>GreaterThan(30));</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>30<sp/>more<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>20<sp/>more<sp/>than<sp/>20,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>which<sp/>is<sp/>10<sp/>more<sp/>than<sp/>30&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>40));</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>The<sp/>first<sp/>matcher,<sp/>which<sp/>failed,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>failed,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.<sp/><sp/>Since<sp/>it<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation,<sp/>nothing<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>Lt(30));</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>40));</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>failed,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AllOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>15));</highlight></codeline>
<codeline lineno="2241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>to<sp/>allow<sp/>easy<sp/>testing<sp/>of<sp/>AnyOf<sp/>matchers<sp/>with<sp/>num<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AnyOfMatches(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/>SCOPED_TRACE(Describe(m));</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>num;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m.Matches(i));</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(num<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="2251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AnyOf(m1,<sp/>...,<sp/>mn)<sp/>matches<sp/>any<sp/>value<sp/>that<sp/>matches<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>least<sp/>one<sp/>of<sp/>the<sp/>given<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal">TEST(AnyOfTest,<sp/>MatchesWhenAnyMatches)<sp/>{</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(1),<sp/>Ge(3));</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(4));</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2));</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(-1));</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2));</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3));</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(-1));</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2));</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(0),<sp/>Gt(10),<sp/>3,<sp/>5,<sp/>7);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(0));</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(11));</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(3));</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(2));</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>tests<sp/>for<sp/>varying<sp/>number<sp/>of<sp/>sub-matchers.<sp/>Due<sp/>to<sp/>the<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>sub-matchers<sp/>are<sp/>handled<sp/>it<sp/>is<sp/>enough<sp/>to<sp/>test<sp/>every<sp/>sub-matcher<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>sub-matchers<sp/>using<sp/>the<sp/>same<sp/>matcher<sp/>type.<sp/>Varying<sp/>matcher<sp/>types<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>checked<sp/>for<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>AnyOfMatches(2,<sp/>AnyOf(1,<sp/>2));</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>AnyOfMatches(3,<sp/>AnyOf(1,<sp/>2,<sp/>3));</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/>AnyOfMatches(4,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4));</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/>AnyOfMatches(5,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5));</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/>AnyOfMatches(6,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6));</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/>AnyOfMatches(7,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7));</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/>AnyOfMatches(8,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8));</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/>AnyOfMatches(9,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9));</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/>AnyOfMatches(10,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10));</highlight></codeline>
<codeline lineno="2294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_LANG_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>variadic<sp/>version<sp/>of<sp/>the<sp/>AnyOfMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal">TEST(AnyOfTest,<sp/>VariadicMatchesWhenAnyMatches)<sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>make<sp/>sure<sp/>AnyOf<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>right<sp/>namespace<sp/>and<sp/>does<sp/>not<sp/>depend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>ADL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>::testing::AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,<sp/>11);</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Describe(m),<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;or<sp/>(is<sp/>equal<sp/>to<sp/>11))))))))))&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/>AnyOfMatches(11,<sp/>m);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>AnyOfMatches(50,<sp/>AnyOf(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10,</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>21,<sp/>22,<sp/>23,<sp/>24,<sp/>25,<sp/>26,<sp/>27,<sp/>28,<sp/>29,<sp/>30,</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>31,<sp/>32,<sp/>33,<sp/>34,<sp/>35,<sp/>36,<sp/>37,<sp/>38,<sp/>39,<sp/>40,</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>41,<sp/>42,<sp/>43,<sp/>44,<sp/>45,<sp/>46,<sp/>47,<sp/>48,<sp/>49,<sp/>50));</highlight></codeline>
<codeline lineno="2310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_LANG_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AnyOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal">TEST(AnyOfTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(1),<sp/>Ge(3));</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;=<sp/>1)<sp/>or<sp/>(is<sp/>&gt;=<sp/>3)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2));</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(is<sp/>&lt;<sp/>0)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>1)<sp/>or<sp/>(is<sp/>equal<sp/>to<sp/>2))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3));</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((is<sp/>&lt;<sp/>0)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>1))<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>2)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>3))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(0),<sp/>Gt(10),<sp/>3,<sp/>5,<sp/>7);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((is<sp/>&lt;=<sp/>0)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>&gt;<sp/>10))<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>3)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((is<sp/>equal<sp/>to<sp/>5)<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(is<sp/>equal<sp/>to<sp/>7)))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>AnyOf(m1,<sp/>...,<sp/>mn)<sp/>describes<sp/>its<sp/>negation<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal">TEST(AnyOfTest,<sp/>CanDescribeNegation)<sp/>{</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(1),<sp/>Ge(3));</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;=<sp/>1)<sp/>and<sp/>(isn&apos;t<sp/>&gt;=<sp/>3)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2));</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&lt;<sp/>0)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>1)<sp/>and<sp/>(isn&apos;t<sp/>equal<sp/>to<sp/>2))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Lt(0),<sp/>Eq(1),<sp/>Eq(2),<sp/>Eq(3));</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>&lt;<sp/>0)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>1))<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>2)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>3))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(Le(0),<sp/>Gt(10),<sp/>3,<sp/>5,<sp/>7);</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>&lt;=<sp/>0)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>&gt;<sp/>10))<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>3)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;((isn&apos;t<sp/>equal<sp/>to<sp/>5)<sp/>and<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;(isn&apos;t<sp/>equal<sp/>to<sp/>7)))&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>monomorphic<sp/>matchers<sp/>are<sp/>safely<sp/>cast<sp/>by<sp/>the<sp/>AnyOf<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal">TEST(AnyOfTest,<sp/>AnyOfMatcherSafelyCastsMonomorphicMatchers)<sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>greater_than_5<sp/>and<sp/>less_than_10<sp/>are<sp/>monomorphic<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>greater_than_5<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>less_than_10<sp/>=<sp/>Lt(10);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m2<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m3<sp/>=<sp/>AnyOf(greater_than_5,<sp/>m2);</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>EitherOf<sp/>works<sp/>when<sp/>composing<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m4<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&amp;&gt;</ref><sp/>m5<sp/>=<sp/>AnyOf(greater_than_5,<sp/>less_than_10,<sp/>less_than_10);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal">TEST(AnyOfTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>give<sp/>an<sp/>explanation,<sp/>so<sp/>only<sp/>the<sp/>first<sp/>matcher&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation<sp/>is<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>Lt(0));</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>Both<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>15<sp/>less<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.<sp/><sp/>The<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>Gt(20),<sp/>GreaterThan(30));</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>25<sp/>less<sp/>than<sp/>30&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match.<sp/><sp/>All<sp/>matchers<sp/>need<sp/>to<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>GreaterThan(20),<sp/>GreaterThan(30));</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>less<sp/>than<sp/>10,<sp/>and<sp/>which<sp/>is<sp/>15<sp/>less<sp/>than<sp/>20,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>which<sp/>is<sp/>25<sp/>less<sp/>than<sp/>30&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>The<sp/>first<sp/>matcher,<sp/>which<sp/>succeeded,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>15));</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>succeeded,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.<sp/><sp/>Since<sp/>it<sp/>doesn&apos;t<sp/>given<sp/>an<sp/>explanation,<sp/>nothing<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>printed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(10),<sp/>Lt(30));</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>0));</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.<sp/><sp/>The<sp/>second<sp/>matcher,<sp/>which<sp/>succeeded,<sp/>needs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>AnyOf(GreaterThan(30),<sp/>GreaterThan(20));</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>20&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>25));</highlight></codeline>
<codeline lineno="2426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>predicate<sp/>function<sp/>and<sp/>predicate<sp/>functor<sp/>are<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>testing<sp/>the<sp/>Truly(predicate)<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>non-zero<sp/>if<sp/>the<sp/>input<sp/>is<sp/>positive.<sp/><sp/>Note<sp/>that<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>this<sp/>function<sp/>is<sp/>not<sp/>bool.<sp/><sp/>It&apos;s<sp/>OK<sp/>as<sp/>Truly()<sp/>accepts<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unary<sp/>function<sp/>or<sp/>functor<sp/>whose<sp/>return<sp/>type<sp/>can<sp/>be<sp/>implicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="comment">//<sp/>converted<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsPositive(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>functor<sp/>returns<sp/>true<sp/>if<sp/>the<sp/>input<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441" refid="classtesting_1_1gmock__matchers__test_1_1_is_greater_than" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_is_greater_than" kindref="compound">IsGreaterThan</ref><sp/>{</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_is_greater_than" kindref="compound">IsGreaterThan</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold)<sp/>:<sp/>threshold_(threshold)<sp/>{}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>&gt;<sp/>threshold_;<sp/>}</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>threshold_;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>Truly().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>foo<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>predicate<sp/>returns<sp/>true<sp/>iff<sp/>the<sp/>argument<sp/>references<sp/>foo<sp/>and<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>zero<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ReferencesFooAndIsZero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(&amp;n<sp/>==<sp/>&amp;foo)<sp/>&amp;&amp;<sp/>(n<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="2458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate)<sp/>matches<sp/>what<sp/>satisfies<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>predicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal">TEST(TrulyTest,<sp/>MatchesWhatSatisfiesThePredicate)<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m<sp/>=<sp/>Truly(IsPositive);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(2.0));</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(-1.5));</highlight></codeline>
<codeline lineno="2466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate_functor)<sp/>works<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal">TEST(TrulyTest,<sp/>CanBeUsedWithFunctor)<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Truly(<ref refid="classtesting_1_1gmock__matchers__test_1_1_is_greater_than" kindref="compound">IsGreaterThan</ref>(5));</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(6));</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(4));</highlight></codeline>
<codeline lineno="2473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>bool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476" refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" kindref="compound">ConvertibleToBool</ref><sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" kindref="compound">ConvertibleToBool</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>:<sp/>number_(number)<sp/>{}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number_<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" kindref="compound">ConvertibleToBool</ref><sp/>IsNotZero(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)<sp/>{</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_convertible_to_bool" kindref="compound">ConvertibleToBool</ref>(number);</highlight></codeline>
<codeline lineno="2487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>predicate<sp/>used<sp/>in<sp/>Truly()<sp/>may<sp/>return<sp/>a<sp/>class<sp/>that&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implicitly<sp/>convertible<sp/>to<sp/>bool,<sp/>even<sp/>when<sp/>the<sp/>class<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operator!().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal">TEST(TrulyTest,<sp/>PredicateCanReturnAClassConvertibleToBool)<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>Truly(IsNotZero);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(1));</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(0));</highlight></codeline>
<codeline lineno="2496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate)<sp/>can<sp/>describe<sp/>itself<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal">TEST(TrulyTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m<sp/>=<sp/>Truly(IsPositive);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;satisfies<sp/>the<sp/>given<sp/>predicate&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="2503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Truly(predicate)<sp/>works<sp/>when<sp/>the<sp/>matcher<sp/>takes<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>by<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal">TEST(TrulyTest,<sp/>WorksForByRefArguments)<sp/>{</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>m<sp/>=<sp/>Truly(ReferencesFooAndIsZero);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(foo));</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(n));</highlight></codeline>
<codeline lineno="2512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Matches(m)<sp/>is<sp/>a<sp/>predicate<sp/>satisfied<sp/>by<sp/>whatever<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>matcher<sp/>m.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal">TEST(MatchesTest,<sp/>IsSatisfiedByWhatMatchesTheMatcher)<sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Matches(Ge(0))(1));</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Matches(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">))(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Matches(m)<sp/>works<sp/>when<sp/>the<sp/>matcher<sp/>takes<sp/>its<sp/>argument<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal">TEST(MatchesTest,<sp/>WorksOnByRefArguments)<sp/>{</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Matches(AllOf(Ref(n),<sp/>Eq(0)))(n));</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Matches(Ref(m))(n));</highlight></codeline>
<codeline lineno="2527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>Matcher<sp/>on<sp/>non-reference<sp/>type<sp/>can<sp/>be<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal">TEST(MatchesTest,<sp/>WorksWithMatcherOnNonRefType)<sp/>{</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>eq5<sp/>=<sp/>Eq(5);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Matches(eq5)(5));</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Matches(eq5)(2));</highlight></codeline>
<codeline lineno="2535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Value(value,<sp/>matcher).<sp/><sp/>Since<sp/>Value()<sp/>is<sp/>a<sp/>simple<sp/>wrapper<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matches(),<sp/>which<sp/>has<sp/>been<sp/>tested<sp/>already,<sp/>we<sp/>don&apos;t<sp/>spend<sp/>a<sp/>lot<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>effort<sp/>on<sp/>testing<sp/>Value().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal">TEST(ValueTest,<sp/>WorksWithPolymorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Value(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Value(5,<sp/>Gt(10)));</highlight></codeline>
<codeline lineno="2543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal">TEST(ValueTest,<sp/>WorksWithMonomorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>is_zero<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Value(0,<sp/>is_zero));</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Value(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>is_zero));</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>ref_n<sp/>=<sp/>Ref(n);</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(Value(n,<sp/>ref_n));</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(Value(1,<sp/>ref_n));</highlight></codeline>
<codeline lineno="2554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>WorksWithPolymorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener1;</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ExplainMatchResult(PolymorphicIsEven(),<sp/>42,<sp/>&amp;listener1));</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>0&quot;</highlight><highlight class="normal">,<sp/>listener1.str());</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener2;</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(Ge(42),<sp/>1.5,<sp/>&amp;listener2));</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>listener2.str());</highlight></codeline>
<codeline lineno="2564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>WorksWithMonomorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>is_even<sp/>=<sp/>PolymorphicIsEven();</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener1;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ExplainMatchResult(is_even,<sp/>42,<sp/>&amp;listener1));</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;%<sp/>2<sp/>==<sp/>0&quot;</highlight><highlight class="normal">,<sp/>listener1.str());</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const double&amp;&gt;</ref><sp/>is_zero<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener2;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(is_zero,<sp/>1.5,<sp/>&amp;listener2));</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>listener2.str());</highlight></codeline>
<codeline lineno="2576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal">MATCHER_P(Really,<sp/>inner_matcher,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ExplainMatchResult(inner_matcher,<sp/>arg,<sp/>result_listener);</highlight></codeline>
<codeline lineno="2580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>WorksInsideMATCHER)<sp/>{</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/>EXPECT_THAT(0,<sp/>Really(Eq(0)));</highlight></codeline>
<codeline lineno="2584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal">TEST(AllArgsTest,<sp/>WorksForTuple)<sp/>{</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(1,<sp/>2L),<sp/>AllArgs(Lt()));</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(2L,<sp/>1),<sp/>Not(AllArgs(Lt())));</highlight></codeline>
<codeline lineno="2589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal">TEST(AllArgsTest,<sp/>WorksForNonTuple)<sp/>{</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/>EXPECT_THAT(42,<sp/>AllArgs(Gt(0)));</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>Not(AllArgs(Eq(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="2594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596" refid="classtesting_1_1gmock__matchers__test_1_1_all_args_helper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_all_args_helper" kindref="compound">AllArgsHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_all_args_helper" kindref="compound">AllArgsHelper</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Helper,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y));</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__matchers__test_1_1_all_args_helper" kindref="compound">AllArgsHelper</ref>);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal">TEST(AllArgsTest,<sp/>WorksInWithClause)<sp/>{</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_all_args_helper" kindref="compound">AllArgsHelper</ref><sp/>helper;</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/>ON_CALL(helper,<sp/>Helper(_,<sp/>_))</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.With(AllArgs(Lt()))</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Return(1));</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>Helper(_,<sp/>_));</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/>EXPECT_CALL(helper,<sp/>Helper(_,<sp/>_))</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.With(AllArgs(Gt()))</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>helper.Helper(</highlight><highlight class="charliteral">&apos;\1&apos;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>helper.Helper(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="2618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_THAT()<sp/>and<sp/>EXPECT_THAT()<sp/>work<sp/>when<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight><highlight class="comment">//<sp/>matches<sp/>the<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal">TEST(MatcherAssertionTest,<sp/>WorksWhenMatcherIsSatisfied)<sp/>{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/>ASSERT_THAT(5,<sp/>Ge(2))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/>ASSERT_THAT(</highlight><highlight class="stringliteral">&quot;Foo&quot;</highlight><highlight class="normal">,<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;oo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/>EXPECT_THAT(2,<sp/>AllOf(Le(7),<sp/>Ge(0)))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>should<sp/>succeed<sp/>too.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;Hell&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_THAT()<sp/>and<sp/>EXPECT_THAT()<sp/>work<sp/>when<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>match<sp/>the<sp/>matcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal">TEST(MatcherAssertionTest,<sp/>WorksWhenMatcherIsNotSatisfied)<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;n&apos;<sp/>must<sp/>be<sp/>static<sp/>as<sp/>it<sp/>is<sp/>used<sp/>in<sp/>an<sp/>EXPECT_FATAL_FAILURE(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>cannot<sp/>reference<sp/>auto<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>VC++<sp/>prior<sp/>to<sp/>version<sp/>8.0<sp/>SP1<sp/>has<sp/>a<sp/>bug<sp/>where<sp/>it<sp/>will<sp/>not<sp/>see<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>functions<sp/>declared<sp/>in<sp/>the<sp/>namespace<sp/>scope<sp/>from<sp/>within<sp/>nested<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT/ASSERT_(NON)FATAL_FAILURE<sp/>macros<sp/>use<sp/>nested<sp/>classes<sp/>so<sp/>that<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace-level<sp/>functions<sp/>invoked<sp/>inside<sp/>them<sp/>need<sp/>to<sp/>be<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resolved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_THAT(n,<sp/>::testing::Gt(10)),</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>is<sp/>&gt;<sp/>10\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>5&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;unsigned<sp/>short&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THAT(n,<sp/>::testing::AllOf(::testing::Le(7),<sp/>::testing::Ge(5))),</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>(is<sp/>&lt;=<sp/>7)<sp/>and<sp/>(is<sp/>&gt;=<sp/>5)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>0&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;unsigned<sp/>short&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_THAT()<sp/>and<sp/>EXPECT_THAT()<sp/>work<sp/>when<sp/>the<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>reference<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal">TEST(MatcherAssertionTest,<sp/>WorksForByRefArguments)<sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>a<sp/>static<sp/>variable<sp/>here<sp/>as<sp/>EXPECT_FATAL_FAILURE()<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>reference<sp/>auto<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>EXPECT_THAT(n,<sp/>AllOf(Le(7),<sp/>Ref(n)));</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_THAT(n,<sp/>::testing::Not(::testing::Ref(n))),</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>n\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>does<sp/>not<sp/>reference<sp/>the<sp/>variable<sp/>@&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>&quot;Actual&quot;<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/>EXPECT_FATAL_FAILURE(ASSERT_THAT(n,<sp/>::testing::Not(::testing::Ref(n))),</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Actual:<sp/>0&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>located<sp/>@&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ASSERT_THAT()<sp/>and<sp/>EXPECT_THAT()<sp/>work<sp/>when<sp/>the<sp/>matcher<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>monomorphic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT_THAT(&quot;hello&quot;,<sp/>starts_with_he)<sp/>fails<sp/>to<sp/>compile<sp/>with<sp/>Nokia&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Symbian<sp/>compiler:<sp/>it<sp/>tries<sp/>to<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template&lt;T,<sp/>U&gt;<sp/>class<sp/>MatcherCastImpl<sp/>{<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>virtual<sp/>bool<sp/>MatchAndExplain(T<sp/>x,<sp/>...)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>source_matcher_.MatchAndExplain(static_cast&lt;U&gt;(x),<sp/>...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>U<sp/>==<sp/>string<sp/>and<sp/>T<sp/>==<sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>ASSERT_THAT(&quot;hello&quot;...)<sp/>changed<sp/>to<sp/>ASSERT_THAT(string(&quot;hello&quot;)<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>compiler<sp/>silently<sp/>crashes<sp/>with<sp/>no<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>MatcherCastImpl<sp/>is<sp/>changed<sp/>to<sp/>use<sp/>U(x)<sp/>instead<sp/>of<sp/>static_cast&lt;U&gt;(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>code<sp/>compiles<sp/>but<sp/>the<sp/>converted<sp/>string<sp/>is<sp/>bogus.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal">TEST(MatcherAssertionTest,<sp/>WorksForMonomorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>starts_with_he<sp/>=<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;he&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/>ASSERT_THAT(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>starts_with_he);</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>ends_with_ok<sp/>=<sp/>EndsWith(</highlight><highlight class="stringliteral">&quot;ok&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/>ASSERT_THAT(</highlight><highlight class="stringliteral">&quot;book&quot;</highlight><highlight class="normal">,<sp/>ends_with_ok);</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bad<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bad&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THAT(bad,<sp/>ends_with_ok),</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>bad\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>ends<sp/>with<sp/>\&quot;ok\&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>\&quot;bad\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>is_greater_than_5<sp/>=<sp/>Gt(5);</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(EXPECT_THAT(5,<sp/>is_greater_than_5),</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Value<sp/>of:<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Expected:<sp/>is<sp/>&gt;<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Actual:<sp/>5&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="2700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!GTEST_OS_SYMBIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>floating-point<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="2705" refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_floating_point" kindref="compound">testing::internal::FloatingPoint&lt;RawType&gt;</ref><sp/><ref refid="classtesting_1_1internal_1_1_floating_point" kindref="compound">Floating</ref>;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Floating::Bits<sp/>Bits;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest</ref>()</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>max_ulps_(Floating::kMaxUlps),</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_bits_(Floating(0).bits()),</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one_bits_(Floating(1).bits()),</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity_bits_(Floating(Floating::Infinity()).bits()),</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_positive_zero_(AsBits(zero_bits_<sp/>+<sp/>max_ulps_/2)),</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_negative_zero_(AsBits(zero_bits_<sp/>+<sp/>max_ulps_<sp/>-<sp/>max_ulps_/2)),</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>further_from_negative_zero_(-AsBits(</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zero_bits_<sp/>+<sp/>max_ulps_<sp/>+<sp/>1<sp/>-<sp/>max_ulps_/2)),</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_one_(AsBits(one_bits_<sp/>+<sp/>max_ulps_)),</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>further_from_one_(AsBits(one_bits_<sp/>+<sp/>max_ulps_<sp/>+<sp/>1)),</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infinity_(Floating::Infinity()),</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close_to_infinity_(AsBits(infinity_bits_<sp/>-<sp/>max_ulps_)),</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>further_from_infinity_(AsBits(infinity_bits_<sp/>-<sp/>max_ulps_<sp/>-<sp/>1)),</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_(Floating::Max()),</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nan1_(AsBits(Floating::kExponentBitMask<sp/>|<sp/>1)),</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nan2_(AsBits(Floating::kExponentBitMask<sp/>|<sp/>200))<sp/>{</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSize()<sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RawType),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Bits));</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>battery<sp/>of<sp/>tests<sp/>for<sp/>FloatingEqMatcher::Matches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>function<sp/>which<sp/>creates<sp/>a<sp/>FloatingEqMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestMatches(</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">testing::internal::FloatingEqMatcher&lt;RawType&gt;</ref><sp/>(*matcher_maker)(RawType))<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m1<sp/>=<sp/>matcher_maker(0.0);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(-0.0));</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(close_to_positive_zero_));</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(close_to_negative_zero_));</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(1.0));</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"></highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m2<sp/>=<sp/>matcher_maker(close_to_positive_zero_);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m2.Matches(further_from_negative_zero_));</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m3<sp/>=<sp/>matcher_maker(1.0);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m3.Matches(close_to_one_));</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(further_from_one_));</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"></highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>commutativity:<sp/>matcher_maker(0.0).Matches(1.0)<sp/>was<sp/>tested<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(0.0));</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m4<sp/>=<sp/>matcher_maker(-infinity_);</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m4.Matches(-close_to_infinity_));</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m5<sp/>=<sp/>matcher_maker(infinity_);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m5.Matches(close_to_infinity_));</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>interesting<sp/>as<sp/>the<sp/>representations<sp/>of<sp/>infinity_<sp/>and<sp/>nan1_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>only<sp/>1<sp/>DLP<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m5.Matches(nan1_));</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;const<sp/>RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const RawType&amp;&gt;</ref><sp/>m6<sp/>=<sp/>matcher_maker(0.0);</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m6.Matches(-0.0));</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m6.Matches(close_to_positive_zero_));</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m6.Matches(1.0));</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&amp;&gt;</ref><sp/>m7<sp/>=<sp/>matcher_maker(0.0);</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m7.Matches(x));</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0.01f;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m7.Matches(x));</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pre-calculated<sp/>numbers<sp/>to<sp/>be<sp/>used<sp/>by<sp/>the<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_ulps_;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>zero_bits_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>0.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>one_bits_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bits<sp/>infinity_bits_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>+infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>numbers<sp/>close<sp/>to<sp/>0.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_positive_zero_;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_negative_zero_;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>further_from_negative_zero_;</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>numbers<sp/>close<sp/>to<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_one_;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>further_from_one_;</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>numbers<sp/>close<sp/>to<sp/>+infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>infinity_;</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>close_to_infinity_;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>further_from_infinity_;</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>representable<sp/>value<sp/>that&apos;s<sp/>not<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>max_;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>NaNs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>nan1_;</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType<sp/>nan2_;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RawType<sp/>AsBits(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Floating::ReinterpretBits(static_cast&lt;Bits&gt;(value));</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>floating-point<sp/>matchers<sp/>with<sp/>fixed<sp/>epsilons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="2817" refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatingPointNearTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest</ref>&lt;RawType&gt;<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest&lt;RawType&gt;</ref><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">ParentType</ref>;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>battery<sp/>of<sp/>tests<sp/>for<sp/>FloatingEqMatcher::Matches<sp/>with<sp/>a<sp/>fixed<sp/>epsilon.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>function<sp/>which<sp/>creates<sp/>a<sp/>FloatingEqMatcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestNearMatches(</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">testing::internal::FloatingEqMatcher&lt;RawType&gt;</ref></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*matcher_maker)(RawType,<sp/>RawType))<sp/>{</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m1<sp/>=<sp/>matcher_maker(0.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(0.0));</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m1.Matches(-0.0));</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(ParentType::close_to_positive_zero_));</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(ParentType::close_to_negative_zero_));</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m1.Matches(1.0));</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m2<sp/>=<sp/>matcher_maker(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(0.0));</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(-0.0));</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(1.0));</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m2.Matches(-1.0));</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m2.Matches(ParentType::close_to_one_));</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m2.Matches(-ParentType::close_to_one_));</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>inf<sp/>matches<sp/>inf,<sp/>regardless<sp/>of<sp/>the<sp/>of<sp/>the<sp/>specified<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>absolute<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m3<sp/>=<sp/>matcher_maker(ParentType::infinity_,<sp/>0.0);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m3.Matches(ParentType::infinity_));</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(ParentType::close_to_infinity_));</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m3.Matches(-ParentType::infinity_));</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m4<sp/>=<sp/>matcher_maker(-ParentType::infinity_,<sp/>0.0);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m4.Matches(-ParentType::infinity_));</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m4.Matches(-ParentType::close_to_infinity_));</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m4.Matches(ParentType::infinity_));</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>various<sp/>overflow<sp/>scenarios.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m5<sp/>=<sp/>matcher_maker(ParentType::max_,<sp/>ParentType::max_);</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m5.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m5.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m6<sp/>=<sp/>matcher_maker(-ParentType::max_,<sp/>ParentType::max_);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m6.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m6.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m7<sp/>=<sp/>matcher_maker(ParentType::max_,<sp/>0);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m7.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m7.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m8<sp/>=<sp/>matcher_maker(-ParentType::max_,<sp/>0);</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m8.Matches(ParentType::max_));</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m8.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>difference<sp/>between<sp/>max()<sp/>and<sp/>-max()<sp/>normally<sp/>overflows<sp/>to<sp/>infinity,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>should<sp/>still<sp/>match<sp/>if<sp/>the<sp/>max_abs_error<sp/>is<sp/>also<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&gt;</ref><sp/>m9<sp/>=<sp/>matcher_maker(</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParentType::max_,<sp/>ParentType::infinity_);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m8.Matches(-ParentType::max_));</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;const<sp/>RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const RawType&amp;&gt;</ref><sp/>m10<sp/>=<sp/>matcher_maker(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m10.Matches(-0.0));</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m10.Matches(ParentType::close_to_positive_zero_));</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m10.Matches(ParentType::close_to_one_));</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>matcher_maker<sp/>can<sp/>produce<sp/>a<sp/>Matcher&lt;RawType&amp;&gt;,<sp/>which<sp/>is<sp/>needed<sp/>in<sp/>some</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;RawType&amp;&gt;</ref><sp/>m11<sp/>=<sp/>matcher_maker(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m11.Matches(x));</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m11.Matches(x));</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>-1.0f;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(m11.Matches(x));</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>1.1f;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m11.Matches(x));</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>-1.1f;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(m11.Matches(x));</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2897"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>floats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest&lt;float&gt;</ref><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatTest</ref>;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatTest,<sp/>FloatEqApproximatelyMatchesFloats)<sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>TestMatches(&amp;FloatEq);</highlight></codeline>
<codeline lineno="2904"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatTest,<sp/>NanSensitiveFloatEqApproximatelyMatchesFloats)<sp/>{</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/>TestMatches(&amp;NanSensitiveFloatEq);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatTest,<sp/>FloatEqCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FloatEq<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m<sp/>=<sp/>FloatEq(nan1_);</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="2916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatTest,<sp/>NanSensitiveFloatEqCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveFloatEq<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m<sp/>=<sp/>NanSensitiveFloatEq(nan1_);</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="2924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatTest,<sp/>FloatEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m1<sp/>=<sp/>FloatEq(2.0f);</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m2<sp/>=<sp/>FloatEq(0.5f);</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m3<sp/>=<sp/>FloatEq(nan1_);</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="2938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatTest,<sp/>NanSensitiveFloatEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m1<sp/>=<sp/>NanSensitiveFloatEq(2.0f);</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m2<sp/>=<sp/>NanSensitiveFloatEq(0.5f);</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m3<sp/>=<sp/>NanSensitiveFloatEq(nan1_);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="2952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>floats<sp/>with<sp/>a<sp/>user-specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max<sp/>absolute<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatingPointNearTest&lt;float&gt;</ref><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatNearTest</ref>;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatNearTest,<sp/>FloatNearMatches)<sp/>{</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/>TestNearMatches(&amp;FloatNear);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatNearTest,<sp/>NanSensitiveFloatNearApproximatelyMatchesFloats)<sp/>{</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/>TestNearMatches(&amp;NanSensitiveFloatNear);</highlight></codeline>
<codeline lineno="2964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatNearTest,<sp/>FloatNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m1<sp/>=<sp/>FloatNear(2.0f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m2<sp/>=<sp/>FloatNear(0.5f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m3<sp/>=<sp/>FloatNear(nan1_,<sp/>0.0);</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="2980"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatNearTest,<sp/>NanSensitiveFloatNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m1<sp/>=<sp/>NanSensitiveFloatNear(2.0f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m2<sp/>=<sp/>NanSensitiveFloatNear(0.5f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m3<sp/>=<sp/>NanSensitiveFloatNear(nan1_,<sp/>0.1f);</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="2996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatNearTest,<sp/>FloatNearCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FloatNear<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m<sp/>=<sp/>FloatNear(ParentType::nan1_,<sp/>0.1f);</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="3004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"></highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FloatNearTest,<sp/>NanSensitiveFloatNearCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveFloatNear<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;float&gt;</ref><sp/>m<sp/>=<sp/>NanSensitiveFloatNear(nan1_,<sp/>0.1f);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="3012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>doubles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">FloatingPointTest&lt;double&gt;</ref><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_test" kindref="compound">DoubleTest</ref>;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleTest,<sp/>DoubleEqApproximatelyMatchesDoubles)<sp/>{</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/>TestMatches(&amp;DoubleEq);</highlight></codeline>
<codeline lineno="3019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleTest,<sp/>NanSensitiveDoubleEqApproximatelyMatchesDoubles)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/>TestMatches(&amp;NanSensitiveDoubleEq);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleTest,<sp/>DoubleEqCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoubleEq<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m<sp/>=<sp/>DoubleEq(nan1_);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="3031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleTest,<sp/>NanSensitiveDoubleEqCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveDoubleEq<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m<sp/>=<sp/>NanSensitiveDoubleEq(nan1_);</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="3039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleTest,<sp/>DoubleEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>DoubleEq(2.0);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m2<sp/>=<sp/>DoubleEq(0.5);</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m3<sp/>=<sp/>DoubleEq(nan1_);</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="3053"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleTest,<sp/>NanSensitiveDoubleEqCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>NanSensitiveDoubleEq(2.0);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m2<sp/>=<sp/>NanSensitiveDoubleEq(0.5);</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m3<sp/>=<sp/>NanSensitiveDoubleEq(nan1_);</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="3067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Instantiate<sp/>FloatingPointTest<sp/>for<sp/>testing<sp/>floats<sp/>with<sp/>a<sp/>user-specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>max<sp/>absolute<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">FloatingPointNearTest&lt;double&gt;</ref><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test" kindref="compound">DoubleNearTest</ref>;</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleNearTest,<sp/>DoubleNearMatches)<sp/>{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/>TestNearMatches(&amp;DoubleNear);</highlight></codeline>
<codeline lineno="3075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleNearTest,<sp/>NanSensitiveDoubleNearApproximatelyMatchesDoubles)<sp/>{</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/>TestNearMatches(&amp;NanSensitiveDoubleNear);</highlight></codeline>
<codeline lineno="3079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleNearTest,<sp/>DoubleNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>DoubleNear(2.0,<sp/>0.5);</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m2<sp/>=<sp/>DoubleNear(0.5,<sp/>0.5);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m3<sp/>=<sp/>DoubleNear(nan1_,<sp/>0.0);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;never<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="3095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleNearTest,<sp/>ExplainsResultWhenMatchFails)<sp/>{</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(DoubleNear(2.0,<sp/>0.1),<sp/>2.05));</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>0.2<sp/>from<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Explain(DoubleNear(2.0,<sp/>0.1),<sp/>2.2));</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>-0.3<sp/>from<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Explain(DoubleNear(2.0,<sp/>0.1),<sp/>1.7));</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>explanation<sp/>=<sp/>Explain(DoubleNear(2.1,<sp/>1e-10),<sp/>2.1<sp/>+<sp/>1.2e-10);</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>C++<sp/>implementations<sp/>may<sp/>print<sp/>floating-point<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>slightly<sp/>differently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(explanation<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1.2e-10<sp/>from<sp/>2.1&quot;</highlight><highlight class="normal"><sp/>||<sp/><sp/></highlight><highlight class="comment">//<sp/>GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>explanation<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1.2e-010<sp/>from<sp/>2.1&quot;</highlight><highlight class="normal">)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>where<sp/>explanation<sp/>is<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>explanation<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleNearTest,<sp/>NanSensitiveDoubleNearCanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m1<sp/>=<sp/>NanSensitiveDoubleNear(2.0,<sp/>0.5);</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m1));</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>2<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m1));</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m2<sp/>=<sp/>NanSensitiveDoubleNear(0.5,<sp/>0.5);</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&lt;=<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>approximately<sp/>0.5<sp/>(absolute<sp/>error<sp/>&gt;<sp/>0.5)&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m2));</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m3<sp/>=<sp/>NanSensitiveDoubleNear(nan1_,<sp/>0.1);</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>Describe(m3));</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>NaN&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m3));</highlight></codeline>
<codeline lineno="3124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleNearTest,<sp/>DoubleNearCannotMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoubleNear<sp/>never<sp/>matches<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m<sp/>=<sp/>DoubleNear(ParentType::nan1_,<sp/>0.1);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="3132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(DoubleNearTest,<sp/>NanSensitiveDoubleNearCanMatchNaN)<sp/>{</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NanSensitiveDoubleNear<sp/>will<sp/>match<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&gt;</ref><sp/>m<sp/>=<sp/>NanSensitiveDoubleNear(nan1_,<sp/>0.1);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan1_));</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(nan2_));</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(1.0));</highlight></codeline>
<codeline lineno="3140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal">TEST(PointeeTest,<sp/>RawPointer)<sp/>{</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(Ge(0));</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;n));</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;n));</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="3150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal">TEST(PointeeTest,<sp/>RawPointerToConst)<sp/>{</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const double*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(Ge(0));</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;x));</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;x));</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="3160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal">TEST(PointeeTest,<sp/>ReferenceToConstRawPointer)<sp/>{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int* const &amp;&gt;</ref><sp/>m<sp/>=<sp/>Pointee(Ge(0));</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;n));</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;n));</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="3170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight></codeline>
<codeline lineno="3172"><highlight class="normal">TEST(PointeeTest,<sp/>ReferenceToNonConstRawPointer)<sp/>{</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double* &amp;&gt;</ref><sp/>m<sp/>=<sp/>Pointee(Ge(0));</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>&amp;x;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(p));</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(p));</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(p));</highlight></codeline>
<codeline lineno="3182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal">MATCHER_P(FieldIIs,<sp/>inner_matcher,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ExplainMatchResult(inner_matcher,<sp/>arg.i,<sp/>result_listener);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>SameType)<sp/>{</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>derived;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/>derived.i<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Right<sp/>type.<sp/>A<sp/>pointer<sp/>is<sp/>passed<sp/>down.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>*<sp/>as_base_ptr<sp/>=<sp/>&amp;derived;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,<sp/>WhenDynamicCastTo&lt;Derived*&gt;(Not(IsNull())));</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,<sp/>WhenDynamicCastTo&lt;Derived*&gt;(Pointee(FieldIIs(4))));</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Not(WhenDynamicCastTo&lt;Derived*&gt;(Pointee(FieldIIs(5)))));</highlight></codeline>
<codeline lineno="3200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>WrongTypes)<sp/>{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref><sp/>base;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>derived;</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_other_derived" kindref="compound">OtherDerived</ref><sp/>other_derived;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrong<sp/>types.<sp/>NULL<sp/>is<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;base,<sp/>Not(WhenDynamicCastTo&lt;Derived*&gt;(Pointee(_))));</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/>EXPECT_THAT(&amp;base,<sp/>WhenDynamicCastTo&lt;Derived*&gt;(IsNull()));</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>*<sp/>as_base_ptr<sp/>=<sp/>&amp;derived;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,<sp/>Not(WhenDynamicCastTo&lt;OtherDerived*&gt;(Pointee(_))));</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,<sp/>WhenDynamicCastTo&lt;OtherDerived*&gt;(IsNull()));</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/>as_base_ptr<sp/>=<sp/>&amp;other_derived;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,<sp/>Not(WhenDynamicCastTo&lt;Derived*&gt;(Pointee(_))));</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,<sp/>WhenDynamicCastTo&lt;Derived*&gt;(IsNull()));</highlight></codeline>
<codeline lineno="3216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"></highlight></codeline>
<codeline lineno="3218"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>AlreadyNull)<sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Already<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>*<sp/>as_base_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,<sp/>WhenDynamicCastTo&lt;Derived*&gt;(IsNull()));</highlight></codeline>
<codeline lineno="3222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AmbiguousCastTypes<sp/>{</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">VirtualDerived<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref><sp/>{};</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DerivedSub1<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>VirtualDerived<sp/>{};</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DerivedSub2<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>VirtualDerived<sp/>{};</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ManyDerivedInHierarchy<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DerivedSub1,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DerivedSub2<sp/>{};</highlight></codeline>
<codeline lineno="3229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>AmbiguousCast)<sp/>{</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>AmbiguousCastTypes::DerivedSub1<sp/>sub1;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/>AmbiguousCastTypes::ManyDerivedInHierarchy<sp/>many_derived;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>derived<sp/>from<sp/>Base.<sp/>dynamic_cast&lt;&gt;<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>*<sp/>as_base_ptr<sp/>=</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">AmbiguousCastTypes::DerivedSub1*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;many_derived);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ptr,</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WhenDynamicCastTo&lt;AmbiguousCastTypes::VirtualDerived*&gt;(IsNull()));</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/>as_base_ptr<sp/>=<sp/>&amp;sub1;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>as_base_ptr,</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WhenDynamicCastTo&lt;AmbiguousCastTypes::VirtualDerived*&gt;(Not(IsNull())));</highlight></codeline>
<codeline lineno="3243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>Describe)<sp/>{</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Base*&gt;</ref><sp/>matcher<sp/>=<sp/>WhenDynamicCastTo&lt;Derived*&gt;(Pointee(_));</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>prefix<sp/>=</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;when<sp/>dynamic_cast<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>internal::GetTypeName&lt;Derived*&gt;()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/>EXPECT_EQ(prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;points<sp/>to<sp/>a<sp/>value<sp/>that<sp/>is<sp/>anything&quot;</highlight><highlight class="normal">,<sp/>Describe(matcher));</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/>EXPECT_EQ(prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>point<sp/>to<sp/>a<sp/>value<sp/>that<sp/>is<sp/>anything&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(matcher));</highlight></codeline>
<codeline lineno="3252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>Explain)<sp/>{</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Base*&gt;</ref><sp/>matcher<sp/>=<sp/>WhenDynamicCastTo&lt;Derived*&gt;(Pointee(_));</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>*<sp/>null<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(matcher,<sp/>null),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>derived;</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(&amp;derived));</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(matcher,<sp/>&amp;derived),<sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>references,<sp/>the<sp/>matcher<sp/>itself<sp/>can<sp/>fail.<sp/>Test<sp/>for<sp/>that<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const Base&amp;&gt;</ref><sp/>ref_matcher<sp/>=<sp/>WhenDynamicCastTo&lt;const<sp/>OtherDerived&amp;&gt;(_);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Explain(ref_matcher,<sp/>derived),</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;which<sp/>cannot<sp/>be<sp/>dynamic_cast&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>GoodReference)<sp/>{</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>derived;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/>derived.i<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>&amp;<sp/>as_base_ref<sp/>=<sp/>derived;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ref,<sp/>WhenDynamicCastTo&lt;const<sp/>Derived&amp;&gt;(FieldIIs(4)));</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ref,<sp/>WhenDynamicCastTo&lt;const<sp/>Derived&amp;&gt;(Not(FieldIIs(5))));</highlight></codeline>
<codeline lineno="3274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal">TEST(WhenDynamicCastToTest,<sp/>BadReference)<sp/>{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived" kindref="compound">Derived</ref><sp/>derived;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_base" kindref="compound">Base</ref>&amp;<sp/>as_base_ref<sp/>=<sp/>derived;</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/>EXPECT_THAT(as_base_ref,<sp/>Not(WhenDynamicCastTo&lt;const<sp/>OtherDerived&amp;&gt;(_)));</highlight></codeline>
<codeline lineno="3280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_RTTI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Minimal<sp/>const-propagating<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3286" refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr</ref><sp/>{</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>element_type;</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr</ref>()<sp/>:<sp/>val_()<sp/>{}</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr</ref>(T*<sp/>t)<sp/>:<sp/>val_(t)<sp/>{}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr</ref>&amp;<sp/>other)<sp/>:<sp/>val_(other.val_)<sp/>{}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/>T*<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val_;<sp/>}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/>T&amp;<sp/>operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*val_;<sp/>}</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Most<sp/>smart<sp/>pointers<sp/>return<sp/>non-const<sp/>T*<sp/>and<sp/>T&amp;<sp/>from<sp/>the<sp/>next<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val_;<sp/>}</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*val_;<sp/>}</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>T*<sp/>val_;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal">TEST(PointeeTest,<sp/>WorksWithConstPropagatingPointers)<sp/>{</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt; ConstPropagatingPtr&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>Pointee(Lt(5));</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>three<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr&lt;int&gt;</ref><sp/>co(&amp;three);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr&lt;int&gt;</ref><sp/>o(&amp;three);</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(o));</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(co));</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/>*o<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(o));</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(<ref refid="classtesting_1_1gmock__matchers__test_1_1_const_propagating_ptr" kindref="compound">ConstPropagatingPtr&lt;int&gt;</ref>()));</highlight></codeline>
<codeline lineno="3314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal">TEST(PointeeTest,<sp/>NeverMatchesNull)<sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(_);</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="3319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>write<sp/>Pointee(value)<sp/>instead<sp/>of<sp/>Pointee(Eq(value)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal">TEST(PointeeTest,<sp/>MatchesAgainstAValue)<sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(5);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;n));</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;n));</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="3330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal">TEST(PointeeTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(Gt(3));</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;points<sp/>to<sp/>a<sp/>value<sp/>that<sp/>is<sp/>&gt;<sp/>3&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;does<sp/>not<sp/>point<sp/>to<sp/>a<sp/>value<sp/>that<sp/>is<sp/>&gt;<sp/>3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="3337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal">TEST(PointeeTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(StartsWith(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>static_cast&lt;const<sp/>string*&gt;(NULL)));</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;long*&gt;</ref><sp/>m2<sp/>=<sp/>Pointee(GreaterThan(1));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>3;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>3&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;long&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>2<sp/>more<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m2,<sp/>&amp;n));</highlight></codeline>
<codeline lineno="3348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal">TEST(PointeeTest,<sp/>AlwaysExplainsPointee)<sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int*&gt;</ref><sp/>m<sp/>=<sp/>Pointee(0);</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>42;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>42&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">),<sp/>Explain(m,<sp/>&amp;n));</highlight></codeline>
<codeline lineno="3354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>uncopyable<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357" refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref>()<sp/>:<sp/>value_(-1)<sp/>{}</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_value(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/>value_<sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref>);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>x.value()<sp/>is<sp/>positive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ValueIsPositive(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref>&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.value()<sp/>&gt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight></codeline>
<codeline lineno="3373"><highlight class="normal">MATCHER_P(UncopyableIs,<sp/>inner_matcher,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ExplainMatchResult(inner_matcher,<sp/>arg.value(),<sp/>result_listener);</highlight></codeline>
<codeline lineno="3375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>struct<sp/>for<sp/>testing<sp/>Field().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3378" refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref>()<sp/>:<sp/>x(0),<sp/>y(1.0),<sp/>z(5),<sp/>p(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>x(rhs.x),<sp/>y(rhs.y),<sp/>z(rhs.z.value()),<sp/>p(rhs.p)<sp/>{}</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>non-const<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>const<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref><sp/>z;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>uncopyable<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>pointer<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref>);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>derived<sp/>struct<sp/>for<sp/>testing<sp/>Field().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3393" refid="structtesting_1_1gmock__matchers__test_1_1_derived_struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_derived_struct" kindref="compound">DerivedStruct</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="structtesting_1_1gmock__matchers__test_1_1_derived_struct" kindref="compound">DerivedStruct</ref>);</highlight></codeline>
<codeline lineno="3398"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field(&amp;Foo::field,<sp/>...)<sp/>works<sp/>when<sp/>field<sp/>is<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal">TEST(FieldTest,<sp/>WorksForNonConstField)<sp/>{</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AStruct&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field(&amp;Foo::field,<sp/>...)<sp/>works<sp/>when<sp/>field<sp/>is<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal">TEST(FieldTest,<sp/>WorksForConstField)<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AStruct&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::y,<sp/>Ge(0.0));</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Field(&amp;AStruct::y,<sp/>Le(0.0));</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field(&amp;Foo::field,<sp/>...)<sp/>works<sp/>when<sp/>field<sp/>is<sp/>not<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal">TEST(FieldTest,<sp/>WorksForUncopyableField)<sp/>{</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AStruct&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::z,<sp/>Truly(ValueIsPositive));</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Field(&amp;AStruct::z,<sp/>Not(Truly(ValueIsPositive)));</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field(&amp;Foo::field,<sp/>...)<sp/>works<sp/>when<sp/>field<sp/>is<sp/>a<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal">TEST(FieldTest,<sp/>WorksForPointerField)<sp/>{</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matching<sp/>against<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AStruct&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::p,<sp/>static_cast&lt;const<sp/>char*&gt;(NULL));</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/>a.p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Matching<sp/>a<sp/>pointer<sp/>that<sp/>is<sp/>not<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Field(&amp;AStruct::p,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/>a.p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hill&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/>a.p<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hole&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>works<sp/>when<sp/>the<sp/>object<sp/>is<sp/>passed<sp/>by<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal">TEST(FieldTest,<sp/>WorksForByRefArgument)<sp/>{</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct&amp;&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field(&amp;Foo::field,<sp/>...)<sp/>works<sp/>when<sp/>the<sp/>argument&apos;s<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>sub-type<sp/>of<sp/>Foo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal">TEST(FieldTest,<sp/>WorksForArgumentOfSubType)<sp/>{</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>matcher<sp/>expects<sp/>DerivedStruct<sp/>but<sp/>we<sp/>say<sp/>AStruct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inside<sp/>Field().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const DerivedStruct&amp;&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_derived_struct" kindref="compound">DerivedStruct</ref><sp/>d;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(d));</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/>d.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(d));</highlight></codeline>
<codeline lineno="3468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field(&amp;Foo::field,<sp/>m)<sp/>works<sp/>when<sp/>field&apos;s<sp/>type<sp/>and<sp/>m&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>type<sp/>are<sp/>compatible<sp/>but<sp/>not<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal">TEST(FieldTest,<sp/>WorksForCompatibleMatcherType)<sp/>{</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>field<sp/>is<sp/>an<sp/>int,<sp/>but<sp/>the<sp/>inner<sp/>matcher<sp/>expects<sp/>a<sp/>signed<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct&amp;&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;signed char&gt;</ref>(Ge(0)));</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>can<sp/>describe<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal">TEST(FieldTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct&amp;&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>field<sp/>is<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>field<sp/>isn&apos;t<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="3489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>can<sp/>explain<sp/>the<sp/>match<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal">TEST(FieldTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct&amp;&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>given<sp/>field<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">),<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>GreaterThan(0));</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>given<sp/>field<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="3503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal">TEST(FieldForPointerTest,<sp/>WorksForPointerToConst)<sp/>{</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct*&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal">TEST(FieldForPointerTest,<sp/>WorksForPointerToNonConst)<sp/>{</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AStruct*&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>is<sp/>a<sp/>reference<sp/>to<sp/>a<sp/>const<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal">TEST(FieldForPointerTest,<sp/>WorksForReferenceToConstPointer)<sp/>{</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AStruct* const&amp;&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>does<sp/>not<sp/>match<sp/>the<sp/>NULL<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal">TEST(FieldForPointerTest,<sp/>DoesNotMatchNull)<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct*&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>_);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="3539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field(&amp;Foo::field,<sp/>...)<sp/>works<sp/>when<sp/>the<sp/>argument&apos;s<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>sub-type<sp/>of<sp/>const<sp/>Foo*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal">TEST(FieldForPointerTest,<sp/>WorksForArgumentOfSubType)<sp/>{</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>matcher<sp/>expects<sp/>DerivedStruct<sp/>but<sp/>we<sp/>say<sp/>AStruct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>inside<sp/>Field().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;DerivedStruct*&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_derived_struct" kindref="compound">DerivedStruct</ref><sp/>d;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;d));</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/>d.x<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;d));</highlight></codeline>
<codeline lineno="3552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>can<sp/>describe<sp/>itself<sp/>when<sp/>used<sp/>to<sp/>match<sp/>a<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal">TEST(FieldForPointerTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct*&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>field<sp/>is<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>field<sp/>isn&apos;t<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="3560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"></highlight></codeline>
<codeline lineno="3562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Field()<sp/>can<sp/>explain<sp/>the<sp/>result<sp/>of<sp/>matching<sp/>a<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3563"><highlight class="normal">TEST(FieldForPointerTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AStruct*&gt;</ref><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><ref refid="structtesting_1_1gmock__matchers__test_1_1_a_struct" kindref="compound">AStruct</ref><sp/>a;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/>a.x<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>static_cast&lt;const<sp/>AStruct*&gt;(NULL)));</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>field<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>&amp;a));</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"></highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Field(&amp;AStruct::x,<sp/>GreaterThan(0));</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>field<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>&amp;a));</highlight></codeline>
<codeline lineno="3575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user-defined<sp/>class<sp/>for<sp/>testing<sp/>Property().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578" refid="classtesting_1_1gmock__matchers__test_1_1_a_class" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>{</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref>()<sp/>:<sp/>n_(0)<sp/>{}</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>getter<sp/>that<sp/>returns<sp/>a<sp/>non-reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_;<sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_n(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_n)<sp/>{<sp/>n_<sp/>=<sp/>new_n;<sp/>}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>getter<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_;<sp/>}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_s(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>new_s)<sp/>{<sp/>s_<sp/>=<sp/>new_s;<sp/>}</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>getter<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x_;<sp/>}</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s_;</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x_;</highlight></codeline>
<codeline lineno="3599"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>AClass::x_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>derived<sp/>class<sp/>for<sp/>testing<sp/>Property().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3604" refid="classtesting_1_1gmock__matchers__test_1_1_derived_class" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived_class" kindref="compound">DerivedClass</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>{</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k_;<sp/>}</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k_;</highlight></codeline>
<codeline lineno="3609"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property(&amp;Foo::property,<sp/>...)<sp/>works<sp/>when<sp/>property()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>non-reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal">TEST(PropertyTest,<sp/>WorksForNonReferenceProperty)<sp/>{</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/>a.set_n(1);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/>a.set_n(-1);</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property(&amp;Foo::property,<sp/>...)<sp/>works<sp/>when<sp/>property()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal">TEST(PropertyTest,<sp/>WorksForReferenceToConstProperty)<sp/>{</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::s,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"></highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hole&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"></highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property(&amp;Foo::property,<sp/>...)<sp/>works<sp/>when<sp/>property()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal">TEST(PropertyTest,<sp/>WorksForReferenceToNonConstProperty)<sp/>{</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::x,<sp/>Ref(x));</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Property(&amp;AClass::x,<sp/>Not(Ref(x)));</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property(&amp;Foo::property,<sp/>...)<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>passed<sp/>by<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal">TEST(PropertyTest,<sp/>WorksForByValueArgument)<sp/>{</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AClass&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::s,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hole&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property(&amp;Foo::property,<sp/>...)<sp/>works<sp/>when<sp/>the<sp/>argument&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>a<sp/>sub-type<sp/>of<sp/>Foo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal">TEST(PropertyTest,<sp/>WorksForArgumentOfSubType)<sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>expects<sp/>a<sp/>DerivedClass,<sp/>but<sp/>inside<sp/>the<sp/>Property()<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>say<sp/>AClass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const DerivedClass&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived_class" kindref="compound">DerivedClass</ref><sp/>d;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>d.set_n(1);</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(d));</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/>d.set_n(-1);</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(d));</highlight></codeline>
<codeline lineno="3676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property(&amp;Foo::property,<sp/>m)<sp/>works<sp/>when<sp/>property()&apos;s<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>m&apos;s<sp/>argument<sp/>type<sp/>are<sp/>compatible<sp/>but<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3680"><highlight class="normal">TEST(PropertyTest,<sp/>WorksForCompatibleMatcherType)<sp/>{</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>n()<sp/>returns<sp/>an<sp/>int<sp/>but<sp/>the<sp/>inner<sp/>matcher<sp/>expects<sp/>a<sp/>signed<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;signed char&gt;</ref>(Ge(0)));</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(a));</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/>a.set_n(-1);</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(a));</highlight></codeline>
<codeline lineno="3689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"></highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>can<sp/>describe<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal">TEST(PropertyTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>property<sp/>is<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>property<sp/>isn&apos;t<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="3698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight></codeline>
<codeline lineno="3700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>can<sp/>explain<sp/>the<sp/>match<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3701"><highlight class="normal">TEST(PropertyTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/>a.set_n(1);</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>given<sp/>property<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">),<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>GreaterThan(0));</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>given<sp/>property<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="3712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal">TEST(PropertyForPointerTest,<sp/>WorksForPointerToConst)<sp/>{</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass*&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/>a.set_n(1);</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/>a.set_n(-1);</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal">TEST(PropertyForPointerTest,<sp/>WorksForPointerToNonConst)<sp/>{</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AClass*&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::s,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hole&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>works<sp/>when<sp/>the<sp/>argument<sp/>is<sp/>a<sp/>reference<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal">TEST(PropertyForPointerTest,<sp/>WorksForReferenceToConstPointer)<sp/>{</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;AClass* const&amp;&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::s,<sp/>StartsWith(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/>a.set_s(</highlight><highlight class="stringliteral">&quot;hole&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;a));</highlight></codeline>
<codeline lineno="3749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>does<sp/>not<sp/>match<sp/>the<sp/>NULL<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal">TEST(PropertyForPointerTest,<sp/>WorksForReferenceToNonConstProperty)<sp/>{</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass*&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::x,<sp/>_);</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(NULL));</highlight></codeline>
<codeline lineno="3755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property(&amp;Foo::property,<sp/>...)<sp/>works<sp/>when<sp/>the<sp/>argument&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>a<sp/>sub-type<sp/>of<sp/>const<sp/>Foo*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal">TEST(PropertyForPointerTest,<sp/>WorksForArgumentOfSubType)<sp/>{</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>matcher<sp/>expects<sp/>a<sp/>DerivedClass,<sp/>but<sp/>inside<sp/>the<sp/>Property()<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>say<sp/>AClass.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const DerivedClass*&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_derived_class" kindref="compound">DerivedClass</ref><sp/>d;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/>d.set_n(1);</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(&amp;d));</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"></highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/>d.set_n(-1);</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(&amp;d));</highlight></codeline>
<codeline lineno="3770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>can<sp/>describe<sp/>itself<sp/>when<sp/>used<sp/>to<sp/>match<sp/>a<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3773"><highlight class="normal">TEST(PropertyForPointerTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass*&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>property<sp/>is<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>property<sp/>isn&apos;t<sp/>&gt;=<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="3779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>Property()<sp/>can<sp/>explain<sp/>the<sp/>result<sp/>of<sp/>matching<sp/>a<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal">TEST(PropertyForPointerTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const AClass*&gt;</ref><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>Ge(0));</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_a_class" kindref="compound">AClass</ref><sp/>a;</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/>a.set_n(1);</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>static_cast&lt;const<sp/>AClass*&gt;(NULL)));</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>property<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>&amp;a));</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Property(&amp;AClass::n,<sp/>GreaterThan(0));</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>points<sp/>to<sp/>an<sp/>object<sp/>whose<sp/>given<sp/>property<sp/>is<sp/>1&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>&amp;a));</highlight></codeline>
<codeline lineno="3796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ResultOf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>...)<sp/>compiles<sp/>and<sp/>works<sp/>as<sp/>expected<sp/>when<sp/>f<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>IntToStringFunction(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForFunctionPointers)<sp/>{</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(&amp;IntToStringFunction,<sp/>Eq(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(1));</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(2));</highlight></codeline>
<codeline lineno="3809"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf()<sp/>can<sp/>describe<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="normal">TEST(ResultOfTest,<sp/>CanDescribeItself)<sp/>{</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(&amp;IntToStringFunction,<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>mapped<sp/>by<sp/>the<sp/>given<sp/>callable<sp/>to<sp/>a<sp/>value<sp/>that<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>equal<sp/>to<sp/>\&quot;foo\&quot;&quot;</highlight><highlight class="normal">,<sp/>Describe(matcher));</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>mapped<sp/>by<sp/>the<sp/>given<sp/>callable<sp/>to<sp/>a<sp/>value<sp/>that<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>equal<sp/>to<sp/>\&quot;foo\&quot;&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(matcher));</highlight></codeline>
<codeline lineno="3819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"></highlight></codeline>
<codeline lineno="3821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf()<sp/>can<sp/>explain<sp/>the<sp/>match<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IntFunction(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input<sp/>==<sp/>42<sp/>?<sp/>80<sp/>:<sp/>90;<sp/>}</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal">TEST(ResultOfTest,<sp/>CanExplainMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(&amp;IntFunction,<sp/>Ge(85));</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>mapped<sp/>by<sp/>the<sp/>given<sp/>callable<sp/>to<sp/>90&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(matcher,<sp/>36));</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/>matcher<sp/>=<sp/>ResultOf(&amp;IntFunction,<sp/>GreaterThan(85));</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>mapped<sp/>by<sp/>the<sp/>given<sp/>callable<sp/>to<sp/>90&quot;</highlight><highlight class="normal"><sp/>+<sp/>OfType(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">)<sp/>+</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,<sp/>which<sp/>is<sp/>5<sp/>more<sp/>than<sp/>85&quot;</highlight><highlight class="normal">,<sp/>Explain(matcher,<sp/>36));</highlight></codeline>
<codeline lineno="3832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>...)<sp/>compiles<sp/>and<sp/>works<sp/>as<sp/>expected<sp/>when<sp/>f(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>non-reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForNonReferenceResults)<sp/>{</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(&amp;IntFunction,<sp/>Eq(80));</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(42));</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(36));</highlight></codeline>
<codeline lineno="3841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>...)<sp/>compiles<sp/>and<sp/>works<sp/>as<sp/>expected<sp/>when<sp/>f(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>DoubleFunction(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>input)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref>&amp;<sp/>RefUncopyableFunction(<ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref>&amp;<sp/>obj)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForReferenceToNonConstResults)<sp/>{</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>3.14;</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x2<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;double&amp;&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(&amp;DoubleFunction,<sp/>Ref(x));</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(x));</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(x2));</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>ResultOf<sp/>works<sp/>with<sp/>uncopyable<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref><sp/>obj(0);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref><sp/>obj2(0);</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;Uncopyable&amp;&gt;</ref><sp/>matcher2<sp/>=</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResultOf(&amp;RefUncopyableFunction,<sp/>Ref(obj));</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher2.Matches(obj));</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher2.Matches(obj2));</highlight></codeline>
<codeline lineno="3867"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>...)<sp/>compiles<sp/>and<sp/>works<sp/>as<sp/>expected<sp/>when<sp/>f(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>StringFunction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>input)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input;<sp/>}</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForReferenceToConstResults)<sp/>{</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s2<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const string&amp;&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(&amp;StringFunction,<sp/>Ref(s));</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(s));</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(s2));</highlight></codeline>
<codeline lineno="3880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>m)<sp/>works<sp/>when<sp/>f(x)<sp/>and<sp/>m&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>types<sp/>are<sp/>compatible<sp/>but<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForCompatibleMatcherTypes)<sp/>{</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IntFunction()<sp/>returns<sp/>int<sp/>but<sp/>the<sp/>inner<sp/>matcher<sp/>expects<sp/>a<sp/>signed<sp/>char.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(IntFunction,<sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;signed char&gt;</ref>(Ge(85)));</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(36));</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(42));</highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>program<sp/>aborts<sp/>when<sp/>ResultOf<sp/>is<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>NULL<sp/>function<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal">TEST(ResultOfDeathTest,<sp/>DiesOnNullFunctionPointers)<sp/>{</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/>EXPECT_DEATH_IF_SUPPORTED(</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ResultOf(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(*)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(NULL),<sp/>Eq(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;NULL<sp/>function<sp/>pointer<sp/>is<sp/>passed<sp/>into<sp/>ResultOf\\(\\)\\.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>...)<sp/>compiles<sp/>and<sp/>works<sp/>as<sp/>expected<sp/>when<sp/>f<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForFunctionReferences)<sp/>{</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(IntToStringFunction,<sp/>StrEq(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(1));</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(2));</highlight></codeline>
<codeline lineno="3906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>...)<sp/>compiles<sp/>and<sp/>works<sp/>as<sp/>expected<sp/>when<sp/>f<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3910" refid="structtesting_1_1gmock__matchers__test_1_1_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_functor" kindref="compound">Functor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::std::unary_function&lt;int,<sp/>string&gt;<sp/>{</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/>result_type<sp/>operator()(argument_type<sp/>input)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntToStringFunction(input);</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3914"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForFunctors)<sp/>{</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher<sp/>=<sp/>ResultOf(<ref refid="structtesting_1_1gmock__matchers__test_1_1_functor" kindref="compound">Functor</ref>(),<sp/>Eq(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher.Matches(1));</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher.Matches(2));</highlight></codeline>
<codeline lineno="3921"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ResultOf(f,<sp/>...)<sp/>compiles<sp/>and<sp/>works<sp/>as<sp/>expected<sp/>when<sp/>f<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functor<sp/>with<sp/>more<sp/>then<sp/>one<sp/>operator()<sp/>defined.<sp/>ResultOf()<sp/>must<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>defined<sp/>operator().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926" refid="structtesting_1_1gmock__matchers__test_1_1_polymorphic_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_polymorphic_functor" kindref="compound">PolymorphicFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result_type;</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(s));<sp/>}</highlight></codeline>
<codeline lineno="3930"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight></codeline>
<codeline lineno="3932"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForPolymorphicFunctors)<sp/>{</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>matcher_int<sp/>=<sp/>ResultOf(<ref refid="structtesting_1_1gmock__matchers__test_1_1_polymorphic_functor" kindref="compound">PolymorphicFunctor</ref>(),<sp/>Ge(5));</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher_int.Matches(10));</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher_int.Matches(2));</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const char*&gt;</ref><sp/>matcher_string<sp/>=<sp/>ResultOf(<ref refid="structtesting_1_1gmock__matchers__test_1_1_polymorphic_functor" kindref="compound">PolymorphicFunctor</ref>(),<sp/>Ge(5));</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher_string.Matches(</highlight><highlight class="stringliteral">&quot;long<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher_string.Matches(</highlight><highlight class="stringliteral">&quot;shrt&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ReferencingFunction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;n;<sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946" refid="structtesting_1_1gmock__matchers__test_1_1_referencing_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__matchers__test_1_1_referencing_functor" kindref="compound">ReferencingFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>result_type;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/>result_type<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;n;<sp/>}</highlight></codeline>
<codeline lineno="3949"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal">TEST(ResultOfTest,<sp/>WorksForReferencingCallables)<sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n2<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>matcher2<sp/>=<sp/>ResultOf(ReferencingFunction,<sp/>Eq(&amp;n));</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher2.Matches(n));</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher2.Matches(n2));</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int&amp;&gt;</ref><sp/>matcher3<sp/>=<sp/>ResultOf(<ref refid="structtesting_1_1gmock__matchers__test_1_1_referencing_functor" kindref="compound">ReferencingFunctor</ref>(),<sp/>Eq(&amp;n));</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(matcher3.Matches(n));</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(matcher3.Matches(n2));</highlight></codeline>
<codeline lineno="3961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight></codeline>
<codeline lineno="3963" refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_divider)<sp/>:<sp/>divider_(a_divider)<sp/>{}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>using<sp/>ExplainMatchResultTo()<sp/>with<sp/>polymorphic<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>n,<sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref>*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(n<sp/>%<sp/>divider_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>modulo<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>divider_;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>%<sp/>divider_)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>divisible<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>divider_;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>not<sp/>divisible<sp/>by<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>divider_;</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_divider(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_divider)<sp/>{<sp/>divider_<sp/>=<sp/>a_divider;<sp/>}</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divider()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>divider_;<sp/>}</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>divider_;</highlight></codeline>
<codeline lineno="3988"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher&lt;DivisibleByImpl&gt;</ref><sp/>DivisibleBy(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(<ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref>(n));</highlight></codeline>
<codeline lineno="3992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>AllOf()<sp/>fails,<sp/>only<sp/>the<sp/>first<sp/>failing<sp/>matcher<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight><highlight class="comment">//<sp/>asked<sp/>to<sp/>explain<sp/>why.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>AllOf_False_False)<sp/>{</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AllOf(DivisibleBy(4),<sp/>DivisibleBy(3));</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>modulo<sp/>4&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="3999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>AllOf()<sp/>fails,<sp/>only<sp/>the<sp/>first<sp/>failing<sp/>matcher<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>asked<sp/>to<sp/>explain<sp/>why.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>AllOf_False_True)<sp/>{</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AllOf(DivisibleBy(4),<sp/>DivisibleBy(3));</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>2<sp/>modulo<sp/>4&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>6));</highlight></codeline>
<codeline lineno="4006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>AllOf()<sp/>fails,<sp/>only<sp/>the<sp/>first<sp/>failing<sp/>matcher<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>asked<sp/>to<sp/>explain<sp/>why.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>AllOf_True_False)<sp/>{</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AllOf(Ge(1),<sp/>DivisibleBy(3));</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>2<sp/>modulo<sp/>3&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>5));</highlight></codeline>
<codeline lineno="4013"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>when<sp/>AllOf()<sp/>succeeds,<sp/>all<sp/>matchers<sp/>are<sp/>asked<sp/>to<sp/>explain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>why.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>AllOf_True_True)<sp/>{</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AllOf(DivisibleBy(2),<sp/>DivisibleBy(3));</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>0<sp/>modulo<sp/>2,<sp/>and<sp/>which<sp/>is<sp/>0<sp/>modulo<sp/>3&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>6));</highlight></codeline>
<codeline lineno="4020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal">TEST(ExplainMatchResultTest,<sp/>AllOf_True_True_2)<sp/>{</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>AllOf(Ge(2),<sp/>Le(3));</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>2));</highlight></codeline>
<codeline lineno="4025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal">TEST(ExplainmatcherResultTest,<sp/>MonomorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>m<sp/>=<sp/>GreaterThan(5);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>5&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>6));</highlight></codeline>
<codeline lineno="4030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>two<sp/>tests<sp/>verify<sp/>that<sp/>values<sp/>without<sp/>a<sp/>public<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ctor<sp/>can<sp/>be<sp/>used<sp/>as<sp/>arguments<sp/>to<sp/>matchers<sp/>like<sp/>Eq(),<sp/>Ge(),<sp/>and<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>help<sp/>of<sp/>ByRef().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036" refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value()<sp/>==<sp/>rhs.value();</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&gt;=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value()<sp/>&gt;=<sp/>rhs.value();</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"></highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref>);</highlight></codeline>
<codeline lineno="4053"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"></highlight></codeline>
<codeline lineno="4055"><highlight class="normal">TEST(ByRefTest,<sp/>AllowsNotCopyableConstValueInMatchers)<sp/>{</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref><sp/>const_value1(1);</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const NotCopyable&amp;&gt;</ref><sp/>m<sp/>=<sp/>Eq(ByRef(const_value1));</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref><sp/>n1(1),<sp/>n2(2);</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n1));</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(n2));</highlight></codeline>
<codeline lineno="4062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal">TEST(ByRefTest,<sp/>AllowsNotCopyableValueInMatchers)<sp/>{</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref><sp/>value2(2);</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;NotCopyable&amp;&gt;</ref><sp/>m<sp/>=<sp/>Ge(ByRef(value2));</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_not_copyable" kindref="compound">NotCopyable</ref><sp/>n1(1),<sp/>n2(2);</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(n1));</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(n2));</highlight></codeline>
<codeline lineno="4071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal">TEST(IsEmptyTest,<sp/>ImplementsIsEmpty)<sp/>{</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>IsEmpty());</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/>container.push_back(1);</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="4080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal">TEST(IsEmptyTest,<sp/>WorksWithString)<sp/>{</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>text;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/>EXPECT_THAT(text,<sp/>IsEmpty());</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/>EXPECT_THAT(text,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/>text<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/>EXPECT_THAT(text,<sp/>Not(IsEmpty()));</highlight></codeline>
<codeline lineno="4089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal">TEST(IsEmptyTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>IsEmpty();</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>empty&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>empty&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="4095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal">TEST(IsEmptyTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>IsEmpty();</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>container));</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>is<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>container));</highlight></codeline>
<codeline lineno="4103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal">TEST(SizeIsTest,<sp/>ImplementsSizeIs)<sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(0));</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(SizeIs(1)));</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(SizeIs(0)));</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(1));</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(SizeIs(0)));</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(2));</highlight></codeline>
<codeline lineno="4115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal">TEST(SizeIsTest,<sp/>WorksWithMap)<sp/>{</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(0));</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(SizeIs(1)));</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/>container.insert(make_pair(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(SizeIs(0)));</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(1));</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/>container.insert(make_pair(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>2));</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(SizeIs(0)));</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>SizeIs(2));</highlight></codeline>
<codeline lineno="4127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal">TEST(SizeIsTest,<sp/>WorksWithReferences)<sp/>{</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const vector&lt;int&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>SizeIs(1);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(m));</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>m);</highlight></codeline>
<codeline lineno="4135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal">TEST(SizeIsTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>SizeIs(2);</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;size<sp/>is<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;size<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,<sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="4141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal">TEST(SizeIsTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m1<sp/>=<sp/>SizeIs(2);</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m2<sp/>=<sp/>SizeIs(Lt(2u));</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m3<sp/>=<sp/>SizeIs(AnyOf(0,<sp/>3));</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m4<sp/>=<sp/>SizeIs(GreaterThan(1));</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>0<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>container));</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>0<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>container));</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>0<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Explain(m3,<sp/>container));</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>0<sp/>doesn&apos;t<sp/>match,<sp/>which<sp/>is<sp/>1<sp/>less<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m4,<sp/>container));</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>2<sp/>matches&quot;</highlight><highlight class="normal">,<sp/>Explain(m1,<sp/>container));</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>2<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,<sp/>Explain(m2,<sp/>container));</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>2<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,<sp/>Explain(m3,<sp/>container));</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>size<sp/>2<sp/>matches,<sp/>which<sp/>is<sp/>1<sp/>more<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m4,<sp/>container));</highlight></codeline>
<codeline lineno="4161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TYPED_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ContainerEq<sp/>with<sp/>different<sp/>container<sp/>types,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>element<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ContainerEqTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{};</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>testing::Types&lt;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/>set&lt;int&gt;,</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;size_t&gt;,</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/>multiset&lt;size_t&gt;,</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;int&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/>ContainerEqTestTypes;</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal">TYPED_TEST_CASE(ContainerEqTest,<sp/>ContainerEqTestTypes);</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>filled<sp/>container<sp/>is<sp/>equal<sp/>to<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>EqualsSelf)<sp/>{</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;TypeParam&gt;</ref><sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(my_set));</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>my_set));</highlight></codeline>
<codeline lineno="4186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight></codeline>
<codeline lineno="4188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>missing<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4189"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>ValueMissing)<sp/>{</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{2,<sp/>1,<sp/>8,<sp/>5};</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>4);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;TypeParam&gt;</ref><sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4201"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>ValueAdded)<sp/>{</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>5,<sp/>8,<sp/>46};</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const TypeParam&amp;&gt;</ref><sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>46&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>and<sp/>missing<sp/>values<sp/>are<sp/>reported<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>ValueAddedAndRemoved)<sp/>{</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>8,<sp/>46};</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;TypeParam&gt;</ref><sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>46,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>duplicated<sp/>value<sp/>--<sp/>expect<sp/>no<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal">TYPED_TEST(ContainerEqTest,<sp/>DuplicateDifference)<sp/>{</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/>TypeParam<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/>TypeParam<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const TypeParam&amp;&gt;</ref><sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Depending<sp/>on<sp/>the<sp/>container,<sp/>match<sp/>may<sp/>be<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>in<sp/>any<sp/>case<sp/>there<sp/>should<sp/>be<sp/>no<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_TYPED_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>mutliple<sp/>missing<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>just<sp/>vector<sp/>here,<sp/>so<sp/>order<sp/>is<sp/>predicatble.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultipleValuesMissing)<sp/>{</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{2,<sp/>1,<sp/>5};</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>3,<sp/>8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"></highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>values<sp/>are<sp/>reported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>just<sp/>vector<sp/>here,<sp/>so<sp/>order<sp/>is<sp/>predicatble.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4252"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultipleValuesAdded)<sp/>{</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>92,<sp/>3,<sp/>5,<sp/>8,<sp/>46};</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>7);</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const list&lt;size_t&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>92,<sp/>46&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>added<sp/>and<sp/>missing<sp/>values<sp/>are<sp/>reported<sp/>together.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultipleValuesAddedAndRemoved)<sp/>{</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>92,<sp/>46};</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/>list&lt;size_t&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const list&lt;size_t&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>92,<sp/>46,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>5,<sp/>8&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>to<sp/>see<sp/>that<sp/>duplicate<sp/>elements<sp/>are<sp/>detected,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>(as<sp/>above)<sp/>not<sp/>reported<sp/>in<sp/>the<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>MultiSetOfIntDuplicateDifference)<sp/>{</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vals[]<sp/>=<sp/>{1,<sp/>1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>test_vals[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>5,<sp/>8};</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>my_set(vals,<sp/>vals<sp/>+<sp/>6);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>test_set(test_vals,<sp/>test_vals<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_set);</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(my_set));</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_set));</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>nothing<sp/>to<sp/>report<sp/>when<sp/>both<sp/>sets<sp/>contain<sp/>all<sp/>the<sp/>same<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>test_set));</highlight></codeline>
<codeline lineno="4288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ContainerEq<sp/>works<sp/>for<sp/>non-trivial<sp/>associative<sp/>containers,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>like<sp/>maps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4292"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForMaps)<sp/>{</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>std::string&gt;<sp/>my_map;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/>my_map[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/>my_map[1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/>map&lt;int,<sp/>std::string&gt;<sp/>test_map;</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/>test_map[0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;aa&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/>test_map[1]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"></highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const map&lt;int, std::string&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>ContainerEq(my_map);</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(m.Matches(my_map));</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(m.Matches(test_map));</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>these<sp/>unexpected<sp/>elements:<sp/>(0,<sp/>\&quot;aa\&quot;),\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>doesn&apos;t<sp/>have<sp/>these<sp/>expected<sp/>elements:<sp/>(0,<sp/>\&quot;a\&quot;)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>test_map));</highlight></codeline>
<codeline lineno="4308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[]<sp/>=<sp/>{1,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ContainerEq(a2));</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>Not(ContainerEq(b)));</highlight></codeline>
<codeline lineno="4317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForTwoDimensionalNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a1[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a2[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[][3]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ContainerEq()<sp/>in<sp/>the<sp/>first<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ContainerEq(a2));</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>Not(ContainerEq(b)));</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ContainerEq()<sp/>in<sp/>the<sp/>second<sp/>dimension.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ElementsAre(ContainerEq(a2[0]),<sp/>ContainerEq(a2[1])));</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>ElementsAre(Not(ContainerEq(b[0])),<sp/>ContainerEq(a2[1])));</highlight></codeline>
<codeline lineno="4331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>WorksForNativeArrayAsTuple)<sp/>{</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(p1,<sp/>3),<sp/>ContainerEq(a2));</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(p1,<sp/>3),<sp/>Not(ContainerEq(b)));</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c[]<sp/>=<sp/>{1,<sp/>3,<sp/>2};</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(p1,<sp/>3),<sp/>Not(ContainerEq(c)));</highlight></codeline>
<codeline lineno="4344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal">TEST(ContainerEqExtraTest,<sp/>CopiesNativeArrayParameter)<sp/>{</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/>std::string<sp/>a1[][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;bye&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;see<sp/>you&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/>std::string<sp/>a2[][3]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;bye&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;see<sp/>you&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ciao&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::string(&amp;)[2][3]&gt;</ref><sp/>m<sp/>=<sp/>ContainerEq(a2);</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>m);</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/>a2[0][0]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ha&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a1,<sp/>m);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal">TEST(WhenSortedByTest,<sp/>WorksForEmptyContainer)<sp/>{</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>numbers;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>WhenSortedBy(less&lt;int&gt;(),<sp/>ElementsAre()));</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>Not(WhenSortedBy(less&lt;int&gt;(),<sp/>ElementsAre(1))));</highlight></codeline>
<codeline lineno="4368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal">TEST(WhenSortedByTest,<sp/>WorksForNonEmptyContainer)<sp/>{</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/>vector&lt;unsigned&gt;<sp/>numbers;</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>numbers.push_back(3);</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/>numbers.push_back(1);</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/>numbers.push_back(2);</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/>numbers.push_back(2);</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>WhenSortedBy(greater&lt;unsigned&gt;(),</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(3,<sp/>2,<sp/>2,<sp/>1)));</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>Not(WhenSortedBy(greater&lt;unsigned&gt;(),</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(1,<sp/>2,<sp/>2,<sp/>3))));</highlight></codeline>
<codeline lineno="4380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal">TEST(WhenSortedByTest,<sp/>WorksForNonVectorContainer)<sp/>{</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/>list&lt;string&gt;<sp/>words;</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/>words.push_back(</highlight><highlight class="stringliteral">&quot;say&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/>words.push_back(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>words.push_back(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/>EXPECT_THAT(words,<sp/>WhenSortedBy(less&lt;string&gt;(),</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;say&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/>EXPECT_THAT(words,<sp/>Not(WhenSortedBy(less&lt;string&gt;(),</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(</highlight><highlight class="stringliteral">&quot;say&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="4391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal">TEST(WhenSortedByTest,<sp/>WorksForNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numbers[]<sp/>=<sp/>{1,<sp/>3,<sp/>2,<sp/>4};</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sorted_numbers[]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>WhenSortedBy(less&lt;int&gt;(),<sp/>ElementsAre(1,<sp/>2,<sp/>3,<sp/>4)));</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>WhenSortedBy(less&lt;int&gt;(),</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAreArray(sorted_numbers)));</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>Not(WhenSortedBy(less&lt;int&gt;(),<sp/>ElementsAre(1,<sp/>3,<sp/>2,<sp/>4))));</highlight></codeline>
<codeline lineno="4400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal">TEST(WhenSortedByTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>WhenSortedBy(less&lt;int&gt;(),<sp/>ElementsAre(1,<sp/>2));</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(when<sp/>sorted)<sp/>has<sp/>2<sp/>elements<sp/>where\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#0<sp/>is<sp/>equal<sp/>to<sp/>1,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#1<sp/>is<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(when<sp/>sorted)<sp/>doesn&apos;t<sp/>have<sp/>2<sp/>elements,<sp/>or\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#0<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>1,<sp/>or\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#1<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="4412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal">TEST(WhenSortedByTest,<sp/>ExplainsMatchResult)<sp/>{</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{2,<sp/>1};</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>{<sp/>1,<sp/>2<sp/>}<sp/>when<sp/>sorted,<sp/>whose<sp/>element<sp/>#0<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(WhenSortedBy(less&lt;int&gt;(),<sp/>ElementsAre(2,<sp/>3)),<sp/>a));</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>is<sp/>{<sp/>1,<sp/>2<sp/>}<sp/>when<sp/>sorted&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(WhenSortedBy(less&lt;int&gt;(),<sp/>ElementsAre(1,<sp/>2)),<sp/>a));</highlight></codeline>
<codeline lineno="4420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight></codeline>
<codeline lineno="4422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WhenSorted()<sp/>is<sp/>a<sp/>simple<sp/>wrapper<sp/>on<sp/>WhenSortedBy().<sp/><sp/>Hence<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>test<sp/>it<sp/>as<sp/>exhaustively<sp/>as<sp/>we<sp/>test<sp/>the<sp/>latter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForEmptyContainer)<sp/>{</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>numbers;</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>WhenSorted(ElementsAre()));</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/>EXPECT_THAT(numbers,<sp/>Not(WhenSorted(ElementsAre(1))));</highlight></codeline>
<codeline lineno="4429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForNonEmptyContainer)<sp/>{</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/>list&lt;string&gt;<sp/>words;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/>words.push_back(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/>words.push_back(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>words.push_back(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>words.push_back(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/>EXPECT_THAT(words,<sp/>WhenSorted(ElementsAre(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>EXPECT_THAT(words,<sp/>Not(WhenSorted(ElementsAre(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="4439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForMapTypes)<sp/>{</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;string,<sp/>int&gt;<sp/>word_counts;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/>word_counts[</highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/>word_counts[</highlight><highlight class="stringliteral">&quot;the&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/>word_counts[</highlight><highlight class="stringliteral">&quot;buffalo&quot;</highlight><highlight class="normal">]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(word_counts,<sp/>WhenSorted(ElementsAre(</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal">,<sp/>1),<sp/>Pair(</highlight><highlight class="stringliteral">&quot;buffalo&quot;</highlight><highlight class="normal">,<sp/>2),<sp/>Pair(</highlight><highlight class="stringliteral">&quot;the&quot;</highlight><highlight class="normal">,<sp/>1))));</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(word_counts,<sp/>Not(WhenSorted(ElementsAre(</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(</highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal">,<sp/>1),<sp/>Pair(</highlight><highlight class="stringliteral">&quot;the&quot;</highlight><highlight class="normal">,<sp/>1),<sp/>Pair(</highlight><highlight class="stringliteral">&quot;buffalo&quot;</highlight><highlight class="normal">,<sp/>2)))));</highlight></codeline>
<codeline lineno="4450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForMultiMapTypes)<sp/>{</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;int,<sp/>int&gt;<sp/>ifib;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/>ifib.insert(make_pair(8,<sp/>6));</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/>ifib.insert(make_pair(2,<sp/>3));</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/>ifib.insert(make_pair(1,<sp/>1));</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/>ifib.insert(make_pair(3,<sp/>4));</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/>ifib.insert(make_pair(1,<sp/>2));</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/>ifib.insert(make_pair(5,<sp/>5));</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(ifib,<sp/>WhenSorted(ElementsAre(Pair(1,<sp/>1),</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(1,<sp/>2),</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(2,<sp/>3),</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(3,<sp/>4),</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(5,<sp/>5),</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(8,<sp/>6))));</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(ifib,<sp/>Not(WhenSorted(ElementsAre(Pair(8,<sp/>6),</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(2,<sp/>3),</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(1,<sp/>1),</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(3,<sp/>4),</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(1,<sp/>2),</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(5,<sp/>5)))));</highlight></codeline>
<codeline lineno="4472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForPolymorphicMatcher)<sp/>{</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;int&gt;<sp/>d;</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/>d.push_back(2);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/>d.push_back(1);</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(d,<sp/>WhenSorted(ElementsAre(1,<sp/>2)));</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(d,<sp/>Not(WhenSorted(ElementsAre(2,<sp/>1))));</highlight></codeline>
<codeline lineno="4480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForVectorConstRefMatcher)<sp/>{</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;int&gt;<sp/>d;</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/>d.push_back(2);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/>d.push_back(1);</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::vector&lt;int&gt;</ref>&amp;&gt;<sp/>vector_match<sp/>=<sp/>ElementsAre(1,<sp/>2);</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(d,<sp/>WhenSorted(vector_match));</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::vector&lt;int&gt;</ref>&amp;&gt;<sp/>not_vector_match<sp/>=<sp/>ElementsAre(2,<sp/>1);</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_THAT(d,<sp/>Not(WhenSorted(not_vector_match)));</highlight></codeline>
<codeline lineno="4490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Deliberately<sp/>bare<sp/>pseudo-container.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Offers<sp/>only<sp/>begin()<sp/>and<sp/>end()<sp/>accessors,<sp/>yielding<sp/>InputIterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4495" refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike</ref><sp/>{</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConstIter;</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>ConstIter<sp/>const_iterator;</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>value_type;</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"></highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InIter&gt;</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike</ref>(InIter<sp/>first,<sp/>InIter<sp/>last)<sp/>:<sp/>remainder_(first,<sp/>last)<sp/>{}</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>remainder_.begin());</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>const_iterator(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>remainder_.end());</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConstIter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::iterator&lt;std::input_iterator_tag,</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type,</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrdiff_t,</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>value_type*,</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>value_type&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstIter(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike</ref>*<sp/>s,</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;value_type&gt;::iterator<sp/>pos)</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>s_(s),<sp/>pos_(pos)<sp/>{}</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pos_;<sp/>}</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type*<sp/>operator-&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;*pos_;<sp/>}</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/>ConstIter&amp;<sp/>operator++()<sp/>{</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_-&gt;remainder_.erase(pos_++);</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*iter++<sp/>is<sp/>required<sp/>to<sp/>work<sp/>(see<sp/>std::istreambuf_iterator).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(void)iter++<sp/>is<sp/>also<sp/>required<sp/>to<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532" refid="classtesting_1_1gmock__matchers__test_1_1_streamlike_1_1_const_iter_1_1_post_incr_proxy" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike_1_1_const_iter_1_1_post_incr_proxy" kindref="compound">PostIncrProxy</ref><sp/>{</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike_1_1_const_iter_1_1_post_incr_proxy" kindref="compound">PostIncrProxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>value_type&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_type<sp/>value_;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike_1_1_const_iter_1_1_post_incr_proxy" kindref="compound">PostIncrProxy</ref><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike_1_1_const_iter_1_1_post_incr_proxy" kindref="compound">PostIncrProxy</ref><sp/>proxy(**</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++(*this);</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>proxy;</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstIter&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstIter&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.s_<sp/>==<sp/>b.s_<sp/>&amp;&amp;<sp/>a.pos_<sp/>==<sp/>b.pos_;</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstIter&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ConstIter&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(a<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike</ref>*<sp/>s_;</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;value_type&gt;::iterator<sp/>pos_;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::list&lt;value_type&gt;::const_iterator<sp/>Iter;</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Iter<sp/>it<sp/>=<sp/>s.remainder_.begin();<sp/>it<sp/>!=<sp/>s.remainder_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>sep<sp/>&lt;&lt;<sp/>*it;</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sep<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::list&lt;value_type&gt;<sp/>remainder_;<sp/><sp/></highlight><highlight class="comment">//<sp/>modified<sp/>by<sp/>iteration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal">TEST(StreamlikeTest,<sp/>Iteration)<sp/>{</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/>Streamlike&lt;int&gt;::const_iterator<sp/>it<sp/>=<sp/>s.begin();</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ip<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>s.end())<sp/>{</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(ip<sp/>-<sp/>a);</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(*ip++,<sp/>*it++);</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_FORWARD_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal">TEST(BeginEndDistanceIsTest,<sp/>WorksWithForwardList)<sp/>{</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/>std::forward_list&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>BeginEndDistanceIs(0));</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(BeginEndDistanceIs(1)));</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/>container.push_front(0);</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(BeginEndDistanceIs(0)));</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>BeginEndDistanceIs(1));</highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/>container.push_front(0);</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>Not(BeginEndDistanceIs(0)));</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/>EXPECT_THAT(container,<sp/>BeginEndDistanceIs(2));</highlight></codeline>
<codeline lineno="4594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_FORWARD_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4596"><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal">TEST(BeginEndDistanceIsTest,<sp/>WorksWithNonStdList)<sp/>{</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>5);</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>BeginEndDistanceIs(5));</highlight></codeline>
<codeline lineno="4601"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal">TEST(BeginEndDistanceIsTest,<sp/>CanDescribeSelf)<sp/>{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>BeginEndDistanceIs(2);</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>is<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="4608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal">TEST(BeginEndDistanceIsTest,<sp/>ExplainsResult)<sp/>{</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m1<sp/>=<sp/>BeginEndDistanceIs(2);</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m2<sp/>=<sp/>BeginEndDistanceIs(Lt(2));</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m3<sp/>=<sp/>BeginEndDistanceIs(AnyOf(0,<sp/>3));</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m4<sp/>=<sp/>BeginEndDistanceIs(GreaterThan(1));</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>container;</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>0<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m1,<sp/>container));</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>0<sp/>matches&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m2,<sp/>container));</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>0<sp/>matches&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m3,<sp/>container));</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>0<sp/>doesn&apos;t<sp/>match,<sp/>which<sp/>is<sp/>1<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;less<sp/>than<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m4,<sp/>container));</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/>container.push_back(0);</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>2<sp/>matches&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m1,<sp/>container));</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>2<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m2,<sp/>container));</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>2<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m3,<sp/>container));</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;whose<sp/>distance<sp/>between<sp/>begin()<sp/>and<sp/>end()<sp/>2<sp/>matches,<sp/>which<sp/>is<sp/>1<sp/>more<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;than<sp/>1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m4,<sp/>container));</highlight></codeline>
<codeline lineno="4638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForStreamlike)<sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streamlike<sp/>&apos;container&apos;<sp/>provides<sp/>only<sp/>minimal<sp/>iterator<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Its<sp/>iterators<sp/>are<sp/>tagged<sp/>with<sp/>input_iterator_tag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>WhenSorted(ElementsAre(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5)));</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>Not(WhenSorted(ElementsAre(2,<sp/>1,<sp/>4,<sp/>5,<sp/>3))));</highlight></codeline>
<codeline lineno="4647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal">TEST(WhenSortedTest,<sp/>WorksForVectorConstRefMatcherOnStreamlike)<sp/>{</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const std::vector&lt;int&gt;</ref>&amp;&gt;<sp/>vector_match<sp/>=<sp/>ElementsAre(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>WhenSorted(vector_match));</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>Not(WhenSorted(ElementsAre(2,<sp/>1,<sp/>4,<sp/>5,<sp/>3))));</highlight></codeline>
<codeline lineno="4655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"></highlight></codeline>
<codeline lineno="4657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ElementsAre()<sp/>and<sp/>ElementsAreArray()<sp/>with<sp/>stream-like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;containers&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal">TEST(ElemensAreStreamTest,<sp/>WorksForStreamlike)<sp/>{</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>ElementsAre(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5));</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>Not(ElementsAre(2,<sp/>1,<sp/>4,<sp/>5,<sp/>3)));</highlight></codeline>
<codeline lineno="4665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal">TEST(ElemensAreArrayStreamTest,<sp/>WorksForStreamlike)<sp/>{</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{1,<sp/>2,<sp/>3,<sp/>4,<sp/>5};</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>expected;</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/>expected.push_back(1);</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/>expected.push_back(2);</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/>expected.push_back(3);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/>expected.push_back(4);</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>expected.push_back(5);</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>ElementsAreArray(expected));</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/>expected[3]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>Not(ElementsAreArray(expected)));</highlight></codeline>
<codeline lineno="4681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"></highlight></codeline>
<codeline lineno="4683"><highlight class="normal">TEST(ElementsAreTest,<sp/>WorksWithUncopyable)<sp/>{</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref><sp/>objs[2];</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/>objs[0].set_value(-3);</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/>objs[1].set_value(1);</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/>EXPECT_THAT(objs,<sp/>ElementsAre(UncopyableIs(-3),<sp/>Truly(ValueIsPositive)));</highlight></codeline>
<codeline lineno="4688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal">TEST(ElementsAreTest,<sp/>TakesStlContainer)<sp/>{</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual[]<sp/>=<sp/>{3,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/>::std::list&lt;int&gt;<sp/>expected;</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/>expected.push_back(3);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/>expected.push_back(1);</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/>expected.push_back(2);</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/>EXPECT_THAT(actual,<sp/>ElementsAreArray(expected));</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/>expected.push_back(4);</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>EXPECT_THAT(actual,<sp/>Not(ElementsAreArray(expected)));</highlight></codeline>
<codeline lineno="4701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"></highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>for<sp/>UnorderedElementsAreArray()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,<sp/>SucceedsWhenExpected)<sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{0,<sp/>1,<sp/>2,<sp/>3,<sp/>4};</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ExplainMatchResult(UnorderedElementsAreArray(a),</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::next_permutation(s.begin(),<sp/>s.end()));</highlight></codeline>
<codeline lineno="4713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,<sp/>VectorBool)<sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{0,<sp/>1,<sp/>0,<sp/>1,<sp/>1};</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b[]<sp/>=<sp/>{1,<sp/>0,<sp/>1,<sp/>1,<sp/>0};</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>expected(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>actual(b,<sp/>b<sp/>+<sp/>GTEST_ARRAY_SIZE_(b));</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ExplainMatchResult(UnorderedElementsAreArray(expected),</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,<sp/>WorksForStreamlike)<sp/>{</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streamlike<sp/>&apos;container&apos;<sp/>provides<sp/>only<sp/>minimal<sp/>iterator<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Its<sp/>iterators<sp/>are<sp/>tagged<sp/>with<sp/>input_iterator_tag,<sp/>and<sp/>it<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size()<sp/>or<sp/>empty()<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/>::std::vector&lt;int&gt;<sp/>expected;</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/>expected.push_back(1);</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/>expected.push_back(2);</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/>expected.push_back(3);</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/>expected.push_back(4);</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/>expected.push_back(5);</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>UnorderedElementsAreArray(expected));</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/>expected.push_back(6);</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>Not(UnorderedElementsAreArray(expected)));</highlight></codeline>
<codeline lineno="4742"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,<sp/>TakesStlContainer)<sp/>{</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual[]<sp/>=<sp/>{3,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/>::std::list&lt;int&gt;<sp/>expected;</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/>expected.push_back(1);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/>expected.push_back(2);</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/>expected.push_back(3);</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/>EXPECT_THAT(actual,<sp/>UnorderedElementsAreArray(expected));</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/>expected.push_back(4);</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/>EXPECT_THAT(actual,<sp/>Not(UnorderedElementsAreArray(expected)));</highlight></codeline>
<codeline lineno="4755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,<sp/>TakesInitializerList)<sp/>{</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>UnorderedElementsAreArray({1,<sp/>2,<sp/>3,<sp/>4,<sp/>5}));</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(UnorderedElementsAreArray({1,<sp/>2,<sp/>3,<sp/>4,<sp/>6})));</highlight></codeline>
<codeline lineno="4763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"></highlight></codeline>
<codeline lineno="4765"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,<sp/>TakesInitializerListOfCStrings)<sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>UnorderedElementsAreArray({</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">}));</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(UnorderedElementsAreArray({</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ef&quot;</highlight><highlight class="normal">})));</highlight></codeline>
<codeline lineno="4769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,<sp/>TakesInitializerListOfSameTypedMatchers)<sp/>{</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>UnorderedElementsAreArray(</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Eq(1),<sp/>Eq(2),<sp/>Eq(3),<sp/>Eq(4),<sp/>Eq(5)}));</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(UnorderedElementsAreArray(</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Eq(1),<sp/>Eq(2),<sp/>Eq(3),<sp/>Eq(4),<sp/>Eq(6)})));</highlight></codeline>
<codeline lineno="4777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal">TEST(UnorderedElementsAreArrayTest,</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>TakesInitializerListOfDifferentTypedMatchers)<sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compiler<sp/>cannot<sp/>infer<sp/>the<sp/>type<sp/>of<sp/>the<sp/>initializer<sp/>list<sp/>if<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>elements<sp/>have<sp/>different<sp/>types.<sp/><sp/>We<sp/>must<sp/>explicitly<sp/>specify<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unified<sp/>element<sp/>type<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>UnorderedElementsAreArray&lt;<ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>&gt;(</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Eq(1),<sp/>Ne(-2),<sp/>Ge(3),<sp/>Le(4),<sp/>Eq(5)}));</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(UnorderedElementsAreArray&lt;<ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;int&gt;</ref><sp/>&gt;(</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Eq(1),<sp/>Ne(-2),<sp/>Ge(3),<sp/>Le(4),<sp/>Eq(6)})));</highlight></codeline>
<codeline lineno="4789"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"></highlight></codeline>
<codeline lineno="4793" refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>IntVec;</highlight></codeline>
<codeline lineno="4796"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>WorksWithUncopyable)<sp/>{</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_uncopyable" kindref="compound">Uncopyable</ref><sp/>objs[2];</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/>objs[0].set_value(-3);</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/>objs[1].set_value(1);</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/>EXPECT_THAT(objs,</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UnorderedElementsAre(Truly(ValueIsPositive),<sp/>UncopyableIs(-3)));</highlight></codeline>
<codeline lineno="4804"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>SucceedsWhenExpected)<sp/>{</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ExplainMatchResult(UnorderedElementsAre(1,<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::next_permutation(s.begin(),<sp/>s.end()));</highlight></codeline>
<codeline lineno="4814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>FailsWhenAnElementMatchesNoMatcher)<sp/>{</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/>std::vector&lt;Matcher&lt;int&gt;<sp/>&gt;<sp/>mv;</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/>mv.push_back(1);</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/>mv.push_back(2);</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/>mv.push_back(2);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>element<sp/>with<sp/>value<sp/>&apos;3&apos;<sp/>matches<sp/>nothing:<sp/>fail<sp/>fast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(UnorderedElementsAreArray(mv),</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"></highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>WorksForStreamlike)<sp/>{</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streamlike<sp/>&apos;container&apos;<sp/>provides<sp/>only<sp/>minimal<sp/>iterator<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Its<sp/>iterators<sp/>are<sp/>tagged<sp/>with<sp/>input_iterator_tag,<sp/>and<sp/>it<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size()<sp/>or<sp/>empty()<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[5]<sp/>=<sp/>{2,<sp/>1,<sp/>4,<sp/>5,<sp/>3};</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_streamlike" kindref="compound">Streamlike&lt;int&gt;</ref><sp/>s(a,<sp/>a<sp/>+<sp/>GTEST_ARRAY_SIZE_(a));</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"></highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>UnorderedElementsAre(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5));</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/>EXPECT_THAT(s,<sp/>Not(UnorderedElementsAre(2,<sp/>2,<sp/>3,<sp/>4,<sp/>5)));</highlight></codeline>
<codeline lineno="4838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>One<sp/>naive<sp/>implementation<sp/>of<sp/>the<sp/>matcher<sp/>runs<sp/>in<sp/>O(N!)<sp/>time,<sp/>which<sp/>is<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight><highlight class="comment">//<sp/>slow<sp/>for<sp/>many<sp/>real-world<sp/>inputs.<sp/>This<sp/>test<sp/>shows<sp/>that<sp/>our<sp/>matcher<sp/>can<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>100<sp/>inputs<sp/>very<sp/>quickly<sp/>(a<sp/>few<sp/>milliseconds).<sp/><sp/>An<sp/>O(100!)<sp/>is<sp/>10^158</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"></highlight><highlight class="comment">//<sp/>iterations<sp/>and<sp/>obviously<sp/>effectively<sp/>incomputable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>UnorderedElementsAreTest.Performance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[<sp/><sp/><sp/><sp/><sp/><sp/><sp/>OK<sp/>]<sp/>UnorderedElementsAreTest.Performance<sp/>(4<sp/>ms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>Performance)<sp/>{</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>s;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/>std::vector&lt;Matcher&lt;int&gt;<sp/>&gt;<sp/>mv;</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/>s.push_back(i);</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/>mv.push_back(_);</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/>mv[50]<sp/>=<sp/>Eq(0);</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ExplainMatchResult(UnorderedElementsAreArray(mv),</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Another<sp/>variant<sp/>of<sp/>&apos;Performance&apos;<sp/>with<sp/>similar<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[<sp/>RUN<sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>UnorderedElementsAreTest.PerformanceHalfStrict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[<sp/><sp/><sp/><sp/><sp/><sp/><sp/>OK<sp/>]<sp/>UnorderedElementsAreTest.PerformanceHalfStrict<sp/>(4<sp/>ms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>PerformanceHalfStrict)<sp/>{</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>s;</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/>std::vector&lt;Matcher&lt;int&gt;<sp/>&gt;<sp/>mv;</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/>s.push_back(i);</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&amp;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mv.push_back(_);</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mv.push_back(i);</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(ExplainMatchResult(UnorderedElementsAreArray(mv),</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"></highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>FailMessageCountWrong)<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/>v.push_back(4);</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(UnorderedElementsAre(1,<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>Eq(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>1<sp/>element&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>FailMessageCountWrongZero)<sp/>{</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(UnorderedElementsAre(1,<sp/>2,<sp/>3),</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/>EXPECT_THAT(listener.str(),<sp/>Eq(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4893"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>FailMessageUnmatchedMatchers)<sp/>{</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/>v.push_back(1);</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>v.push_back(1);</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(UnorderedElementsAre(1,<sp/>2),</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listener.str(),</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>following<sp/>matchers<sp/>don&apos;t<sp/>match<sp/>any<sp/>elements:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;matcher<sp/>#1:<sp/>is<sp/>equal<sp/>to<sp/>2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>FailMessageUnmatchedElements)<sp/>{</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/>v.push_back(1);</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/>v.push_back(2);</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(UnorderedElementsAre(1,<sp/>1),</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listener.str(),</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>following<sp/>elements<sp/>don&apos;t<sp/>match<sp/>any<sp/>matchers:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#1:<sp/>2&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>FailMessageUnmatchedMatcherAndElement)<sp/>{</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/>v.push_back(2);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/>v.push_back(3);</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(UnorderedElementsAre(1,<sp/>2),</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v,<sp/>&amp;listener))<sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listener.str(),</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;where&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>the<sp/>following<sp/>matchers<sp/>don&apos;t<sp/>match<sp/>any<sp/>elements:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;matcher<sp/>#0:<sp/>is<sp/>equal<sp/>to<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>where&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>the<sp/>following<sp/>elements<sp/>don&apos;t<sp/>match<sp/>any<sp/>matchers:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#1:<sp/>3&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>helper<sp/>for<sp/>formatting<sp/>element,<sp/>matcher<sp/>index<sp/>pairs<sp/>in<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4940"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>EMString(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>element,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matcher)<sp/>{</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(element<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>element<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>matcher<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>matcher<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="4944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>FailMessageImperfectMatchOnly)<sp/>{</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>situation<sp/>where<sp/>all<sp/>elements<sp/>and<sp/>matchers<sp/>have<sp/>a<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>associated<sp/>with<sp/>them,<sp/>but<sp/>the<sp/>max<sp/>matching<sp/>is<sp/>not<sp/>perfect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/>std::vector&lt;string&gt;<sp/>v;</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/>v.push_back(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/>v.push_back(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/>v.push_back(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(ExplainMatchResult(</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UnorderedElementsAre(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>AnyOf(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">)),<sp/>v,<sp/>&amp;listener))</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>listener.str();</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>prefix<sp/>=</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;where<sp/>no<sp/>permutation<sp/>of<sp/>the<sp/>elements<sp/>can<sp/>satisfy<sp/>all<sp/>matchers,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and<sp/>the<sp/>closest<sp/>match<sp/>is<sp/>2<sp/>of<sp/>3<sp/>matchers<sp/>with<sp/>the<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pairings:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"></highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>be<sp/>a<sp/>bit<sp/>loose<sp/>here,<sp/>because<sp/>there<sp/>are<sp/>4<sp/>valid<sp/>max<sp/>matches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>listener.str(),</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>AnyOf(prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;{\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(0,<sp/>0)<sp/>+</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(1,<sp/>2)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;{\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(0,<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(1,<sp/>2)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;{\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(0,<sp/>0)<sp/>+</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(2,<sp/>2)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;{\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(0,<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;,\n<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>EMString(2,<sp/>2)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n}&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"></highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>Describe)<sp/>{</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/>EXPECT_THAT(Describe&lt;IntVec&gt;(UnorderedElementsAre()),</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;is<sp/>empty&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe&lt;IntVec&gt;(UnorderedElementsAre(345)),</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;has<sp/>1<sp/>element<sp/>and<sp/>that<sp/>element<sp/>is<sp/>equal<sp/>to<sp/>345&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe&lt;IntVec&gt;(UnorderedElementsAre(111,<sp/>222,<sp/>333)),</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;has<sp/>3<sp/>elements<sp/>and<sp/>there<sp/>exists<sp/>some<sp/>permutation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>elements<sp/>such<sp/>that:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#0<sp/>is<sp/>equal<sp/>to<sp/>111,<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#1<sp/>is<sp/>equal<sp/>to<sp/>222,<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#2<sp/>is<sp/>equal<sp/>to<sp/>333&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test" kindref="compound">UnorderedElementsAreTest</ref>,<sp/>DescribeNegation)<sp/>{</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/>EXPECT_THAT(DescribeNegation&lt;IntVec&gt;(UnorderedElementsAre()),</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;isn&apos;t<sp/>empty&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation&lt;IntVec&gt;(UnorderedElementsAre(345)),</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>1<sp/>element,<sp/>or<sp/>has<sp/>1<sp/>element<sp/>that<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>345&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/>EXPECT_THAT(</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation&lt;IntVec&gt;(UnorderedElementsAre(123,<sp/>234,<sp/>345)),</highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Eq(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>3<sp/>elements,<sp/>or<sp/>there<sp/>exists<sp/>no<sp/>permutation<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;of<sp/>elements<sp/>such<sp/>that:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#0<sp/>is<sp/>equal<sp/>to<sp/>123,<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#1<sp/>is<sp/>equal<sp/>to<sp/>234,<sp/>and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#2<sp/>is<sp/>equal<sp/>to<sp/>345&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"></highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5007"><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>as<sp/>a<sp/>check<sp/>on<sp/>the<sp/>more<sp/>complex<sp/>max<sp/>flow<sp/>method<sp/>used<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>real<sp/>testing::internal::FindMaxBipartiteMatching.<sp/>This<sp/>method<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compatible<sp/>but<sp/>runs<sp/>in<sp/>worst-case<sp/>factorial<sp/>time,<sp/>so<sp/>we<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>it<sp/>in<sp/>testing<sp/>for<sp/>small<sp/>problem<sp/>sizes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BacktrackingMaxBPMState<sp/>{</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>not<sp/>take<sp/>ownership<sp/>of<sp/>&apos;g&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BacktrackingMaxBPMState(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph*<sp/>g)<sp/>:<sp/>graph_(g)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"></highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/>ElementMatcherPairs<sp/>Compute()<sp/>{</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(graph_-&gt;LhsSize()<sp/>==<sp/>0<sp/>||<sp/>graph_-&gt;RhsSize()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_so_far_;</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs_used_.assign(graph_-&gt;LhsSize(),<sp/>kUnused);</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs_used_.assign(graph_-&gt;RhsSize(),<sp/>kUnused);</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs<sp/>=<sp/>0;<sp/>irhs<sp/>&lt;<sp/>graph_-&gt;RhsSize();<sp/>++irhs)<sp/>{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matches_.clear();</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RecurseInto(irhs);</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_so_far_.size()<sp/>==<sp/>graph_-&gt;RhsSize())</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best_so_far_;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>kUnused<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"></highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PushMatch(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/><sp/><sp/>matches_.push_back(ElementMatcherPair(lhs,<sp/>rhs));</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs_used_[lhs]<sp/>=<sp/>rhs;</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs_used_[rhs]<sp/>=<sp/>lhs;</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches_.size()<sp/>&gt;<sp/>best_so_far_.size())<sp/>{</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>best_so_far_<sp/>=<sp/>matches_;</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PopMatch()<sp/>{</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ElementMatcherPair&amp;<sp/>back<sp/>=<sp/>matches_.back();</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/>lhs_used_[back.first]<sp/>=<sp/>kUnused;</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs_used_[back.second]<sp/>=<sp/>kUnused;</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/>matches_.pop_back();</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RecurseInto(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs)<sp/>{</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs_used_[irhs]<sp/>!=<sp/>kUnused)<sp/>{</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs<sp/>=<sp/>0;<sp/>ilhs<sp/>&lt;<sp/>graph_-&gt;LhsSize();<sp/>++ilhs)<sp/>{</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs_used_[ilhs]<sp/>!=<sp/>kUnused)<sp/>{</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!graph_-&gt;HasEdge(ilhs,<sp/>irhs))<sp/>{</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PushMatch(ilhs,<sp/>irhs);</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(best_so_far_.size()<sp/>==<sp/>graph_-&gt;RhsSize())<sp/>{</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mi<sp/>=<sp/>irhs<sp/>+<sp/>1;<sp/>mi<sp/>&lt;<sp/>graph_-&gt;RhsSize();<sp/>++mi)<sp/>{</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RecurseInto(mi))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PopMatch();</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph*<sp/>graph_;<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>owned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>lhs_used_;</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>rhs_used_;</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/>ElementMatcherPairs<sp/>matches_;</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/>ElementMatcherPairs<sp/>best_so_far_;</highlight></codeline>
<codeline lineno="5080"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5081"><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BacktrackingMaxBPMState&lt;Graph&gt;::kUnused;</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"></highlight></codeline>
<codeline lineno="5085"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>a<sp/>simple<sp/>backtracking<sp/>algorithm<sp/>to<sp/>determine<sp/>if<sp/>it<sp/>is<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>find<sp/>one<sp/>element<sp/>per<sp/>matcher,<sp/>without<sp/>reusing<sp/>elements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Graph&gt;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal">ElementMatcherPairs</highlight></codeline>
<codeline lineno="5091"><highlight class="normal">FindBacktrackingMaxBPM(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph&amp;<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BacktrackingMaxBPMState&lt;Graph&gt;(&amp;g).Compute();</highlight></codeline>
<codeline lineno="5093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095" refid="classtesting_1_1gmock__matchers__test_1_1_backtracking_b_p_m_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_backtracking_b_p_m_test" kindref="compound">BacktrackingBPMTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">::testing::Test</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>MaxBipartiteMatching<sp/>algorithm<sp/>with<sp/>square<sp/>matrices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>single<sp/>int<sp/>param<sp/>is<sp/>the<sp/>#<sp/>of<sp/>nodes<sp/>on<sp/>each<sp/>of<sp/>the<sp/>left<sp/>and<sp/>right<sp/>sides.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5099" refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" kindref="compound">BipartiteTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::TestWithParam&lt;int&gt;<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>all<sp/>match<sp/>graphs<sp/>up<sp/>to<sp/>some<sp/>moderate<sp/>number<sp/>of<sp/>edges.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal">TEST_P(<ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" kindref="compound">BipartiteTest</ref>,<sp/>Exhaustive)<sp/>{</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes<sp/>=<sp/>GetParam();</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_match_matrix" kindref="compound">MatchMatrix</ref><sp/>graph(nodes,<sp/>nodes);</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/>ElementMatcherPairs<sp/>matches<sp/>=</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FindMaxBipartiteMatching(graph);</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(FindBacktrackingMaxBPM(graph).size(),<sp/>matches.size())</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;graph:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>graph.DebugString();</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>all<sp/>elements<sp/>of<sp/>matches<sp/>are<sp/>in<sp/>the<sp/>graph.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>elements<sp/>of<sp/>first<sp/>and<sp/>second<sp/>are<sp/>unique.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>seen_element(graph.LhsSize());</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;bool&gt;<sp/>seen_matcher(graph.RhsSize());</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/>SCOPED_TRACE(PrintToString(matches));</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>matches.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilhs<sp/>=<sp/>matches[i].first;</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>irhs<sp/>=<sp/>matches[i].second;</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(graph.HasEdge(ilhs,<sp/>irhs));</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(seen_element[ilhs]);</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(seen_matcher[irhs]);</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seen_element[ilhs]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>seen_matcher[irhs]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(graph.NextGraph());</highlight></codeline>
<codeline lineno="5125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"></highlight></codeline>
<codeline lineno="5127"><highlight class="normal">INSTANTIATE_TEST_CASE_P(AllGraphs,<sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_test" kindref="compound">BipartiteTest</ref>,</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Range(0,<sp/>5));</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parameterized<sp/>by<sp/>a<sp/>pair<sp/>interpreted<sp/>as<sp/>(LhsSize,<sp/>RhsSize).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131" refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" kindref="compound">BipartiteNonSquareTest</ref></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::TestWithParam&lt;std::pair&lt;size_t,<sp/>size_t&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="5133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" kindref="compound">BipartiteNonSquareTest</ref>,<sp/>SimpleBacktracking)<sp/>{</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>.......</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0:-----\<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1:---\<sp/>|<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2:---\<sp/>|<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>3:-\<sp/>|<sp/>|<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>:.......:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0<sp/>1<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_match_matrix" kindref="compound">MatchMatrix</ref><sp/>g(4,<sp/>3);</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kEdges[][2]<sp/>=<sp/>{{0,<sp/>2},<sp/>{1,<sp/>1},<sp/>{2,<sp/>1},<sp/>{3,<sp/>0}};</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>GTEST_ARRAY_SIZE_(kEdges);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/>g.SetEdge(kEdges[i][0],<sp/>kEdges[i][1],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/>EXPECT_THAT(FindBacktrackingMaxBPM(g),</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementsAre(Pair(3,<sp/>0),</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(AnyOf(1,<sp/>2),<sp/>1),</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pair(0,<sp/>2)))<sp/>&lt;&lt;<sp/>g.DebugString();</highlight></codeline>
<codeline lineno="5152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"></highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verify<sp/>a<sp/>few<sp/>nonsquare<sp/>matrices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal">TEST_P(<ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" kindref="compound">BipartiteNonSquareTest</ref>,<sp/>Exhaustive)<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nlhs<sp/>=<sp/>GetParam().first;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nrhs<sp/>=<sp/>GetParam().second;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_match_matrix" kindref="compound">MatchMatrix</ref><sp/>graph(nlhs,<sp/>nrhs);</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(FindBacktrackingMaxBPM(graph).size(),</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FindMaxBipartiteMatching(graph).size())</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;graph:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>graph.DebugString()</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nbacktracking:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>PrintToString(FindBacktrackingMaxBPM(graph))</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nmax<sp/>flow:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>PrintToString(internal::FindMaxBipartiteMatching(graph));</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(graph.NextGraph());</highlight></codeline>
<codeline lineno="5168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal">INSTANTIATE_TEST_CASE_P(AllGraphs,<sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test" kindref="compound">BipartiteNonSquareTest</ref>,</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::Values(</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(1,<sp/>2),</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(2,<sp/>1),</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(3,<sp/>2),</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(2,<sp/>3),</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(4,<sp/>1),</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(1,<sp/>4),</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(4,<sp/>3),</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(3,<sp/>4)));</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight></codeline>
<codeline lineno="5181" refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" kindref="compound">BipartiteRandomTest</ref></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::TestWithParam&lt;std::pair&lt;int,<sp/>int&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="5183"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"></highlight></codeline>
<codeline lineno="5185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>a<sp/>large<sp/>sample<sp/>of<sp/>larger<sp/>graphs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5186"><highlight class="normal">TEST_P(<ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" kindref="compound">BipartiteRandomTest</ref>,<sp/>LargerNets)<sp/>{</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodes<sp/>=<sp/>GetParam().first;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters<sp/>=<sp/>GetParam().second;</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_match_matrix" kindref="compound">MatchMatrix</ref><sp/>graph(nodes,<sp/>nodes);</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/>testing::internal::Int32<sp/>seed<sp/>=<sp/>GTEST_FLAG(random_seed);</highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/><sp/><sp/>seed<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">testing::internal::Int32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(time(NULL));</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>iters<sp/>&gt;<sp/>0;<sp/>--iters,<sp/>++seed)<sp/>{</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(static_cast&lt;int&gt;(seed));</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/>graph.Randomize();</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(FindBacktrackingMaxBPM(graph).size(),</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::FindMaxBipartiteMatching(graph).size())</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>graph:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>graph.DebugString()</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nTo<sp/>reproduce<sp/>the<sp/>failure,<sp/>rerun<sp/>the<sp/>test<sp/>with<sp/>the<sp/>flag&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>--&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>GTEST_FLAG_PREFIX_<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;random_seed=&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>seed;</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>argument<sp/>is<sp/>a<sp/>std::pair&lt;int,<sp/>int&gt;<sp/>representing<sp/>(nodes,<sp/>iters).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal">INSTANTIATE_TEST_CASE_P(Samples,<sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test" kindref="compound">BipartiteRandomTest</ref>,</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::Values(</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(5,<sp/>10000),</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(6,<sp/>5000),</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(7,<sp/>2000),</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(8,<sp/>500),</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_pair(9,<sp/>100)));</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>IsReadableTypeName().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsTrueForShortNames)<sp/>{</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;const<sp/>unsigned<sp/>char*&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;MyMap&lt;int,<sp/>void*&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;void<sp/>(*)(int,<sp/>bool)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsTrueForLongNonTemplateNonFunctionNames)<sp/>{</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;my_long_namespace::MyClassName&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;int<sp/>[5][6][7][8][9][10][11]&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;my_namespace::MyOuterClass::MyInnerClass&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"></highlight></codeline>
<codeline lineno="5231"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsFalseForLongTemplateNames)<sp/>{</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;basic_string&lt;char,<sp/>std::char_traits&lt;char&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;std::vector&lt;int,<sp/>std::alloc_traits&lt;int&gt;<sp/>&gt;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5236"><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal">TEST(IsReadableTypeNameTest,<sp/>ReturnsFalseForLongFunctionTypeNames)<sp/>{</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(IsReadableTypeName(</highlight><highlight class="stringliteral">&quot;void<sp/>(&amp;)(int,<sp/>bool,<sp/>char,<sp/>float)&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="5239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"></highlight></codeline>
<codeline lineno="5241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>JoinAsTuple().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal">TEST(JoinAsTupleTest,<sp/>JoinsEmptyTuple)<sp/>{</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>JoinAsTuple(Strings()));</highlight></codeline>
<codeline lineno="5245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight></codeline>
<codeline lineno="5247"><highlight class="normal">TEST(JoinAsTupleTest,<sp/>JoinsOneTuple)<sp/>{</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fields[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>JoinAsTuple(Strings(fields,<sp/>fields<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="5250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal">TEST(JoinAsTupleTest,<sp/>JoinsTwoTuple)<sp/>{</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fields[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(1,<sp/>a)&quot;</highlight><highlight class="normal">,<sp/>JoinAsTuple(Strings(fields,<sp/>fields<sp/>+<sp/>2)));</highlight></codeline>
<codeline lineno="5255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal">TEST(JoinAsTupleTest,<sp/>JoinsTenTuple)<sp/>{</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fields[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;10&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JoinAsTuple(Strings(fields,<sp/>fields<sp/>+<sp/>10)));</highlight></codeline>
<codeline lineno="5261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>FormatMatcherDescription().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal">TEST(FormatMatcherDescriptionTest,<sp/>WorksForEmptyDescription)<sp/>{</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>even&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IsEven&quot;</highlight><highlight class="normal">,<sp/>Strings()));</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;not<sp/>(is<sp/>even)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IsEven&quot;</highlight><highlight class="normal">,<sp/>Strings()));</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"></highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>params[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;equals<sp/>5&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Equals&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Strings(params,<sp/>params<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>params2[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;is<sp/>in<sp/>range<sp/>(5,<sp/>8)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMatcherDescription(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;IsInRange&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Strings(params2,<sp/>params2<sp/>+<sp/>2)));</highlight></codeline>
<codeline lineno="5280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>PolymorphicMatcher::mutable_impl().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal">TEST(PolymorphicMatcherTest,<sp/>CanAccessMutableImpl)<sp/>{</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher&lt;DivisibleByImpl&gt;</ref><sp/>m(<ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref>(42));</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref>&amp;<sp/>impl<sp/>=<sp/>m.mutable_impl();</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>impl.divider());</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/>impl.set_divider(0);</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>m.mutable_impl().divider());</highlight></codeline>
<codeline lineno="5290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>PolymorphicMatcher::impl().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal">TEST(PolymorphicMatcherTest,<sp/>CanAccessImpl)<sp/>{</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher&lt;DivisibleByImpl&gt;</ref><sp/>m(<ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref>(42));</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__matchers__test_1_1_divisible_by_impl" kindref="compound">DivisibleByImpl</ref>&amp;<sp/>impl<sp/>=<sp/>m.impl();</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>impl.divider());</highlight></codeline>
<codeline lineno="5297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal">TEST(MatcherTupleTest,<sp/>ExplainsMatchFailure)<sp/>{</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss1;</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/>ExplainMatchFailureTupleTo(make_tuple(<ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref>(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)),<sp/>GreaterThan(5)),</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>10),<sp/>&amp;ss1);</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ss1.str());<sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss2;</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/>ExplainMatchFailureTupleTo(make_tuple(GreaterThan(5),<sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref>(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_tuple(2,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),<sp/>&amp;ss2);</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>&gt;<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2,<sp/>which<sp/>is<sp/>3<sp/>less<sp/>than<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#1:<sp/>is<sp/>equal<sp/>to<sp/>&apos;a&apos;<sp/>(97,<sp/>0x61)\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>&apos;b&apos;<sp/>(98,<sp/>0x62)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss2.str());<sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match<sp/>where<sp/>both<sp/>arguments<sp/>need<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/>stringstream<sp/>ss3;</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/>ExplainMatchFailureTupleTo(make_tuple(GreaterThan(5),<sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;char&gt;</ref>(Eq(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">))),</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make_tuple(2,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),<sp/>&amp;ss3);</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>Expected<sp/>arg<sp/>#0:<sp/>is<sp/>&gt;<sp/>5\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>2,<sp/>which<sp/>is<sp/>3<sp/>less<sp/>than<sp/>5\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss3.str());<sp/><sp/></highlight><highlight class="comment">//<sp/>Failed<sp/>match<sp/>where<sp/>only<sp/>one<sp/>argument<sp/>needs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>Each().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"></highlight></codeline>
<codeline lineno="5325"><highlight class="normal">TEST(EachTest,<sp/>ExplainsMatchResultCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/>set&lt;int&gt;<sp/>a;<sp/><sp/></highlight><highlight class="comment">//<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"></highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;set&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>Each(2);</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int(&amp;)[1]&gt;</ref><sp/>n<sp/>=<sp/>Each(1);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b[1]<sp/>=<sp/>{1};</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(n,<sp/>b));</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>Each(3);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#0<sp/>doesn&apos;t<sp/>match&quot;</highlight><highlight class="normal">,<sp/>Explain(n,<sp/>b));</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/>a.insert(1);</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/>a.insert(2);</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/>a.insert(3);</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Each(GreaterThan(0));</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"></highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/>m<sp/>=<sp/>Each(GreaterThan(10));</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;whose<sp/>element<sp/>#0<sp/>doesn&apos;t<sp/>match,<sp/>which<sp/>is<sp/>9<sp/>less<sp/>than<sp/>10&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(m,<sp/>a));</highlight></codeline>
<codeline lineno="5348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal">TEST(EachTest,<sp/>DescribesItselfCorrectly)<sp/>{</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m<sp/>=<sp/>Each(1);</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;only<sp/>contains<sp/>elements<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Describe(m));</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"></highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;vector&lt;int&gt;</ref><sp/>&gt;<sp/>m2<sp/>=<sp/>Not(m);</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;contains<sp/>some<sp/>element<sp/>that<sp/>isn&apos;t<sp/>equal<sp/>to<sp/>1&quot;</highlight><highlight class="normal">,<sp/>Describe(m2));</highlight></codeline>
<codeline lineno="5356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"></highlight></codeline>
<codeline lineno="5358"><highlight class="normal">TEST(EachTest,<sp/>MatchesVectorWhenAllElementsMatch)<sp/>{</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>some_vector;</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_vector,<sp/>Each(1));</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/>some_vector.push_back(3);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_vector,<sp/>Not(Each(1)));</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_vector,<sp/>Each(3));</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/>some_vector.push_back(1);</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/>some_vector.push_back(2);</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_vector,<sp/>Not(Each(3)));</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/>EXPECT_THAT(some_vector,<sp/>Each(Lt(3.5)));</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>another_vector;</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/>another_vector.push_back(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_vector,<sp/>Each(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/>another_vector.push_back(</highlight><highlight class="stringliteral">&quot;fie&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/>another_vector.push_back(</highlight><highlight class="stringliteral">&quot;foe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"><sp/><sp/>another_vector.push_back(</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_vector,<sp/>Not(Each(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="5376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal">TEST(EachTest,<sp/>MatchesMapWhenAllElementsMatch)<sp/>{</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/>map&lt;const<sp/>char*,<sp/>int&gt;<sp/>my_map;</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacebar" kindref="compound">bar</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>string&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/>my_map[bar]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/>EXPECT_THAT(my_map,<sp/>Each(make_pair(bar,<sp/>2)));</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/>map&lt;string,<sp/>int&gt;<sp/>another_map;</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_map,<sp/>Each(make_pair(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">),<sp/>1)));</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_map,<sp/>Each(make_pair(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">),<sp/>1)));</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;fie&quot;</highlight><highlight class="normal">]<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;foe&quot;</highlight><highlight class="normal">]<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/>another_map[</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">]<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_map,<sp/>Not(Each(make_pair(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fee&quot;</highlight><highlight class="normal">),<sp/>1))));</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_map,<sp/>Not(Each(make_pair(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;fum&quot;</highlight><highlight class="normal">),<sp/>1))));</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/>EXPECT_THAT(another_map,<sp/>Each(Pair(_,<sp/>Gt(0))));</highlight></codeline>
<codeline lineno="5394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"></highlight></codeline>
<codeline lineno="5396"><highlight class="normal">TEST(EachTest,<sp/>AcceptsMatcher)<sp/>{</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Each(Gt(0)));</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/>EXPECT_THAT(a,<sp/>Not(Each(Gt(1))));</highlight></codeline>
<codeline lineno="5400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal">TEST(EachTest,<sp/>WorksForNativeArrayAsTuple)<sp/>{</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(pointer,<sp/>2),<sp/>Each(Gt(0)));</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/>EXPECT_THAT(make_tuple(pointer,<sp/>2),<sp/>Not(Each(Gt(1))));</highlight></codeline>
<codeline lineno="5407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>testing<sp/>Pointwise().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5410" refid="classtesting_1_1gmock__matchers__test_1_1_is_half_of_matcher" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__matchers__test_1_1_is_half_of_matcher" kindref="compound">IsHalfOfMatcher</ref><sp/>{</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MatchAndExplain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;T1,<sp/>T2&gt;&amp;<sp/>a_pair,</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref>*<sp/>listener)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get&lt;0&gt;(a_pair)<sp/>==<sp/>get&lt;1&gt;(a_pair)/2)<sp/>{</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>second<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>get&lt;1&gt;(a_pair);</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*listener<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>second/2<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>get&lt;1&gt;(a_pair)/2;</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"></highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"></highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeNegationTo(ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>isn&apos;t<sp/>half<sp/>of<sp/>the<sp/>second&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5431"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher&lt;IsHalfOfMatcher&gt;</ref><sp/>IsHalfOf()<sp/>{</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicMatcher(<ref refid="classtesting_1_1gmock__matchers__test_1_1_is_half_of_matcher" kindref="compound">IsHalfOfMatcher</ref>());</highlight></codeline>
<codeline lineno="5435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal">TEST(PointwiseTest,<sp/>DescribesSelf)<sp/>{</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>rhs;</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/>rhs.push_back(1);</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/>rhs.push_back(2);</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/>rhs.push_back(3);</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const vector&lt;int&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>Pointwise(IsHalfOf(),<sp/>rhs);</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;contains<sp/>3<sp/>values,<sp/>where<sp/>each<sp/>value<sp/>and<sp/>its<sp/>corresponding<sp/>value<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>}<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>contain<sp/>exactly<sp/>3<sp/>values,<sp/>or<sp/>contains<sp/>a<sp/>value<sp/>x<sp/>at<sp/>some<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;index<sp/>i<sp/>where<sp/>x<sp/>and<sp/>the<sp/>i-th<sp/>value<sp/>of<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>}<sp/>are<sp/>a<sp/>pair<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>first<sp/>isn&apos;t<sp/>half<sp/>of<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="5450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"></highlight></codeline>
<codeline lineno="5452"><highlight class="normal">TEST(PointwiseTest,<sp/>MakesCopyOfRhs)<sp/>{</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/>list&lt;signed<sp/>char&gt;<sp/>rhs;</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/>rhs.push_back(2);</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/>rhs.push_back(4);</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs[]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int (&amp;)[2]&gt;</ref><sp/>m<sp/>=<sp/>Pointwise(IsHalfOf(),<sp/>rhs);</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>m);</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"></highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Changing<sp/>rhs<sp/>now<sp/>shouldn&apos;t<sp/>affect<sp/>m,<sp/>which<sp/>made<sp/>a<sp/>copy<sp/>of<sp/>rhs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/>rhs.push_back(6);</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>m);</highlight></codeline>
<codeline lineno="5464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight></codeline>
<codeline lineno="5466"><highlight class="normal">TEST(PointwiseTest,<sp/>WorksForLhsNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>rhs;</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/>rhs.push_back(2);</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/>rhs.push_back(4);</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/>rhs.push_back(6);</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Pointwise(Lt(),<sp/>rhs));</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(Pointwise(Gt(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"></highlight></codeline>
<codeline lineno="5476"><highlight class="normal">TEST(PointwiseTest,<sp/>WorksForRhsNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>lhs;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/>lhs.push_back(2);</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/>lhs.push_back(4);</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/>lhs.push_back(6);</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Pointwise(Gt(),<sp/>rhs));</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(Pointwise(Lt(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"></highlight></codeline>
<codeline lineno="5486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5487"><highlight class="normal"></highlight></codeline>
<codeline lineno="5488"><highlight class="normal">TEST(PointwiseTest,<sp/>WorksForRhsInitializerList)<sp/>{</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>lhs{2,<sp/>4,<sp/>6};</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Pointwise(Gt(),<sp/>{1,<sp/>2,<sp/>3}));</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(Pointwise(Lt(),<sp/>{3,<sp/>3,<sp/>7})));</highlight></codeline>
<codeline lineno="5492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"></highlight></codeline>
<codeline lineno="5494"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5495"><highlight class="normal"></highlight></codeline>
<codeline lineno="5496"><highlight class="normal">TEST(PointwiseTest,<sp/>RejectsWrongSize)<sp/>{</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[2]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[1]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(Pointwise(Gt(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>contains<sp/>2<sp/>values&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(Pointwise(Gt(),<sp/>rhs),<sp/>lhs));</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs2[3]<sp/>=<sp/>{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(Pointwise(Gt(),<sp/>rhs2)));</highlight></codeline>
<codeline lineno="5505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"></highlight></codeline>
<codeline lineno="5507"><highlight class="normal">TEST(PointwiseTest,<sp/>RejectsWrongContent)<sp/>{</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[3]<sp/>=<sp/>{2,<sp/>6,<sp/>4};</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(Pointwise(IsHalfOf(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>value<sp/>pair<sp/>(2,<sp/>6)<sp/>at<sp/>index<sp/>#1<sp/>don&apos;t<sp/>match,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>second/2<sp/>is<sp/>3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(Pointwise(IsHalfOf(),<sp/>rhs),<sp/>lhs));</highlight></codeline>
<codeline lineno="5514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"></highlight></codeline>
<codeline lineno="5516"><highlight class="normal">TEST(PointwiseTest,<sp/>AcceptsCorrectContent)<sp/>{</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[3]<sp/>=<sp/>{2,<sp/>4,<sp/>6};</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Pointwise(IsHalfOf(),<sp/>rhs));</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(Pointwise(IsHalfOf(),<sp/>rhs),<sp/>lhs));</highlight></codeline>
<codeline lineno="5521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"></highlight></codeline>
<codeline lineno="5523"><highlight class="normal">TEST(PointwiseTest,<sp/>AllowsMonomorphicInnerMatcher)<sp/>{</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[3]<sp/>=<sp/>{2,<sp/>4,<sp/>6};</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;tuple&lt;const double&amp;, const int&amp;&gt;</ref><sp/>&gt;<sp/>m1<sp/>=<sp/>IsHalfOf();</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Pointwise(m1,<sp/>rhs));</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(Pointwise(m1,<sp/>rhs),<sp/>lhs));</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"></highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>type<sp/>works<sp/>as<sp/>a<sp/>tuple&lt;const<sp/>double&amp;,<sp/>const<sp/>int&amp;&gt;<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implicitly<sp/>cast<sp/>to<sp/>tuple&lt;double,<sp/>int&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;tuple&lt;double, int&gt;</ref><sp/>&gt;<sp/>m2<sp/>=<sp/>IsHalfOf();</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Pointwise(m2,<sp/>rhs));</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Explain(Pointwise(m2,<sp/>rhs),<sp/>lhs));</highlight></codeline>
<codeline lineno="5535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>DescribesSelf)<sp/>{</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>rhs;</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/>rhs.push_back(1);</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/>rhs.push_back(2);</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/>rhs.push_back(3);</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const vector&lt;int&gt;</ref>&amp;&gt;<sp/>m<sp/>=<sp/>UnorderedPointwise(IsHalfOf(),<sp/>rhs);</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;has<sp/>3<sp/>elements<sp/>and<sp/>there<sp/>exists<sp/>some<sp/>permutation<sp/>of<sp/>elements<sp/>such<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;that:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#0<sp/>and<sp/>1<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#1<sp/>and<sp/>2<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#2<sp/>and<sp/>3<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Describe(m));</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;doesn&apos;t<sp/>have<sp/>3<sp/>elements,<sp/>or<sp/>there<sp/>exists<sp/>no<sp/>permutation<sp/>of<sp/>elements<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;such<sp/>that:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#0<sp/>and<sp/>1<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#1<sp/>and<sp/>2<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;and\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>element<sp/>#2<sp/>and<sp/>3<sp/>are<sp/>a<sp/>pair<sp/>where<sp/>the<sp/>first<sp/>is<sp/>half<sp/>of<sp/>the<sp/>second&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeNegation(m));</highlight></codeline>
<codeline lineno="5561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"></highlight></codeline>
<codeline lineno="5563"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>MakesCopyOfRhs)<sp/>{</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/>list&lt;signed<sp/>char&gt;<sp/>rhs;</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/>rhs.push_back(2);</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/>rhs.push_back(4);</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"></highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs[]<sp/>=<sp/>{2,<sp/>1};</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const int (&amp;)[2]&gt;</ref><sp/>m<sp/>=<sp/>UnorderedPointwise(IsHalfOf(),<sp/>rhs);</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>m);</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"></highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Changing<sp/>rhs<sp/>now<sp/>shouldn&apos;t<sp/>affect<sp/>m,<sp/>which<sp/>made<sp/>a<sp/>copy<sp/>of<sp/>rhs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/>rhs.push_back(6);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>m);</highlight></codeline>
<codeline lineno="5575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"></highlight></codeline>
<codeline lineno="5577"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>WorksForLhsNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>rhs;</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/>rhs.push_back(4);</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/>rhs.push_back(6);</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/>rhs.push_back(2);</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>UnorderedPointwise(Lt(),<sp/>rhs));</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(UnorderedPointwise(Gt(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"></highlight></codeline>
<codeline lineno="5587"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>WorksForRhsNativeArray)<sp/>{</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>lhs;</highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/>lhs.push_back(4);</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/>lhs.push_back(2);</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/>lhs.push_back(6);</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>UnorderedPointwise(Gt(),<sp/>rhs));</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(UnorderedPointwise(Lt(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"></highlight></codeline>
<codeline lineno="5597"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5598"><highlight class="normal"></highlight></codeline>
<codeline lineno="5599"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>WorksForRhsInitializerList)<sp/>{</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;int&gt;<sp/>lhs{2,<sp/>4,<sp/>6};</highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>UnorderedPointwise(Gt(),<sp/>{5,<sp/>1,<sp/>3}));</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(UnorderedPointwise(Lt(),<sp/>{1,<sp/>1,<sp/>7})));</highlight></codeline>
<codeline lineno="5603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"></highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_INITIALIZER_LIST_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"></highlight></codeline>
<codeline lineno="5607"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>RejectsWrongSize)<sp/>{</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[2]<sp/>=<sp/>{1,<sp/>2};</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[1]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(UnorderedPointwise(Gt(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;which<sp/>has<sp/>2<sp/>elements&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(UnorderedPointwise(Gt(),<sp/>rhs),<sp/>lhs));</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs2[3]<sp/>=<sp/>{0,<sp/>1,<sp/>2};</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(UnorderedPointwise(Gt(),<sp/>rhs2)));</highlight></codeline>
<codeline lineno="5616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"></highlight></codeline>
<codeline lineno="5618"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>RejectsWrongContent)<sp/>{</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[3]<sp/>=<sp/>{2,<sp/>6,<sp/>6};</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>Not(UnorderedPointwise(IsHalfOf(),<sp/>rhs)));</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;where<sp/>the<sp/>following<sp/>elements<sp/>don&apos;t<sp/>match<sp/>any<sp/>matchers:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;element<sp/>#1:<sp/>2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Explain(UnorderedPointwise(IsHalfOf(),<sp/>rhs),<sp/>lhs));</highlight></codeline>
<codeline lineno="5625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"></highlight></codeline>
<codeline lineno="5627"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>AcceptsCorrectContentInSameOrder)<sp/>{</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[3]<sp/>=<sp/>{2,<sp/>4,<sp/>6};</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>UnorderedPointwise(IsHalfOf(),<sp/>rhs));</highlight></codeline>
<codeline lineno="5631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"></highlight></codeline>
<codeline lineno="5633"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>AcceptsCorrectContentInDifferentOrder)<sp/>{</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[3]<sp/>=<sp/>{6,<sp/>4,<sp/>2};</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>UnorderedPointwise(IsHalfOf(),<sp/>rhs));</highlight></codeline>
<codeline lineno="5637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"></highlight></codeline>
<codeline lineno="5639"><highlight class="normal">TEST(UnorderedPointwiseTest,<sp/>AllowsMonomorphicInnerMatcher)<sp/>{</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs[3]<sp/>=<sp/>{1,<sp/>2,<sp/>3};</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs[3]<sp/>=<sp/>{4,<sp/>6,<sp/>2};</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;tuple&lt;const double&amp;, const int&amp;&gt;</ref><sp/>&gt;<sp/>m1<sp/>=<sp/>IsHalfOf();</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>UnorderedPointwise(m1,<sp/>rhs));</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"></highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>type<sp/>works<sp/>as<sp/>a<sp/>tuple&lt;const<sp/>double&amp;,<sp/>const<sp/>int&amp;&gt;<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implicitly<sp/>cast<sp/>to<sp/>tuple&lt;double,<sp/>int&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;tuple&lt;double, int&gt;</ref><sp/>&gt;<sp/>m2<sp/>=<sp/>IsHalfOf();</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/>EXPECT_THAT(lhs,<sp/>UnorderedPointwise(m2,<sp/>rhs));</highlight></codeline>
<codeline lineno="5649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight></codeline>
<codeline lineno="5651"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_matchers_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5652"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/test/gmock-matchers_test.cc"/>
  </compounddef>
</doxygen>
