<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gtest__xml__output__unittest___8cc" kind="file" language="C++">
    <compoundname>gtest_xml_output_unittest_.cc</compoundname>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="7366">
        <label>sys/stat.h</label>
      </node>
      <node id="7386">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="7359" relation="include">
        </childnode>
      </node>
      <node id="7353">
        <label>vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc</label>
        <link refid="gtest__xml__output__unittest___8cc"/>
        <childnode refid="7354" relation="include">
        </childnode>
      </node>
      <node id="7380">
        <label>iomanip</label>
      </node>
      <node id="7355">
        <label>limits</label>
      </node>
      <node id="7393">
        <label>assert.h</label>
      </node>
      <node id="7372">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="7391">
        <label>iterator</label>
      </node>
      <node id="7379">
        <label>float.h</label>
      </node>
      <node id="7397">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="7362">
        <label>stdlib.h</label>
      </node>
      <node id="7384">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="7364" relation="include">
        </childnode>
        <childnode refid="7370" relation="include">
        </childnode>
        <childnode refid="7359" relation="include">
        </childnode>
      </node>
      <node id="7398">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="7399" relation="include">
        </childnode>
        <childnode refid="7357" relation="include">
        </childnode>
        <childnode refid="7358" relation="include">
        </childnode>
        <childnode refid="7384" relation="include">
        </childnode>
      </node>
      <node id="7370">
        <label>string</label>
      </node>
      <node id="7381">
        <label>map</label>
      </node>
      <node id="7396">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="7390" relation="include">
        </childnode>
        <childnode refid="7359" relation="include">
        </childnode>
      </node>
      <node id="7361">
        <label>stddef.h</label>
      </node>
      <node id="7401">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="7356">
        <label>ostream</label>
      </node>
      <node id="7373">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="7387">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="7388" relation="include">
        </childnode>
      </node>
      <node id="7365">
        <label>sys/types.h</label>
      </node>
      <node id="7364">
        <label>string.h</label>
      </node>
      <node id="7377">
        <label>typeinfo</label>
      </node>
      <node id="7374">
        <label>unistd.h</label>
      </node>
      <node id="7357">
        <label>vector</label>
      </node>
      <node id="7395">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="7383">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="7355" relation="include">
        </childnode>
        <childnode refid="7359" relation="include">
        </childnode>
      </node>
      <node id="7371">
        <label>utility</label>
      </node>
      <node id="7369">
        <label>sstream</label>
      </node>
      <node id="7392">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="7362" relation="include">
        </childnode>
        <childnode refid="7393" relation="include">
        </childnode>
        <childnode refid="7359" relation="include">
        </childnode>
      </node>
      <node id="7399">
        <label>iosfwd</label>
      </node>
      <node id="7385">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="7384" relation="include">
        </childnode>
      </node>
      <node id="7368">
        <label>iostream</label>
      </node>
      <node id="7378">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="7371" relation="include">
        </childnode>
      </node>
      <node id="7354">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="7355" relation="include">
        </childnode>
        <childnode refid="7356" relation="include">
        </childnode>
        <childnode refid="7357" relation="include">
        </childnode>
        <childnode refid="7358" relation="include">
        </childnode>
        <childnode refid="7384" relation="include">
        </childnode>
        <childnode refid="7387" relation="include">
        </childnode>
        <childnode refid="7383" relation="include">
        </childnode>
        <childnode refid="7389" relation="include">
        </childnode>
        <childnode refid="7394" relation="include">
        </childnode>
        <childnode refid="7397" relation="include">
        </childnode>
        <childnode refid="7398" relation="include">
        </childnode>
        <childnode refid="7400" relation="include">
        </childnode>
        <childnode refid="7401" relation="include">
        </childnode>
      </node>
      <node id="7375">
        <label>strings.h</label>
      </node>
      <node id="7360">
        <label>ctype.h</label>
      </node>
      <node id="7400">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="7359" relation="include">
        </childnode>
        <childnode refid="7386" relation="include">
        </childnode>
      </node>
      <node id="7359">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="7360" relation="include">
        </childnode>
        <childnode refid="7361" relation="include">
        </childnode>
        <childnode refid="7362" relation="include">
        </childnode>
        <childnode refid="7363" relation="include">
        </childnode>
        <childnode refid="7364" relation="include">
        </childnode>
        <childnode refid="7365" relation="include">
        </childnode>
        <childnode refid="7366" relation="include">
        </childnode>
        <childnode refid="7367" relation="include">
        </childnode>
        <childnode refid="7368" relation="include">
        </childnode>
        <childnode refid="7369" relation="include">
        </childnode>
        <childnode refid="7370" relation="include">
        </childnode>
        <childnode refid="7371" relation="include">
        </childnode>
        <childnode refid="7357" relation="include">
        </childnode>
        <childnode refid="7372" relation="include">
        </childnode>
        <childnode refid="7373" relation="include">
        </childnode>
        <childnode refid="7374" relation="include">
        </childnode>
        <childnode refid="7375" relation="include">
        </childnode>
        <childnode refid="7376" relation="include">
        </childnode>
        <childnode refid="7377" relation="include">
        </childnode>
        <childnode refid="7378" relation="include">
        </childnode>
      </node>
      <node id="7358">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="7359" relation="include">
        </childnode>
        <childnode refid="7360" relation="include">
        </childnode>
        <childnode refid="7379" relation="include">
        </childnode>
        <childnode refid="7364" relation="include">
        </childnode>
        <childnode refid="7380" relation="include">
        </childnode>
        <childnode refid="7355" relation="include">
        </childnode>
        <childnode refid="7381" relation="include">
        </childnode>
        <childnode refid="7382" relation="include">
        </childnode>
        <childnode refid="7370" relation="include">
        </childnode>
        <childnode refid="7357" relation="include">
        </childnode>
        <childnode refid="7383" relation="include">
        </childnode>
        <childnode refid="7384" relation="include">
        </childnode>
        <childnode refid="7385" relation="include">
        </childnode>
        <childnode refid="7386" relation="include">
        </childnode>
      </node>
      <node id="7390">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="7360" relation="include">
        </childnode>
        <childnode refid="7391" relation="include">
        </childnode>
        <childnode refid="7382" relation="include">
        </childnode>
        <childnode refid="7371" relation="include">
        </childnode>
        <childnode refid="7357" relation="include">
        </childnode>
        <childnode refid="7358" relation="include">
        </childnode>
        <childnode refid="7392" relation="include">
        </childnode>
        <childnode refid="7359" relation="include">
        </childnode>
        <childnode refid="7394" relation="include">
        </childnode>
      </node>
      <node id="7382">
        <label>set</label>
      </node>
      <node id="7389">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="7359" relation="include">
        </childnode>
        <childnode refid="7371" relation="include">
        </childnode>
        <childnode refid="7358" relation="include">
        </childnode>
        <childnode refid="7390" relation="include">
        </childnode>
        <childnode refid="7396" relation="include">
        </childnode>
      </node>
      <node id="7367">
        <label>algorithm</label>
      </node>
      <node id="7376">
        <label>regex.h</label>
      </node>
      <node id="7363">
        <label>stdio.h</label>
      </node>
      <node id="7388">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="7358" relation="include">
        </childnode>
        <childnode refid="7363" relation="include">
        </childnode>
      </node>
      <node id="7394">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="7356" relation="include">
        </childnode>
        <childnode refid="7369" relation="include">
        </childnode>
        <childnode refid="7370" relation="include">
        </childnode>
        <childnode refid="7371" relation="include">
        </childnode>
        <childnode refid="7357" relation="include">
        </childnode>
        <childnode refid="7359" relation="include">
        </childnode>
        <childnode refid="7358" relation="include">
        </childnode>
        <childnode refid="7395" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_successful_test" prot="public">SuccessfulTest</innerclass>
    <innerclass refid="class_failed_test" prot="public">FailedTest</innerclass>
    <innerclass refid="class_disabled_test" prot="public">DisabledTest</innerclass>
    <innerclass refid="class_property_recording_test" prot="public">PropertyRecordingTest</innerclass>
    <innerclass refid="class_value_param_test" prot="public">ValueParamTest</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1aa6dc865a2584304f44da9f4b085f8e08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(SuccessfulTest, Succeeds)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_successful_test" kindref="compound">SuccessfulTest</ref></type>
        </param>
        <param>
          <type>Succeeds</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="53" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a0789e983f69fddd50cd6a2ad73a167c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(FailedTest, Fails)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_failed_test" kindref="compound">FailedTest</ref></type>
        </param>
        <param>
          <type>Fails</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="61" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a743749af716f6da79472d5a662e31723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(DisabledTest, DISABLED_test_not_run)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_disabled_test" kindref="compound">DisabledTest</ref></type>
        </param>
        <param>
          <type>DISABLED_test_not_run</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="68" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a32b81caf894a39956292191e0ac9efe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MixedResultTest, Succeeds)</argsstring>
        <name>TEST</name>
        <param>
          <type>MixedResultTest</type>
        </param>
        <param>
          <type>Succeeds</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="72" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1adb093d371e5672f26e82d2df1e66e311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MixedResultTest, Fails)</argsstring>
        <name>TEST</name>
        <param>
          <type>MixedResultTest</type>
        </param>
        <param>
          <type>Fails</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="77" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a34e71da1ce98b2984594c8db97018c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(MixedResultTest, DISABLED_test)</argsstring>
        <name>TEST</name>
        <param>
          <type>MixedResultTest</type>
        </param>
        <param>
          <type>DISABLED_test</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="82" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a6ac53dbcf6b02f01cc4f2486db8dd9dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(XmlQuotingTest, OutputsCData)</argsstring>
        <name>TEST</name>
        <param>
          <type>XmlQuotingTest</type>
        </param>
        <param>
          <type>OutputsCData</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="86" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1aa07f760144874b77158b9336bdc95c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(InvalidCharactersTest, InvalidCharactersInMessage)</argsstring>
        <name>TEST</name>
        <param>
          <type>InvalidCharactersTest</type>
        </param>
        <param>
          <type>InvalidCharactersInMessage</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="93" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1af81998ca9ca595e3107c142ebd25e0d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PropertyRecordingTest, OneProperty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref></type>
        </param>
        <param>
          <type>OneProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="103" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="103" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1adb1f852fc00cf0ee498bdfeda3063904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PropertyRecordingTest, IntValuedProperty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref></type>
        </param>
        <param>
          <type>IntValuedProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="107" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="107" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1ae2e5aa08a79eb9b086a145cc06accfc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PropertyRecordingTest, ThreeProperties)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref></type>
        </param>
        <param>
          <type>ThreeProperties</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="111" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a261de6777fb791a7556366e938ddb98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(PropertyRecordingTest, TwoValuesForOneKeyUsesLastValue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref></type>
        </param>
        <param>
          <type>TwoValuesForOneKeyUsesLastValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="117" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1ab78e993a01acfc3e6b0b879351a1e679" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NoFixtureTest, RecordProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>NoFixtureTest</type>
        </param>
        <param>
          <type>RecordProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="122" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a8a5eb3769c1d7482bf69f3a03862c6a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ExternalUtilityThatCallsRecordProperty</definition>
        <argsstring>(const std::string &amp;key, int value)</argsstring>
        <name>ExternalUtilityThatCallsRecordProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="126" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a88d769551f5ca79a6668f6ef64a1abdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ExternalUtilityThatCallsRecordProperty</definition>
        <argsstring>(const std::string &amp;key, const std::string &amp;value)</argsstring>
        <name>ExternalUtilityThatCallsRecordProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="130" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1abe7f5c93beecd6501a7b6ccf838f5b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NoFixtureTest, ExternalUtilityThatCallsRecordIntValuedProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>NoFixtureTest</type>
        </param>
        <param>
          <type>ExternalUtilityThatCallsRecordIntValuedProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="135" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1aabb1993df586239008c66c29009a8b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(NoFixtureTest, ExternalUtilityThatCallsRecordStringValuedProperty)</argsstring>
        <name>TEST</name>
        <param>
          <type>NoFixtureTest</type>
        </param>
        <param>
          <type>ExternalUtilityThatCallsRecordStringValuedProperty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="139" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a615039c123426f44437f6119fce3333f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ValueParamTest, HasValueParamAttribute)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref></type>
        </param>
        <param>
          <type>HasValueParamAttribute</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="146" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a45f95818a41865db8e0209f3f536fab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ValueParamTest, AnotherTestThatHasValueParamAttribute)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref></type>
        </param>
        <param>
          <type>AnotherTestThatHasValueParamAttribute</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="147" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a6f0556593693ceebb2d31ff96025cebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(Single, ValueParamTest, Values(33, 42))</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>Single</type>
        </param>
        <param>
          <type><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref></type>
        </param>
        <param>
          <type>Values(33, 42)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__xml__output__unittest___8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" line="172" column="1" bodyfile="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc" bodystart="172" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2006,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>eefacm@gmail.com<sp/>(Sean<sp/>Mcafee)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unit<sp/>test<sp/>for<sp/>Google<sp/>Test<sp/>XML<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>can<sp/>specify<sp/>XML<sp/>output<sp/>in<sp/>a<sp/>Google<sp/>Test<sp/>program<sp/>to<sp/>run<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>either<sp/>the<sp/>GTEST_OUTPUT<sp/>environment<sp/>variable<sp/>or<sp/>the<sp/>--gtest_output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flag.<sp/><sp/>This<sp/>is<sp/>used<sp/>for<sp/>testing<sp/>such<sp/>functionality.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>will<sp/>be<sp/>invoked<sp/>from<sp/>a<sp/>Python<sp/>unit<sp/>test.<sp/><sp/>Don&apos;t<sp/>run<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">using<sp/>::testing::InitGoogleTest;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">using<sp/>::testing::TestEventListeners;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">using<sp/>::testing::TestWithParam;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">using<sp/>::testing::UnitTest;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">using<sp/>::testing::Test;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">using<sp/>::testing::Values;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="class_successful_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_successful_test" kindref="compound">SuccessfulTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_successful_test" kindref="compound">SuccessfulTest</ref>,<sp/>Succeeds)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>SUCCEED()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>success.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>1);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_failed_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_failed_test" kindref="compound">FailedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_failed_test" kindref="compound">FailedTest</ref>,<sp/>Fails)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>2);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="class_disabled_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_disabled_test" kindref="compound">DisabledTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal">};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_disabled_test" kindref="compound">DisabledTest</ref>,<sp/>DISABLED_test_not_run)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Disabled<sp/>test<sp/>should<sp/>not<sp/>be<sp/>run&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">TEST(MixedResultTest,<sp/>Succeeds)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>1);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>ASSERT_EQ(1,<sp/>1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">TEST(MixedResultTest,<sp/>Fails)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>2);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>ASSERT_EQ(2,<sp/>3);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">TEST(MixedResultTest,<sp/>DISABLED_test)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Unexpected<sp/>failure:<sp/>Disabled<sp/>test<sp/>should<sp/>not<sp/>be<sp/>run&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">TEST(XmlQuotingTest,<sp/>OutputsCData)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;XML<sp/>output:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml<sp/>encoding=\&quot;utf-8\&quot;&gt;&lt;top&gt;&lt;![CDATA[cdata<sp/>text]]&gt;&lt;/top&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helps<sp/>to<sp/>test<sp/>that<sp/>invalid<sp/>characters<sp/>produced<sp/>by<sp/>test<sp/>code<sp/>do<sp/>not<sp/>make</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>into<sp/>the<sp/>XML<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">TEST(InvalidCharactersTest,<sp/>InvalidCharactersInMessage)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>FAIL()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>characters<sp/>in<sp/>brackets<sp/>[\x1\x2]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_property_recording_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUpTestCase()<sp/>{<sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;SetUpTestCase&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TearDownTestCase()<sp/>{<sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;TearDownTestCase&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;aye&quot;</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref>,<sp/>OneProperty)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref>,<sp/>IntValuedProperty)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key_int&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref>,<sp/>ThreeProperties)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key_2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key_3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="class_property_recording_test" kindref="compound">PropertyRecordingTest</ref>,<sp/>TwoValuesForOneKeyUsesLastValue)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key_1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">TEST(NoFixtureTest,<sp/>RecordProperty)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>RecordProperty(</highlight><highlight class="stringliteral">&quot;key&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExternalUtilityThatCallsRecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>testing::Test::RecordProperty(key,<sp/>value);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExternalUtilityThatCallsRecordProperty(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>testing::Test::RecordProperty(key,<sp/>value);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">TEST(NoFixtureTest,<sp/>ExternalUtilityThatCallsRecordIntValuedProperty)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>ExternalUtilityThatCallsRecordProperty(</highlight><highlight class="stringliteral">&quot;key_for_utility_int&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">TEST(NoFixtureTest,<sp/>ExternalUtilityThatCallsRecordStringValuedProperty)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>ExternalUtilityThatCallsRecordProperty(</highlight><highlight class="stringliteral">&quot;key_for_utility_string&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>test<sp/>parameter<sp/>value<sp/>is<sp/>output<sp/>in<sp/>the<sp/>&apos;value_param&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XML<sp/>attribute<sp/>for<sp/>value-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TestWithParam&lt;int&gt;<sp/>{};</highlight></codeline>
<codeline lineno="146"><highlight class="normal">TEST_P(<ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref>,<sp/>HasValueParamAttribute)<sp/>{}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">TEST_P(<ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref>,<sp/>AnotherTestThatHasValueParamAttribute)<sp/>{}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">INSTANTIATE_TEST_CASE_P(Single,<sp/><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref>,<sp/>Values(33,<sp/>42));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TYPED_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>type<sp/>parameter<sp/>name<sp/>is<sp/>output<sp/>in<sp/>the<sp/>&apos;type_param&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XML<sp/>attribute<sp/>for<sp/>typed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_typed_test" kindref="compound">TypedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test<sp/>{};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>testing::Types&lt;int,<sp/>long&gt;<sp/>TypedTestTypes;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">TYPED_TEST_CASE(<ref refid="class_typed_test" kindref="compound">TypedTest</ref>,<sp/>TypedTestTypes);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">TYPED_TEST(<ref refid="class_typed_test" kindref="compound">TypedTest</ref>,<sp/>HasTypeParamAttribute)<sp/>{}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_TYPED_TEST_P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>the<sp/>type<sp/>parameter<sp/>name<sp/>is<sp/>output<sp/>in<sp/>the<sp/>&apos;type_param&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XML<sp/>attribute<sp/>for<sp/>type-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTestCase<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Test<sp/>{};</highlight></codeline>
<codeline lineno="163"><highlight class="normal">TYPED_TEST_CASE_P(TypeParameterizedTestCase);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">TYPED_TEST_P(TypeParameterizedTestCase,<sp/>HasTypeParamAttribute)<sp/>{}</highlight></codeline>
<codeline lineno="165"><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(TypeParameterizedTestCase,<sp/>HasTypeParamAttribute);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>testing::Types&lt;int,<sp/>long&gt;<sp/>TypeParameterizedTestCaseTypes;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(Single,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TypeParameterizedTestCase,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TypeParameterizedTestCaseTypes);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>strcmp(argv[1],<sp/></highlight><highlight class="stringliteral">&quot;--shut_down_xml&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>TestEventListeners&amp;<sp/>listeners<sp/>=<sp/>UnitTest::GetInstance()-&gt;listeners();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>listeners.Release(listeners.default_xml_generator());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>testing::Test::RecordProperty(</highlight><highlight class="stringliteral">&quot;ad_hoc_property&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;42&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc"/>
  </compounddef>
</doxygen>
