<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gtest-linked__ptr_8h" kind="file" language="C++">
    <compoundname>gtest-linked_ptr.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="gtest-port_8h" local="yes">gtest/internal/gtest-port.h</includes>
    <includedby refid="gmock-port_8h" local="yes">vendor/googletest/googlemock/include/gmock/internal/gmock-port.h</includedby>
    <includedby refid="gmock-more-actions__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock-more-actions_test.cc</includedby>
    <includedby refid="gtest-param-util_8h" local="yes">vendor/googletest/googletest/include/gtest/internal/gtest-param-util.h</includedby>
    <includedby refid="gtest-linked__ptr__test_8cc" local="yes">vendor/googletest/googletest/test/gtest-linked_ptr_test.cc</includedby>
    <incdepgraph>
      <node id="3803">
        <label>sys/stat.h</label>
      </node>
      <node id="3810">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="3796">
        <label>assert.h</label>
      </node>
      <node id="3795">
        <label>stdlib.h</label>
      </node>
      <node id="3807">
        <label>string</label>
      </node>
      <node id="3799">
        <label>stddef.h</label>
      </node>
      <node id="3811">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="3802">
        <label>sys/types.h</label>
      </node>
      <node id="3801">
        <label>string.h</label>
      </node>
      <node id="3815">
        <label>typeinfo</label>
      </node>
      <node id="3812">
        <label>unistd.h</label>
      </node>
      <node id="3809">
        <label>vector</label>
      </node>
      <node id="3808">
        <label>utility</label>
      </node>
      <node id="3806">
        <label>sstream</label>
      </node>
      <node id="3794">
        <label>vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h"/>
        <childnode refid="3795" relation="include">
        </childnode>
        <childnode refid="3796" relation="include">
        </childnode>
        <childnode refid="3797" relation="include">
        </childnode>
      </node>
      <node id="3805">
        <label>iostream</label>
      </node>
      <node id="3816">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="3808" relation="include">
        </childnode>
      </node>
      <node id="3813">
        <label>strings.h</label>
      </node>
      <node id="3798">
        <label>ctype.h</label>
      </node>
      <node id="3797">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="3798" relation="include">
        </childnode>
        <childnode refid="3799" relation="include">
        </childnode>
        <childnode refid="3795" relation="include">
        </childnode>
        <childnode refid="3800" relation="include">
        </childnode>
        <childnode refid="3801" relation="include">
        </childnode>
        <childnode refid="3802" relation="include">
        </childnode>
        <childnode refid="3803" relation="include">
        </childnode>
        <childnode refid="3804" relation="include">
        </childnode>
        <childnode refid="3805" relation="include">
        </childnode>
        <childnode refid="3806" relation="include">
        </childnode>
        <childnode refid="3807" relation="include">
        </childnode>
        <childnode refid="3808" relation="include">
        </childnode>
        <childnode refid="3809" relation="include">
        </childnode>
        <childnode refid="3810" relation="include">
        </childnode>
        <childnode refid="3811" relation="include">
        </childnode>
        <childnode refid="3812" relation="include">
        </childnode>
        <childnode refid="3813" relation="include">
        </childnode>
        <childnode refid="3814" relation="include">
        </childnode>
        <childnode refid="3815" relation="include">
        </childnode>
        <childnode refid="3816" relation="include">
        </childnode>
      </node>
      <node id="3804">
        <label>algorithm</label>
      </node>
      <node id="3814">
        <label>regex.h</label>
      </node>
      <node id="3800">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3838">
        <label>vendor/googletest/googletest/src/gtest-internal-inl.h</label>
        <link refid="gtest-internal-inl_8h_source"/>
      </node>
      <node id="3839">
        <label>vendor/googletest/googletest/test/gtest-param-test_test.h</label>
        <link refid="gtest-param-test__test_8h_source"/>
      </node>
      <node id="3832">
        <label>vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3825" relation="include">
        </childnode>
        <childnode refid="3828" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3821">
        <label>vendor/googletest/googlemock/include/gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3829">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="3830" relation="include">
        </childnode>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3825">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3822">
        <label>vendor/googletest/googlemock/include/gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="3823" relation="include">
        </childnode>
      </node>
      <node id="3841">
        <label>vendor/googletest/googletest/include/gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="3834" relation="include">
        </childnode>
      </node>
      <node id="3820">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="3821" relation="include">
        </childnode>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3819">
        <label>vendor/googletest/googlemock/include/gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="3820" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3818">
        <label>vendor/googletest/googlemock/include/gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="3819" relation="include">
        </childnode>
        <childnode refid="3827" relation="include">
        </childnode>
        <childnode refid="3820" relation="include">
        </childnode>
        <childnode refid="3826" relation="include">
        </childnode>
        <childnode refid="3828" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3831" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3823" relation="include">
        </childnode>
      </node>
      <node id="3840">
        <label>vendor/googletest/googletest/test/gtest-typed-test_test.h</label>
        <link refid="gtest-typed-test__test_8h_source"/>
      </node>
      <node id="3824">
        <label>vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="3825" relation="include">
        </childnode>
        <childnode refid="3826" relation="include">
        </childnode>
      </node>
      <node id="3817">
        <label>vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h"/>
        <childnode refid="3818" relation="include">
        </childnode>
        <childnode refid="3833" relation="include">
        </childnode>
      </node>
      <node id="3828">
        <label>vendor/googletest/googlemock/include/gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="3829" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3826">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3827">
        <label>vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3835">
        <label>vendor/googletest/googletest/include/gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="3836" relation="include">
        </childnode>
        <childnode refid="3827" relation="include">
        </childnode>
        <childnode refid="3828" relation="include">
        </childnode>
        <childnode refid="3824" relation="include">
        </childnode>
        <childnode refid="3832" relation="include">
        </childnode>
        <childnode refid="3823" relation="include">
        </childnode>
        <childnode refid="3837" relation="include">
        </childnode>
        <childnode refid="3838" relation="include">
        </childnode>
        <childnode refid="3839" relation="include">
        </childnode>
        <childnode refid="3840" relation="include">
        </childnode>
      </node>
      <node id="3836">
        <label>test/test_tracker.cpp</label>
        <link refid="test__tracker_8cpp"/>
      </node>
      <node id="3830">
        <label>vendor/googletest/googlemock/include/gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="3822" relation="include">
        </childnode>
      </node>
      <node id="3833">
        <label>vendor/googletest/googletest/include/gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="3834" relation="include">
        </childnode>
        <childnode refid="3841" relation="include">
        </childnode>
      </node>
      <node id="3831">
        <label>vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="3832" relation="include">
        </childnode>
      </node>
      <node id="3834">
        <label>vendor/googletest/googletest/include/gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="3835" relation="include">
        </childnode>
      </node>
      <node id="3837">
        <label>vendor/googletest/googletest/include/gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="3838" relation="include">
        </childnode>
      </node>
      <node id="3823">
        <label>vendor/googletest/googlemock/test/gmock_link_test.h</label>
        <link refid="gmock__link__test_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1linked__ptr__internal" prot="public">testing::internal::linked_ptr_internal</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1linked__ptr" prot="public">testing::internal::linked_ptr</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2003<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>Dan<sp/>Egnor<sp/>(egnor@google.com)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>&quot;smart&quot;<sp/>pointer<sp/>type<sp/>with<sp/>reference<sp/>tracking.<sp/><sp/>Every<sp/>pointer<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>particular<sp/>object<sp/>is<sp/>kept<sp/>on<sp/>a<sp/>circular<sp/>linked<sp/>list.<sp/><sp/>When<sp/>the<sp/>last<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>an<sp/>object<sp/>is<sp/>destroyed<sp/>or<sp/>reassigned,<sp/>the<sp/>object<sp/>is<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Used<sp/>properly,<sp/>this<sp/>deletes<sp/>the<sp/>object<sp/>when<sp/>the<sp/>last<sp/>reference<sp/>goes<sp/>away.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>several<sp/>caveats:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Like<sp/>all<sp/>reference<sp/>counting<sp/>schemes,<sp/>cycles<sp/>lead<sp/>to<sp/>leaks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Each<sp/>smart<sp/>pointer<sp/>is<sp/>actually<sp/>two<sp/>pointers<sp/>(8<sp/>bytes<sp/>instead<sp/>of<sp/>4).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Every<sp/>time<sp/>a<sp/>pointer<sp/>is<sp/>assigned,<sp/>the<sp/>entire<sp/>list<sp/>of<sp/>pointers<sp/>to<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>object<sp/>is<sp/>traversed.<sp/><sp/>This<sp/>class<sp/>is<sp/>therefore<sp/>NOT<sp/>SUITABLE<sp/>when<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>will<sp/>often<sp/>be<sp/>more<sp/>than<sp/>two<sp/>or<sp/>three<sp/>pointers<sp/>to<sp/>a<sp/>particular<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>References<sp/>are<sp/>only<sp/>tracked<sp/>as<sp/>long<sp/>as<sp/>linked_ptr&lt;&gt;<sp/>objects<sp/>are<sp/>copied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>If<sp/>a<sp/>linked_ptr&lt;&gt;<sp/>is<sp/>converted<sp/>to<sp/>a<sp/>raw<sp/>pointer<sp/>and<sp/>back,<sp/>BAD<sp/>THINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>will<sp/>happen<sp/>(double<sp/>deletion).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>good<sp/>use<sp/>of<sp/>this<sp/>class<sp/>is<sp/>storing<sp/>object<sp/>references<sp/>in<sp/>STL<sp/>containers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>safely<sp/>put<sp/>linked_ptr&lt;&gt;<sp/>in<sp/>a<sp/>vector&lt;&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>uses<sp/>may<sp/>not<sp/>be<sp/>as<sp/>good.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>If<sp/>you<sp/>use<sp/>an<sp/>incomplete<sp/>type<sp/>with<sp/>linked_ptr&lt;&gt;,<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*containing*<sp/>linked_ptr&lt;&gt;<sp/>must<sp/>have<sp/>a<sp/>constructor<sp/>and<sp/>destructor<sp/>(even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>they<sp/>do<sp/>nothing!).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bill<sp/>Gibbons<sp/>suggested<sp/>we<sp/>use<sp/>something<sp/>like<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Thread<sp/>Safety:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Unlike<sp/>other<sp/>linked_ptr<sp/>implementations,<sp/>in<sp/>this<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>a<sp/>linked_ptr<sp/>object<sp/>is<sp/>thread-safe<sp/>in<sp/>the<sp/>sense<sp/>that:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>it&apos;s<sp/>safe<sp/>to<sp/>copy<sp/>linked_ptr<sp/>objects<sp/>concurrently,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>it&apos;s<sp/>safe<sp/>to<sp/>copy<sp/>*from*<sp/>a<sp/>linked_ptr<sp/>and<sp/>read<sp/>its<sp/>underlying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw<sp/>pointer<sp/>(e.g.<sp/>via<sp/>get())<sp/>concurrently,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>-<sp/>it&apos;s<sp/>safe<sp/>to<sp/>write<sp/>to<sp/>two<sp/>linked_ptrs<sp/>that<sp/>point<sp/>to<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared<sp/>object<sp/>concurrently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>rename<sp/>this<sp/>to<sp/>safe_linked_ptr<sp/>to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>confusion<sp/>with<sp/>normal<sp/>linked_ptr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Protects<sp/>copying<sp/>of<sp/>all<sp/>linked_ptr<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">GTEST_API_<sp/>GTEST_DECLARE_STATIC_MUTEX_(g_linked_ptr_mutex);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>used<sp/>internally<sp/>by<sp/>all<sp/>instances<sp/>of<sp/>linked_ptr&lt;&gt;.<sp/><sp/>It<sp/>needs<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>non-template<sp/>class<sp/>because<sp/>different<sp/>types<sp/>of<sp/>linked_ptr&lt;&gt;<sp/>can<sp/>refer<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>object<sp/>(linked_ptr&lt;Superclass&gt;(obj)<sp/>vs<sp/>linked_ptr&lt;Subclass&gt;(obj)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>So,<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>possible<sp/>for<sp/>different<sp/>types<sp/>of<sp/>linked_ptr<sp/>to<sp/>participate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>same<sp/>circular<sp/>linked<sp/>list,<sp/>so<sp/>we<sp/>need<sp/>a<sp/>single<sp/>class<sp/>type<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DO<sp/>NOT<sp/>USE<sp/>THIS<sp/>CLASS<sp/>DIRECTLY<sp/>YOURSELF.<sp/><sp/>Use<sp/>linked_ptr&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="classtesting_1_1internal_1_1linked__ptr__internal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1linked__ptr__internal" kindref="compound">linked_ptr_internal</ref><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>circle<sp/>that<sp/>includes<sp/>only<sp/>this<sp/>instance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join_new()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>next_<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Many<sp/>linked_ptr<sp/>operations<sp/>may<sp/>change<sp/>p.link_<sp/>for<sp/>some<sp/>linked_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>p<sp/>in<sp/>the<sp/>same<sp/>circle<sp/>as<sp/>this<sp/>object.<sp/><sp/>Therefore<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>prevent<sp/>two<sp/>such<sp/>operations<sp/>from<sp/>occurring<sp/>concurrently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>different<sp/>types<sp/>of<sp/>linked_ptr<sp/>objects<sp/>can<sp/>coexist<sp/>in<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>circle<sp/>(e.g.<sp/>linked_ptr&lt;Base&gt;,<sp/>linked_ptr&lt;Derived1&gt;,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>linked_ptr&lt;Derived2&gt;).<sp/><sp/>Therefore<sp/>we<sp/>must<sp/>use<sp/>a<sp/>single<sp/>mutex<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>protect<sp/>all<sp/>linked_ptr<sp/>objects.<sp/><sp/>This<sp/>can<sp/>create<sp/>serious</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contention<sp/>in<sp/>production<sp/>code,<sp/>but<sp/>is<sp/>acceptable<sp/>in<sp/>a<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Join<sp/>an<sp/>existing<sp/>circle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>join(<ref refid="classtesting_1_1internal_1_1linked__ptr__internal" kindref="compound">linked_ptr_internal</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>ptr)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">MutexLock</ref><sp/>lock(&amp;g_linked_ptr_mutex);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr__internal" kindref="compound">linked_ptr_internal</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p-&gt;next_<sp/>!=<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(p-&gt;next_<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>join()<sp/>a<sp/>linked<sp/>ring<sp/>we<sp/>are<sp/>already<sp/>in.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Is<sp/>GMock<sp/>thread<sp/>safety<sp/>enabled?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p-&gt;next_;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;next_<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>next_<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>whatever<sp/>circle<sp/>we&apos;re<sp/>part<sp/>of.<sp/><sp/>Returns<sp/>true<sp/>if<sp/>we<sp/>were<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>member<sp/>of<sp/>the<sp/>circle.<sp/><sp/>Once<sp/>this<sp/>is<sp/>done,<sp/>you<sp/>can<sp/>join()<sp/>another.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>depart()</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">MutexLock</ref><sp/>lock(&amp;g_linked_ptr_mutex);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_<sp/>==<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr__internal" kindref="compound">linked_ptr_internal</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>next_;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p-&gt;next_<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(p-&gt;next_<sp/>!=<sp/>next_<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Trying<sp/>to<sp/>depart()<sp/>a<sp/>linked<sp/>ring<sp/>we<sp/>are<sp/>not<sp/>in.<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Is<sp/>GMock<sp/>thread<sp/>safety<sp/>enabled?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p-&gt;next_;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;next_<sp/>=<sp/>next_;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr__internal" kindref="compound">linked_ptr_internal</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>next_;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="146" refid="classtesting_1_1internal_1_1linked__ptr" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>element_type;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>over<sp/>ownership<sp/>of<sp/>a<sp/>raw<sp/>pointer.<sp/><sp/>This<sp/>should<sp/>happen<sp/>as<sp/>soon<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>possible<sp/>after<sp/>the<sp/>object<sp/>is<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>(T*<sp/>ptr<sp/>=<sp/>NULL)<sp/>{<sp/>capture(ptr);<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>~<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>()<sp/>{<sp/>depart();<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>an<sp/>existing<sp/>linked_ptr&lt;&gt;,<sp/>adding<sp/>ourselves<sp/>to<sp/>the<sp/>list<sp/>of<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>(<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ptr)<sp/>{<sp/>copy(&amp;ptr);<sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>(<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ptr)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(&amp;ptr<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(&amp;ptr);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assignment<sp/>releases<sp/>the<sp/>old<sp/>value<sp/>and<sp/>acquires<sp/>the<sp/>new.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>&amp;<sp/>operator=(<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>depart();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>copy(&amp;ptr);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>&amp;<sp/>operator=(<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(&amp;ptr<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>depart();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copy(&amp;ptr);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Smart<sp/>pointer<sp/>members.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(T*<sp/>ptr<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>depart();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>capture(ptr);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>T*<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>T*<sp/>operator-&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>T&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*value_;<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(T*<sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>==<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(T*<sp/>p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>!=<sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ptr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>==<sp/>ptr.get();</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ptr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>!=<sp/>ptr.get();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>T*<sp/>value_;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr__internal" kindref="compound">linked_ptr_internal</ref><sp/>link_;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>depart()<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link_.depart())<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>capture(T*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>link_.join_new();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy(<ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;U&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>ptr-&gt;get();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link_.join(&amp;ptr-&gt;link_);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link_.join_new();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal">};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(T*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;T&gt;</ref>&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>==<sp/>x.get();</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(T*<sp/>ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;T&gt;</ref>&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>!=<sp/>x.get();</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>to<sp/>convert<sp/>T*<sp/>into<sp/>linked_ptr&lt;T&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Doing<sp/>e.g.<sp/>make_linked_ptr(new<sp/>FooBarBaz&lt;type&gt;(arg))<sp/>is<sp/>a<sp/>shorter<sp/>notation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>linked_ptr&lt;FooBarBaz&lt;type&gt;<sp/>&gt;(new<sp/>FooBarBaz&lt;type&gt;(arg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;T&gt;</ref><sp/>make_linked_ptr(T*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;T&gt;</ref>(ptr);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h"/>
  </compounddef>
</doxygen>
