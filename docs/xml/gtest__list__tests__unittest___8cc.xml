<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gtest__list__tests__unittest___8cc" kind="file" language="C++">
    <compoundname>gtest_list_tests_unittest_.cc</compoundname>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="6484">
        <label>sys/stat.h</label>
      </node>
      <node id="6504">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="6477" relation="include">
        </childnode>
      </node>
      <node id="6498">
        <label>iomanip</label>
      </node>
      <node id="6473">
        <label>limits</label>
      </node>
      <node id="6511">
        <label>assert.h</label>
      </node>
      <node id="6490">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="6509">
        <label>iterator</label>
      </node>
      <node id="6497">
        <label>float.h</label>
      </node>
      <node id="6515">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="6471">
        <label>vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc</label>
        <link refid="gtest__list__tests__unittest___8cc"/>
        <childnode refid="6472" relation="include">
        </childnode>
      </node>
      <node id="6480">
        <label>stdlib.h</label>
      </node>
      <node id="6502">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="6482" relation="include">
        </childnode>
        <childnode refid="6488" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
      </node>
      <node id="6516">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="6517" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6502" relation="include">
        </childnode>
      </node>
      <node id="6488">
        <label>string</label>
      </node>
      <node id="6499">
        <label>map</label>
      </node>
      <node id="6514">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="6508" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
      </node>
      <node id="6479">
        <label>stddef.h</label>
      </node>
      <node id="6519">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="6474">
        <label>ostream</label>
      </node>
      <node id="6491">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="6505">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="6506" relation="include">
        </childnode>
      </node>
      <node id="6483">
        <label>sys/types.h</label>
      </node>
      <node id="6482">
        <label>string.h</label>
      </node>
      <node id="6495">
        <label>typeinfo</label>
      </node>
      <node id="6492">
        <label>unistd.h</label>
      </node>
      <node id="6475">
        <label>vector</label>
      </node>
      <node id="6513">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="6501">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
      </node>
      <node id="6489">
        <label>utility</label>
      </node>
      <node id="6487">
        <label>sstream</label>
      </node>
      <node id="6510">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="6480" relation="include">
        </childnode>
        <childnode refid="6511" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
      </node>
      <node id="6517">
        <label>iosfwd</label>
      </node>
      <node id="6503">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="6502" relation="include">
        </childnode>
      </node>
      <node id="6486">
        <label>iostream</label>
      </node>
      <node id="6496">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="6489" relation="include">
        </childnode>
      </node>
      <node id="6472">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6474" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6502" relation="include">
        </childnode>
        <childnode refid="6505" relation="include">
        </childnode>
        <childnode refid="6501" relation="include">
        </childnode>
        <childnode refid="6507" relation="include">
        </childnode>
        <childnode refid="6512" relation="include">
        </childnode>
        <childnode refid="6515" relation="include">
        </childnode>
        <childnode refid="6516" relation="include">
        </childnode>
        <childnode refid="6518" relation="include">
        </childnode>
        <childnode refid="6519" relation="include">
        </childnode>
      </node>
      <node id="6493">
        <label>strings.h</label>
      </node>
      <node id="6478">
        <label>ctype.h</label>
      </node>
      <node id="6518">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="6477" relation="include">
        </childnode>
        <childnode refid="6504" relation="include">
        </childnode>
      </node>
      <node id="6477">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6479" relation="include">
        </childnode>
        <childnode refid="6480" relation="include">
        </childnode>
        <childnode refid="6481" relation="include">
        </childnode>
        <childnode refid="6482" relation="include">
        </childnode>
        <childnode refid="6483" relation="include">
        </childnode>
        <childnode refid="6484" relation="include">
        </childnode>
        <childnode refid="6485" relation="include">
        </childnode>
        <childnode refid="6486" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6488" relation="include">
        </childnode>
        <childnode refid="6489" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6490" relation="include">
        </childnode>
        <childnode refid="6491" relation="include">
        </childnode>
        <childnode refid="6492" relation="include">
        </childnode>
        <childnode refid="6493" relation="include">
        </childnode>
        <childnode refid="6494" relation="include">
        </childnode>
        <childnode refid="6495" relation="include">
        </childnode>
        <childnode refid="6496" relation="include">
        </childnode>
      </node>
      <node id="6476">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="6477" relation="include">
        </childnode>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6497" relation="include">
        </childnode>
        <childnode refid="6482" relation="include">
        </childnode>
        <childnode refid="6498" relation="include">
        </childnode>
        <childnode refid="6473" relation="include">
        </childnode>
        <childnode refid="6499" relation="include">
        </childnode>
        <childnode refid="6500" relation="include">
        </childnode>
        <childnode refid="6488" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6501" relation="include">
        </childnode>
        <childnode refid="6502" relation="include">
        </childnode>
        <childnode refid="6503" relation="include">
        </childnode>
        <childnode refid="6504" relation="include">
        </childnode>
      </node>
      <node id="6508">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="6478" relation="include">
        </childnode>
        <childnode refid="6509" relation="include">
        </childnode>
        <childnode refid="6500" relation="include">
        </childnode>
        <childnode refid="6489" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6510" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
        <childnode refid="6512" relation="include">
        </childnode>
      </node>
      <node id="6500">
        <label>set</label>
      </node>
      <node id="6507">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="6477" relation="include">
        </childnode>
        <childnode refid="6489" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6508" relation="include">
        </childnode>
        <childnode refid="6514" relation="include">
        </childnode>
      </node>
      <node id="6485">
        <label>algorithm</label>
      </node>
      <node id="6494">
        <label>regex.h</label>
      </node>
      <node id="6481">
        <label>stdio.h</label>
      </node>
      <node id="6506">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6481" relation="include">
        </childnode>
      </node>
      <node id="6512">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="6474" relation="include">
        </childnode>
        <childnode refid="6487" relation="include">
        </childnode>
        <childnode refid="6488" relation="include">
        </childnode>
        <childnode refid="6489" relation="include">
        </childnode>
        <childnode refid="6475" relation="include">
        </childnode>
        <childnode refid="6477" relation="include">
        </childnode>
        <childnode refid="6476" relation="include">
        </childnode>
        <childnode refid="6513" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_foo_test" prot="public">FooTest</innerclass>
    <innerclass refid="class_my_type" prot="public">MyType</innerclass>
    <innerclass refid="class_value_param_test" prot="public">ValueParamTest</innerclass>
    <innerclass refid="class_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo570db76e21fa868abfe0f6323a68c9ba" prot="public">VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName</innerclass>
    <innerclass refid="class_typed_test" prot="public">TypedTest</innerclass>
    <innerclass refid="class_my_array" prot="public">MyArray</innerclass>
    <innerclass refid="class_type_param_test" prot="public">TypeParamTest</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gtest__list__tests__unittest___8cc_1a16f58cd49c18568802322bbaf9f3f654" prot="public" static="no">
        <type>testing::Types&lt; <ref refid="class_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo570db76e21fa868abfe0f6323a68c9ba" kindref="compound">VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName</ref>, int *, <ref refid="class_my_array" kindref="compound">MyArray</ref>&lt; bool, 42 &gt; &gt;</type>
        <definition>typedef testing::Types&lt;VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName, int*, MyArray&lt;bool, 42&gt; &gt; MyTypes</definition>
        <argsstring></argsstring>
        <name>MyTypes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="125" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a1f94d1d04b3e17e0c656f67c43dcd245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Foo, Bar1)</argsstring>
        <name>TEST</name>
        <param>
          <type>Foo</type>
        </param>
        <param>
          <type>Bar1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="44" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="44" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1aff0f7cd627da403d28ffe872aec2c8dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Foo, Bar2)</argsstring>
        <name>TEST</name>
        <param>
          <type>Foo</type>
        </param>
        <param>
          <type>Bar2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="47" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="47" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a0defa1e8ea8c596e9b1ff68e079ac36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Foo, DISABLED_Bar3)</argsstring>
        <name>TEST</name>
        <param>
          <type>Foo</type>
        </param>
        <param>
          <type>DISABLED_Bar3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="50" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1aea722cccf3017f3cc6aa445ef3062c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Abc, Xyz)</argsstring>
        <name>TEST</name>
        <param>
          <type>Abc</type>
        </param>
        <param>
          <type>Xyz</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="53" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="53" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a424455aa813a24d05f74ba04cff13167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Abc, Def)</argsstring>
        <name>TEST</name>
        <param>
          <type>Abc</type>
        </param>
        <param>
          <type>Def</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="56" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="56" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a0c5a078c78b95b153badeea154f57abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FooBar, Baz)</argsstring>
        <name>TEST</name>
        <param>
          <type>FooBar</type>
        </param>
        <param>
          <type>Baz</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="59" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="59" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1abdf83273b95cab0385a014eaa9194380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(FooTest, Test1)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_foo_test" kindref="compound">FooTest</ref></type>
        </param>
        <param>
          <type>Test1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="65" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="65" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a5fa72d1c454dc7b30f5dbe06926f70d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(FooTest, DISABLED_Test2)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_foo_test" kindref="compound">FooTest</ref></type>
        </param>
        <param>
          <type>DISABLED_Test2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="68" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="68" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a689d13a3da3c5eecd3eba3c512713a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(FooTest, Test3)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_foo_test" kindref="compound">FooTest</ref></type>
        </param>
        <param>
          <type>Test3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="71" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1acfc50868d2ae644150744ddd74b542f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(FooDeathTest, Test1)</argsstring>
        <name>TEST</name>
        <param>
          <type>FooDeathTest</type>
        </param>
        <param>
          <type>Test1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="74" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="74" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1aaf76f8f336db1c295fe3aa914c4c6182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintTo</definition>
        <argsstring>(const MyType &amp;x, std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const <ref refid="class_my_type" kindref="compound">MyType</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="90" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1adc97fba291db78177b4e5bdf6f6d9018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ValueParamTest, TestA)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref></type>
        </param>
        <param>
          <type>TestA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="97" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="97" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1aa743157309ca6126251b87f7436205a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_P</definition>
        <argsstring>(ValueParamTest, TestB)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref></type>
        </param>
        <param>
          <type>TestB</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="100" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="100" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a5bf48c06100fe6369e33a17d592d48f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(MyInstantiation, ValueParamTest, testing::Values(MyType(&quot;one line&quot;), MyType(&quot;two\ines&quot;), MyType(&quot;a very\oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong line&quot;)))</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type>MyInstantiation</type>
        </param>
        <param>
          <type><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref></type>
        </param>
        <param>
          <type>testing::Values(<ref refid="class_my_type" kindref="compound">MyType</ref>(&quot;one line&quot;), MyType(&quot;two\nes&quot;), MyType(&quot;a very\ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong line&quot;))</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a862ed8944c2b3e4827e95002d20c45d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_CASE</definition>
        <argsstring>(TypedTest, MyTypes)</argsstring>
        <name>TYPED_TEST_CASE</name>
        <param>
          <type><ref refid="class_typed_test" kindref="compound">TypedTest</ref></type>
        </param>
        <param>
          <type>MyTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a83ec84c5fac9fdffa59a16e5d043bd66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTest, TestA)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="class_typed_test" kindref="compound">TypedTest</ref></type>
        </param>
        <param>
          <type>TestA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="129" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="129" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a1ac7e35f3d659458b18cc29d71ed1f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST</definition>
        <argsstring>(TypedTest, TestB)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="class_typed_test" kindref="compound">TypedTest</ref></type>
        </param>
        <param>
          <type>TestB</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="132" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="132" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a8f36af28829ba875ca3675b4054f48b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_CASE_P</definition>
        <argsstring>(TypeParamTest)</argsstring>
        <name>TYPED_TEST_CASE_P</name>
        <param>
          <type><ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1aadd51dfff9d63b5e0faa0130697684c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypeParamTest, TestA)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref></type>
        </param>
        <param>
          <type>TestA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="143" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="143" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a667494b5b0e4418064679f58c546db97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TYPED_TEST_P</definition>
        <argsstring>(TypeParamTest, TestB)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref></type>
        </param>
        <param>
          <type>TestB</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="146" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="146" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a3316a9dc1c581f96a50ec10e0c116e5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>REGISTER_TYPED_TEST_CASE_P</definition>
        <argsstring>(TypeParamTest, TestA, TestB)</argsstring>
        <name>REGISTER_TYPED_TEST_CASE_P</name>
        <param>
          <type><ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref></type>
        </param>
        <param>
          <type>TestA</type>
        </param>
        <param>
          <type>TestB</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1abace4e22d147fb69e2be527b355a2316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>INSTANTIATE_TYPED_TEST_CASE_P</definition>
        <argsstring>(My, TypeParamTest, MyTypes)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_CASE_P</name>
        <param>
          <type>My</type>
        </param>
        <param>
          <type><ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref></type>
        </param>
        <param>
          <type>MyTypes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__list__tests__unittest___8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" line="153" column="1" bodyfile="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc" bodystart="153" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2006,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>phanna@google.com<sp/>(Patrick<sp/>Hanna)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unit<sp/>test<sp/>for<sp/>Google<sp/>Test&apos;s<sp/>--gtest_list_tests<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>can<sp/>ask<sp/>Google<sp/>Test<sp/>to<sp/>list<sp/>all<sp/>tests<sp/>that<sp/>will<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>that<sp/>when<sp/>using<sp/>a<sp/>filter,<sp/>a<sp/>user<sp/>will<sp/>know<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests<sp/>to<sp/>look<sp/>for.<sp/>The<sp/>tests<sp/>will<sp/>not<sp/>be<sp/>run<sp/>after<sp/>listing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>will<sp/>be<sp/>invoked<sp/>from<sp/>a<sp/>Python<sp/>unit<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>run<sp/>it<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Several<sp/>different<sp/>test<sp/>cases<sp/>and<sp/>tests<sp/>that<sp/>will<sp/>be<sp/>listed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">TEST(Foo,<sp/>Bar1)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">TEST(Foo,<sp/>Bar2)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">TEST(Foo,<sp/>DISABLED_Bar3)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">TEST(Abc,<sp/>Xyz)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">TEST(Abc,<sp/>Def)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">TEST(FooBar,<sp/>Baz)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_foo_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FooTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FooTest,<sp/>Test1)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FooTest,<sp/>DISABLED_Test2)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(FooTest,<sp/>Test3)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">TEST(FooDeathTest,<sp/>Test1)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>group<sp/>of<sp/>value-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="class_my_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_my_type" kindref="compound">MyType</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_my_type" kindref="compound">MyType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>a_value)<sp/>:<sp/>value_(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>std::string<sp/>value_;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Teaches<sp/>Google<sp/>Test<sp/>how<sp/>to<sp/>print<sp/>a<sp/>MyType.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_my_type" kindref="compound">MyType</ref>&amp;<sp/>x,<sp/>std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>x.value();</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class_value_param_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>testing::TestWithParam&lt;MyType&gt;<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">TEST_P(<ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref>,<sp/>TestA)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">TEST_P(<ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref>,<sp/>TestB)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">INSTANTIATE_TEST_CASE_P(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>MyInstantiation,<sp/><ref refid="class_value_param_test" kindref="compound">ValueParamTest</ref>,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>testing::Values(<ref refid="class_my_type" kindref="compound">MyType</ref>(</highlight><highlight class="stringliteral">&quot;one<sp/>line&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_type" kindref="compound">MyType</ref>(</highlight><highlight class="stringliteral">&quot;two\nlines&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_my_type" kindref="compound">MyType</ref>(</highlight><highlight class="stringliteral">&quot;a<sp/>very\nloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong<sp/>line&quot;</highlight><highlight class="normal">)));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>group<sp/>of<sp/>typed<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>deliberately<sp/>long<sp/>type<sp/>name<sp/>for<sp/>testing<sp/>the<sp/>line-truncating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>behavior<sp/>when<sp/>printing<sp/>a<sp/>type<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="class_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo570db76e21fa868abfe0f6323a68c9ba" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo570db76e21fa868abfe0f6323a68c9ba" kindref="compound">VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName</ref><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="117" refid="class_typed_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_typed_test" kindref="compound">TypedTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal">};</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kSize&gt;</highlight></codeline>
<codeline lineno="121" refid="class_my_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_my_array" kindref="compound">MyArray</ref><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal">};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>testing::Types&lt;<ref refid="class_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo570db76e21fa868abfe0f6323a68c9ba" kindref="compound">VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/><ref refid="class_my_array" kindref="compound">MyArray&lt;bool, 42&gt;</ref><sp/>&gt;<sp/>MyTypes;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">TYPED_TEST_CASE(<ref refid="class_typed_test" kindref="compound">TypedTest</ref>,<sp/>MyTypes);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">TYPED_TEST(<ref refid="class_typed_test" kindref="compound">TypedTest</ref>,<sp/>TestA)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">TYPED_TEST(<ref refid="class_typed_test" kindref="compound">TypedTest</ref>,<sp/>TestB)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>group<sp/>of<sp/>type-parameterized<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="138" refid="class_type_param_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">TYPED_TEST_CASE_P(<ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">TYPED_TEST_P(<ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref>,<sp/>TestA)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">TYPED_TEST_P(<ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref>,<sp/>TestB)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">REGISTER_TYPED_TEST_CASE_P(<ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref>,<sp/>TestA,<sp/>TestB);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">INSTANTIATE_TYPED_TEST_CASE_P(My,<sp/><ref refid="class_type_param_test" kindref="compound">TypeParamTest</ref>,<sp/>MyTypes);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>::testing::InitGoogleTest(&amp;argc,<sp/>argv);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RUN_ALL_TESTS();</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc"/>
  </compounddef>
</doxygen>
