<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gtest-tuple__test_8cc" kind="file" language="C++">
    <compoundname>gtest-tuple_test.cc</compoundname>
    <includes refid="gtest-tuple_8h" local="yes">gtest/internal/gtest-tuple.h</includes>
    <includes local="no">utility</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <incdepgraph>
      <node id="5859">
        <label>sys/stat.h</label>
      </node>
      <node id="5877">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="5852" relation="include">
        </childnode>
      </node>
      <node id="5871">
        <label>iomanip</label>
      </node>
      <node id="5848">
        <label>limits</label>
      </node>
      <node id="5884">
        <label>assert.h</label>
      </node>
      <node id="5864">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="5882">
        <label>iterator</label>
      </node>
      <node id="5870">
        <label>float.h</label>
      </node>
      <node id="5888">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="5855">
        <label>stdlib.h</label>
      </node>
      <node id="5875">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="5857" relation="include">
        </childnode>
        <childnode refid="5863" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
      </node>
      <node id="5889">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="5890" relation="include">
        </childnode>
        <childnode refid="5850" relation="include">
        </childnode>
        <childnode refid="5851" relation="include">
        </childnode>
        <childnode refid="5875" relation="include">
        </childnode>
      </node>
      <node id="5863">
        <label>string</label>
      </node>
      <node id="5872">
        <label>map</label>
      </node>
      <node id="5887">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="5881" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
      </node>
      <node id="5854">
        <label>stddef.h</label>
      </node>
      <node id="5892">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="5849">
        <label>ostream</label>
      </node>
      <node id="5865">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="5878">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="5879" relation="include">
        </childnode>
      </node>
      <node id="5858">
        <label>sys/types.h</label>
      </node>
      <node id="5857">
        <label>string.h</label>
      </node>
      <node id="5869">
        <label>typeinfo</label>
      </node>
      <node id="5866">
        <label>unistd.h</label>
      </node>
      <node id="5850">
        <label>vector</label>
      </node>
      <node id="5886">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="5874">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="5848" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
      </node>
      <node id="5846">
        <label>utility</label>
      </node>
      <node id="5862">
        <label>sstream</label>
      </node>
      <node id="5883">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="5855" relation="include">
        </childnode>
        <childnode refid="5884" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
      </node>
      <node id="5890">
        <label>iosfwd</label>
      </node>
      <node id="5876">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="5875" relation="include">
        </childnode>
      </node>
      <node id="5861">
        <label>iostream</label>
      </node>
      <node id="5844">
        <label>vendor/googletest/googletest/test/gtest-tuple_test.cc</label>
        <link refid="gtest-tuple__test_8cc"/>
        <childnode refid="5845" relation="include">
        </childnode>
        <childnode refid="5846" relation="include">
        </childnode>
        <childnode refid="5847" relation="include">
        </childnode>
      </node>
      <node id="5847">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="5848" relation="include">
        </childnode>
        <childnode refid="5849" relation="include">
        </childnode>
        <childnode refid="5850" relation="include">
        </childnode>
        <childnode refid="5851" relation="include">
        </childnode>
        <childnode refid="5875" relation="include">
        </childnode>
        <childnode refid="5878" relation="include">
        </childnode>
        <childnode refid="5874" relation="include">
        </childnode>
        <childnode refid="5880" relation="include">
        </childnode>
        <childnode refid="5885" relation="include">
        </childnode>
        <childnode refid="5888" relation="include">
        </childnode>
        <childnode refid="5889" relation="include">
        </childnode>
        <childnode refid="5891" relation="include">
        </childnode>
        <childnode refid="5892" relation="include">
        </childnode>
      </node>
      <node id="5845">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="5846" relation="include">
        </childnode>
      </node>
      <node id="5867">
        <label>strings.h</label>
      </node>
      <node id="5853">
        <label>ctype.h</label>
      </node>
      <node id="5891">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="5852" relation="include">
        </childnode>
        <childnode refid="5877" relation="include">
        </childnode>
      </node>
      <node id="5852">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="5853" relation="include">
        </childnode>
        <childnode refid="5854" relation="include">
        </childnode>
        <childnode refid="5855" relation="include">
        </childnode>
        <childnode refid="5856" relation="include">
        </childnode>
        <childnode refid="5857" relation="include">
        </childnode>
        <childnode refid="5858" relation="include">
        </childnode>
        <childnode refid="5859" relation="include">
        </childnode>
        <childnode refid="5860" relation="include">
        </childnode>
        <childnode refid="5861" relation="include">
        </childnode>
        <childnode refid="5862" relation="include">
        </childnode>
        <childnode refid="5863" relation="include">
        </childnode>
        <childnode refid="5846" relation="include">
        </childnode>
        <childnode refid="5850" relation="include">
        </childnode>
        <childnode refid="5864" relation="include">
        </childnode>
        <childnode refid="5865" relation="include">
        </childnode>
        <childnode refid="5866" relation="include">
        </childnode>
        <childnode refid="5867" relation="include">
        </childnode>
        <childnode refid="5868" relation="include">
        </childnode>
        <childnode refid="5869" relation="include">
        </childnode>
        <childnode refid="5845" relation="include">
        </childnode>
      </node>
      <node id="5851">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="5852" relation="include">
        </childnode>
        <childnode refid="5853" relation="include">
        </childnode>
        <childnode refid="5870" relation="include">
        </childnode>
        <childnode refid="5857" relation="include">
        </childnode>
        <childnode refid="5871" relation="include">
        </childnode>
        <childnode refid="5848" relation="include">
        </childnode>
        <childnode refid="5872" relation="include">
        </childnode>
        <childnode refid="5873" relation="include">
        </childnode>
        <childnode refid="5863" relation="include">
        </childnode>
        <childnode refid="5850" relation="include">
        </childnode>
        <childnode refid="5874" relation="include">
        </childnode>
        <childnode refid="5875" relation="include">
        </childnode>
        <childnode refid="5876" relation="include">
        </childnode>
        <childnode refid="5877" relation="include">
        </childnode>
      </node>
      <node id="5881">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="5853" relation="include">
        </childnode>
        <childnode refid="5882" relation="include">
        </childnode>
        <childnode refid="5873" relation="include">
        </childnode>
        <childnode refid="5846" relation="include">
        </childnode>
        <childnode refid="5850" relation="include">
        </childnode>
        <childnode refid="5851" relation="include">
        </childnode>
        <childnode refid="5883" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
        <childnode refid="5885" relation="include">
        </childnode>
      </node>
      <node id="5873">
        <label>set</label>
      </node>
      <node id="5880">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="5852" relation="include">
        </childnode>
        <childnode refid="5846" relation="include">
        </childnode>
        <childnode refid="5851" relation="include">
        </childnode>
        <childnode refid="5881" relation="include">
        </childnode>
        <childnode refid="5887" relation="include">
        </childnode>
      </node>
      <node id="5860">
        <label>algorithm</label>
      </node>
      <node id="5868">
        <label>regex.h</label>
      </node>
      <node id="5856">
        <label>stdio.h</label>
      </node>
      <node id="5879">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="5851" relation="include">
        </childnode>
        <childnode refid="5856" relation="include">
        </childnode>
      </node>
      <node id="5885">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="5849" relation="include">
        </childnode>
        <childnode refid="5862" relation="include">
        </childnode>
        <childnode refid="5863" relation="include">
        </childnode>
        <childnode refid="5846" relation="include">
        </childnode>
        <childnode refid="5850" relation="include">
        </childnode>
        <childnode refid="5852" relation="include">
        </childnode>
        <childnode refid="5851" relation="include">
        </childnode>
        <childnode refid="5886" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/internal/gtest-tuple.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">using<sp/>::std::tr1::get;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">using<sp/>::std::tr1::make_tuple;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">using<sp/>::std::tr1::tuple;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">using<sp/>::std::tr1::tuple_element;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">using<sp/>::std::tr1::tuple_size;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">using<sp/>::testing::StaticAssertTypeEq;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>tuple_element&lt;K,<sp/>tuple&lt;T0,<sp/>T1,<sp/>...,<sp/>TN&gt;<sp/>&gt;::type<sp/>returns<sp/>TK.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">TEST(tuple_element_Test,<sp/>ReturnsElementType)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int,<sp/>tuple_element&lt;0,<sp/>tuple&lt;int,<sp/>char&gt;<sp/>&gt;::type&gt;();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int&amp;,<sp/>tuple_element&lt;1,<sp/>tuple&lt;double,<sp/>int&amp;&gt;<sp/>&gt;::type&gt;();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;bool,<sp/>tuple_element&lt;2,<sp/>tuple&lt;double,<sp/>int,<sp/>bool&gt;<sp/>&gt;::type&gt;();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>tuple_size&lt;T&gt;::value<sp/>gives<sp/>the<sp/>number<sp/>of<sp/>fields<sp/>in<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">TEST(tuple_size_Test,<sp/>ReturnsNumberOfFields)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>+tuple_size&lt;tuple&lt;&gt;<sp/>&gt;::value);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>+tuple_size&lt;tuple&lt;void*&gt;<sp/>&gt;::value);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>+tuple_size&lt;tuple&lt;char&gt;<sp/>&gt;::value);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>+(tuple_size&lt;tuple&lt;tuple&lt;int,<sp/>double&gt;<sp/>&gt;<sp/>&gt;::value));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>+(tuple_size&lt;tuple&lt;int&amp;,<sp/>const<sp/>char&gt;<sp/>&gt;::value));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>+(tuple_size&lt;tuple&lt;char*,<sp/>void,<sp/>const<sp/>bool&amp;&gt;<sp/>&gt;::value));</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>a<sp/>tuple<sp/>with<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">TEST(ComparisonTest,<sp/>ComparesWithSelf)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>char,<sp/>bool&gt;<sp/>a(5,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a<sp/>!=<sp/>a);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>two<sp/>tuples<sp/>with<sp/>the<sp/>same<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">TEST(ComparisonTest,<sp/>ComparesEqualTuples)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>bool&gt;<sp/>a(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>b(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>two<sp/>different<sp/>tuples<sp/>that<sp/>have<sp/>no<sp/>reference<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">TEST(ComparisonTest,<sp/>ComparesUnequalTuplesWithoutReferenceFields)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tuple&lt;const<sp/>int,<sp/>char&gt;<sp/>FooTuple;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FooTuple<sp/>a(0,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FooTuple<sp/>b(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FooTuple<sp/>c(1,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(b<sp/>!=<sp/>c);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(b<sp/>==<sp/>c);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>two<sp/>different<sp/>tuples<sp/>that<sp/>have<sp/>reference<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">TEST(ComparisonTest,<sp/>ComparesUnequalTuplesWithReferenceFields)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tuple&lt;int&amp;,<sp/>const<sp/>char&amp;&gt;<sp/>FooTuple;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FooTuple<sp/>a(i,<sp/>ch);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FooTuple<sp/>b(j,<sp/>ch);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch2<sp/>=<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FooTuple<sp/>c(j,<sp/>ch2);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(b<sp/>!=<sp/>c);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(b<sp/>==<sp/>c);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>tuple<sp/>field<sp/>with<sp/>a<sp/>reference<sp/>type<sp/>is<sp/>an<sp/>alias<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable<sp/>it&apos;s<sp/>supposed<sp/>to<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">TEST(ReferenceFieldTest,<sp/>IsAliasOfReferencedVariable)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>tuple&lt;bool,<sp/>int&amp;&gt;<sp/>t(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>EXPECT_EQ(n,<sp/>get&lt;1&gt;(t))</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Changing<sp/>a<sp/>underlying<sp/>variable<sp/>should<sp/>update<sp/>the<sp/>reference<sp/>field.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>the<sp/>implementation<sp/>doesn&apos;t<sp/>do<sp/>anything<sp/>funny<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>&amp;<sp/>operator<sp/>for<sp/>the<sp/>return<sp/>type<sp/>of<sp/>get&lt;&gt;().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;(get&lt;1&gt;(t)))</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>address<sp/>of<sp/>a<sp/>reference<sp/>field<sp/>should<sp/>equal<sp/>the<sp/>address<sp/>of<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;the<sp/>underlying<sp/>variable.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>get&lt;1&gt;(t)<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Changing<sp/>a<sp/>reference<sp/>field<sp/>should<sp/>update<sp/>the<sp/>underlying<sp/>variable.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>tuple&apos;s<sp/>default<sp/>constructor<sp/>default<sp/>initializes<sp/>each<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>needs<sp/>to<sp/>compile<sp/>without<sp/>generating<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">TEST(TupleConstructorTest,<sp/>DefaultConstructorDefaultInitializesEachField)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>TR1<sp/>report<sp/>requires<sp/>that<sp/>tuple&apos;s<sp/>default<sp/>constructor<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initializes<sp/>each<sp/>field,<sp/>even<sp/>if<sp/>it&apos;s<sp/>a<sp/>primitive<sp/>type.<sp/><sp/>If<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>forgets<sp/>to<sp/>do<sp/>this,<sp/>this<sp/>test<sp/>will<sp/>catch<sp/>it<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generating<sp/>warnings<sp/>about<sp/>using<sp/>uninitialized<sp/>variables<sp/>(assuming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>decent<sp/>compiler).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>tuple&lt;&gt;<sp/>empty;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>tuple&lt;int&gt;<sp/>a1,<sp/>b1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>b1<sp/>=<sp/>a1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;0&gt;(b1));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>double&gt;<sp/>a2,<sp/>b2;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>b2<sp/>=<sp/>a2;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;0&gt;(b2));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0.0,<sp/>get&lt;1&gt;(b2));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>tuple&lt;double,<sp/>char,<sp/>bool*&gt;<sp/>a3,<sp/>b3;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>b3<sp/>=<sp/>a3;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0.0,<sp/>get&lt;0&gt;(b3));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>get&lt;1&gt;(b3));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(get&lt;2&gt;(b3)<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int&gt;<sp/>a10,<sp/>b10;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>b10<sp/>=<sp/>a10;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;0&gt;(b10));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;1&gt;(b10));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;2&gt;(b10));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;3&gt;(b10));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;4&gt;(b10));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;5&gt;(b10));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;6&gt;(b10));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;7&gt;(b10));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;8&gt;(b10));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>get&lt;9&gt;(b10));</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>constructing<sp/>a<sp/>tuple<sp/>from<sp/>its<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">TEST(TupleConstructorTest,<sp/>ConstructsFromFields)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reference<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>tuple&lt;int&amp;&gt;<sp/>a(n);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>&amp;(get&lt;0&gt;(a)));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-reference<sp/>fields.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>char&gt;<sp/>b(5,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>get&lt;1&gt;(b));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Const<sp/>reference<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>tuple&lt;bool,<sp/>const<sp/>int&amp;&gt;<sp/>c(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>m);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(get&lt;0&gt;(c));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;m,<sp/>&amp;(get&lt;1&gt;(c)));</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>tuple&apos;s<sp/>copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">TEST(TupleConstructorTest,<sp/>CopyConstructor)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>tuple&lt;double,<sp/>bool&gt;<sp/>a(0.0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>tuple&lt;double,<sp/>bool&gt;<sp/>b(a);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(0.0,<sp/>get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(get&lt;1&gt;(b));</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>constructing<sp/>a<sp/>tuple<sp/>from<sp/>another<sp/>tuple<sp/>that<sp/>has<sp/>a<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>different<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">TEST(TupleConstructorTest,<sp/>ConstructsFromDifferentTupleType)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>int,<sp/>char&gt;<sp/>a(0,<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>tuple&lt;double,<sp/>long,<sp/>int&gt;<sp/>b(a);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(0.0,<sp/>get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>get&lt;1&gt;(b));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>get&lt;2&gt;(b));</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>constructing<sp/>a<sp/>2-tuple<sp/>from<sp/>an<sp/>std::pair.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">TEST(TupleConstructorTest,<sp/>ConstructsFromPair)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>::std::pair&lt;int,<sp/>char&gt;<sp/>a(1,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>char&gt;<sp/>b(a);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>const<sp/>char&amp;&gt;<sp/>c(a);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>assigning<sp/>a<sp/>tuple<sp/>to<sp/>another<sp/>tuple<sp/>with<sp/>the<sp/>same<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">TEST(TupleAssignmentTest,<sp/>AssignsToSameTupleType)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>long&gt;<sp/>a(5,<sp/>7L);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>long&gt;<sp/>b;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7L,<sp/>get&lt;1&gt;(b));</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>assigning<sp/>a<sp/>tuple<sp/>to<sp/>another<sp/>tuple<sp/>with<sp/>a<sp/>different<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compatible<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">TEST(TupleAssignmentTest,<sp/>AssignsToDifferentTupleType)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>long,<sp/>bool&gt;<sp/>a(1,<sp/>7L,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>tuple&lt;long,<sp/>int,<sp/>bool&gt;<sp/>b;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1L,<sp/>get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>EXPECT_EQ(7,<sp/>get&lt;1&gt;(b));</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(get&lt;2&gt;(b));</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>assigning<sp/>an<sp/>std::pair<sp/>to<sp/>a<sp/>2-tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">TEST(TupleAssignmentTest,<sp/>AssignsFromPair)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>const<sp/>::std::pair&lt;int,<sp/>bool&gt;<sp/>a(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>tuple&lt;int,<sp/>bool&gt;<sp/>b;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(get&lt;1&gt;(b));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>tuple&lt;long,<sp/>bool&gt;<sp/>c;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>c<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5L,<sp/>get&lt;0&gt;(c));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(get&lt;1&gt;(c));</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>fixture<sp/>for<sp/>testing<sp/>big<sp/>tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BigTupleTest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int&gt;<sp/>BigTuple;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>BigTupleTest()<sp/>:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>a_(1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>2),</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b_(1,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>3)<sp/>{}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>BigTuple<sp/>a_,<sp/>b_;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>constructing<sp/>big<sp/>tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(BigTupleTest,<sp/>Construction)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>BigTuple<sp/>a;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>BigTuple<sp/>b(b_);</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>get&lt;N&gt;(t)<sp/>returns<sp/>the<sp/>N-th<sp/>(0-based)<sp/>field<sp/>of<sp/>tuple<sp/>t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(BigTupleTest,<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>get&lt;0&gt;(a_));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>get&lt;9&gt;(a_));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>get()<sp/>works<sp/>on<sp/>a<sp/>const<sp/>tuple<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BigTuple<sp/>a(a_);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>get&lt;0&gt;(a));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>get&lt;9&gt;(a));</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>comparing<sp/>big<sp/>tuples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(BigTupleTest,<sp/>Comparisons)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a_<sp/>==<sp/>a_);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a_<sp/>!=<sp/>a_);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a_<sp/>!=<sp/>b_);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a_<sp/>==<sp/>b_);</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">TEST(MakeTupleTest,<sp/>WorksForScalarTypes)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>tuple&lt;bool,<sp/>int&gt;<sp/>a;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(get&lt;0&gt;(a));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>get&lt;1&gt;(a));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>tuple&lt;char,<sp/>int,<sp/>long&gt;<sp/>b;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>b<sp/>=<sp/>make_tuple(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>5);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>get&lt;0&gt;(b));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>get&lt;1&gt;(b));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>get&lt;2&gt;(b));</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">TEST(MakeTupleTest,<sp/>WorksForPointers)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a[]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4<sp/>};</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>tuple&lt;const<sp/>char*,<sp/>int*&gt;<sp/>t;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>make_tuple(str,<sp/>p);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_EQ(str,<sp/>get&lt;0&gt;(t));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_EQ(p,<sp/>get&lt;1&gt;(t));</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googletest/test/gtest-tuple_test.cc"/>
  </compounddef>
</doxygen>
