<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-generated-function-mockers__test_8cc" kind="file" language="C++">
    <compoundname>gmock-generated-function-mockers_test.cc</compoundname>
    <includes refid="gmock-generated-function-mockers_8h" local="yes">gmock/gmock-generated-function-mockers.h</includes>
    <includes local="no">map</includes>
    <includes local="no">string</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="1822">
        <label>sys/stat.h</label>
      </node>
      <node id="1840">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="1817" relation="include">
        </childnode>
      </node>
      <node id="1836">
        <label>iomanip</label>
      </node>
      <node id="1833">
        <label>limits</label>
      </node>
      <node id="1824">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="1813">
        <label>assert.h</label>
      </node>
      <node id="1845">
        <label>iterator</label>
      </node>
      <node id="1835">
        <label>float.h</label>
      </node>
      <node id="1808">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="1809" relation="include">
        </childnode>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1811" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
      </node>
      <node id="1864">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="1807" relation="include">
        </childnode>
        <childnode refid="1860" relation="include">
        </childnode>
      </node>
      <node id="1849">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="1814">
        <label>stdlib.h</label>
      </node>
      <node id="1838">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
      </node>
      <node id="1850">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="1851" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1838" relation="include">
        </childnode>
      </node>
      <node id="1863">
        <label>gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="1845" relation="include">
        </childnode>
        <childnode refid="1802" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1856" relation="include">
        </childnode>
      </node>
      <node id="1806">
        <label>errno.h</label>
      </node>
      <node id="1858">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="1798">
        <label>gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="1799" relation="include">
        </childnode>
        <childnode refid="1808" relation="include">
        </childnode>
      </node>
      <node id="1859">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="1805" relation="include">
        </childnode>
        <childnode refid="1854" relation="include">
        </childnode>
        <childnode refid="1860" relation="include">
        </childnode>
        <childnode refid="1798" relation="include">
        </childnode>
        <childnode refid="1862" relation="include">
        </childnode>
        <childnode refid="1863" relation="include">
        </childnode>
        <childnode refid="1856" relation="include">
        </childnode>
        <childnode refid="1864" relation="include">
        </childnode>
        <childnode refid="1865" relation="include">
        </childnode>
        <childnode refid="1808" relation="include">
        </childnode>
      </node>
      <node id="1803">
        <label>string</label>
      </node>
      <node id="1800">
        <label>map</label>
      </node>
      <node id="1797">
        <label>vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc</label>
        <link refid="gmock-generated-function-mockers__test_8cc"/>
        <childnode refid="1798" relation="include">
        </childnode>
        <childnode refid="1800" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1859" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
      </node>
      <node id="1831">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="1848">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="1844" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
      </node>
      <node id="1819">
        <label>stddef.h</label>
      </node>
      <node id="1853">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="1810">
        <label>ostream</label>
      </node>
      <node id="1825">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="1855">
        <label>limits.h</label>
      </node>
      <node id="1860">
        <label>gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="1805" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1861" relation="include">
        </childnode>
      </node>
      <node id="1841">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="1842" relation="include">
        </childnode>
      </node>
      <node id="1821">
        <label>sys/types.h</label>
      </node>
      <node id="1820">
        <label>string.h</label>
      </node>
      <node id="1805">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="1806" relation="include">
        </childnode>
        <childnode refid="1807" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1808" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
      </node>
      <node id="1829">
        <label>typeinfo</label>
      </node>
      <node id="1812">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="1813" relation="include">
        </childnode>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1831" relation="include">
        </childnode>
      </node>
      <node id="1826">
        <label>unistd.h</label>
      </node>
      <node id="1804">
        <label>vector</label>
      </node>
      <node id="1847">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="1837">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="1833" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
      </node>
      <node id="1823">
        <label>utility</label>
      </node>
      <node id="1799">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="1800" relation="include">
        </childnode>
        <childnode refid="1801" relation="include">
        </childnode>
        <childnode refid="1802" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1805" relation="include">
        </childnode>
        <childnode refid="1854" relation="include">
        </childnode>
        <childnode refid="1856" relation="include">
        </childnode>
        <childnode refid="1808" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
      </node>
      <node id="1802">
        <label>sstream</label>
      </node>
      <node id="1816">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1813" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
      </node>
      <node id="1856">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="1857" relation="include">
        </childnode>
        <childnode refid="1807" relation="include">
        </childnode>
        <childnode refid="1845" relation="include">
        </childnode>
        <childnode refid="1833" relation="include">
        </childnode>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1802" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1823" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1808" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
        <childnode refid="1858" relation="include">
        </childnode>
      </node>
      <node id="1857">
        <label>math.h</label>
      </node>
      <node id="1862">
        <label>gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="1799" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
      </node>
      <node id="1851">
        <label>iosfwd</label>
      </node>
      <node id="1854">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="1855" relation="include">
        </childnode>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
      </node>
      <node id="1839">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="1838" relation="include">
        </childnode>
      </node>
      <node id="1815">
        <label>iostream</label>
      </node>
      <node id="1832">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="1833" relation="include">
        </childnode>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1838" relation="include">
        </childnode>
        <childnode refid="1841" relation="include">
        </childnode>
        <childnode refid="1837" relation="include">
        </childnode>
        <childnode refid="1843" relation="include">
        </childnode>
        <childnode refid="1846" relation="include">
        </childnode>
        <childnode refid="1849" relation="include">
        </childnode>
        <childnode refid="1850" relation="include">
        </childnode>
        <childnode refid="1852" relation="include">
        </childnode>
        <childnode refid="1853" relation="include">
        </childnode>
      </node>
      <node id="1830">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="1823" relation="include">
        </childnode>
      </node>
      <node id="1827">
        <label>strings.h</label>
      </node>
      <node id="1818">
        <label>ctype.h</label>
      </node>
      <node id="1852">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1840" relation="include">
        </childnode>
      </node>
      <node id="1817">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1809" relation="include">
        </childnode>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1821" relation="include">
        </childnode>
        <childnode refid="1822" relation="include">
        </childnode>
        <childnode refid="1807" relation="include">
        </childnode>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1802" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1823" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1824" relation="include">
        </childnode>
        <childnode refid="1825" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1827" relation="include">
        </childnode>
        <childnode refid="1828" relation="include">
        </childnode>
        <childnode refid="1829" relation="include">
        </childnode>
        <childnode refid="1830" relation="include">
        </childnode>
      </node>
      <node id="1834">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1835" relation="include">
        </childnode>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1836" relation="include">
        </childnode>
        <childnode refid="1833" relation="include">
        </childnode>
        <childnode refid="1800" relation="include">
        </childnode>
        <childnode refid="1801" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1837" relation="include">
        </childnode>
        <childnode refid="1838" relation="include">
        </childnode>
        <childnode refid="1839" relation="include">
        </childnode>
        <childnode refid="1840" relation="include">
        </childnode>
      </node>
      <node id="1865">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="1863" relation="include">
        </childnode>
      </node>
      <node id="1861">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="internal_2custom_2gmock-generated-actions_8h_source"/>
      </node>
      <node id="1844">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1845" relation="include">
        </childnode>
        <childnode refid="1801" relation="include">
        </childnode>
        <childnode refid="1823" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1846" relation="include">
        </childnode>
      </node>
      <node id="1811">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="1812" relation="include">
        </childnode>
      </node>
      <node id="1801">
        <label>set</label>
      </node>
      <node id="1843">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1823" relation="include">
        </childnode>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1844" relation="include">
        </childnode>
        <childnode refid="1848" relation="include">
        </childnode>
      </node>
      <node id="1807">
        <label>algorithm</label>
      </node>
      <node id="1828">
        <label>regex.h</label>
      </node>
      <node id="1809">
        <label>stdio.h</label>
      </node>
      <node id="1842">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1809" relation="include">
        </childnode>
      </node>
      <node id="1846">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1802" relation="include">
        </childnode>
        <childnode refid="1803" relation="include">
        </childnode>
        <childnode refid="1823" relation="include">
        </childnode>
        <childnode refid="1804" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1847" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface" prot="public">testing::gmock_generated_function_mockers_test::FooInterface</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" prot="public">testing::gmock_generated_function_mockers_test::MockFoo</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" prot="public">testing::gmock_generated_function_mockers_test::FunctionMockerTest</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" prot="public">testing::gmock_generated_function_mockers_test::MockB</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_stack_interface" prot="public">testing::gmock_generated_function_mockers_test::StackInterface</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack" prot="public">testing::gmock_generated_function_mockers_test::MockStack</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_arg_number" prot="public">testing::gmock_generated_function_mockers_test::MockOverloadedOnArgNumber</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_constness" prot="public">testing::gmock_generated_function_mockers_test::MockOverloadedOnConstness</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__generated__function__mockers__test">testing::gmock_generated_function_mockers_test</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-generated-function-mockers__test_8cc_1af5ea000ce48c75251a5542898a872339" prot="public" static="no">
        <name>GMOCK_ALLOWS_CONST_PARAM_FUNCTIONS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="54" column="10" bodyfile="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-generated-function-mockers__test_8cc_1a9ae68063487fddb9f678e66728fae155" prot="public" static="no">
        <name>MY_MOCK_METHODS1_</name>
        <initializer>MOCK_METHOD0(Overloaded, void()); \
    MOCK_CONST_METHOD1(Overloaded, int(int n)); \
    MOCK_METHOD2(Overloaded, bool(bool f, int n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="505" column="9" bodyfile="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" bodystart="505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-generated-function-mockers__test_8cc_1ac36252ad7584222cebc036d56465d652" prot="public" static="no">
        <name>MY_MOCK_METHODS2_</name>
        <initializer>MOCK_CONST_METHOD1(Overloaded, int(int n)); \
    MOCK_METHOD1(Overloaded, int(int n));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" line="531" column="9" bodyfile="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc" bodystart="531" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>function<sp/>mocker<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-generated-function-mockers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSDN<sp/>says<sp/>the<sp/>header<sp/>file<sp/>to<sp/>be<sp/>included<sp/>for<sp/>STDMETHOD<sp/>is<sp/>BaseTyps.h<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>getting<sp/>compiler<sp/>errors<sp/>if<sp/>we<sp/>use<sp/>basetyps.h,<sp/>hence<sp/>including</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>objbase.h<sp/>for<sp/>definition<sp/>of<sp/>STDMETHOD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;objbase.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>bug<sp/>in<sp/>MSVC<sp/>(fixed<sp/>in<sp/>VS<sp/>2008)<sp/>that<sp/>prevents<sp/>creating<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>for<sp/>a<sp/>function<sp/>with<sp/>const<sp/>arguments,<sp/>so<sp/>we<sp/>don&apos;t<sp/>test<sp/>such</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cases<sp/>for<sp/>MSVC<sp/>versions<sp/>older<sp/>than<sp/>2008.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_WINDOWS<sp/>||<sp/>(_MSC_VER<sp/>&gt;=<sp/>1500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>GMOCK_ALLOWS_CONST_PARAM_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!GTEST_OS_WINDOWS<sp/>||<sp/>(_MSC_VER<sp/>&gt;=<sp/>1500)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_generated_function_mockers_test<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::string;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::_;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::A;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::An;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::AnyNumber;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Const;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::DoDefault;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Eq;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Lt;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">testing::MockFunction</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Ref;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Return;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ReturnRef;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::TypedEq;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface" kindref="compound">FooInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface" kindref="compound">FooInterface</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidReturning(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Binary(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Decimal(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>k)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TakesNonConstReference(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>TakesConstReference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GMOCK_ALLOWS_CONST_PARAM_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TakesConst(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GMOCK_ALLOWS_CONST_PARAM_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnArgumentNumber()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnArgumentNumber(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnArgumentType(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>OverloadedOnArgumentType(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OverloadedOnConstness()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>OverloadedOnConstness()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TypeWithHole(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*func)())<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TypeWithComma(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>string&gt;&amp;<sp/>a_map)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CTNullary)()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>CTUnary)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>CTDecimal)(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>k)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/>CTConst)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Const<sp/>qualifiers<sp/>on<sp/>arguments<sp/>were<sp/>once<sp/>(incorrectly)<sp/>considered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>significant<sp/>in<sp/>determining<sp/>whether<sp/>two<sp/>virtual<sp/>functions<sp/>had<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signature.<sp/>This<sp/>was<sp/>fixed<sp/>in<sp/>Visual<sp/>Studio<sp/>2008.<sp/>However,<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>still<sp/>emits<sp/>a<sp/>warning<sp/>that<sp/>alerts<sp/>about<sp/>this<sp/>change<sp/>in<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable<sp/>:<sp/>4373)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" kindref="compound">MockFoo</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface" kindref="compound">FooInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" kindref="compound">MockFoo</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>a<sp/>mock<sp/>function<sp/>parameter<sp/>can<sp/>be<sp/>named.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(VoidReturning,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(Nullary,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>that<sp/>a<sp/>mock<sp/>function<sp/>parameter<sp/>can<sp/>be<sp/>unnamed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(Unary,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(Binary,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>MOCK_METHOD10(Decimal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TakesNonConstReference,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TakesConstReference,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GMOCK_ALLOWS_CONST_PARAM_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TakesConst,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(ReturnTypeWithComma,<sp/>std::map&lt;int,<sp/>string&gt;());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1(ReturnTypeWithComma,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>string&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(OverloadedOnArgumentNumber,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(OverloadedOnArgumentNumber,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(OverloadedOnArgumentType,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(OverloadedOnArgumentType,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(OverloadedOnConstness,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0(OverloadedOnConstness,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TypeWithHole,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*)()));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(TypeWithComma,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>string&gt;&amp;));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTNullary,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>MOCK_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTUnary,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>MOCK_METHOD10_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTDecimal,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>j,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>k));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTConst,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>CTReturnTypeWithComma,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>string&gt;());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" kindref="compound">MockFoo</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_test" kindref="compound">testing::Test</ref><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>()<sp/>:<sp/>foo_(&amp;mock_foo_)<sp/>{}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface" kindref="compound">FooInterface</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>foo_;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo" kindref="compound">MockFoo</ref><sp/>mock_foo_;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>void-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksVoidFunction)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>VoidReturning(Lt(100)));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>foo_-&gt;VoidReturning(0);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>nullary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksNullaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>Nullary())</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoDefault())</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>foo_-&gt;Nullary());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo_-&gt;Nullary());</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>unary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksUnaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>Unary(Eq(2)))</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(2)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(foo_-&gt;Unary(2));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(foo_-&gt;Unary(2));</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>binary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksBinaryFunction)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>Binary(2,<sp/>_))</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(3));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>foo_-&gt;Binary(2,<sp/>1));</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>decimal<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksDecimalFunction)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>Decimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1L,<sp/>A&lt;float&gt;(),</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lt(100),<sp/>5U,<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(5));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>foo_-&gt;Decimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>5,<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>non-const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksFunctionWithNonConstReferenceArgument)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>TakesNonConstReference(Ref(a)))</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(foo_-&gt;TakesNonConstReference(a));</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksFunctionWithConstReferenceArgument)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>TakesConstReference(Ref(a)))</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>foo_-&gt;TakesConstReference(a));</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GMOCK_ALLOWS_CONST_PARAM_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksFunctionWithConstArgument)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>TakesConst(Lt(10)))</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(DoDefault());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(foo_-&gt;TakesConst(5));</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GMOCK_ALLOWS_CONST_PARAM_FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>number<sp/>of<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksFunctionsOverloadedOnArgumentNumber)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>OverloadedOnArgumentNumber())</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>OverloadedOnArgumentNumber(_))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>foo_-&gt;OverloadedOnArgumentNumber(1));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo_-&gt;OverloadedOnArgumentNumber());</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>types<sp/>of<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksFunctionsOverloadedOnArgumentType)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>OverloadedOnArgumentType(An&lt;int&gt;()))</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>OverloadedOnArgumentType(TypedEq&lt;char&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo_-&gt;OverloadedOnArgumentType(0));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>foo_-&gt;OverloadedOnArgumentType(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>const-ness<sp/>of<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksFunctionsOverloadedOnConstnessOfThis)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>OverloadedOnConstness());</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>EXPECT_CALL(Const(mock_foo_),<sp/>OverloadedOnConstness())</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>foo_-&gt;OverloadedOnConstness());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>Const(*foo_).OverloadedOnConstness());</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksReturnTypeWithComma)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>string&gt;<sp/>a_map;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>ReturnTypeWithComma())</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>ReturnTypeWithComma(42))</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>mock_foo_.ReturnTypeWithComma());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>mock_foo_.ReturnTypeWithComma(42));</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>nullary<sp/>function<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksNullaryFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>CTNullary())</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(-1))</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-1,<sp/>foo_-&gt;CTNullary());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>foo_-&gt;CTNullary());</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>unary<sp/>function<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksUnaryFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>CTUnary(Eq(2)))</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(2)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(foo_-&gt;CTUnary(2));</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(foo_-&gt;CTUnary(2));</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>a<sp/>decimal<sp/>function<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksDecimalFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>CTDecimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1L,<sp/>A&lt;float&gt;(),</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Lt(100),<sp/>5U,<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(10));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>foo_-&gt;CTDecimal(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>5,<sp/>NULL,<sp/></highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>functions<sp/>overloaded<sp/>on<sp/>the<sp/>const-ness<sp/>of<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksFunctionsConstFunctionWithCallType)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>EXPECT_CALL(Const(mock_foo_),<sp/>CTConst(_))</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>Const(*foo_).CTConst(0));</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="test__tracker_8cpp_1a567724948cdce4788a1e8c8baf6b6cfe" kindref="member">TEST_F</ref>(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test" kindref="compound">FunctionMockerTest</ref>,<sp/>MocksReturnTypeWithCommaAndCallType)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>string&gt;<sp/>a_map;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock_foo_,<sp/>CTReturnTypeWithComma())</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>mock_foo_.CTReturnTypeWithComma());</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" kindref="compound">MockB</ref><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" kindref="compound">MockB</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(DoB,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" kindref="compound">MockB</ref>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal">};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>functions<sp/>with<sp/>no<sp/>EXPECT_CALL()<sp/>ruls<sp/>can<sp/>be<sp/>called<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">TEST(ExpectCallTest,<sp/>UnmentionedFunctionCanBeCalledAnyNumberOfTimes)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" kindref="compound">MockB</ref><sp/>b;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" kindref="compound">MockB</ref><sp/>b;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_b" kindref="compound">MockB</ref><sp/>b;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>b.DoB();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>template<sp/>interfaces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="385" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_stack_interface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_stack_interface" kindref="compound">StackInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_stack_interface" kindref="compound">StackInterface</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Push(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pop()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetSize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>GetTop()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">};</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="398" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack" kindref="compound">MockStack</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_stack_interface" kindref="compound">StackInterface</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack" kindref="compound">MockStack</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>MOCK_METHOD1_T(Push,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>elem));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_T(Pop,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T(GetSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T(GetTop,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;());</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>can<sp/>contain<sp/>unprotected<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_T(ReturnTypeWithComma,<sp/>std::map&lt;int,<sp/>int&gt;());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD1_T(ReturnTypeWithComma,<sp/>std::map&lt;int,<sp/>int&gt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack" kindref="compound">MockStack</ref>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>template<sp/>mock<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">TEST(TemplateMockTest,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack" kindref="compound">MockStack&lt;int&gt;</ref><sp/>mock;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetSize())</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0))</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Push(_));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetTop())</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnRef(n));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Pop())</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AnyNumber());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>mock.Push(5);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>mock.GetTop());</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>mock.Pop();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">TEST(TemplateMockTest,<sp/>MethodWithCommaInReturnTypeWorks)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack" kindref="compound">MockStack&lt;int&gt;</ref><sp/>mock;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;int,<sp/>int&gt;<sp/>a_map;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>ReturnTypeWithComma())</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>ReturnTypeWithComma(1))</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(a_map));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>mock.ReturnTypeWithComma());</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>EXPECT_EQ(a_map,<sp/>mock.ReturnTypeWithComma(1));</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>mocking<sp/>template<sp/>interfaces<sp/>with<sp/>calltype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StackInterfaceWithCallType<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~StackInterfaceWithCallType()<sp/>{}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Push)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>Pop)()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>GetSize)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Template<sp/>parameter<sp/>appears<sp/>in<sp/>function<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>STDMETHOD_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/>GetTop)()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">};</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MockStackWithCallType<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StackInterfaceWithCallType&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>MockStackWithCallType()<sp/>{}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>MOCK_METHOD1_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>Push,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>elem));</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>MOCK_METHOD0_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>Pop,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>GetSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>MOCK_CONST_METHOD0_T_WITH_CALLTYPE(STDMETHODCALLTYPE,<sp/>GetTop,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;());</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(MockStackWithCallType);</highlight></codeline>
<codeline lineno="479"><highlight class="normal">};</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>template<sp/>mock<sp/>with<sp/>calltype<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">TEST(TemplateMockTestWithCallType,<sp/>Works)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>MockStackWithCallType&lt;int&gt;<sp/>mock;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetSize())</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0))</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(0));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Push(_));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>GetTop())</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(ReturnRef(n));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Pop())</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.Times(AnyNumber());</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>mock.Push(5);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>mock.GetTop());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>mock.Pop();</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>mock.GetSize());</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_MOCK_METHODS1_<sp/>\</highlight></codeline>
<codeline lineno="506"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MOCK_METHOD0(Overloaded,<sp/>void());<sp/>\</highlight></codeline>
<codeline lineno="507"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MOCK_CONST_METHOD1(Overloaded,<sp/>int(int<sp/>n));<sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MOCK_METHOD2(Overloaded,<sp/>bool(bool<sp/>f,<sp/>int<sp/>n))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_arg_number" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_arg_number" kindref="compound">MockOverloadedOnArgNumber</ref><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_arg_number" kindref="compound">MockOverloadedOnArgNumber</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>MY_MOCK_METHODS1_;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_arg_number" kindref="compound">MockOverloadedOnArgNumber</ref>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal">};</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">TEST(OverloadedMockMethodTest,<sp/>CanOverloadOnArgNumberInMacroBody)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_arg_number" kindref="compound">MockOverloadedOnArgNumber</ref><sp/>mock;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded());</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1)).WillOnce(Return(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>mock.Overloaded();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>mock.Overloaded(1));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(mock.Overloaded(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1));</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_MOCK_METHODS2_<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MOCK_CONST_METHOD1(Overloaded,<sp/>int(int<sp/>n));<sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>MOCK_METHOD1(Overloaded,<sp/>int(int<sp/>n));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_constness" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_constness" kindref="compound">MockOverloadedOnConstness</ref><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_constness" kindref="compound">MockOverloadedOnConstness</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>MY_MOCK_METHODS2_;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_constness" kindref="compound">MockOverloadedOnConstness</ref>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal">};</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">TEST(OverloadedMockMethodTest,<sp/>CanOverloadOnConstnessInMacroBody)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_constness" kindref="compound">MockOverloadedOnConstness</ref><sp/>mock;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_overloaded_on_constness" kindref="compound">MockOverloadedOnConstness</ref>*<sp/>const_mock<sp/>=<sp/>&amp;mock;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>EXPECT_CALL(mock,<sp/>Overloaded(1)).WillOnce(Return(2));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>EXPECT_CALL(*const_mock,<sp/>Overloaded(1)).WillOnce(Return(3));</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>mock.Overloaded(1));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>const_mock-&gt;Overloaded(1));</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">TEST(MockFunctionTest,<sp/>WorksForVoidNullary)<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">MockFunction&lt;void()&gt;</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>foo.Call();</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">TEST(MockFunctionTest,<sp/>WorksForNonVoidNullary)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">MockFunction&lt;int()&gt;</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call())</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo.Call());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>foo.Call());</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">TEST(MockFunctionTest,<sp/>WorksForVoidUnary)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">MockFunction&lt;void(int)&gt;</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(1));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>foo.Call(1);</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">TEST(MockFunctionTest,<sp/>WorksForNonVoidBinary)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">MockFunction&lt;int(bool, int)&gt;</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42))</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>Ge(100)))</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(3));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo.Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>foo.Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>42));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>foo.Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>120));</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">TEST(MockFunctionTest,<sp/>WorksFor10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">MockFunction</ref>&lt;int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a0,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a4,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a6,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a7,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a8,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a9)&gt;<sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(_,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_,<sp/>_))</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(1))</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Return(2));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>foo.Call(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>foo.Call(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_FUNCTION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">TEST(MockFunctionTest,<sp/>AsStdFunction)<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">MockFunction&lt;int(int)&gt;</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>call<sp/>=<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;int(int)&gt;<sp/>&amp;f,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f(i);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(1)).WillOnce(Return(-1));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call(2)).WillOnce(Return(-2));</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-1,<sp/>call(foo.AsStdFunction(),<sp/>1));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>EXPECT_EQ(-2,<sp/>call(foo.AsStdFunction(),<sp/>2));</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">TEST(MockFunctionTest,<sp/>AsStdFunctionReturnsReference)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_mock_function" kindref="compound">MockFunction&lt;int&amp;()&gt;</ref><sp/><ref refid="namespacefoo" kindref="compound">foo</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>EXPECT_CALL(foo,<sp/>Call()).WillOnce(ReturnRef(value));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>ref<sp/>=<sp/>foo.AsStdFunction()();</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>ref);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>value<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>ref);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_FUNCTION_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_generated_function_mockers_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc"/>
  </compounddef>
</doxygen>
