<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md_vendor_googletest_googletest_docs__v1_6__pump_manual" kind="page">
    <compoundname>md_vendor_googletest_googletest_docs_V1_6_PumpManual</compoundname>
    <title>V1_6_PumpManual</title>
    <detaileddescription>
<para><bold>P</bold>ump is <bold>U</bold>seful for <bold>M</bold>eta <bold>P</bold>rogramming.</para><para><heading level="1">The Problem</heading>
</para><para>Template and macro libraries often need to define many classes, functions, or macros that vary only (or almost only) in the number of arguments they take. It&apos;s a lot of repetitive, mechanical, and error-prone work.</para><para>Variadic templates and variadic macros can alleviate the problem. However, while both are being considered by the C++ committee, neither is in the standard yet or widely supported by compilers. Thus they are often not a good choice, especially when your code needs to be portable. And their capabilities are still limited.</para><para>As a result, authors of such libraries often have to write scripts to generate their implementation. However, our experience is that it&apos;s tedious to write such scripts, which tend to reflect the structure of the generated code poorly and are often hard to read and edit. For example, a small change needed in the generated code may require some non-intuitive, non-trivial changes in the script. This is especially painful when experimenting with the code.</para><para><heading level="1">Our Solution</heading>
</para><para>Pump (for Pump is Useful for Meta Programming, Pretty Useful for Meta Programming, or Practical Utility for Meta Programming, whichever you prefer) is a simple meta-programming tool for C++. The idea is that a programmer writes a <computeroutput>foo.pump</computeroutput> file which contains C++ code plus meta code that manipulates the C++ code. The meta code can handle iterations over a range, nested iterations, local meta variable definitions, simple arithmetic, and conditional expressions. You can view it as a small Domain-Specific Language. The meta language is designed to be non-intrusive (s.t. it won&apos;t confuse Emacs&apos; C++ mode, for example) and concise, making Pump code intuitive and easy to maintain.</para><para><heading level="2">Highlights</heading>
</para><para><itemizedlist>
<listitem><para>The implementation is in a single Python script and thus ultra portable: no build or installation is needed and it works cross platforms.</para></listitem><listitem><para>Pump tries to be smart with respect to <ulink url="http://code.google.com/p/google-styleguide/">Google&apos;s style guide</ulink>: it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.</para></listitem><listitem><para>The format is human-readable and more concise than XML.</para></listitem><listitem><para>The format works relatively well with Emacs&apos; C++ mode.</para></listitem></itemizedlist>
</para><para><heading level="2">Examples</heading>
</para><para>The following Pump code (where meta keywords start with <computeroutput>$</computeroutput>, <computeroutput>[[</computeroutput> and <computeroutput>]]</computeroutput> are meta brackets, and <computeroutput>$$</computeroutput> starts a meta comment that ends with the line):</para><para><programlisting><codeline><highlight class="normal">$var<sp/>n<sp/>=<sp/>3<sp/><sp/><sp/><sp/><sp/>$$<sp/>Defines<sp/>a<sp/>meta<sp/>variable<sp/>n.</highlight></codeline>
<codeline><highlight class="normal">$range<sp/>i<sp/>0..n<sp/><sp/>$$<sp/>Declares<sp/>the<sp/>range<sp/>of<sp/>meta<sp/>iterator<sp/>i<sp/>(inclusive).</highlight></codeline>
<codeline><highlight class="normal">$for<sp/>i<sp/>[[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>$$<sp/>Meta<sp/>loop.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Foo$i<sp/>does<sp/>blah<sp/>for<sp/>$i-ary<sp/>predicates.</highlight></codeline>
<codeline><highlight class="normal">$range<sp/>j<sp/>1..i</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;size_t<sp/>N<sp/>$for<sp/>j<sp/>[[,<sp/>typename<sp/>A$j]]&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Foo$i<sp/>{</highlight></codeline>
<codeline><highlight class="normal">$if<sp/>i<sp/>==<sp/>0<sp/>[[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blah<sp/>a;</highlight></codeline>
<codeline><highlight class="normal">]]<sp/>$elif<sp/>i<sp/>&lt;=<sp/>2<sp/>[[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blah<sp/>b;</highlight></codeline>
<codeline><highlight class="normal">]]<sp/>$else<sp/>[[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blah<sp/>c;</highlight></codeline>
<codeline><highlight class="normal">]]</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">]]</highlight></codeline>
</programlisting></para><para>will be translated by the Pump compiler to:</para><para><programlisting><codeline><highlight class="normal">//<sp/>Foo0<sp/>does<sp/>blah<sp/>for<sp/>0-ary<sp/>predicates.</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;size_t<sp/>N&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Foo0<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blah<sp/>a;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Foo1<sp/>does<sp/>blah<sp/>for<sp/>1-ary<sp/>predicates.</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;size_t<sp/>N,<sp/>typename<sp/>A1&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Foo1<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blah<sp/>b;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Foo2<sp/>does<sp/>blah<sp/>for<sp/>2-ary<sp/>predicates.</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;size_t<sp/>N,<sp/>typename<sp/>A1,<sp/>typename<sp/>A2&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Foo2<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blah<sp/>b;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Foo3<sp/>does<sp/>blah<sp/>for<sp/>3-ary<sp/>predicates.</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;size_t<sp/>N,<sp/>typename<sp/>A1,<sp/>typename<sp/>A2,<sp/>typename<sp/>A3&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Foo3<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blah<sp/>c;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para><para>In another example,</para><para><programlisting><codeline><highlight class="normal">$range<sp/>i<sp/>1..n</highlight></codeline>
<codeline><highlight class="normal">Func($for<sp/>i<sp/>+<sp/>[[a$i]]);</highlight></codeline>
<codeline><highlight class="normal">$$<sp/>The<sp/>text<sp/>between<sp/>i<sp/>and<sp/>[[<sp/>is<sp/>the<sp/>separator<sp/>between<sp/>iterations.</highlight></codeline>
</programlisting></para><para>will generate one of the following lines (without the comments), depending on the value of <computeroutput>n</computeroutput>:</para><para><programlisting><codeline><highlight class="normal">Func();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>n<sp/>is<sp/>0.</highlight></codeline>
<codeline><highlight class="normal">Func(a1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>n<sp/>is<sp/>1.</highlight></codeline>
<codeline><highlight class="normal">Func(a1<sp/>+<sp/>a2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>n<sp/>is<sp/>2.</highlight></codeline>
<codeline><highlight class="normal">Func(a1<sp/>+<sp/>a2<sp/>+<sp/>a3);<sp/><sp/>//<sp/>If<sp/>n<sp/>is<sp/>3.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>And<sp/>so<sp/>on...</highlight></codeline>
</programlisting></para><para><heading level="2">Constructs</heading>
</para><para>We support the following meta programming constructs:</para><para><table rows="10" cols="2"><row>
<entry thead="yes"><para><computeroutput>$var id = exp</computeroutput> </para></entry><entry thead="yes"><para>Defines a named constant value. <computeroutput>$id</computeroutput> is valid util the end of the current meta lexical block.  </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$range id exp..exp</computeroutput> </para></entry><entry thead="no"><para>Sets the range of an iteration variable, which can be reused in multiple loops later. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$for id sep [[ code ]]</computeroutput> </para></entry><entry thead="no"><para>Iteration. The range of <computeroutput>id</computeroutput> must have been defined earlier. <computeroutput>$id</computeroutput> is valid in <computeroutput>code</computeroutput>. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$($)</computeroutput> </para></entry><entry thead="no"><para>Generates a single <computeroutput>$</computeroutput> character. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$id</computeroutput> </para></entry><entry thead="no"><para>Value of the named constant or iteration variable. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput></computeroutput> </para></entry><entry thead="no"><para>Value of the expression. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$if exp [[ code ]] else_branch</computeroutput> </para></entry><entry thead="no"><para>Conditional. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>[[ code ]]</computeroutput> </para></entry><entry thead="no"><para>Meta lexical block. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>cpp_code</computeroutput> </para></entry><entry thead="no"><para>Raw C++ code. </para></entry></row>
<row>
<entry thead="no"><para><computeroutput>$$ comment</computeroutput> </para></entry><entry thead="no"><para>Meta comment. </para></entry></row>
</table>
<bold>Note:</bold> To give the user some freedom in formatting the Pump source code, Pump ignores a new-line character if it&apos;s right after <computeroutput>$for foo</computeroutput> or next to <computeroutput>[[</computeroutput> or <computeroutput>]]</computeroutput>. Without this rule you&apos;ll often be forced to write very long lines to get the desired output. Therefore sometimes you may need to insert an extra new-line in such places for a new-line to show up in your output.</para><para><heading level="2">Grammar</heading>
</para><para><programlisting><codeline><highlight class="normal">code<sp/>::=<sp/>atomic_code*</highlight></codeline>
<codeline><highlight class="normal">atomic_code<sp/>::=<sp/>$var<sp/>id<sp/>=<sp/>exp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$var<sp/>id<sp/>=<sp/>[[<sp/>code<sp/>]]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$range<sp/>id<sp/>exp..exp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$for<sp/>id<sp/>sep<sp/>[[<sp/>code<sp/>]]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$($)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$id</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$(exp)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$if<sp/>exp<sp/>[[<sp/>code<sp/>]]<sp/>else_branch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>[[<sp/>code<sp/>]]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>cpp_code</highlight></codeline>
<codeline><highlight class="normal">sep<sp/>::=<sp/>cpp_code<sp/>|<sp/>empty_string</highlight></codeline>
<codeline><highlight class="normal">else_branch<sp/>::=<sp/>$else<sp/>[[<sp/>code<sp/>]]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>$elif<sp/>exp<sp/>[[<sp/>code<sp/>]]<sp/>else_branch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>|<sp/>empty_string</highlight></codeline>
<codeline><highlight class="normal">exp<sp/>::=<sp/>simple_expression_in_Python_syntax</highlight></codeline>
</programlisting></para><para><heading level="2">Code</heading>
</para><para>You can find the source code of Pump in <ulink url="../scripts/pump.py">scripts/pump.py</ulink>. It is still very unpolished and lacks automated tests, although it has been successfully used many times. If you find a chance to use it in your project, please let us know what you think! We also welcome help on improving Pump.</para><para><heading level="2">Real Examples</heading>
</para><para>You can find real-world applications of Pump in <ulink url="http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgoogletest\.googlecode\.com">Google Test</ulink> and <ulink url="http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgooglemock\.googlecode\.com">Google Mock</ulink>. The source file <computeroutput>foo.h.pump</computeroutput> generates <computeroutput>foo.h</computeroutput>.</para><para><heading level="2">Tips</heading>
</para><para><itemizedlist>
<listitem><para>If a meta variable is followed by a letter or digit, you can separate them using <computeroutput>[[]]</computeroutput>, which inserts an empty string. For example <computeroutput>Foo$j[[]]Helper</computeroutput> generate <computeroutput>Foo1Helper</computeroutput> when <computeroutput>j</computeroutput> is 1.</para></listitem><listitem><para>To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting <computeroutput>[[]]</computeroutput> followed by a new line. Since any new-line character next to <computeroutput>[[</computeroutput> or <computeroutput>]]</computeroutput> is ignored, the generated code won&apos;t contain this new line. </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
