<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtesting_1_1internal_1_1_on_call_spec" kind="class" language="C++" prot="public">
    <compoundname>testing::internal::OnCallSpec</compoundname>
    <basecompoundref refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" prot="public" virt="non-virtual">testing::internal::UntypedOnCallSpecBase</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>F</declname>
        <defname>F</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtesting_1_1internal_1_1_on_call_spec_1a70ffab8b915b7b48a90f5ce256da806f" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function</ref>&lt; F &gt;::ArgumentTuple</type>
        <definition>typedef Function&lt;F&gt;::ArgumentTuple testing::internal::OnCallSpec&lt; F &gt;::ArgumentTuple</definition>
        <argsstring></argsstring>
        <name>ArgumentTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="287" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtesting_1_1internal_1_1_on_call_spec_1a3240f159f0a9d8cda208bc256da35074" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function</ref>&lt; F &gt;::ArgumentMatcherTuple</type>
        <definition>typedef Function&lt;F&gt;::ArgumentMatcherTuple testing::internal::OnCallSpec&lt; F &gt;::ArgumentMatcherTuple</definition>
        <argsstring></argsstring>
        <name>ArgumentMatcherTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="288" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtesting_1_1internal_1_1_on_call_spec_1a3938ebe6cb9bc385956358e354a67673" prot="private" static="no" mutable="no">
        <type>ArgumentMatcherTuple</type>
        <definition>ArgumentMatcherTuple testing::internal::OnCallSpec&lt; F &gt;::matchers_</definition>
        <argsstring></argsstring>
        <name>matchers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="355" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesting_1_1internal_1_1_on_call_spec_1ab9c4a32626e40be4b40824815128f099" prot="private" static="no" mutable="no">
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; const ArgumentTuple &amp; &gt;</type>
        <definition>Matcher&lt;const ArgumentTuple&amp;&gt; testing::internal::OnCallSpec&lt; F &gt;::extra_matcher_</definition>
        <argsstring></argsstring>
        <name>extra_matcher_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="356" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtesting_1_1internal_1_1_on_call_spec_1a5868fd7eb5e314e9aef160ebfc9bf834" prot="private" static="no" mutable="no">
        <type><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt; F &gt;</type>
        <definition>Action&lt;F&gt; testing::internal::OnCallSpec&lt; F &gt;::action_</definition>
        <argsstring></argsstring>
        <name>action_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="357" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1internal_1_1_on_call_spec_1ac7077e8162a10714e463b64a3cc7d054" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::internal::OnCallSpec&lt; F &gt;::OnCallSpec</definition>
        <argsstring>(const char *a_file, int a_line, const ArgumentMatcherTuple &amp;matchers)</argsstring>
        <name>OnCallSpec</name>
        <param>
          <type>const char *</type>
          <declname>a_file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_line</declname>
        </param>
        <param>
          <type>const ArgumentMatcherTuple &amp;</type>
          <declname>matchers</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="292" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="292" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_on_call_spec_1a4d9152c0f74245670a1222aae2262d5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref> &amp;</type>
        <definition>OnCallSpec&amp; testing::internal::OnCallSpec&lt; F &gt;::With</definition>
        <argsstring>(const Matcher&lt; const ArgumentTuple &amp;&gt; &amp;m)</argsstring>
        <name>With</name>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; const ArgumentTuple &amp;&gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="304" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="304" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_on_call_spec_1a1c6303bf46983f20f4d2a61752fa8663" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref> &amp;</type>
        <definition>OnCallSpec&amp; testing::internal::OnCallSpec&lt; F &gt;::WillByDefault</definition>
        <argsstring>(const Action&lt; F &gt; &amp;action)</argsstring>
        <name>WillByDefault</name>
        <param>
          <type>const <ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt; F &gt; &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="316" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="316" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_on_call_spec_1a8113d1ec5775715637a87875dee6cc68" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::internal::OnCallSpec&lt; F &gt;::Matches</definition>
        <argsstring>(const ArgumentTuple &amp;args) const</argsstring>
        <name>Matches</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="329" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="329" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_on_call_spec_1a3ef8e41380326823fb5b701f3c52cdb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt; F &gt; &amp;</type>
        <definition>const Action&lt;F&gt;&amp; testing::internal::OnCallSpec&lt; F &gt;::GetAction</definition>
        <argsstring>() const</argsstring>
        <name>GetAction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="334" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="334" bodyend="339"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1680">
        <label>testing::internal::OnCallSpec&lt; F &gt;</label>
        <link refid="classtesting_1_1internal_1_1_on_call_spec"/>
        <childnode refid="1681" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1681">
        <label>testing::internal::UntypedOnCallSpecBase</label>
        <link refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1682">
        <label>testing::internal::OnCallSpec&lt; F &gt;</label>
        <link refid="classtesting_1_1internal_1_1_on_call_spec"/>
        <childnode refid="1683" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1683">
        <label>testing::internal::UntypedOnCallSpecBase</label>
        <link refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base"/>
      </node>
    </collaborationgraph>
    <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="285" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="285" bodyend="358"/>
    <listofallmembers>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a5868fd7eb5e314e9aef160ebfc9bf834" prot="private" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>action_</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a3240f159f0a9d8cda208bc256da35074" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>ArgumentMatcherTuple</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a70ffab8b915b7b48a90f5ce256da806f" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>ArgumentTuple</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a83d223cf0e48fadc872a7b4062948df4" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>AssertSpecProperty</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a78ebf16bfee40375e33a983f3100f354" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>Clause</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a7eeba49b7b2968ebb4859c04684828b2" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>ExpectSpecProperty</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1ab9c4a32626e40be4b40824815128f099" prot="private" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>extra_matcher_</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a5ccb6ee1208ee597528b44c7c9945fa3" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>file</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1adf4e6c5022dfeb482f5328e9bb58ba88" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>file_</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a3ef8e41380326823fb5b701f3c52cdb6" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>GetAction</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a78ebf16bfee40375e33a983f3100f354a57f312c5eacf22518ff0b12405cde4f1" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>kNone</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a78ebf16bfee40375e33a983f3100f354aeb25a21e1aa3dc4ca3a108b5533d7eed" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>kWillByDefault</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a78ebf16bfee40375e33a983f3100f354a451699b0beaaabb325f8eaf1c65a071d" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>kWith</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1adb6d19adfeb5fde535d854aedbc5fb0f" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>last_clause_</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a18e9eb7155380b3e124bccc0d8115b5e" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>line</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1a1dfa0dafaae6697f17adf5d837ca77c7" prot="protected" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>line_</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a3938ebe6cb9bc385956358e354a67673" prot="private" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>matchers_</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a8113d1ec5775715637a87875dee6cc68" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>Matches</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1ac7077e8162a10714e463b64a3cc7d054" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>OnCallSpec</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base_1afc5da72d536ad61e2d66de87b2b9bc50" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>UntypedOnCallSpecBase</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a1c6303bf46983f20f4d2a61752fa8663" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>WillByDefault</name></member>
      <member refid="classtesting_1_1internal_1_1_on_call_spec_1a4d9152c0f74245670a1222aae2262d5e" prot="public" virt="non-virtual"><scope>testing::internal::OnCallSpec</scope><name>With</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
