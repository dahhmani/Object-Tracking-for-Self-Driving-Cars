<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-actions_8h" kind="file" language="C++">
    <compoundname>gmock-actions.h</compoundname>
    <includes local="no">errno.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">string</includes>
    <includes refid="gmock-internal-utils_8h" local="yes">gmock/internal/gmock-internal-utils.h</includes>
    <includes refid="gmock-port_8h" local="yes">gmock/internal/gmock-port.h</includes>
    <includedby refid="gmock-generated-actions_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h</includedby>
    <includedby refid="gmock-spec-builders_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h</includedby>
    <includedby refid="gmock_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock.h</includedby>
    <includedby refid="gmock-actions__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock-actions_test.cc</includedby>
    <incdepgraph>
      <node id="249">
        <label>sys/stat.h</label>
      </node>
      <node id="271">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="244" relation="include">
        </childnode>
      </node>
      <node id="265">
        <label>iomanip</label>
      </node>
      <node id="262">
        <label>limits</label>
      </node>
      <node id="253">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="240">
        <label>assert.h</label>
      </node>
      <node id="276">
        <label>iterator</label>
      </node>
      <node id="264">
        <label>float.h</label>
      </node>
      <node id="235">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
      </node>
      <node id="280">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="241">
        <label>stdlib.h</label>
      </node>
      <node id="269">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
      </node>
      <node id="281">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="282" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
      </node>
      <node id="232">
        <label>errno.h</label>
      </node>
      <node id="234">
        <label>string</label>
      </node>
      <node id="266">
        <label>map</label>
      </node>
      <node id="260">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="279">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
      </node>
      <node id="246">
        <label>stddef.h</label>
      </node>
      <node id="284">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="237">
        <label>ostream</label>
      </node>
      <node id="254">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="272">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="273" relation="include">
        </childnode>
      </node>
      <node id="248">
        <label>sys/types.h</label>
      </node>
      <node id="247">
        <label>string.h</label>
      </node>
      <node id="231">
        <label>vendor/googletest/googlemock/include/gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h"/>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
      </node>
      <node id="258">
        <label>typeinfo</label>
      </node>
      <node id="239">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
      </node>
      <node id="255">
        <label>unistd.h</label>
      </node>
      <node id="252">
        <label>vector</label>
      </node>
      <node id="278">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="268">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
      </node>
      <node id="251">
        <label>utility</label>
      </node>
      <node id="250">
        <label>sstream</label>
      </node>
      <node id="243">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
      </node>
      <node id="282">
        <label>iosfwd</label>
      </node>
      <node id="270">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="269" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>iostream</label>
      </node>
      <node id="261">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="283" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="251" relation="include">
        </childnode>
      </node>
      <node id="256">
        <label>strings.h</label>
      </node>
      <node id="245">
        <label>ctype.h</label>
      </node>
      <node id="283">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
      </node>
      <node id="244">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
      </node>
      <node id="263">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="271" relation="include">
        </childnode>
      </node>
      <node id="275">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
      </node>
      <node id="238">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="239" relation="include">
        </childnode>
      </node>
      <node id="267">
        <label>set</label>
      </node>
      <node id="274">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="279" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>algorithm</label>
      </node>
      <node id="257">
        <label>regex.h</label>
      </node>
      <node id="236">
        <label>stdio.h</label>
      </node>
      <node id="273">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="277">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="287">
        <label>vendor/googletest/googlemock/include/gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="291">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="288">
        <label>vendor/googletest/googlemock/include/gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="289" relation="include">
        </childnode>
      </node>
      <node id="286">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="285">
        <label>vendor/googletest/googlemock/include/gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h"/>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="290">
        <label>vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
      </node>
      <node id="292">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="288" relation="include">
        </childnode>
      </node>
      <node id="289">
        <label>vendor/googletest/googlemock/test/gmock_link_test.h</label>
        <link refid="gmock__link__test_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1_action_adaptor" prot="public">testing::internal::ActionAdaptor</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_built_in_default_value_getter" prot="public">testing::internal::BuiltInDefaultValueGetter</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_built_in_default_value_getter_3_01_t_00_01false_01_4" prot="public">testing::internal::BuiltInDefaultValueGetter&lt; T, false &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value" prot="public">testing::internal::BuiltInDefaultValue</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value_3_01const_01_t_01_4" prot="public">testing::internal::BuiltInDefaultValue&lt; const T &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_built_in_default_value_3_01_t_01_5_01_4" prot="public">testing::internal::BuiltInDefaultValue&lt; T * &gt;</innerclass>
    <innerclass refid="classtesting_1_1_default_value" prot="public">testing::DefaultValue</innerclass>
    <innerclass refid="classtesting_1_1_default_value_1_1_value_producer" prot="private">testing::DefaultValue::ValueProducer</innerclass>
    <innerclass refid="classtesting_1_1_default_value_1_1_fixed_value_producer" prot="private">testing::DefaultValue::FixedValueProducer</innerclass>
    <innerclass refid="classtesting_1_1_default_value_1_1_factory_value_producer" prot="private">testing::DefaultValue::FactoryValueProducer</innerclass>
    <innerclass refid="classtesting_1_1_default_value_3_01_t_01_6_01_4" prot="public">testing::DefaultValue&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1_default_value_3_01void_01_4" prot="public">testing::DefaultValue&lt; void &gt;</innerclass>
    <innerclass refid="classtesting_1_1_action_interface" prot="public">testing::ActionInterface</innerclass>
    <innerclass refid="classtesting_1_1_action" prot="public">testing::Action</innerclass>
    <innerclass refid="classtesting_1_1_polymorphic_action" prot="public">testing::PolymorphicAction</innerclass>
    <innerclass refid="classtesting_1_1_polymorphic_action_1_1_monomorphic_impl" prot="private">testing::PolymorphicAction::MonomorphicImpl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_action_adaptor" prot="public">testing::internal::ActionAdaptor</innerclass>
    <innerclass refid="structtesting_1_1internal_1_1_by_move_wrapper" prot="public">testing::internal::ByMoveWrapper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_action" prot="public">testing::internal::ReturnAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_action_1_1_impl" prot="private">testing::internal::ReturnAction::Impl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_action_1_1_impl_3_01_by_move_wrapper_3_01_r___01_4_00_01_f_01_4" prot="private">testing::internal::ReturnAction::Impl&lt; ByMoveWrapper&lt; R_ &gt;, F &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_null_action" prot="public">testing::internal::ReturnNullAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_void_action" prot="public">testing::internal::ReturnVoidAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_action" prot="public">testing::internal::ReturnRefAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_action_1_1_impl" prot="private">testing::internal::ReturnRefAction::Impl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" prot="public">testing::internal::ReturnRefOfCopyAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_return_ref_of_copy_action_1_1_impl" prot="private">testing::internal::ReturnRefOfCopyAction::Impl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_default_action" prot="public">testing::internal::DoDefaultAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_assign_action" prot="public">testing::internal::AssignAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_set_errno_and_return_action" prot="public">testing::internal::SetErrnoAndReturnAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_set_argument_pointee_action" prot="public">testing::internal::SetArgumentPointeeAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_set_argument_pointee_action_3_01_n_00_01_proto_00_01true_01_4" prot="public">testing::internal::SetArgumentPointeeAction&lt; N, Proto, true &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_without_args_action" prot="public">testing::internal::InvokeWithoutArgsAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" prot="public">testing::internal::InvokeMethodWithoutArgsAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ignore_result_action" prot="public">testing::internal::IgnoreResultAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_ignore_result_action_1_1_impl" prot="private">testing::internal::IgnoreResultAction::Impl</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_reference_wrapper" prot="public">testing::internal::ReferenceWrapper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_both_action" prot="public">testing::internal::DoBothAction</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_do_both_action_1_1_impl" prot="private">testing::internal::DoBothAction::Impl</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-actions_8h_1a06b1e6cd1145acf7849e4a112976016b" prot="public" static="no">
        <name>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</name>
        <param><defname>type</defname></param>
        <param><defname>value</defname></param>
        <initializer>template &lt;&gt; \
  class BuiltInDefaultValue&lt;type&gt; { \
   public: \
    static bool Exists() { return true; } \
    static type Get() { return value; } \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="143" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>implements<sp/>some<sp/>commonly<sp/>used<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32_WCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-internal-utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_TYPE_TRAITS_<sp/><sp/>//<sp/>Defined<sp/>by<sp/>gtest-port.h<sp/>via<sp/>gmock-port.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>implement<sp/>an<sp/>action<sp/>Foo,<sp/>define:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>a<sp/>class<sp/>FooAction<sp/>that<sp/>implements<sp/>the<sp/>ActionInterface<sp/>interface,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>a<sp/>factory<sp/>function<sp/>that<sp/>creates<sp/>an<sp/>Action<sp/>object<sp/>from<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>FooAction*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>two-level<sp/>delegation<sp/>design<sp/>follows<sp/>that<sp/>of<sp/>Matcher,<sp/>providing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>consistency<sp/>for<sp/>extension<sp/>developers.<sp/><sp/>It<sp/>also<sp/>eases<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>management<sp/>as<sp/>Action<sp/>objects<sp/>can<sp/>now<sp/>be<sp/>copied<sp/>like<sp/>plain<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F2&gt;</highlight></codeline>
<codeline lineno="67" refid="classtesting_1_1internal_1_1_action_adaptor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_action_adaptor" kindref="compound">ActionAdaptor</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BuiltInDefaultValueGetter&lt;T,<sp/>true&gt;::Get()<sp/>returns<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default-constructed<sp/>T<sp/>value.<sp/><sp/>BuiltInDefaultValueGetter&lt;T,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false&gt;::Get()<sp/>crashes<sp/>with<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>primary<sp/>template<sp/>is<sp/>used<sp/>when<sp/>kDefaultConstructible<sp/>is<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kDefaultConstructible&gt;</highlight></codeline>
<codeline lineno="75" refid="structtesting_1_1internal_1_1_built_in_default_value_getter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_built_in_default_value_getter" kindref="compound">BuiltInDefaultValueGetter</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>Get()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T();<sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="79" refid="structtesting_1_1internal_1_1_built_in_default_value_getter_3_01_t_00_01false_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_built_in_default_value_getter" kindref="compound">BuiltInDefaultValueGetter</ref>&lt;T,<sp/>false&gt;<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>Get()<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Default<sp/>action<sp/>undefined<sp/>for<sp/>the<sp/>function<sp/>return<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::Invalid&lt;T&gt;();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>statement<sp/>will<sp/>never<sp/>be<sp/>reached,<sp/>but<sp/>is<sp/>required<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>for<sp/>this<sp/>function<sp/>to<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>BuiltInDefaultValue&lt;T&gt;::Get()<sp/>returns<sp/>the<sp/>&quot;built-in&quot;<sp/>default<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>type<sp/>T,<sp/>which<sp/>is<sp/>NULL<sp/>when<sp/>T<sp/>is<sp/>a<sp/>raw<sp/>pointer<sp/>type,<sp/>0<sp/>when<sp/>T<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>numeric<sp/>type,<sp/>false<sp/>when<sp/>T<sp/>is<sp/>bool,<sp/>or<sp/>&quot;&quot;<sp/>when<sp/>T<sp/>is<sp/>string<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string.<sp/><sp/>In<sp/>addition,<sp/>in<sp/>C++11<sp/>and<sp/>above,<sp/>it<sp/>turns<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default-constructed<sp/>T<sp/>value<sp/>if<sp/>T<sp/>is<sp/>default<sp/>constructible.<sp/><sp/>For<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>type<sp/>T,<sp/>the<sp/>built-in<sp/>default<sp/>T<sp/>value<sp/>is<sp/>undefined,<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>will<sp/>abort<sp/>the<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="97" refid="classtesting_1_1internal_1_1_built_in_default_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">BuiltInDefaultValue</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_TYPE_TRAITS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>returns<sp/>true<sp/>iff<sp/>type<sp/>T<sp/>has<sp/>a<sp/>built-in<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Exists()<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::std::is_default_constructible&lt;T&gt;::value;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>Get()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_built_in_default_value_getter" kindref="compound">BuiltInDefaultValueGetter</ref>&lt;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>::std::is_default_constructible&lt;T&gt;::value&gt;::Get();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>GTEST_HAS_STD_TYPE_TRAITS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>returns<sp/>true<sp/>iff<sp/>type<sp/>T<sp/>has<sp/>a<sp/>built-in<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Exists()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>Get()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_built_in_default_value_getter" kindref="compound">BuiltInDefaultValueGetter&lt;T, false&gt;::Get</ref>();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_TYPE_TRAITS_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>partial<sp/>specialization<sp/>says<sp/>that<sp/>we<sp/>use<sp/>the<sp/>same<sp/>built-in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default<sp/>value<sp/>for<sp/>T<sp/>and<sp/>const<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="126" refid="classtesting_1_1internal_1_1_built_in_default_value_3_01const_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">BuiltInDefaultValue</ref>&lt;const<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Exists()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">BuiltInDefaultValue&lt;T&gt;::Exists</ref>();<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>Get()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">BuiltInDefaultValue&lt;T&gt;::Get</ref>();<sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>partial<sp/>specialization<sp/>defines<sp/>the<sp/>default<sp/>values<sp/>for<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="135" refid="classtesting_1_1internal_1_1_built_in_default_value_3_01_t_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">BuiltInDefaultValue</ref>&lt;T*&gt;<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Exists()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/>Get()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>specializations<sp/>define<sp/>the<sp/>default<sp/>values<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>types<sp/>we<sp/>care<sp/>about.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(type,<sp/>value)<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/>class<sp/>BuiltInDefaultValue&lt;type&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/>public:<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>bool<sp/>Exists()<sp/>{<sp/>return<sp/>true;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>type<sp/>Get()<sp/>{<sp/>return<sp/>value;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/>);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(::std::string,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>no<sp/>need<sp/>for<sp/>a<sp/>default<sp/>action<sp/>for<sp/>signed<sp/>wchar_t,<sp/>as<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>the<sp/>same<sp/>as<sp/>wchar_t<sp/>for<sp/>gcc,<sp/>and<sp/>invalid<sp/>for<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>also<sp/>no<sp/>need<sp/>for<sp/>a<sp/>default<sp/>action<sp/>for<sp/>unsigned<sp/>wchar_t,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>type<sp/>is<sp/>the<sp/>same<sp/>as<sp/>unsigned<sp/>int<sp/>for<sp/>gcc,<sp/>and<sp/>invalid<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GMOCK_WCHAR_T_IS_NATIVE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">,<sp/>0U);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>0U);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">,<sp/>0);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>0U);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>0UL);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>0L);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(UInt64,<sp/>0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(Int64,<sp/>0);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>an<sp/>unexpected<sp/>function<sp/>call<sp/>is<sp/>encountered,<sp/>Google<sp/>Mock<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>let<sp/>it<sp/>return<sp/>a<sp/>default<sp/>value<sp/>if<sp/>the<sp/>user<sp/>has<sp/>specified<sp/>one<sp/>for<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>type,<sp/>or<sp/>if<sp/>the<sp/>return<sp/>type<sp/>has<sp/>a<sp/>built-in<sp/>default<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise<sp/>Google<sp/>Mock<sp/>won&apos;t<sp/>know<sp/>what<sp/>value<sp/>to<sp/>return<sp/>and<sp/>will<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>abort<sp/>the<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>DefaultValue&lt;T&gt;<sp/>class<sp/>allows<sp/>a<sp/>user<sp/>to<sp/>specify<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>default<sp/>value<sp/>for<sp/>a<sp/>type<sp/>T<sp/>that<sp/>is<sp/>both<sp/>copyable<sp/>and<sp/>publicly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destructible<sp/>(i.e.<sp/>anything<sp/>that<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>function<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type).<sp/><sp/>The<sp/>usage<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Sets<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T<sp/>to<sp/>be<sp/>foo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>DefaultValue&lt;T&gt;::Set(foo);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="200" refid="classtesting_1_1_default_value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue</ref><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T;<sp/>requires<sp/>T<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copy-constructable<sp/>and<sp/>have<sp/>a<sp/>public<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(T<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>producer_;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>producer_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FixedValueProducer(x);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Provides<sp/>a<sp/>factory<sp/>function<sp/>to<sp/>be<sp/>called<sp/>to<sp/>generate<sp/>the<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>can<sp/>be<sp/>used<sp/>even<sp/>if<sp/>T<sp/>is<sp/>only<sp/>move-constructible,<sp/>but<sp/>it<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>limited<sp/>to<sp/>that<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>(*FactoryFunction)();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetFactory(FactoryFunction<sp/>factory)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>producer_;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>producer_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FactoryValueProducer(factory);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unsets<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>producer_;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>producer_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>user<sp/>has<sp/>set<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSet()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>producer_<sp/>!=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>T<sp/>has<sp/>a<sp/>default<sp/>return<sp/>value<sp/>set<sp/>by<sp/>the<sp/>user<sp/>or<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exists<sp/>a<sp/>built-in<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Exists()<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSet()<sp/>||<sp/><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">internal::BuiltInDefaultValue&lt;T&gt;::Exists</ref>();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T<sp/>if<sp/>the<sp/>user<sp/>has<sp/>set<sp/>one;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>returns<sp/>the<sp/>built-in<sp/>default<sp/>value.<sp/>Requires<sp/>that<sp/>Exists()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>true,<sp/>which<sp/>ensures<sp/>that<sp/>the<sp/>return<sp/>value<sp/>is<sp/>well-defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/>Get()<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>producer_<sp/>==<sp/>NULL<sp/>?</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">internal::BuiltInDefaultValue&lt;T&gt;::Get</ref>()<sp/>:<sp/>producer_-&gt;Produce();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ValueProducer<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ValueProducer()<sp/>{}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T<sp/>Produce()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FixedValueProducer<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueProducer<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FixedValueProducer(T<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T<sp/>Produce()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(FixedValueProducer);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FactoryValueProducer<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueProducer<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FactoryValueProducer(FactoryFunction<sp/>factory)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>factory_(factory)<sp/>{}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T<sp/>Produce()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factory_();<sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FactoryFunction<sp/>factory_;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(FactoryValueProducer);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ValueProducer*<sp/>producer_;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>partial<sp/>specialization<sp/>allows<sp/>a<sp/>user<sp/>to<sp/>set<sp/>default<sp/>values<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>reference<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="275" refid="classtesting_1_1_default_value_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue</ref>&lt;T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(T&amp;<sp/>x)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>address_<sp/>=<sp/>&amp;x;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unsets<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>address_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>user<sp/>has<sp/>set<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSet()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>address_<sp/>!=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>T<sp/>has<sp/>a<sp/>default<sp/>return<sp/>value<sp/>set<sp/>by<sp/>the<sp/>user<sp/>or<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exists<sp/>a<sp/>built-in<sp/>default<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Exists()<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsSet()<sp/>||<sp/><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">internal::BuiltInDefaultValue&lt;T&amp;&gt;::Exists</ref>();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T&amp;<sp/>if<sp/>the<sp/>user<sp/>has<sp/>set<sp/>one;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>returns<sp/>the<sp/>built-in<sp/>default<sp/>value<sp/>if<sp/>there<sp/>is<sp/>one;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>aborts<sp/>the<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T&amp;<sp/>Get()<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>address_<sp/>==<sp/>NULL<sp/>?</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_built_in_default_value" kindref="compound">internal::BuiltInDefaultValue&lt;T&amp;&gt;::Get</ref>()<sp/>:<sp/>*address_;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T*<sp/>address_;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">};</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>specialization<sp/>allows<sp/>DefaultValue&lt;void&gt;::Get()<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="311" refid="classtesting_1_1_default_value_3_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue</ref>&lt;void&gt;<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Exists()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Get()<sp/>{}</highlight></codeline>
<codeline lineno="315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Points<sp/>to<sp/>the<sp/>user-set<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue&lt;T&gt;::ValueProducer</ref>*<sp/><ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue&lt;T&gt;::producer_</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Points<sp/>to<sp/>the<sp/>user-set<sp/>default<sp/>value<sp/>for<sp/>type<sp/>T&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">T*<sp/><ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue&lt;T&amp;&gt;::address_</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>this<sp/>interface<sp/>to<sp/>define<sp/>an<sp/>action<sp/>for<sp/>function<sp/>type<sp/>F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="327" refid="classtesting_1_1_action_interface" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>action.<sp/><sp/>This<sp/>method<sp/>is<sp/>not<sp/>const,<sp/>as<sp/>in<sp/>general<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>action<sp/>can<sp/>have<sp/>side<sp/>effects<sp/>and<sp/>be<sp/>stateful.<sp/><sp/>For<sp/>example,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>get-the-next-element-from-the-collection<sp/>action<sp/>will<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remember<sp/>the<sp/>current<sp/>element.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">};</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Action&lt;F&gt;<sp/>is<sp/>a<sp/>copyable<sp/>and<sp/>IMMUTABLE<sp/>(except<sp/>by<sp/>assignment)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>that<sp/>represents<sp/>an<sp/>action<sp/>to<sp/>be<sp/>taken<sp/>when<sp/>a<sp/>mock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>type<sp/>F<sp/>is<sp/>called.<sp/><sp/>The<sp/>implementation<sp/>of<sp/>Action&lt;T&gt;<sp/>is<sp/>just<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>linked_ptr<sp/>to<sp/>const<sp/>ActionInterface&lt;T&gt;,<sp/>so<sp/>copying<sp/>is<sp/>fairly<sp/>cheap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>inherit<sp/>from<sp/>Action!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>view<sp/>an<sp/>object<sp/>implementing<sp/>ActionInterface&lt;F&gt;<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>concrete<sp/>action<sp/>(including<sp/>its<sp/>current<sp/>state),<sp/>and<sp/>an<sp/>Action&lt;F&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>as<sp/>a<sp/>handle<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="355" refid="classtesting_1_1_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_action" kindref="compound">Action</ref><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>null<sp/>Action.<sp/><sp/>Needed<sp/>for<sp/>storing<sp/>Action<sp/>objects<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>STL<sp/>containers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>()<sp/>:<sp/>impl_(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>Action<sp/>from<sp/>its<sp/>implementation.<sp/><sp/>A<sp/>NULL<sp/>impl<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>represent<sp/>the<sp/>&quot;do-default&quot;<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>(<ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface&lt;F&gt;</ref>*<sp/>impl)<sp/>:<sp/>impl_(impl)<sp/>{}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&amp;<sp/>action)<sp/>:<sp/>impl_(action.impl_)<sp/>{}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>constructor<sp/>allows<sp/>us<sp/>to<sp/>turn<sp/>an<sp/>Action&lt;Func&gt;<sp/>object<sp/>into<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Action&lt;F&gt;,<sp/>as<sp/>long<sp/>as<sp/>F&apos;s<sp/>arguments<sp/>can<sp/>be<sp/>implicitly<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>Func&apos;s<sp/>and<sp/>Func&apos;s<sp/>return<sp/>type<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>F&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;Func&gt;</ref>&amp;<sp/>action);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>is<sp/>the<sp/>DoDefault()<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsDoDefault()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_.get()<sp/>==<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>action.<sp/><sp/>Note<sp/>that<sp/>this<sp/>method<sp/>is<sp/>const<sp/>even<sp/>though</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>corresponding<sp/>method<sp/>in<sp/>ActionInterface<sp/>is<sp/>not.<sp/><sp/>The<sp/>reason</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>that<sp/>a<sp/>const<sp/>Action&lt;F&gt;<sp/>means<sp/>that<sp/>it<sp/>cannot<sp/>be<sp/>re-bound<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>another<sp/>concrete<sp/>action,<sp/>not<sp/>that<sp/>the<sp/>concrete<sp/>action<sp/>it<sp/>binds<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>change<sp/>state.<sp/><sp/>(Think<sp/>of<sp/>the<sp/>difference<sp/>between<sp/>a<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>and<sp/>a<sp/>pointer<sp/>to<sp/>const.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::Assert(</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!IsDoDefault(),<sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;You<sp/>are<sp/>using<sp/>DoDefault()<sp/>inside<sp/>a<sp/>composite<sp/>action<sp/>like<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DoAll()<sp/>or<sp/>WithArgs().<sp/><sp/>This<sp/>is<sp/>not<sp/>supported<sp/>for<sp/>technical<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;reasons.<sp/><sp/>Please<sp/>instead<sp/>spell<sp/>out<sp/>the<sp/>default<sp/>action,<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;assign<sp/>the<sp/>default<sp/>action<sp/>to<sp/>an<sp/>Action<sp/>variable<sp/>and<sp/>use<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;the<sp/>variable<sp/>in<sp/>various<sp/>places.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;Perform(args);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F2&gt;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_action_adaptor" kindref="compound">internal::ActionAdaptor</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">internal::linked_ptr&lt;ActionInterface&lt;F&gt;</ref><sp/>&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">};</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>PolymorphicAction<sp/>class<sp/>template<sp/>makes<sp/>it<sp/>easy<sp/>to<sp/>implement<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>polymorphic<sp/>action<sp/>(i.e.<sp/>an<sp/>action<sp/>that<sp/>can<sp/>be<sp/>used<sp/>in<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>of<sp/>than<sp/>one<sp/>type,<sp/>e.g.<sp/>Return()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>define<sp/>a<sp/>polymorphic<sp/>action,<sp/>a<sp/>user<sp/>first<sp/>provides<sp/>a<sp/>COPYABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementation<sp/>class<sp/>that<sp/>has<sp/>a<sp/>Perform()<sp/>method<sp/>template:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>class<sp/>FooAction<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>Result,<sp/>typename<sp/>ArgumentTuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Result<sp/>Perform(const<sp/>ArgumentTuple&amp;<sp/>args)<sp/>const<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Processes<sp/>the<sp/>arguments<sp/>and<sp/>returns<sp/>a<sp/>result,<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>tr1::get&lt;N&gt;(args)<sp/>to<sp/>get<sp/>the<sp/>N-th<sp/>(0-based)<sp/>argument<sp/>in<sp/>the<sp/>tuple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Then<sp/>the<sp/>user<sp/>creates<sp/>the<sp/>polymorphic<sp/>action<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MakePolymorphicAction(object)<sp/>where<sp/>object<sp/>has<sp/>type<sp/>FooAction.<sp/><sp/>See</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>definition<sp/>of<sp/>Return(void)<sp/>and<sp/>SetArgumentPointee&lt;N&gt;(value)<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>complete<sp/>examples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl&gt;</highlight></codeline>
<codeline lineno="427" refid="classtesting_1_1_polymorphic_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Impl&amp;<sp/>impl)<sp/>:<sp/>impl_(impl)<sp/>{}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MonomorphicImpl&lt;F&gt;(impl_));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MonomorphicImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F&gt;<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>MonomorphicImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Impl&amp;<sp/>impl)<sp/>:<sp/>impl_(impl)<sp/>{}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_.template<sp/>Perform&lt;Result&gt;(args);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl<sp/>impl_;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_ASSIGN_(MonomorphicImpl);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>Impl<sp/>impl_;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>Action<sp/>from<sp/>its<sp/>implementation<sp/>and<sp/>returns<sp/>it.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>created<sp/>Action<sp/>object<sp/>owns<sp/>the<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref><sp/>MakeAction(<ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface&lt;F&gt;</ref>*<sp/>impl)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(impl);</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>polymorphic<sp/>action<sp/>from<sp/>its<sp/>implementation.<sp/><sp/>This<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>easier<sp/>to<sp/>use<sp/>than<sp/>the<sp/>PolymorphicAction&lt;Impl&gt;<sp/>constructor<sp/>as<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>require<sp/>you<sp/>to<sp/>explicitly<sp/>write<sp/>the<sp/>template<sp/>argument,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MakePolymorphicAction(foo);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>vs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>PolymorphicAction&lt;TypeOfFoo&gt;(foo);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Impl&gt;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;Impl&gt;</ref><sp/>MakePolymorphicAction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Impl&amp;<sp/>impl)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;Impl&gt;</ref>(impl);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>an<sp/>Action&lt;F2&gt;<sp/>object<sp/>to<sp/>pose<sp/>as<sp/>an<sp/>Action&lt;F1&gt;,<sp/>as<sp/>long<sp/>as<sp/>F2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>F1<sp/>are<sp/>compatible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F2&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ActionAdaptor<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F1&gt;<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F1&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F1&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ActionAdaptor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F2&gt;</ref>&amp;<sp/>from)<sp/>:<sp/>impl_(from.impl_)<sp/>{}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;Perform(args);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">internal::linked_ptr&lt;ActionInterface&lt;F2&gt;</ref><sp/>&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(ActionAdaptor);</highlight></codeline>
<codeline lineno="499"><highlight class="normal">};</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>struct<sp/>to<sp/>specialize<sp/>ReturnAction<sp/>to<sp/>execute<sp/>a<sp/>move<sp/>instead<sp/>of<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>return.<sp/>Useful<sp/>for<sp/>move-only<sp/>types,<sp/>but<sp/>could<sp/>be<sp/>used<sp/>on<sp/>any<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="504" refid="structtesting_1_1internal_1_1_by_move_wrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_by_move_wrapper" kindref="compound">ByMoveWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_by_move_wrapper" kindref="compound">ByMoveWrapper</ref>(T<sp/>value)<sp/>:<sp/>payload(internal::move(value))<sp/>{}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>T<sp/>payload;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">};</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>Return(x)<sp/>action,<sp/>which<sp/>can<sp/>be<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>any<sp/>function<sp/>that<sp/>returns<sp/>the<sp/>type<sp/>of<sp/>x,<sp/>regardless<sp/>of<sp/>the<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>The<sp/>value<sp/>passed<sp/>into<sp/>Return<sp/>must<sp/>be<sp/>converted<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function&lt;F&gt;::Result<sp/>when<sp/>this<sp/>action<sp/>is<sp/>cast<sp/>to<sp/>Action&lt;F&gt;<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>when<sp/>that<sp/>action<sp/>is<sp/>performed.<sp/>This<sp/>is<sp/>important<sp/>in<sp/>scenarios<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MOCK_METHOD1(Method,<sp/>T(U));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Foo<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>X<sp/>x(&amp;foo);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(mock,<sp/>Method(_)).WillOnce(Return(x));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>example<sp/>above<sp/>the<sp/>variable<sp/>x<sp/>holds<sp/>reference<sp/>to<sp/>foo<sp/>which<sp/>leaves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>scope<sp/>and<sp/>gets<sp/>destroyed.<sp/><sp/>If<sp/>copying<sp/>X<sp/>just<sp/>copies<sp/>a<sp/>reference<sp/>to<sp/>foo,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>copy<sp/>will<sp/>be<sp/>left<sp/>with<sp/>a<sp/>hanging<sp/>reference.<sp/><sp/>If<sp/>conversion<sp/>to<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>makes<sp/>a<sp/>copy<sp/>of<sp/>foo,<sp/>the<sp/>above<sp/>code<sp/>is<sp/>safe.<sp/>To<sp/>support<sp/>that<sp/>scenario,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>the<sp/>type<sp/>conversion<sp/>happens<sp/>inside<sp/>the<sp/>EXPECT_CALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>statement,<sp/>and<sp/>conversion<sp/>of<sp/>the<sp/>result<sp/>of<sp/>Return<sp/>to<sp/>Action&lt;T(U)&gt;<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>good<sp/>place<sp/>for<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="534" refid="classtesting_1_1internal_1_1_return_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_return_action" kindref="compound">ReturnAction</ref><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>ReturnAction<sp/>object<sp/>from<sp/>the<sp/>value<sp/>to<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;value&apos;<sp/>is<sp/>passed<sp/>by<sp/>value<sp/>instead<sp/>of<sp/>by<sp/>const<sp/>reference<sp/>in<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>allow<sp/>Return(&quot;string<sp/>literal&quot;)<sp/>to<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_action" kindref="compound">ReturnAction</ref>(R<sp/>value)<sp/>:<sp/>value_(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>R(internal::move(value)))<sp/>{}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>allows<sp/>Return(x)<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>ANY<sp/>function<sp/>that<sp/>returns<sp/>x&apos;s<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assert<sp/>statement<sp/>belongs<sp/>here<sp/>because<sp/>this<sp/>is<sp/>the<sp/>best<sp/>place<sp/>to<sp/>verify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conditions<sp/>on<sp/>F.<sp/>It<sp/>produces<sp/>the<sp/>clearest<sp/>error<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>most<sp/>compilers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Impl<sp/>really<sp/>belongs<sp/>in<sp/>this<sp/>scope<sp/>as<sp/>a<sp/>local<sp/>class<sp/>but<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>MSVC<sp/>produces<sp/>duplicate<sp/>symbols<sp/>in<sp/>different<sp/>translation<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case.<sp/>Until<sp/>MS<sp/>fixes<sp/>that<sp/>bug<sp/>we<sp/>put<sp/>Impl<sp/>into<sp/>the<sp/>class<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>put<sp/>the<sp/>typedef<sp/>both<sp/>here<sp/>(for<sp/>use<sp/>in<sp/>assert<sp/>statement)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>Impl<sp/>class.<sp/>But<sp/>both<sp/>definitions<sp/>must<sp/>be<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_COMPILE_ASSERT_(</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="structtesting_1_1internal_1_1is__reference" kindref="compound">is_reference&lt;Result&gt;::value</ref>,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_ReturnRef_instead_of_Return_to_return_a_reference);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;R,<sp/>F&gt;(value_));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Return(x)<sp/>action<sp/>for<sp/>a<sp/>particular<sp/>function<sp/>type<sp/>F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F&gt;<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>implicit<sp/>cast<sp/>is<sp/>necessary<sp/>when<sp/>Result<sp/>has<sp/>more<sp/>than<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>single-argument<sp/>constructor<sp/>(e.g.<sp/>Result<sp/>is<sp/>std::vector&lt;int&gt;)<sp/>and<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>type<sp/>conversion<sp/>operator<sp/>template.<sp/><sp/>In<sp/>that<sp/>case,<sp/>value_(value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>won&apos;t<sp/>compile<sp/>as<sp/>the<sp/>compiler<sp/>doesn&apos;t<sp/>known<sp/>which<sp/>constructor<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>to<sp/>call.<sp/><sp/>ImplicitCast_<sp/>forces<sp/>the<sp/>compiler<sp/>to<sp/>convert<sp/>R<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>without<sp/>considering<sp/>explicit<sp/>constructors,<sp/>thus<sp/>resolving<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ambiguity.<sp/>value_<sp/>is<sp/>then<sp/>initialized<sp/>using<sp/>its<sp/>copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;R&gt;</ref>&amp;<sp/>value)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_before_cast_(*value),</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_(ImplicitCast_&lt;Result&gt;(value_before_cast_))<sp/>{}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_COMPILE_ASSERT_(!<ref refid="structtesting_1_1internal_1_1is__reference" kindref="compound">is_reference&lt;Result&gt;::value</ref>,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result_cannot_be_a_reference_type);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>save<sp/>the<sp/>value<sp/>before<sp/>casting<sp/>just<sp/>in<sp/>case<sp/>it<sp/>is<sp/>being<sp/>cast<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wrapper<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>R<sp/>value_before_cast_;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>Result<sp/>value_;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(Impl);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Partially<sp/>specialize<sp/>for<sp/>ByMoveWrapper.<sp/>This<sp/>version<sp/>of<sp/>ReturnAction<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>its<sp/>contents<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R_,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl&lt;ByMoveWrapper&lt;R_&gt;,<sp/>F&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F&gt;<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;R&gt;</ref>&amp;<sp/>wrapper)</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>performed_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>wrapper_(wrapper)<sp/>{}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_CHECK_(!performed_)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>ByMove()<sp/>action<sp/>should<sp/>only<sp/>be<sp/>performed<sp/>once.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>performed_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::move(wrapper_-&gt;payload);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>performed_;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;R&gt;</ref><sp/>wrapper_;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_ASSIGN_(Impl);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;R&gt;</ref><sp/>value_;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_return_action" kindref="compound">ReturnAction</ref>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal">};</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>ReturnNull()<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="classtesting_1_1internal_1_1_return_null_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_return_null_action" kindref="compound">ReturnNullAction</ref><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allows<sp/>ReturnNull()<sp/>to<sp/>be<sp/>used<sp/>in<sp/>any<sp/>pointer-returning<sp/>function.<sp/>In<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>enforced<sp/>by<sp/>returning<sp/>nullptr,<sp/>and<sp/>in<sp/>non-C++11<sp/>by<sp/>asserting<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>type<sp/>on<sp/>compile<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_LANG_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_COMPILE_ASSERT_(<ref refid="structtesting_1_1internal_1_1is__pointer" kindref="compound">internal::is_pointer&lt;Result&gt;::value</ref>,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReturnNull_can_be_used_to_return_a_pointer_only);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_LANG_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal">};</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Return()<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="classtesting_1_1internal_1_1_return_void_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_return_void_action" kindref="compound">ReturnVoidAction</ref><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allows<sp/>Return()<sp/>to<sp/>be<sp/>used<sp/>in<sp/>any<sp/>void-returning<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1_compile_assert_types_equal" kindref="compound">CompileAssertTypesEqual&lt;void, Result&gt;</ref>();</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal">};</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>ReturnRef(x)<sp/>action,<sp/>which<sp/>can<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>any<sp/>function<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>type<sp/>of<sp/>x,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regardless<sp/>of<sp/>the<sp/>argument<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="654" refid="classtesting_1_1internal_1_1_return_ref_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_return_ref_action" kindref="compound">ReturnRefAction</ref><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>ReturnRefAction<sp/>object<sp/>from<sp/>the<sp/>reference<sp/>to<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_ref_action" kindref="compound">ReturnRefAction</ref>(T&amp;<sp/>ref)<sp/>:<sp/>ref_(ref)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>allows<sp/>ReturnRef(x)<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>ANY<sp/>function<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>x&apos;s<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>is<sp/>a<sp/>reference.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>catches<sp/>the<sp/>user<sp/>error<sp/>of<sp/>using<sp/>ReturnRef(x)<sp/>when<sp/>Return(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>used,<sp/>and<sp/>generates<sp/>some<sp/>helpful<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_COMPILE_ASSERT_(<ref refid="structtesting_1_1internal_1_1is__reference" kindref="compound">internal::is_reference&lt;Result&gt;::value</ref>,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_Return_instead_of_ReturnRef_to_return_a_value);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;F&gt;(ref_));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>ReturnRef(x)<sp/>action<sp/>for<sp/>a<sp/>particular<sp/>function<sp/>type<sp/>F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F&gt;<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(T&amp;<sp/>ref)<sp/>:<sp/>ref_(ref)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ref_;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>T&amp;<sp/>ref_;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_ASSIGN_(Impl);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>T&amp;<sp/>ref_;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_return_ref_action" kindref="compound">ReturnRefAction</ref>);</highlight></codeline>
<codeline lineno="695"><highlight class="normal">};</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>ReturnRefOfCopy(x)<sp/>action,<sp/>which<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>any<sp/>function<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>type<sp/>of<sp/>x,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regardless<sp/>of<sp/>the<sp/>argument<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="701" refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" kindref="compound">ReturnRefOfCopyAction</ref><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>ReturnRefOfCopyAction<sp/>object<sp/>from<sp/>the<sp/>reference<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" kindref="compound">ReturnRefOfCopyAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>allows<sp/>ReturnRefOfCopy(x)<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>ANY<sp/>function<sp/>that<sp/>returns<sp/>a<sp/>reference<sp/>to<sp/>x&apos;s<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>the<sp/>function<sp/>return<sp/>type<sp/>is<sp/>a<sp/>reference.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>catches<sp/>the<sp/>user<sp/>error<sp/>of<sp/>using<sp/>ReturnRefOfCopy(x)<sp/>when<sp/>Return(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>used,<sp/>and<sp/>generates<sp/>some<sp/>helpful<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_COMPILE_ASSERT_(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1is__reference" kindref="compound">internal::is_reference&lt;Result&gt;::value</ref>,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_Return_instead_of_ReturnRefOfCopy_to_return_a_value);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;F&gt;(value_));</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>ReturnRefOfCopy(x)<sp/>action<sp/>for<sp/>a<sp/>particular<sp/>function<sp/>type<sp/>F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F&gt;<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_ASSIGN_(Impl);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" kindref="compound">ReturnRefOfCopyAction</ref>);</highlight></codeline>
<codeline lineno="744"><highlight class="normal">};</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>polymorphic<sp/>DoDefault()<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="classtesting_1_1internal_1_1_do_default_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_do_default_action" kindref="compound">DoDefaultAction</ref><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>allows<sp/>DoDefault()<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>used<sp/>in<sp/>any<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(NULL);<sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal">};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>Assign<sp/>action<sp/>to<sp/>set<sp/>a<sp/>given<sp/>pointer<sp/>referent<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment">//<sp/>particular<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="758" refid="classtesting_1_1internal_1_1_assign_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_assign_action" kindref="compound">AssignAction</ref><sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_assign_action" kindref="compound">AssignAction</ref>(T1*<sp/>ptr,<sp/>T2<sp/>value)<sp/>:<sp/>ptr_(ptr),<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/></highlight><highlight class="comment">/*<sp/>args<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>*ptr_<sp/>=<sp/>value_;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>T1*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ptr_;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2<sp/>value_;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_assign_action" kindref="compound">AssignAction</ref>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal">};</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>SetErrnoAndReturn<sp/>action<sp/>to<sp/>simulate<sp/>return<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>various<sp/>system<sp/>calls<sp/>and<sp/>libc<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="779" refid="classtesting_1_1internal_1_1_set_errno_and_return_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_set_errno_and_return_action" kindref="compound">SetErrnoAndReturnAction</ref><sp/>{</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_set_errno_and_return_action" kindref="compound">SetErrnoAndReturnAction</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errno_value,<sp/>T<sp/>result)</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>errno_(errno_value),</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_(result)<sp/>{}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/></highlight><highlight class="comment">/*<sp/>args<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>errno_;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errno_;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>result_;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_set_errno_and_return_action" kindref="compound">SetErrnoAndReturnAction</ref>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal">};</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>SetArgumentPointee&lt;N&gt;(x)<sp/>action<sp/>for<sp/>any<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whose<sp/>N-th<sp/>argument<sp/>(0-based)<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>x&apos;s<sp/>type.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>parameter<sp/>kIsProto<sp/>is<sp/>true<sp/>iff<sp/>type<sp/>A<sp/>is<sp/>ProtocolMessage,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>proto2::Message,<sp/>or<sp/>a<sp/>sub-class<sp/>of<sp/>those.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>kIsProto&gt;</highlight></codeline>
<codeline lineno="804" refid="classtesting_1_1internal_1_1_set_argument_pointee_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">SetArgumentPointeeAction</ref><sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>action<sp/>that<sp/>sets<sp/>the<sp/>variable<sp/>pointed<sp/>to<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>N-th<sp/>function<sp/>argument<sp/>to<sp/>&apos;value&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">SetArgumentPointeeAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A&amp;<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1_compile_assert_types_equal" kindref="compound">CompileAssertTypesEqual&lt;void, Result&gt;</ref>();</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>*::testing::get&lt;N&gt;(args)<sp/>=<sp/>value_;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>value_;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">SetArgumentPointeeAction</ref>);</highlight></codeline>
<codeline lineno="820"><highlight class="normal">};</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Proto&gt;</highlight></codeline>
<codeline lineno="823" refid="classtesting_1_1internal_1_1_set_argument_pointee_action_3_01_n_00_01_proto_00_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">SetArgumentPointeeAction</ref>&lt;N,<sp/>Proto,<sp/>true&gt;<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>action<sp/>that<sp/>sets<sp/>the<sp/>variable<sp/>pointed<sp/>to<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>N-th<sp/>function<sp/>argument<sp/>to<sp/>&apos;proto&apos;.<sp/><sp/>Both<sp/>ProtocolMessage<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>proto2::Message<sp/>have<sp/>the<sp/>CopyFrom()<sp/>method,<sp/>so<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>implementation<sp/>works<sp/>for<sp/>both.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">SetArgumentPointeeAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Proto&amp;<sp/>proto)<sp/>:<sp/>proto_(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Proto)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>proto_-&gt;CopyFrom(proto);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1_compile_assert_types_equal" kindref="compound">CompileAssertTypesEqual&lt;void, Result&gt;</ref>();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>::testing::get&lt;N&gt;(args)-&gt;CopyFrom(*proto_);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">internal::linked_ptr&lt;Proto&gt;</ref><sp/>proto_;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">SetArgumentPointeeAction</ref>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal">};</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>InvokeWithoutArgs(f)<sp/>action.<sp/><sp/>The<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FunctionImpl<sp/>is<sp/>the<sp/>implementation<sp/>type<sp/>of<sp/>f,<sp/>which<sp/>can<sp/>be<sp/>either<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function<sp/>pointer<sp/>or<sp/>a<sp/>functor.<sp/><sp/>InvokeWithoutArgs(f)<sp/>can<sp/>be<sp/>used<sp/>as<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Action&lt;F&gt;<sp/>as<sp/>long<sp/>as<sp/>f&apos;s<sp/>type<sp/>is<sp/>compatible<sp/>with<sp/>F<sp/>(i.e.<sp/>f<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assigned<sp/>to<sp/>a<sp/>tr1::function&lt;F&gt;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionImpl&gt;</highlight></codeline>
<codeline lineno="851" refid="classtesting_1_1internal_1_1_invoke_without_args_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_invoke_without_args_action" kindref="compound">InvokeWithoutArgsAction</ref><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>makes<sp/>a<sp/>copy<sp/>of<sp/>function_impl<sp/>(either<sp/>a<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>or<sp/>a<sp/>functor).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_invoke_without_args_action" kindref="compound">InvokeWithoutArgsAction</ref>(FunctionImpl<sp/>function_impl)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>function_impl_(function_impl)<sp/>{}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allows<sp/>InvokeWithoutArgs(f)<sp/>to<sp/>be<sp/>used<sp/>as<sp/>any<sp/>action<sp/>whose<sp/>type<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compatible<sp/>with<sp/>f.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function_impl_();<sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>FunctionImpl<sp/>function_impl_;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_invoke_without_args_action" kindref="compound">InvokeWithoutArgsAction</ref>);</highlight></codeline>
<codeline lineno="867"><highlight class="normal">};</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>InvokeWithoutArgs(object_ptr,<sp/>&amp;Class::Method)<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MethodPtr&gt;</highlight></codeline>
<codeline lineno="871" refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" kindref="compound">InvokeMethodWithoutArgsAction</ref><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" kindref="compound">InvokeMethodWithoutArgsAction</ref>(Class*<sp/>obj_ptr,<sp/>MethodPtr<sp/>method_ptr)</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>obj_ptr_(obj_ptr),<sp/>method_ptr_(method_ptr)<sp/>{}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgumentTuple&gt;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(obj_ptr_-&gt;*method_ptr_)();</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>Class*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>obj_ptr_;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MethodPtr<sp/>method_ptr_;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" kindref="compound">InvokeMethodWithoutArgsAction</ref>);</highlight></codeline>
<codeline lineno="886"><highlight class="normal">};</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>IgnoreResult(action)<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="890" refid="classtesting_1_1internal_1_1_ignore_result_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_ignore_result_action" kindref="compound">IgnoreResultAction</ref><sp/>{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_ignore_result_action" kindref="compound">IgnoreResultAction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A&amp;<sp/>action)<sp/>:<sp/>action_(action)<sp/>{}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assert<sp/>statement<sp/>belongs<sp/>here<sp/>because<sp/>this<sp/>is<sp/>the<sp/>best<sp/>place<sp/>to<sp/>verify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conditions<sp/>on<sp/>F.<sp/>It<sp/>produces<sp/>the<sp/>clearest<sp/>error<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>most<sp/>compilers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Impl<sp/>really<sp/>belongs<sp/>in<sp/>this<sp/>scope<sp/>as<sp/>a<sp/>local<sp/>class<sp/>but<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>MSVC<sp/>produces<sp/>duplicate<sp/>symbols<sp/>in<sp/>different<sp/>translation<sp/>units</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>this<sp/>case.<sp/>Until<sp/>MS<sp/>fixes<sp/>that<sp/>bug<sp/>we<sp/>put<sp/>Impl<sp/>into<sp/>the<sp/>class<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>put<sp/>the<sp/>typedef<sp/>both<sp/>here<sp/>(for<sp/>use<sp/>in<sp/>assert<sp/>statement)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>Impl<sp/>class.<sp/>But<sp/>both<sp/>definitions<sp/>must<sp/>be<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Asserts<sp/>at<sp/>compile<sp/>time<sp/>that<sp/>F<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtesting_1_1internal_1_1_compile_assert_types_equal" kindref="compound">CompileAssertTypesEqual&lt;void, Result&gt;</ref>();</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;F&gt;(action_));</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F&gt;<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A&amp;<sp/>action)<sp/>:<sp/>action_(action)<sp/>{}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>action<sp/>and<sp/>ignores<sp/>its<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>action_.Perform(args);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>OriginalFunction<sp/>is<sp/>the<sp/>same<sp/>as<sp/>F<sp/>except<sp/>that<sp/>its<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>is<sp/>IgnoredValue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::MakeResultIgnoredValue</ref></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OriginalFunction;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;OriginalFunction&gt;</ref><sp/>action_;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_ASSIGN_(Impl);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A<sp/>action_;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_ignore_result_action" kindref="compound">IgnoreResultAction</ref>);</highlight></codeline>
<codeline lineno="940"><highlight class="normal">};</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>ReferenceWrapper&lt;T&gt;<sp/>object<sp/>represents<sp/>a<sp/>reference<sp/>to<sp/>type<sp/>T,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>can<sp/>be<sp/>either<sp/>const<sp/>or<sp/>not.<sp/><sp/>It<sp/>can<sp/>be<sp/>explicitly<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from,<sp/>and<sp/>implicitly<sp/>converted<sp/>to,<sp/>a<sp/>T&amp;.<sp/><sp/>Unlike<sp/>a<sp/>reference,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ReferenceWrapper&lt;T&gt;<sp/>can<sp/>be<sp/>copied<sp/>and<sp/>can<sp/>survive<sp/>template<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inference.<sp/><sp/>This<sp/>is<sp/>used<sp/>to<sp/>support<sp/>by-reference<sp/>arguments<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="comment">//<sp/>InvokeArgument&lt;N&gt;(...)<sp/>action.<sp/><sp/>The<sp/>idea<sp/>was<sp/>from<sp/>&quot;reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wrappers&quot;<sp/>in<sp/>tr1,<sp/>which<sp/>we<sp/>don&apos;t<sp/>have<sp/>in<sp/>our<sp/>source<sp/>tree<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="950" refid="classtesting_1_1internal_1_1_reference_wrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_reference_wrapper" kindref="compound">ReferenceWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>ReferenceWrapper&lt;T&gt;<sp/>object<sp/>from<sp/>a<sp/>T&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_reference_wrapper" kindref="compound">ReferenceWrapper</ref>(T&amp;<sp/>l_value)<sp/>:<sp/>pointer_(&amp;l_value)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allows<sp/>a<sp/>ReferenceWrapper&lt;T&gt;<sp/>object<sp/>to<sp/>be<sp/>implicitly<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>T&amp;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>T&amp;()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*pointer_;<sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>T*<sp/>pointer_;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">};</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allows<sp/>the<sp/>expression<sp/>ByRef(x)<sp/>to<sp/>be<sp/>printed<sp/>as<sp/>a<sp/>reference<sp/>to<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_reference_wrapper" kindref="compound">ReferenceWrapper&lt;T&gt;</ref>&amp;<sp/>ref,<sp/>::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>T&amp;<sp/>value<sp/>=<sp/>ref;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_universal_printer" kindref="compound">UniversalPrinter&lt;T&amp;&gt;::Print</ref>(value,<sp/>os);</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Does<sp/>two<sp/>actions<sp/>sequentially.<sp/><sp/>Used<sp/>for<sp/>implementing<sp/>the<sp/>DoAll(a1,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a2,<sp/>...)<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Action1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Action2&gt;</highlight></codeline>
<codeline lineno="972" refid="classtesting_1_1internal_1_1_do_both_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">DoBothAction</ref><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">DoBothAction</ref>(Action1<sp/>action1,<sp/>Action2<sp/>action2)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>action1_(action1),<sp/>action2_(action2)<sp/>{}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>type<sp/>conversion<sp/>operator<sp/>allows<sp/>DoAll(a1,<sp/>...,<sp/>a_n)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>used<sp/>in<sp/>ANY<sp/>function<sp/>of<sp/>compatible<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Impl&lt;F&gt;(action1_,<sp/>action2_));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>DoAll(...)<sp/>action<sp/>for<sp/>a<sp/>particular<sp/>function<sp/>type<sp/>F.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;F&gt;<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::MakeResultVoid</ref><sp/>VoidResult;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>Impl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;VoidResult&gt;</ref>&amp;<sp/>action1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>action2)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>action1_(action1),<sp/>action2_(action2)<sp/>{}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Result<sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>action1_.Perform(args);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>action2_.Perform(args);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;VoidResult&gt;</ref><sp/>action1_;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref><sp/>action2_;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>GTEST_DISALLOW_ASSIGN_(Impl);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>Action1<sp/>action1_;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>Action2<sp/>action2_;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">DoBothAction</ref>);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Unused<sp/>object<sp/>can<sp/>be<sp/>implicitly<sp/>constructed<sp/>from<sp/>ANY<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>handy<sp/>when<sp/>defining<sp/>actions<sp/>that<sp/>ignore<sp/>some<sp/>or<sp/>all<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>function<sp/>arguments.<sp/><sp/>For<sp/>example,<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MOCK_METHOD3(Foo,<sp/>double(const<sp/>string&amp;<sp/>label,<sp/>double<sp/>x,<sp/>double<sp/>y));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MOCK_METHOD3(Bar,<sp/>double(int<sp/>index,<sp/>double<sp/>x,<sp/>double<sp/>y));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>DistanceToOriginWithLabel(const<sp/>string&amp;<sp/>label,<sp/>double<sp/>x,<sp/>double<sp/>y)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>sqrt(x*x<sp/>+<sp/>y*y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>DistanceToOriginWithIndex(int<sp/>index,<sp/>double<sp/>x,<sp/>double<sp/>y)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>sqrt(x*x<sp/>+<sp/>y*y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXEPCT_CALL(mock,<sp/>Foo(&quot;abc&quot;,<sp/>_,<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(DistanceToOriginWithLabel));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXEPCT_CALL(mock,<sp/>Bar(5,<sp/>_,<sp/>_))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(Invoke(DistanceToOriginWithIndex));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>could<sp/>write</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>We<sp/>can<sp/>declare<sp/>any<sp/>uninteresting<sp/>argument<sp/>as<sp/>Unused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>double<sp/>DistanceToOrigin(Unused,<sp/>double<sp/>x,<sp/>double<sp/>y)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>sqrt(x*x<sp/>+<sp/>y*y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXEPCT_CALL(mock,<sp/>Foo(&quot;abc&quot;,<sp/>_,<sp/>_)).WillOnce(Invoke(DistanceToOrigin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXEPCT_CALL(mock,<sp/>Bar(5,<sp/>_,<sp/>_)).WillOnce(Invoke(DistanceToOrigin));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">internal::IgnoredValue</ref><sp/><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">Unused</ref>;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>constructor<sp/>allows<sp/>us<sp/>to<sp/>turn<sp/>an<sp/>Action&lt;From&gt;<sp/>object<sp/>into<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Action&lt;To&gt;,<sp/>as<sp/>long<sp/>as<sp/>To&apos;s<sp/>arguments<sp/>can<sp/>be<sp/>implicitly<sp/>converted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>From&apos;s<sp/>and<sp/>From&apos;s<sp/>return<sp/>type<sp/>cann<sp/>be<sp/>implicitly<sp/>converted<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From&gt;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;To&gt;::Action</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;From&gt;</ref>&amp;<sp/>from)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>impl_(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_adaptor" kindref="compound">internal::ActionAdaptor&lt;To, From&gt;</ref>(from))<sp/>{}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>&apos;value&apos;.<sp/><sp/>&apos;value&apos;<sp/>is<sp/>passed<sp/>by<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>const<sp/>reference<sp/>-<sp/>otherwise<sp/>Return(&quot;string<sp/>literal&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>trigger<sp/>a<sp/>compiler<sp/>error<sp/>about<sp/>using<sp/>array<sp/>as<sp/>initializer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_return_action" kindref="compound">internal::ReturnAction&lt;R&gt;</ref><sp/>Return(R<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_action" kindref="compound">internal::ReturnAction&lt;R&gt;</ref>(internal::move(value));</highlight></codeline>
<codeline lineno="1063"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;internal::ReturnNullAction&gt;</ref><sp/>ReturnNull()<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(<ref refid="classtesting_1_1internal_1_1_return_null_action" kindref="compound">internal::ReturnNullAction</ref>());</highlight></codeline>
<codeline lineno="1068"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>from<sp/>a<sp/>void<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;internal::ReturnVoidAction&gt;</ref><sp/>Return()<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(<ref refid="classtesting_1_1internal_1_1_return_void_action" kindref="compound">internal::ReturnVoidAction</ref>());</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>the<sp/>reference<sp/>to<sp/>a<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_ref_action" kindref="compound">internal::ReturnRefAction&lt;R&gt;</ref><sp/>ReturnRef(R&amp;<sp/>x)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_ref_action" kindref="compound">internal::ReturnRefAction&lt;R&gt;</ref>(x);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>the<sp/>reference<sp/>to<sp/>a<sp/>copy<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument.<sp/><sp/>The<sp/>copy<sp/>is<sp/>created<sp/>when<sp/>the<sp/>action<sp/>is<sp/>constructed<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lives<sp/>as<sp/>long<sp/>as<sp/>the<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" kindref="compound">internal::ReturnRefOfCopyAction&lt;R&gt;</ref><sp/>ReturnRefOfCopy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>R&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" kindref="compound">internal::ReturnRefOfCopyAction&lt;R&gt;</ref>(x);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modifies<sp/>the<sp/>parent<sp/>action<sp/>(a<sp/>Return()<sp/>action)<sp/>to<sp/>perform<sp/>a<sp/>move<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument<sp/>instead<sp/>of<sp/>a<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return(ByMove())<sp/>actions<sp/>can<sp/>only<sp/>be<sp/>executed<sp/>once<sp/>and<sp/>will<sp/>assert<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">//<sp/>invariant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><ref refid="structtesting_1_1internal_1_1_by_move_wrapper" kindref="compound">internal::ByMoveWrapper&lt;R&gt;</ref><sp/>ByMove(R<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_by_move_wrapper" kindref="compound">internal::ByMoveWrapper&lt;R&gt;</ref>(internal::move(x));</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>does<sp/>the<sp/>default<sp/>action<sp/>for<sp/>the<sp/>give<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_do_default_action" kindref="compound">internal::DoDefaultAction</ref><sp/>DoDefault()<sp/>{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_do_default_action" kindref="compound">internal::DoDefaultAction</ref>();</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>sets<sp/>the<sp/>variable<sp/>pointed<sp/>by<sp/>the<sp/>N-th</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(0-based)<sp/>function<sp/>argument<sp/>to<sp/>&apos;value&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>N,<sp/>T,<sp/><ref refid="structtesting_1_1internal_1_1_is_a_protocol_message" kindref="compound">internal::IsAProtocolMessage&lt;T&gt;::value</ref>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">SetArgPointee(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(<ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>N,<sp/>T,<sp/><ref refid="structtesting_1_1internal_1_1_is_a_protocol_message" kindref="compound">internal::IsAProtocolMessage&lt;T&gt;::value</ref>&gt;(x));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!((GTEST_GCC_VER_<sp/>&amp;&amp;<sp/>GTEST_GCC_VER_<sp/>&lt;<sp/>40000)<sp/>||<sp/>GTEST_OS_SYMBIAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>allows<sp/>SetArgPointee()<sp/>to<sp/>accept<sp/>a<sp/>string<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC<sp/>prior<sp/>to<sp/>the<sp/>version<sp/>4.0<sp/>and<sp/>Symbian<sp/>C++<sp/>compiler<sp/>cannot<sp/>distinguish</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>overload<sp/>from<sp/>the<sp/>templated<sp/>version<sp/>and<sp/>emit<sp/>a<sp/>compile<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction&lt;N, const char*, false&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">SetArgPointee(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(<ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>N,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">&gt;(p));</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction&lt;N, const wchar_t*, false&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">SetArgPointee(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(<ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>N,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">&gt;(p));</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>version<sp/>is<sp/>DEPRECATED.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt;</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>N,<sp/>T,<sp/><ref refid="structtesting_1_1internal_1_1_is_a_protocol_message" kindref="compound">internal::IsAProtocolMessage&lt;T&gt;::value</ref>&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">SetArgumentPointee(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(<ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>N,<sp/>T,<sp/><ref refid="structtesting_1_1internal_1_1_is_a_protocol_message" kindref="compound">internal::IsAProtocolMessage&lt;T&gt;::value</ref>&gt;(x));</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>sets<sp/>a<sp/>pointer<sp/>referent<sp/>to<sp/>a<sp/>given<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;internal::AssignAction&lt;T1, T2&gt;</ref><sp/>&gt;<sp/>Assign(T1*<sp/>ptr,<sp/>T2<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(<ref refid="classtesting_1_1internal_1_1_assign_action" kindref="compound">internal::AssignAction&lt;T1, T2&gt;</ref>(ptr,<sp/>val));</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>sets<sp/>errno<sp/>and<sp/>returns<sp/>the<sp/>appropriate<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;internal::SetErrnoAndReturnAction&lt;T&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">SetErrnoAndReturn(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errval,<sp/>T<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_set_errno_and_return_action" kindref="compound">internal::SetErrnoAndReturnAction&lt;T&gt;</ref>(errval,<sp/>result));</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Various<sp/>overloads<sp/>for<sp/>InvokeWithoutArgs().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>invokes<sp/>&apos;function_impl&apos;<sp/>with<sp/>no<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FunctionImpl&gt;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;internal::InvokeWithoutArgsAction&lt;FunctionImpl&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">InvokeWithoutArgs(FunctionImpl<sp/>function_impl)<sp/>{</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_invoke_without_args_action" kindref="compound">internal::InvokeWithoutArgsAction&lt;FunctionImpl&gt;</ref>(function_impl));</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>invokes<sp/>the<sp/>given<sp/>method<sp/>on<sp/>the<sp/>given<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>no<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Class,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MethodPtr&gt;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction&lt;internal::InvokeMethodWithoutArgsAction&lt;Class, MethodPtr&gt;</ref><sp/>&gt;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">InvokeWithoutArgs(Class*<sp/>obj_ptr,<sp/>MethodPtr<sp/>method_ptr)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePolymorphicAction(</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" kindref="compound">internal::InvokeMethodWithoutArgsAction&lt;Class, MethodPtr&gt;</ref>(</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>obj_ptr,<sp/>method_ptr));</highlight></codeline>
<codeline lineno="1181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>action<sp/>that<sp/>performs<sp/>an_action<sp/>and<sp/>throws<sp/>away<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>result.<sp/><sp/>In<sp/>other<sp/>words,<sp/>it<sp/>changes<sp/>the<sp/>return<sp/>type<sp/>of<sp/>an_action<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void.<sp/><sp/>an_action<sp/>MUST<sp/>NOT<sp/>return<sp/>void,<sp/>or<sp/>the<sp/>code<sp/>won&apos;t<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_ignore_result_action" kindref="compound">internal::IgnoreResultAction&lt;A&gt;</ref><sp/>IgnoreResult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>A&amp;<sp/>an_action)<sp/>{</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_ignore_result_action" kindref="compound">internal::IgnoreResultAction&lt;A&gt;</ref>(an_action);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>reference<sp/>wrapper<sp/>for<sp/>the<sp/>given<sp/>L-value.<sp/><sp/>If<sp/>necessary,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>can<sp/>explicitly<sp/>specify<sp/>the<sp/>type<sp/>of<sp/>the<sp/>reference.<sp/><sp/>For<sp/>example,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suppose<sp/>&apos;derived&apos;<sp/>is<sp/>an<sp/>object<sp/>of<sp/>type<sp/>Derived,<sp/>ByRef(derived)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>wrap<sp/>a<sp/>Derived&amp;.<sp/><sp/>If<sp/>you<sp/>want<sp/>to<sp/>wrap<sp/>a<sp/>const<sp/>Base&amp;<sp/>instead,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>Base<sp/>is<sp/>a<sp/>base<sp/>class<sp/>of<sp/>Derived,<sp/>just<sp/>write:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ByRef&lt;const<sp/>Base&gt;(derived)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_reference_wrapper" kindref="compound">internal::ReferenceWrapper&lt;T&gt;</ref><sp/>ByRef(T&amp;<sp/>l_value)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_reference_wrapper" kindref="compound">internal::ReferenceWrapper&lt;T&gt;</ref>(l_value);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h"/>
  </compounddef>
</doxygen>
