<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md_vendor_googletest_googlemock__r_e_a_d_m_e" kind="page">
    <compoundname>md_vendor_googletest_googlemock_README</compoundname>
    <title>Google Mock</title>
    <detaileddescription>
<para>The Google C++ mocking framework.</para><para><heading level="3">Overview</heading>
</para><para>Google&apos;s framework for writing and using C++ mock classes. It can help you derive better designs of your system and write better tests.</para><para>It is inspired by:</para><para><itemizedlist>
<listitem><para><ulink url="http://www.jmock.org/">jMock</ulink>,</para></listitem><listitem><para><ulink url="http://www.easymock.org/">EasyMock</ulink>, and</para></listitem><listitem><para><ulink url="http://code.google.com/p/hamcrest/">Hamcrest</ulink>,</para></listitem></itemizedlist>
</para><para>and designed with C++&apos;s specifics in mind.</para><para>Google mock:</para><para><itemizedlist>
<listitem><para>lets you create mock classes trivially using simple macros.</para></listitem><listitem><para>supports a rich set of matchers and actions.</para></listitem><listitem><para>handles unordered, partially ordered, or completely ordered expectations.</para></listitem><listitem><para>is extensible by users.</para></listitem></itemizedlist>
</para><para>We hope you find it useful!</para><para><heading level="3">Features</heading>
</para><para><itemizedlist>
<listitem><para>Provides a declarative syntax for defining mocks.</para></listitem><listitem><para>Can easily define partial (hybrid) mocks, which are a cross of real and mock objects.</para></listitem><listitem><para>Handles functions of arbitrary types and overloaded functions.</para></listitem><listitem><para>Comes with a rich set of matchers for validating function arguments.</para></listitem><listitem><para>Uses an intuitive syntax for controlling the behavior of a mock.</para></listitem><listitem><para>Does automatic verification of expectations (no record-and-replay needed).</para></listitem><listitem><para>Allows arbitrary (partial) ordering constraints on function calls to be expressed,.</para></listitem><listitem><para>Lets a user extend it by defining new matchers and actions.</para></listitem><listitem><para>Does not use exceptions.</para></listitem><listitem><para>Is easy to learn and use.</para></listitem></itemizedlist>
</para><para>Please see the project page above for more information as well as the mailing list for questions, discussions, and development. There is also an IRC channel on OFTC (irc.oftc.net) #gtest available. Please join us!</para><para>Please note that code under <ulink url="scripts/generator/">scripts/generator</ulink> is from <ulink url="http://code.google.com/p/cppclean/">cppclean</ulink> and released under the Apache License, which is different from Google <ref refid="class_mock" kindref="compound">Mock</ref>&apos;s license.</para><para><heading level="2">Getting Started</heading>
</para><para>If you are new to the project, we suggest that you read the user documentation in the following order:</para><para><itemizedlist>
<listitem><para>Learn the ../googletest/docs/Primer.md &quot;basics&quot; of Google Test, if you choose to use Google <ref refid="class_mock" kindref="compound">Mock</ref> with it (recommended).</para></listitem><listitem><para>Read Google Mock for Dummies.</para></listitem><listitem><para>Read the instructions below on how to build Google <ref refid="class_mock" kindref="compound">Mock</ref>.</para></listitem></itemizedlist>
</para><para>You can also watch Zhanyong&apos;s <ulink url="http://www.youtube.com/watch?v=sYpCyLI47rM">talk</ulink> on Google <ref refid="class_mock" kindref="compound">Mock</ref>&apos;s usage and implementation.</para><para>Once you understand the basics, check out the rest of the docs:</para><para><itemizedlist>
<listitem><para>CheatSheet - all the commonly used stuff at a glance.</para></listitem><listitem><para>CookBook - recipes for getting things done, including advanced techniques.</para></listitem></itemizedlist>
</para><para>If you need help, please check the KnownIssues and FrequentlyAskedQuestions before posting a question on the <ulink url="http://groups.google.com/group/googlemock">discussion group</ulink>.</para><para><heading level="3">Using Google <ref refid="class_mock" kindref="compound">Mock</ref> Without Google Test</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> is not a testing framework itself. Instead, it needs a testing framework for writing tests. Google <ref refid="class_mock" kindref="compound">Mock</ref> works seamlessly with <ulink url="http://code.google.com/p/googletest/">Google Test</ulink>, but you can also use it with <ulink url="googlemock/ForDummies.md#Using_Google_Mock_with_Any_Testing_Framework">any C++ testing framework</ulink>.</para><para><heading level="3">Requirements for End Users</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> is implemented on top of <ulink url="http://github.com/google/googletest/">Google Test</ulink>, and depends on it. You must use the bundled version of Google Test when using Google <ref refid="class_mock" kindref="compound">Mock</ref>.</para><para>You can also easily configure Google <ref refid="class_mock" kindref="compound">Mock</ref> to work with another testing framework, although it will still need Google Test. Please read <ulink url="docs/ForDummies.md#Using_Google_Mock_with_Any_Testing_Framework">&quot;Using_Google_Mock_with_Any_Testing_Framework&quot;</ulink> for instructions.</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> depends on advanced C++ features and thus requires a more modern compiler. The following are needed to use Google <ref refid="class_mock" kindref="compound">Mock</ref>:</para><para><heading level="4">Linux Requirements</heading>
</para><para><itemizedlist>
<listitem><para>GNU-compatible Make or &quot;gmake&quot;</para></listitem><listitem><para>POSIX-standard shell</para></listitem><listitem><para>POSIX(-2) Regular Expressions (regex.h)</para></listitem><listitem><para>C++98-standard-compliant compiler (e.g. GCC 3.4 or newer)</para></listitem></itemizedlist>
</para><para><heading level="4">Windows Requirements</heading>
</para><para><itemizedlist>
<listitem><para>Microsoft Visual C++ 8.0 SP1 or newer</para></listitem></itemizedlist>
</para><para><heading level="4">Mac OS X Requirements</heading>
</para><para><itemizedlist>
<listitem><para>Mac OS X 10.4 Tiger or newer</para></listitem><listitem><para>Developer Tools Installed</para></listitem></itemizedlist>
</para><para><heading level="3">Requirements for Contributors</heading>
</para><para>We welcome patches. If you plan to contribute a patch, you need to build Google <ref refid="class_mock" kindref="compound">Mock</ref> and its tests, which has further requirements:</para><para><itemizedlist>
<listitem><para>Automake version 1.9 or newer</para></listitem><listitem><para>Autoconf version 2.59 or newer</para></listitem><listitem><para>Libtool / Libtoolize</para></listitem><listitem><para>Python version 2.3 or newer (for running some of the tests and re-generating certain source files from templates)</para></listitem></itemizedlist>
</para><para><heading level="3">Building Google <ref refid="class_mock" kindref="compound">Mock</ref></heading>
</para><para><heading level="4">Preparing to Build (Unix only)</heading>
</para><para>If you are using a Unix system and plan to use the GNU Autotools build system to build Google <ref refid="class_mock" kindref="compound">Mock</ref> (described below), you&apos;ll need to configure it now.</para><para>To prepare the Autotools build system: <verbatim>cd googlemock
autoreconf -fvi
</verbatim></para><para>To build Google <ref refid="class_mock" kindref="compound">Mock</ref> and your tests that use it, you need to tell your build system where to find its headers and source files. The exact way to do it depends on which build system you use, and is usually straightforward.</para><para>This section shows how you can integrate Google <ref refid="class_mock" kindref="compound">Mock</ref> into your existing build system.</para><para>Suppose you put Google <ref refid="class_mock" kindref="compound">Mock</ref> in directory <computeroutput>${GMOCK_DIR}</computeroutput> and Google Test in <computeroutput>${GTEST_DIR}</computeroutput> (the latter is <computeroutput>${GMOCK_DIR}/gtest</computeroutput> by default). To build Google <ref refid="class_mock" kindref="compound">Mock</ref>, create a library build target (or a project as called by Visual Studio and Xcode) to compile <verbatim>${GTEST_DIR}/src/gtest-all.cc and ${GMOCK_DIR}/src/gmock-all.cc
</verbatim></para><para>with <verbatim>${GTEST_DIR}/include and ${GMOCK_DIR}/include
</verbatim></para><para>in the system header search path, and <verbatim>${GTEST_DIR} and ${GMOCK_DIR}
</verbatim></para><para>in the normal header search path. Assuming a Linux-like system and gcc, something like the following will do: <verbatim>g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \
    -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} \
    -pthread -c ${GTEST_DIR}/src/gtest-all.cc
g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \
    -isystem ${GMOCK_DIR}/include -I${GMOCK_DIR} \
    -pthread -c ${GMOCK_DIR}/src/gmock-all.cc
ar -rv libgmock.a gtest-all.o gmock-all.o
</verbatim></para><para>(We need -pthread as Google Test and Google <ref refid="class_mock" kindref="compound">Mock</ref> use threads.)</para><para>Next, you should compile your test source file with ${GTEST_DIR}/include and ${GMOCK_DIR}/include in the header search path, and link it with gmock and any other necessary libraries: <verbatim>g++ -isystem ${GTEST_DIR}/include -isystem ${GMOCK_DIR}/include \
    -pthread path/to/your_test.cc libgmock.a -o your_test
</verbatim></para><para>As an example, the make/ directory contains a Makefile that you can use to build Google <ref refid="class_mock" kindref="compound">Mock</ref> on systems where GNU make is available (e.g. Linux, Mac OS X, and Cygwin). It doesn&apos;t try to build Google <ref refid="class_mock" kindref="compound">Mock</ref>&apos;s own tests. Instead, it just builds the Google <ref refid="class_mock" kindref="compound">Mock</ref> library and a sample test. You can use it as a starting point for your own build script.</para><para>If the default settings are correct for your environment, the following commands should succeed: <verbatim>cd ${GMOCK_DIR}/make
make
./gmock_test
</verbatim></para><para>If you see errors, try to tweak the contents of <ulink url="make/Makefile">make/Makefile</ulink> to make them go away.</para><para><heading level="3">Windows</heading>
</para><para>The msvc/2005 directory contains VC++ 2005 projects and the msvc/2010 directory contains VC++ 2010 projects for building Google <ref refid="class_mock" kindref="compound">Mock</ref> and selected tests.</para><para>Change to the appropriate directory and run &quot;msbuild gmock.sln&quot; to build the library and tests (or open the gmock.sln in the MSVC IDE). If you want to create your own project to use with Google <ref refid="class_mock" kindref="compound">Mock</ref>, you&apos;ll have to configure it to use the <computeroutput>gmock_config</computeroutput> propety sheet. For that:</para><para><itemizedlist>
<listitem><para>Open the Property Manager window (View | Other Windows | Property Manager)</para></listitem><listitem><para>Right-click on your project and select &quot;Add Existing Property Sheet...&quot;</para></listitem><listitem><para>Navigate to <computeroutput>gmock_config.vsprops</computeroutput> or <computeroutput>gmock_config.props</computeroutput> and select it.</para></listitem><listitem><para>In Project Properties | Configuration Properties | General | Additional Include Directories, type &lt;path to=&quot;&quot; google=&quot;&quot; mock&gt;=&quot;&quot;&gt;/include.</para></listitem></itemizedlist>
</para><para><heading level="3">Tweaking Google <ref refid="class_mock" kindref="compound">Mock</ref></heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> can be used in diverse environments. The default configuration may not work (or may not work well) out of the box in some environments. However, you can easily tweak Google <ref refid="class_mock" kindref="compound">Mock</ref> by defining control macros on the compiler command line. Generally, these macros are named like <computeroutput>GTEST_XYZ</computeroutput> and you define them to either 1 or 0 to enable or disable a certain feature.</para><para>We list the most frequently used macros below. For a complete list, see file <ulink url="../googletest/include/gtest/internal/gtest-port.h">${GTEST_DIR}/include/gtest/internal/gtest-port.h</ulink>.</para><para><heading level="3">Choosing a TR1 Tuple Library</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> uses the C++ Technical Report 1 (TR1) tuple library heavily. Unfortunately TR1 tuple is not yet widely available with all compilers. The good news is that Google Test 1.4.0+ implements a subset of TR1 tuple that&apos;s enough for Google <ref refid="class_mock" kindref="compound">Mock</ref>&apos;s need. Google <ref refid="class_mock" kindref="compound">Mock</ref> will automatically use that implementation when the compiler doesn&apos;t provide TR1 tuple.</para><para>Usually you don&apos;t need to care about which tuple library Google Test and Google <ref refid="class_mock" kindref="compound">Mock</ref> use. However, if your project already uses TR1 tuple, you need to tell Google Test and Google <ref refid="class_mock" kindref="compound">Mock</ref> to use the same TR1 tuple library the rest of your project uses, or the two tuple implementations will clash. To do that, add <verbatim>-DGTEST_USE_OWN_TR1_TUPLE=0
</verbatim></para><para>to the compiler flags while compiling Google Test, Google <ref refid="class_mock" kindref="compound">Mock</ref>, and your tests. If you want to force Google Test and Google <ref refid="class_mock" kindref="compound">Mock</ref> to use their own tuple library, just add <verbatim>-DGTEST_USE_OWN_TR1_TUPLE=1
</verbatim></para><para>to the compiler flags instead.</para><para>If you want to use Boost&apos;s TR1 tuple library with Google <ref refid="class_mock" kindref="compound">Mock</ref>, please refer to the Boost website (<ulink url="http://www.boost.org/">http://www.boost.org/</ulink>) for how to obtain it and set it up.</para><para><heading level="3">As a Shared Library (DLL)</heading>
</para><para>Google <ref refid="class_mock" kindref="compound">Mock</ref> is compact, so most users can build and link it as a static library for the simplicity. Google <ref refid="class_mock" kindref="compound">Mock</ref> can be used as a DLL, but the same DLL must contain Google Test as well. See ../googletest/README.md &quot;Google Test&apos;s README&quot; for instructions on how to set up necessary compiler settings.</para><para><heading level="3">Tweaking Google <ref refid="class_mock" kindref="compound">Mock</ref></heading>
</para><para>Most of Google Test&apos;s control macros apply to Google <ref refid="class_mock" kindref="compound">Mock</ref> as well. Please see ../googletest/README.md &quot;Google Test&apos;s README&quot; for how to tweak them.</para><para><heading level="3">Upgrading from an Earlier Version</heading>
</para><para>We strive to keep Google <ref refid="class_mock" kindref="compound">Mock</ref> releases backward compatible. Sometimes, though, we have to make some breaking changes for the users&apos; long-term benefits. This section describes what you&apos;ll need to do if you are upgrading from an earlier version of Google <ref refid="class_mock" kindref="compound">Mock</ref>.</para><para><heading level="4">Upgrading from 1.1.0 or Earlier</heading>
</para><para>You may need to explicitly enable or disable Google Test&apos;s own TR1 tuple library. See the instructions in section &quot;[Choosing a TR1 Tuple
Library](../googletest/#choosing-a-tr1-tuple-library)&quot;.</para><para><heading level="4">Upgrading from 1.4.0 or Earlier</heading>
</para><para>On platforms where the pthread library is available, Google Test and Google <ref refid="class_mock" kindref="compound">Mock</ref> use it in order to be thread-safe. For this to work, you may need to tweak your compiler and/or linker flags. Please see the &quot;[Multi-threaded Tests](../googletest#multi-threaded-tests
)&quot; section in file Google Test&apos;s README for what you may need to do.</para><para>If you have custom matchers defined using <computeroutput>MatcherInterface</computeroutput> or <computeroutput>MakePolymorphicMatcher()</computeroutput>, you&apos;ll need to update their definitions to use the new matcher API ( <ulink url="http://code.google.com/p/googlemock/wiki/CookBook#Writing_New_Monomorphic_Matchers">monomorphic</ulink>, <ulink url="http://code.google.com/p/googlemock/wiki/CookBook#Writing_New_Polymorphic_Matchers">polymorphic</ulink>). Matchers defined using <computeroutput>MATCHER()</computeroutput> or <computeroutput>MATCHER_P*()</computeroutput> aren&apos;t affected.</para><para><heading level="3">Developing Google <ref refid="class_mock" kindref="compound">Mock</ref></heading>
</para><para>This section discusses how to make your own changes to Google <ref refid="class_mock" kindref="compound">Mock</ref>.</para><para><heading level="4">Testing Google <ref refid="class_mock" kindref="compound">Mock</ref> Itself</heading>
</para><para>To make sure your changes work as intended and don&apos;t break existing functionality, you&apos;ll want to compile and run Google Test&apos;s own tests. For that you&apos;ll need Autotools. First, make sure you have followed the instructions above to configure Google <ref refid="class_mock" kindref="compound">Mock</ref>. Then, create a build output directory and enter it. Next, <verbatim>${GMOCK_DIR}/configure  # try --help for more info
</verbatim></para><para>Once you have successfully configured Google <ref refid="class_mock" kindref="compound">Mock</ref>, the build steps are standard for GNU-style OSS packages. <verbatim>make        # Standard makefile following GNU conventions
make check  # Builds and runs all tests - all should pass.
</verbatim></para><para>Note that when building your project against Google <ref refid="class_mock" kindref="compound">Mock</ref>, you are building against Google Test as well. There is no need to configure Google Test separately.</para><para><heading level="4">Contributing a Patch</heading>
</para><para>We welcome patches. Please read the Developer&apos;s Guide for how you can contribute. In particular, make sure you have signed the Contributor License Agreement, or we won&apos;t be able to accept the patch.</para><para>Happy testing! </para>    </detaileddescription>
  </compounddef>
</doxygen>
