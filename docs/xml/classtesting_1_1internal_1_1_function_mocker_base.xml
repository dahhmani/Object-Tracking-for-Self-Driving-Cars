<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtesting_1_1internal_1_1_function_mocker_base" kind="class" language="C++" prot="public">
    <compoundname>testing::internal::FunctionMockerBase</compoundname>
    <basecompoundref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" prot="public" virt="non-virtual">testing::internal::UntypedFunctionMockerBase</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>F</declname>
        <defname>F</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtesting_1_1internal_1_1_function_mocker_base_1aa50abc4055b4d3a14ad64c317bccec8d" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function</ref>&lt; F &gt;::Result</type>
        <definition>typedef Function&lt;F&gt;::Result testing::internal::FunctionMockerBase&lt; F &gt;::Result</definition>
        <argsstring></argsstring>
        <name>Result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1458" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtesting_1_1internal_1_1_function_mocker_base_1a336432a07e544af4ffb8103603471ca3" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function</ref>&lt; F &gt;::ArgumentTuple</type>
        <definition>typedef Function&lt;F&gt;::ArgumentTuple testing::internal::FunctionMockerBase&lt; F &gt;::ArgumentTuple</definition>
        <argsstring></argsstring>
        <name>ArgumentTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1459" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtesting_1_1internal_1_1_function_mocker_base_1ab790bcb1dcf57fa6659365386723ae5a" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function</ref>&lt; F &gt;::ArgumentMatcherTuple</type>
        <definition>typedef Function&lt;F&gt;::ArgumentMatcherTuple testing::internal::FunctionMockerBase&lt; F &gt;::ArgumentMatcherTuple</definition>
        <argsstring></argsstring>
        <name>ArgumentMatcherTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1460" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1460" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classtesting_1_1internal_1_1_function_mocker_base_1aa4e1b2ee217676c9e70c3006b19a8074" prot="protected" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>&lt; Result &gt;</type>
        <definition>typedef ActionResultHolder&lt;Result&gt; testing::internal::FunctionMockerBase&lt; F &gt;::ResultHolder</definition>
        <argsstring></argsstring>
        <name>ResultHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1577" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1577" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtesting_1_1internal_1_1_function_mocker_base_1ae72aeee91c93e8ae5e1ed7f726a766b2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function</ref></type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class MockSpec</definition>
        <argsstring></argsstring>
        <name>MockSpec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1575" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtesting_1_1internal_1_1_function_mocker_base_1a4f17de55396a8ef740d5ad2b1380a851" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class TypedExpectation</definition>
        <argsstring></argsstring>
        <name>TypedExpectation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1627" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1627" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtesting_1_1internal_1_1_function_mocker_base_1af19843831e9f5eb1c79e8923ac42da92" prot="private" static="no" mutable="no">
        <type><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec</ref>&lt; F &gt;</type>
        <definition>MockSpec&lt;F&gt; testing::internal::FunctionMockerBase&lt; F &gt;::current_spec_</definition>
        <argsstring></argsstring>
        <name>current_spec_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1770" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1770" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a2206d80aad533ba6bf1f5e09c909aee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::internal::FunctionMockerBase&lt; F &gt;::FunctionMockerBase</definition>
        <argsstring>()</argsstring>
        <name>FunctionMockerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1462" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1462" bodyend="1462"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a3c33e7b4aa0e28e5bd46eb072f511068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual testing::internal::FunctionMockerBase&lt; F &gt;::~FunctionMockerBase</definition>
        <argsstring>() GTEST_LOCK_EXCLUDED_(g_gmock_mutex)</argsstring>
        <name>~FunctionMockerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1467" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1467" bodyend="1473"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a3bcd2e8191ffc44bd59b8d8d25eefd3e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref>&lt; F &gt; *</type>
        <definition>const OnCallSpec&lt;F&gt;* testing::internal::FunctionMockerBase&lt; F &gt;::FindOnCallSpec</definition>
        <argsstring>(const ArgumentTuple &amp;args) const</argsstring>
        <name>FindOnCallSpec</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1478" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1478" bodyend="1489"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1adbef6e1af840c9c14c3a6acee01007b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Result</type>
        <definition>Result testing::internal::FunctionMockerBase&lt; F &gt;::PerformDefaultAction</definition>
        <argsstring>(const ArgumentTuple &amp;args, const string &amp;call_description) const</argsstring>
        <name>PerformDefaultAction</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>call_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1498" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1498" bodyend="1516"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1aed1c6248ba1b50437ee3a5f72c5f7bf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref> *</type>
        <definition>virtual UntypedActionResultHolderBase* testing::internal::FunctionMockerBase&lt; F &gt;::UntypedPerformDefaultAction</definition>
        <argsstring>(const void *untyped_args, const string &amp;call_description) const</argsstring>
        <name>UntypedPerformDefaultAction</name>
        <reimplements refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a2cb149456cd559d5b0615f2310b235e3">UntypedPerformDefaultAction</reimplements>
        <param>
          <type>const void *</type>
          <declname>untyped_args</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>call_description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1523" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1523" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1aebdb11fe4ea9e9f3984cbcd58c6f6cf9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref> *</type>
        <definition>virtual UntypedActionResultHolderBase* testing::internal::FunctionMockerBase&lt; F &gt;::UntypedPerformAction</definition>
        <argsstring>(const void *untyped_action, const void *untyped_args) const</argsstring>
        <name>UntypedPerformAction</name>
        <reimplements refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1ada5a72303863d0aa655b66338b8efea5">UntypedPerformAction</reimplements>
        <param>
          <type>const void *</type>
          <declname>untyped_action</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>untyped_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1535" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1535" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1ada818fcb2b892f21bb939def386599e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void testing::internal::FunctionMockerBase&lt; F &gt;::ClearDefaultActionsLocked</definition>
        <argsstring>() GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)</argsstring>
        <name>ClearDefaultActionsLocked</name>
        <reimplements refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a40ddd95736946a7951033aa89a7b617f">ClearDefaultActionsLocked</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1547" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1547" bodyend="1571"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a869ec713f000b4e7829c660efc25e8cd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Result</type>
        <definition>Result testing::internal::FunctionMockerBase&lt; F &gt;::InvokeWith</definition>
        <argsstring>(const ArgumentTuple &amp;args) GTEST_LOCK_EXCLUDED_(g_gmock_mutex)</argsstring>
        <name>InvokeWith</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1582" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1582" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a22ece3b6e8d24f11d8f4ba9c17b737c4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref>&lt; F &gt; &amp;</type>
        <definition>OnCallSpec&lt;F&gt;&amp; testing::internal::FunctionMockerBase&lt; F &gt;::AddNewOnCallSpec</definition>
        <argsstring>(const char *file, int line, const ArgumentMatcherTuple &amp;m) GTEST_LOCK_EXCLUDED_(g_gmock_mutex)</argsstring>
        <name>AddNewOnCallSpec</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const ArgumentMatcherTuple &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1590" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1590" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1aa2c35c565f08d3649436af443ece468f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&lt; F &gt; &amp;</type>
        <definition>TypedExpectation&lt;F&gt;&amp; testing::internal::FunctionMockerBase&lt; F &gt;::AddNewExpectation</definition>
        <argsstring>(const char *file, int line, const string &amp;source_text, const ArgumentMatcherTuple &amp;m) GTEST_LOCK_EXCLUDED_(g_gmock_mutex)</argsstring>
        <name>AddNewExpectation</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>source_text</declname>
        </param>
        <param>
          <type>const ArgumentMatcherTuple &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1601" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1601" bodyend="1620"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a744318106e20b346f4f1efbf5a601644" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec</ref>&lt; F &gt; &amp;</type>
        <definition>MockSpec&lt;F&gt;&amp; testing::internal::FunctionMockerBase&lt; F &gt;::current_spec</definition>
        <argsstring>()</argsstring>
        <name>current_spec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1624" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1624" bodyend="1624"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1ac9f58631036d0507047e0088b829c237" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::FunctionMockerBase&lt; F &gt;::DescribeDefaultActionTo</definition>
        <argsstring>(const ArgumentTuple &amp;args, ::std::ostream *os) const</argsstring>
        <name>DescribeDefaultActionTo</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1634" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1634" bodyend="1646"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a9f701bc2048925f61cab0491a9aa275c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void testing::internal::FunctionMockerBase&lt; F &gt;::UntypedDescribeUninterestingCall</definition>
        <argsstring>(const void *untyped_args, ::std::ostream *os) const GTEST_LOCK_EXCLUDED_(g_gmock_mutex)</argsstring>
        <name>UntypedDescribeUninterestingCall</name>
        <reimplements refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a48a17fa75b744c2bfb19ee1f54d51759">UntypedDescribeUninterestingCall</reimplements>
        <param>
          <type>const void *</type>
          <declname>untyped_args</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1651" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1651" bodyend="1661"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1aa200995eb89574f8042ba6897d6cb98f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>const <ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref> *</type>
        <definition>virtual const ExpectationBase* testing::internal::FunctionMockerBase&lt; F &gt;::UntypedFindMatchingExpectation</definition>
        <argsstring>(const void *untyped_args, const void **untyped_action, bool *is_excessive, ::std::ostream *what, ::std::ostream *why) GTEST_LOCK_EXCLUDED_(g_gmock_mutex)</argsstring>
        <name>UntypedFindMatchingExpectation</name>
        <reimplements refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a38714b44836c937fe95524f8d7063d04">UntypedFindMatchingExpectation</reimplements>
        <param>
          <type>const void *</type>
          <declname>untyped_args</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>untyped_action</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>is_excessive</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>what</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>why</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1679" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1679" bodyend="1702"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a6f77ce4fad16e1c8508fe6da71e8b930" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void testing::internal::FunctionMockerBase&lt; F &gt;::UntypedPrintArgs</definition>
        <argsstring>(const void *untyped_args, ::std::ostream *os) const</argsstring>
        <name>UntypedPrintArgs</name>
        <reimplements refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1ae8c91f05fc90e66a84df49aae8de0d41">UntypedPrintArgs</reimplements>
        <param>
          <type>const void *</type>
          <declname>untyped_args</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1705" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1705" bodyend="1710"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a236b019bcbbfd13c0ed25aa34c1dd344" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&lt; F &gt; *</type>
        <definition>TypedExpectation&lt;F&gt;* testing::internal::FunctionMockerBase&lt; F &gt;::FindMatchingExpectationLocked</definition>
        <argsstring>(const ArgumentTuple &amp;args) const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)</argsstring>
        <name>FindMatchingExpectationLocked</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1714" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1714" bodyend="1728"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1acfddf27974b9fe7cbe90c7e86cce4dcb" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::FunctionMockerBase&lt; F &gt;::FormatUnexpectedCallMessageLocked</definition>
        <argsstring>(const ArgumentTuple &amp;args, ::std::ostream *os, ::std::ostream *why) const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)</argsstring>
        <name>FormatUnexpectedCallMessageLocked</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>os</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>why</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1731" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1731" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1ad0183c6e8ec34498eb52f4249ec2fe9d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void testing::internal::FunctionMockerBase&lt; F &gt;::PrintTriedExpectationsLocked</definition>
        <argsstring>(const ArgumentTuple &amp;args, ::std::ostream *why) const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)</argsstring>
        <name>PrintTriedExpectationsLocked</name>
        <param>
          <type>const ArgumentTuple &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>::std::ostream *</type>
          <declname>why</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1744" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1744" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1internal_1_1_function_mocker_base_1a5e13e83d93509c4fdf1d0846bc5299c7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::internal::FunctionMockerBase&lt; F &gt;::GTEST_DISALLOW_COPY_AND_ASSIGN_</definition>
        <argsstring>(FunctionMockerBase)</argsstring>
        <name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name>
        <param>
          <type><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1784" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="897">
        <label>testing::internal::FunctionMockerBase&lt; F &gt;</label>
        <link refid="classtesting_1_1internal_1_1_function_mocker_base"/>
        <childnode refid="898" relation="public-inheritance">
        </childnode>
      </node>
      <node id="898">
        <label>testing::internal::UntypedFunctionMockerBase</label>
        <link refid="classtesting_1_1internal_1_1_untyped_function_mocker_base"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="899">
        <label>testing::internal::FunctionMockerBase&lt; F &gt;</label>
        <link refid="classtesting_1_1internal_1_1_function_mocker_base"/>
        <childnode refid="900" relation="public-inheritance">
        </childnode>
      </node>
      <node id="900">
        <label>testing::internal::UntypedFunctionMockerBase</label>
        <link refid="classtesting_1_1internal_1_1_untyped_function_mocker_base"/>
      </node>
    </collaborationgraph>
    <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h" line="54" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h" bodystart="54" bodyend="-1"/>
    <listofallmembers>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1aa2c35c565f08d3649436af443ece468f" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>AddNewExpectation</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a22ece3b6e8d24f11d8f4ba9c17b737c4" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>AddNewOnCallSpec</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1ab790bcb1dcf57fa6659365386723ae5a" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>ArgumentMatcherTuple</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a336432a07e544af4ffb8103603471ca3" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>ArgumentTuple</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1ada818fcb2b892f21bb939def386599e7" prot="public" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>ClearDefaultActionsLocked</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a744318106e20b346f4f1efbf5a601644" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>current_spec</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1af19843831e9f5eb1c79e8923ac42da92" prot="private" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>current_spec_</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1ac9f58631036d0507047e0088b829c237" prot="private" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>DescribeDefaultActionTo</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a236b019bcbbfd13c0ed25aa34c1dd344" prot="private" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>FindMatchingExpectationLocked</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a3bcd2e8191ffc44bd59b8d8d25eefd3e" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>FindOnCallSpec</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1acfddf27974b9fe7cbe90c7e86cce4dcb" prot="private" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>FormatUnexpectedCallMessageLocked</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a2206d80aad533ba6bf1f5e09c909aee0" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>FunctionMockerBase</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a7705611c4a63df16cddb0674878c403a" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>GetHandleOf</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a5e13e83d93509c4fdf1d0846bc5299c7" prot="private" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>GTEST_DISALLOW_COPY_AND_ASSIGN_</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a869ec713f000b4e7829c660efc25e8cd" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>InvokeWith</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1adf35c589969bb985668616031cb9ed56" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>mock_obj_</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a71863dd67193a7082078d5b366d5ce51" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>MockObject</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1ae72aeee91c93e8ae5e1ed7f726a766b2" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>MockSpec</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1ae90a5b5d48db1e99634bc6ff39ded335" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>Name</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a2d472077b9a8d3758caaec5770259f70" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>name_</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1adbef6e1af840c9c14c3a6acee01007b2" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>PerformDefaultAction</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1ad0183c6e8ec34498eb52f4249ec2fe9d" prot="private" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>PrintTriedExpectationsLocked</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a0cd3dd14b92c714eab690c9597f32ffd" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>RegisterOwner</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1aa50abc4055b4d3a14ad64c317bccec8d" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>Result</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1aa4e1b2ee217676c9e70c3006b19a8074" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>ResultHolder</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a287bcacee639b7d123cec29e0614fe96" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>SetOwnerAndName</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a4f17de55396a8ef740d5ad2b1380a851" prot="private" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>TypedExpectation</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1aae4a42a4bace1fcb0cd4bdf1ddd40277" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>untyped_expectations_</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1aed2a1913f6c03fd47c8900039556be34" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>untyped_on_call_specs_</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a9f701bc2048925f61cab0491a9aa275c" prot="private" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedDescribeUninterestingCall</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a36480bd395e110b4eae5b0d0402de966" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedExpectations</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1aa200995eb89574f8042ba6897d6cb98f" prot="private" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedFindMatchingExpectation</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1aedfa95e65d80936e4dff040140513b36" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedFunctionMockerBase</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1adaec41c0ba8a07c2415f6c8efa0ca54f" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedInvokeWith</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a29cc87ed60ad0218432aa777abba7dbb" prot="protected" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedOnCallSpecs</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1aebdb11fe4ea9e9f3984cbcd58c6f6cf9" prot="public" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedPerformAction</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1aed1c6248ba1b50437ee3a5f72c5f7bf3" prot="public" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedPerformDefaultAction</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a6f77ce4fad16e1c8508fe6da71e8b930" prot="private" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>UntypedPrintArgs</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a3f1d62a1662a3daa2895b3af963be269" prot="public" virt="non-virtual"><scope>testing::internal::FunctionMockerBase</scope><name>VerifyAndClearExpectationsLocked</name></member>
      <member refid="classtesting_1_1internal_1_1_function_mocker_base_1a3c33e7b4aa0e28e5bd46eb072f511068" prot="public" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>~FunctionMockerBase</name></member>
      <member refid="classtesting_1_1internal_1_1_untyped_function_mocker_base_1a6badd47a3fe2a439ef98aa91bf73d721" prot="public" virt="virtual"><scope>testing::internal::FunctionMockerBase</scope><name>~UntypedFunctionMockerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
