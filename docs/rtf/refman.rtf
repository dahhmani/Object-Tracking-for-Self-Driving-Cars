{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\info 
{\title {\comment Human Tracking for self-driving cars  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0 \par
}}Human Tracking for self-driving cars}
{\comment Generated byDoxgyen. }
{\creatim \yr2020\mo11\dy3\hr22\min22\sec0}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Human Tracking for self-driving cars}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1.0\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Nov 3 2020 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
README{\tc \v README}\par \pard\plain 
{\bkmkstart AAAAAAAEMN}
{\bkmkend AAAAAAAEMN}
\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 } {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Pedestrian Tracker for Self-Driving Cars} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Authors} \par}
Mahmoud Dahmani (Driver) Aditya Khopkar (Navigator)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Build} \par}
Run the following commands in a new terminal: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid git clone --recursive https://github.com/dahhmani/Object-Tracking-for-Self-Driving-Cars\par
cd <path to repository>/scripts/\par
sh download_pretrained_model.sh\par
sh build.sh\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Run} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 App} \par}
Run the following commands in a new terminal: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd <path to repository>/scripts/\par
sh run_app.sh\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tests} \par}
Run the following commands in a new terminal: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd <path to repository>/scripts/\par
sh run_tests.sh\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Agile Iterative Process (AIP)} \par}
AIP was followed through this project. The spreadsheet for AIP can be found {\f2 here}\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sprint 1 Presentation} \par}
The authors' video for a walkthrough through sprint 1 can be found {\f2 here} \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Defining a Mock Class{\tc \v Defining a Mock Class}\par \pard\plain 
{\bkmkstart AAAAAAAEMO}
{\bkmkend AAAAAAAEMO}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Normal Class} \par}
Given {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual ~Foo();\par
  virtual int GetSize() const = 0;\par
  virtual string Describe(const char* name) = 0;\par
  virtual string Describe(int type) = 0;\par
  virtual bool Process(Bar elem, int count) = 0;\par
\};\par
}
 (note that {\f2 ~Foo()}  {\b must}  be virtual) we can define its mock as {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"\par
\par
class MockFoo : public Foo \{\par
  MOCK_CONST_METHOD0(GetSize, int());\par
  MOCK_METHOD1(Describe, string(const char* name));\par
  MOCK_METHOD1(Describe, string(int type));\par
  MOCK_METHOD2(Process, bool(Bar elem, int count));\par
\};\par
}
\par
To create a "nice" mock object which ignores all uninteresting calls, or a "strict" mock object, which treats them as failures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid NiceMock<MockFoo> nice_foo;     // The type is a subclass of MockFoo.\par
StrictMock<MockFoo> strict_foo; // The type is a subclass of MockFoo.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Class Template} \par}
To mock {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
 public:\par
  ...\par
  virtual ~StackInterface();\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
}
 (note that {\f2 ~StackInterface()}  {\b must}  be virtual) just append {\f2 _T}  to the {\f2 MOCK_*}  macros: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
 public:\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Specifying Calling Conventions for {\b Mock} Functions} \par}
If your mock function doesn't use the default calling convention, you can specify it by appending {\f2 _WITH_CALLTYPE}  to any of the macros described in the previous two sections and supplying the calling convention as the first argument to the macro. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD_1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int n));\par
MOCK_CONST_METHOD2_WITH_CALLTYPE(STDMETHODCALLTYPE, Bar, int(double x, double y));\par
}
 where {\f2 STDMETHODCALLTYPE}  is defined by {\f2 <objbase.h>}  on Windows.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
The typical flow is:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names you need to use. All Google {\b Mock} names are in the {\f2 testing}  namespace unless they are macros or otherwise noted.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, set the default actions of the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set your expectations on the mock objects (How will they be called? What wil they do?).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects; if necessary, check the result using {\f2 Google Test} assertions.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock objects is destructed, Google {\b Mock} automatically verifies that all expectations on it have been satisfied.\par}
Here is an example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;                            // #1\par
\par
TEST(BarTest, DoesThis) \{\par
  MockFoo foo;                                    // #2\par
\par
  ON_CALL(foo, GetSize())                         // #3\par
      .WillByDefault(Return(1));\par
  // ... other default actions ...\par
\par
  EXPECT_CALL(foo, Describe(5))                   // #4\par
      .Times(3)\par
      .WillRepeatedly(Return("Category 5"));\par
  // ... other expectations ...\par
\par
  EXPECT_EQ("good", MyProductionFunction(&foo));  // #5\par
\}                                                 // #6\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Default Actions} \par}
Google {\b Mock} has a {\b built-in default action}  for any function that returns {\f2 void} , {\f2 bool} , a numeric value, or a pointer.\par
To customize the default action for functions with return type {\f2 T}  globally: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DefaultValue;\par
\par
// Sets the default value to be returned. T must be CopyConstructible.\par
DefaultValue<T>::Set(value);\par
// Sets a factory. Will be invoked on demand. T must be MoveConstructible.\par
//   T MakeT();\par
DefaultValue<T>::SetFactory(&MakeT);\par
// ... use the mocks ...\par
// Resets the default value.\par
DefaultValue<T>::Clear();\par
}
\par
To customize the default action for a particular method, use {\f2 ON_CALL()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .WillByDefault(action);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\f2 EXPECT_CALL()}  sets {\b expectations}  on a mock method (How will it be called? What will it do?): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .Times(cardinality)            ?\par
    .InSequence(sequences)         *\par
    .After(expectations)           *\par
    .WillOnce(action)              *\par
    .WillRepeatedly(action)        ?\par
    .RetiresOnSaturation();        ?\par
}
\par
If {\f2 Times()}  is omitted, the cardinality is assumed to be:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(1)}  when there is neither {\f2 WillOnce()}  nor {\f2 WillRepeatedly()} ;\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(n)}  when there are {\f2 n WillOnce()} s but no {\f2 WillRepeatedly()} , where {\f2 n}  >= 1; or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(AtLeast(n))}  when there are {\f2 n WillOnce()} s and a {\f2 WillRepeatedly()} , where {\f2 n}  >= 0.\par}
A method with no {\f2 EXPECT_CALL()}  is free to be invoked {\i any number of times} , and the default action will be taken each time.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Matchers} \par}
A {\b matcher}  matches a {\i single}  argument. You can use it inside {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , or use it to validate a value directly:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(value, matcher)}  \cell }{Asserts that {\f2 value}  matches {\f2 matcher} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(value, matcher)}  \cell }{The same as {\f2 EXPECT_THAT(value, matcher)} , except that it generates a {\b fatal}  failure. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Built-in matchers (where {\f2 argument}  is the function argument) are divided into several categories:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Wildcard} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 _} \cell }{{\f2 argument}  can be any value of the correct type.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A<type>()}  or {\f2 An<type>()} \cell }{{\f2 argument}  can be any value of type {\f2 type} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generic Comparison} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq(value)}  or {\f2 value} \cell }{{\f2 argument == value}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge(value)}  \cell }{{\f2 argument >= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt(value)}  \cell }{{\f2 argument > value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le(value)}  \cell }{{\f2 argument <= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt(value)}  \cell }{{\f2 argument < value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne(value)}  \cell }{{\f2 argument != value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsNull()}  \cell }{{\f2 argument}  is a {\f2 NULL}  pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NotNull()}  \cell }{{\f2 argument}  is a non-null pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ref(variable)}  \cell }{{\f2 argument}  is a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 TypedEq<type>(value)} \cell }{{\f2 argument}  has type {\f2 type}  and is equal to {\f2 value} . You may need to use this instead of {\f2 Eq(value)}  when the mock function is overloaded. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Except {\f2 Ref()} , these matchers make a {\i copy}  of {\f2 value}  in case it's modified or destructed later. If the compiler complains that {\f2 value}  doesn't have a public copy constructor, try wrap it in {\f2 ByRef()} , e.g. {\f2 Eq(ByRef(non_copyable_value))} . If you do that, make sure {\f2 non_copyable_value}  is not changed afterwards, or the meaning of your matcher will be changed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as unequal.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatEq(a_float)}  \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as unequal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatEq(a_float)} \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The above matchers use ULP-based comparison (the same as used in {\f2 Google Test}). They automatically pick a reasonable error bound based on the absolute value of the expected value. {\f2 DoubleEq()}  and {\f2 FloatEq()}  conform to the IEEE standard, which requires comparing two NaNs for equality to return false. The {\f2 NanSensitive*}  version instead treats two NaNs as equal, which is often what a user wants.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleNear(a_double, max_abs_error)} \cell }{{\f2 argument}  is a {\f2 double}  value close to {\f2 a_double}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as unequal.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatNear(a_float, max_abs_error)}  \cell }{{\f2 argument}  is a {\f2 float}  value close to {\f2 a_float}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as unequal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleNear(a_double, max_abs_error)} \cell }{{\f2 argument}  is a {\f2 double}  value close to {\f2 a_double}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatNear(a_float, max_abs_error)} \cell }{{\f2 argument}  is a {\f2 float}  value close to {\f2 a_float}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Matchers} \par}
The {\f2 argument}  can be either a C string or a C++ string object:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainsRegex(string)} \cell }{{\f2 argument}  matches the given regular expression.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EndsWith(suffix)}  \cell }{{\f2 argument}  ends with string {\f2 suffix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 HasSubstr(string)}  \cell }{{\f2 argument}  contains {\f2 string}  as a sub-string. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatchesRegex(string)}  \cell }{{\f2 argument}  matches the given regular expression with the match starting at the first character and ending at the last character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StartsWith(prefix)}  \cell }{{\f2 argument}  starts with string {\f2 prefix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\f2 ContainsRegex()}  and {\f2 MatchesRegex()}  use the regular expression syntax defined {\f2 here}. {\f2 StrCaseEq()} , {\f2 StrCaseNe()} , {\f2 StrEq()} , and {\f2 StrNe()}  work for wide strings as well.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Container Matchers} \par}
Most STL-style containers support {\f2 ==} , so you can use {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly. If you want to write the elements in-line, match them more flexibly, or get more informative messages, you can use:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainerEq(container)}  \cell }{The same as {\f2 Eq(container)}  except that the failure message also includes which elements are in one container but not the other.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Contains(e)}  \cell }{{\f2 argument}  contains an element that matches {\f2 e} , which can be either a value or a matcher. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Each(e)}  \cell }{{\f2 argument}  is a container where {\i every}  element matches {\f2 e} , which can be either a value or a matcher. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAre(e0, e1, ..., en)}  \cell }{{\f2 argument}  has {\f2 n + 1}  elements, where the i-th element matches {\f2 ei} , which can be a value or a matcher. 0 to 10 arguments are allowed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAreArray(\{ e0, e1, ..., en \})} , {\f2 ElementsAreArray(array)} , or {\f2 ElementsAreArray(array, count)}  \cell }{The same as {\f2 ElementsAre()}  except that the expected element values/matchers come from an initializer list, STL-style container, or C-style array. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsEmpty()}  \cell }{{\f2 argument}  is an empty container ({\f2 container.empty()} ). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pointwise(m, container)}  \cell }{{\f2 argument}  contains the same number of elements as in {\f2 container} , and for all i, (the i-th element in {\f2 argument} , the i-th element in {\f2 container} ) match {\f2 m} , which is a matcher on 2-tuples. E.g. {\f2 Pointwise(Le(), upper_bounds)}  verifies that each element in {\f2 argument}  doesn't exceed the corresponding element in {\f2 upper_bounds} . See more detail below. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SizeIs(m)}  \cell }{{\f2 argument}  is a container whose size matches {\f2 m} . E.g. {\f2 SizeIs(2)}  or {\f2 SizeIs(Lt(2))} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 UnorderedElementsAre(e0, e1, ..., en)}  \cell }{{\f2 argument}  has {\f2 n + 1}  elements, and under some permutation each element matches an {\f2 ei}  (for a different {\f2 i} ), which can be a value or a matcher. 0 to 10 arguments are allowed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 UnorderedElementsAreArray(\{ e0, e1, ..., en \})} , {\f2 UnorderedElementsAreArray(array)} , or {\f2 UnorderedElementsAreArray(array, count)}  \cell }{The same as {\f2 UnorderedElementsAre()}  except that the expected element values/matchers come from an initializer list, STL-style container, or C-style array. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenSorted(m)}  \cell }{When {\f2 argument}  is sorted using the {\f2 <}  operator, it matches container matcher {\f2 m} . E.g. {\f2 WhenSorted(UnorderedElementsAre(1, 2, 3))}  verifies that {\f2 argument}  contains elements {\f2 1} , {\f2 2} , and {\f2 3} , ignoring order. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenSortedBy(comparator, m)}  \cell }{The same as {\f2 WhenSorted(m)} , except that the given comparator instead of {\f2 <}  is used to sort {\f2 argument} . E.g. {\f2 WhenSortedBy(std::greater<int>(), ElementsAre(3, 2, 1))} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Notes:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
These matchers can also match:{
\par
\pard\plain \s91\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab a native array passed by reference (e.g. in {\f2 Foo(const int (&a)[5])} ), and\par}
{
\par
\pard\plain \s91\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab an array passed as a pointer and a count (e.g. in {\f2 Bar(const T* buffer, int len)}  \'96 see Multi-argument Matchers).\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The array being matched may be multi-dimensional (i.e. its elements can be arrays).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 m}  in {\f2 Pointwise(m, ...)}  should be a matcher for {\f2 ::testing::tuple<T, U>}  where {\f2 T}  and {\f2 U}  are the element type of the actual container and the expected container, respectively. For example, to compare two {\f2 Foo}  containers where {\f2 Foo}  doesn't support {\f2 operator==}  but has an {\f2 Equals()}  method, one might write:\par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::get;\par
MATCHER(FooEq, "") \{\par
  return get<0>(arg).Equals(get<1>(arg));\par
\}\par
...\par
EXPECT_THAT(actual_foos, Pointwise(FooEq(), expected_foos));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Member Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Field(&class::field, m)} \cell }{{\f2 argument.field}  (or {\f2 argument->field}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Key(e)}  \cell }{{\f2 argument.first}  matches {\f2 e} , which can be either a value or a matcher. E.g. {\f2 Contains(Key(Le(5)))}  can verify that a {\f2 map}  contains a key {\f2 <= 5} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pair(m1, m2)}  \cell }{{\f2 argument}  is an {\f2 std::pair}  whose {\f2 first}  field matches {\f2 m1}  and {\f2 second}  field matches {\f2 m2} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Property(&class::property, m)} \cell }{{\f2 argument.property()}  (or {\f2 argument->property()}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching the Result of a Function or Functor} \par}
|{\f2 ResultOf(f, m)} |{\f2 f(argument)}  matches matcher {\f2 m} , where {\f2 f}  is a function or functor.| |:------------\'97|:------------------------------------------------------------------\'97|\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Pointer Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pointee(m)} \cell }{{\f2 argument}  (either a smart pointer or a raw pointer) points to a value that matches matcher {\f2 m} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenDynamicCastTo<T>(m)} \cell }{when {\f2 argument}  is passed through {\f2 dynamic_cast<T>()} , it matches matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Multiargument Matchers} \par}
Technically, all matchers match a {\i single}  value. A "multi-argument" matcher is just one that matches a {\i tuple} . The following matchers can be used to match a tuple {\f2 (x, y)} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq()} \cell }{{\f2 x == y}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge()} \cell }{{\f2 x >= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt()} \cell }{{\f2 x > y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le()} \cell }{{\f2 x <= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt()} \cell }{{\f2 x < y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne()} \cell }{{\f2 x != y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
You can use the following selectors to pick a subset of the arguments (or reorder them) to participate in the matching:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllArgs(m)} \cell }{Equivalent to {\f2 m} . Useful as syntactic sugar in {\f2 .With(AllArgs(m))} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Args<N1, N2, ..., Nk>(m)} \cell }{The tuple of the {\f2 k}  selected (using 0-based indices) arguments matches {\f2 m} , e.g. {\f2 Args<1, 2>(Eq())} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Matchers} \par}
You can make a matcher from one or more other matchers:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches all of the matchers {\f2 m1}  to {\f2 mn} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches at least one of the matchers {\f2 m1}  to {\f2 mn} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Not(m)}  \cell }{{\f2 argument}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adapters for Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatcherCast<T>(m)} \cell }{casts matcher {\f2 m}  to type {\f2 Matcher<T>} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SafeMatcherCast<T>(m)} \cell }{{\f2 safely casts} matcher {\f2 m}  to type {\f2 Matcher<T>} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Truly(predicate)}  \cell }{{\f2 predicate(argument)}  returns something considered by C++ to be true, where {\f2 predicate}  is a function or functor. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Predicates} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Matches(m)(value)} \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} . You can use {\f2 Matches(m)}  alone as a unary functor.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ExplainMatchResult(m, value, result_listener)} \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} , explaining the result to {\f2 result_listener} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Value(value, m)}  \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER(IsEven, "") \{ return (arg % 2) == 0; \}}  \cell }{Defines a matcher {\f2 IsEven()}  to match an even number.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P(IsDivisibleBy, n, "") \{ *result_listener << "where the remainder is " << (arg % n); return (arg % n) == 0; \}}  \cell }{Defines a macher {\f2 IsDivisibleBy(n)}  to match a number divisible by {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P2(IsBetween, a, b, std::string(negation ? "isn't" : "is") + " between " + PrintToString(a) + " and " + PrintToString(b)) \{ return a <= arg && arg <= b; \}}  \cell }{Defines a matcher {\f2 IsBetween(a, b)}  to match a value in the range [{\f2 a} , {\f2 b} ]. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 MATCHER*}  macros cannot be used inside a function or class.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The matcher body must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 PrintToString(x)}  to convert a value {\f2 x}  of any type to a string.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Test Assertions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(expression, m)} \cell }{Generates a {\f2 fatal failure} if the value of {\f2 expression}  doesn't match matcher {\f2 m} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(expression, m)} \cell }{Generates a non-fatal failure if the value of {\f2 expression}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Actions} \par}
{\b Actions}  specify what a mock function should do when invoked.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning a Value} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return()} \cell }{Return from a {\f2 void}  mock function.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return(value)} \cell }{Return {\f2 value} . If the type of {\f2 value}  is different to the mock function's return type, {\f2 value}  is converted to the latter type {\i at the time the expectation is set} , not when the action is executed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnArg<N>()} \cell }{Return the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNew<T>(a1, ..., ak)} \cell }{Return {\f2 new T(a1, ..., ak)} ; a different object is created each time. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNull()} \cell }{Return a null pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnPointee(ptr)} \cell }{Return the value pointed to by {\f2 ptr} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRef(variable)} \cell }{Return a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRefOfCopy(value)} \cell }{Return a reference to a copy of {\f2 value} ; the copy lives as long as the action. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Side Effects} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Assign(&variable, value)} \cell }{Assign {\f2 value}  to variable.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DeleteArg<N>()}  \cell }{Delete the {\f2 N} -th (0-based) argument, which must be a pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArg<N>(pointer)}  \cell }{Save the {\f2 N} -th (0-based) argument to {\f2 *pointer} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArgPointee<N>(pointer)}  \cell }{Save the value pointed to by the {\f2 N} -th (0-based) argument to {\f2 *pointer} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgReferee<N>(value)}  \cell }{Assign value to the variable referenced by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgPointee<N>(value)}  \cell }{Assign {\f2 value}  to the variable pointed by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgumentPointee<N>(value)} \cell }{Same as {\f2 SetArgPointee<N>(value)} . Deprecated. Will be removed in v1.7.0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArrayArgument<N>(first, last)} \cell }{Copies the elements in source range [{\f2 first} , {\f2 last} ) to the array pointed to by the {\f2 N} -th (0-based) argument, which can be either a pointer or an iterator. The action does not take ownership of the elements in the source range. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetErrnoAndReturn(error, value)} \cell }{Set {\f2 errno}  to {\f2 error}  and return {\f2 value} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Throw(exception)}  \cell }{Throws the given exception, which can be any copyable value. Available since v1.1.0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function or a Functor as an Action} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(f)} \cell }{Invoke {\f2 f}  with the arguments passed to the mock function, where {\f2 f}  can be a global/static function or a functor.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(object_pointer, &class::method)} \cell }{Invoke the \{method on the object with the arguments passed to the mock function. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(f)} \cell }{Invoke {\f2 f} , which can be a global/static function or a functor. {\f2 f}  must take no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(object_pointer, &class::method)} \cell }{Invoke the method on the object, which takes no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeArgument<N>(arg1, arg2, ..., argk)} \cell }{Invoke the mock function's {\f2 N} -th (0-based) argument, which must be a function or a functor, with the {\f2 k}  arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The return value of the invoked function is used as the return value of the action.\par
When defining a function or functor to be used with {\f2 Invoke*()} , you can declare any unused parameters as {\f2 Unused} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid double Distance(Unused, double x, double y) \{ return sqrt(x*x + y*y); \}\par
...\par
EXPECT_CALL(mock, Foo("Hi", _, _)).WillOnce(Invoke(Distance));\par
}
\par
In {\f2 InvokeArgument<N>(...)} , if an argument needs to be passed by reference, wrap it inside {\f2 ByRef()} . For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<2>(5, string("Hi"), ByRef(foo))\par
}
 calls the mock function's #2 argument, passing to it {\f2 5}  and {\f2 string("Hi")}  by value, and {\f2 foo}  by reference.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Default Action} \par}
|{\f2 DoDefault()} |Do the default action (specified by {\f2 ON_CALL()}  or the built-in one).| |:---------\'97|:-----------------------------------------------------------------\'97|\par
{\b Note:}  due to technical reasons, {\f2 DoDefault()}  cannot be used inside a composite action - trying to do so will result in a run-time error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoAll(a1, a2, ..., an)} \cell }{Do all actions {\f2 a1}  to {\f2 an}  and return the result of {\f2 an}  in each invocation. The first {\f2 n - 1}  sub-actions must return void.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IgnoreResult(a)}  \cell }{Perform action {\f2 a}  and ignore its result. {\f2 a}  must not return void. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArg<N>(a)}  \cell }{Pass the {\f2 N} -th (0-based) argument of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArgs<N1, N2, ..., Nk>(a)} \cell }{Pass the selected (0-based) arguments of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithoutArgs(a)}  \cell }{Perform action {\f2 a}  without any arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Sum) \{ return arg0 + arg1; \}}  \cell }{Defines an action {\f2 Sum()}  to return the sum of the mock function's argument #0 and #1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Plus, n) \{ return arg0 + n; \}}  \cell }{Defines an action {\f2 Plus(n)}  to return the sum of the mock function's argument #0 and {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_Pk(Foo, p1, ..., pk) \{ statements; \}}  \cell }{Defines a parameterized action {\f2 Foo(p1, ..., pk)}  to execute the given {\f2 statements} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The {\f2 ACTION*}  macros cannot be used inside a function or class.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Cardinalities} \par}
These are used in {\f2 Times()}  to specify how many times a mock function will be called:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyNumber()} \cell }{The function can be called any number of times.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtLeast(n)}  \cell }{The call is expected at least {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtMost(n)}  \cell }{The call is expected at most {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Between(m, n)} \cell }{The call is expected between {\f2 m}  and {\f2 n}  (inclusive) times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Exactly(n) or n} \cell }{The call is expected exactly {\f2 n}  times. In particular, the call should never happen when {\f2 n}  is 0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Expectation Order} \par}
By default, the expectations can be matched in {\i any}  order. If some or all expectations must be matched in a given order, there are two ways to specify it. They can be used either independently or together.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The After Clause} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Expectation;\par
...\par
Expectation init_x = EXPECT_CALL(foo, InitX());\par
Expectation init_y = EXPECT_CALL(foo, InitY());\par
EXPECT_CALL(foo, Bar())\par
    .After(init_x, init_y);\par
}
 says that {\f2 Bar()}  can be called only after both {\f2 InitX()}  and {\f2 InitY()}  have been called.\par
If you don't know how many pre-requisites an expectation has when you write it, you can use an {\f2 ExpectationSet}  to collect them:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ExpectationSet;\par
...\par
ExpectationSet all_inits;\par
for (int i = 0; i < element_count; i++) \{\par
  all_inits += EXPECT_CALL(foo, InitElement(i));\par
\}\par
EXPECT_CALL(foo, Bar())\par
    .After(all_inits);\par
}
 says that {\f2 Bar()}  can be called only after all elements have been initialized (but we don't care about which elements get initialized before the others).\par
Modifying an {\f2 ExpectationSet}  after using it in an {\f2 .After()}  doesn't affect the meaning of the {\f2 .After()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sequences} \par}
When you have a long chain of sequential expectations, it's easier to specify the order using {\b sequences} , which don't require you to given each expectation in the chain a different name. {\i All expected\par
 calls}  in the same sequence must occur in the order they are specified.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
Sequence s1, s2;\par
...\par
EXPECT_CALL(foo, Reset())\par
    .InSequence(s1, s2)\par
    .WillOnce(Return(true));\par
EXPECT_CALL(foo, GetSize())\par
    .InSequence(s1)\par
    .WillOnce(Return(1));\par
EXPECT_CALL(foo, Describe(A<const char*>()))\par
    .InSequence(s2)\par
    .WillOnce(Return("dummy"));\par
}
 says that {\f2 Reset()}  must be called before {\i both}  {\f2 GetSize()}  {\i and}  {\f2 Describe()} , and the latter two can occur in any order.\par
To put many expectations in a sequence conveniently: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
\{\par
  InSequence dummy;\par
\par
  EXPECT_CALL(...)...;\par
  EXPECT_CALL(...)...;\par
  ...\par
  EXPECT_CALL(...)...;\par
\}\par
}
 says that all expected calls in the scope of {\f2 dummy}  must occur in strict order. The name {\f2 dummy}  is irrelevant.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Verifying and Resetting a {\b Mock}} \par}
Google {\b Mock} will verify the expectations on a mock object when it is destructed, or you can do it earlier: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Mock;\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// returns true iff successful.\par
Mock::VerifyAndClearExpectations(&mock_obj);\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// also removes the default actions set by ON_CALL();\par
// returns true iff successful.\par
Mock::VerifyAndClear(&mock_obj);\par
}
\par
You can also tell Google {\b Mock} that a mock object can be leaked and doesn't need to be verified: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Mock::AllowLeak(&mock_obj);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 {\b Mock} Classes} \par}
Google {\b Mock} defines a convenient mock class template {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFunction<R(A1, ..., An)> \{\par
 public:\par
  MOCK_METHODn(Call, R(A1, ..., An));\par
\};\par
}
 See this {\f2 recipe} for one application of it.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Flags} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_catch_leaked_mocks=0}  \cell }{Don't report leaked mock objects as failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_verbose=LEVEL}  \cell }{Sets the default verbosity level ({\f2 info} , {\f2 warning} , or {\f2 error} ) of Google {\b Mock} messages. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
CookBook{\tc \v CookBook}\par \pard\plain 
{\bkmkstart AAAAAAAEMP}
{\bkmkend AAAAAAAEMP}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You can find recipes for using Google {\b Mock} here. If you haven't yet, please read the ForDummies document first to make sure you understand the basics.\par
{\b Note:}  Google {\b Mock} lives in the {\f2 testing}  name space. For readability, it is recommended to write {\f2 using ::testing::Foo;}  once in your file before using the name {\f2 Foo}  defined by Google {\b Mock}. We omit such {\f2 using}  statements in this page for brevity, but you should do it in your own code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Creating {\b Mock} Classes} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Private or Protected Methods} \par}
You must always put a mock method definition ({\f2 MOCK_METHOD*} ) in a {\f2 public:}  section of the mock class, regardless of the method being mocked being {\f2 public} , {\f2 protected} , or {\f2 private}  in the base class. This allows {\f2 ON_CALL}  and {\f2 EXPECT_CALL}  to reference the mock function from outside of the mock class. (Yes, C++ allows a subclass to change the access level of a virtual function in the base class.) Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  ...\par
  virtual bool Transform(Gadget* g) = 0;\par
\par
 protected:\par
  virtual void Resume();\par
\par
 private:\par
  virtual int GetTimeOut();\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  ...\par
  MOCK_METHOD1(Transform, bool(Gadget* g));\par
\par
  // The following must be in the public section, even though the\par
  // methods are protected or private in the base class.\par
  MOCK_METHOD0(Resume, void());\par
  MOCK_METHOD0(GetTimeOut, int());\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Overloaded Methods} \par}
You can mock overloaded functions as usual. No special attention is required:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
\par
  // Must be virtual as we'll inherit from Foo.\par
  virtual ~Foo();\par
\par
  // Overloaded on the types and/or numbers of arguments.\par
  virtual int Add(Element x);\par
  virtual int Add(int times, Element x);\par
\par
  // Overloaded on the const-ness of this object.\par
  virtual Bar& GetBar();\par
  virtual const Bar& GetBar() const;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Add, int(Element x));\par
  MOCK_METHOD2(Add, int(int times, Element x);\par
\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
}
\par
{\b Note:}  if you don't mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use {\f2 using}  to bring them in scope:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  using Foo::Add;\par
  MOCK_METHOD1(Add, int(Element x));\par
  // We don't want to mock int Add(int times, Element x);\par
  ...\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Class Templates} \par}
To mock a class template, append {\f2 _T}  to the {\f2 MOCK_*}  macros:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
  ...\par
  // Must be virtual as we'll inherit from StackInterface.\par
  virtual ~StackInterface();\par
\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
\par
template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Nonvirtual Methods} \par}
Google {\b Mock} can mock non-virtual functions to be used in what we call {\i hi-perf dependency injection} .\par
In this case, instead of sharing a common base class with the real class, your mock class will be {\i unrelated}  to the real class, but contain methods with the same signatures. The syntax for mocking non-virtual methods is the {\i same}  as mocking virtual methods:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A simple packet stream class.  None of its members is virtual.\par
class ConcretePacketStream \{\par
 public:\par
  void AppendPacket(Packet* new_packet);\par
  const Packet* GetPacket(size_t packet_number) const;\par
  size_t NumberOfPackets() const;\par
  ...\par
\};\par
\par
// A mock packet stream class.  It inherits from no other, but defines\par
// GetPacket() and NumberOfPackets().\par
class MockPacketStream \{\par
 public:\par
  MOCK_CONST_METHOD1(GetPacket, const Packet*(size_t packet_number));\par
  MOCK_CONST_METHOD0(NumberOfPackets, size_t());\par
  ...\par
\};\par
}
\par
Note that the mock class doesn't define {\f2 AppendPacket()} , unlike the real class. That's fine as long as the test doesn't need to call it.\par
Next, you need a way to say that you want to use {\f2 ConcretePacketStream}  in production code, and use {\f2 MockPacketStream}  in tests. Since the functions are not virtual and the two classes are unrelated, you must specify your choice at {\i compile time}  (as opposed to run time).\par
One way to do it is to templatize your code that needs to use a packet stream. More specifically, you will give your code a template type argument for the type of the packet stream. In production, you will instantiate your template with {\f2 ConcretePacketStream}  as the type argument. In tests, you will instantiate the same template with {\f2 MockPacketStream} . For example, you may write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <class PacketStream>\par
void CreateConnection(PacketStream* stream) \{ ... \}\par
\par
template <class PacketStream>\par
class PacketReader \{\par
 public:\par
  void ReadPackets(PacketStream* stream, size_t packet_num);\par
\};\par
}
\par
Then you can use {\f2 CreateConnection<ConcretePacketStream>()}  and {\f2 PacketReader<ConcretePacketStream>}  in production code, and use {\f2 CreateConnection<MockPacketStream>()}  and {\f2 PacketReader<MockPacketStream>}  in tests.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockPacketStream mock_stream;\par
EXPECT_CALL(mock_stream, ...)...;\par
.. set more expectations on mock_stream ...\par
PacketReader<MockPacketStream> reader(&mock_stream);\par
... exercise reader ...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Free Functions} \par}
It's possible to use Google {\b Mock} to mock a free function (i.e. a C-style function or a static method). You just need to rewrite your code to use an interface (abstract class).\par
Instead of calling a free function (say, {\f2 OpenFile} ) directly, introduce an interface for it and have a concrete subclass that calls the free function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) = 0;\par
\};\par
\par
class File : public FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) \{\par
    return OpenFile(path, mode);\par
  \}\par
\};\par
}
\par
Your code should talk to {\f2 FileInterface}  to open a file. Now it's easy to mock out the function.\par
This may seem much hassle, but in practice you often have multiple related functions that you can put in the same interface, so the per-function syntactic overhead will be much lower.\par
If you are concerned about the performance overhead incurred by virtual functions, and profiling confirms your concern, you can combine this with the recipe for {\f2 mocking non-virtual methods}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Nice, the Strict, and the Naggy} \par}
If a mock method has no {\f2 EXPECT_CALL}  spec but is called, Google {\b Mock} will print a warning about the "uninteresting call". The rationale is:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
New methods may be added to an interface after a test is written. We shouldn't fail a test just because a method it doesn't know about is called.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
However, this may also mean there's a bug in the test, so Google {\b Mock} shouldn't be silent either. If the user believes these calls are harmless, he can add an {\f2 EXPECT_CALL()}  to suppress the warning.\par}
However, sometimes you may want to suppress all "uninteresting call" warnings, while sometimes you may want the opposite, i.e. to treat all of them as errors. Google {\b Mock} lets you make the decision on a per-mock-object basis.\par
Suppose your test uses a mock class {\f2 {\b MockFoo}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(...) \{\par
  MockFoo mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
If a method of {\f2 mock_foo}  other than {\f2 DoThis()}  is called, it will be reported by Google {\b Mock} as a warning. However, if you rewrite your test to use {\f2 NiceMock<{\b MockFoo}>}  instead, the warning will be gone, resulting in a cleaner test output:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
{\f2 NiceMock<{\b MockFoo}>}  is a subclass of {\f2 {\b MockFoo}} , so it can be used wherever {\f2 {\b MockFoo}}  is accepted.\par
It also works if {\f2 {\b MockFoo}} 's constructor takes some arguments, as {\f2 NiceMock<{\b MockFoo}>}  "inherits" {\f2 {\b MockFoo}} 's constructors:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo(5, "hi");  // Calls MockFoo(5, "hi").\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
The usage of {\f2 StrictMock}  is similar, except that it makes all uninteresting calls failures:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::StrictMock;\par
\par
TEST(...) \{\par
  StrictMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\par
  // The test will fail if a method of mock_foo other than DoThis()\par
  // is called.\par
\}\par
}
\par
There are some caveats though (I don't like them just as much as the next guy, but sadly they are side effects of C++'s limitations):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 NiceMock<{\b MockFoo}>}  and {\f2 StrictMock<{\b MockFoo}>}  only work for mock methods defined using the {\f2 MOCK_METHOD*}  family of macros {\b directly}  in the {\f2 {\b MockFoo}}  class. If a mock method is defined in a {\b base class}  of {\f2 {\b MockFoo}} , the "nice" or "strict" modifier may not affect it, depending on the compiler. In particular, nesting {\f2 NiceMock}  and {\f2 StrictMock}  (e.g. {\f2 NiceMock<StrictMock<{\b MockFoo}> >} ) is {\b not}  supported.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The constructors of the base mock ({\f2 {\b MockFoo}} ) cannot have arguments passed by non-const reference, which happens to be banned by the {\f2 Google C++ style guide}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab During the constructor or destructor of {\f2 {\b MockFoo}} , the mock object is {\i not}  nice or strict. This may cause surprises if the constructor or destructor calls a mock method on {\f2 this}  object. (This behavior, however, is consistent with C++'s general rule: if a constructor or destructor calls a virtual method of {\f2 this}  object, that method is treated as non-virtual. In other words, to the base class's constructor or destructor, {\f2 this}  object behaves like an instance of the base class, not the derived class. This rule is required for safety. Otherwise a base constructor may use members of a derived class before they are initialized, or a base destructor may use members of a derived class after they have been destroyed.)\par}
Finally, you should be {\b very cautious}  about when to use naggy or strict mocks, as they tend to make tests more brittle and harder to maintain. When you refactor your code without changing its externally visible behavior, ideally you should't need to update any tests. If your code interacts with a naggy mock, however, you may start to get spammed with warnings as the result of your change. Worse, if your code interacts with a strict mock, your tests may start to fail and you'll be forced to fix them. Our general recommendation is to use nice mocks (not yet the default) most of the time, use naggy mocks (the current default) when developing or debugging tests, and use strict mocks only as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Simplifying the {\b Interface} without Breaking Existing Code} \par}
Sometimes a method has a long list of arguments that is mostly uninteresting. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line,\par
                    const struct tm* tm_time,\par
                    const char* message, size_t message_len) = 0;\par
\};\par
}
\par
This method's argument list is lengthy and hard to work with (let's say that the {\f2 message}  argument is not even 0-terminated). If we mock it as is, using the mock will be awkward. If, however, we try to simplify this interface, we'll need to fix all clients depending on it, which is often infeasible.\par
The trick is to re-dispatch the method in the mock class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ScopedMockLog : public LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line, const tm* tm_time,\par
                    const char* message, size_t message_len) \{\par
    // We are only interested in the log severity, full file name, and\par
    // log message.\par
    Log(severity, full_filename, std::string(message, message_len));\par
  \}\par
\par
  // Implements the mock method:\par
  //\par
  //   void Log(LogSeverity severity,\par
  //            const string& file_path,\par
  //            const string& message);\par
  MOCK_METHOD3(Log, void(LogSeverity severity, const string& file_path,\par
                         const string& message));\par
\};\par
}
\par
By defining a new mock method with a trimmed argument list, we make the mock class much more user-friendly.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Alternative to Mocking Concrete Classes} \par}
Often you may find yourself using classes that don't implement interfaces. In order to test your code that uses such a class (let's call it {\f2 Concrete} ), you may be tempted to make the methods of {\f2 Concrete}  virtual and then mock it.\par
Try not to do that.\par
Making a non-virtual function virtual is a big decision. It creates an extension point where subclasses can tweak your class' behavior. This weakens your control on the class because now it's harder to maintain the class' invariants. You should make a function virtual only when there is a valid reason for a subclass to override it.\par
Mocking concrete classes directly is problematic as it creates a tight coupling between the class and the tests - any small change in the class may invalidate your tests and make test maintenance a pain.\par
To avoid such problems, many programmers have been practicing "coding
to interfaces": instead of talking to the {\f2 Concrete}  class, your code would define an interface and talk to it. Then you implement that interface as an adaptor on top of {\f2 Concrete} . In tests, you can easily mock that interface to observe how your code is doing.\par
This technique incurs some overhead:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You pay the cost of virtual function calls (usually not a problem).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There is more abstraction for the programmers to learn.\par}
However, it can also bring significant benefits in addition to better testability:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Concrete} 's API may not fit your problem domain very well, as you may not be the only client it tries to serve. By designing your own interface, you have a chance to tailor it to your need - you may add higher-level functionalities, rename stuff, etc instead of just trimming the class. This allows you to write your code (user of the interface) in a more natural way, which means it will be more readable, more maintainable, and you'll be more productive.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Concrete} 's implementation ever has to change, you don't have to rewrite everywhere it is used. Instead, you can absorb the change in your implementation of the interface, and your other code and tests will be insulated from this change.\par}
Some people worry that if everyone is practicing this technique, they will end up writing lots of redundant code. This concern is totally understandable. However, there are two reasons why it may not be the case:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Different projects may need to use {\f2 Concrete}  in different ways, so the best interfaces for them will be different. Therefore, each of them will have its own domain-specific interface on top of {\f2 Concrete} , and they will not be the same code.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If enough projects want to use the same interface, they can always share it, just like they have been sharing {\f2 Concrete} . You can check in the interface and the adaptor somewhere near {\f2 Concrete}  (perhaps in a {\f2 contrib}  sub-directory) and let many projects use it.\par}
You need to weigh the pros and cons carefully for your particular problem, but I'd like to assure you that the Java community has been practicing this for a long time and it's a proven effective technique applicable in a wide variety of situations. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Fake} \par}
Some times you have a non-trivial fake implementation of an interface. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo() \{\}\par
  virtual char DoThis(int n) = 0;\par
  virtual void DoThat(const char* s, int* p) = 0;\par
\};\par
\par
class FakeFoo : public Foo \{\par
 public:\par
  virtual char DoThis(int n) \{\par
    return (n > 0) ? '+' :\par
        (n < 0) ? '-' : '0';\par
  \}\par
\par
  virtual void DoThat(const char* s, int* p) \{\par
    *p = strlen(s);\par
  \}\par
\};\par
}
\par
Now you want to mock this interface such that you can set expectations on it. However, you also want to use {\f2 FakeFoo}  for the default behavior, as duplicating it in the mock object is, well, a lot of work.\par
When you define the mock class using Google {\b Mock}, you can have it delegate its default action to a fake class you already have, using this pattern:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Normal mock method definitions using Google Mock.\par
  MOCK_METHOD1(DoThis, char(int n));\par
  MOCK_METHOD2(DoThat, void(const char* s, int* p));\par
\par
  // Delegates the default actions of the methods to a FakeFoo object.\par
  // This must be called *before* the custom ON_CALL() statements.\par
  void DelegateToFake() \{\par
    ON_CALL(*this, DoThis(_))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThis));\par
    ON_CALL(*this, DoThat(_, _))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThat));\par
  \}\par
 private:\par
  FakeFoo fake_;  // Keeps an instance of the fake in the mock.\par
\};\par
}
\par
With that, you can use {\f2 {\b MockFoo}}  in your tests as usual. Just remember that if you don't explicitly set an action in an {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , the fake will be called upon to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
TEST(AbcTest, Xyz) \{\par
  MockFoo foo;\par
  foo.DelegateToFake(); // Enables the fake for delegation.\par
\par
  // Put your ON_CALL(foo, ...)s here, if any.\par
\par
  // No action specified, meaning to use the default action.\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(foo, DoThat(_, _));\par
\par
  int n = 0;\par
  EXPECT_EQ('+', foo.DoThis(5));  // FakeFoo::DoThis() is invoked.\par
  foo.DoThat("Hi", &n);           // FakeFoo::DoThat() is invoked.\par
  EXPECT_EQ(2, n);\par
\}\par
}
\par
{\b Some tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you want, you can still override the default action by providing your own {\f2 ON_CALL()}  or using {\f2 .WillOnce()}  / {\f2 .WillRepeatedly()}  in {\f2 EXPECT_CALL()} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In {\f2 DelegateToFake()} , you only need to delegate the methods whose fake implementation you intend to use.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The general technique discussed here works for overloaded methods, but you'll need to tell the compiler which version you mean. To disambiguate a mock function (the one you specify inside the parentheses of {\f2 ON_CALL()} ), see the "Selecting Between Overloaded Functions" section on this page; to disambiguate a fake function (the one you place inside {\f2 Invoke()} ), use a {\f2 static_cast}  to specify the function's type. For instance, if class {\f2 Foo}  has methods {\f2 char DoThis(int n)}  and {\f2 bool DoThis(double x) const} , and you want to invoke the latter, you need to write {\f2 Invoke(&fake_, static_cast<bool (FakeFoo::*)(double) const>(&FakeFoo::DoThis))}  instead of {\f2 Invoke(&fake_, &FakeFoo::DoThis)}  (The strange-looking thing inside the angled brackets of {\f2 static_cast}  is the type of a function pointer to the second {\f2 DoThis()}  method.).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Having to mix a mock and a fake is often a sign of something gone wrong. Perhaps you haven't got used to the interaction-based way of testing yet. Or perhaps your interface is taking on too many roles and should be split up. Therefore, {\b don't abuse this} . We would only recommend to do it as an intermediate step when you are refactoring your code.\par}
Regarding the tip on mixing a mock and a fake, here's an example on why it may be a bad sign: Suppose you have a class {\f2 System}  for low-level system operations. In particular, it does file and I/O operations. And suppose you want to test how your code uses {\f2 System}  to do I/O, and you just want the file operations to work normally. If you mock out the entire {\f2 System}  class, you'll have to provide a fake implementation for the file operation part, which suggests that {\f2 System}  is taking on too many roles.\par
Instead, you can define a {\f2 FileOps}  interface and an {\f2 IOOps}  interface and split {\f2 System} 's functionalities into the two. Then you can mock {\f2 IOOps}  without mocking {\f2 FileOps} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Real Object} \par}
When using testing doubles (mocks, fakes, stubs, and etc), sometimes their behaviors will differ from those of the real objects. This difference could be either intentional (as in simulating an error such that you can test the error handling code) or unintentional. If your mocks have different behaviors than the real objects by mistake, you could end up with code that passes the tests but fails in production.\par
You can use the {\i delegating-to-real}  technique to ensure that your mock has the same behavior as the real object while retaining the ability to validate calls. This technique is very similar to the delegating-to-fake technique, the difference being that we use a real object instead of a fake. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AtLeast;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MockFoo() \{\par
    // By default, all calls are delegated to the real object.\par
    ON_CALL(*this, DoThis())\par
        .WillByDefault(Invoke(&real_, &Foo::DoThis));\par
    ON_CALL(*this, DoThat(_))\par
        .WillByDefault(Invoke(&real_, &Foo::DoThat));\par
    ...\par
  \}\par
  MOCK_METHOD0(DoThis, ...);\par
  MOCK_METHOD1(DoThat, ...);\par
  ...\par
 private:\par
  Foo real_;\par
\};\par
...\par
\par
  MockFoo mock;\par
\par
  EXPECT_CALL(mock, DoThis())\par
      .Times(3);\par
  EXPECT_CALL(mock, DoThat("Hi"))\par
      .Times(AtLeast(1));\par
  ... use mock in test ...\par
}
\par
With this, Google {\b Mock} will verify that your code made the right calls (with the right arguments, in the right order, called the right number of times, etc), and a real object will answer the calls (so the behavior will be the same as in production). This gives you the best of both worlds.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Parent Class} \par}
Ideally, you should code to interfaces, whose methods are all pure virtual. In reality, sometimes you do need to mock a virtual method that is not pure (i.e, it already has an implementation). For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo();\par
\par
  virtual void Pure(int n) = 0;\par
  virtual int Concrete(const char* str) \{ ... \}\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\};\par
}
\par
Sometimes you may want to call {\f2 Foo::Concrete()}  instead of {\f2 MockFoo::Concrete()} . Perhaps you want to do it as part of a stub action, or perhaps your test doesn't need to mock {\f2 Concrete()}  at all (but it would be oh-so painful to have to define a new mock class whenever you don't need to mock one of its methods).\par
The trick is to leave a back door in your mock class for accessing the real methods in the base class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\par
  // Use this to call Concrete() defined in Foo.\par
  int FooConcrete(const char* str) \{ return Foo::Concrete(str); \}\par
\};\par
}
\par
Now, you can call {\f2 Foo::Concrete()}  inside an action by:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  EXPECT_CALL(foo, Concrete(_))\par
      .WillOnce(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
or tell the mock object that you don't want to mock {\f2 Concrete()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Invoke;\par
...\par
  ON_CALL(foo, Concrete(_))\par
      .WillByDefault(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
(Why don't we just write {\f2 Invoke(&foo, &Foo::Concrete)} ? If you do that, {\f2 MockFoo::Concrete()}  will be called (and cause an infinite recursion) since {\f2 Foo::Concrete()}  is virtual. That's just how C++ works.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Matchers} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Argument Values Exactly} \par}
You can specify exactly which arguments a mock method is expecting:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(5))\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Simple Matchers} \par}
You can use matchers to match arguments that have a certain property:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::NotNull;\par
using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(Ge(5)))  // The argument must be >= 5.\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", NotNull()));\par
  // The second argument must not be NULL.\par
}
\par
A frequently used matcher is {\f2 _} , which matches anything:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::NotNull;\par
...\par
  EXPECT_CALL(foo, DoThat(_, NotNull()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Matchers} \par}
You can build complex matchers from existing ones using {\f2 AllOf()} , {\f2 AnyOf()} , and {\f2 Not()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::Gt;\par
using ::testing::HasSubstr;\par
using ::testing::Ne;\par
using ::testing::Not;\par
...\par
  // The argument must be > 5 and != 10.\par
  EXPECT_CALL(foo, DoThis(AllOf(Gt(5),\par
                                Ne(10))));\par
\par
  // The first argument must not contain sub-string "blah".\par
  EXPECT_CALL(foo, DoThat(Not(HasSubstr("blah")),\par
                          NULL));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Casting Matchers} \par}
Google {\b Mock} matchers are statically typed, meaning that the compiler can catch your mistake if you use a matcher of the wrong type (for example, if you use {\f2 Eq(5)}  to match a {\f2 string}  argument). Good for you!\par
Sometimes, however, you know what you're doing and want the compiler to give you some slack. One example is that you have a matcher for {\f2 long}  and the argument you want to match is {\f2 int} . While the two types aren't exactly the same, there is nothing really wrong with using a {\f2 Matcher<long>}  to match an {\f2 int}  - after all, we can first convert the {\f2 int}  argument to a {\f2 long}  before giving it to the matcher.\par
To support this need, Google {\b Mock} gives you the {\f2 SafeMatcherCast<T>(m)}  function. It casts a matcher {\f2 m}  to type {\f2 Matcher<T>} . To ensure safety, Google {\b Mock} checks that (let {\f2 U}  be the type {\f2 m}  accepts):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Type {\f2 T}  can be implicitly cast to type {\f2 U} ;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When both {\f2 T}  and {\f2 U}  are built-in arithmetic types ({\f2 bool} , integers, and floating-point numbers), the conversion from {\f2 T}  to {\f2 U}  is not lossy (in other words, any value representable by {\f2 T}  can also be represented by {\f2 U} ); and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When {\f2 U}  is a reference, {\f2 T}  must also be a reference (as the underlying matcher may be interested in the address of the {\f2 U}  value).\par}
The code won't compile if any of these conditions isn't met.\par
Here's one example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SafeMatcherCast;\par
\par
// A base class and a child class.\par
class Base \{ ... \};\par
class Derived : public Base \{ ... \};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(DoThis, void(Derived* derived));\par
\};\par
...\par
\par
  MockFoo foo;\par
  // m is a Matcher<Base*> we got from somewhere.\par
  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\par
}
\par
If you find {\f2 SafeMatcherCast<T>(m)}  too limiting, you can use a similar function {\f2 MatcherCast<T>(m)} . The difference is that {\f2 MatcherCast}  works as long as you can {\f2 static_cast}  type {\f2 T}  to type {\f2 U} .\par
{\f2 MatcherCast}  essentially lets you bypass C++'s type system ({\f2 static_cast}  isn't always safe as it could throw away information, for example), so be careful not to misuse/abuse it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Between Overloaded Functions} \par}
If you expect an overloaded function to be called, the compiler may need some help on which overloaded version it is.\par
To disambiguate functions overloaded on the const-ness of this object, use the {\f2 Const()}  argument wrapper.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar1, bar2;\par
  EXPECT_CALL(foo, GetBar())         // The non-const GetBar().\par
      .WillOnce(ReturnRef(bar1));\par
  EXPECT_CALL(Const(foo), GetBar())  // The const GetBar().\par
      .WillOnce(ReturnRef(bar2));\par
}
\par
({\f2 Const()}  is defined by Google {\b Mock} and returns a {\f2 const}  reference to its argument.)\par
To disambiguate overloaded functions with the same number of arguments but different argument types, you may need to specify the exact type of a matcher, either by wrapping your matcher in {\f2 Matcher<type>()} , or using a matcher whose type is fixed ({\f2 TypedEq<type>} , {\f2 An<type>()} , etc):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::An;\par
using ::testing::Lt;\par
using ::testing::Matcher;\par
using ::testing::TypedEq;\par
\par
class MockPrinter : public Printer \{\par
 public:\par
  MOCK_METHOD1(Print, void(int n));\par
  MOCK_METHOD1(Print, void(char c));\par
\};\par
\par
TEST(PrinterTest, Print) \{\par
  MockPrinter printer;\par
\par
  EXPECT_CALL(printer, Print(An<int>()));            // void Print(int);\par
  EXPECT_CALL(printer, Print(Matcher<int>(Lt(5))));  // void Print(int);\par
  EXPECT_CALL(printer, Print(TypedEq<char>('a')));   // void Print(char);\par
\par
  printer.Print(3);\par
  printer.Print(6);\par
  printer.Print('a');\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Performing Different Actions Based on the Arguments} \par}
When a mock method is called, the {\i last}  matching expectation that's still active will be selected (think "newer overrides older"). So, you can make a method do different things depending on its argument values like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Return;\par
...\par
  // The default case.\par
  EXPECT_CALL(foo, DoThis(_))\par
      .WillRepeatedly(Return('b'));\par
\par
  // The more specific case.\par
  EXPECT_CALL(foo, DoThis(Lt(5)))\par
      .WillRepeatedly(Return('a'));\par
}
\par
Now, if {\f2 foo.DoThis()}  is called with a value less than 5, {\f2 'a'}  will be returned; otherwise {\f2 'b'}  will be returned.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Multiple Arguments as a Whole} \par}
Sometimes it's not enough to match the arguments individually. For example, we may want to say that the first argument must be less than the second argument. The {\f2 With()}  clause allows us to match all arguments of a mock function as a whole. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Ne;\par
...\par
  EXPECT_CALL(foo, InRange(Ne(0), _))\par
      .With(Lt());\par
}
\par
says that the first argument of {\f2 InRange()}  must not be 0, and must be less than the second argument.\par
The expression inside {\f2 With()}  must be a matcher of type {\f2 Matcher< ::testing::tuple<A1, ..., An> >} , where {\f2 A1} , ..., {\f2 An}  are the types of the function arguments.\par
You can also write {\f2 AllArgs(m)}  instead of {\f2 m}  inside {\f2 .With()} . The two forms are equivalent, but {\f2 .With(AllArgs(Lt()))}  is more readable than {\f2 .With(Lt())} .\par
You can use {\f2 Args<k1, ..., kn>(m)}  to match the {\f2 n}  selected arguments (as a tuple) against {\f2 m} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AllOf;\par
using ::testing::Args;\par
using ::testing::Lt;\par
...\par
  EXPECT_CALL(foo, Blah(_, _, _))\par
      .With(AllOf(Args<0, 1>(Lt()), Args<1, 2>(Lt())));\par
}
\par
says that {\f2 Blah()}  will be called with arguments {\f2 x} , {\f2 y} , and {\f2 z}  where {\f2 x < y < z} .\par
As a convenience and example, Google {\b Mock} provides some matchers for 2-tuples, including the {\f2 Lt()}  matcher above. See the CheatSheet for the complete list.\par
Note that if you want to pass the arguments to a predicate of your own (e.g. {\f2 .With(Args<0, 1>(Truly(&MyPredicate)))} ), that predicate MUST be written to take a {\f2 ::testing::tuple}  as its argument; Google {\b Mock} will pass the {\f2 n}  selected arguments as {\i one}  single tuple to the predicate.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers as Predicates} \par}
Have you noticed that a matcher is just a fancy predicate that also knows how to describe itself? Many existing algorithms take predicates as arguments (e.g. those defined in STL's {\f2 <algorithm>}  header), and it would be a shame if Google {\b Mock} matchers are not allowed to participate.\par
Luckily, you can use a matcher where a unary predicate functor is expected by wrapping it inside the {\f2 Matches()}  function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <algorithm>\par
#include <vector>\par
\par
std::vector<int> v;\par
...\par
// How many elements in v are >= 10?\par
const int count = count_if(v.begin(), v.end(), Matches(Ge(10)));\par
}
\par
Since you can build complex matchers from simpler ones easily using Google {\b Mock}, this gives you a way to conveniently construct composite predicates (doing the same using STL's {\f2 <functional>}  header is just painful). For example, here's a predicate that's satisfied by any number that is >= 0, <= 100, and != 50:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matches(AllOf(Ge(0), Le(100), Ne(50)))\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers in Google Test Assertions} \par}
Since matchers are basically predicates that also know how to describe themselves, there is a way to take advantage of them in {\f2 Google Test} assertions. It's called {\f2 ASSERT_THAT}  and {\f2 EXPECT_THAT} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THAT(value, matcher);  // Asserts that value matches matcher.\par
EXPECT_THAT(value, matcher);  // The non-fatal version.\par
}
\par
For example, in a Google Test test you can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"\par
\par
using ::testing::AllOf;\par
using ::testing::Ge;\par
using ::testing::Le;\par
using ::testing::MatchesRegex;\par
using ::testing::StartsWith;\par
...\par
\par
  EXPECT_THAT(Foo(), StartsWith("Hello"));\par
  EXPECT_THAT(Bar(), MatchesRegex("Line \\\\d+"));\par
  ASSERT_THAT(Baz(), AllOf(Ge(5), Le(10)));\par
}
\par
which (as you can probably guess) executes {\f2 Foo()} , {\f2 Bar()} , and {\f2 Baz()} , and verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Foo()}  returns a string that starts with {\f2 "Hello"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Bar()}  returns a string that matches regular expression {\f2 "Line \\\\d+"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Baz()}  returns a number in the range [5, 10].\par}
The nice thing about these macros is that {\i they read like English} . They generate informative messages too. For example, if the first {\f2 EXPECT_THAT()}  above fails, the message will be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Foo()\par
  Actual: "Hi, world!"\par
Expected: starts with "Hello"\par
}
\par
{\b Credit:}  The idea of {\f2 (ASSERT|EXPECT)_THAT}  was stolen from the {\f2 Hamcrest} project, which adds {\f2 assertThat()}  to JUnit.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Predicates as Matchers} \par}
Google {\b Mock} provides a built-in set of matchers. In case you find them lacking, you can use an arbitray unary predicate function or functor as a matcher - as long as the predicate accepts a value of the type you want. You do this by wrapping the predicate inside the {\f2 Truly()}  function, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Truly;\par
\par
int IsEven(int n) \{ return (n % 2) == 0 ? 1 : 0; \}\par
...\par
\par
  // Bar() must be called with an even number.\par
  EXPECT_CALL(foo, Bar(Truly(IsEven)));\par
}
\par
Note that the predicate function / functor doesn't have to return {\f2 bool} . It works as long as the return value can be used as the condition in statement {\f2 if (condition) ...} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Arguments that Are Not Copyable} \par}
When you do an {\f2 EXPECT_CALL(mock_obj, Foo(bar))} , Google {\b Mock} saves away a copy of {\f2 bar} . When {\f2 Foo()}  is called later, Google {\b Mock} compares the argument to {\f2 Foo()}  with the saved copy of {\f2 bar} . This way, you don't need to worry about {\f2 bar}  being modified or destroyed after the {\f2 EXPECT_CALL()}  is executed. The same is true when you use matchers like {\f2 Eq(bar)} , {\f2 Le(bar)} , and so on.\par
But what if {\f2 bar}  cannot be copied (i.e. has no copy constructor)? You could define your own matcher function and use it with {\f2 Truly()} , as the previous couple of recipes have shown. Or, you may be able to get away from it if you can guarantee that {\f2 bar}  won't be changed after the {\f2 EXPECT_CALL()}  is executed. Just tell Google {\b Mock} that it should save a reference to {\f2 bar} , instead of a copy of it. Here's how:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Eq;\par
using ::testing::ByRef;\par
using ::testing::Lt;\par
...\par
  // Expects that Foo()'s argument == bar.\par
  EXPECT_CALL(mock_obj, Foo(Eq(ByRef(bar))));\par
\par
  // Expects that Foo()'s argument < bar.\par
  EXPECT_CALL(mock_obj, Foo(Lt(ByRef(bar))));\par
}
\par
Remember: if you do this, don't change {\f2 bar}  after the {\f2 EXPECT_CALL()} , or the result is undefined.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating a Member of an Object} \par}
Often a mock function takes a reference to object as an argument. When matching the argument, you may not want to compare the entire object against a fixed object, as that may be over-specification. Instead, you may need to validate a certain member variable or the result of a certain getter method of the object. You can do this with {\f2 Field()}  and {\f2 Property()} . More specifically,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::bar, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 bar}  member variable satisfies matcher {\f2 m} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Property(&Foo::baz, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 baz()}  method returns a value that satisfies matcher {\f2 m} .\par
For example:\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Field(&Foo::number, Ge(3))}  | Matches {\f2 x}  where {\f2 x.number >= 3} . | \par
}|:--------------------------\'97|:--------------------------------\'97| \par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Property(&Foo::name, StartsWith("John "))}  | Matches {\f2 x}  where {\f2 x.name()}  starts with {\f2 "John "} . | \par
}Note that in {\f2 Property(&Foo::baz, ...)} , method {\f2 baz()}  must take no argument and be declared as {\f2 const} .\par
BTW, {\f2 Field()}  and {\f2 Property()}  can also match plain pointers to objects. For instance,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::number, Ge(3))\par
}
\par
matches a plain pointer {\f2 p}  where {\f2 p->number >= 3} . If {\f2 p}  is {\f2 NULL} , the match will always fail regardless of the inner matcher.\par
What if you want to validate more than one members at the same time? Remember that there is {\f2 AllOf()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating the Value Pointed to by a Pointer Argument} \par}
C++ functions often take pointers as arguments. You can use matchers like {\f2 IsNull()} , {\f2 NotNull()} , and other comparison matchers to match a pointer, but what if you want to make sure the value {\i pointed to}  by the pointer, instead of the pointer itself, has a certain property? Well, you can use the {\f2 Pointee(m)}  matcher.\par
{\f2 Pointee(m)}  matches a pointer iff {\f2 m}  matches the value the pointer points to. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::Pointee;\par
...\par
  EXPECT_CALL(foo, Bar(Pointee(Ge(3))));\par
}
\par
expects {\f2 foo.Bar()}  to be called with a pointer that points to a value greater than or equal to 3.\par
One nice thing about {\f2 Pointee()}  is that it treats a {\f2 NULL}  pointer as a match failure, so you can write {\f2 Pointee(m)}  instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid AllOf(NotNull(), Pointee(m))\par
}
\par
without worrying that a {\f2 NULL}  pointer will crash your test.\par
Also, did we tell you that {\f2 Pointee()}  works with both raw pointers {\b and}  smart pointers ({\f2 linked_ptr} , {\f2 shared_ptr} , {\f2 scoped_ptr} , and etc)?\par
What if you have a pointer to pointer? You guessed it - you can use nested {\f2 Pointee()}  to probe deeper inside the value. For example, {\f2 Pointee(Pointee(Lt(3)))}  matches a pointer that points to a pointer that points to a number less than 3 (what a mouthful...).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing a Certain Property of an Object} \par}
Sometimes you want to specify that an object argument has a certain property, but there is no existing matcher that does this. If you want good error messages, you should define a matcher. If you want to do it quick and dirty, you could get away with writing an ordinary function.\par
Let's say you have a mock function that takes an object of type {\f2 Foo} , which has an {\f2 int bar()}  method and an {\f2 int baz()}  method, and you want to constrain that the argument's {\f2 bar()}  value plus its {\f2 baz()}  value is a given number. Here's how you can define a matcher to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class BarPlusBazEqMatcher : public MatcherInterface<const Foo&> \{\par
 public:\par
  explicit BarPlusBazEqMatcher(int expected_sum)\par
      : expected_sum_(expected_sum) \{\}\par
\par
  virtual bool MatchAndExplain(const Foo& foo,\par
                               MatchResultListener* listener) const \{\par
    return (foo.bar() + foo.baz()) == expected_sum_;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() equals " << expected_sum_;\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() does not equal " << expected_sum_;\par
  \}\par
 private:\par
  const int expected_sum_;\par
\};\par
\par
inline Matcher<const Foo&> BarPlusBazEq(int expected_sum) \{\par
  return MakeMatcher(new BarPlusBazEqMatcher(expected_sum));\par
\}\par
\par
...\par
\par
  EXPECT_CALL(..., DoThis(BarPlusBazEq(5)))...;\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Containers} \par}
Sometimes an STL container (e.g. list, vector, map, ...) is passed to a mock function and you may want to validate it. Since most STL containers support the {\f2 ==}  operator, you can write {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly.\par
Sometimes, though, you may want to be more flexible (for example, the first element must be an exact match, but the second element can be any positive number, and so on). Also, containers used in tests often have a small number of elements, and having to define the expected container out-of-line is a bit of a hassle.\par
You can use the {\f2 ElementsAre()}  or {\f2 UnorderedElementsAre()}  matcher in such cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::ElementsAre;\par
using ::testing::Gt;\par
...\par
\par
  MOCK_METHOD1(Foo, void(const vector<int>& numbers));\par
...\par
\par
  EXPECT_CALL(mock, Foo(ElementsAre(1, Gt(0), _, 5)));\par
}
\par
The above matcher says that the container must have 4 elements, which must be 1, greater than 0, anything, and 5 respectively.\par
If you instead write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Gt;\par
using ::testing::UnorderedElementsAre;\par
...\par
\par
  MOCK_METHOD1(Foo, void(const vector<int>& numbers));\par
...\par
\par
  EXPECT_CALL(mock, Foo(UnorderedElementsAre(1, Gt(0), _, 5)));\par
}
\par
It means that the container must have 4 elements, which under some permutation must be 1, greater than 0, anything, and 5 respectively.\par
{\f2 ElementsAre()}  and {\f2 UnorderedElementsAre()}  are overloaded to take 0 to 10 arguments. If more are needed, you can place them in a C-style array and use {\f2 ElementsAreArray()}  or {\f2 UnorderedElementsAreArray()}  instead:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
\par
  // ElementsAreArray accepts an array of element values.\par
  const int expected_vector1[] = \{ 1, 5, 2, 4, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector1)));\par
\par
  // Or, an array of element matchers.\par
  Matcher<int> expected_vector2 = \{ 1, Gt(2), _, 3, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector2)));\par
}
\par
In case the array needs to be dynamically created (and therefore the array size cannot be inferred by the compiler), you can give {\f2 ElementsAreArray()}  an additional argument to specify the array size:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
  int* const expected_vector3 = new int[count];\par
  ... fill expected_vector3 with values ...\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector3, count)));\par
}
\par
{\b Tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ElementsAre*()}  can be used to match {\i any}  container that implements the STL iterator pattern (i.e. it has a {\f2 const_iterator}  type and supports {\f2 begin()/end()} ), not just the ones defined in STL. It will even work with container types yet to be written - as long as they follows the above pattern.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can use nested {\f2 ElementsAre*()}  to match nested (multi-dimensional) containers.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the container is passed by pointer instead of by reference, just write {\f2 Pointee(ElementsAre*(...))} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The order of elements {\i matters}  for {\f2 ElementsAre*()} . Therefore don't use it with containers whose element order is undefined (e.g. {\f2 hash_map} ).\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Matchers} \par}
Under the hood, a Google {\b Mock} matcher object consists of a pointer to a ref-counted implementation object. Copying matchers is allowed and very efficient, as only the pointer is copied. When the last matcher that references the implementation object dies, the implementation object will be deleted.\par
Therefore, if you have some complex matcher that you want to use again and again, there is no need to build it everytime. Just assign it to a matcher variable and use that variable repeatedly! For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matcher<int> in_range = AllOf(Gt(5), Le(10));\par
... use in_range as a matcher in multiple EXPECT_CALLs ...\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Knowing When to Expect} \par}
{\f2 ON_CALL}  is likely the single most under-utilized construct in Google {\b Mock}.\par
There are basically two constructs for defining the behavior of a mock object: {\f2 ON_CALL}  and {\f2 EXPECT_CALL} . The difference? {\f2 ON_CALL}  defines what happens when a mock method is called, but {\i doesn't imply any expectation on the method being called.}  {\f2 EXPECT_CALL}  not only defines the behavior, but also sets an expectation that {\i the method will be called with the given arguments, for the given number of times}  (and {\i in the given order}  when you specify the order too).\par
Since {\f2 EXPECT_CALL}  does more, isn't it better than {\f2 ON_CALL} ? Not really. Every {\f2 EXPECT_CALL}  adds a constraint on the behavior of the code under test. Having more constraints than necessary is {\i baaad}  - even worse than not having enough constraints.\par
This may be counter-intuitive. How could tests that verify more be worse than tests that verify less? Isn't verification the whole point of tests?\par
The answer, lies in {\i what}  a test should verify. {\b A good test verifies the contract of the code.}  If a test over-specifies, it doesn't leave enough freedom to the implementation. As a result, changing the implementation without breaking the contract (e.g. refactoring and optimization), which should be perfectly fine to do, can break such tests. Then you have to spend time fixing them, only to see them broken again the next time the implementation is changed.\par
Keep in mind that one doesn't have to verify more than one property in one test. In fact, {\b it's a good style to verify only one thing in one test.}  If you do that, a bug will likely break only one or two tests instead of dozens (which case would you rather debug?). If you are also in the habit of giving tests descriptive names that tell what they verify, you can often easily guess what's wrong just from the test log itself.\par
So use {\f2 ON_CALL}  by default, and only use {\f2 EXPECT_CALL}  when you actually intend to verify that the call is made. For example, you may have a bunch of {\f2 ON_CALL} s in your test fixture to set the common mock behavior shared by all tests in the same group, and write (scarcely) different {\f2 EXPECT_CALL} s in different {\f2 TEST_F} s to verify different aspects of the code's behavior. Compared with the style where each {\f2 TEST}  has many {\f2 EXPECT_CALL} s, this leads to tests that are more resilient to implementational changes (and thus less likely to require maintenance) and makes the intent of the tests more obvious (so they are easier to maintain when you do need to maintain them).\par
If you are bothered by the "Uninteresting mock function call" message printed when a mock method without an {\f2 EXPECT_CALL}  is called, you may use a {\f2 NiceMock}  instead to suppress all such messages for the mock object, or suppress the message for specific methods by adding {\f2 EXPECT_CALL(...).Times(AnyNumber())} . DO NOT suppress it by blindly adding an {\f2 EXPECT_CALL(...)} , or you'll have a test that's a pain to maintain.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Uninteresting Calls} \par}
If you are not interested in how a mock method is called, just don't say anything about it. In this case, if the method is ever called, Google {\b Mock} will perform its default action to allow the test program to continue. If you are not happy with the default action taken by Google {\b Mock}, you can override it using {\f2 DefaultValue<T>::Set()}  (described later in this document) or {\f2 ON_CALL()} .\par
Please note that once you expressed interest in a particular mock method (via {\f2 EXPECT_CALL()} ), all invocations to it must match some expectation. If this function is called but the arguments don't match any {\f2 EXPECT_CALL()}  statement, it will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Disallowing Unexpected Calls} \par}
If a mock method shouldn't be called at all, explicitly say so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .Times(0);\par
}
\par
If some calls to the method are allowed, but the rest are not, just list all the expected calls:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AnyNumber;\par
using ::testing::Gt;\par
...\par
  EXPECT_CALL(foo, Bar(5));\par
  EXPECT_CALL(foo, Bar(Gt(10)))\par
      .Times(AnyNumber());\par
}
\par
A call to {\f2 foo.Bar()}  that doesn't match any of the {\f2 EXPECT_CALL()}  statements will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Understanding Uninteresting vs Unexpected Calls} \par}
{\i Uninteresting}  calls and {\i unexpected}  calls are different concepts in Google {\b Mock}. {\i Very}  different.\par
A call {\f2 x.Y(...)}  is {\b uninteresting}  if there's {\i not even a single}  {\f2 EXPECT_CALL(x, Y(...))}  set. In other words, the test isn't interested in the {\f2 x.Y()}  method at all, as evident in that the test doesn't care to say anything about it.\par
A call {\f2 x.Y(...)}  is {\b unexpected}  if there are some {\f2 EXPECT_CALL(x, Y(...))s}  set, but none of them matches the call. Put another way, the test is interested in the {\f2 x.Y()}  method (therefore it {\i explicitly}  sets some {\f2 EXPECT_CALL}  to verify how it's called); however, the verification fails as the test doesn't expect this particular call to happen.\par
{\b An unexpected call is always an error,}  as the code under test doesn't behave the way the test expects it to behave.\par
{\b By default, an uninteresting call is not an error,}  as it violates no constraint specified by the test. (Google {\b Mock}'s philosophy is that saying nothing means there is no constraint.) However, it leads to a warning, as it {\i might}  indicate a problem (e.g. the test author might have forgotten to specify a constraint).\par
In Google {\b Mock}, {\f2 NiceMock}  and {\f2 StrictMock}  can be used to make a mock class "nice" or "strict". How does this affect uninteresting calls and unexpected calls?\par
A {\b nice mock}  suppresses uninteresting call warnings. It is less chatty than the default mock, but otherwise is the same. If a test fails with a default mock, it will also fail using a nice mock instead. And vice versa. Don't expect making a mock nice to change the test's result.\par
A {\b strict mock}  turns uninteresting call warnings into errors. So making a mock strict may change the test's result.\par
Let's look at an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(...) \{\par
  NiceMock<MockDomainRegistry> mock_registry;\par
  EXPECT_CALL(mock_registry, GetDomainOwner("google.com"))\par
          .WillRepeatedly(Return("Larry Page"));\par
\par
  // Use mock_registry in code under test.\par
  ... &mock_registry ...\par
\}\par
}
\par
The sole {\f2 EXPECT_CALL}  here says that all calls to {\f2 GetDomainOwner()}  must have {\f2 "google.com"}  as the argument. If {\f2 GetDomainOwner("yahoo.com")}  is called, it will be an unexpected call, and thus an error. Having a nice mock doesn't change the severity of an unexpected call.\par
So how do we tell Google {\b Mock} that {\f2 GetDomainOwner()}  can be called with some other arguments as well? The standard technique is to add a "catch all" {\f2 EXPECT_CALL} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_registry, GetDomainOwner(_))\par
      .Times(AnyNumber());  // catches all other calls to this method.\par
EXPECT_CALL(mock_registry, GetDomainOwner("google.com"))\par
      .WillRepeatedly(Return("Larry Page"));\par
}
\par
Remember that {\f2 _}  is the wildcard matcher that matches anything. With this, if {\f2 GetDomainOwner("google.com")}  is called, it will do what the second {\f2 EXPECT_CALL}  says; if it is called with a different argument, it will do what the first {\f2 EXPECT_CALL}  says.\par
Note that the order of the two {\f2 EXPECT_CALLs}  is important, as a newer {\f2 EXPECT_CALL}  takes precedence over an older one.\par
For more on uninteresting calls, nice mocks, and strict mocks, read {\f2 "The Nice, the Strict, and the Naggy"}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Ordered Calls} \par}
Although an {\f2 EXPECT_CALL()}  statement defined earlier takes precedence when Google {\b Mock} tries to match a function call with an expectation, by default calls don't have to happen in the order {\f2 EXPECT_CALL()}  statements are written. For example, if the arguments match the matchers in the third {\f2 EXPECT_CALL()} , but not those in the first two, then the third expectation will be used.\par
If you would rather have all calls occur in the order of the expectations, put the {\f2 EXPECT_CALL()}  statements in a block where you define a variable of type {\f2 InSequence} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InSequence;\par
\par
\{\par
  InSequence s;\par
\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(bar, DoThat(_))\par
      .Times(2);\par
  EXPECT_CALL(foo, DoThis(6));\par
\}\par
}
\par
In this example, we expect a call to {\f2 foo.DoThis(5)} , followed by two calls to {\f2 bar.DoThat()}  where the argument can be anything, which are in turn followed by a call to {\f2 foo.DoThis(6)} . If a call occurred out-of-order, Google {\b Mock} will report an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Partially Ordered Calls} \par}
Sometimes requiring everything to occur in a predetermined order can lead to brittle tests. For example, we may care about {\f2 A}  occurring before both {\f2 B}  and {\f2 C} , but aren't interested in the relative order of {\f2 B}  and {\f2 C} . In this case, the test should reflect our real intent, instead of being overly constraining.\par
Google {\b Mock} allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to use the {\f2 After} clause of {\f2 EXPECT_CALL} .\par
Another way is via the {\f2 InSequence()}  clause (not the same as the {\f2 InSequence}  class), which we borrowed from jMock 2. It's less flexible than {\f2 After()} , but more convenient when you have long chains of sequential calls, as it doesn't require you to come up with different names for the expectations in the chains. Here's how it works:\par
If we view {\f2 EXPECT_CALL()}  statements as nodes in a graph, and add an edge from node A to node B wherever A must occur before B, we can get a DAG. We use the term "sequence" to mean a directed path in this DAG. Now, if we decompose the DAG into sequences, we just need to know which sequences each {\f2 EXPECT_CALL()}  belongs to in order to be able to reconstruct the orginal DAG.\par
So, to specify the partial order on the expectations we need to do two things: first to define some {\f2 Sequence}  objects, and then for each {\f2 EXPECT_CALL()}  say which {\f2 Sequence}  objects it is part of. Expectations in the same sequence must occur in the order they are written. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(foo, A())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(bar, B())\par
    .InSequence(s1);\par
EXPECT_CALL(bar, C())\par
    .InSequence(s2);\par
EXPECT_CALL(foo, D())\par
    .InSequence(s2);\par
}
\par
specifies the following DAG (where {\f2 s1}  is {\f2 A -> B} , and {\f2 s2}  is {\f2 A -> C -> D} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid      +---> B\par
     |\par
A ---|\par
     |\par
     +---> C ---> D\par
}
\par
This means that A must occur before B and C, and C must occur before D. There's no restriction about the order other than these.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling When an Expectation Retires} \par}
When a mock method is called, Google {\b Mock} only consider expectations that are still active. An expectation is active when created, and becomes inactive (aka {\i retires} ) when a call that has to occur later has occurred. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(log, Log(WARNING, _, "File too large."))     // #1\par
    .Times(AnyNumber())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(log, Log(WARNING, _, "Data set is empty."))  // #2\par
    .InSequence(s1);\par
EXPECT_CALL(log, Log(WARNING, _, "User not found."))     // #3\par
    .InSequence(s2);\par
}
\par
as soon as either #2 or #3 is matched, #1 will retire. If a warning {\f2 "File too large."}  is logged after this, it will be an error.\par
Note that an expectation doesn't retire automatically when it's saturated. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                  // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."));  // #2\par
}
\par
says that there will be exactly one warning with the message {\f2 "File
too large."} . If the second warning contains this message too, #2 will match again and result in an upper-bound-violated error.\par
If this is not what you want, you can ask an expectation to retire as soon as it becomes saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                 // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."))  // #2\par
      .RetiresOnSaturation();\par
}
\par
Here #2 can be used only once, so if you have two warnings with the message {\f2 "File too large."} , the first will match #2 and the second will match #1 - there will be no error.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Actions} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning References from {\b Mock} Methods} \par}
If a mock function's return type is a reference, you need to use {\f2 ReturnRef()}  instead of {\f2 Return()}  to return a result:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(GetBar, Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar;\par
  EXPECT_CALL(foo, GetBar())\par
      .WillOnce(ReturnRef(bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning Live Values from {\b Mock} Methods} \par}
The {\f2 Return(x)}  action saves a copy of {\f2 x}  when the action is {\i created} , and always returns the same value whenever it's executed. Sometimes you may want to instead return the {\i live}  value of {\f2 x}  (i.e. its value at the time when the action is {\i executed} .).\par
If the mock function's return type is a reference, you can do it using {\f2 ReturnRef(x)} , as shown in the previous recipe ("Returning References
from Mock Methods"). However, Google {\b Mock} doesn't let you use {\f2 ReturnRef()}  in a mock function whose return type is not a reference, as doing that usually indicates a user error. So, what shall you do?\par
You may be tempted to try {\f2 ByRef()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::ByRef;\par
using testing::Return;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(GetValue, int());\par
\};\par
...\par
  int x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(Return(ByRef(x)));\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());\par
}
\par
Unfortunately, it doesn't work here. The above code will fail with error:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: foo.GetValue()\par
  Actual: 0\par
Expected: 42\par
}
\par
The reason is that {\f2 Return(value)}  converts {\f2 value}  to the actual return type of the mock function at the time when the action is {\i created} , not when it is {\i executed} . (This behavior was chosen for the action to be safe when {\f2 value}  is a proxy object that references some temporary objects.) As a result, {\f2 ByRef(x)}  is converted to an {\f2 int}  value (instead of a {\f2 const int&} ) when the expectation is set, and {\f2 Return(ByRef(x))}  will always return 0.\par
{\f2 ReturnPointee(pointer)}  was provided to solve this problem specifically. It returns the value pointed to by {\f2 pointer}  at the time the action is {\i executed} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::ReturnPointee;\par
...\par
  int x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(ReturnPointee(&x));  // Note the & here.\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());  // This will succeed now.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Actions} \par}
Want to do more than one thing when a function is called? That's fine. {\f2 DoAll()}  allow you to do sequence of actions every time. Only the return value of the last action in the sequence will be used.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DoAll;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Bar, bool(int n));\par
\};\par
...\par
\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(DoAll(action_1,\par
                      action_2,\par
                      ...\par
                      action_n));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Side Effects} \par}
Sometimes a method exhibits its effect not via returning a value but via side effects. For example, it may change some global state or modify an output argument. To mock side effects, in general you can define your own action by implementing {\f2 {\b testing::ActionInterface}} .\par
If all you need to do is to change an output argument, the built-in {\f2 SetArgPointee()}  action is convenient:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SetArgPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(bool mutate, int* value));\par
  ...\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, Mutate(true, _))\par
      .WillOnce(SetArgPointee<1>(5));\par
}
\par
In this example, when {\f2 mutator.Mutate()}  is called, we will assign 5 to the {\f2 int}  variable pointed to by argument #1 (0-based).\par
{\f2 SetArgPointee()}  conveniently makes an internal copy of the value you pass to it, removing the need to keep the value in scope and alive. The implication however is that the value must have a copy constructor and assignment operator.\par
If the mock method also needs to return a value as well, you can chain {\f2 SetArgPointee()}  with {\f2 Return()}  using {\f2 DoAll()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Return;\par
using ::testing::SetArgPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  ...\par
  MOCK_METHOD1(MutateInt, bool(int* value));\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, MutateInt(_))\par
      .WillOnce(DoAll(SetArgPointee<0>(5),\par
                      Return(true)));\par
}
\par
If the output argument is an array, use the {\f2 SetArrayArgument<N>(first, last)}  action instead. It copies the elements in source range {\f2 [first, last)}  to the array pointed to by the {\f2 N} -th (0-based) argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NotNull;\par
using ::testing::SetArrayArgument;\par
\par
class MockArrayMutator : public ArrayMutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(int* values, int num_values));\par
  ...\par
\};\par
...\par
\par
  MockArrayMutator mutator;\par
  int values[5] = \{ 1, 2, 3, 4, 5 \};\par
  EXPECT_CALL(mutator, Mutate(NotNull(), 5))\par
      .WillOnce(SetArrayArgument<0>(values, values + 5));\par
}
\par
This also works when the argument is an output iterator:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SeArrayArgument;\par
\par
class MockRolodex : public Rolodex \{\par
 public:\par
  MOCK_METHOD1(GetNames, void(std::back_insert_iterator<vector<string> >));\par
  ...\par
\};\par
...\par
\par
  MockRolodex rolodex;\par
  vector<string> names;\par
  names.push_back("George");\par
  names.push_back("John");\par
  names.push_back("Thomas");\par
  EXPECT_CALL(rolodex, GetNames(_))\par
      .WillOnce(SetArrayArgument<0>(names.begin(), names.end()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Changing a {\b Mock} Object's Behavior Based on the State} \par}
If you expect a call to change the behavior of a mock object, you can use {\f2 {\b testing::InSequence}}  to specify different behaviors before and after the call:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
\par
...\par
  \{\par
    InSequence seq;\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(true));\par
    EXPECT_CALL(my_mock, Flush());\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(false));\par
  \}\par
  my_mock.FlushIfDirty();\par
}
\par
This makes {\f2 my_mock.IsDirty()}  return {\f2 true}  before {\f2 my_mock.Flush()}  is called and return {\f2 false}  afterwards.\par
If the behavior change is more complex, you can store the effects in a variable and make a mock method get its return value from that variable:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SaveArg;\par
using ::testing::Return;\par
\par
ACTION_P(ReturnPointee, p) \{ return *p; \}\par
...\par
  int previous_value = 0;\par
  EXPECT_CALL(my_mock, GetPrevValue())\par
      .WillRepeatedly(ReturnPointee(&previous_value));\par
  EXPECT_CALL(my_mock, UpdateValue(_))\par
      .WillRepeatedly(SaveArg<0>(&previous_value));\par
  my_mock.DoSomethingToUpdateValue();\par
}
\par
Here {\f2 my_mock.GetPrevValue()}  will always return the argument of the last {\f2 UpdateValue()}  call.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Value for a Return Type} \par}
If a mock method's return type is a built-in C++ type or pointer, by default it will return 0 when invoked. Also, in C++ 11 and above, a mock method whose return type has a default constructor will return a default-constructed value by default. You only need to specify an action if this default value doesn't work for you.\par
Sometimes, you may want to change this default value, or you may want to specify a default value for types Google {\b Mock} doesn't know about. You can do this using the {\f2 {\b testing::DefaultValue}}  class template:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(CalculateBar, Bar());\par
\};\par
...\par
\par
  Bar default_bar;\par
  // Sets the default return value for type Bar.\par
  DefaultValue<Bar>::Set(default_bar);\par
\par
  MockFoo foo;\par
\par
  // We don't need to specify an action here, as the default\par
  // return value works for us.\par
  EXPECT_CALL(foo, CalculateBar());\par
\par
  foo.CalculateBar();  // This should return default_bar.\par
\par
  // Unsets the default return value.\par
  DefaultValue<Bar>::Clear();\par
}
\par
Please note that changing the default value for a type can make you tests hard to understand. We recommend you to use this feature judiciously. For example, you may want to make sure the {\f2 Set()}  and {\f2 Clear()}  calls are right next to the code that uses your mock.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Actions for a {\b Mock} Method} \par}
You've learned how to change the default value of a given type. However, this may be too coarse for your purpose: perhaps you have two mock methods with the same return type and you want them to have different behaviors. The {\f2 ON_CALL()}  macro allows you to customize your mock's behavior at the method level:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AnyNumber;\par
using ::testing::Gt;\par
using ::testing::Return;\par
...\par
  ON_CALL(foo, Sign(_))\par
      .WillByDefault(Return(-1));\par
  ON_CALL(foo, Sign(0))\par
      .WillByDefault(Return(0));\par
  ON_CALL(foo, Sign(Gt(0)))\par
      .WillByDefault(Return(1));\par
\par
  EXPECT_CALL(foo, Sign(_))\par
      .Times(AnyNumber());\par
\par
  foo.Sign(5);   // This should return 1.\par
  foo.Sign(-9);  // This should return -1.\par
  foo.Sign(0);   // This should return 0.\par
}
\par
As you may have guessed, when there are more than one {\f2 ON_CALL()}  statements, the news order take precedence over the older ones. In other words, the {\b last}  one that matches the function arguments will be used. This matching order allows you to set up the common behavior in a mock object's constructor or the test fixture's set-up phase and specialize the mock's behavior later.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Functions/Methods/Functors as Actions} \par}
If the built-in actions don't suit you, you can easily use an existing function, method, or functor as an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(Sum, int(int x, int y));\par
  MOCK_METHOD1(ComplexJob, bool(int x));\par
\};\par
\par
int CalculateSum(int x, int y) \{ return x + y; \}\par
\par
class Helper \{\par
 public:\par
  bool ComplexJob(int x);\par
\};\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  EXPECT_CALL(foo, Sum(_, _))\par
      .WillOnce(Invoke(CalculateSum));\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(Invoke(&helper, &Helper::ComplexJob));\par
\par
  foo.Sum(5, 6);       // Invokes CalculateSum(5, 6).\par
  foo.ComplexJob(10);  // Invokes helper.ComplexJob(10);\par
}
\par
The only requirement is that the type of the function, etc must be {\i compatible}  with the signature of the mock function, meaning that the latter's arguments can be implicitly converted to the corresponding arguments of the former, and the former's return type can be implicitly converted to that of the latter. So, you can invoke something whose type is {\i not}  exactly the same as the mock function, as long as it's safe to do so - nice, huh?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking a Function/Method/Functor Without Arguments} \par}
{\f2 Invoke()}  is very useful for doing actions that are more complex. It passes the mock function's arguments to the function or functor being invoked such that the callee has the full context of the call to work with. If the invoked function is not interested in some or all of the arguments, it can simply ignore them.\par
Yet, a common pattern is that a test author wants to invoke a function without the arguments of the mock function. {\f2 Invoke()}  allows her to do that using a wrapper function that throws away the arguments before invoking an underlining nullary function. Needless to say, this can be tedious and obscures the intent of the test.\par
{\f2 InvokeWithoutArgs()}  solves this problem. It's like {\f2 Invoke()}  except that it doesn't pass the mock function's arguments to the callee. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeWithoutArgs;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(ComplexJob, bool(int n));\par
\};\par
\par
bool Job1() \{ ... \}\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(InvokeWithoutArgs(Job1));\par
\par
  foo.ComplexJob(10);  // Invokes Job1().\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking an Argument of the {\b Mock} Function} \par}
Sometimes a mock function will receive a function pointer or a functor (in other words, a "callable") as an argument, e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, bool(int n, bool (*fp)(int)));\par
\};\par
}
\par
and you may want to invoke this callable argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(...);\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
Arghh, you need to refer to a mock function argument but C++ has no lambda (yet), so you have to define your own action. :-( Or do you really?\par
Well, Google {\b Mock} has an action to solve {\i exactly}  this problem:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<N>(arg_1, arg_2, ..., arg_m)\par
}
\par
will invoke the {\f2 N} -th (0-based) argument the mock function receives, with {\f2 arg_1} , {\f2 arg_2} , ..., and {\f2 arg_m} . No matter if the argument is a function pointer or a functor, Google {\b Mock} handles them both.\par
With that, you could write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(InvokeArgument<1>(5));\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
What if the callable takes an argument by reference? No problem - just wrap it inside {\f2 ByRef()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(Bar, bool(bool (*fp)(int, const Helper&)));\par
...\par
using ::testing::_;\par
using ::testing::ByRef;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  ...\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(InvokeArgument<0>(5, ByRef(helper)));\par
  // ByRef(helper) guarantees that a reference to helper, not a copy of it,\par
  // will be passed to the callable.\par
}
\par
What if the callable takes an argument by reference and we do {\b not}  wrap the argument in {\f2 ByRef()} ? Then {\f2 InvokeArgument()}  will {\i make a copy}  of the argument, and pass a {\i reference to the copy} , instead of a reference to the original value, to the callable. This is especially handy when the argument is a temporary value:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(DoThat, bool(bool (*f)(const double& x, const string& s)));\par
...\par
using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  ...\par
  EXPECT_CALL(foo, DoThat(_))\par
      .WillOnce(InvokeArgument<0>(5.0, string("Hi")));\par
  // Will execute (*f)(5.0, string("Hi")), where f is the function pointer\par
  // DoThat() receives.  Note that the values 5.0 and string("Hi") are\par
  // temporary and dead once the EXPECT_CALL() statement finishes.  Yet\par
  // it's fine to perform this action later, since a copy of the values\par
  // are kept inside the InvokeArgument action.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring an Action's Result} \par}
Sometimes you have an action that returns {\i something} , but you need an action that returns {\f2 void}  (perhaps you want to use it in a mock function that returns {\f2 void} , or perhaps it needs to be used in {\f2 DoAll()}  and it's not the last in the list). {\f2 IgnoreResult()}  lets you do that. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Return;\par
\par
int Process(const MyData& data);\par
string DoSomething();\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Abc, void(const MyData& data));\par
  MOCK_METHOD0(Xyz, bool());\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, Abc(_))\par
  // .WillOnce(Invoke(Process));\par
  // The above line won't compile as Process() returns int but Abc() needs\par
  // to return void.\par
      .WillOnce(IgnoreResult(Invoke(Process)));\par
\par
  EXPECT_CALL(foo, Xyz())\par
      .WillOnce(DoAll(IgnoreResult(Invoke(DoSomething)),\par
      // Ignores the string DoSomething() returns.\par
                      Return(true)));\par
}
\par
Note that you {\b cannot}  use {\f2 IgnoreResult()}  on an action that already returns {\f2 void} . Doing so will lead to ugly compiler errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting an Action's Arguments} \par}
Say you have a mock function {\f2 Foo()}  that takes seven arguments, and you have a custom action that you want to invoke when {\f2 Foo()}  is called. Trouble is, the custom action only wants three arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  MOCK_METHOD7(Foo, bool(bool visible, const string& name, int x, int y,\par
                         const map<pair<int, int>, double>& weight,\par
                         double min_weight, double max_wight));\par
...\par
\par
bool IsVisibleInQuadrant1(bool visible, int x, int y) \{\par
  return visible && x >= 0 && y >= 0;\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(IsVisibleInQuadrant1));  // Uh, won't compile. :-(\par
}
\par
To please the compiler God, you can to define an "adaptor" that has the same signature as {\f2 Foo()}  and calls the custom action with the right arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
bool MyIsVisibleInQuadrant1(bool visible, const string& name, int x, int y,\par
                            const map<pair<int, int>, double>& weight,\par
                            double min_weight, double max_wight) \{\par
  return IsVisibleInQuadrant1(visible, x, y);\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(MyIsVisibleInQuadrant1));  // Now it works.\par
}
\par
But isn't this awkward?\par
Google {\b Mock} provides a generic {\i action adaptor} , so you can spend your time minding more important business than writing your own adaptors. Here's the syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid WithArgs<N1, N2, ..., Nk>(action)\par
}
\par
creates an action that passes the arguments of the mock function at the given indices (0-based) to the inner {\f2 action}  and performs it. Using {\f2 WithArgs} , our original example can be written as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::WithArgs;\par
...\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(WithArgs<0, 2, 3>(Invoke(IsVisibleInQuadrant1)));\par
      // No need to define your own adaptor.\par
}
\par
For better readability, Google {\b Mock} also gives you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithoutArgs(action)}  when the inner {\f2 action}  takes {\i no}  argument, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithArg<N>(action)}  (no {\f2 s}  after {\f2 Arg} ) when the inner {\f2 action}  takes {\i one}  argument.\par}
As you may have realized, {\f2 InvokeWithoutArgs(...)}  is just syntactic sugar for {\f2 WithoutArgs(Invoke(...))} .\par
Here are more tips:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The inner action used in {\f2 WithArgs}  and friends does not have to be {\f2 Invoke()}  \'96 it can be anything.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can repeat an argument in the argument list if necessary, e.g. {\f2 WithArgs<2, 3, 3, 5>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can change the order of the arguments, e.g. {\f2 WithArgs<3, 2, 1>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The types of the selected arguments do {\i not}  have to match the signature of the inner action exactly. It works as long as they can be implicitly converted to the corresponding arguments of the inner action. For example, if the 4-th argument of the mock function is an {\f2 int}  and {\f2 my_action}  takes a {\f2 double} , {\f2 WithArg<4>(my_action)}  will work.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Arguments in Action Functions} \par}
The selecting-an-action's-arguments recipe showed us one way to make a mock function and an action with incompatible argument lists fit together. The downside is that wrapping the action in {\f2 WithArgs<...>()}  can get tedious for people writing the tests.\par
If you are defining a function, method, or functor to be used with {\f2 Invoke*()} , and you are not interested in some of its arguments, an alternative to {\f2 WithArgs}  is to declare the uninteresting arguments as {\f2 Unused} . This makes the definition less cluttered and less fragile in case the types of the uninteresting arguments change. It could also increase the chance the action function can be reused. For example, given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD3(Foo, double(const string& label, double x, double y));\par
MOCK_METHOD3(Bar, double(int index, double x, double y));\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
double DistanceToOriginWithLabel(const string& label, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
\par
double DistanceToOriginWithIndex(int index, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithLabel));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithIndex));\par
}
\par
you could write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Unused;\par
\par
double DistanceToOrigin(Unused, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Actions} \par}
Just like matchers, a Google {\b Mock} action object consists of a pointer to a ref-counted implementation object. Therefore copying actions is also allowed and very efficient. When the last action that references the implementation object dies, the implementation object will be deleted.\par
If you have some complex action that you want to use again and again, you may not have to build it from scratch everytime. If the action doesn't have an internal state (i.e. if it always does the same thing no matter how many times it has been called), you can assign it to an action variable and use that variable repeatedly. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<bool(int*)> set_flag = DoAll(SetArgPointee<0>(5),\par
                                    Return(true));\par
... use set_flag in .WillOnce() and .WillRepeatedly() ...\par
}
\par
However, if the action has its own state, you may be surprised if you share the action object. Suppose you have an action factory {\f2 IncrementCounter(init)}  which creates an action that increments and returns a counter whose initial value is {\f2 init} , using two actions created from the same expression and using a shared action will exihibit different behaviors. Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(IncrementCounter(0));\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(IncrementCounter(0));\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 1 - Blah() uses a different\par
               // counter than Bar()'s.\par
}
\par
versus\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<int()> increment = IncrementCounter(0);\par
\par
EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(increment);\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(increment);\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 3 - the counter is shared.\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Misc Recipes on Using Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Methods That Use Move-Only Types} \par}
C++11 introduced {\i move-only types} . A move-only-typed value can be moved from one object to another, but cannot be copied. {\f2 std::unique_ptr<T>}  is probably the most commonly used move-only type.\par
Mocking a method that takes and/or returns move-only types presents some challenges, but nothing insurmountable. This recipe shows you how you can do it.\par
Let\'92s say we are working on a fictional project that lets one post and share snippets called \'93buzzes\'94. Your code uses these types:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid enum class AccessLevel \{ kInternal, kPublic \};\par
\par
class Buzz \{\par
 public:\par
  explicit Buzz(AccessLevel access) \{ \'85 \}\par
  ...\par
\};\par
\par
class Buzzer \{\par
 public:\par
  virtual ~Buzzer() \{\}\par
  virtual std::unique_ptr<Buzz> MakeBuzz(const std::string& text) = 0;\par
  virtual bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) = 0;\par
  ...\par
\};\par
}
\par
A {\f2 Buzz}  object represents a snippet being posted. A class that implements the {\f2 Buzzer}  interface is capable of creating and sharing {\f2 Buzz} . Methods in {\f2 Buzzer}  may return a {\f2 unique_ptr<Buzz>}  or take a {\f2 unique_ptr<Buzz>} . Now we need to mock {\f2 Buzzer}  in our tests.\par
To mock a method that returns a move-only type, you just use the familiar {\f2 MOCK_METHOD}  syntax as usual:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockBuzzer : public Buzzer \{\par
 public:\par
  MOCK_METHOD1(MakeBuzz, std::unique_ptr<Buzz>(const std::string& text));\par
  \'85\par
\};\par
}
\par
However, if you attempt to use the same {\f2 MOCK_METHOD}  pattern to mock a method that takes a move-only parameter, you\'92ll get a compiler error currently:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Does NOT compile!\par
MOCK_METHOD2(ShareBuzz, bool(std::unique_ptr<Buzz> buzz, Time timestamp));\par
}
\par
While it\'92s highly desirable to make this syntax just work, it\'92s not trivial and the work hasn\'92t been done yet. Fortunately, there is a trick you can apply today to get something that works nearly as well as this.\par
The trick, is to delegate the {\f2 ShareBuzz()}  method to a mock method (let\'92s call it {\f2 DoShareBuzz()} ) that does not take move-only parameters:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockBuzzer : public Buzzer \{\par
 public:\par
  MOCK_METHOD1(MakeBuzz, std::unique_ptr<Buzz>(const std::string& text));\par
  MOCK_METHOD2(DoShareBuzz, bool(Buzz* buzz, Time timestamp));\par
  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) \{\par
    return DoShareBuzz(buzz.get(), timestamp);\par
  \}\par
\};\par
}
\par
Note that there's no need to define or declare {\f2 DoShareBuzz()}  in a base class. You only need to define it as a {\f2 MOCK_METHOD}  in the mock class.\par
Now that we have the mock class defined, we can use it in tests. In the following code examples, we assume that we have defined a {\f2 MockBuzzer}  object named {\f2 mock_buzzer_} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockBuzzer mock_buzzer_;\par
}
\par
First let\'92s see how we can set expectations on the {\f2 MakeBuzz()}  method, which returns a {\f2 unique_ptr<Buzz>} .\par
As usual, if you set an expectation without an action (i.e. the {\f2 .WillOnce()}  or {\f2 .WillRepeated()}  clause), when that expectation fires, the default action for that method will be taken. Since {\f2 unique_ptr<>}  has a default constructor that returns a null {\f2 unique_ptr} , that\'92s what you\'92ll get if you don\'92t specify an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Use the default action.\par
EXPECT_CALL(mock_buzzer_, MakeBuzz("hello"));\par
\par
// Triggers the previous EXPECT_CALL.\par
EXPECT_EQ(nullptr, mock_buzzer_.MakeBuzz("hello"));\par
}
\par
If you are not happy with the default action, you can tweak it. Depending on what you need, you may either tweak the default action for a specific (mock object, mock method) combination using {\f2 ON_CALL()} , or you may tweak the default action for all mock methods that return a specific type. The usage of {\f2 ON_CALL()}  is similar to {\f2 EXPECT_CALL()} , so we\'92ll skip it and just explain how to do the latter (tweaking the default action for a specific return type). You do this via the {\f2 DefaultValue<>::SetFactory()}  and {\f2 DefaultValue<>::Clear()}  API:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Sets the default action for return type std::unique_ptr<Buzz> to\par
// creating a new Buzz every time.\par
DefaultValue<std::unique_ptr<Buzz>>::SetFactory(\par
    [] \{ return MakeUnique<Buzz>(AccessLevel::kInternal); \});\par
\par
// When this fires, the default action of MakeBuzz() will run, which\par
// will return a new Buzz object.\par
EXPECT_CALL(mock_buzzer_, MakeBuzz("hello")).Times(AnyNumber());\par
\par
auto buzz1 = mock_buzzer_.MakeBuzz("hello");\par
auto buzz2 = mock_buzzer_.MakeBuzz("hello");\par
EXPECT_NE(nullptr, buzz1);\par
EXPECT_NE(nullptr, buzz2);\par
EXPECT_NE(buzz1, buzz2);\par
\par
// Resets the default action for return type std::unique_ptr<Buzz>,\par
// to avoid interfere with other tests.\par
DefaultValue<std::unique_ptr<Buzz>>::Clear();\par
}
\par
What if you want the method to do something other than the default action? If you just need to return a pre-defined move-only value, you can use the {\f2 Return(ByMove(...))}  action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // When this fires, the unique_ptr<> specified by ByMove(...) will\par
// be returned.\par
EXPECT_CALL(mock_buzzer_, MakeBuzz("world"))\par
    .WillOnce(Return(ByMove(MakeUnique<Buzz>(AccessLevel::kInternal))));\par
\par
EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz("world"));\par
}
\par
Note that {\f2 ByMove()}  is essential here - if you drop it, the code won\'92t compile.\par
Quiz time! What do you think will happen if a {\f2 Return(ByMove(...))}  action is performed more than once (e.g. you write {\f2 \'85.WillRepeatedly(Return(ByMove(...)));} )? Come think of it, after the first time the action runs, the source value will be consumed (since it\'92s a move-only value), so the next time around, there\'92s no value to move from \'96 you\'92ll get a run-time error that {\f2 Return(ByMove(...))}  can only be run once.\par
If you need your mock method to do more than just moving a pre-defined value, remember that you can always use {\f2 Invoke()}  to call a lambda or a callable object, which can do pretty much anything you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_buzzer_, MakeBuzz("x"))\par
    .WillRepeatedly(Invoke([](const std::string& text) \{\par
      return std::make_unique<Buzz>(AccessLevel::kInternal);\par
    \}));\par
\par
EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz("x"));\par
EXPECT_NE(nullptr, mock_buzzer_.MakeBuzz("x"));\par
}
\par
Every time this {\f2 EXPECT_CALL}  fires, a new {\f2 unique_ptr<Buzz>}  will be created and returned. You cannot do this with {\f2 Return(ByMove(...))} .\par
Now there\'92s one topic we haven\'92t covered: how do you set expectations on {\f2 ShareBuzz()} , which takes a move-only-typed parameter? The answer is you don\'92t. Instead, you set expectations on the {\f2 DoShareBuzz()}  mock method (remember that we defined a {\f2 MOCK_METHOD}  for {\f2 DoShareBuzz()} , not {\f2 ShareBuzz()} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_buzzer_, DoShareBuzz(NotNull(), _));\par
\par
// When one calls ShareBuzz() on the MockBuzzer like this, the call is\par
// forwarded to DoShareBuzz(), which is mocked.  Therefore this statement\par
// will trigger the above EXPECT_CALL.\par
mock_buzzer_.ShareBuzz(MakeUnique&lt;Buzz&gt;(AccessLevel::kInternal),\par
                       ::base::Now());\par
}
\par
Some of you may have spotted one problem with this approach: the {\f2 DoShareBuzz()}  mock method differs from the real {\f2 ShareBuzz()}  method in that it cannot take ownership of the buzz parameter - {\f2 ShareBuzz()}  will always delete buzz after {\f2 DoShareBuzz()}  returns. What if you need to save the buzz object somewhere for later use when {\f2 ShareBuzz()}  is called? Indeed, you'd be stuck.\par
Another problem with the {\f2 DoShareBuzz()}  we had is that it can surprise people reading or maintaining the test, as one would expect that {\f2 DoShareBuzz()}  has (logically) the same contract as {\f2 ShareBuzz()} .\par
Fortunately, these problems can be fixed with a bit more code. Let's try to get it right this time:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockBuzzer : public Buzzer \{\par
 public:\par
  MockBuzzer() \{\par
    // Since DoShareBuzz(buzz, time) is supposed to take ownership of\par
    // buzz, define a default behavior for DoShareBuzz(buzz, time) to\par
    // delete buzz.\par
    ON_CALL(*this, DoShareBuzz(_, _))\par
        .WillByDefault(Invoke([](Buzz* buzz, Time timestamp) \{\par
          delete buzz;\par
          return true;\par
        \}));\par
  \}\par
\par
  MOCK_METHOD1(MakeBuzz, std::unique_ptr<Buzz>(const std::string& text));\par
\par
  // Takes ownership of buzz.\par
  MOCK_METHOD2(DoShareBuzz, bool(Buzz* buzz, Time timestamp));\par
  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) \{\par
    return DoShareBuzz(buzz.release(), timestamp);\par
  \}\par
\};\par
}
\par
Now, the mock {\f2 DoShareBuzz()}  method is free to save the buzz argument for later use if this is what you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid std::unique_ptr<Buzz> intercepted_buzz;\par
EXPECT_CALL(mock_buzzer_, DoShareBuzz(NotNull(), _))\par
    .WillOnce(Invoke([&amp;intercepted_buzz](Buzz* buzz, Time timestamp) \{\par
      // Save buzz in intercepted_buzz for analysis later.\par
      intercepted_buzz.reset(buzz);\par
      return false;\par
    \}));\par
\par
mock_buzzer_.ShareBuzz(std::make_unique<Buzz>(AccessLevel::kInternal),\par
                       Now());\par
EXPECT_NE(nullptr, intercepted_buzz);\par
}
\par
Using the tricks covered in this recipe, you are now able to mock methods that take and/or return move-only types. Put your newly-acquired power to good use - when you design a new API, you can now feel comfortable using {\f2 unique_ptrs}  as appropriate, without fearing that doing so will compromise your tests.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Making the Compilation Faster} \par}
Believe it or not, the {\i vast majority}  of the time spent on compiling a mock class is in generating its constructor and destructor, as they perform non-trivial tasks (e.g. verification of the expectations). What's more, mock methods with different signatures have different types and thus their constructors/destructors need to be generated by the compiler separately. As a result, if you mock many different types of methods, compiling your mock class can get really slow.\par
If you are experiencing slow compilation, you can move the definition of your mock class' constructor and destructor out of the class body and into a {\f2 .cpp}  file. This way, even if you {\f2 #include}  your mock class in N files, the compiler only needs to generate its constructor and destructor once, resulting in a much faster compilation.\par
Let's illustrate the idea using an example. Here's the definition of a mock class before applying this recipe:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.h.\par
...\par
class MockFoo : public Foo \{\par
 public:\par
  // Since we don't declare the constructor or the destructor,\par
  // the compiler will generate them in every translation unit\par
  // where this mock class is used.\par
\par
  MOCK_METHOD0(DoThis, int());\par
  MOCK_METHOD1(DoThat, bool(const char* str));\par
  ... more mock methods ...\par
\};\par
}
\par
After the change, it would look like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.h.\par
...\par
class MockFoo : public Foo \{\par
 public:\par
  // The constructor and destructor are declared, but not defined, here.\par
  MockFoo();\par
  virtual ~MockFoo();\par
\par
  MOCK_METHOD0(DoThis, int());\par
  MOCK_METHOD1(DoThat, bool(const char* str));\par
  ... more mock methods ...\par
\};\par
}
 and {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.cpp.\par
#include "path/to/mock_foo.h"\par
\par
// The definitions may appear trivial, but the functions actually do a\par
// lot of things through the constructors/destructors of the member\par
// variables used to implement the mock methods.\par
MockFoo::MockFoo() \{\}\par
MockFoo::~MockFoo() \{\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Forcing a Verification} \par}
When it's being destoyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, and will generate {\f2 Google Test} failures if not. This is convenient as it leaves you with one less thing to worry about. That is, unless you are not sure if your mock object will be destoyed.\par
How could it be that your mock object won't eventually be destroyed? Well, it might be created on the heap and owned by the code you are testing. Suppose there's a bug in that code and it doesn't delete the mock object properly - you could end up with a passing test when there's actually a bug.\par
Using a heap checker is a good idea and can alleviate the concern, but its implementation may not be 100% reliable. So, sometimes you do want to {\i force}  Google {\b Mock} to verify a mock object before it is (hopefully) destructed. You can do this with {\f2 Mock::VerifyAndClearExpectations(&mock_object)} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyServerTest, ProcessesRequest) \{\par
  using ::testing::Mock;\par
\par
  MockFoo* const foo = new MockFoo;\par
  EXPECT_CALL(*foo, ...)...;\par
  // ... other expectations ...\par
\par
  // server now owns foo.\par
  MyServer server(foo);\par
  server.ProcessRequest(...);\par
\par
  // In case that server's destructor will forget to delete foo,\par
  // this will verify the expectations anyway.\par
  Mock::VerifyAndClearExpectations(foo);\par
\}  // server is destroyed when it goes out of scope here.\par
}
\par
{\b Tip:}  The {\f2 Mock::VerifyAndClearExpectations()}  function returns a {\f2 bool}  to indicate whether the verification was successful ({\f2 true}  for yes), so you can wrap that function call inside a {\f2 ASSERT_TRUE()}  if there is no point going further when the verification has failed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Check Points} \par}
Sometimes you may want to "reset" a mock object at various check points in your test: at each check point, you verify that all existing expectations on the mock object have been satisfied, and then you set some new expectations on it as if it's newly created. This allows you to work with a mock object in "phases" whose sizes are each manageable.\par
One such scenario is that in your test's {\f2 SetUp()}  function, you may want to put the object you are testing into a certain state, with the help from a mock object. Once in the desired state, you want to clear all expectations on the mock, such that in the {\f2 TEST_F}  body you can set fresh expectations on it.\par
As you may have figured out, the {\f2 Mock::VerifyAndClearExpectations()}  function we saw in the previous recipe can help you here. Or, if you are using {\f2 ON_CALL()}  to set default actions on the mock object and want to clear the default actions as well, use {\f2 Mock::VerifyAndClear(&mock_object)}  instead. This function does what {\f2 Mock::VerifyAndClearExpectations(&mock_object)}  does and returns the same {\f2 bool} , {\b plus}  it clears the {\f2 ON_CALL()}  statements on {\f2 mock_object}  too.\par
Another trick you can use to achieve the same effect is to put the expectations in sequences and insert calls to a dummy "check-point" function at specific places. Then you can verify that the mock function calls do happen at the right time. For example, if you are exercising code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Foo(1);\par
Foo(2);\par
Foo(3);\par
}
\par
and want to verify that {\f2 Foo(1)}  and {\f2 Foo(3)}  both invoke {\f2 mock.Bar("a")} , but {\f2 Foo(2)}  doesn't invoke anything. You can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MockFunction;\par
\par
TEST(FooTest, InvokesBarCorrectly) \{\par
  MyMock mock;\par
  // Class MockFunction<F> has exactly one mock method.  It is named\par
  // Call() and has type F.\par
  MockFunction<void(string check_point_name)> check;\par
  \{\par
    InSequence s;\par
\par
    EXPECT_CALL(mock, Bar("a"));\par
    EXPECT_CALL(check, Call("1"));\par
    EXPECT_CALL(check, Call("2"));\par
    EXPECT_CALL(mock, Bar("a"));\par
  \}\par
  Foo(1);\par
  check.Call("1");\par
  Foo(2);\par
  check.Call("2");\par
  Foo(3);\par
\}\par
}
\par
The expectation spec says that the first {\f2 Bar("a")}  must happen before check point "1", the second {\f2 Bar("a")}  must happen after check point "2", and nothing should happen between the two check points. The explicit check points make it easy to tell which {\f2 Bar("a")}  is called by which call to {\f2 Foo()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Destructors} \par}
Sometimes you want to make sure a mock object is destructed at the right time, e.g. after {\f2 bar->A()}  is called but before {\f2 bar->B()}  is called. We already know that you can specify constraints on the order of mock function calls, so all we need to do is to mock the destructor of the mock function.\par
This sounds simple, except for one problem: a destructor is a special function with special syntax and special semantics, and the {\f2 MOCK_METHOD0}  macro doesn't work for it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD0(~MockFoo, void());  // Won't compile!\par
}
\par
The good news is that you can use a simple pattern to achieve the same effect. First, add a mock function {\f2 Die()}  to your mock class and call it in the destructor, like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  // Add the following two lines to the mock class.\par
  MOCK_METHOD0(Die, void());\par
  virtual ~MockFoo() \{ Die(); \}\par
\};\par
}
\par
(If the name {\f2 Die()}  clashes with an existing symbol, choose another name.) Now, we have translated the problem of testing when a {\f2 {\b MockFoo}}  object dies to testing when its {\f2 Die()}  method is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockFoo* foo = new MockFoo;\par
MockBar* bar = new MockBar;\par
...\par
\{\par
  InSequence s;\par
\par
  // Expects *foo to die after bar->A() and before bar->B().\par
  EXPECT_CALL(*bar, A());\par
  EXPECT_CALL(*foo, Die());\par
  EXPECT_CALL(*bar, B());\par
\}\par
}
\par
And that's that.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} and Threads} \par}
{\b IMPORTANT NOTE:}  What we describe in this recipe is {\b ONLY}  true on platforms where Google {\b Mock} is thread-safe. Currently these are only platforms that support the pthreads library (this includes Linux and Mac). To make it thread-safe on other platforms we only need to implement some synchronization operations in {\f2 "gtest/internal/gtest-port.h"} .\par
In a {\b unit}  test, it's best if you could isolate and test a piece of code in a single-threaded context. That avoids race conditions and dead locks, and makes debugging your test much easier.\par
Yet many programs are multi-threaded, and sometimes to test something we need to pound on it from more than one thread. Google {\b Mock} works for this purpose too.\par
Remember the steps for using a mock:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a mock object {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set its default actions and expectations using {\f2 ON_CALL()}  and {\f2 EXPECT_CALL()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The code under test calls methods of {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, verify and reset the mock.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the mock yourself, or let the code under test destroy it. The destructor will automatically verify it.\par}
If you follow the following simple rules, your mocks and threads can live happily together:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Execute your {\i test code}  (as opposed to the code being tested) in {\i one}  thread. This makes your test easy to follow.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Obviously, you can do step #1 without locking.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When doing step #2 and #5, make sure no other thread is accessing {\f2 foo} . Obvious too, huh?\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#3 and #4 can be done either in one thread or in multiple threads - anyway you want. Google {\b Mock} takes care of the locking, so you don't have to do any - unless required by your test logic.\par}
If you violate the rules (for example, if you set expectations on a mock while another thread is calling its methods), you get undefined behavior. That's not fun, so don't do it.\par
Google {\b Mock} guarantees that the action for a mock function is done in the same thread that called the mock function. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock, Foo(1))\par
    .WillOnce(action1);\par
EXPECT_CALL(mock, Foo(2))\par
    .WillOnce(action2);\par
}
\par
if {\f2 Foo(1)}  is called in thread 1 and {\f2 Foo(2)}  is called in thread 2, Google {\b Mock} will execute {\f2 action1}  in thread 1 and {\f2 action2}  in thread 2.\par
Google {\b Mock} does {\i not}  impose a sequence on actions performed in different threads (doing so may create deadlocks as the actions may need to cooperate). This means that the execution of {\f2 action1}  and {\f2 action2}  in the above example {\i may}  interleave. If this is a problem, you should add proper synchronization logic to {\f2 action1}  and {\f2 action2}  to make the test thread-safe.\par
Also, remember that {\f2 DefaultValue<T>}  is a global resource that potentially affects {\i all}  living mock objects in your program. Naturally, you won't want to mess with it from multiple threads or when there still are mocks in action.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Much Information Google {\b Mock} Prints} \par}
When Google {\b Mock} sees something that has the potential of being an error (e.g. a mock function with no expectation is called, a.k.a. an uninteresting call, which is allowed but perhaps you forgot to explicitly ban the call), it prints some warning messages, including the arguments of the function and the return value. Hopefully this will remind you to take a look and see if there is indeed a problem.\par
Sometimes you are confident that your tests are correct and may not appreciate such friendly messages. Some other times, you are debugging your tests or learning about the behavior of the code you are testing, and wish you could observe every mock call that happens (including argument values and the return value). Clearly, one size doesn't fit all.\par
You can control how much Google {\b Mock} tells you using the {\f2 --gmock_verbose=LEVEL}  command-line flag, where {\f2 LEVEL}  is a string with three possible values:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 info} : Google {\b Mock} will print all informational messages, warnings, and errors (most verbose). At this setting, Google {\b Mock} will also log any calls to the {\f2 ON_CALL/EXPECT_CALL}  macros.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 warning} : Google {\b Mock} will print both warnings and errors (less verbose). This is the default.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 error} : Google {\b Mock} will print errors only (least verbose).\par}
Alternatively, you can adjust the value of that flag from within your tests like so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gmock_verbose = "error";\par
}
\par
Now, judiciously use the right flag to enable Google {\b Mock} serve you better!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Gaining Super Vision into {\b Mock} Calls} \par}
You have a test using Google {\b Mock}. It fails: Google {\b Mock} tells you that some expectations aren't satisfied. However, you aren't sure why: Is there a typo somewhere in the matchers? Did you mess up the order of the {\f2 EXPECT_CALL} s? Or is the code under test doing something wrong? How can you find out the cause?\par
Won't it be nice if you have X-ray vision and can actually see the trace of all {\f2 EXPECT_CALL} s and mock method calls as they are made? For each call, would you like to see its actual argument values and which {\f2 EXPECT_CALL}  Google {\b Mock} thinks it matches?\par
You can unlock this power by running your test with the {\f2 --gmock_verbose=info}  flag. For example, given the test program:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::_;\par
using testing::HasSubstr;\par
using testing::Return;\par
\par
class MockFoo \{\par
 public:\par
  MOCK_METHOD2(F, void(const string& x, const string& y));\par
\};\par
\par
TEST(Foo, Bar) \{\par
  MockFoo mock;\par
  EXPECT_CALL(mock, F(_, _)).WillRepeatedly(Return());\par
  EXPECT_CALL(mock, F("a", "b"));\par
  EXPECT_CALL(mock, F("c", HasSubstr("d")));\par
\par
  mock.F("a", "good");\par
  mock.F("a", "b");\par
\}\par
}
\par
if you run it with {\f2 --gmock_verbose=info} , you will see this output:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [ RUN      ] Foo.Bar\par
\par
foo_test.cc:14: EXPECT_CALL(mock, F(_, _)) invoked\par
foo_test.cc:15: EXPECT_CALL(mock, F("a", "b")) invoked\par
foo_test.cc:16: EXPECT_CALL(mock, F("c", HasSubstr("d"))) invoked\par
foo_test.cc:14: Mock function call matches EXPECT_CALL(mock, F(_, _))...\par
    Function call: F(@0x7fff7c8dad40"a", @0x7fff7c8dad10"good")\par
foo_test.cc:15: Mock function call matches EXPECT_CALL(mock, F("a", "b"))...\par
    Function call: F(@0x7fff7c8dada0"a", @0x7fff7c8dad70"b")\par
foo_test.cc:16: Failure\par
Actual function call count doesn't match EXPECT_CALL(mock, F("c", HasSubstr("d")))...\par
         Expected: to be called once\par
           Actual: never called - unsatisfied and active\par
[  FAILED  ] Foo.Bar\par
}
\par
Suppose the bug is that the {\f2 "c"}  in the third {\f2 EXPECT_CALL}  is a typo and should actually be {\f2 "a"} . With the above message, you should see that the actual {\f2 F("a", "good")}  call is matched by the first {\f2 EXPECT_CALL} , not the third as you thought. From that it should be obvious that the third {\f2 EXPECT_CALL}  is written wrong. Case solved.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running Tests in Emacs} \par}
If you build and run your tests in Emacs, the source file locations of Google {\b Mock} and {\f2 Google Test} errors will be highlighted. Just press {\f2 <Enter>}  on one of them and you'll be taken to the offending line. Or, you can just type {\f2 C-x} ` to jump to the next error.\par
To make it even easier, you can add the following lines to your {\f2 ~/.emacs}  file:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid (global-set-key "\\M-m"   'compile)  ; m is for make\par
(global-set-key [M-down] 'next-error)\par
(global-set-key [M-up]   '(lambda () (interactive) (next-error -1)))\par
}
\par
Then you can type {\f2 M-m}  to start a build, or {\f2 M-up} /{\f2 M-down}  to move back and forth between errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Fusing Google {\b Mock} Source Files} \par}
Google {\b Mock}'s implementation consists of dozens of files (excluding its own tests). Sometimes you may want them to be packaged up in fewer files instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gmock_files.py}  in the {\f2 scripts/}  directory (starting with release 1.2.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gmock_files.py OUTPUT_DIR\par
}
\par
and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}} , {\f2 {\b gmock/gmock.h}} , and {\f2 gmock-gtest-all.cc}  in it. These three files contain everything you need to use Google {\b Mock} (and Google Test). Just copy them to anywhere you want and you are ready to write tests and use mocks. You can use the {\f2 scrpts/test/Makefile} file as an example on how to compile your tests against them.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Matchers Quickly} \par}
The {\f2 MATCHER*}  family of macros can be used to define custom matchers easily. The syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(name, description_string_expression) \{ statements; \}\par
}
\par
will define a matcher with the given name that executes the statements, which must return a {\f2 bool}  to indicate if the match succeeds. Inside the statements, you can refer to the value being matched by {\f2 arg} , and refer to its type by {\f2 arg_type} .\par
The description string is a {\f2 string} -typed expression that documents what the matcher does, and is used to generate the failure message when the match fails. It can (and should) reference the special {\f2 bool}  variable {\f2 negation} , and should evaluate to the description of the matcher when {\f2 negation}  is {\f2 false} , or that of the matcher's negation when {\f2 negation}  is {\f2 true} .\par
For convenience, we allow the description string to be empty ({\f2 ""} ), in which case Google {\b Mock} will use the sequence of words in the matcher name as the description.\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{ return (arg % 7) == 0; \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects mock_foo.Bar(n) to be called where n is divisible by 7.\par
EXPECT_CALL(mock_foo, Bar(IsDivisibleBy7()));\par
}
 or, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Not;\par
...\par
  EXPECT_THAT(some_expression, IsDivisibleBy7());\par
  EXPECT_THAT(some_other_expression, Not(IsDivisibleBy7()));\par
}
 If the above assertions fail, they will print something like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   Value of: some_expression\par
  Expected: is divisible by 7\par
    Actual: 27\par
...\par
  Value of: some_other_expression\par
  Expected: not (is divisible by 7)\par
    Actual: 21\par
}
 where the descriptions {\f2 "is divisible by 7"}  and {\f2 "not (is divisible
by 7)"}  are automatically calculated from the matcher name {\f2 IsDivisibleBy7} .\par
As you may have noticed, the auto-generated descriptions (especially those for the negation) may not be so great. You can always override them with a string expression of your own: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, std::string(negation ? "isn't" : "is") +\par
                        " divisible by 7") \{\par
  return (arg % 7) == 0;\par
\}\par
}
\par
Optionally, you can stream additional information to a hidden argument named {\f2 result_listener}  to explain the match result. For example, a better definition of {\f2 IsDivisibleBy7}  is: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{\par
  if ((arg % 7) == 0)\par
    return true;\par
\par
  *result_listener << "the remainder is " << (arg % 7);\par
  return false;\par
\}\par
}
\par
With this definition, the above assertion will give a better message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: some_expression\par
Expected: is divisible by 7\par
  Actual: 27 (the remainder is 6)\par
}
\par
You should let {\f2 MatchAndExplain()}  print {\i any additional information}  that can help a user understand the match result. Note that it should explain why the match succeeds in case of a success (unless it's obvious) - this is useful when the matcher is used inside {\f2 Not()} . There is no need to print the argument value itself, as Google {\b Mock} already prints it for you.\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The type of the value being matched ({\f2 arg_type} ) is determined by the context in which you use the matcher and is supplied to you by the compiler, so you don't need to worry about declaring it (nor can you). This allows the matcher to be polymorphic. For example, {\f2 IsDivisibleBy7()}  can be used to match any type where the value of {\f2 (arg % 7) == 0}  can be implicitly converted to a {\f2 bool} . In the {\f2 Bar(IsDivisibleBy7())}  example above, if method {\f2 Bar()}  takes an {\f2 int} , {\f2 arg_type}  will be {\f2 int} ; if it takes an {\f2 unsigned long} , {\f2 arg_type}  will be {\f2 unsigned long} ; and so on.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google {\b Mock} doesn't guarantee when or how many times a matcher will be invoked. Therefore the matcher logic must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters). This requirement must be satisfied no matter how you define the matcher (e.g. using one of the methods described in the following recipes). In particular, a matcher can never call a mock function, as that will affect the state of the mock object and Google {\b Mock}.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Matchers Quickly} \par}
Sometimes you'll want to define a matcher that has parameters. For that you can use the macro: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(name, param_name, description_string) \{ statements; \}\par
}
 where the description string can be either {\f2 ""}  or a string expression that references {\f2 negation}  and {\f2 param_name} .\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(HasAbsoluteValue, value, "") \{ return abs(arg) == value; \}\par
}
 will allow you to write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_THAT(Blah("a"), HasAbsoluteValue(n));\par
}
 which may lead to this message (assuming {\f2 n}  is 10): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Blah("a")\par
Expected: has absolute value 10\par
  Actual: -9\par
}
\par
Note that both the matcher description and its parameter are printed, making the message human-friendly.\par
In the matcher definition body, you can write {\f2 foo_type}  to reference the type of a parameter named {\f2 foo} . For example, in the body of {\f2 MATCHER_P(HasAbsoluteValue, value)}  above, you can write {\f2 value_type}  to refer to the type of {\f2 value} .\par
Google {\b Mock} also provides {\f2 MATCHER_P2} , {\f2 MATCHER_P3} , ..., up to {\f2 MATCHER_P10}  to support multi-parameter matchers: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(name, param_1, ..., param_k, description_string) \{ statements; \}\par
}
\par
Please note that the custom description string is for a particular {\b instance}  of the matcher, where the parameters have been bound to actual values. Therefore usually you'll want the parameter values to be part of the description. Google {\b Mock} lets you do that by referencing the matcher parameters in the description string expression.\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::PrintToString;\par
MATCHER_P2(InClosedRange, low, hi,\par
           std::string(negation ? "isn't" : "is") + " in range [" +\par
           PrintToString(low) + ", " + PrintToString(hi) + "]") \{\par
  return low <= arg && arg <= hi;\par
\}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: is in range [4, 6]\par
}
\par
If you specify {\f2 ""}  as the description, the failure message will contain the sequence of words in the matcher name followed by the parameter values printed as a tuple. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P2(InClosedRange, low, hi, "") \{ ... \}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the text: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: in closed range (4, 6)\par
}
\par
For the purpose of typing, you can view {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(Foo, p1, ..., pk, description_string) \{ ... \}\par
}
 as shorthand for {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename p1_type, ..., typename pk_type>\par
FooMatcherPk<p1_type, ..., pk_type>\par
Foo(p1_type p1, ..., pk_type pk) \{ ... \}\par
}
\par
When you write {\f2 Foo(v1, ..., vk)} , the compiler infers the types of the parameters {\f2 v1} , ..., and {\f2 vk}  for you. If you are not happy with the result of the type inference, you can specify the types by explicitly instantiating the template, as in {\f2 Foo<long, bool>(5, false)} . As said earlier, you don't get to (or need to) specify {\f2 arg_type}  as that's determined by the context in which the matcher is used.\par
You can assign the result of expression {\f2 Foo(p1, ..., pk)}  to a variable of type {\f2 FooMatcherPk<p1_type, ..., pk_type>} . This can be useful when composing matchers. Matchers that don't have a parameter or have only one parameter have special types: you can assign {\f2 Foo()}  to a {\f2 FooMatcher} -typed variable, and assign {\f2 Foo(p)}  to a {\f2 FooMatcherP<p_type>} -typed variable.\par
While you can instantiate a matcher template with reference types, passing the parameters by pointer usually makes your code more readable. If, however, you still want to pass a parameter by reference, be aware that in the failure message generated by the matcher you will see the value of the referenced object but not its address.\par
You can overload matchers with different numbers of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(Blah, a, description_string_1) \{ ... \}\par
MATCHER_P2(Blah, a, b, description_string_2) \{ ... \}\par
}
\par
While it's tempting to always use the {\f2 MATCHER*}  macros when defining a new matcher, you should also consider implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()}  instead (see the recipes that follow), especially if you need to use the matcher a lot. While these approaches require more work, they give you more control on the types of the value being matched and the matcher parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading matchers based on parameter types (as opposed to just based on the number of parameters).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Matchers} \par}
A matcher of argument type {\f2 T}  implements {\f2 {\b testing::MatcherInterface}<T>}  and does two things: it tests whether a value of type {\f2 T}  matches the matcher, and can describe what kind of values it matches. The latter ability is used for generating readable error messages when expectations are violated.\par
The interface looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MatchResultListener \{\par
 public:\par
  ...\par
  // Streams x to the underlying ostream; does nothing if the ostream\par
  // is NULL.\par
  template <typename T>\par
  MatchResultListener& operator<<(const T& x);\par
\par
  // Returns the underlying ostream.\par
  ::std::ostream* stream();\par
\};\par
\par
template <typename T>\par
class MatcherInterface \{\par
 public:\par
  virtual ~MatcherInterface();\par
\par
  // Returns true iff the matcher matches x; also explains the match\par
  // result to 'listener'.\par
  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;\par
\par
  // Describes this matcher to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\par
  // Describes the negation of this matcher to an ostream.\par
  virtual void DescribeNegationTo(::std::ostream* os) const;\par
\};\par
}
\par
If you need a custom matcher but {\f2 Truly()}  is not a good option (for example, you may not be happy with the way {\f2 Truly(predicate)}  describes itself, or you may want your matcher to be polymorphic as {\f2 Eq(value)}  is), you can define a matcher to do whatever you want in two steps: first implement the matcher interface, and then define a factory function to create a matcher instance. The second step is not strictly needed but it makes the syntax of using the matcher nicer.\par
For example, you can define a matcher to test whether an {\f2 int}  is divisible by 7 and then use it like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakeMatcher;\par
using ::testing::Matcher;\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n, MatchResultListener* listener) const \{\par
    return (n % 7) == 0;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "is divisible by 7";\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "is not divisible by 7";\par
  \}\par
\};\par
\par
inline Matcher<int> DivisibleBy7() \{\par
  return MakeMatcher(new DivisibleBy7Matcher);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(DivisibleBy7()));\par
}
\par
You may improve the matcher message by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n,\par
                               MatchResultListener* listener) const \{\par
    const int remainder = n % 7;\par
    if (remainder != 0) \{\par
      *listener << "the remainder is " << remainder;\par
    \}\par
    return remainder == 0;\par
  \}\par
  ...\par
\};\par
}
\par
Then, {\f2 EXPECT_THAT(x, DivisibleBy7());}  may general a message like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: x\par
Expected: is divisible by 7\par
  Actual: 23 (the remainder is 2)\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Matchers} \par}
You've learned how to write your own matchers in the previous recipe. Just one problem: a matcher created using {\f2 MakeMatcher()}  only works for one particular type of arguments. If you want a {\i polymorphic}  matcher that works with arguments of several types (for instance, {\f2 Eq(x)}  can be used to match a {\f2 value}  as long as {\f2 value}  == {\f2 x}  compiles \'96 {\f2 value}  and {\f2 x}  don't have to share the same type), you can learn the trick from {\f2 "gmock/gmock-matchers.h"}  but it's a bit involved.\par
Fortunately, most of the time you can define a polymorphic matcher easily with the help of {\f2 MakePolymorphicMatcher()} . Here's how you can define {\f2 NotNull()}  as an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
using ::testing::NotNull;\par
using ::testing::PolymorphicMatcher;\par
\par
class NotNullMatcher \{\par
 public:\par
  // To implement a polymorphic matcher, first define a COPYABLE class\par
  // that has three members MatchAndExplain(), DescribeTo(), and\par
  // DescribeNegationTo(), like the following.\par
\par
  // In this example, we want to use NotNull() with any pointer, so\par
  // MatchAndExplain() accepts a pointer of any type as its first argument.\par
  // In general, you can define MatchAndExplain() as an ordinary method or\par
  // a method template, or even overload it.\par
  template <typename T>\par
  bool MatchAndExplain(T* p,\par
                       MatchResultListener* /* listener */) const \{\par
    return p != NULL;\par
  \}\par
\par
  // Describes the property of a value matching this matcher.\par
  void DescribeTo(::std::ostream* os) const \{ *os << "is not NULL"; \}\par
\par
  // Describes the property of a value NOT matching this matcher.\par
  void DescribeNegationTo(::std::ostream* os) const \{ *os << "is NULL"; \}\par
\};\par
\par
// To construct a polymorphic matcher, pass an instance of the class\par
// to MakePolymorphicMatcher().  Note the return type.\par
inline PolymorphicMatcher<NotNullMatcher> NotNull() \{\par
  return MakePolymorphicMatcher(NotNullMatcher());\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(NotNull()));  // The argument must be a non-NULL pointer.\par
}
\par
{\b Note:}  Your polymorphic matcher class does {\b not}  need to inherit from {\f2 MatcherInterface}  or any other class, and its methods do {\b not}  need to be virtual.\par
Like in a monomorphic matcher, you may explain the match result by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Cardinalities} \par}
A cardinality is used in {\f2 Times()}  to tell Google {\b Mock} how many times you expect a call to occur. It doesn't have to be exact. For example, you can say {\f2 AtLeast(5)}  or {\f2 Between(2, 4)} .\par
If the built-in set of cardinalities doesn't suit you, you are free to define your own by implementing the following interface (in namespace {\f2 testing} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class CardinalityInterface \{\par
 public:\par
  virtual ~CardinalityInterface();\par
\par
  // Returns true iff call_count calls will satisfy this cardinality.\par
  virtual bool IsSatisfiedByCallCount(int call_count) const = 0;\par
\par
  // Returns true iff call_count calls will saturate this cardinality.\par
  virtual bool IsSaturatedByCallCount(int call_count) const = 0;\par
\par
  // Describes self to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\};\par
}
\par
For example, to specify that a call must occur even number of times, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Cardinality;\par
using ::testing::CardinalityInterface;\par
using ::testing::MakeCardinality;\par
\par
class EvenNumberCardinality : public CardinalityInterface \{\par
 public:\par
  virtual bool IsSatisfiedByCallCount(int call_count) const \{\par
    return (call_count % 2) == 0;\par
  \}\par
\par
  virtual bool IsSaturatedByCallCount(int call_count) const \{\par
    return false;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "called even number of times";\par
  \}\par
\};\par
\par
Cardinality EvenNumber() \{\par
  return MakeCardinality(new EvenNumberCardinality);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(3))\par
      .Times(EvenNumber());\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Actions Quickly} \par}
If the built-in actions don't work for you, and you find it inconvenient to use {\f2 Invoke()} , you can use a macro from the {\f2 ACTION*}  family to quickly define a new action that can be used in your code as if it's a built-in action.\par
By writing {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(name) \{ statements; \}\par
}
 in a namespace scope (i.e. not inside a class or function), you will define an action with the given name that executes the statements. The value returned by {\f2 statements}  will be used as the return value of the action. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as {\f2 argK} . For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(IncrementArg1) \{ return ++(*arg1); \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(IncrementArg1());\par
}
\par
Note that you don't need to specify the types of the mock function arguments. Rest assured that your code is type-safe though: you'll get a compiler error if {\f2 *arg1}  doesn't support the {\f2 ++}  operator, or if the type of {\f2 ++(*arg1)}  isn't compatible with the mock function's return type.\par
Another example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  (*arg2)(5);\par
  Blah();\par
  *arg1 = 0;\par
  return arg0;\par
\}\par
}
 defines an action {\f2 Foo()}  that invokes argument #2 (a function pointer) with 5, calls function {\f2 Blah()} , sets the value pointed to by argument #1 to 0, and returns argument #0.\par
For more convenience and flexibility, you can also use the following pre-defined symbols in the body of {\f2 ACTION} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 argK_type}  \cell }{The type of the K-th (0-based) argument of the mock function  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{All arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{The type of all arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{The return type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{The type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For example, when using an {\f2 ACTION}  as a stub action for mock function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int DoSomething(bool flag, int* ptr);\par
}
 we have: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Pre-defined Symbol}  \cell }{{\b Is Bound To}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0}  \cell }{the value of {\f2 flag}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0_type}  \cell }{the type {\f2 bool}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1}  \cell }{the value of {\f2 ptr}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1_type}  \cell }{the type {\f2 int*}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{the tuple {\f2 (flag, ptr)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{the type {\f2 ::testing::tuple<bool, int*>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{the type {\f2 int}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{the type {\f2 int(bool, int*)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Actions Quickly} \par}
Sometimes you'll want to parameterize an action you define. For that we have another macro {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(name, param) \{ statements; \}\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Add, n) \{ return arg0 + n; \}\par
}
 will allow you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns argument #0 + 5.\par
... WillOnce(Add(5));\par
}
\par
For convenience, we use the term {\i arguments}  for the values used to invoke the mock function, and the term {\i parameters}  for the values used to instantiate an action.\par
Note that you don't need to provide the type of the parameter either. Suppose the parameter is named {\f2 param} , you can also use the Google-Mock-defined symbol {\f2 param_type}  to refer to the type of the parameter as inferred by the compiler. For example, in the body of {\f2 ACTION_P(Add, n)}  above, you can write {\f2 n_type}  for the type of {\f2 n} .\par
Google {\b Mock} also provides {\f2 ACTION_P2} , {\f2 ACTION_P3} , and etc to support multi-parameter actions. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P2(ReturnDistanceTo, x, y) \{\par
  double dx = arg0 - x;\par
  double dy = arg1 - y;\par
  return sqrt(dx*dx + dy*dy);\par
\}\par
}
 lets you write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(ReturnDistanceTo(5.0, 26.5));\par
}
\par
You can view {\f2 ACTION}  as a degenerated parameterized action where the number of parameters is 0.\par
You can also easily define actions overloaded on the number of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Plus, a) \{ ... \}\par
ACTION_P2(Plus, a, b) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Restricting the Type of an Argument or Parameter in an ACTION} \par}
For maximum brevity and reusability, the {\f2 ACTION*}  macros don't ask you to provide the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.\par
Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  // Makes sure arg0 can be converted to int.\par
  int n = arg0;\par
  ... use n instead of arg0 here ...\par
\}\par
\par
ACTION_P(Bar, param) \{\par
  // Makes sure the type of arg1 is const char*.\par
  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\par
\par
  // Makes sure param can be converted to bool.\par
  bool flag = param;\par
\}\par
}
 where {\f2 StaticAssertTypeEq}  is a compile-time assertion in Google Test that verifies two types are the same.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Action Templates Quickly} \par}
Sometimes you want to give an action explicit template parameters that cannot be inferred from its value parameters. {\f2 ACTION_TEMPLATE()}  supports that and can be viewed as an extension to {\f2 ACTION()}  and {\f2 ACTION_P*()} .\par
The syntax: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_TEMPLATE(ActionName,\par
                HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),\par
                AND_n_VALUE_PARAMS(p1, ..., p_n)) \{ statements; \}\par
}
\par
defines an action template that takes {\i m}  explicit template parameters and {\i n}  value parameters, where {\i m}  is between 1 and 10, and {\i n}  is between 0 and 10. {\f2 name_i}  is the name of the i-th template parameter, and {\f2 kind_i}  specifies whether it's a {\f2 typename} , an integral constant, or a template. {\f2 p_i}  is the name of the i-th value parameter.\par
Example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // DuplicateArg<k, T>(output) converts the k-th argument of the mock\par
// function to type T and copies it to *output.\par
ACTION_TEMPLATE(DuplicateArg,\par
                // Note the comma between int and k:\par
                HAS_2_TEMPLATE_PARAMS(int, k, typename, T),\par
                AND_1_VALUE_PARAMS(output)) \{\par
  *output = T(::testing::get<k>(args));\par
\}\par
}
\par
To create an instance of an action template, write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m>(v1, ..., v_n)\par
}
 where the {\f2 t} s are the template arguments and the {\f2 v} s are the value arguments. The value argument types are inferred by the compiler. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  int n;\par
  EXPECT_CALL(mock, Foo(_, _))\par
      .WillOnce(DuplicateArg<1, unsigned char>(&n));\par
}
\par
If you want to explicitly specify the value argument types, you can provide additional template arguments: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m, u1, ..., u_k>(v1, ..., v_n)\par
}
 where {\f2 u_i}  is the desired type of {\f2 v_i} .\par
{\f2 ACTION_TEMPLATE}  and {\f2 ACTION} /{\f2 ACTION_P*}  can be overloaded on the number of value parameters, but not on the number of template parameters. Without the restriction, the meaning of the following is unclear:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid OverloadedAction<int, bool>(x);\par
}
\par
Are we using a single-template-parameter action where {\f2 bool}  refers to the type of {\f2 x} , or a two-template-parameter action where the compiler is asked to infer the type of {\f2 x} ?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using the ACTION Object's Type} \par}
If you are writing a function that returns an {\f2 ACTION}  object, you'll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Given Definition}  \cell }{{\b Expression}  \cell }{{\b Has Type}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Foo)}  \cell }{{\f2 Foo()}  \cell }{{\f2 FooAction}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Foo, HAS_m_TEMPLATE_PARAMS(...), AND_0_VALUE_PARAMS())}  \cell }{{\f2 Foo<t1, ..., t_m>()}  \cell }{{\f2 FooAction<t1, ..., t_m>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Bar, param)}  \cell }{{\f2 Bar(int_value)}  \cell }{{\f2 BarActionP<int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Bar, HAS_m_TEMPLATE_PARAMS(...), AND_1_VALUE_PARAMS(p1))}  \cell }{{\f2 Bar<t1, ..., t_m>(int_value)}  \cell }{{\f2 FooActionP<t1, ..., t_m, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P2(Baz, p1, p2)}  \cell }{{\f2 Baz(bool_value, int_value)}  \cell }{{\f2 BazActionP2<bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Baz, HAS_m_TEMPLATE_PARAMS(...), AND_2_VALUE_PARAMS(p1, p2))}  \cell }{{\f2 Baz<t1, ..., t_m>(bool_value, int_value)}  \cell }{{\f2 FooActionP2<t1, ..., t_m, bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that we have to pick different suffixes ({\f2 Action} , {\f2 ActionP} , {\f2 ActionP2} , and etc) for actions with different numbers of value parameters, or the action definitions cannot be overloaded on the number of them.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Actions} \par}
While the {\f2 ACTION*}  macros are very convenient, sometimes they are inappropriate. For example, despite the tricks shown in the previous recipes, they don't let you directly specify the types of the mock function arguments and the action parameters, which in general leads to unoptimized compiler error messages that can baffle unfamiliar users. They also don't allow overloading actions based on parameter types without jumping through some hoops.\par
An alternative to the {\f2 ACTION*}  macros is to implement {\f2 {\b testing::ActionInterface}<F>} , where {\f2 F}  is the type of the mock function in which the action will be used. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename F>class ActionInterface \{\par
 public:\par
  virtual ~ActionInterface();\par
\par
  // Performs the action.  Result is the return type of function type\par
  // F, and ArgumentTuple is the tuple of arguments of F.\par
  //\par
  // For example, if F is int(bool, const string&), then Result would\par
  // be int, and ArgumentTuple would be ::testing::tuple<bool, const string&>.\par
  virtual Result Perform(const ArgumentTuple& args) = 0;\par
\};\par
\par
using ::testing::_;\par
using ::testing::Action;\par
using ::testing::ActionInterface;\par
using ::testing::MakeAction;\par
\par
typedef int IncrementMethod(int*);\par
\par
class IncrementArgumentAction : public ActionInterface<IncrementMethod> \{\par
 public:\par
  virtual int Perform(const ::testing::tuple<int*>& args) \{\par
    int* p = ::testing::get<0>(args);  // Grabs the first argument.\par
    return *p++;\par
  \}\par
\};\par
\par
Action<IncrementMethod> IncrementArgument() \{\par
  return MakeAction(new IncrementArgumentAction);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Baz(_))\par
      .WillOnce(IncrementArgument());\par
\par
  int n = 5;\par
  foo.Baz(&n);  // Should return 5 and change n to 6.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Actions} \par}
The previous recipe showed you how to define your own action. This is all good, except that you need to know the type of the function in which the action will be used. Sometimes that can be a problem. For example, if you want to use the action in functions with {\i different}  types (e.g. like {\f2 Return()}  and {\f2 SetArgPointee()} ).\par
If an action can be used in several types of mock functions, we say it's {\i polymorphic} . The {\f2 MakePolymorphicAction()}  function template makes it easy to define such an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
template <typename Impl>\par
PolymorphicAction<Impl> MakePolymorphicAction(const Impl& impl);\par
\par
\}  // namespace testing\par
}
\par
As an example, let's define an action that returns the second argument in the mock function's argument list. The first step is to define an implementation class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ReturnSecondArgumentAction \{\par
 public:\par
  template <typename Result, typename ArgumentTuple>\par
  Result Perform(const ArgumentTuple& args) const \{\par
    // To get the i-th (0-based) argument, use ::testing::get<i>(args).\par
    return ::testing::get<1>(args);\par
  \}\par
\};\par
}
\par
This implementation class does {\i not}  need to inherit from any particular class. What matters is that it must have a {\f2 Perform()}  method template. This method template takes the mock function's arguments as a tuple in a {\b single}  argument, and returns the result of the action. It can be either {\f2 const}  or not, but must be invokable with exactly one template argument, which is the result type. In other words, you must be able to call {\f2 Perform<R>(args)}  where {\f2 R}  is the mock function's return type and {\f2 args}  is its arguments in a tuple.\par
Next, we use {\f2 MakePolymorphicAction()}  to turn an instance of the implementation class into the polymorphic action we need. It will be convenient to have a wrapper for this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicAction;\par
using ::testing::PolymorphicAction;\par
\par
PolymorphicAction<ReturnSecondArgumentAction> ReturnSecondArgument() \{\par
  return MakePolymorphicAction(ReturnSecondArgumentAction());\par
\}\par
}
\par
Now, you can use this polymorphic action the same way you use the built-in ones:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, int(bool flag, int n));\par
  MOCK_METHOD3(DoThat, string(int x, const char* str1, const char* str2));\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(ReturnSecondArgument());\par
  EXPECT_CALL(foo, DoThat(_, _, _))\par
      .WillOnce(ReturnSecondArgument());\par
  ...\par
  foo.DoThis(true, 5);         // Will return 5.\par
  foo.DoThat(1, "Hi", "Bye");  // Will return "Hi".\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Teaching Google {\b Mock} How to Print Your Values} \par}
When an uninteresting or unexpected call occurs, Google {\b Mock} prints the argument values and the stack trace to help you debug. Assertion macros like {\f2 EXPECT_THAT}  and {\f2 EXPECT_EQ}  also print the values in question when the assertion fails. Google {\b Mock} and Google Test do this using Google Test's user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out. {\f2 Google Test's advanced guide} explains how to extend the printer to do a better job at printing your particular type than to dump the bytes. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
DesignDoc{\tc \v DesignDoc}\par \pard\plain 
{\bkmkstart AAAAAAAEMQ}
{\bkmkend AAAAAAAEMQ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page discusses the design of new Google {\b Mock} features.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Macros for Defining Actions} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Problem} \par}
Due to the lack of closures in C++, it currently requires some non-trivial effort to define a custom action in Google {\b Mock}. For example, suppose you want to "increment the value pointed to by the
second argument of the mock function and return it", you could write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int IncrementArg1(Unused, int* p, Unused) \{\par
  return ++(*p);\par
\}\par
\par
... WillOnce(Invoke(IncrementArg1));\par
}
\par
There are several things unsatisfactory about this approach:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Even though the action only cares about the second argument of the mock function, its definition needs to list other arguments as dummies. This is tedious.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The defined action is usable only in mock functions that takes exactly 3 arguments - an unnecessary restriction.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
To use the action, one has to say {\f2 Invoke(IncrementArg1)} , which isn't as nice as {\f2 IncrementArg1()} .\par}
The latter two problems can be overcome using {\f2 MakePolymorphicAction()} , but it requires much more boilerplate code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class IncrementArg1Action \{\par
 public:\par
  template <typename Result, typename ArgumentTuple>\par
  Result Perform(const ArgumentTuple& args) const \{\par
    return ++(*tr1::get<1>(args));\par
  \}\par
\};\par
\par
PolymorphicAction<IncrementArg1Action> IncrementArg1() \{\par
  return MakePolymorphicAction(IncrementArg1Action());\par
\}\par
\par
... WillOnce(IncrementArg1());\par
}
\par
Our goal is to allow defining custom actions with the least amount of boiler-plate C++ requires.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Solution} \par}
We propose to introduce a new macro: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(name) \{ statements; \}\par
}
\par
Using this in a namespace scope will define an action with the given name that executes the statements. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as {\f2 argK} . For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(IncrementArg1) \{ return ++(*arg1); \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(IncrementArg1());\par
}
\par
Note that you don't need to specify the types of the mock function arguments, as brevity is a top design goal here. Rest assured that your code is still type-safe though: you'll get a compiler error if {\f2 *arg1}  doesn't support the {\f2 ++}  operator, or if the type of {\f2 ++(*arg1)}  isn't compatible with the mock function's return type.\par
Another example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  (*arg2)(5);\par
  Blah();\par
  *arg1 = 0;\par
  return arg0;\par
\}\par
}
 defines an action {\f2 Foo()}  that invokes argument #2 (a function pointer) with 5, calls function {\f2 Blah()} , sets the value pointed to by argument #1 to 0, and returns argument #0.\par
For more convenience and flexibility, you can also use the following pre-defined symbols in the body of {\f2 ACTION} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 argK_type}  \cell }{The type of the K-th (0-based) argument of the mock function  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{All arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{The type of all arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{The return type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{The type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For example, when using an {\f2 ACTION}  as a stub action for mock function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int DoSomething(bool flag, int* ptr);\par
}
 we have: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Pre-defined Symbol}  \cell }{{\b Is Bound To}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0}  \cell }{the value of {\f2 flag}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0_type}  \cell }{the type {\f2 bool}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1}  \cell }{the value of {\f2 ptr}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1_type}  \cell }{the type {\f2 int*}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{the tuple {\f2 (flag, ptr)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{the type {\f2 {\b std::tr1::tuple}<bool, int*>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{the type {\f2 int}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{the type {\f2 int(bool, int*)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Parameterized actions} \par}
Sometimes you'll want to parameterize the action. For that we propose another macro {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(name, param) \{ statements; \}\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Add, n) \{ return arg0 + n; \}\par
}
 will allow you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns argument #0 + 5.\par
... WillOnce(Add(5));\par
}
\par
For convenience, we use the term {\i arguments}  for the values used to invoke the mock function, and the term {\i parameters}  for the values used to instantiate an action.\par
Note that you don't need to provide the type of the parameter either. Suppose the parameter is named {\f2 param} , you can also use the Google-Mock-defined symbol {\f2 param_type}  to refer to the type of the parameter as inferred by the compiler.\par
We will also provide {\f2 ACTION_P2} , {\f2 ACTION_P3} , and etc to support multi-parameter actions. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P2(ReturnDistanceTo, x, y) \{\par
  double dx = arg0 - x;\par
  double dy = arg1 - y;\par
  return sqrt(dx*dx + dy*dy);\par
\}\par
}
 lets you write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(ReturnDistanceTo(5.0, 26.5));\par
}
\par
You can view {\f2 ACTION}  as a degenerated parameterized action where the number of parameters is 0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Advanced Usages} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Overloading Actions} \par}
You can easily define actions overloaded on the number of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Plus, a) \{ ... \}\par
ACTION_P2(Plus, a, b) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Restricting the Type of an Argument or Parameter} \par}
For maximum brevity and reusability, the {\f2 ACTION*}  macros don't let you specify the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.\par
Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  // Makes sure arg0 can be converted to int.\par
  int n = arg0;\par
  ... use n instead of arg0 here ...\par
\}\par
\par
ACTION_P(Bar, param) \{\par
  // Makes sure the type of arg1 is const char*.\par
  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\par
\par
  // Makes sure param can be converted to bool.\par
  bool flag = param;\par
\}\par
}
 where {\f2 StaticAssertTypeEq}  is a compile-time assertion we plan to add to Google Test (the name is chosen to match {\f2 static_assert}  in C++0x).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using the ACTION Object's Type} \par}
If you are writing a function that returns an {\f2 ACTION}  object, you'll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Given Definition}  \cell }{{\b Expression}  \cell }{{\b Has Type}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Foo)}  \cell }{{\f2 Foo()}  \cell }{{\f2 FooAction}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Bar, param)}  \cell }{{\f2 Bar(int_value)}  \cell }{{\f2 BarActionP<int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P2(Baz, p1, p2)}  \cell }{{\f2 Baz(bool_value, int_value)}  \cell }{{\f2 BazActionP2<bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that we have to pick different suffixes ({\f2 Action} , {\f2 ActionP} , {\f2 ActionP2} , and etc) for actions with different numbers of parameters, or the action definitions cannot be overloaded on the number of parameters.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When to Use} \par}
While the new macros are very convenient, please also consider other means of implementing actions (e.g. via {\f2 ActionInterface}  or {\f2 MakePolymorphicAction()} ), especially if you need to use the defined action a lot. While the other approaches require more work, they give you more control on the types of the mock function arguments and the action parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading actions based on parameter types, as opposed to just the number of parameters.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Related Work} \par}
As you may have realized, the {\f2 ACTION*}  macros resemble closures (also known as lambda expressions or anonymous functions). Indeed, both of them seek to lower the syntactic overhead for defining a function.\par
C++0x will support lambdas, but they are not part of C++ right now. Some non-standard libraries (most notably BLL or Boost Lambda Library) try to alleviate this problem. However, they are not a good choice for defining actions as:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
They are non-standard and not widely installed. Google {\b Mock} only depends on standard libraries and {\f2 tr1::tuple} , which is part of the new C++ standard and comes with gcc 4+. We want to keep it that way.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
They are not trivial to learn.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
They will become obsolete when C++0x's lambda feature is widely supported. We don't want to make our users use a dying library.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Since they are based on operators, they are rather ad hoc: you cannot use statements, and you cannot pass the lambda arguments to a function, for example.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
They have subtle semantics that easily confuses new users. For example, in expression {\f2 _1++ + foo++} , {\f2 foo}  will be incremented only once where the expression is evaluated, while {\f2 _1}  will be incremented every time the unnamed function is invoked. This is far from intuitive.\par}
{\f2 ACTION*}  avoid all these problems.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Future Improvements} \par}
There may be a need for composing {\f2 ACTION*}  definitions (i.e. invoking another {\f2 ACTION}  inside the definition of one {\f2 ACTION*} ). We are not sure we want it yet, as one can get a similar effect by putting {\f2 ACTION}  definitions in function templates and composing the function templates. We'll revisit this based on user feedback.\par
The reason we don't allow {\f2 ACTION*()}  inside a function body is that the current C++ standard doesn't allow function-local types to be used to instantiate templates. The upcoming C++0x standard will lift this restriction. Once this feature is widely supported by compilers, we can revisit the implementation and add support for using {\f2 ACTION*()}  inside a function.\par
C++0x will also support lambda expressions. When they become available, we may want to support using lambdas as actions.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Macros for Defining Matchers} \par}
Once the macros for defining actions are implemented, we plan to do the same for matchers:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(name) \{ statements; \}\par
}
\par
where you can refer to the value being matched as {\f2 arg} . For example, given:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsPositive) \{ return arg > 0; \}\par
}
\par
you can use {\f2 IsPositive()}  as a matcher that matches a value iff it is greater than 0.\par
We will also add {\f2 MATCHER_P} , {\f2 MATCHER_P2} , and etc for parameterized matchers. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
DevGuide{\tc \v DevGuide}\par \pard\plain 
{\bkmkstart AAAAAAAEMR}
{\bkmkend AAAAAAAEMR}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you are interested in understanding the internals of Google {\b Mock}, building from source, or contributing ideas or modifications to the project, then this document is for you.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Introduction} \par}
First, let's give you some background of the project.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Licensing} \par}
All Google {\b Mock} source and pre-built packages are provided under the {\f2 New BSD License}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Google {\b Mock} Community} \par}
The Google {\b Mock} community exists primarily through the {\f2 discussion group}, the {\f2 issue tracker} and, to a lesser extent, the {\f2 source control repository}. You are definitely encouraged to contribute to the discussion and you can also help us to keep the effectiveness of the group high by following and promoting the guidelines listed here.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Please Be Friendly} \par}
Showing courtesy and respect to others is a vital part of the Google culture, and we strongly encourage everyone participating in Google {\b Mock} development to join us in accepting nothing less. Of course, being courteous is not the same as failing to constructively disagree with each other, but it does mean that we should be respectful of each other when enumerating the 42 technical reasons that a particular proposal may not be the best choice. There's never a reason to be antagonistic or dismissive toward anyone who is sincerely trying to contribute to a discussion.\par
Sure, C++ testing is serious business and all that, but it's also a lot of fun. Let's keep it that way. Let's strive to be one of the friendliest communities in all of open source.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Where to Discuss Google {\b Mock}} \par}
As always, discuss Google {\b Mock} in the official {\f2 Google C++ Mocking Framework discussion group}. You don't have to actually submit code in order to sign up. Your participation itself is a valuable contribution.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Working with the Code} \par}
If you want to get your hands dirty with the code inside Google {\b Mock}, this is the section for you.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Checking Out the Source from Subversion} \par}
Checking out the Google {\b Mock} source is most useful if you plan to tweak it yourself. You check out the source for Google {\b Mock} using a {\f2 Subversion} client as you would for any other project hosted on Google Code. Please see the instruction on the {\f2 source code access page} for how to do it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Compiling from Source} \par}
Once you check out the code, you can find instructions on how to compile it in the ../README.md "README" file.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing} \par}
A mocking framework is of no good if itself is not thoroughly tested. Tests should be written for any new code, and changes should be verified to not break existing tests before they are submitted for review. To perform the tests, follow the instructions in {\f2 README} and verify that there are no failures.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Contributing Code} \par}
We are excited that Google {\b Mock} is now open source, and hope to get great patches from the community. Before you fire up your favorite IDE and begin hammering away at that new feature, though, please take the time to read this section and understand the process. While it seems rigorous, we want to keep a high standard of quality in the code base.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Contributor License Agreements} \par}
You must sign a Contributor License Agreement (CLA) before we can accept any code. The CLA protects you and us.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you are an individual writing original source code and you're sure you own the intellectual property, then you'll need to sign an {\f2 individual CLA}.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you work for a company that wants to allow you to contribute your work to Google {\b Mock}, then you'll need to sign a {\f2 corporate CLA}.\par}
Follow either of the two links above to access the appropriate CLA and instructions for how to sign and return it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Coding Style} \par}
To keep the source consistent, readable, diffable and easy to merge, we use a fairly rigid coding style, as defined by the {\f2 google-styleguide} project. All patches will be expected to conform to the style outlined {\f2 here}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Submitting Patches} \par}
Please do submit code. Here's what you need to do:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Normally you should make your change against the SVN trunk instead of a branch or a tag, as the latter two are for release control and should be treated mostly as read-only.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Decide which code you want to submit. A submission should be a set of changes that addresses one issue in the {\f2 Google Mock issue tracker}. Please don't mix more than one logical change per submittal, because it makes the history hard to follow. If you want to make a change that doesn't have a corresponding issue in the issue tracker, please create one.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Also, coordinate with team members that are listed on the issue in question. This ensures that work isn't being duplicated and communicating your plan early also generally leads to better patches.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Ensure that your code adheres to the Google Mock source code style.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Ensure that there are unit tests for your code.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Sign a Contributor License Agreement.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a patch file using {\f2 svn diff} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab We use {\f2 Rietveld} to do web-based code reviews. You can read about the tool {\f2 here}. When you are ready, upload your patch via Rietveld and notify {\f2 googlemock@googlegroups.com}  to review it. There are several ways to upload the patch. We recommend using the {\f2 upload_gmock.py} script, which you can find in the {\f2 scripts/}  folder in the SVN trunk.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google {\b Mock} Committers} \par}
The current members of the Google {\b Mock} engineering team are the only committers at present. In the great tradition of eating one's own dogfood, we will be requiring each new Google {\b Mock} engineering team member to earn the right to become a committer by following the procedures in this document, writing consistently great code, and demonstrating repeatedly that he or she truly gets the zen of Google {\b Mock}.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Release Process} \par}
We follow the typical release process for Subversion-based projects:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A release branch named {\f2 release-X.Y}  is created.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Bugs are fixed and features are added in trunk; those individual patches are merged into the release branch until it's stable.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab An individual point release (the {\f2 Z}  in {\f2 X.Y.Z} ) is made by creating a tag from the branch.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat steps 2 and 3 throughout one release cycle (as determined by features or time).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Go back to step 1 to create another release branch and so on.\par}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
This page is based on the {\f2 Making GWT Better} guide from the {\f2 Google Web Toolkit} project. Except as otherwise {\f2 noted}, the content of this page is licensed under the {\f2 Creative Commons Attribution 2.5 License}. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentation{\tc \v Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAEMS}
{\bkmkend AAAAAAAEMS}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all documentation wiki pages for Google {\b Mock} **(the SVN trunk version)**{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b if you use a released version of Google {\b Mock}, please read the documentation for that specific version instead.} {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
ForDummies \'96 start here if you are new to Google {\b Mock}.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
CheatSheet \'96 a quick reference.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
CookBook \'96 recipes for doing various tasks using Google {\b Mock}.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
FrequentlyAskedQuestions \'96 check here before asking a question on the mailing list.\par}
\par}
To contribute code to Google {\b Mock}, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
../googletest/docs/PumpManual.md "Pump Manual" \'96 how we generate some of Google {\b Mock}'s source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
ForDummies{\tc \v ForDummies}\par \pard\plain 
{\bkmkstart AAAAAAAEMT}
{\bkmkend AAAAAAAEMT}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
({\b Note:}  If you get compiler errors that you don't understand, be sure to consult {\f2 Google Mock Doctor}.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Is Google C++ Mocking Framework?} \par}
When you write a prototype or test, often it's not feasible or wise to rely on real objects entirely. A {\b mock object}  implements the same interface as a real object (so it can be used as one), but lets you specify at run time how it will be used and what it should do (which methods will be called? in which order? how many times? with what arguments? what will they return? etc).\par
{\b Note:}  It is easy to confuse the term {\i fake objects}  with mock objects. Fakes and mocks actually mean very different things in the Test-Driven Development (TDD) community:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fake}  objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocks}  are objects pre-programmed with {\i expectations} , which form a specification of the calls they are expected to receive.\par}
If all this seems too abstract for you, don't worry - the most important thing to remember is that a mock allows you to check the {\i interaction}  between itself and code that uses it. The difference between fakes and mocks will become much clearer once you start to use mocks.\par
{\b Google C++ Mocking Framework}  (or {\b Google {\b Mock}}  for short) is a library (sometimes we also call it a "framework" to make it sound cool) for creating mock classes and using them. It does to C++ what {\f2 jMock} and {\f2 EasyMock} do to Java.\par
Using Google {\b Mock} involves three basic steps:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use some simple macros to describe the interface you want to mock, and they will expand to the implementation of your mock class;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects and specify its expectations and behavior using an intuitive syntax;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects. Google {\b Mock} will catch any violation of the expectations as soon as it arises.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Why Google {\b Mock}?} \par}
While mock objects help you remove unnecessary dependencies in tests and make them fast and reliable, using mocks manually in C++ is {\i hard} :\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Someone has to implement the mocks. The job is usually tedious and error-prone. No wonder people go great distance to avoid it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The quality of those manually written mocks is a bit, uh, unpredictable. You may see some really polished ones, but you may also see some that were hacked up in a hurry and have all sorts of ad hoc restrictions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The knowledge you gained from using one mock doesn't transfer to the next.\par}
In contrast, Java and Python programmers have some fine mock frameworks, which automate the creation of mocks. As a result, mocking is a proven effective technique and widely adopted practice in those communities. Having the right tool absolutely makes the difference.\par
Google {\b Mock} was built to help C++ programmers. It was inspired by {\f2 jMock} and {\f2 EasyMock}, but designed with C++'s specifics in mind. It is your friend if any of the following problems is bothering you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You are stuck with a sub-optimal design and wish you had done more prototyping before it was too late, but prototyping in C++ is by no means "rapid".\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are slow as they depend on too many libraries or use expensive resources (e.g. a database).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are brittle as some resources they use are unreliable (e.g. the network).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test how your code handles a failure (e.g. a file checksum error), but it's not easy to cause one.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You need to make sure that your module interacts with other modules in the right way, but it's hard to observe the interaction; therefore you resort to observing the side effects at the end of the action, which is awkward at best.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to "mock out" your dependencies, except that they don't have mock implementations yet; and, frankly, you aren't thrilled by some of those hand-written mocks.\par}
We encourage you to use Google {\b Mock} as:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i design}  tool, for it lets you experiment with your interface design early and often. More iterations lead to better designs!\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i testing}  tool to cut your tests' outbound dependencies and probe the interaction between your module and its collaborators.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting Started} \par}
Using Google {\b Mock} is easy! Inside your C++ source file, just {\f2 #include}  {\f2 "gtest/gtest.h"}  and {\f2 "gmock/gmock.h"} , and you are ready to go.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 A Case for {\b Mock} Turtles} \par}
Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, {\f2 Turtle} ) and code to that interface:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Turtle \{\par
  ...\par
  virtual ~Turtle() \{\}\par
  virtual void PenUp() = 0;\par
  virtual void PenDown() = 0;\par
  virtual void Forward(int distance) = 0;\par
  virtual void Turn(int degrees) = 0;\par
  virtual void GoTo(int x, int y) = 0;\par
  virtual int GetX() const = 0;\par
  virtual int GetY() const = 0;\par
\};\par
}
\par
(Note that the destructor of {\f2 Turtle}  {\b must}  be virtual, as is the case for {\b all}  classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you'll get corrupted program states like memory leaks.)\par
You can control whether the turtle's movement will leave a trace using {\f2 PenUp()}  and {\f2 PenDown()} , and control its movement using {\f2 Forward()} , {\f2 Turn()} , and {\f2 GoTo()} . Finally, {\f2 GetX()}  and {\f2 GetY()}  tell you the current position of the turtle.\par
Your program will normally use a real implementation of this interface. In tests, you can use a mock implementation instead. This allows you to easily check what drawing primitives your program is calling, with what arguments, and in which order. Tests written this way are much more robust (they won't break because your new machine does anti-aliasing differently), easier to read and maintain (the intent of a test is expressed in the code, not in some binary images), and run {\i much, much faster} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the {\b Mock} Class} \par}
If you are lucky, the mocks you need to use have already been implemented by some nice people. If, however, you find yourself in the position to write a mock class, relax - Google {\b Mock} turns this task into a fun game! (Well, almost.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Define It} \par}
Using the {\f2 Turtle}  interface as example, here are the simple steps you need to follow:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class {\f2 MockTurtle}  from {\f2 Turtle} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Take a {\i virtual}  function of {\f2 Turtle}  (while it's possible to {\f2 mock non-virtual methods using templates}, it's much more involved). Count how many arguments it has.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the {\f2 public:}  section of the child class, write {\f2 MOCK_METHODn();}  (or {\f2 MOCK_CONST_METHODn();}  if you are mocking a {\f2 const}  method), where {\f2 n}  is the number of the arguments; if you counted wrong, shame on you, and a compiler error will tell you so.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Now comes the fun part: you take the function signature, cut-and-paste the {\i function name}  as the {\i first}  argument to the macro, and leave what's left as the {\i second}  argument (in case you're curious, this is the {\i type of the function} ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat until all virtual functions you want to mock are done.\par}
After the process, you should have something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"  // Brings in Google Mock.\par
class MockTurtle : public Turtle \{\par
 public:\par
  ...\par
  MOCK_METHOD0(PenUp, void());\par
  MOCK_METHOD0(PenDown, void());\par
  MOCK_METHOD1(Forward, void(int distance));\par
  MOCK_METHOD1(Turn, void(int degrees));\par
  MOCK_METHOD2(GoTo, void(int x, int y));\par
  MOCK_CONST_METHOD0(GetX, int());\par
  MOCK_CONST_METHOD0(GetY, int());\par
\};\par
}
\par
You don't need to define these mock methods somewhere else - the {\f2 MOCK_METHOD*}  macros will generate the definitions for you. It's that simple! Once you get the hang of it, you can pump out mock classes faster than your source-control system can handle your check-ins.\par
{\b Tip:}  If even this is too much work for you, you'll find the {\f2 gmock_gen.py}  tool in Google {\b Mock}'s {\f2 scripts/generator/}  directory (courtesy of the {\f2 cppclean} project) useful. This command-line tool requires that you have Python 2.4 installed. You give it a C++ file and the name of an abstract class defined in it, and it will print the definition of the mock class for you. Due to the complexity of the C++ language, this script may not always work, but it can be quite handy when it does. For more details, read the {\f2 user documentation}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Where to Put It} \par}
When you define a mock class, you need to decide where to put its definition. Some people put it in a {\f2 *_test.cc} . This is fine when the interface being mocked (say, {\f2 Foo} ) is owned by the same person or team. Otherwise, when the owner of {\f2 Foo}  changes it, your test could break. (You can't really expect {\f2 Foo} 's maintainer to fix every test that uses {\f2 Foo} , can you?)\par
So, the rule of thumb is: if you need to mock {\f2 Foo}  and it's owned by others, define the mock class in {\f2 Foo} 's package (better, in a {\f2 testing}  sub-package such that you can clearly separate production code and testing utilities), and put it in a {\f2 mock_foo.h} . Then everyone can reference {\f2 mock_foo.h}  from their tests. If {\f2 Foo}  ever changes, there is only one copy of {\f2 {\b MockFoo}}  to change, and only tests that depend on the changed methods need to be fixed.\par
Another way to do it: you can introduce a thin layer {\f2 FooAdaptor}  on top of {\f2 Foo}  and code to this new interface. Since you own {\f2 FooAdaptor} , you can absorb changes in {\f2 Foo}  much more easily. While this is more work initially, carefully choosing the adaptor interface can make your code easier to write and more readable (a net win in the long run), as you can choose {\f2 FooAdaptor}  to fit your specific domain much better than {\f2 Foo}  does.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
Once you have a mock class, using it is easy. The typical work flow is:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names from the {\f2 testing}  namespace such that you can use them unqualified (You only have to do it once per file. Remember that namespaces are a good idea and good for your health.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Specify your expectations on them (How many times will a method be called? With what arguments? What should it do? etc.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise some code that uses the mocks; optionally, check the result using Google Test assertions. If a mock method is called more than expected or with wrong arguments, you'll get an error immediately.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock is destructed, Google {\b Mock} will automatically check whether all expectations on it have been satisfied.\par}
Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "path/to/mock-turtle.h"\par
#include "gmock/gmock.h"\par
#include "gtest/gtest.h"\par
using ::testing::AtLeast;                     // #1\par
\par
TEST(PainterTest, CanDrawSomething) \{\par
  MockTurtle turtle;                          // #2\par
  EXPECT_CALL(turtle, PenDown())              // #3\par
      .Times(AtLeast(1));\par
\par
  Painter painter(&turtle);                   // #4\par
\par
  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));\par
\}                                             // #5\par
\par
int main(int argc, char** argv) \{\par
  // The following line must be executed to initialize Google Mock\par
  // (and Google Test) before running the tests.\par
  ::testing::InitGoogleMock(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
As you might have guessed, this test checks that {\f2 PenDown()}  is called at least once. If the {\f2 painter}  object didn't call this method, your test will fail with a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/my_test.cc:119: Failure\par
Actual function call count doesn't match this expectation:\par
Actually: never called;\par
Expected: called at least once.\par
}
\par
{\b Tip 1:}  If you run the test from an Emacs buffer, you can hit {\f2 <Enter>}  on the line number displayed in the error message to jump right to the failed expectation.\par
{\b Tip 2:}  If your mock objects are never deleted, the final verification won't happen. Therefore it's a good idea to use a heap leak checker in your tests when you allocate mocks on the heap.\par
{\b Important note:}  Google {\b Mock} requires expectations to be set {\b before}  the mock functions are called, otherwise the behavior is {\b undefined} . In particular, you mustn't interleave {\f2 EXPECT_CALL()} s and calls to the mock functions.\par
This means {\f2 EXPECT_CALL()}  should be read as expecting that a call will occur {\i in the future} , not that a call has occurred. Why does Google {\b Mock} work like that? Well, specifying the expectation beforehand allows Google {\b Mock} to report a violation as soon as it arises, when the context (stack trace, etc) is still available. This makes debugging much easier.\par
Admittedly, this test is contrived and doesn't do much. You can easily achieve the same effect without using Google {\b Mock}. However, as we shall reveal soon, Google {\b Mock} allows you to do {\i much more}  with the mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} with Any Testing Framework} \par}
If you want to use something other than Google Test (e.g. {\f2 CppUnit} or {\f2 CxxTest}) as your testing framework, just change the {\f2 main()}  function in the previous section to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // The following line causes Google Mock to throw an exception on failure,\par
  // which will be interpreted by your testing framework as a test failure.\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  ::testing::InitGoogleMock(&argc, argv);\par
  ... whatever your testing framework requires ...\par
\}\par
}
\par
This approach has a catch: it makes Google {\b Mock} throw an exception from a mock object's destructor sometimes. With some compilers, this sometimes causes the test program to crash. You'll still be able to notice that the test has failed, but it's not a graceful failure.\par
A better solution is to use Google Test's {\f2 event listener API} to report a test failure to your testing framework properly. You'll need to implement the {\f2 OnTestPartResult()}  method of the event listener interface, but it should be straightforward.\par
If this turns out to be too much work, we suggest that you stick with Google Test, which works with Google {\b Mock} seamlessly (in fact, it is technically part of Google {\b Mock}.). If there is a reason that you cannot use Google Test, please let us know.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
The key to using a mock object successfully is to set the {\i right expectations}  on it. If you set the expectations too strict, your test will fail as the result of unrelated changes. If you set them too loose, bugs can slip through. You want to do it just right such that your test can catch exactly the kind of bugs you intend it to catch. Google {\b Mock} provides the necessary means for you to do it "just right."\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 General Syntax} \par}
In Google {\b Mock} we use the {\f2 EXPECT_CALL()}  macro to set an expectation on a mock method. The general syntax is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .Times(cardinality)\par
    .WillOnce(action)\par
    .WillRepeatedly(action);\par
}
\par
The macro has two arguments: first the mock object, and then the method and its arguments. Note that the two are separated by a comma ({\f2 ,} ), not a period ({\f2 .} ). (Why using a comma? The answer is that it was necessary for technical reasons.)\par
The macro can be followed by some optional {\i clauses}  that provide more information about the expectation. We'll discuss how each clause works in the coming sections.\par
This syntax is designed to make an expectation read like English. For example, you can probably guess that\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .Times(5)\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(150))\par
    .WillRepeatedly(Return(200));\par
}
\par
says that the {\f2 turtle}  object's {\f2 GetX()}  method will be called five times, it will return 100 the first time, 150 the second time, and then 200 every time. Some people like to call this style of syntax a Domain-Specific Language (DSL).\par
{\b Note:}  Why do we use a macro to do this? It serves two purposes: first it makes expectations easily identifiable (either by {\f2 grep}  or by a human reader), and second it allows Google {\b Mock} to include the source file location of a failed expectation in messages, making debugging easier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers: What Arguments Do We Expect?} \par}
When a mock function takes arguments, we must specify what arguments we are expecting; for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects the turtle to move forward by 100 units.\par
EXPECT_CALL(turtle, Forward(100));\par
}
\par
Sometimes you may not want to be too specific (Remember that talk about tests being too rigid? Over specification leads to brittle tests and obscures the intent of tests. Therefore we encourage you to specify only what's necessary - no more, no less.). If you care to check that {\f2 Forward()}  will be called but aren't interested in its actual argument, write {\f2 _}  as the argument, which means "anything goes":\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
// Expects the turtle to move forward.\par
EXPECT_CALL(turtle, Forward(_));\par
}
\par
{\f2 _}  is an instance of what we call {\b matchers} . A matcher is like a predicate and can test whether an argument is what we'd expect. You can use a matcher inside {\f2 EXPECT_CALL()}  wherever a function argument is expected.\par
A list of built-in matchers can be found in the CheatSheet. For example, here's the {\f2 Ge}  (greater than or equal) matcher:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;...\par
EXPECT_CALL(turtle, Forward(Ge(100)));\par
}
\par
This checks that the turtle will be told to go forward by at least 100 units.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Cardinalities: How Many Times Will It Be Called?} \par}
The first clause we can specify following an {\f2 EXPECT_CALL()}  is {\f2 Times()} . We call its argument a {\b cardinality}  as it tells {\i how many times}  the call should occur. It allows us to repeat an expectation many times without actually writing it as many times. More importantly, a cardinality can be "fuzzy", just like a matcher can be. This allows a user to express the intent of a test exactly.\par
An interesting special case is when we say {\f2 Times(0)} . You may have guessed - it means that the function shouldn't be called with the given arguments at all, and Google {\b Mock} will report a Google Test failure whenever the function is (wrongfully) called.\par
We've seen {\f2 AtLeast(n)}  as an example of fuzzy cardinalities earlier. For the list of built-in cardinalities you can use, see the CheatSheet.\par
The {\f2 Times()}  clause can be omitted. {\b If you omit {\f2 Times()} , Google {\b Mock} will infer the cardinality for you.}  The rules are easy to remember:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\b neither}  {\f2 WillOnce()}  {\b nor}  {\f2 WillRepeatedly()}  is in the {\f2 EXPECT_CALL()} , the inferred cardinality is {\f2 Times(1)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's but {\b no}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 1, the cardinality is {\f2 Times(n)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's and {\b one}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 0, the cardinality is {\f2 Times(AtLeast(n))} .\par}
{\b Quick quiz:}  what do you think will happen if a function is expected to be called twice but actually called four times?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Actions: What Should It Do?} \par}
Remember that a mock object doesn't really have a working implementation? We as users have to tell it what to do when a method is invoked. This is easy in Google {\b Mock}.\par
First, if the return type of a mock function is a built-in type or a pointer, the function has a {\b default action}  (a {\f2 void}  function will just return, a {\f2 bool}  function will return {\f2 false} , and other functions will return 0). In addition, in C++ 11 and above, a mock function whose return type is default-constructible (i.e. has a default constructor) has a default action of returning a default-constructed value. If you don't say anything, this behavior will be used.\par
Second, if a mock function doesn't have a default action, or the default action doesn't suit you, you can specify the action to be taken each time the expectation matches using a series of {\f2 WillOnce()}  clauses followed by an optional {\f2 WillRepeatedly()} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillOnce(Return(300));\par
}
\par
This says that {\f2 turtle.GetX()}  will be called {\i exactly three times}  (Google {\b Mock} inferred this from how many {\f2 WillOnce()}  clauses we've written, since we didn't explicitly write {\f2 Times()} ), and will return 100, 200, and 300 respectively.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillRepeatedly(Return(300));\par
}
\par
says that {\f2 turtle.GetY()}  will be called {\i at least twice}  (Google {\b Mock} knows this as we've written two {\f2 WillOnce()}  clauses and a {\f2 WillRepeatedly()}  while having no explicit {\f2 Times()} ), will return 100 the first time, 200 the second time, and 300 from the third time on.\par
Of course, if you explicitly write a {\f2 Times()} , Google {\b Mock} will not try to infer the cardinality itself. What if the number you specified is larger than there are {\f2 WillOnce()}  clauses? Well, after all {\f2 WillOnce()} s are used up, Google {\b Mock} will do the {\i default}  action for the function every time (unless, of course, you have a {\f2 WillRepeatedly()} .).\par
What can we do inside {\f2 WillOnce()}  besides {\f2 Return()} ? You can return a reference using {\f2 ReturnRef(variable)} , or invoke a pre-defined function, among {\f2 others}.\par
{\b Important note:}  The {\f2 EXPECT_CALL()}  statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int n = 100;\par
EXPECT_CALL(turtle, GetX())\par
.Times(4)\par
.WillRepeatedly(Return(n++));\par
}
\par
Instead of returning 100, 101, 102, ..., consecutively, this mock function will always return 100 as {\f2 n++}  is only evaluated once. Similarly, {\f2 Return(new Foo)}  will create a new {\f2 Foo}  object when the {\f2 EXPECT_CALL()}  is executed, and will return the same pointer every time. If you want the side effect to happen every time, you need to define a custom action, which we'll teach in the CookBook.\par
Time for another quiz! What do you think the following means?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
.Times(4)\par
.WillOnce(Return(100));\par
}
\par
Obviously {\f2 turtle.GetY()}  is expected to be called four times. But if you think it will return 100 every time, think twice! Remember that one {\f2 WillOnce()}  clause will be consumed each time the function is invoked and the default action will be taken afterwards. So the right answer is that {\f2 turtle.GetY()}  will return 100 the first time, but {\b return 0 from the second time on} , as returning 0 is the default action for {\f2 int}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Multiple Expectations} \par}
So far we've only shown examples where you have a single expectation. More realistically, you're going to specify expectations on multiple mock methods, which may be from multiple mock objects.\par
By default, when a mock method is invoked, Google {\b Mock} will search the expectations in the {\b reverse order}  they are defined, and stop when an active expectation that matches the arguments is found (you can think of it as "newer rules override older ones."). If the matching expectation cannot take any more calls, you will get an upper-bound-violated failure. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, Forward(_));  // #1\par
EXPECT_CALL(turtle, Forward(10))  // #2\par
    .Times(2);\par
}
\par
If {\f2 Forward(10)}  is called three times in a row, the third time it will be an error, as the last matching expectation (#2) has been saturated. If, however, the third {\f2 Forward(10)}  call is replaced by {\f2 Forward(20)} , then it would be OK, as now #1 will be the matching expectation.\par
{\b Side note:}  Why does Google {\b Mock} search for a match in the {\i reverse}  order of the expectations? The reason is that this allows a user to set up the default expectations in a mock object's constructor or the test fixture's set-up phase and then customize the mock by writing more specific expectations in the test body. So, if you have two expectations on the same method, you want to put the one with more specific matchers {\b after}  the other, or the more specific rule would be shadowed by the more general one that comes after it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ordered vs Unordered Calls} \par}
By default, an expectation can match a call even though an earlier expectation hasn't been satisfied. In other words, the calls don't have to occur in the order the expectations are specified.\par
Sometimes, you may want all the expected calls to occur in a strict order. To say this in Google {\b Mock} is easy:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;...\par
TEST(FooTest, DrawsLineSegment) \{\par
  ...\par
  \{\par
    InSequence dummy;\par
\par
    EXPECT_CALL(turtle, PenDown());\par
    EXPECT_CALL(turtle, Forward(100));\par
    EXPECT_CALL(turtle, PenUp());\par
  \}\par
  Foo();\par
\}\par
}
\par
By creating an object of type {\f2 InSequence} , all expectations in its scope are put into a {\i sequence}  and have to occur {\i sequentially} . Since we are just relying on the constructor and destructor of this object to do the actual work, its name is really irrelevant.\par
In this example, we test that {\f2 Foo()}  calls the three expected functions in the order as written. If a call is made out-of-order, it will be an error.\par
(What if you care about the relative order of some of the calls, but not all of them? Can you specify an arbitrary partial order? The answer is ... yes! If you are impatient, the details can be found in the CookBook.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 All Expectations Are Sticky (Unless Said Otherwise)} \par}
Now let's do a quick quiz to see how well you can use this mock stuff already. How would you test that the turtle is asked to go to the origin {\i exactly twice}  (you want to ignore any other instructions it receives)?\par
After you've come up with your answer, take a look at ours and compare notes (solve it yourself first - don't cheat!):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, GoTo(_, _))  // #1\par
    .Times(AnyNumber());\par
EXPECT_CALL(turtle, GoTo(0, 0))  // #2\par
    .Times(2);\par
}
\par
Suppose {\f2 turtle.GoTo(0, 0)}  is called three times. In the third time, Google {\b Mock} will see that the arguments match expectation #2 (remember that we always pick the last matching expectation). Now, since we said that there should be only two such calls, Google {\b Mock} will report an error immediately. This is basically what we've told you in the "Using Multiple Expectations" section above.\par
This example shows that {\b expectations in Google {\b Mock} are "sticky" by default} , in the sense that they remain active even after we have reached their invocation upper bounds. This is an important rule to remember, as it affects the meaning of the spec, and is {\b different}  to how it's done in many other mocking frameworks (Why'd we do that? Because we think our rule makes the common cases easier to express and understand.).\par
Simple? Let's see if you've really understood it: what does the following code say?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
      .WillOnce(Return(10*i));\par
\}\par
}
\par
If you think it says that {\f2 turtle.GetX()}  will be called {\f2 n}  times and will return 10, 20, 30, ..., consecutively, think twice! The problem is that, as we said, expectations are sticky. So, the second time {\f2 turtle.GetX()}  is called, the last (latest) {\f2 EXPECT_CALL()}  statement will match, and will immediately lead to an "upper bound exceeded" error - this piece of code is not very useful!\par
One correct way of saying that {\f2 turtle.GetX()}  will return 10, 20, 30, ..., is to explicitly say that the expectations are {\i not}  sticky. In other words, they should {\i retire}  as soon as they are saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(10*i))\par
    .RetiresOnSaturation();\par
\}\par
}
\par
And, there's a better way to do it: in this case, we expect the calls to occur in a specific order, and we line up the actions to match the order. Since the order is important here, we should make it explicit using a sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
...\par
\{\par
  InSequence s;\par
\par
  for (int i = 1; i <= n; i++) \{\par
    EXPECT_CALL(turtle, GetX())\par
        .WillOnce(Return(10*i))\par
        .RetiresOnSaturation();\par
  \}\par
\}\par
}
\par
By the way, the other situation where an expectation may {\i not}  be sticky is when it's in a sequence - as soon as another expectation that comes after it in the sequence has been used, it automatically retires (and will never be used to match any call).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Uninteresting Calls} \par}
A mock object may have many methods, and not all of them are that interesting. For example, in some tests we may not care about how many times {\f2 GetX()}  and {\f2 GetY()}  get called.\par
In Google {\b Mock}, if you are not interested in a method, just don't say anything about it. If a call to this method occurs, you'll see a warning in the test output, but it won't be a failure.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Now?} \par}
Congratulations! You've learned enough about Google {\b Mock} to start using it. Now, you might want to join the {\f2 googlemock} discussion group and actually write some tests using Google {\b Mock} - it will be fun. Hey, it may even be addictive - you've been warned.\par
Then, if you feel like increasing your mock quotient, you should move on to the CookBook. You can learn many advanced features of Google {\b Mock} there \'96 and advance your level of enjoyment and testing bliss. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
FrequentlyAskedQuestions{\tc \v FrequentlyAskedQuestions}\par \pard\plain 
{\bkmkstart AAAAAAAEMU}
{\bkmkend AAAAAAAEMU}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Please send your questions to the {\f2 googlemock} discussion group. If you need help with compiler errors, make sure you have tried Google Mock Doctor first.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When I call a method on my mock object, the method for the real object is invoked instead. What's the problem?} \par}
In order for a method to be mocked, it must be {\i virtual} , unless you use the {\f2 high-perf dependency injection technique}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I wrote some matchers. After I upgraded to a new version of Google {\b Mock}, they no longer compile. What's going on?} \par}
After version 1.4.0 of Google {\b Mock} was released, we had an idea on how to make it easier to write matchers that can generate informative messages efficiently. We experimented with this idea and liked what we saw. Therefore we decided to implement it.\par
Unfortunately, this means that if you have defined your own matchers by implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()} , your definitions will no longer compile. Matchers defined using the {\f2 MATCHER*}  family of macros are not affected.\par
Sorry for the hassle if your matchers are affected. We believe it's in everyone's long-term interest to make this change sooner than later. Fortunately, it's usually not hard to migrate an existing matcher to the new API. Here's what you need to do:\par
If you wrote your matcher like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
you'll need to change it to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
 (i.e. rename {\f2 Matches()}  to {\f2 MatchAndExplain()}  and give it a second argument of type {\f2 MatchResultListener*} .)\par
If you were also using {\f2 ExplainMatchResultTo()}  to improve the matcher message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the lastest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
\par
  virtual void ExplainMatchResultTo(MyType value,\par
                                    ::std::ostream* os) const \{\par
    // Prints some helpful information to os to help\par
    // a user understand why value matches (or doesn't match).\par
    *os << "the Foo property is " << value.GetFoo();\par
  \}\par
  ...\par
\};\par
}
\par
you should move the logic of {\f2 ExplainMatchResultTo()}  into {\f2 MatchAndExplain()} , using the {\f2 MatchResultListener}  argument where the {\f2 ::std::ostream}  was used: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Foo property is " << value.GetFoo();\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
If your matcher is defined using {\f2 MakePolymorphicMatcher()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you should rename the {\f2 Matches()}  method to {\f2 MatchAndExplain()}  and add a {\f2 MatchResultListener*}  argument (the same as what you need to do for matchers defined by implementing {\f2 MatcherInterface} ): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
If your polymorphic matcher uses {\f2 ExplainMatchResultTo()}  for better failure messages: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
void ExplainMatchResultTo(const MyGreatMatcher& matcher,\par
                          MyType value,\par
                          ::std::ostream* os) \{\par
  // Prints some helpful information to os to help\par
  // a user understand why value matches (or doesn't match).\par
  *os << "the Bar property is " << value.GetBar();\par
\}\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you'll need to move the logic inside {\f2 ExplainMatchResultTo()}  to {\f2 MatchAndExplain()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Bar property is " << value.GetBar();\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
For more information, you can read these {\f2 two} {\f2 recipes} from the cookbook. As always, you are welcome to post questions on {\f2 googlemock@googlegroups.com}  if you need any help.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When using Google {\b Mock}, do I have to use Google Test as the testing framework? I have my favorite testing framework and don't want to switch.} \par}
Google {\b Mock} works out of the box with Google Test. However, it's easy to configure it to work with any testing framework of your choice. {\f2 Here} is how.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How am I supposed to make sense of these horrible template errors?} \par}
If you are confused by the compiler errors gcc threw at you, try consulting the {\i Google {\b Mock} Doctor}  tool first. What it does is to scan stdin for gcc error messages, and spit out diagnoses on the problems (we call them diseases) your code has.\par
To "install", run command: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid alias gmd='<path to googlemock>/scripts/gmock_doctor.py'\par
}
\par
To use it, do: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <your-favorite-build-command> <your-test> 2>&1 | gmd\par
}
\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make my_test 2>&1 | gmd\par
}
\par
Or you can run {\f2 gmd}  and copy-n-paste gcc's error messages to it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I mock a variadic function?} \par}
You cannot mock a variadic function (i.e. a function taking ellipsis ({\f2 ...} ) arguments) directly in Google {\b Mock}.\par
The problem is that in general, there is {\i no way}  for a mock object to know how many arguments are passed to the variadic method, and what the arguments' types are. Only the {\i author of the base class}  knows the protocol, and we cannot look into his head.\par
Therefore, to mock such a function, the {\i user}  must teach the mock object how to figure out the number of arguments and their types. One way to do it is to provide overloaded versions of the function.\par
Ellipsis arguments are inherited from C and not really a C++ feature. They are unsafe to use and don't work with arguments that have constructors or destructors. Therefore we recommend to avoid them in C++ as much as possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MSVC gives me warning C4301 or C4373 when I define a mock method with a const parameter. Why?} \par}
If you compile this using Microsoft Visual C++ 2005 SP1: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(const int i) = 0;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Bar, void(const int i));\par
\};\par
}
 You may get the following warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4301: 'MockFoo::Bar': overriding virtual function only differs from 'Foo::Bar' by const/volatile qualifier\par
}
\par
This is a MSVC bug. The same code compiles fine with gcc ,for example. If you use Visual C++ 2008 SP1, you would get the warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4373: 'MockFoo::Bar': virtual function overrides 'Foo::Bar', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers\par
}
\par
In C++, if you {\i declare}  a function with a {\f2 const}  parameter, the {\f2 const}  modifier is {\i ignored} . Therefore, the {\f2 Foo}  base class above is equivalent to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(int i) = 0;  // int or const int?  Makes no difference.\par
\};\par
}
\par
In fact, you can {\i declare}  Bar() with an {\f2 int}  parameter, and {\i define}  it with a {\f2 const int}  parameter. The compiler will still match them up.\par
Since making a parameter {\f2 const}  is meaningless in the method {\i declaration} , we recommend to remove it in both {\f2 Foo}  and {\f2 {\b MockFoo}} . That should workaround the VC bug.\par
Note that we are talking about the {\i top-level}  {\f2 const}  modifier here. If the function parameter is passed by pointer or reference, declaring the {\i pointee}  or {\i referee}  as {\f2 const}  is still meaningful. For example, the following two declarations are {\i not}  equivalent: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Bar(int* p);        // Neither p nor *p is const.\par
void Bar(const int* p);  // p is not const, but *p is.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a huge mock class, and Microsoft Visual C++ runs out of memory when compiling it. What can I do?} \par}
We've noticed that when the {\f2 /clr}  compiler flag is used, Visual C++ uses 5~6 times as much memory when compiling a mock class. We suggest to avoid {\f2 /clr}  when compiling native C++ mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I can't figure out why Google {\b Mock} thinks my expectations are not satisfied. What should I do?} \par}
You might want to run your test with {\f2 --gmock_verbose=info} . This flag lets Google {\b Mock} print a trace of every mock function call it receives. By studying the trace, you'll gain insights on why the expectations you set are not met.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I assert that a function is NEVER called?} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .Times(0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a failed test where Google {\b Mock} tells me TWICE that a particular expectation is not satisfied. Isn't this redundant?} \par}
When Google {\b Mock} detects a failure, it prints relevant information (the mock function arguments, the state of relevant expectations, and etc) to help the user debug. If another failure is detected, Google {\b Mock} will do the same, including printing the state of relevant expectations.\par
Sometimes an expectation's state didn't change between two failures, and you'll see the same description of the state twice. They are however {\i not}  redundant, as they refer to {\i different points in time} . The fact they are the same {\i is}  interesting information.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I get a heap check failure when using a mock object, but using a real object is fine. What can be wrong?} \par}
Does the class (hopefully a pure interface) you are mocking have a virtual destructor?\par
Whenever you derive from a base class, make sure its destructor is virtual. Otherwise Bad Things will happen. Consider the following code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Base \{\par
 public:\par
  // Not virtual, but should be.\par
  ~Base() \{ ... \}\par
  ...\par
\};\par
\par
class Derived : public Base \{\par
 public:\par
  ...\par
 private:\par
  std::string value_;\par
\};\par
\par
...\par
  Base* p = new Derived;\par
  ...\par
  delete p;  // Surprise! ~Base() will be called, but ~Derived() will not\par
             // - value_ is leaked.\par
}
\par
By changing {\f2 ~Base()}  to virtual, {\f2 ~Derived()}  will be correctly called when {\f2 delete p}  is executed, and the heap checker will be happy.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The "newer expectations override older ones" rule makes writing expectations awkward. Why does Google {\b Mock} do that?} \par}
When people complain about this, often they are referring to code like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  However, I have to write the expectations in the\par
// reverse order.  This sucks big time!!!\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .RetiresOnSaturation();\par
}
\par
The problem is that they didn't pick the {\b best}  way to express the test's intent.\par
By default, expectations don't have to be matched in {\i any}  particular order. If you want them to match in a certain order, you need to be explicit. This is Google {\b Mock}'s (and jMock's) fundamental philosophy: it's easy to accidentally over-specify your tests, and we want to make it harder to do so.\par
There are two better ways to write the test spec. You could either put the expectations in sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  Using a sequence, we can write the expectations\par
// in their natural order.\par
\{\par
  InSequence s;\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(1))\par
      .RetiresOnSaturation();\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(2))\par
      .RetiresOnSaturation();\par
\}\par
}
\par
or you can put the sequence of actions in the same expectation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
}
\par
Back to the original questions: why does Google {\b Mock} search the expectations (and {\f2 ON_CALL} s) from back to front? Because this allows a user to set up a mock's behavior for the common case early (e.g. in the mock's constructor or the test fixture's set-up phase) and customize it with more specific rules later. If Google {\b Mock} searches from front to back, this very useful pattern won't be possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google {\b Mock} prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL. Would it be reasonable not to show the warning in this case?} \par}
When choosing between being neat and being safe, we lean toward the latter. So the answer is that we think it's better to show the warning.\par
Often people write {\f2 ON_CALL} s in the mock object's constructor or {\f2 SetUp()} , as the default behavior rarely changes from test to test. Then in the test body they set the expectations, which are often different for each test. Having an {\f2 ON_CALL}  in the set-up part of a test doesn't mean that the calls are expected. If there's no {\f2 EXPECT_CALL}  and the method is called, it's possibly an error. If we quietly let the call go through without notifying the user, bugs may creep in unnoticed.\par
If, however, you are sure that the calls are OK, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .WillRepeatedly(...);\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(foo, Bar(_))\par
    .WillByDefault(...);\par
}
\par
This tells Google {\b Mock} that you do expect the calls and no warning should be printed.\par
Also, you can control the verbosity using the {\f2 --gmock_verbose}  flag. If you find the output too noisy when debugging, just choose a less verbose level.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I delete the mock function's argument in an action?} \par}
If you find yourself needing to perform some action that's not supported by Google {\b Mock} directly, remember that you can define your own actions using {\f2 MakeAction()} or {\f2 MakePolymorphicAction()}, or you can write a stub function and invoke it using {\f2 Invoke()}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MOCK_METHODn()'s second argument looks funny. Why don't you use the MOCK_METHODn(Method, return_type, arg_1, ..., arg_n) syntax?} \par}
What?! I think it's beautiful. :-)\par
While which syntax looks more natural is a subjective matter to some extent, Google {\b Mock}'s syntax was chosen for several practical advantages it has.\par
Try to mock a function that takes a map as an argument: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid virtual int GetSize(const map<int, std::string>& m);\par
}
\par
Using the proposed syntax, it would be: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD1(GetSize, int, const map<int, std::string>& m);\par
}
\par
Guess what? You'll get a compiler error as the compiler thinks that {\f2 const map<int, std::string>& m}  are {\b two} , not one, arguments. To work around this you can use {\f2 typedef}  to give the map type a name, but that gets in the way of your work. Google {\b Mock}'s syntax avoids this problem as the function's argument types are protected inside a pair of parentheses: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // This compiles fine.\par
MOCK_METHOD1(GetSize, int(const map<int, std::string>& m));\par
}
\par
You still need a {\f2 typedef}  if the return type contains an unprotected comma, but that's much rarer.\par
Other advantages include:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 MOCK_METHOD1(Foo, int, bool)}  can leave a reader wonder whether the method returns {\f2 int}  or {\f2 bool} , while there won't be such confusion using Google {\b Mock}'s syntax.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The way Google {\b Mock} describes a function type is nothing new, although many people may not be familiar with it. The same syntax was used in C, and the {\f2 function}  library in {\f2 tr1}  uses this syntax extensively. Since {\f2 tr1}  will become a part of the new version of STL, we feel very comfortable to be consistent with it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The function type syntax is also used in other parts of Google {\b Mock}'s API (e.g. the action interface) in order to make the implementation tractable. A user needs to learn it anyway in order to utilize Google {\b Mock}'s more advanced features. We'd as well stick to the same syntax in {\f2 MOCK_METHOD*} !\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My code calls a static/global function. Can I mock it?} \par}
You can, but you need to make some changes.\par
In general, if you find yourself needing to mock a static function, it's a sign that your modules are too tightly coupled (and less flexible, less reusable, less testable, etc). You are probably better off defining a small interface and call the function through that interface, which then can be easily mocked. It's a bit of work initially, but usually pays for itself quickly.\par
This Google Testing Blog {\f2 post} says it excellently. Check it out.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My mock object needs to do complex stuff. It's a lot of pain to specify the actions. Google {\b Mock} sucks!} \par}
I know it's not a question, but you get an answer for free any way. :-)\par
With Google {\b Mock}, you can create mocks in C++ easily. And people might be tempted to use them everywhere. Sometimes they work great, and sometimes you may find them, well, a pain to use. So, what's wrong in the latter case?\par
When you write a test without using mocks, you exercise the code and assert that it returns the correct value or that the system is in an expected state. This is sometimes called "state-based testing".\par
Mocks are great for what some call "interaction-based" testing: instead of checking the system state at the very end, mock objects verify that they are invoked the right way and report an error as soon as it arises, giving you a handle on the precise context in which the error was triggered. This is often more effective and economical to do than state-based testing.\par
If you are doing state-based testing and using a test double just to simulate the real object, you are probably better off using a fake. Using a mock in this case causes pain, as it's not a strong point for mocks to perform complex actions. If you experience this and think that mocks suck, you are just not using the right tool for your problem. Or, you might be trying to solve the wrong problem. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I got a warning "Uninteresting function call encountered - default action taken.." Should I panic?} \par}
By all means, NO! It's just an FYI.\par
What it means is that you have a mock function, you haven't set any expectations on it (by Google {\b Mock}'s rule this means that you are not interested in calls to this function and therefore it can be called any number of times), and it is called. That's OK - you didn't say it's not OK to call the function!\par
What if you actually meant to disallow this function to be called, but forgot to write {\f2 EXPECT_CALL(foo, Bar()).Times(0)} ? While one can argue that it's the user's fault, Google {\b Mock} tries to be nice and prints you a note.\par
So, when you see the message and believe that there shouldn't be any uninteresting calls, you should investigate what's going on. To make your life easier, Google {\b Mock} prints the function name and arguments when an uninteresting call is encountered.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to define a custom action. Should I use Invoke() or implement the action interface?} \par}
Either way is fine - you want to choose the one that's more convenient for your circumstance.\par
Usually, if your action is for a particular function type, defining it using {\f2 Invoke()}  should be easier; if your action can be used in functions of different types (e.g. if you are defining {\f2 Return(value)} ), {\f2 MakePolymorphicAction()}  is easiest. Sometimes you want precise control on what types of functions the action can be used in, and implementing {\f2 ActionInterface}  is the way to go here. See the implementation of {\f2 Return()}  in {\f2 {\b include/gmock/gmock-actions.h}}  for an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I'm using the set-argument-pointee action, and the compiler complains about "conflicting return type specified". What does it mean?} \par}
You got this error as Google {\b Mock} has no idea what value it should return when the mock method is called. {\f2 SetArgPointee()}  says what the side effect is, but doesn't say what the return value should be. You need {\f2 DoAll()}  to chain a {\f2 SetArgPointee()}  with a {\f2 Return()} .\par
See this {\f2 recipe} for more details and an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other documentation,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googlemock@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the revision number if you check out from SVN directly) of Google {\b Mock} you use (Google {\b Mock} is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
KnownIssues{\tc \v KnownIssues}\par \pard\plain 
{\bkmkstart AAAAAAAEMV}
{\bkmkend AAAAAAAEMV}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
As any non-trivial software system, Google {\b Mock} has some known limitations and problems. We are working on improving it, and welcome your help! The follow is a list of issues we know about.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 README contains outdated information on Google {\b Mock}'s compatibility with other testing frameworks} \par}
The {\f2 README}  file in release 1.1.0 still says that Google {\b Mock} only works with Google Test. Actually, you can configure Google {\b Mock} to work with any testing framework you choose.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tests failing on machines using Power PC CPUs (e.g. some Macs)} \par}
{\f2 gmock_output_test}  and {\f2 gmock-printers_test}  are known to fail with Power PC CPUs. This is due to portability issues with these tests, and is not an indication of problems in Google {\b Mock} itself. You can safely ignore them.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Failed to resolve libgtest.so.0 in tests when built against installed Google Test} \par}
This only applies if you manually built and installed Google Test, and then built a Google {\b Mock} against it (either explicitly, or because gtest-config was in your path post-install). In this situation, Libtool has a known issue with certain systems' ldconfig setup:\par
{\f2 http://article.gmane.org/gmane.comp.sysutils.automake.general/9025}\par
This requires a manual run of "sudo ldconfig" after the "sudo make install" for Google Test before any binaries which link against it can be executed. This isn't a bug in our install, but we should at least have documented it or hacked a work-around into our install. We should have one of these solutions in our next release. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Defining a Mock Class{\tc \v Defining a Mock Class}\par \pard\plain 
{\bkmkstart AAAAAAAEMW}
{\bkmkend AAAAAAAEMW}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Normal Class} \par}
Given {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual ~Foo();\par
  virtual int GetSize() const = 0;\par
  virtual string Describe(const char* name) = 0;\par
  virtual string Describe(int type) = 0;\par
  virtual bool Process(Bar elem, int count) = 0;\par
\};\par
}
 (note that {\f2 ~Foo()}  {\b must}  be virtual) we can define its mock as {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <gmock/gmock.h>\par
\par
class MockFoo : public Foo \{\par
  MOCK_CONST_METHOD0(GetSize, int());\par
  MOCK_METHOD1(Describe, string(const char* name));\par
  MOCK_METHOD1(Describe, string(int type));\par
  MOCK_METHOD2(Process, bool(Bar elem, int count));\par
\};\par
}
\par
To create a "nice" mock object which ignores all uninteresting calls, or a "strict" mock object, which treats them as failures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid NiceMock<MockFoo> nice_foo;     // The type is a subclass of MockFoo.\par
StrictMock<MockFoo> strict_foo; // The type is a subclass of MockFoo.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Class Template} \par}
To mock {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
 public:\par
  ...\par
  virtual ~StackInterface();\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
}
 (note that {\f2 ~StackInterface()}  {\b must}  be virtual) just append {\f2 _T}  to the {\f2 MOCK_*}  macros: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
 public:\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Specifying Calling Conventions for {\b Mock} Functions} \par}
If your mock function doesn't use the default calling convention, you can specify it by appending {\f2 _WITH_CALLTYPE}  to any of the macros described in the previous two sections and supplying the calling convention as the first argument to the macro. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD_1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int n));\par
MOCK_CONST_METHOD2_WITH_CALLTYPE(STDMETHODCALLTYPE, Bar, int(double x, double y));\par
}
 where {\f2 STDMETHODCALLTYPE}  is defined by {\f2 <objbase.h>}  on Windows.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
The typical flow is:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names you need to use. All Google {\b Mock} names are in the {\f2 testing}  namespace unless they are macros or otherwise noted.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, set the default actions of the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set your expectations on the mock objects (How will they be called? What wil they do?).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects; if necessary, check the result using {\f2 Google Test} assertions.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock objects is destructed, Google {\b Mock} automatically verifies that all expectations on it have been satisfied.\par}
Here is an example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;                            // #1\par
\par
TEST(BarTest, DoesThis) \{\par
  MockFoo foo;                                    // #2\par
\par
  ON_CALL(foo, GetSize())                         // #3\par
      .WillByDefault(Return(1));\par
  // ... other default actions ...\par
\par
  EXPECT_CALL(foo, Describe(5))                   // #4\par
      .Times(3)\par
      .WillRepeatedly(Return("Category 5"));\par
  // ... other expectations ...\par
\par
  EXPECT_EQ("good", MyProductionFunction(&foo));  // #5\par
\}                                                 // #6\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Default Actions} \par}
Google {\b Mock} has a {\b built-in default action}  for any function that returns {\f2 void} , {\f2 bool} , a numeric value, or a pointer.\par
To customize the default action for functions with return type {\f2 T}  globally: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DefaultValue;\par
\par
DefaultValue<T>::Set(value);  // Sets the default value to be returned.\par
// ... use the mocks ...\par
DefaultValue<T>::Clear();     // Resets the default value.\par
}
\par
To customize the default action for a particular method, use {\f2 ON_CALL()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .WillByDefault(action);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\f2 EXPECT_CALL()}  sets {\b expectations}  on a mock method (How will it be called? What will it do?): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .Times(cardinality)            ?\par
    .InSequence(sequences)         *\par
    .After(expectations)           *\par
    .WillOnce(action)              *\par
    .WillRepeatedly(action)        ?\par
    .RetiresOnSaturation();        ?\par
}
\par
If {\f2 Times()}  is omitted, the cardinality is assumed to be:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(1)}  when there is neither {\f2 WillOnce()}  nor {\f2 WillRepeatedly()} ;\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(n)}  when there are {\f2 n WillOnce()} s but no {\f2 WillRepeatedly()} , where {\f2 n}  >= 1; or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(AtLeast(n))}  when there are {\f2 n WillOnce()} s and a {\f2 WillRepeatedly()} , where {\f2 n}  >= 0.\par}
A method with no {\f2 EXPECT_CALL()}  is free to be invoked {\i any number of times} , and the default action will be taken each time.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Matchers} \par}
A {\b matcher}  matches a {\i single}  argument. You can use it inside {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , or use it to validate a value directly:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(value, matcher)}  \cell }{Asserts that {\f2 value}  matches {\f2 matcher} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(value, matcher)}  \cell }{The same as {\f2 EXPECT_THAT(value, matcher)} , except that it generates a {\b fatal}  failure. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Built-in matchers (where {\f2 argument}  is the function argument) are divided into several categories:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Wildcard} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 _} \cell }{{\f2 argument}  can be any value of the correct type.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A<type>()}  or {\f2 An<type>()} \cell }{{\f2 argument}  can be any value of type {\f2 type} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generic Comparison} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq(value)}  or {\f2 value} \cell }{{\f2 argument == value}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge(value)}  \cell }{{\f2 argument >= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt(value)}  \cell }{{\f2 argument > value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le(value)}  \cell }{{\f2 argument <= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt(value)}  \cell }{{\f2 argument < value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne(value)}  \cell }{{\f2 argument != value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsNull()}  \cell }{{\f2 argument}  is a {\f2 NULL}  pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NotNull()}  \cell }{{\f2 argument}  is a non-null pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ref(variable)}  \cell }{{\f2 argument}  is a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 TypedEq<type>(value)} \cell }{{\f2 argument}  has type {\f2 type}  and is equal to {\f2 value} . You may need to use this instead of {\f2 Eq(value)}  when the mock function is overloaded. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Except {\f2 Ref()} , these matchers make a {\i copy}  of {\f2 value}  in case it's modified or destructed later. If the compiler complains that {\f2 value}  doesn't have a public copy constructor, try wrap it in {\f2 ByRef()} , e.g. {\f2 Eq(ByRef(non_copyable_value))} . If you do that, make sure {\f2 non_copyable_value}  is not changed afterwards, or the meaning of your matcher will be changed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as unequal.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatEq(a_float)}  \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as unequal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatEq(a_float)} \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The above matchers use ULP-based comparison (the same as used in {\f2 Google Test}). They automatically pick a reasonable error bound based on the absolute value of the expected value. {\f2 DoubleEq()}  and {\f2 FloatEq()}  conform to the IEEE standard, which requires comparing two NaNs for equality to return false. The {\f2 NanSensitive*}  version instead treats two NaNs as equal, which is often what a user wants.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Matchers} \par}
The {\f2 argument}  can be either a C string or a C++ string object:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainsRegex(string)} \cell }{{\f2 argument}  matches the given regular expression.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EndsWith(suffix)}  \cell }{{\f2 argument}  ends with string {\f2 suffix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 HasSubstr(string)}  \cell }{{\f2 argument}  contains {\f2 string}  as a sub-string. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatchesRegex(string)}  \cell }{{\f2 argument}  matches the given regular expression with the match starting at the first character and ending at the last character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StartsWith(prefix)}  \cell }{{\f2 argument}  starts with string {\f2 prefix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\f2 StrCaseEq()} , {\f2 StrCaseNe()} , {\f2 StrEq()} , and {\f2 StrNe()}  work for wide strings as well.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Container Matchers} \par}
Most STL-style containers support {\f2 ==} , so you can use {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly. If you want to write the elements in-line, match them more flexibly, or get more informative messages, you can use:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Contains(e)}  \cell }{{\f2 argument}  contains an element that matches {\f2 e} , which can be either a value or a matcher.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAre(e0, e1, ..., en)} \cell }{{\f2 argument}  has {\f2 n + 1}  elements, where the i-th element matches {\f2 ei} , which can be a value or a matcher. 0 to 10 arguments are allowed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAreArray(array)}  or {\f2 ElementsAreArray(array, count)} \cell }{The same as {\f2 ElementsAre()}  except that the expected element values/matchers come from a C-style array. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainerEq(container)}  \cell }{The same as {\f2 Eq(container)}  except that the failure message also includes which elements are in one container but not the other. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
These matchers can also match:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab a native array passed by reference (e.g. in {\f2 Foo(const int (&a)[5])} ), and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab an array passed as a pointer and a count (e.g. in {\f2 Bar(const T* buffer, int len)}  \'96 see Multi-argument Matchers).\par}
where the array may be multi-dimensional (i.e. its elements can be arrays).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Member Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Field(&class::field, m)} \cell }{{\f2 argument.field}  (or {\f2 argument->field}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Key(e)}  \cell }{{\f2 argument.first}  matches {\f2 e} , which can be either a value or a matcher. E.g. {\f2 Contains(Key(Le(5)))}  can verify that a {\f2 map}  contains a key {\f2 <= 5} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pair(m1, m2)}  \cell }{{\f2 argument}  is an {\f2 std::pair}  whose {\f2 first}  field matches {\f2 m1}  and {\f2 second}  field matches {\f2 m2} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Property(&class::property, m)} \cell }{{\f2 argument.property()}  (or {\f2 argument->property()}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching the Result of a Function or Functor} \par}
|{\f2 ResultOf(f, m)} |{\f2 f(argument)}  matches matcher {\f2 m} , where {\f2 f}  is a function or functor.| |:------------\'97|:------------------------------------------------------------------\'97|\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Pointer Matchers} \par}
|{\f2 Pointee(m)} |{\f2 argument}  (either a smart pointer or a raw pointer) points to a value that matches matcher {\f2 m} .| |:--------\'97|:--------------------------------------------------------------------------------------------\'97|\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Multiargument Matchers} \par}
These are matchers on tuple types. They can be used in {\f2 .With()} . The following can be used on functions with {\i two\par
 arguments}  {\f2 x}  and {\f2 y} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq()} \cell }{{\f2 x == y}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge()} \cell }{{\f2 x >= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt()} \cell }{{\f2 x > y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le()} \cell }{{\f2 x <= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt()} \cell }{{\f2 x < y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne()} \cell }{{\f2 x != y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
You can use the following selectors to pick a subset of the arguments (or reorder them) to participate in the matching:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllArgs(m)} \cell }{Equivalent to {\f2 m} . Useful as syntactic sugar in {\f2 .With(AllArgs(m))} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Args<N1, N2, ..., Nk>(m)} \cell }{The {\f2 k}  selected (using 0-based indices) arguments match {\f2 m} , e.g. {\f2 Args<1, 2>(Contains(5))} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Matchers} \par}
You can make a matcher from one or more other matchers:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches all of the matchers {\f2 m1}  to {\f2 mn} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches at least one of the matchers {\f2 m1}  to {\f2 mn} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Not(m)}  \cell }{{\f2 argument}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adapters for Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatcherCast<T>(m)} \cell }{casts matcher {\f2 m}  to type {\f2 Matcher<T>} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SafeMatcherCast<T>(m)} \cell }{safely casts matcher {\f2 m}  to type {\f2 Matcher<T>} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Truly(predicate)}  \cell }{{\f2 predicate(argument)}  returns something considered by C++ to be true, where {\f2 predicate}  is a function or functor. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Predicates} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Matches(m)} \cell }{a unary functor that returns {\f2 true}  if the argument matches {\f2 m} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ExplainMatchResult(m, value, result_listener)} \cell }{returns {\f2 true}  if {\f2 value}  matches {\f2 m} , explaining the result to {\f2 result_listener} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Value(x, m)} \cell }{returns {\f2 true}  if the value of {\f2 x}  matches {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER(IsEven, "") \{ return (arg % 2) == 0; \}}  \cell }{Defines a matcher {\f2 IsEven()}  to match an even number.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P(IsDivisibleBy, n, "") \{ *result_listener << "where the remainder is " << (arg % n); return (arg % n) == 0; \}}  \cell }{Defines a macher {\f2 IsDivisibleBy(n)}  to match a number divisible by {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P2(IsBetween, a, b, "is between %(a)s and %(b)s") \{ return a <= arg && arg <= b; \}}  \cell }{Defines a matcher {\f2 IsBetween(a, b)}  to match a value in the range [{\f2 a} , {\f2 b} ]. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 MATCHER*}  macros cannot be used inside a function or class.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The matcher body must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 PrintToString(x)}  to convert a value {\f2 x}  of any type to a string.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Test Assertions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(expression, m)} \cell }{Generates a {\f2 fatal failure} if the value of {\f2 expression}  doesn't match matcher {\f2 m} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(expression, m)} \cell }{Generates a non-fatal failure if the value of {\f2 expression}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Actions} \par}
{\b Actions}  specify what a mock function should do when invoked.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning a Value} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return()} \cell }{Return from a {\f2 void}  mock function.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return(value)} \cell }{Return {\f2 value} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnArg<N>()} \cell }{Return the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNew<T>(a1, ..., ak)} \cell }{Return {\f2 new T(a1, ..., ak)} ; a different object is created each time. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNull()} \cell }{Return a null pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRef(variable)} \cell }{Return a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Side Effects} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Assign(&variable, value)} \cell }{Assign {\f2 value}  to variable.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DeleteArg<N>()}  \cell }{Delete the {\f2 N} -th (0-based) argument, which must be a pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArg<N>(pointer)}  \cell }{Save the {\f2 N} -th (0-based) argument to {\f2 *pointer} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgReferee<N>(value)}  \cell }{Assign value to the variable referenced by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgumentPointee<N>(value)} \cell }{Assign {\f2 value}  to the variable pointed by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArrayArgument<N>(first, last)} \cell }{Copies the elements in source range [{\f2 first} , {\f2 last} ) to the array pointed to by the {\f2 N} -th (0-based) argument, which can be either a pointer or an iterator. The action does not take ownership of the elements in the source range. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetErrnoAndReturn(error, value)} \cell }{Set {\f2 errno}  to {\f2 error}  and return {\f2 value} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Throw(exception)}  \cell }{Throws the given exception, which can be any copyable value. Available since v1.1.0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function or a Functor as an Action} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(f)} \cell }{Invoke {\f2 f}  with the arguments passed to the mock function, where {\f2 f}  can be a global/static function or a functor.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(object_pointer, &class::method)} \cell }{Invoke the \{method on the object with the arguments passed to the mock function. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(f)} \cell }{Invoke {\f2 f} , which can be a global/static function or a functor. {\f2 f}  must take no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(object_pointer, &class::method)} \cell }{Invoke the method on the object, which takes no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeArgument<N>(arg1, arg2, ..., argk)} \cell }{Invoke the mock function's {\f2 N} -th (0-based) argument, which must be a function or a functor, with the {\f2 k}  arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The return value of the invoked function is used as the return value of the action.\par
When defining a function or functor to be used with {\f2 Invoke*()} , you can declare any unused parameters as {\f2 Unused} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid double Distance(Unused, double x, double y) \{ return sqrt(x*x + y*y); \}\par
...\par
EXPECT_CALL(mock, Foo("Hi", _, _)).WillOnce(Invoke(Distance));\par
}
\par
In {\f2 InvokeArgument<N>(...)} , if an argument needs to be passed by reference, wrap it inside {\f2 ByRef()} . For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<2>(5, string("Hi"), ByRef(foo))\par
}
 calls the mock function's #2 argument, passing to it {\f2 5}  and {\f2 string("Hi")}  by value, and {\f2 foo}  by reference.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Default Action} \par}
|{\f2 DoDefault()} |Do the default action (specified by {\f2 ON_CALL()}  or the built-in one).| |:---------\'97|:-----------------------------------------------------------------\'97|\par
{\b Note:}  due to technical reasons, {\f2 DoDefault()}  cannot be used inside a composite action - trying to do so will result in a run-time error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoAll(a1, a2, ..., an)} \cell }{Do all actions {\f2 a1}  to {\f2 an}  and return the result of {\f2 an}  in each invocation. The first {\f2 n - 1}  sub-actions must return void.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IgnoreResult(a)}  \cell }{Perform action {\f2 a}  and ignore its result. {\f2 a}  must not return void. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArg<N>(a)}  \cell }{Pass the {\f2 N} -th (0-based) argument of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArgs<N1, N2, ..., Nk>(a)} \cell }{Pass the selected (0-based) arguments of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithoutArgs(a)}  \cell }{Perform action {\f2 a}  without any arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Sum) \{ return arg0 + arg1; \}}  \cell }{Defines an action {\f2 Sum()}  to return the sum of the mock function's argument #0 and #1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Plus, n) \{ return arg0 + n; \}}  \cell }{Defines an action {\f2 Plus(n)}  to return the sum of the mock function's argument #0 and {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_Pk(Foo, p1, ..., pk) \{ statements; \}}  \cell }{Defines a parameterized action {\f2 Foo(p1, ..., pk)}  to execute the given {\f2 statements} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The {\f2 ACTION*}  macros cannot be used inside a function or class.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Cardinalities} \par}
These are used in {\f2 Times()}  to specify how many times a mock function will be called:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyNumber()} \cell }{The function can be called any number of times.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtLeast(n)}  \cell }{The call is expected at least {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtMost(n)}  \cell }{The call is expected at most {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Between(m, n)} \cell }{The call is expected between {\f2 m}  and {\f2 n}  (inclusive) times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Exactly(n) or n} \cell }{The call is expected exactly {\f2 n}  times. In particular, the call should never happen when {\f2 n}  is 0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Expectation Order} \par}
By default, the expectations can be matched in {\i any}  order. If some or all expectations must be matched in a given order, there are two ways to specify it. They can be used either independently or together.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The After Clause} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Expectation;\par
...\par
Expectation init_x = EXPECT_CALL(foo, InitX());\par
Expectation init_y = EXPECT_CALL(foo, InitY());\par
EXPECT_CALL(foo, Bar())\par
    .After(init_x, init_y);\par
}
 says that {\f2 Bar()}  can be called only after both {\f2 InitX()}  and {\f2 InitY()}  have been called.\par
If you don't know how many pre-requisites an expectation has when you write it, you can use an {\f2 ExpectationSet}  to collect them:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ExpectationSet;\par
...\par
ExpectationSet all_inits;\par
for (int i = 0; i < element_count; i++) \{\par
  all_inits += EXPECT_CALL(foo, InitElement(i));\par
\}\par
EXPECT_CALL(foo, Bar())\par
    .After(all_inits);\par
}
 says that {\f2 Bar()}  can be called only after all elements have been initialized (but we don't care about which elements get initialized before the others).\par
Modifying an {\f2 ExpectationSet}  after using it in an {\f2 .After()}  doesn't affect the meaning of the {\f2 .After()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sequences} \par}
When you have a long chain of sequential expectations, it's easier to specify the order using {\b sequences} , which don't require you to given each expectation in the chain a different name. {\i All expected\par
 calls}  in the same sequence must occur in the order they are specified.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
Sequence s1, s2;\par
...\par
EXPECT_CALL(foo, Reset())\par
    .InSequence(s1, s2)\par
    .WillOnce(Return(true));\par
EXPECT_CALL(foo, GetSize())\par
    .InSequence(s1)\par
    .WillOnce(Return(1));\par
EXPECT_CALL(foo, Describe(A<const char*>()))\par
    .InSequence(s2)\par
    .WillOnce(Return("dummy"));\par
}
 says that {\f2 Reset()}  must be called before {\i both}  {\f2 GetSize()}  {\i and}  {\f2 Describe()} , and the latter two can occur in any order.\par
To put many expectations in a sequence conveniently: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
\{\par
  InSequence dummy;\par
\par
  EXPECT_CALL(...)...;\par
  EXPECT_CALL(...)...;\par
  ...\par
  EXPECT_CALL(...)...;\par
\}\par
}
 says that all expected calls in the scope of {\f2 dummy}  must occur in strict order. The name {\f2 dummy}  is irrelevant.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Verifying and Resetting a {\b Mock}} \par}
Google {\b Mock} will verify the expectations on a mock object when it is destructed, or you can do it earlier: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Mock;\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// returns true iff successful.\par
Mock::VerifyAndClearExpectations(&mock_obj);\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// also removes the default actions set by ON_CALL();\par
// returns true iff successful.\par
Mock::VerifyAndClear(&mock_obj);\par
}
\par
You can also tell Google {\b Mock} that a mock object can be leaked and doesn't need to be verified: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Mock::AllowLeak(&mock_obj);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 {\b Mock} Classes} \par}
Google {\b Mock} defines a convenient mock class template {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFunction<R(A1, ..., An)> \{\par
 public:\par
  MOCK_METHODn(Call, R(A1, ..., An));\par
\};\par
}
 See this recipe for one application of it.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Flags} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_catch_leaked_mocks=0}  \cell }{Don't report leaked mock objects as failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_verbose=LEVEL}  \cell }{Sets the default verbosity level ({\f2 info} , {\f2 warning} , or {\f2 error} ) of Google {\b Mock} messages. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
CookBook{\tc \v CookBook}\par \pard\plain 
{\bkmkstart AAAAAAAEMX}
{\bkmkend AAAAAAAEMX}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You can find recipes for using Google {\b Mock} here. If you haven't yet, please read the ForDummies document first to make sure you understand the basics.\par
{\b Note:}  Google {\b Mock} lives in the {\f2 testing}  name space. For readability, it is recommended to write {\f2 using ::testing::Foo;}  once in your file before using the name {\f2 Foo}  defined by Google {\b Mock}. We omit such {\f2 using}  statements in this page for brevity, but you should do it in your own code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Creating {\b Mock} Classes} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Private or Protected Methods} \par}
You must always put a mock method definition ({\f2 MOCK_METHOD*} ) in a {\f2 public:}  section of the mock class, regardless of the method being mocked being {\f2 public} , {\f2 protected} , or {\f2 private}  in the base class. This allows {\f2 ON_CALL}  and {\f2 EXPECT_CALL}  to reference the mock function from outside of the mock class. (Yes, C++ allows a subclass to change the access level of a virtual function in the base class.) Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  ...\par
  virtual bool Transform(Gadget* g) = 0;\par
\par
 protected:\par
  virtual void Resume();\par
\par
 private:\par
  virtual int GetTimeOut();\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  ...\par
  MOCK_METHOD1(Transform, bool(Gadget* g));\par
\par
  // The following must be in the public section, even though the\par
  // methods are protected or private in the base class.\par
  MOCK_METHOD0(Resume, void());\par
  MOCK_METHOD0(GetTimeOut, int());\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Overloaded Methods} \par}
You can mock overloaded functions as usual. No special attention is required:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
\par
  // Must be virtual as we'll inherit from Foo.\par
  virtual ~Foo();\par
\par
  // Overloaded on the types and/or numbers of arguments.\par
  virtual int Add(Element x);\par
  virtual int Add(int times, Element x);\par
\par
  // Overloaded on the const-ness of this object.\par
  virtual Bar& GetBar();\par
  virtual const Bar& GetBar() const;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Add, int(Element x));\par
  MOCK_METHOD2(Add, int(int times, Element x);\par
\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
}
\par
{\b Note:}  if you don't mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use {\f2 using}  to bring them in scope:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  using Foo::Add;\par
  MOCK_METHOD1(Add, int(Element x));\par
  // We don't want to mock int Add(int times, Element x);\par
  ...\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Class Templates} \par}
To mock a class template, append {\f2 _T}  to the {\f2 MOCK_*}  macros:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
  ...\par
  // Must be virtual as we'll inherit from StackInterface.\par
  virtual ~StackInterface();\par
\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
\par
template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Nonvirtual Methods} \par}
Google {\b Mock} can mock non-virtual functions to be used in what we call {\i hi-perf dependency injection} .\par
In this case, instead of sharing a common base class with the real class, your mock class will be {\i unrelated}  to the real class, but contain methods with the same signatures. The syntax for mocking non-virtual methods is the {\i same}  as mocking virtual methods:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A simple packet stream class.  None of its members is virtual.\par
class ConcretePacketStream \{\par
 public:\par
  void AppendPacket(Packet* new_packet);\par
  const Packet* GetPacket(size_t packet_number) const;\par
  size_t NumberOfPackets() const;\par
  ...\par
\};\par
\par
// A mock packet stream class.  It inherits from no other, but defines\par
// GetPacket() and NumberOfPackets().\par
class MockPacketStream \{\par
 public:\par
  MOCK_CONST_METHOD1(GetPacket, const Packet*(size_t packet_number));\par
  MOCK_CONST_METHOD0(NumberOfPackets, size_t());\par
  ...\par
\};\par
}
\par
Note that the mock class doesn't define {\f2 AppendPacket()} , unlike the real class. That's fine as long as the test doesn't need to call it.\par
Next, you need a way to say that you want to use {\f2 ConcretePacketStream}  in production code, and use {\f2 MockPacketStream}  in tests. Since the functions are not virtual and the two classes are unrelated, you must specify your choice at {\i compile time}  (as opposed to run time).\par
One way to do it is to templatize your code that needs to use a packet stream. More specifically, you will give your code a template type argument for the type of the packet stream. In production, you will instantiate your template with {\f2 ConcretePacketStream}  as the type argument. In tests, you will instantiate the same template with {\f2 MockPacketStream} . For example, you may write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <class PacketStream>\par
void CreateConnection(PacketStream* stream) \{ ... \}\par
\par
template <class PacketStream>\par
class PacketReader \{\par
 public:\par
  void ReadPackets(PacketStream* stream, size_t packet_num);\par
\};\par
}
\par
Then you can use {\f2 CreateConnection<ConcretePacketStream>()}  and {\f2 PacketReader<ConcretePacketStream>}  in production code, and use {\f2 CreateConnection<MockPacketStream>()}  and {\f2 PacketReader<MockPacketStream>}  in tests.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockPacketStream mock_stream;\par
EXPECT_CALL(mock_stream, ...)...;\par
.. set more expectations on mock_stream ...\par
PacketReader<MockPacketStream> reader(&mock_stream);\par
... exercise reader ...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Free Functions} \par}
It's possible to use Google {\b Mock} to mock a free function (i.e. a C-style function or a static method). You just need to rewrite your code to use an interface (abstract class).\par
Instead of calling a free function (say, {\f2 OpenFile} ) directly, introduce an interface for it and have a concrete subclass that calls the free function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) = 0;\par
\};\par
\par
class File : public FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) \{\par
    return OpenFile(path, mode);\par
  \}\par
\};\par
}
\par
Your code should talk to {\f2 FileInterface}  to open a file. Now it's easy to mock out the function.\par
This may seem much hassle, but in practice you often have multiple related functions that you can put in the same interface, so the per-function syntactic overhead will be much lower.\par
If you are concerned about the performance overhead incurred by virtual functions, and profiling confirms your concern, you can combine this with the recipe for mocking non-virtual methods.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Nice Mocks and Strict Mocks} \par}
If a mock method has no {\f2 EXPECT_CALL}  spec but is called, Google {\b Mock} will print a warning about the "uninteresting call". The rationale is:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
New methods may be added to an interface after a test is written. We shouldn't fail a test just because a method it doesn't know about is called.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
However, this may also mean there's a bug in the test, so Google {\b Mock} shouldn't be silent either. If the user believes these calls are harmless, he can add an {\f2 EXPECT_CALL()}  to suppress the warning.\par}
However, sometimes you may want to suppress all "uninteresting call" warnings, while sometimes you may want the opposite, i.e. to treat all of them as errors. Google {\b Mock} lets you make the decision on a per-mock-object basis.\par
Suppose your test uses a mock class {\f2 {\b MockFoo}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(...) \{\par
  MockFoo mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
If a method of {\f2 mock_foo}  other than {\f2 DoThis()}  is called, it will be reported by Google {\b Mock} as a warning. However, if you rewrite your test to use {\f2 NiceMock<{\b MockFoo}>}  instead, the warning will be gone, resulting in a cleaner test output:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
{\f2 NiceMock<{\b MockFoo}>}  is a subclass of {\f2 {\b MockFoo}} , so it can be used wherever {\f2 {\b MockFoo}}  is accepted.\par
It also works if {\f2 {\b MockFoo}} 's constructor takes some arguments, as {\f2 NiceMock<{\b MockFoo}>}  "inherits" {\f2 {\b MockFoo}} 's constructors:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo(5, "hi");  // Calls MockFoo(5, "hi").\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
The usage of {\f2 StrictMock}  is similar, except that it makes all uninteresting calls failures:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::StrictMock;\par
\par
TEST(...) \{\par
  StrictMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\par
  // The test will fail if a method of mock_foo other than DoThis()\par
  // is called.\par
\}\par
}
\par
There are some caveats though (I don't like them just as much as the next guy, but sadly they are side effects of C++'s limitations):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 NiceMock<{\b MockFoo}>}  and {\f2 StrictMock<{\b MockFoo}>}  only work for mock methods defined using the {\f2 MOCK_METHOD*}  family of macros {\b directly}  in the {\f2 {\b MockFoo}}  class. If a mock method is defined in a {\b base class}  of {\f2 {\b MockFoo}} , the "nice" or "strict" modifier may not affect it, depending on the compiler. In particular, nesting {\f2 NiceMock}  and {\f2 StrictMock}  (e.g. {\f2 NiceMock<StrictMock<{\b MockFoo}> >} ) is {\b not}  supported.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The constructors of the base mock ({\f2 {\b MockFoo}} ) cannot have arguments passed by non-const reference, which happens to be banned by the {\f2 Google C++ style guide}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab During the constructor or destructor of {\f2 {\b MockFoo}} , the mock object is {\i not}  nice or strict. This may cause surprises if the constructor or destructor calls a mock method on {\f2 this}  object. (This behavior, however, is consistent with C++'s general rule: if a constructor or destructor calls a virtual method of {\f2 this}  object, that method is treated as non-virtual. In other words, to the base class's constructor or destructor, {\f2 this}  object behaves like an instance of the base class, not the derived class. This rule is required for safety. Otherwise a base constructor may use members of a derived class before they are initialized, or a base destructor may use members of a derived class after they have been destroyed.)\par}
Finally, you should be {\b very cautious}  when using this feature, as the decision you make applies to {\b all}  future changes to the mock class. If an important change is made in the interface you are mocking (and thus in the mock class), it could break your tests (if you use {\f2 StrictMock} ) or let bugs pass through without a warning (if you use {\f2 NiceMock} ). Therefore, try to specify the mock's behavior using explicit {\f2 EXPECT_CALL}  first, and only turn to {\f2 NiceMock}  or {\f2 StrictMock}  as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Simplifying the {\b Interface} without Breaking Existing Code} \par}
Sometimes a method has a long list of arguments that is mostly uninteresting. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line,\par
                    const struct tm* tm_time,\par
                    const char* message, size_t message_len) = 0;\par
\};\par
}
\par
This method's argument list is lengthy and hard to work with (let's say that the {\f2 message}  argument is not even 0-terminated). If we mock it as is, using the mock will be awkward. If, however, we try to simplify this interface, we'll need to fix all clients depending on it, which is often infeasible.\par
The trick is to re-dispatch the method in the mock class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ScopedMockLog : public LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line, const tm* tm_time,\par
                    const char* message, size_t message_len) \{\par
    // We are only interested in the log severity, full file name, and\par
    // log message.\par
    Log(severity, full_filename, std::string(message, message_len));\par
  \}\par
\par
  // Implements the mock method:\par
  //\par
  //   void Log(LogSeverity severity,\par
  //            const string& file_path,\par
  //            const string& message);\par
  MOCK_METHOD3(Log, void(LogSeverity severity, const string& file_path,\par
                         const string& message));\par
\};\par
}
\par
By defining a new mock method with a trimmed argument list, we make the mock class much more user-friendly.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Alternative to Mocking Concrete Classes} \par}
Often you may find yourself using classes that don't implement interfaces. In order to test your code that uses such a class (let's call it {\f2 Concrete} ), you may be tempted to make the methods of {\f2 Concrete}  virtual and then mock it.\par
Try not to do that.\par
Making a non-virtual function virtual is a big decision. It creates an extension point where subclasses can tweak your class' behavior. This weakens your control on the class because now it's harder to maintain the class' invariants. You should make a function virtual only when there is a valid reason for a subclass to override it.\par
Mocking concrete classes directly is problematic as it creates a tight coupling between the class and the tests - any small change in the class may invalidate your tests and make test maintenance a pain.\par
To avoid such problems, many programmers have been practicing "coding
to interfaces": instead of talking to the {\f2 Concrete}  class, your code would define an interface and talk to it. Then you implement that interface as an adaptor on top of {\f2 Concrete} . In tests, you can easily mock that interface to observe how your code is doing.\par
This technique incurs some overhead:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You pay the cost of virtual function calls (usually not a problem).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There is more abstraction for the programmers to learn.\par}
However, it can also bring significant benefits in addition to better testability:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Concrete} 's API may not fit your problem domain very well, as you may not be the only client it tries to serve. By designing your own interface, you have a chance to tailor it to your need - you may add higher-level functionalities, rename stuff, etc instead of just trimming the class. This allows you to write your code (user of the interface) in a more natural way, which means it will be more readable, more maintainable, and you'll be more productive.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Concrete} 's implementation ever has to change, you don't have to rewrite everywhere it is used. Instead, you can absorb the change in your implementation of the interface, and your other code and tests will be insulated from this change.\par}
Some people worry that if everyone is practicing this technique, they will end up writing lots of redundant code. This concern is totally understandable. However, there are two reasons why it may not be the case:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Different projects may need to use {\f2 Concrete}  in different ways, so the best interfaces for them will be different. Therefore, each of them will have its own domain-specific interface on top of {\f2 Concrete} , and they will not be the same code.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If enough projects want to use the same interface, they can always share it, just like they have been sharing {\f2 Concrete} . You can check in the interface and the adaptor somewhere near {\f2 Concrete}  (perhaps in a {\f2 contrib}  sub-directory) and let many projects use it.\par}
You need to weigh the pros and cons carefully for your particular problem, but I'd like to assure you that the Java community has been practicing this for a long time and it's a proven effective technique applicable in a wide variety of situations. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Fake} \par}
Some times you have a non-trivial fake implementation of an interface. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo() \{\}\par
  virtual char DoThis(int n) = 0;\par
  virtual void DoThat(const char* s, int* p) = 0;\par
\};\par
\par
class FakeFoo : public Foo \{\par
 public:\par
  virtual char DoThis(int n) \{\par
    return (n > 0) ? '+' :\par
        (n < 0) ? '-' : '0';\par
  \}\par
\par
  virtual void DoThat(const char* s, int* p) \{\par
    *p = strlen(s);\par
  \}\par
\};\par
}
\par
Now you want to mock this interface such that you can set expectations on it. However, you also want to use {\f2 FakeFoo}  for the default behavior, as duplicating it in the mock object is, well, a lot of work.\par
When you define the mock class using Google {\b Mock}, you can have it delegate its default action to a fake class you already have, using this pattern:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Normal mock method definitions using Google Mock.\par
  MOCK_METHOD1(DoThis, char(int n));\par
  MOCK_METHOD2(DoThat, void(const char* s, int* p));\par
\par
  // Delegates the default actions of the methods to a FakeFoo object.\par
  // This must be called *before* the custom ON_CALL() statements.\par
  void DelegateToFake() \{\par
    ON_CALL(*this, DoThis(_))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThis));\par
    ON_CALL(*this, DoThat(_, _))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThat));\par
  \}\par
 private:\par
  FakeFoo fake_;  // Keeps an instance of the fake in the mock.\par
\};\par
}
\par
With that, you can use {\f2 {\b MockFoo}}  in your tests as usual. Just remember that if you don't explicitly set an action in an {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , the fake will be called upon to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
TEST(AbcTest, Xyz) \{\par
  MockFoo foo;\par
  foo.DelegateToFake(); // Enables the fake for delegation.\par
\par
  // Put your ON_CALL(foo, ...)s here, if any.\par
\par
  // No action specified, meaning to use the default action.\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(foo, DoThat(_, _));\par
\par
  int n = 0;\par
  EXPECT_EQ('+', foo.DoThis(5));  // FakeFoo::DoThis() is invoked.\par
  foo.DoThat("Hi", &n);           // FakeFoo::DoThat() is invoked.\par
  EXPECT_EQ(2, n);\par
\}\par
}
\par
{\b Some tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you want, you can still override the default action by providing your own {\f2 ON_CALL()}  or using {\f2 .WillOnce()}  / {\f2 .WillRepeatedly()}  in {\f2 EXPECT_CALL()} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In {\f2 DelegateToFake()} , you only need to delegate the methods whose fake implementation you intend to use.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The general technique discussed here works for overloaded methods, but you'll need to tell the compiler which version you mean. To disambiguate a mock function (the one you specify inside the parentheses of {\f2 ON_CALL()} ), see the "Selecting Between Overloaded Functions" section on this page; to disambiguate a fake function (the one you place inside {\f2 Invoke()} ), use a {\f2 static_cast}  to specify the function's type.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Having to mix a mock and a fake is often a sign of something gone wrong. Perhaps you haven't got used to the interaction-based way of testing yet. Or perhaps your interface is taking on too many roles and should be split up. Therefore, {\b don't abuse this} . We would only recommend to do it as an intermediate step when you are refactoring your code.\par}
Regarding the tip on mixing a mock and a fake, here's an example on why it may be a bad sign: Suppose you have a class {\f2 System}  for low-level system operations. In particular, it does file and I/O operations. And suppose you want to test how your code uses {\f2 System}  to do I/O, and you just want the file operations to work normally. If you mock out the entire {\f2 System}  class, you'll have to provide a fake implementation for the file operation part, which suggests that {\f2 System}  is taking on too many roles.\par
Instead, you can define a {\f2 FileOps}  interface and an {\f2 IOOps}  interface and split {\f2 System} 's functionalities into the two. Then you can mock {\f2 IOOps}  without mocking {\f2 FileOps} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Real Object} \par}
When using testing doubles (mocks, fakes, stubs, and etc), sometimes their behaviors will differ from those of the real objects. This difference could be either intentional (as in simulating an error such that you can test the error handling code) or unintentional. If your mocks have different behaviors than the real objects by mistake, you could end up with code that passes the tests but fails in production.\par
You can use the {\i delegating-to-real}  technique to ensure that your mock has the same behavior as the real object while retaining the ability to validate calls. This technique is very similar to the delegating-to-fake technique, the difference being that we use a real object instead of a fake. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AtLeast;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MockFoo() \{\par
    // By default, all calls are delegated to the real object.\par
    ON_CALL(*this, DoThis())\par
        .WillByDefault(Invoke(&real_, &Foo::DoThis));\par
    ON_CALL(*this, DoThat(_))\par
        .WillByDefault(Invoke(&real_, &Foo::DoThat));\par
    ...\par
  \}\par
  MOCK_METHOD0(DoThis, ...);\par
  MOCK_METHOD1(DoThat, ...);\par
  ...\par
 private:\par
  Foo real_;\par
\};\par
...\par
\par
  MockFoo mock;\par
\par
  EXPECT_CALL(mock, DoThis())\par
      .Times(3);\par
  EXPECT_CALL(mock, DoThat("Hi"))\par
      .Times(AtLeast(1));\par
  ... use mock in test ...\par
}
\par
With this, Google {\b Mock} will verify that your code made the right calls (with the right arguments, in the right order, called the right number of times, etc), and a real object will answer the calls (so the behavior will be the same as in production). This gives you the best of both worlds.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Parent Class} \par}
Ideally, you should code to interfaces, whose methods are all pure virtual. In reality, sometimes you do need to mock a virtual method that is not pure (i.e, it already has an implementation). For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo();\par
\par
  virtual void Pure(int n) = 0;\par
  virtual int Concrete(const char* str) \{ ... \}\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\};\par
}
\par
Sometimes you may want to call {\f2 Foo::Concrete()}  instead of {\f2 MockFoo::Concrete()} . Perhaps you want to do it as part of a stub action, or perhaps your test doesn't need to mock {\f2 Concrete()}  at all (but it would be oh-so painful to have to define a new mock class whenever you don't need to mock one of its methods).\par
The trick is to leave a back door in your mock class for accessing the real methods in the base class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\par
  // Use this to call Concrete() defined in Foo.\par
  int FooConcrete(const char* str) \{ return Foo::Concrete(str); \}\par
\};\par
}
\par
Now, you can call {\f2 Foo::Concrete()}  inside an action by:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  EXPECT_CALL(foo, Concrete(_))\par
      .WillOnce(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
or tell the mock object that you don't want to mock {\f2 Concrete()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Invoke;\par
...\par
  ON_CALL(foo, Concrete(_))\par
      .WillByDefault(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
(Why don't we just write {\f2 Invoke(&foo, &Foo::Concrete)} ? If you do that, {\f2 MockFoo::Concrete()}  will be called (and cause an infinite recursion) since {\f2 Foo::Concrete()}  is virtual. That's just how C++ works.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Matchers} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Argument Values Exactly} \par}
You can specify exactly which arguments a mock method is expecting:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(5))\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Simple Matchers} \par}
You can use matchers to match arguments that have a certain property:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::NotNull;\par
using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(Ge(5)))  // The argument must be >= 5.\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", NotNull()));\par
  // The second argument must not be NULL.\par
}
\par
A frequently used matcher is {\f2 _} , which matches anything:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::NotNull;\par
...\par
  EXPECT_CALL(foo, DoThat(_, NotNull()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Matchers} \par}
You can build complex matchers from existing ones using {\f2 AllOf()} , {\f2 AnyOf()} , and {\f2 Not()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::Gt;\par
using ::testing::HasSubstr;\par
using ::testing::Ne;\par
using ::testing::Not;\par
...\par
  // The argument must be > 5 and != 10.\par
  EXPECT_CALL(foo, DoThis(AllOf(Gt(5),\par
                                Ne(10))));\par
\par
  // The first argument must not contain sub-string "blah".\par
  EXPECT_CALL(foo, DoThat(Not(HasSubstr("blah")),\par
                          NULL));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Casting Matchers} \par}
Google {\b Mock} matchers are statically typed, meaning that the compiler can catch your mistake if you use a matcher of the wrong type (for example, if you use {\f2 Eq(5)}  to match a {\f2 string}  argument). Good for you!\par
Sometimes, however, you know what you're doing and want the compiler to give you some slack. One example is that you have a matcher for {\f2 long}  and the argument you want to match is {\f2 int} . While the two types aren't exactly the same, there is nothing really wrong with using a {\f2 Matcher<long>}  to match an {\f2 int}  - after all, we can first convert the {\f2 int}  argument to a {\f2 long}  before giving it to the matcher.\par
To support this need, Google {\b Mock} gives you the {\f2 SafeMatcherCast<T>(m)}  function. It casts a matcher {\f2 m}  to type {\f2 Matcher<T>} . To ensure safety, Google {\b Mock} checks that (let {\f2 U}  be the type {\f2 m}  accepts):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Type {\f2 T}  can be implicitly cast to type {\f2 U} ;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When both {\f2 T}  and {\f2 U}  are built-in arithmetic types ({\f2 bool} , integers, and floating-point numbers), the conversion from {\f2 T}  to {\f2 U}  is not lossy (in other words, any value representable by {\f2 T}  can also be represented by {\f2 U} ); and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When {\f2 U}  is a reference, {\f2 T}  must also be a reference (as the underlying matcher may be interested in the address of the {\f2 U}  value).\par}
The code won't compile if any of these conditions isn't met.\par
Here's one example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SafeMatcherCast;\par
\par
// A base class and a child class.\par
class Base \{ ... \};\par
class Derived : public Base \{ ... \};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(DoThis, void(Derived* derived));\par
\};\par
...\par
\par
  MockFoo foo;\par
  // m is a Matcher<Base*> we got from somewhere.\par
  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\par
}
\par
If you find {\f2 SafeMatcherCast<T>(m)}  too limiting, you can use a similar function {\f2 MatcherCast<T>(m)} . The difference is that {\f2 MatcherCast}  works as long as you can {\f2 static_cast}  type {\f2 T}  to type {\f2 U} .\par
{\f2 MatcherCast}  essentially lets you bypass C++'s type system ({\f2 static_cast}  isn't always safe as it could throw away information, for example), so be careful not to misuse/abuse it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Between Overloaded Functions} \par}
If you expect an overloaded function to be called, the compiler may need some help on which overloaded version it is.\par
To disambiguate functions overloaded on the const-ness of this object, use the {\f2 Const()}  argument wrapper.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar1, bar2;\par
  EXPECT_CALL(foo, GetBar())         // The non-const GetBar().\par
      .WillOnce(ReturnRef(bar1));\par
  EXPECT_CALL(Const(foo), GetBar())  // The const GetBar().\par
      .WillOnce(ReturnRef(bar2));\par
}
\par
({\f2 Const()}  is defined by Google {\b Mock} and returns a {\f2 const}  reference to its argument.)\par
To disambiguate overloaded functions with the same number of arguments but different argument types, you may need to specify the exact type of a matcher, either by wrapping your matcher in {\f2 Matcher<type>()} , or using a matcher whose type is fixed ({\f2 TypedEq<type>} , {\f2 An<type>()} , etc):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::An;\par
using ::testing::Lt;\par
using ::testing::Matcher;\par
using ::testing::TypedEq;\par
\par
class MockPrinter : public Printer \{\par
 public:\par
  MOCK_METHOD1(Print, void(int n));\par
  MOCK_METHOD1(Print, void(char c));\par
\};\par
\par
TEST(PrinterTest, Print) \{\par
  MockPrinter printer;\par
\par
  EXPECT_CALL(printer, Print(An<int>()));            // void Print(int);\par
  EXPECT_CALL(printer, Print(Matcher<int>(Lt(5))));  // void Print(int);\par
  EXPECT_CALL(printer, Print(TypedEq<char>('a')));   // void Print(char);\par
\par
  printer.Print(3);\par
  printer.Print(6);\par
  printer.Print('a');\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Performing Different Actions Based on the Arguments} \par}
When a mock method is called, the {\i last}  matching expectation that's still active will be selected (think "newer overrides older"). So, you can make a method do different things depending on its argument values like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Return;\par
...\par
  // The default case.\par
  EXPECT_CALL(foo, DoThis(_))\par
      .WillRepeatedly(Return('b'));\par
\par
  // The more specific case.\par
  EXPECT_CALL(foo, DoThis(Lt(5)))\par
      .WillRepeatedly(Return('a'));\par
}
\par
Now, if {\f2 foo.DoThis()}  is called with a value less than 5, {\f2 'a'}  will be returned; otherwise {\f2 'b'}  will be returned.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Multiple Arguments as a Whole} \par}
Sometimes it's not enough to match the arguments individually. For example, we may want to say that the first argument must be less than the second argument. The {\f2 With()}  clause allows us to match all arguments of a mock function as a whole. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Ne;\par
...\par
  EXPECT_CALL(foo, InRange(Ne(0), _))\par
      .With(Lt());\par
}
\par
says that the first argument of {\f2 InRange()}  must not be 0, and must be less than the second argument.\par
The expression inside {\f2 With()}  must be a matcher of type {\f2 Matcher<tr1::tuple<A1, ..., An> >} , where {\f2 A1} , ..., {\f2 An}  are the types of the function arguments.\par
You can also write {\f2 AllArgs(m)}  instead of {\f2 m}  inside {\f2 .With()} . The two forms are equivalent, but {\f2 .With(AllArgs(Lt()))}  is more readable than {\f2 .With(Lt())} .\par
You can use {\f2 Args<k1, ..., kn>(m)}  to match the {\f2 n}  selected arguments against {\f2 m} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AllOf;\par
using ::testing::Args;\par
using ::testing::Lt;\par
...\par
  EXPECT_CALL(foo, Blah(_, _, _))\par
      .With(AllOf(Args<0, 1>(Lt()), Args<1, 2>(Lt())));\par
}
\par
says that {\f2 Blah()}  will be called with arguments {\f2 x} , {\f2 y} , and {\f2 z}  where {\f2 x < y < z} .\par
As a convenience and example, Google {\b Mock} provides some matchers for 2-tuples, including the {\f2 Lt()}  matcher above. See the CheatSheet for the complete list.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers as Predicates} \par}
Have you noticed that a matcher is just a fancy predicate that also knows how to describe itself? Many existing algorithms take predicates as arguments (e.g. those defined in STL's {\f2 <algorithm>}  header), and it would be a shame if Google {\b Mock} matchers are not allowed to participate.\par
Luckily, you can use a matcher where a unary predicate functor is expected by wrapping it inside the {\f2 Matches()}  function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <algorithm>\par
#include <vector>\par
\par
std::vector<int> v;\par
...\par
// How many elements in v are >= 10?\par
const int count = count_if(v.begin(), v.end(), Matches(Ge(10)));\par
}
\par
Since you can build complex matchers from simpler ones easily using Google {\b Mock}, this gives you a way to conveniently construct composite predicates (doing the same using STL's {\f2 <functional>}  header is just painful). For example, here's a predicate that's satisfied by any number that is >= 0, <= 100, and != 50:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matches(AllOf(Ge(0), Le(100), Ne(50)))\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers in Google Test Assertions} \par}
Since matchers are basically predicates that also know how to describe themselves, there is a way to take advantage of them in {\f2 Google Test} assertions. It's called {\f2 ASSERT_THAT}  and {\f2 EXPECT_THAT} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THAT(value, matcher);  // Asserts that value matches matcher.\par
EXPECT_THAT(value, matcher);  // The non-fatal version.\par
}
\par
For example, in a Google Test test you can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <gmock/gmock.h>\par
\par
using ::testing::AllOf;\par
using ::testing::Ge;\par
using ::testing::Le;\par
using ::testing::MatchesRegex;\par
using ::testing::StartsWith;\par
...\par
\par
  EXPECT_THAT(Foo(), StartsWith("Hello"));\par
  EXPECT_THAT(Bar(), MatchesRegex("Line \\\\d+"));\par
  ASSERT_THAT(Baz(), AllOf(Ge(5), Le(10)));\par
}
\par
which (as you can probably guess) executes {\f2 Foo()} , {\f2 Bar()} , and {\f2 Baz()} , and verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Foo()}  returns a string that starts with {\f2 "Hello"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Bar()}  returns a string that matches regular expression {\f2 "Line \\\\d+"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Baz()}  returns a number in the range [5, 10].\par}
The nice thing about these macros is that {\i they read like English} . They generate informative messages too. For example, if the first {\f2 EXPECT_THAT()}  above fails, the message will be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Foo()\par
  Actual: "Hi, world!"\par
Expected: starts with "Hello"\par
}
\par
{\b Credit:}  The idea of {\f2 (ASSERT|EXPECT)_THAT}  was stolen from the {\f2 Hamcrest} project, which adds {\f2 assertThat()}  to JUnit.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Predicates as Matchers} \par}
Google {\b Mock} provides a built-in set of matchers. In case you find them lacking, you can use an arbitray unary predicate function or functor as a matcher - as long as the predicate accepts a value of the type you want. You do this by wrapping the predicate inside the {\f2 Truly()}  function, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Truly;\par
\par
int IsEven(int n) \{ return (n % 2) == 0 ? 1 : 0; \}\par
...\par
\par
  // Bar() must be called with an even number.\par
  EXPECT_CALL(foo, Bar(Truly(IsEven)));\par
}
\par
Note that the predicate function / functor doesn't have to return {\f2 bool} . It works as long as the return value can be used as the condition in statement {\f2 if (condition) ...} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Arguments that Are Not Copyable} \par}
When you do an {\f2 EXPECT_CALL(mock_obj, Foo(bar))} , Google {\b Mock} saves away a copy of {\f2 bar} . When {\f2 Foo()}  is called later, Google {\b Mock} compares the argument to {\f2 Foo()}  with the saved copy of {\f2 bar} . This way, you don't need to worry about {\f2 bar}  being modified or destroyed after the {\f2 EXPECT_CALL()}  is executed. The same is true when you use matchers like {\f2 Eq(bar)} , {\f2 Le(bar)} , and so on.\par
But what if {\f2 bar}  cannot be copied (i.e. has no copy constructor)? You could define your own matcher function and use it with {\f2 Truly()} , as the previous couple of recipes have shown. Or, you may be able to get away from it if you can guarantee that {\f2 bar}  won't be changed after the {\f2 EXPECT_CALL()}  is executed. Just tell Google {\b Mock} that it should save a reference to {\f2 bar} , instead of a copy of it. Here's how:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Eq;\par
using ::testing::ByRef;\par
using ::testing::Lt;\par
...\par
  // Expects that Foo()'s argument == bar.\par
  EXPECT_CALL(mock_obj, Foo(Eq(ByRef(bar))));\par
\par
  // Expects that Foo()'s argument < bar.\par
  EXPECT_CALL(mock_obj, Foo(Lt(ByRef(bar))));\par
}
\par
Remember: if you do this, don't change {\f2 bar}  after the {\f2 EXPECT_CALL()} , or the result is undefined.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating a Member of an Object} \par}
Often a mock function takes a reference to object as an argument. When matching the argument, you may not want to compare the entire object against a fixed object, as that may be over-specification. Instead, you may need to validate a certain member variable or the result of a certain getter method of the object. You can do this with {\f2 Field()}  and {\f2 Property()} . More specifically,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::bar, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 bar}  member variable satisfies matcher {\f2 m} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Property(&Foo::baz, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 baz()}  method returns a value that satisfies matcher {\f2 m} .\par
For example:\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Field(&Foo::number, Ge(3))}  | Matches {\f2 x}  where {\f2 x.number >= 3} . | \par
}|:--------------------------\'97|:--------------------------------\'97| \par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Property(&Foo::name, StartsWith("John "))}  | Matches {\f2 x}  where {\f2 x.name()}  starts with {\f2 "John "} . | \par
}Note that in {\f2 Property(&Foo::baz, ...)} , method {\f2 baz()}  must take no argument and be declared as {\f2 const} .\par
BTW, {\f2 Field()}  and {\f2 Property()}  can also match plain pointers to objects. For instance,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::number, Ge(3))\par
}
\par
matches a plain pointer {\f2 p}  where {\f2 p->number >= 3} . If {\f2 p}  is {\f2 NULL} , the match will always fail regardless of the inner matcher.\par
What if you want to validate more than one members at the same time? Remember that there is {\f2 AllOf()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating the Value Pointed to by a Pointer Argument} \par}
C++ functions often take pointers as arguments. You can use matchers like {\f2 NULL} , {\f2 NotNull()} , and other comparison matchers to match a pointer, but what if you want to make sure the value {\i pointed to}  by the pointer, instead of the pointer itself, has a certain property? Well, you can use the {\f2 Pointee(m)}  matcher.\par
{\f2 Pointee(m)}  matches a pointer iff {\f2 m}  matches the value the pointer points to. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::Pointee;\par
...\par
  EXPECT_CALL(foo, Bar(Pointee(Ge(3))));\par
}
\par
expects {\f2 foo.Bar()}  to be called with a pointer that points to a value greater than or equal to 3.\par
One nice thing about {\f2 Pointee()}  is that it treats a {\f2 NULL}  pointer as a match failure, so you can write {\f2 Pointee(m)}  instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid AllOf(NotNull(), Pointee(m))\par
}
\par
without worrying that a {\f2 NULL}  pointer will crash your test.\par
Also, did we tell you that {\f2 Pointee()}  works with both raw pointers {\b and}  smart pointers ({\f2 linked_ptr} , {\f2 shared_ptr} , {\f2 scoped_ptr} , and etc)?\par
What if you have a pointer to pointer? You guessed it - you can use nested {\f2 Pointee()}  to probe deeper inside the value. For example, {\f2 Pointee(Pointee(Lt(3)))}  matches a pointer that points to a pointer that points to a number less than 3 (what a mouthful...).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing a Certain Property of an Object} \par}
Sometimes you want to specify that an object argument has a certain property, but there is no existing matcher that does this. If you want good error messages, you should define a matcher. If you want to do it quick and dirty, you could get away with writing an ordinary function.\par
Let's say you have a mock function that takes an object of type {\f2 Foo} , which has an {\f2 int bar()}  method and an {\f2 int baz()}  method, and you want to constrain that the argument's {\f2 bar()}  value plus its {\f2 baz()}  value is a given number. Here's how you can define a matcher to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class BarPlusBazEqMatcher : public MatcherInterface<const Foo&> \{\par
 public:\par
  explicit BarPlusBazEqMatcher(int expected_sum)\par
      : expected_sum_(expected_sum) \{\}\par
\par
  virtual bool MatchAndExplain(const Foo& foo,\par
                               MatchResultListener* listener) const \{\par
    return (foo.bar() + foo.baz()) == expected_sum_;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() equals " << expected_sum_;\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() does not equal " << expected_sum_;\par
  \}\par
 private:\par
  const int expected_sum_;\par
\};\par
\par
inline Matcher<const Foo&> BarPlusBazEq(int expected_sum) \{\par
  return MakeMatcher(new BarPlusBazEqMatcher(expected_sum));\par
\}\par
\par
...\par
\par
  EXPECT_CALL(..., DoThis(BarPlusBazEq(5)))...;\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Containers} \par}
Sometimes an STL container (e.g. list, vector, map, ...) is passed to a mock function and you may want to validate it. Since most STL containers support the {\f2 ==}  operator, you can write {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly.\par
Sometimes, though, you may want to be more flexible (for example, the first element must be an exact match, but the second element can be any positive number, and so on). Also, containers used in tests often have a small number of elements, and having to define the expected container out-of-line is a bit of a hassle.\par
You can use the {\f2 ElementsAre()}  matcher in such cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::ElementsAre;\par
using ::testing::Gt;\par
...\par
\par
  MOCK_METHOD1(Foo, void(const vector<int>& numbers));\par
...\par
\par
  EXPECT_CALL(mock, Foo(ElementsAre(1, Gt(0), _, 5)));\par
}
\par
The above matcher says that the container must have 4 elements, which must be 1, greater than 0, anything, and 5 respectively.\par
{\f2 ElementsAre()}  is overloaded to take 0 to 10 arguments. If more are needed, you can place them in a C-style array and use {\f2 ElementsAreArray()}  instead:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
\par
  // ElementsAreArray accepts an array of element values.\par
  const int expected_vector1[] = \{ 1, 5, 2, 4, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector1)));\par
\par
  // Or, an array of element matchers.\par
  Matcher<int> expected_vector2 = \{ 1, Gt(2), _, 3, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector2)));\par
}
\par
In case the array needs to be dynamically created (and therefore the array size cannot be inferred by the compiler), you can give {\f2 ElementsAreArray()}  an additional argument to specify the array size:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
  int* const expected_vector3 = new int[count];\par
  ... fill expected_vector3 with values ...\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector3, count)));\par
}
\par
{\b Tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ElementAre*()}  works with {\i any}  container that implements the STL iterator concept (i.e. it has a {\f2 const_iterator}  type and supports {\f2 begin()/end()} ) and supports {\f2 size()} , not just the ones defined in STL. It will even work with container types yet to be written - as long as they follows the above pattern.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can use nested {\f2 ElementAre*()}  to match nested (multi-dimensional) containers.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the container is passed by pointer instead of by reference, just write {\f2 Pointee(ElementsAre*(...))} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The order of elements {\i matters}  for {\f2 ElementsAre*()} . Therefore don't use it with containers whose element order is undefined (e.g. {\f2 hash_map} ).\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Matchers} \par}
Under the hood, a Google {\b Mock} matcher object consists of a pointer to a ref-counted implementation object. Copying matchers is allowed and very efficient, as only the pointer is copied. When the last matcher that references the implementation object dies, the implementation object will be deleted.\par
Therefore, if you have some complex matcher that you want to use again and again, there is no need to build it everytime. Just assign it to a matcher variable and use that variable repeatedly! For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matcher<int> in_range = AllOf(Gt(5), Le(10));\par
... use in_range as a matcher in multiple EXPECT_CALLs ...\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Uninteresting Calls} \par}
If you are not interested in how a mock method is called, just don't say anything about it. In this case, if the method is ever called, Google {\b Mock} will perform its default action to allow the test program to continue. If you are not happy with the default action taken by Google {\b Mock}, you can override it using {\f2 DefaultValue<T>::Set()}  (described later in this document) or {\f2 ON_CALL()} .\par
Please note that once you expressed interest in a particular mock method (via {\f2 EXPECT_CALL()} ), all invocations to it must match some expectation. If this function is called but the arguments don't match any {\f2 EXPECT_CALL()}  statement, it will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Disallowing Unexpected Calls} \par}
If a mock method shouldn't be called at all, explicitly say so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .Times(0);\par
}
\par
If some calls to the method are allowed, but the rest are not, just list all the expected calls:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AnyNumber;\par
using ::testing::Gt;\par
...\par
  EXPECT_CALL(foo, Bar(5));\par
  EXPECT_CALL(foo, Bar(Gt(10)))\par
      .Times(AnyNumber());\par
}
\par
A call to {\f2 foo.Bar()}  that doesn't match any of the {\f2 EXPECT_CALL()}  statements will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Ordered Calls} \par}
Although an {\f2 EXPECT_CALL()}  statement defined earlier takes precedence when Google {\b Mock} tries to match a function call with an expectation, by default calls don't have to happen in the order {\f2 EXPECT_CALL()}  statements are written. For example, if the arguments match the matchers in the third {\f2 EXPECT_CALL()} , but not those in the first two, then the third expectation will be used.\par
If you would rather have all calls occur in the order of the expectations, put the {\f2 EXPECT_CALL()}  statements in a block where you define a variable of type {\f2 InSequence} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InSequence;\par
\par
\{\par
  InSequence s;\par
\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(bar, DoThat(_))\par
      .Times(2);\par
  EXPECT_CALL(foo, DoThis(6));\par
\}\par
}
\par
In this example, we expect a call to {\f2 foo.DoThis(5)} , followed by two calls to {\f2 bar.DoThat()}  where the argument can be anything, which are in turn followed by a call to {\f2 foo.DoThis(6)} . If a call occurred out-of-order, Google {\b Mock} will report an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Partially Ordered Calls} \par}
Sometimes requiring everything to occur in a predetermined order can lead to brittle tests. For example, we may care about {\f2 A}  occurring before both {\f2 B}  and {\f2 C} , but aren't interested in the relative order of {\f2 B}  and {\f2 C} . In this case, the test should reflect our real intent, instead of being overly constraining.\par
Google {\b Mock} allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to use the After clause of {\f2 EXPECT_CALL} .\par
Another way is via the {\f2 InSequence()}  clause (not the same as the {\f2 InSequence}  class), which we borrowed from jMock 2. It's less flexible than {\f2 After()} , but more convenient when you have long chains of sequential calls, as it doesn't require you to come up with different names for the expectations in the chains. Here's how it works:\par
If we view {\f2 EXPECT_CALL()}  statements as nodes in a graph, and add an edge from node A to node B wherever A must occur before B, we can get a DAG. We use the term "sequence" to mean a directed path in this DAG. Now, if we decompose the DAG into sequences, we just need to know which sequences each {\f2 EXPECT_CALL()}  belongs to in order to be able to reconstruct the orginal DAG.\par
So, to specify the partial order on the expectations we need to do two things: first to define some {\f2 Sequence}  objects, and then for each {\f2 EXPECT_CALL()}  say which {\f2 Sequence}  objects it is part of. Expectations in the same sequence must occur in the order they are written. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(foo, A())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(bar, B())\par
    .InSequence(s1);\par
EXPECT_CALL(bar, C())\par
    .InSequence(s2);\par
EXPECT_CALL(foo, D())\par
    .InSequence(s2);\par
}
\par
specifies the following DAG (where {\f2 s1}  is {\f2 A -> B} , and {\f2 s2}  is {\f2 A -> C -> D} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid      +---> B\par
     |\par
A ---|\par
     |\par
     +---> C ---> D\par
}
\par
This means that A must occur before B and C, and C must occur before D. There's no restriction about the order other than these.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling When an Expectation Retires} \par}
When a mock method is called, Google {\b Mock} only consider expectations that are still active. An expectation is active when created, and becomes inactive (aka {\i retires} ) when a call that has to occur later has occurred. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(log, Log(WARNING, _, "File too large."))     // #1\par
    .Times(AnyNumber())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(log, Log(WARNING, _, "Data set is empty."))  // #2\par
    .InSequence(s1);\par
EXPECT_CALL(log, Log(WARNING, _, "User not found."))     // #3\par
    .InSequence(s2);\par
}
\par
as soon as either #2 or #3 is matched, #1 will retire. If a warning {\f2 "File too large."}  is logged after this, it will be an error.\par
Note that an expectation doesn't retire automatically when it's saturated. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                  // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."));  // #2\par
}
\par
says that there will be exactly one warning with the message {\f2 "File
too large."} . If the second warning contains this message too, #2 will match again and result in an upper-bound-violated error.\par
If this is not what you want, you can ask an expectation to retire as soon as it becomes saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                 // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."))  // #2\par
      .RetiresOnSaturation();\par
}
\par
Here #2 can be used only once, so if you have two warnings with the message {\f2 "File too large."} , the first will match #2 and the second will match #1 - there will be no error.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Actions} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning References from {\b Mock} Methods} \par}
If a mock function's return type is a reference, you need to use {\f2 ReturnRef()}  instead of {\f2 Return()}  to return a result:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(GetBar, Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar;\par
  EXPECT_CALL(foo, GetBar())\par
      .WillOnce(ReturnRef(bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Actions} \par}
Want to do more than one thing when a function is called? That's fine. {\f2 DoAll()}  allow you to do sequence of actions every time. Only the return value of the last action in the sequence will be used.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DoAll;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Bar, bool(int n));\par
\};\par
...\par
\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(DoAll(action_1,\par
                      action_2,\par
                      ...\par
                      action_n));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Side Effects} \par}
Sometimes a method exhibits its effect not via returning a value but via side effects. For example, it may change some global state or modify an output argument. To mock side effects, in general you can define your own action by implementing {\f2 {\b testing::ActionInterface}} .\par
If all you need to do is to change an output argument, the built-in {\f2 SetArgumentPointee()}  action is convenient:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SetArgumentPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(bool mutate, int* value));\par
  ...\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, Mutate(true, _))\par
      .WillOnce(SetArgumentPointee<1>(5));\par
}
\par
In this example, when {\f2 mutator.Mutate()}  is called, we will assign 5 to the {\f2 int}  variable pointed to by argument #1 (0-based).\par
{\f2 SetArgumentPointee()}  conveniently makes an internal copy of the value you pass to it, removing the need to keep the value in scope and alive. The implication however is that the value must have a copy constructor and assignment operator.\par
If the mock method also needs to return a value as well, you can chain {\f2 SetArgumentPointee()}  with {\f2 Return()}  using {\f2 DoAll()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Return;\par
using ::testing::SetArgumentPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  ...\par
  MOCK_METHOD1(MutateInt, bool(int* value));\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, MutateInt(_))\par
      .WillOnce(DoAll(SetArgumentPointee<0>(5),\par
                      Return(true)));\par
}
\par
If the output argument is an array, use the {\f2 SetArrayArgument<N>(first, last)}  action instead. It copies the elements in source range {\f2 [first, last)}  to the array pointed to by the {\f2 N} -th (0-based) argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NotNull;\par
using ::testing::SetArrayArgument;\par
\par
class MockArrayMutator : public ArrayMutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(int* values, int num_values));\par
  ...\par
\};\par
...\par
\par
  MockArrayMutator mutator;\par
  int values[5] = \{ 1, 2, 3, 4, 5 \};\par
  EXPECT_CALL(mutator, Mutate(NotNull(), 5))\par
      .WillOnce(SetArrayArgument<0>(values, values + 5));\par
}
\par
This also works when the argument is an output iterator:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SeArrayArgument;\par
\par
class MockRolodex : public Rolodex \{\par
 public:\par
  MOCK_METHOD1(GetNames, void(std::back_insert_iterator<vector<string> >));\par
  ...\par
\};\par
...\par
\par
  MockRolodex rolodex;\par
  vector<string> names;\par
  names.push_back("George");\par
  names.push_back("John");\par
  names.push_back("Thomas");\par
  EXPECT_CALL(rolodex, GetNames(_))\par
      .WillOnce(SetArrayArgument<0>(names.begin(), names.end()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Changing a {\b Mock} Object's Behavior Based on the State} \par}
If you expect a call to change the behavior of a mock object, you can use {\f2 {\b testing::InSequence}}  to specify different behaviors before and after the call:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
\par
...\par
  \{\par
    InSequence seq;\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(true));\par
    EXPECT_CALL(my_mock, Flush());\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(false));\par
  \}\par
  my_mock.FlushIfDirty();\par
}
\par
This makes {\f2 my_mock.IsDirty()}  return {\f2 true}  before {\f2 my_mock.Flush()}  is called and return {\f2 false}  afterwards.\par
If the behavior change is more complex, you can store the effects in a variable and make a mock method get its return value from that variable:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SaveArg;\par
using ::testing::Return;\par
\par
ACTION_P(ReturnPointee, p) \{ return *p; \}\par
...\par
  int previous_value = 0;\par
  EXPECT_CALL(my_mock, GetPrevValue())\par
      .WillRepeatedly(ReturnPointee(&previous_value));\par
  EXPECT_CALL(my_mock, UpdateValue(_))\par
      .WillRepeatedly(SaveArg<0>(&previous_value));\par
  my_mock.DoSomethingToUpdateValue();\par
}
\par
Here {\f2 my_mock.GetPrevValue()}  will always return the argument of the last {\f2 UpdateValue()}  call.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Value for a Return Type} \par}
If a mock method's return type is a built-in C++ type or pointer, by default it will return 0 when invoked. You only need to specify an action if this default value doesn't work for you.\par
Sometimes, you may want to change this default value, or you may want to specify a default value for types Google {\b Mock} doesn't know about. You can do this using the {\f2 {\b testing::DefaultValue}}  class template:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(CalculateBar, Bar());\par
\};\par
...\par
\par
  Bar default_bar;\par
  // Sets the default return value for type Bar.\par
  DefaultValue<Bar>::Set(default_bar);\par
\par
  MockFoo foo;\par
\par
  // We don't need to specify an action here, as the default\par
  // return value works for us.\par
  EXPECT_CALL(foo, CalculateBar());\par
\par
  foo.CalculateBar();  // This should return default_bar.\par
\par
  // Unsets the default return value.\par
  DefaultValue<Bar>::Clear();\par
}
\par
Please note that changing the default value for a type can make you tests hard to understand. We recommend you to use this feature judiciously. For example, you may want to make sure the {\f2 Set()}  and {\f2 Clear()}  calls are right next to the code that uses your mock.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Actions for a {\b Mock} Method} \par}
You've learned how to change the default value of a given type. However, this may be too coarse for your purpose: perhaps you have two mock methods with the same return type and you want them to have different behaviors. The {\f2 ON_CALL()}  macro allows you to customize your mock's behavior at the method level:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AnyNumber;\par
using ::testing::Gt;\par
using ::testing::Return;\par
...\par
  ON_CALL(foo, Sign(_))\par
      .WillByDefault(Return(-1));\par
  ON_CALL(foo, Sign(0))\par
      .WillByDefault(Return(0));\par
  ON_CALL(foo, Sign(Gt(0)))\par
      .WillByDefault(Return(1));\par
\par
  EXPECT_CALL(foo, Sign(_))\par
      .Times(AnyNumber());\par
\par
  foo.Sign(5);   // This should return 1.\par
  foo.Sign(-9);  // This should return -1.\par
  foo.Sign(0);   // This should return 0.\par
}
\par
As you may have guessed, when there are more than one {\f2 ON_CALL()}  statements, the news order take precedence over the older ones. In other words, the {\b last}  one that matches the function arguments will be used. This matching order allows you to set up the common behavior in a mock object's constructor or the test fixture's set-up phase and specialize the mock's behavior later.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Functions/Methods/Functors as Actions} \par}
If the built-in actions don't suit you, you can easily use an existing function, method, or functor as an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(Sum, int(int x, int y));\par
  MOCK_METHOD1(ComplexJob, bool(int x));\par
\};\par
\par
int CalculateSum(int x, int y) \{ return x + y; \}\par
\par
class Helper \{\par
 public:\par
  bool ComplexJob(int x);\par
\};\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  EXPECT_CALL(foo, Sum(_, _))\par
      .WillOnce(Invoke(CalculateSum));\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(Invoke(&helper, &Helper::ComplexJob));\par
\par
  foo.Sum(5, 6);       // Invokes CalculateSum(5, 6).\par
  foo.ComplexJob(10);  // Invokes helper.ComplexJob(10);\par
}
\par
The only requirement is that the type of the function, etc must be {\i compatible}  with the signature of the mock function, meaning that the latter's arguments can be implicitly converted to the corresponding arguments of the former, and the former's return type can be implicitly converted to that of the latter. So, you can invoke something whose type is {\i not}  exactly the same as the mock function, as long as it's safe to do so - nice, huh?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking a Function/Method/Functor Without Arguments} \par}
{\f2 Invoke()}  is very useful for doing actions that are more complex. It passes the mock function's arguments to the function or functor being invoked such that the callee has the full context of the call to work with. If the invoked function is not interested in some or all of the arguments, it can simply ignore them.\par
Yet, a common pattern is that a test author wants to invoke a function without the arguments of the mock function. {\f2 Invoke()}  allows her to do that using a wrapper function that throws away the arguments before invoking an underlining nullary function. Needless to say, this can be tedious and obscures the intent of the test.\par
{\f2 InvokeWithoutArgs()}  solves this problem. It's like {\f2 Invoke()}  except that it doesn't pass the mock function's arguments to the callee. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeWithoutArgs;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(ComplexJob, bool(int n));\par
\};\par
\par
bool Job1() \{ ... \}\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(InvokeWithoutArgs(Job1));\par
\par
  foo.ComplexJob(10);  // Invokes Job1().\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking an Argument of the {\b Mock} Function} \par}
Sometimes a mock function will receive a function pointer or a functor (in other words, a "callable") as an argument, e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, bool(int n, bool (*fp)(int)));\par
\};\par
}
\par
and you may want to invoke this callable argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(...);\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
Arghh, you need to refer to a mock function argument but C++ has no lambda (yet), so you have to define your own action. :-( Or do you really?\par
Well, Google {\b Mock} has an action to solve {\i exactly}  this problem:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<N>(arg_1, arg_2, ..., arg_m)\par
}
\par
will invoke the {\f2 N} -th (0-based) argument the mock function receives, with {\f2 arg_1} , {\f2 arg_2} , ..., and {\f2 arg_m} . No matter if the argument is a function pointer or a functor, Google {\b Mock} handles them both.\par
With that, you could write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(InvokeArgument<1>(5));\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
What if the callable takes an argument by reference? No problem - just wrap it inside {\f2 ByRef()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(Bar, bool(bool (*fp)(int, const Helper&)));\par
...\par
using ::testing::_;\par
using ::testing::ByRef;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  ...\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(InvokeArgument<0>(5, ByRef(helper)));\par
  // ByRef(helper) guarantees that a reference to helper, not a copy of it,\par
  // will be passed to the callable.\par
}
\par
What if the callable takes an argument by reference and we do {\b not}  wrap the argument in {\f2 ByRef()} ? Then {\f2 InvokeArgument()}  will {\i make a copy}  of the argument, and pass a {\i reference to the copy} , instead of a reference to the original value, to the callable. This is especially handy when the argument is a temporary value:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(DoThat, bool(bool (*f)(const double& x, const string& s)));\par
...\par
using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  ...\par
  EXPECT_CALL(foo, DoThat(_))\par
      .WillOnce(InvokeArgument<0>(5.0, string("Hi")));\par
  // Will execute (*f)(5.0, string("Hi")), where f is the function pointer\par
  // DoThat() receives.  Note that the values 5.0 and string("Hi") are\par
  // temporary and dead once the EXPECT_CALL() statement finishes.  Yet\par
  // it's fine to perform this action later, since a copy of the values\par
  // are kept inside the InvokeArgument action.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring an Action's Result} \par}
Sometimes you have an action that returns {\i something} , but you need an action that returns {\f2 void}  (perhaps you want to use it in a mock function that returns {\f2 void} , or perhaps it needs to be used in {\f2 DoAll()}  and it's not the last in the list). {\f2 IgnoreResult()}  lets you do that. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Return;\par
\par
int Process(const MyData& data);\par
string DoSomething();\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Abc, void(const MyData& data));\par
  MOCK_METHOD0(Xyz, bool());\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, Abc(_))\par
  // .WillOnce(Invoke(Process));\par
  // The above line won't compile as Process() returns int but Abc() needs\par
  // to return void.\par
      .WillOnce(IgnoreResult(Invoke(Process)));\par
\par
  EXPECT_CALL(foo, Xyz())\par
      .WillOnce(DoAll(IgnoreResult(Invoke(DoSomething)),\par
      // Ignores the string DoSomething() returns.\par
                      Return(true)));\par
}
\par
Note that you {\b cannot}  use {\f2 IgnoreResult()}  on an action that already returns {\f2 void} . Doing so will lead to ugly compiler errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting an Action's Arguments} \par}
Say you have a mock function {\f2 Foo()}  that takes seven arguments, and you have a custom action that you want to invoke when {\f2 Foo()}  is called. Trouble is, the custom action only wants three arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  MOCK_METHOD7(Foo, bool(bool visible, const string& name, int x, int y,\par
                         const map<pair<int, int>, double>& weight,\par
                         double min_weight, double max_wight));\par
...\par
\par
bool IsVisibleInQuadrant1(bool visible, int x, int y) \{\par
  return visible && x >= 0 && y >= 0;\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(IsVisibleInQuadrant1));  // Uh, won't compile. :-(\par
}
\par
To please the compiler God, you can to define an "adaptor" that has the same signature as {\f2 Foo()}  and calls the custom action with the right arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
bool MyIsVisibleInQuadrant1(bool visible, const string& name, int x, int y,\par
                            const map<pair<int, int>, double>& weight,\par
                            double min_weight, double max_wight) \{\par
  return IsVisibleInQuadrant1(visible, x, y);\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(MyIsVisibleInQuadrant1));  // Now it works.\par
}
\par
But isn't this awkward?\par
Google {\b Mock} provides a generic {\i action adaptor} , so you can spend your time minding more important business than writing your own adaptors. Here's the syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid WithArgs<N1, N2, ..., Nk>(action)\par
}
\par
creates an action that passes the arguments of the mock function at the given indices (0-based) to the inner {\f2 action}  and performs it. Using {\f2 WithArgs} , our original example can be written as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::WithArgs;\par
...\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(WithArgs<0, 2, 3>(Invoke(IsVisibleInQuadrant1)));\par
      // No need to define your own adaptor.\par
}
\par
For better readability, Google {\b Mock} also gives you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithoutArgs(action)}  when the inner {\f2 action}  takes {\i no}  argument, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithArg<N>(action)}  (no {\f2 s}  after {\f2 Arg} ) when the inner {\f2 action}  takes {\i one}  argument.\par}
As you may have realized, {\f2 InvokeWithoutArgs(...)}  is just syntactic sugar for {\f2 WithoutArgs(Inovke(...))} .\par
Here are more tips:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The inner action used in {\f2 WithArgs}  and friends does not have to be {\f2 Invoke()}  \'96 it can be anything.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can repeat an argument in the argument list if necessary, e.g. {\f2 WithArgs<2, 3, 3, 5>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can change the order of the arguments, e.g. {\f2 WithArgs<3, 2, 1>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The types of the selected arguments do {\i not}  have to match the signature of the inner action exactly. It works as long as they can be implicitly converted to the corresponding arguments of the inner action. For example, if the 4-th argument of the mock function is an {\f2 int}  and {\f2 my_action}  takes a {\f2 double} , {\f2 WithArg<4>(my_action)}  will work.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Arguments in Action Functions} \par}
The selecting-an-action's-arguments recipe showed us one way to make a mock function and an action with incompatible argument lists fit together. The downside is that wrapping the action in {\f2 WithArgs<...>()}  can get tedious for people writing the tests.\par
If you are defining a function, method, or functor to be used with {\f2 Invoke*()} , and you are not interested in some of its arguments, an alternative to {\f2 WithArgs}  is to declare the uninteresting arguments as {\f2 Unused} . This makes the definition less cluttered and less fragile in case the types of the uninteresting arguments change. It could also increase the chance the action function can be reused. For example, given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD3(Foo, double(const string& label, double x, double y));\par
MOCK_METHOD3(Bar, double(int index, double x, double y));\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
double DistanceToOriginWithLabel(const string& label, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
\par
double DistanceToOriginWithIndex(int index, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithLabel));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithIndex));\par
}
\par
you could write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Unused;\par
\par
double DistanceToOrigin(Unused, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Actions} \par}
Just like matchers, a Google {\b Mock} action object consists of a pointer to a ref-counted implementation object. Therefore copying actions is also allowed and very efficient. When the last action that references the implementation object dies, the implementation object will be deleted.\par
If you have some complex action that you want to use again and again, you may not have to build it from scratch everytime. If the action doesn't have an internal state (i.e. if it always does the same thing no matter how many times it has been called), you can assign it to an action variable and use that variable repeatedly. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<bool(int*)> set_flag = DoAll(SetArgumentPointee<0>(5),\par
                                    Return(true));\par
... use set_flag in .WillOnce() and .WillRepeatedly() ...\par
}
\par
However, if the action has its own state, you may be surprised if you share the action object. Suppose you have an action factory {\f2 IncrementCounter(init)}  which creates an action that increments and returns a counter whose initial value is {\f2 init} , using two actions created from the same expression and using a shared action will exihibit different behaviors. Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(IncrementCounter(0));\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(IncrementCounter(0));\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 1 - Blah() uses a different\par
               // counter than Bar()'s.\par
}
\par
versus\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<int()> increment = IncrementCounter(0);\par
\par
EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(increment);\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(increment);\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 3 - the counter is shared.\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Misc Recipes on Using Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Forcing a Verification} \par}
When it's being destoyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, and will generate {\f2 Google Test} failures if not. This is convenient as it leaves you with one less thing to worry about. That is, unless you are not sure if your mock object will be destoyed.\par
How could it be that your mock object won't eventually be destroyed? Well, it might be created on the heap and owned by the code you are testing. Suppose there's a bug in that code and it doesn't delete the mock object properly - you could end up with a passing test when there's actually a bug.\par
Using a heap checker is a good idea and can alleviate the concern, but its implementation may not be 100% reliable. So, sometimes you do want to {\i force}  Google {\b Mock} to verify a mock object before it is (hopefully) destructed. You can do this with {\f2 Mock::VerifyAndClearExpectations(&mock_object)} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyServerTest, ProcessesRequest) \{\par
  using ::testing::Mock;\par
\par
  MockFoo* const foo = new MockFoo;\par
  EXPECT_CALL(*foo, ...)...;\par
  // ... other expectations ...\par
\par
  // server now owns foo.\par
  MyServer server(foo);\par
  server.ProcessRequest(...);\par
\par
  // In case that server's destructor will forget to delete foo,\par
  // this will verify the expectations anyway.\par
  Mock::VerifyAndClearExpectations(foo);\par
\}  // server is destroyed when it goes out of scope here.\par
}
\par
{\b Tip:}  The {\f2 Mock::VerifyAndClearExpectations()}  function returns a {\f2 bool}  to indicate whether the verification was successful ({\f2 true}  for yes), so you can wrap that function call inside a {\f2 ASSERT_TRUE()}  if there is no point going further when the verification has failed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Check Points} \par}
Sometimes you may want to "reset" a mock object at various check points in your test: at each check point, you verify that all existing expectations on the mock object have been satisfied, and then you set some new expectations on it as if it's newly created. This allows you to work with a mock object in "phases" whose sizes are each manageable.\par
One such scenario is that in your test's {\f2 SetUp()}  function, you may want to put the object you are testing into a certain state, with the help from a mock object. Once in the desired state, you want to clear all expectations on the mock, such that in the {\f2 TEST_F}  body you can set fresh expectations on it.\par
As you may have figured out, the {\f2 Mock::VerifyAndClearExpectations()}  function we saw in the previous recipe can help you here. Or, if you are using {\f2 ON_CALL()}  to set default actions on the mock object and want to clear the default actions as well, use {\f2 Mock::VerifyAndClear(&mock_object)}  instead. This function does what {\f2 Mock::VerifyAndClearExpectations(&mock_object)}  does and returns the same {\f2 bool} , {\b plus}  it clears the {\f2 ON_CALL()}  statements on {\f2 mock_object}  too.\par
Another trick you can use to achieve the same effect is to put the expectations in sequences and insert calls to a dummy "check-point" function at specific places. Then you can verify that the mock function calls do happen at the right time. For example, if you are exercising code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Foo(1);\par
Foo(2);\par
Foo(3);\par
}
\par
and want to verify that {\f2 Foo(1)}  and {\f2 Foo(3)}  both invoke {\f2 mock.Bar("a")} , but {\f2 Foo(2)}  doesn't invoke anything. You can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MockFunction;\par
\par
TEST(FooTest, InvokesBarCorrectly) \{\par
  MyMock mock;\par
  // Class MockFunction<F> has exactly one mock method.  It is named\par
  // Call() and has type F.\par
  MockFunction<void(string check_point_name)> check;\par
  \{\par
    InSequence s;\par
\par
    EXPECT_CALL(mock, Bar("a"));\par
    EXPECT_CALL(check, Call("1"));\par
    EXPECT_CALL(check, Call("2"));\par
    EXPECT_CALL(mock, Bar("a"));\par
  \}\par
  Foo(1);\par
  check.Call("1");\par
  Foo(2);\par
  check.Call("2");\par
  Foo(3);\par
\}\par
}
\par
The expectation spec says that the first {\f2 Bar("a")}  must happen before check point "1", the second {\f2 Bar("a")}  must happen after check point "2", and nothing should happen between the two check points. The explicit check points make it easy to tell which {\f2 Bar("a")}  is called by which call to {\f2 Foo()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Destructors} \par}
Sometimes you want to make sure a mock object is destructed at the right time, e.g. after {\f2 bar->A()}  is called but before {\f2 bar->B()}  is called. We already know that you can specify constraints on the order of mock function calls, so all we need to do is to mock the destructor of the mock function.\par
This sounds simple, except for one problem: a destructor is a special function with special syntax and special semantics, and the {\f2 MOCK_METHOD0}  macro doesn't work for it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD0(~MockFoo, void());  // Won't compile!\par
}
\par
The good news is that you can use a simple pattern to achieve the same effect. First, add a mock function {\f2 Die()}  to your mock class and call it in the destructor, like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  // Add the following two lines to the mock class.\par
  MOCK_METHOD0(Die, void());\par
  virtual ~MockFoo() \{ Die(); \}\par
\};\par
}
\par
(If the name {\f2 Die()}  clashes with an existing symbol, choose another name.) Now, we have translated the problem of testing when a {\f2 {\b MockFoo}}  object dies to testing when its {\f2 Die()}  method is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockFoo* foo = new MockFoo;\par
MockBar* bar = new MockBar;\par
...\par
\{\par
  InSequence s;\par
\par
  // Expects *foo to die after bar->A() and before bar->B().\par
  EXPECT_CALL(*bar, A());\par
  EXPECT_CALL(*foo, Die());\par
  EXPECT_CALL(*bar, B());\par
\}\par
}
\par
And that's that.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} and Threads} \par}
{\b IMPORTANT NOTE:}  What we describe in this recipe is {\b NOT}  true yet, as Google {\b Mock} is not currently thread-safe. However, all we need to make it thread-safe is to implement some synchronization operations in {\f2 <{\b gtest/internal/gtest-port.h}>}  - and then the information below will become true.\par
In a {\b unit}  test, it's best if you could isolate and test a piece of code in a single-threaded context. That avoids race conditions and dead locks, and makes debugging your test much easier.\par
Yet many programs are multi-threaded, and sometimes to test something we need to pound on it from more than one thread. Google {\b Mock} works for this purpose too.\par
Remember the steps for using a mock:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a mock object {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set its default actions and expectations using {\f2 ON_CALL()}  and {\f2 EXPECT_CALL()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The code under test calls methods of {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, verify and reset the mock.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the mock yourself, or let the code under test destroy it. The destructor will automatically verify it.\par}
If you follow the following simple rules, your mocks and threads can live happily togeter:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Execute your {\i test code}  (as opposed to the code being tested) in {\i one}  thread. This makes your test easy to follow.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Obviously, you can do step #1 without locking.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When doing step #2 and #5, make sure no other thread is accessing {\f2 foo} . Obvious too, huh?\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#3 and #4 can be done either in one thread or in multiple threads - anyway you want. Google {\b Mock} takes care of the locking, so you don't have to do any - unless required by your test logic.\par}
If you violate the rules (for example, if you set expectations on a mock while another thread is calling its methods), you get undefined behavior. That's not fun, so don't do it.\par
Google {\b Mock} guarantees that the action for a mock function is done in the same thread that called the mock function. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock, Foo(1))\par
    .WillOnce(action1);\par
EXPECT_CALL(mock, Foo(2))\par
    .WillOnce(action2);\par
}
\par
if {\f2 Foo(1)}  is called in thread 1 and {\f2 Foo(2)}  is called in thread 2, Google {\b Mock} will execute {\f2 action1}  in thread 1 and {\f2 action2}  in thread 2.\par
Google {\b Mock} does {\i not}  impose a sequence on actions performed in different threads (doing so may create deadlocks as the actions may need to cooperate). This means that the execution of {\f2 action1}  and {\f2 action2}  in the above example {\i may}  interleave. If this is a problem, you should add proper synchronization logic to {\f2 action1}  and {\f2 action2}  to make the test thread-safe.\par
Also, remember that {\f2 DefaultValue<T>}  is a global resource that potentially affects {\i all}  living mock objects in your program. Naturally, you won't want to mess with it from multiple threads or when there still are mocks in action.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Much Information Google {\b Mock} Prints} \par}
When Google {\b Mock} sees something that has the potential of being an error (e.g. a mock function with no expectation is called, a.k.a. an uninteresting call, which is allowed but perhaps you forgot to explicitly ban the call), it prints some warning messages, including the arguments of the function and the return value. Hopefully this will remind you to take a look and see if there is indeed a problem.\par
Sometimes you are confident that your tests are correct and may not appreciate such friendly messages. Some other times, you are debugging your tests or learning about the behavior of the code you are testing, and wish you could observe every mock call that happens (including argument values and the return value). Clearly, one size doesn't fit all.\par
You can control how much Google {\b Mock} tells you using the {\f2 --gmock_verbose=LEVEL}  command-line flag, where {\f2 LEVEL}  is a string with three possible values:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 info} : Google {\b Mock} will print all informational messages, warnings, and errors (most verbose). At this setting, Google {\b Mock} will also log any calls to the {\f2 ON_CALL/EXPECT_CALL}  macros.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 warning} : Google {\b Mock} will print both warnings and errors (less verbose). This is the default.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 error} : Google {\b Mock} will print errors only (least verbose).\par}
Alternatively, you can adjust the value of that flag from within your tests like so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gmock_verbose = "error";\par
}
\par
Now, judiciously use the right flag to enable Google {\b Mock} serve you better!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running Tests in Emacs} \par}
If you build and run your tests in Emacs, the source file locations of Google {\b Mock} and {\f2 Google Test} errors will be highlighted. Just press {\f2 <Enter>}  on one of them and you'll be taken to the offending line. Or, you can just type {\f2 C-x} ` to jump to the next error.\par
To make it even easier, you can add the following lines to your {\f2 ~/.emacs}  file:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid (global-set-key "\\M-m"   'compile)  ; m is for make\par
(global-set-key [M-down] 'next-error)\par
(global-set-key [M-up]   '(lambda () (interactive) (next-error -1)))\par
}
\par
Then you can type {\f2 M-m}  to start a build, or {\f2 M-up} /{\f2 M-down}  to move back and forth between errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Fusing Google {\b Mock} Source Files} \par}
Google {\b Mock}'s implementation consists of dozens of files (excluding its own tests). Sometimes you may want them to be packaged up in fewer files instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gmock_files.py}  in the {\f2 scripts/}  directory (starting with release 1.2.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gmock_files.py OUTPUT_DIR\par
}
\par
and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}} , {\f2 {\b gmock/gmock.h}} , and {\f2 gmock-gtest-all.cc}  in it. These three files contain everything you need to use Google {\b Mock} (and Google Test). Just copy them to anywhere you want and you are ready to write tests and use mocks. You can use the {\f2 scrpts/test/Makefile} file as an example on how to compile your tests against them.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Matchers Quickly} \par}
The {\f2 MATCHER*}  family of macros can be used to define custom matchers easily. The syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(name, "description string") \{ statements; \}\par
}
\par
will define a matcher with the given name that executes the statements, which must return a {\f2 bool}  to indicate if the match succeeds. Inside the statements, you can refer to the value being matched by {\f2 arg} , and refer to its type by {\f2 arg_type} .\par
The description string documents what the matcher does, and is used to generate the failure message when the match fails. Since a {\f2 MATCHER()}  is usually defined in a header file shared by multiple C++ source files, we require the description to be a C-string {\i literal}  to avoid possible side effects. It can be empty ({\f2 ""} ), in which case Google {\b Mock} will use the sequence of words in the matcher name as the description.\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{ return (arg % 7) == 0; \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects mock_foo.Bar(n) to be called where n is divisible by 7.\par
EXPECT_CALL(mock_foo, Bar(IsDivisibleBy7()));\par
}
 or, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Verifies that the value of some_expression is divisible by 7.\par
EXPECT_THAT(some_expression, IsDivisibleBy7());\par
}
 If the above assertion fails, it will print something like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: some_expression\par
Expected: is divisible by 7\par
  Actual: 27\par
}
 where the description {\f2 "is divisible by 7"}  is automatically calculated from the matcher name {\f2 IsDivisibleBy7} .\par
Optionally, you can stream additional information to a hidden argument named {\f2 result_listener}  to explain the match result. For example, a better definition of {\f2 IsDivisibleBy7}  is: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{\par
  if ((arg % 7) == 0)\par
    return true;\par
\par
  *result_listener << "the remainder is " << (arg % 7);\par
  return false;\par
\}\par
}
\par
With this definition, the above assertion will give a better message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: some_expression\par
Expected: is divisible by 7\par
  Actual: 27 (the remainder is 6)\par
}
\par
You should let {\f2 MatchAndExplain()}  print {\i any additional information}  that can help a user understand the match result. Note that it should explain why the match succeeds in case of a success (unless it's obvious) - this is useful when the matcher is used inside {\f2 Not()} . There is no need to print the argument value itself, as Google {\b Mock} already prints it for you.\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The type of the value being matched ({\f2 arg_type} ) is determined by the context in which you use the matcher and is supplied to you by the compiler, so you don't need to worry about declaring it (nor can you). This allows the matcher to be polymorphic. For example, {\f2 IsDivisibleBy7()}  can be used to match any type where the value of {\f2 (arg % 7) == 0}  can be implicitly converted to a {\f2 bool} . In the {\f2 Bar(IsDivisibleBy7())}  example above, if method {\f2 Bar()}  takes an {\f2 int} , {\f2 arg_type}  will be {\f2 int} ; if it takes an {\f2 unsigned long} , {\f2 arg_type}  will be {\f2 unsigned long} ; and so on.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google {\b Mock} doesn't guarantee when or how many times a matcher will be invoked. Therefore the matcher logic must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters). This requirement must be satisfied no matter how you define the matcher (e.g. using one of the methods described in the following recipes). In particular, a matcher can never call a mock function, as that will affect the state of the mock object and Google {\b Mock}.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Matchers Quickly} \par}
Sometimes you'll want to define a matcher that has parameters. For that you can use the macro: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(name, param_name, "description string") \{ statements; \}\par
}
\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(HasAbsoluteValue, value, "") \{ return abs(arg) == value; \}\par
}
 will allow you to write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_THAT(Blah("a"), HasAbsoluteValue(n));\par
}
 which may lead to this message (assuming {\f2 n}  is 10): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Blah("a")\par
Expected: has absolute value 10\par
  Actual: -9\par
}
\par
Note that both the matcher description and its parameter are printed, making the message human-friendly.\par
In the matcher definition body, you can write {\f2 foo_type}  to reference the type of a parameter named {\f2 foo} . For example, in the body of {\f2 MATCHER_P(HasAbsoluteValue, value)}  above, you can write {\f2 value_type}  to refer to the type of {\f2 value} .\par
Google {\b Mock} also provides {\f2 MATCHER_P2} , {\f2 MATCHER_P3} , ..., up to {\f2 MATCHER_P10}  to support multi-parameter matchers: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(name, param_1, ..., param_k, "description string") \{ statements; \}\par
}
\par
Please note that the custom description string is for a particular {\b instance}  of the matcher, where the parameters have been bound to actual values. Therefore usually you'll want the parameter values to be part of the description. Google {\b Mock} lets you do that using Python-style interpolations. The following syntaxes are supported currently:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 %%}  \cell }{a single {\f2 %}  character  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 %(*)s}  \cell }{all parameters of the matcher printed as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 %(foo)s}  \cell }{value of the matcher parameter named {\f2 foo}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P2(InClosedRange, low, hi, "is in range [%(low)s, %(hi)s]") \{\par
  return low <= arg && arg <= hi;\par
\}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: is in range [4, 6]\par
}
\par
If you specify {\f2 ""}  as the description, the failure message will contain the sequence of words in the matcher name followed by the parameter values printed as a tuple. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P2(InClosedRange, low, hi, "") \{ ... \}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the text: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: in closed range (4, 6)\par
}
\par
For the purpose of typing, you can view {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(Foo, p1, ..., pk, "description string") \{ ... \}\par
}
 as shorthand for {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename p1_type, ..., typename pk_type>\par
FooMatcherPk<p1_type, ..., pk_type>\par
Foo(p1_type p1, ..., pk_type pk) \{ ... \}\par
}
\par
When you write {\f2 Foo(v1, ..., vk)} , the compiler infers the types of the parameters {\f2 v1} , ..., and {\f2 vk}  for you. If you are not happy with the result of the type inference, you can specify the types by explicitly instantiating the template, as in {\f2 Foo<long, bool>(5, false)} . As said earlier, you don't get to (or need to) specify {\f2 arg_type}  as that's determined by the context in which the matcher is used.\par
You can assign the result of expression {\f2 Foo(p1, ..., pk)}  to a variable of type {\f2 FooMatcherPk<p1_type, ..., pk_type>} . This can be useful when composing matchers. Matchers that don't have a parameter or have only one parameter have special types: you can assign {\f2 Foo()}  to a {\f2 FooMatcher} -typed variable, and assign {\f2 Foo(p)}  to a {\f2 FooMatcherP<p_type>} -typed variable.\par
While you can instantiate a matcher template with reference types, passing the parameters by pointer usually makes your code more readable. If, however, you still want to pass a parameter by reference, be aware that in the failure message generated by the matcher you will see the value of the referenced object but not its address.\par
You can overload matchers with different numbers of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(Blah, a, "description string 1") \{ ... \}\par
MATCHER_P2(Blah, a, b, "description string 2") \{ ... \}\par
}
\par
While it's tempting to always use the {\f2 MATCHER*}  macros when defining a new matcher, you should also consider implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()}  instead (see the recipes that follow), especially if you need to use the matcher a lot. While these approaches require more work, they give you more control on the types of the value being matched and the matcher parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading matchers based on parameter types (as opposed to just based on the number of parameters).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Matchers} \par}
A matcher of argument type {\f2 T}  implements {\f2 {\b testing::MatcherInterface}<T>}  and does two things: it tests whether a value of type {\f2 T}  matches the matcher, and can describe what kind of values it matches. The latter ability is used for generating readable error messages when expectations are violated.\par
The interface looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MatchResultListener \{\par
 public:\par
  ...\par
  // Streams x to the underlying ostream; does nothing if the ostream\par
  // is NULL.\par
  template <typename T>\par
  MatchResultListener& operator<<(const T& x);\par
\par
  // Returns the underlying ostream.\par
  ::std::ostream* stream();\par
\};\par
\par
template <typename T>\par
class MatcherInterface \{\par
 public:\par
  virtual ~MatcherInterface();\par
\par
  // Returns true iff the matcher matches x; also explains the match\par
  // result to 'listener'.\par
  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;\par
\par
  // Describes this matcher to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\par
  // Describes the negation of this matcher to an ostream.\par
  virtual void DescribeNegationTo(::std::ostream* os) const;\par
\};\par
}
\par
If you need a custom matcher but {\f2 Truly()}  is not a good option (for example, you may not be happy with the way {\f2 Truly(predicate)}  describes itself, or you may want your matcher to be polymorphic as {\f2 Eq(value)}  is), you can define a matcher to do whatever you want in two steps: first implement the matcher interface, and then define a factory function to create a matcher instance. The second step is not strictly needed but it makes the syntax of using the matcher nicer.\par
For example, you can define a matcher to test whether an {\f2 int}  is divisible by 7 and then use it like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakeMatcher;\par
using ::testing::Matcher;\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n, MatchResultListener* listener) const \{\par
    return (n % 7) == 0;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "is divisible by 7";\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "is not divisible by 7";\par
  \}\par
\};\par
\par
inline Matcher<int> DivisibleBy7() \{\par
  return MakeMatcher(new DivisibleBy7Matcher);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(DivisibleBy7()));\par
}
\par
You may improve the matcher message by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n,\par
                               MatchResultListener* listener) const \{\par
    const int remainder = n % 7;\par
    if (remainder != 0) \{\par
      *listener << "the remainder is " << remainder;\par
    \}\par
    return remainder == 0;\par
  \}\par
  ...\par
\};\par
}
\par
Then, {\f2 EXPECT_THAT(x, DivisibleBy7());}  may general a message like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: x\par
Expected: is divisible by 7\par
  Actual: 23 (the remainder is 2)\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Matchers} \par}
You've learned how to write your own matchers in the previous recipe. Just one problem: a matcher created using {\f2 MakeMatcher()}  only works for one particular type of arguments. If you want a {\i polymorphic}  matcher that works with arguments of several types (for instance, {\f2 Eq(x)}  can be used to match a {\f2 value}  as long as {\f2 value}  == {\f2 x}  compiles \'96 {\f2 value}  and {\f2 x}  don't have to share the same type), you can learn the trick from {\f2 <{\b gmock/gmock-matchers.h}>}  but it's a bit involved.\par
Fortunately, most of the time you can define a polymorphic matcher easily with the help of {\f2 MakePolymorphicMatcher()} . Here's how you can define {\f2 NotNull()}  as an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
using ::testing::NotNull;\par
using ::testing::PolymorphicMatcher;\par
\par
class NotNullMatcher \{\par
 public:\par
  // To implement a polymorphic matcher, first define a COPYABLE class\par
  // that has three members MatchAndExplain(), DescribeTo(), and\par
  // DescribeNegationTo(), like the following.\par
\par
  // In this example, we want to use NotNull() with any pointer, so\par
  // MatchAndExplain() accepts a pointer of any type as its first argument.\par
  // In general, you can define MatchAndExplain() as an ordinary method or\par
  // a method template, or even overload it.\par
  template <typename T>\par
  bool MatchAndExplain(T* p,\par
                       MatchResultListener* /* listener */) const \{\par
    return p != NULL;\par
  \}\par
\par
  // Describes the property of a value matching this matcher.\par
  void DescribeTo(::std::ostream* os) const \{ *os << "is not NULL"; \}\par
\par
  // Describes the property of a value NOT matching this matcher.\par
  void DescribeNegationTo(::std::ostream* os) const \{ *os << "is NULL"; \}\par
\};\par
\par
// To construct a polymorphic matcher, pass an instance of the class\par
// to MakePolymorphicMatcher().  Note the return type.\par
inline PolymorphicMatcher<NotNullMatcher> NotNull() \{\par
  return MakePolymorphicMatcher(NotNullMatcher());\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(NotNull()));  // The argument must be a non-NULL pointer.\par
}
\par
{\b Note:}  Your polymorphic matcher class does {\b not}  need to inherit from {\f2 MatcherInterface}  or any other class, and its methods do {\b not}  need to be virtual.\par
Like in a monomorphic matcher, you may explain the match result by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Cardinalities} \par}
A cardinality is used in {\f2 Times()}  to tell Google {\b Mock} how many times you expect a call to occur. It doesn't have to be exact. For example, you can say {\f2 AtLeast(5)}  or {\f2 Between(2, 4)} .\par
If the built-in set of cardinalities doesn't suit you, you are free to define your own by implementing the following interface (in namespace {\f2 testing} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class CardinalityInterface \{\par
 public:\par
  virtual ~CardinalityInterface();\par
\par
  // Returns true iff call_count calls will satisfy this cardinality.\par
  virtual bool IsSatisfiedByCallCount(int call_count) const = 0;\par
\par
  // Returns true iff call_count calls will saturate this cardinality.\par
  virtual bool IsSaturatedByCallCount(int call_count) const = 0;\par
\par
  // Describes self to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\};\par
}
\par
For example, to specify that a call must occur even number of times, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Cardinality;\par
using ::testing::CardinalityInterface;\par
using ::testing::MakeCardinality;\par
\par
class EvenNumberCardinality : public CardinalityInterface \{\par
 public:\par
  virtual bool IsSatisfiedByCallCount(int call_count) const \{\par
    return (call_count % 2) == 0;\par
  \}\par
\par
  virtual bool IsSaturatedByCallCount(int call_count) const \{\par
    return false;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "called even number of times";\par
  \}\par
\};\par
\par
Cardinality EvenNumber() \{\par
  return MakeCardinality(new EvenNumberCardinality);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(3))\par
      .Times(EvenNumber());\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Actions Quickly} \par}
If the built-in actions don't work for you, and you find it inconvenient to use {\f2 Invoke()} , you can use a macro from the {\f2 ACTION*}  family to quickly define a new action that can be used in your code as if it's a built-in action.\par
By writing {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(name) \{ statements; \}\par
}
 in a namespace scope (i.e. not inside a class or function), you will define an action with the given name that executes the statements. The value returned by {\f2 statements}  will be used as the return value of the action. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as {\f2 argK} . For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(IncrementArg1) \{ return ++(*arg1); \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(IncrementArg1());\par
}
\par
Note that you don't need to specify the types of the mock function arguments. Rest assured that your code is type-safe though: you'll get a compiler error if {\f2 *arg1}  doesn't support the {\f2 ++}  operator, or if the type of {\f2 ++(*arg1)}  isn't compatible with the mock function's return type.\par
Another example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  (*arg2)(5);\par
  Blah();\par
  *arg1 = 0;\par
  return arg0;\par
\}\par
}
 defines an action {\f2 Foo()}  that invokes argument #2 (a function pointer) with 5, calls function {\f2 Blah()} , sets the value pointed to by argument #1 to 0, and returns argument #0.\par
For more convenience and flexibility, you can also use the following pre-defined symbols in the body of {\f2 ACTION} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 argK_type}  \cell }{The type of the K-th (0-based) argument of the mock function  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{All arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{The type of all arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{The return type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{The type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For example, when using an {\f2 ACTION}  as a stub action for mock function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int DoSomething(bool flag, int* ptr);\par
}
 we have: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Pre-defined Symbol}  \cell }{{\b Is Bound To}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0}  \cell }{the value of {\f2 flag}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0_type}  \cell }{the type {\f2 bool}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1}  \cell }{the value of {\f2 ptr}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1_type}  \cell }{the type {\f2 int*}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{the tuple {\f2 (flag, ptr)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{the type {\f2 {\b std::tr1::tuple}<bool, int*>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{the type {\f2 int}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{the type {\f2 int(bool, int*)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Actions Quickly} \par}
Sometimes you'll want to parameterize an action you define. For that we have another macro {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(name, param) \{ statements; \}\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Add, n) \{ return arg0 + n; \}\par
}
 will allow you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns argument #0 + 5.\par
... WillOnce(Add(5));\par
}
\par
For convenience, we use the term {\i arguments}  for the values used to invoke the mock function, and the term {\i parameters}  for the values used to instantiate an action.\par
Note that you don't need to provide the type of the parameter either. Suppose the parameter is named {\f2 param} , you can also use the Google-Mock-defined symbol {\f2 param_type}  to refer to the type of the parameter as inferred by the compiler. For example, in the body of {\f2 ACTION_P(Add, n)}  above, you can write {\f2 n_type}  for the type of {\f2 n} .\par
Google {\b Mock} also provides {\f2 ACTION_P2} , {\f2 ACTION_P3} , and etc to support multi-parameter actions. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P2(ReturnDistanceTo, x, y) \{\par
  double dx = arg0 - x;\par
  double dy = arg1 - y;\par
  return sqrt(dx*dx + dy*dy);\par
\}\par
}
 lets you write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(ReturnDistanceTo(5.0, 26.5));\par
}
\par
You can view {\f2 ACTION}  as a degenerated parameterized action where the number of parameters is 0.\par
You can also easily define actions overloaded on the number of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Plus, a) \{ ... \}\par
ACTION_P2(Plus, a, b) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Restricting the Type of an Argument or Parameter in an ACTION} \par}
For maximum brevity and reusability, the {\f2 ACTION*}  macros don't ask you to provide the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.\par
Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  // Makes sure arg0 can be converted to int.\par
  int n = arg0;\par
  ... use n instead of arg0 here ...\par
\}\par
\par
ACTION_P(Bar, param) \{\par
  // Makes sure the type of arg1 is const char*.\par
  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\par
\par
  // Makes sure param can be converted to bool.\par
  bool flag = param;\par
\}\par
}
 where {\f2 StaticAssertTypeEq}  is a compile-time assertion in Google Test that verifies two types are the same.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Action Templates Quickly} \par}
Sometimes you want to give an action explicit template parameters that cannot be inferred from its value parameters. {\f2 ACTION_TEMPLATE()}  supports that and can be viewed as an extension to {\f2 ACTION()}  and {\f2 ACTION_P*()} .\par
The syntax: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_TEMPLATE(ActionName,\par
                HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),\par
                AND_n_VALUE_PARAMS(p1, ..., p_n)) \{ statements; \}\par
}
\par
defines an action template that takes {\i m}  explicit template parameters and {\i n}  value parameters, where {\i m}  is between 1 and 10, and {\i n}  is between 0 and 10. {\f2 name_i}  is the name of the i-th template parameter, and {\f2 kind_i}  specifies whether it's a {\f2 typename} , an integral constant, or a template. {\f2 p_i}  is the name of the i-th value parameter.\par
Example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // DuplicateArg<k, T>(output) converts the k-th argument of the mock\par
// function to type T and copies it to *output.\par
ACTION_TEMPLATE(DuplicateArg,\par
                // Note the comma between int and k:\par
                HAS_2_TEMPLATE_PARAMS(int, k, typename, T),\par
                AND_1_VALUE_PARAMS(output)) \{\par
  *output = T(std::tr1::get<k>(args));\par
\}\par
}
\par
To create an instance of an action template, write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m>(v1, ..., v_n)\par
}
 where the {\f2 t} s are the template arguments and the {\f2 v} s are the value arguments. The value argument types are inferred by the compiler. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  int n;\par
  EXPECT_CALL(mock, Foo(_, _))\par
      .WillOnce(DuplicateArg<1, unsigned char>(&n));\par
}
\par
If you want to explicitly specify the value argument types, you can provide additional template arguments: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m, u1, ..., u_k>(v1, ..., v_n)\par
}
 where {\f2 u_i}  is the desired type of {\f2 v_i} .\par
{\f2 ACTION_TEMPLATE}  and {\f2 ACTION} /{\f2 ACTION_P*}  can be overloaded on the number of value parameters, but not on the number of template parameters. Without the restriction, the meaning of the following is unclear:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid OverloadedAction<int, bool>(x);\par
}
\par
Are we using a single-template-parameter action where {\f2 bool}  refers to the type of {\f2 x} , or a two-template-parameter action where the compiler is asked to infer the type of {\f2 x} ?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using the ACTION Object's Type} \par}
If you are writing a function that returns an {\f2 ACTION}  object, you'll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Given Definition}  \cell }{{\b Expression}  \cell }{{\b Has Type}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Foo)}  \cell }{{\f2 Foo()}  \cell }{{\f2 FooAction}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Foo, HAS_m_TEMPLATE_PARAMS(...), AND_0_VALUE_PARAMS())}  \cell }{{\f2 Foo<t1, ..., t_m>()}  \cell }{{\f2 FooAction<t1, ..., t_m>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Bar, param)}  \cell }{{\f2 Bar(int_value)}  \cell }{{\f2 BarActionP<int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Bar, HAS_m_TEMPLATE_PARAMS(...), AND_1_VALUE_PARAMS(p1))}  \cell }{{\f2 Bar<t1, ..., t_m>(int_value)}  \cell }{{\f2 FooActionP<t1, ..., t_m, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P2(Baz, p1, p2)}  \cell }{{\f2 Baz(bool_value, int_value)}  \cell }{{\f2 BazActionP2<bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Baz, HAS_m_TEMPLATE_PARAMS(...), AND_2_VALUE_PARAMS(p1, p2))}  \cell }{{\f2 Baz<t1, ..., t_m>(bool_value, int_value)}  \cell }{{\f2 FooActionP2<t1, ..., t_m, bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that we have to pick different suffixes ({\f2 Action} , {\f2 ActionP} , {\f2 ActionP2} , and etc) for actions with different numbers of value parameters, or the action definitions cannot be overloaded on the number of them.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Actions} \par}
While the {\f2 ACTION*}  macros are very convenient, sometimes they are inappropriate. For example, despite the tricks shown in the previous recipes, they don't let you directly specify the types of the mock function arguments and the action parameters, which in general leads to unoptimized compiler error messages that can baffle unfamiliar users. They also don't allow overloading actions based on parameter types without jumping through some hoops.\par
An alternative to the {\f2 ACTION*}  macros is to implement {\f2 {\b testing::ActionInterface}<F>} , where {\f2 F}  is the type of the mock function in which the action will be used. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename F>class ActionInterface \{\par
 public:\par
  virtual ~ActionInterface();\par
\par
  // Performs the action.  Result is the return type of function type\par
  // F, and ArgumentTuple is the tuple of arguments of F.\par
  //\par
  // For example, if F is int(bool, const string&), then Result would\par
  // be int, and ArgumentTuple would be tr1::tuple<bool, const string&>.\par
  virtual Result Perform(const ArgumentTuple& args) = 0;\par
\};\par
\par
using ::testing::_;\par
using ::testing::Action;\par
using ::testing::ActionInterface;\par
using ::testing::MakeAction;\par
\par
typedef int IncrementMethod(int*);\par
\par
class IncrementArgumentAction : public ActionInterface<IncrementMethod> \{\par
 public:\par
  virtual int Perform(const tr1::tuple<int*>& args) \{\par
    int* p = tr1::get<0>(args);  // Grabs the first argument.\par
    return *p++;\par
  \}\par
\};\par
\par
Action<IncrementMethod> IncrementArgument() \{\par
  return MakeAction(new IncrementArgumentAction);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Baz(_))\par
      .WillOnce(IncrementArgument());\par
\par
  int n = 5;\par
  foo.Baz(&n);  // Should return 5 and change n to 6.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Actions} \par}
The previous recipe showed you how to define your own action. This is all good, except that you need to know the type of the function in which the action will be used. Sometimes that can be a problem. For example, if you want to use the action in functions with {\i different}  types (e.g. like {\f2 Return()}  and {\f2 SetArgumentPointee()} ).\par
If an action can be used in several types of mock functions, we say it's {\i polymorphic} . The {\f2 MakePolymorphicAction()}  function template makes it easy to define such an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
template <typename Impl>\par
PolymorphicAction<Impl> MakePolymorphicAction(const Impl& impl);\par
\par
\}  // namespace testing\par
}
\par
As an example, let's define an action that returns the second argument in the mock function's argument list. The first step is to define an implementation class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ReturnSecondArgumentAction \{\par
 public:\par
  template <typename Result, typename ArgumentTuple>\par
  Result Perform(const ArgumentTuple& args) const \{\par
    // To get the i-th (0-based) argument, use tr1::get<i>(args).\par
    return tr1::get<1>(args);\par
  \}\par
\};\par
}
\par
This implementation class does {\i not}  need to inherit from any particular class. What matters is that it must have a {\f2 Perform()}  method template. This method template takes the mock function's arguments as a tuple in a {\b single}  argument, and returns the result of the action. It can be either {\f2 const}  or not, but must be invokable with exactly one template argument, which is the result type. In other words, you must be able to call {\f2 Perform<R>(args)}  where {\f2 R}  is the mock function's return type and {\f2 args}  is its arguments in a tuple.\par
Next, we use {\f2 MakePolymorphicAction()}  to turn an instance of the implementation class into the polymorphic action we need. It will be convenient to have a wrapper for this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicAction;\par
using ::testing::PolymorphicAction;\par
\par
PolymorphicAction<ReturnSecondArgumentAction> ReturnSecondArgument() \{\par
  return MakePolymorphicAction(ReturnSecondArgumentAction());\par
\}\par
}
\par
Now, you can use this polymorphic action the same way you use the built-in ones:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, int(bool flag, int n));\par
  MOCK_METHOD3(DoThat, string(int x, const char* str1, const char* str2));\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(ReturnSecondArgument());\par
  EXPECT_CALL(foo, DoThat(_, _, _))\par
      .WillOnce(ReturnSecondArgument());\par
  ...\par
  foo.DoThis(true, 5);         // Will return 5.\par
  foo.DoThat(1, "Hi", "Bye");  // Will return "Hi".\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Teaching Google {\b Mock} How to Print Your Values} \par}
When an uninteresting or unexpected call occurs, Google {\b Mock} prints the argument values to help you debug. The {\f2 EXPECT_THAT}  and {\f2 ASSERT_THAT}  assertions also print the value being validated when the test fails. Google {\b Mock} does this using the user-extensible value printer defined in {\f2 <gmock/gmock-printers.h>} .\par
This printer knows how to print the built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hope you the user can figure it out.\par
Did I say that the printer is {\f2 extensible} ? That means you can teach it to do a better job at printing your particular type than to dump the bytes. To do that, you just need to define {\f2 <<}  for your type:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Foo \{ ... \};\par
\par
// It's important that the << operator is defined in the SAME\par
// namespace that defines Foo.  C++'s look-up rules rely on that.\par
::std::ostream& operator<<(::std::ostream& os, const Foo& foo) \{\par
  return os << foo.DebugString();  // Whatever needed to print foo to os.\par
\}\par
\par
\}  // namespace foo\par
}
\par
Sometimes, this might not be an option. For example, your team may consider it dangerous or bad style to have a {\f2 <<}  operator for {\f2 Foo} , or {\f2 Foo}  may already have a {\f2 <<}  operator that doesn't do what you want (and you cannot change it). Don't despair though - Google {\b Mock} gives you a second chance to get it right. Namely, you can define a {\f2 PrintTo()}  function like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Foo \{ ... \};\par
\par
// It's important that PrintTo() is defined in the SAME\par
// namespace that defines Foo.  C++'s look-up rules rely on that.\par
void PrintTo(const Foo& foo, ::std::ostream* os) \{\par
  *os << foo.DebugString();  // Whatever needed to print foo to os.\par
\}\par
\par
\}  // namespace foo\par
}
\par
What if you have both {\f2 <<}  and {\f2 PrintTo()} ? In this case, the latter will override the former when Google {\b Mock} is concerned. This allows you to customize how the value should appear in Google {\b Mock}'s output without affecting code that relies on the behavior of its {\f2 <<}  operator.\par
{\b Note:}  When printing a pointer of type {\f2 T*} , Google {\b Mock} calls {\f2 PrintTo(T*, std::ostream* os)}  instead of {\f2 operator<<(std::ostream&, T*)} . Therefore the only way to affect how a pointer is printed by Google {\b Mock} is to define {\f2 PrintTo()}  for it. Also note that {\f2 T*}  and {\f2 const T*}  are different types, so you may need to define {\f2 PrintTo()}  for both.\par
Why does Google {\b Mock} treat pointers specially? There are several reasons:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
We cannot use {\f2 operator<<}  to print a {\f2 signed char*}  or {\f2 unsigned char*} , since it will print the pointer as a NUL-terminated C string, which likely will cause an access violation.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
We want {\f2 NULL}  pointers to be printed as {\f2 "NULL"} , but {\f2 operator<<}  prints it as {\f2 "0"} , {\f2 "nullptr"} , or something else, depending on the compiler.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
With some compilers, printing a {\f2 NULL}  {\f2 char*}  using {\f2 operator<<}  will segfault.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 operator<<}  prints a function pointer as a {\f2 bool}  (hence it always prints {\f2 "1"} ), which is not very useful. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentation{\tc \v Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAEMY}
{\bkmkend AAAAAAAEMY}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all documentation wiki pages for Google {\b Mock} {\b version 1.5.0}  \'96 {\b if you use a different version of Google {\b Mock}, please read the documentation for that specific version instead.} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
ForDummies \'96 start here if you are new to Google {\b Mock}.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CheatSheet \'96 a quick reference.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CookBook \'96 recipes for doing various tasks using Google {\b Mock}.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
FrequentlyAskedQuestions \'96 check here before asking a question on the mailing list.\par}
To contribute code to Google {\b Mock}, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Pump Manual} \'96 how we generate some of Google {\b Mock}'s source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
ForDummies{\tc \v ForDummies}\par \pard\plain 
{\bkmkstart AAAAAAAEMZ}
{\bkmkend AAAAAAAEMZ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
({\b Note:}  If you get compiler errors that you don't understand, be sure to consult Google Mock Doctor.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Is Google C++ Mocking Framework?} \par}
When you write a prototype or test, often it's not feasible or wise to rely on real objects entirely. A {\b mock object}  implements the same interface as a real object (so it can be used as one), but lets you specify at run time how it will be used and what it should do (which methods will be called? in which order? how many times? with what arguments? what will they return? etc).\par
{\b Note:}  It is easy to confuse the term {\i fake objects}  with mock objects. Fakes and mocks actually mean very different things in the Test-Driven Development (TDD) community:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fake}  objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocks}  are objects pre-programmed with {\i expectations} , which form a specification of the calls they are expected to receive.\par}
If all this seems too abstract for you, don't worry - the most important thing to remember is that a mock allows you to check the {\i interaction}  between itself and code that uses it. The difference between fakes and mocks will become much clearer once you start to use mocks.\par
{\b Google C++ Mocking Framework}  (or {\b Google {\b Mock}}  for short) is a library (sometimes we also call it a "framework" to make it sound cool) for creating mock classes and using them. It does to C++ what {\f2 jMock} and {\f2 EasyMock} do to Java.\par
Using Google {\b Mock} involves three basic steps:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use some simple macros to describe the interface you want to mock, and they will expand to the implementation of your mock class;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects and specify its expectations and behavior using an intuitive syntax;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects. Google {\b Mock} will catch any violation of the expectations as soon as it arises.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Why Google {\b Mock}?} \par}
While mock objects help you remove unnecessary dependencies in tests and make them fast and reliable, using mocks manually in C++ is {\i hard} :\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Someone has to implement the mocks. The job is usually tedious and error-prone. No wonder people go great distance to avoid it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The quality of those manually written mocks is a bit, uh, unpredictable. You may see some really polished ones, but you may also see some that were hacked up in a hurry and have all sorts of ad hoc restrictions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The knowledge you gained from using one mock doesn't transfer to the next.\par}
In contrast, Java and Python programmers have some fine mock frameworks, which automate the creation of mocks. As a result, mocking is a proven effective technique and widely adopted practice in those communities. Having the right tool absolutely makes the difference.\par
Google {\b Mock} was built to help C++ programmers. It was inspired by {\f2 jMock} and {\f2 EasyMock}, but designed with C++'s specifics in mind. It is your friend if any of the following problems is bothering you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You are stuck with a sub-optimal design and wish you had done more prototyping before it was too late, but prototyping in C++ is by no means "rapid".\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are slow as they depend on too many libraries or use expensive resources (e.g. a database).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are brittle as some resources they use are unreliable (e.g. the network).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test how your code handles a failure (e.g. a file checksum error), but it's not easy to cause one.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You need to make sure that your module interacts with other modules in the right way, but it's hard to observe the interaction; therefore you resort to observing the side effects at the end of the action, which is awkward at best.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to "mock out" your dependencies, except that they don't have mock implementations yet; and, frankly, you aren't thrilled by some of those hand-written mocks.\par}
We encourage you to use Google {\b Mock} as:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i design}  tool, for it lets you experiment with your interface design early and often. More iterations lead to better designs!\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i testing}  tool to cut your tests' outbound dependencies and probe the interaction between your module and its collaborators.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting Started} \par}
Using Google {\b Mock} is easy! Inside your C++ source file, just {\f2 #include}  {\f2 <{\b gtest/gtest.h}>}  and {\f2 <{\b gmock/gmock.h}>} , and you are ready to go.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 A Case for {\b Mock} Turtles} \par}
Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, {\f2 Turtle} ) and code to that interface:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Turtle \{\par
  ...\par
  virtual ~Turtle() \{\}\par
  virtual void PenUp() = 0;\par
  virtual void PenDown() = 0;\par
  virtual void Forward(int distance) = 0;\par
  virtual void Turn(int degrees) = 0;\par
  virtual void GoTo(int x, int y) = 0;\par
  virtual int GetX() const = 0;\par
  virtual int GetY() const = 0;\par
\};\par
}
\par
(Note that the destructor of {\f2 Turtle}  {\b must}  be virtual, as is the case for {\b all}  classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you'll get corrupted program states like memory leaks.)\par
You can control whether the turtle's movement will leave a trace using {\f2 PenUp()}  and {\f2 PenDown()} , and control its movement using {\f2 Forward()} , {\f2 Turn()} , and {\f2 GoTo()} . Finally, {\f2 GetX()}  and {\f2 GetY()}  tell you the current position of the turtle.\par
Your program will normally use a real implementation of this interface. In tests, you can use a mock implementation instead. This allows you to easily check what drawing primitives your program is calling, with what arguments, and in which order. Tests written this way are much more robust (they won't break because your new machine does anti-aliasing differently), easier to read and maintain (the intent of a test is expressed in the code, not in some binary images), and run {\i much, much faster} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the {\b Mock} Class} \par}
If you are lucky, the mocks you need to use have already been implemented by some nice people. If, however, you find yourself in the position to write a mock class, relax - Google {\b Mock} turns this task into a fun game! (Well, almost.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Define It} \par}
Using the {\f2 Turtle}  interface as example, here are the simple steps you need to follow:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class {\f2 MockTurtle}  from {\f2 Turtle} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Take a virtual function of {\f2 Turtle} . Count how many arguments it has.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the {\f2 public:}  section of the child class, write {\f2 MOCK_METHODn();}  (or {\f2 MOCK_CONST_METHODn();}  if you are mocking a {\f2 const}  method), where {\f2 n}  is the number of the arguments; if you counted wrong, shame on you, and a compiler error will tell you so.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Now comes the fun part: you take the function signature, cut-and-paste the {\i function name}  as the {\i first}  argument to the macro, and leave what's left as the {\i second}  argument (in case you're curious, this is the {\i type of the function} ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat until all virtual functions you want to mock are done.\par}
After the process, you should have something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <gmock/gmock.h>  // Brings in Google Mock.\par
class MockTurtle : public Turtle \{\par
 public:\par
  ...\par
  MOCK_METHOD0(PenUp, void());\par
  MOCK_METHOD0(PenDown, void());\par
  MOCK_METHOD1(Forward, void(int distance));\par
  MOCK_METHOD1(Turn, void(int degrees));\par
  MOCK_METHOD2(GoTo, void(int x, int y));\par
  MOCK_CONST_METHOD0(GetX, int());\par
  MOCK_CONST_METHOD0(GetY, int());\par
\};\par
}
\par
You don't need to define these mock methods somewhere else - the {\f2 MOCK_METHOD*}  macros will generate the definitions for you. It's that simple! Once you get the hang of it, you can pump out mock classes faster than your source-control system can handle your check-ins.\par
{\b Tip:}  If even this is too much work for you, you'll find the {\f2 gmock_gen.py}  tool in Google {\b Mock}'s {\f2 scripts/generator/}  directory (courtesy of the {\f2 cppclean} project) useful. This command-line tool requires that you have Python 2.4 installed. You give it a C++ file and the name of an abstract class defined in it, and it will print the definition of the mock class for you. Due to the complexity of the C++ language, this script may not always work, but it can be quite handy when it does. For more details, read the {\f2 user documentation}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Where to Put It} \par}
When you define a mock class, you need to decide where to put its definition. Some people put it in a {\f2 *_test.cc} . This is fine when the interface being mocked (say, {\f2 Foo} ) is owned by the same person or team. Otherwise, when the owner of {\f2 Foo}  changes it, your test could break. (You can't really expect {\f2 Foo} 's maintainer to fix every test that uses {\f2 Foo} , can you?)\par
So, the rule of thumb is: if you need to mock {\f2 Foo}  and it's owned by others, define the mock class in {\f2 Foo} 's package (better, in a {\f2 testing}  sub-package such that you can clearly separate production code and testing utilities), and put it in a {\f2 mock_foo.h} . Then everyone can reference {\f2 mock_foo.h}  from their tests. If {\f2 Foo}  ever changes, there is only one copy of {\f2 {\b MockFoo}}  to change, and only tests that depend on the changed methods need to be fixed.\par
Another way to do it: you can introduce a thin layer {\f2 FooAdaptor}  on top of {\f2 Foo}  and code to this new interface. Since you own {\f2 FooAdaptor} , you can absorb changes in {\f2 Foo}  much more easily. While this is more work initially, carefully choosing the adaptor interface can make your code easier to write and more readable (a net win in the long run), as you can choose {\f2 FooAdaptor}  to fit your specific domain much better than {\f2 Foo}  does.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
Once you have a mock class, using it is easy. The typical work flow is:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names from the {\f2 testing}  namespace such that you can use them unqualified (You only have to do it once per file. Remember that namespaces are a good idea and good for your health.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Specify your expectations on them (How many times will a method be called? With what arguments? What should it do? etc.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise some code that uses the mocks; optionally, check the result using Google Test assertions. If a mock method is called more than expected or with wrong arguments, you'll get an error immediately.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock is destructed, Google {\b Mock} will automatically check whether all expectations on it have been satisfied.\par}
Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "path/to/mock-turtle.h"\par
#include <gmock/gmock.h>\par
#include <gtest/gtest.h>\par
using ::testing::AtLeast;                     // #1\par
\par
TEST(PainterTest, CanDrawSomething) \{\par
  MockTurtle turtle;                          // #2\par
  EXPECT_CALL(turtle, PenDown())              // #3\par
      .Times(AtLeast(1));\par
\par
  Painter painter(&turtle);                   // #4\par
\par
  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));\par
\}                                             // #5\par
\par
int main(int argc, char** argv) \{\par
  // The following line must be executed to initialize Google Mock\par
  // (and Google Test) before running the tests.\par
  ::testing::InitGoogleMock(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
As you might have guessed, this test checks that {\f2 PenDown()}  is called at least once. If the {\f2 painter}  object didn't call this method, your test will fail with a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/my_test.cc:119: Failure\par
Actual function call count doesn't match this expectation:\par
Actually: never called;\par
Expected: called at least once.\par
}
\par
{\b Tip 1:}  If you run the test from an Emacs buffer, you can hit {\f2 <Enter>}  on the line number displayed in the error message to jump right to the failed expectation.\par
{\b Tip 2:}  If your mock objects are never deleted, the final verification won't happen. Therefore it's a good idea to use a heap leak checker in your tests when you allocate mocks on the heap.\par
{\b Important note:}  Google {\b Mock} requires expectations to be set {\b before}  the mock functions are called, otherwise the behavior is {\b undefined} . In particular, you mustn't interleave {\f2 EXPECT_CALL()} s and calls to the mock functions.\par
This means {\f2 EXPECT_CALL()}  should be read as expecting that a call will occur {\i in the future} , not that a call has occurred. Why does Google {\b Mock} work like that? Well, specifying the expectation beforehand allows Google {\b Mock} to report a violation as soon as it arises, when the context (stack trace, etc) is still available. This makes debugging much easier.\par
Admittedly, this test is contrived and doesn't do much. You can easily achieve the same effect without using Google {\b Mock}. However, as we shall reveal soon, Google {\b Mock} allows you to do {\i much more}  with the mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} with Any Testing Framework} \par}
If you want to use something other than Google Test (e.g. {\f2 CppUnit} or {\f2 CxxTest}) as your testing framework, just change the {\f2 main()}  function in the previous section to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // The following line causes Google Mock to throw an exception on failure,\par
  // which will be interpreted by your testing framework as a test failure.\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  ::testing::InitGoogleMock(&argc, argv);\par
  ... whatever your testing framework requires ...\par
\}\par
}
\par
This approach has a catch: it makes Google {\b Mock} throw an exception from a mock object's destructor sometimes. With some compilers, this sometimes causes the test program to crash. You'll still be able to notice that the test has failed, but it's not a graceful failure.\par
A better solution is to use Google Test's {\f2 event listener API} to report a test failure to your testing framework properly. You'll need to implement the {\f2 OnTestPartResult()}  method of the event listener interface, but it should be straightforward.\par
If this turns out to be too much work, we suggest that you stick with Google Test, which works with Google {\b Mock} seamlessly (in fact, it is technically part of Google {\b Mock}.). If there is a reason that you cannot use Google Test, please let us know.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
The key to using a mock object successfully is to set the {\i right expectations}  on it. If you set the expectations too strict, your test will fail as the result of unrelated changes. If you set them too loose, bugs can slip through. You want to do it just right such that your test can catch exactly the kind of bugs you intend it to catch. Google {\b Mock} provides the necessary means for you to do it "just right."\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 General Syntax} \par}
In Google {\b Mock} we use the {\f2 EXPECT_CALL()}  macro to set an expectation on a mock method. The general syntax is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .Times(cardinality)\par
    .WillOnce(action)\par
    .WillRepeatedly(action);\par
}
\par
The macro has two arguments: first the mock object, and then the method and its arguments. Note that the two are separated by a comma ({\f2 ,} ), not a period ({\f2 .} ). (Why using a comma? The answer is that it was necessary for technical reasons.)\par
The macro can be followed by some optional {\i clauses}  that provide more information about the expectation. We'll discuss how each clause works in the coming sections.\par
This syntax is designed to make an expectation read like English. For example, you can probably guess that\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .Times(5)\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(150))\par
    .WillRepeatedly(Return(200));\par
}
\par
says that the {\f2 turtle}  object's {\f2 GetX()}  method will be called five times, it will return 100 the first time, 150 the second time, and then 200 every time. Some people like to call this style of syntax a Domain-Specific Language (DSL).\par
{\b Note:}  Why do we use a macro to do this? It serves two purposes: first it makes expectations easily identifiable (either by {\f2 grep}  or by a human reader), and second it allows Google {\b Mock} to include the source file location of a failed expectation in messages, making debugging easier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers: What Arguments Do We Expect?} \par}
When a mock function takes arguments, we must specify what arguments we are expecting; for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects the turtle to move forward by 100 units.\par
EXPECT_CALL(turtle, Forward(100));\par
}
\par
Sometimes you may not want to be too specific (Remember that talk about tests being too rigid? Over specification leads to brittle tests and obscures the intent of tests. Therefore we encourage you to specify only what's necessary - no more, no less.). If you care to check that {\f2 Forward()}  will be called but aren't interested in its actual argument, write {\f2 _}  as the argument, which means "anything goes":\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
// Expects the turtle to move forward.\par
EXPECT_CALL(turtle, Forward(_));\par
}
\par
{\f2 _}  is an instance of what we call {\b matchers} . A matcher is like a predicate and can test whether an argument is what we'd expect. You can use a matcher inside {\f2 EXPECT_CALL()}  wherever a function argument is expected.\par
A list of built-in matchers can be found in the CheatSheet. For example, here's the {\f2 Ge}  (greater than or equal) matcher:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;...\par
EXPECT_CALL(turtle, Forward(Ge(100)));\par
}
\par
This checks that the turtle will be told to go forward by at least 100 units.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Cardinalities: How Many Times Will It Be Called?} \par}
The first clause we can specify following an {\f2 EXPECT_CALL()}  is {\f2 Times()} . We call its argument a {\b cardinality}  as it tells {\i how many times}  the call should occur. It allows us to repeat an expectation many times without actually writing it as many times. More importantly, a cardinality can be "fuzzy", just like a matcher can be. This allows a user to express the intent of a test exactly.\par
An interesting special case is when we say {\f2 Times(0)} . You may have guessed - it means that the function shouldn't be called with the given arguments at all, and Google {\b Mock} will report a Google Test failure whenever the function is (wrongfully) called.\par
We've seen {\f2 AtLeast(n)}  as an example of fuzzy cardinalities earlier. For the list of built-in cardinalities you can use, see the CheatSheet.\par
The {\f2 Times()}  clause can be omitted. {\b If you omit {\f2 Times()} , Google {\b Mock} will infer the cardinality for you.}  The rules are easy to remember:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\b neither}  {\f2 WillOnce()}  {\b nor}  {\f2 WillRepeatedly()}  is in the {\f2 EXPECT_CALL()} , the inferred cardinality is {\f2 Times(1)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's but {\b no}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 1, the cardinality is {\f2 Times(n)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's and {\b one}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 0, the cardinality is {\f2 Times(AtLeast(n))} .\par}
{\b Quick quiz:}  what do you think will happen if a function is expected to be called twice but actually called four times?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Actions: What Should It Do?} \par}
Remember that a mock object doesn't really have a working implementation? We as users have to tell it what to do when a method is invoked. This is easy in Google {\b Mock}.\par
First, if the return type of a mock function is a built-in type or a pointer, the function has a {\b default action}  (a {\f2 void}  function will just return, a {\f2 bool}  function will return {\f2 false} , and other functions will return 0). If you don't say anything, this behavior will be used.\par
Second, if a mock function doesn't have a default action, or the default action doesn't suit you, you can specify the action to be taken each time the expectation matches using a series of {\f2 WillOnce()}  clauses followed by an optional {\f2 WillRepeatedly()} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillOnce(Return(300));\par
}
\par
This says that {\f2 turtle.GetX()}  will be called {\i exactly three times}  (Google {\b Mock} inferred this from how many {\f2 WillOnce()}  clauses we've written, since we didn't explicitly write {\f2 Times()} ), and will return 100, 200, and 300 respectively.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillRepeatedly(Return(300));\par
}
\par
says that {\f2 turtle.GetY()}  will be called {\i at least twice}  (Google {\b Mock} knows this as we've written two {\f2 WillOnce()}  clauses and a {\f2 WillRepeatedly()}  while having no explicit {\f2 Times()} ), will return 100 the first time, 200 the second time, and 300 from the third time on.\par
Of course, if you explicitly write a {\f2 Times()} , Google {\b Mock} will not try to infer the cardinality itself. What if the number you specified is larger than there are {\f2 WillOnce()}  clauses? Well, after all {\f2 WillOnce()} s are used up, Google {\b Mock} will do the {\i default}  action for the function every time (unless, of course, you have a {\f2 WillRepeatedly()} .).\par
What can we do inside {\f2 WillOnce()}  besides {\f2 Return()} ? You can return a reference using {\f2 ReturnRef(variable)} , or invoke a pre-defined function, among others.\par
{\b Important note:}  The {\f2 EXPECT_CALL()}  statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int n = 100;\par
EXPECT_CALL(turtle, GetX())\par
.Times(4)\par
.WillOnce(Return(n++));\par
}
\par
Instead of returning 100, 101, 102, ..., consecutively, this mock function will always return 100 as {\f2 n++}  is only evaluated once. Similarly, {\f2 Return(new Foo)}  will create a new {\f2 Foo}  object when the {\f2 EXPECT_CALL()}  is executed, and will return the same pointer every time. If you want the side effect to happen every time, you need to define a custom action, which we'll teach in the CookBook.\par
Time for another quiz! What do you think the following means?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
.Times(4)\par
.WillOnce(Return(100));\par
}
\par
Obviously {\f2 turtle.GetY()}  is expected to be called four times. But if you think it will return 100 every time, think twice! Remember that one {\f2 WillOnce()}  clause will be consumed each time the function is invoked and the default action will be taken afterwards. So the right answer is that {\f2 turtle.GetY()}  will return 100 the first time, but {\b return 0 from the second time on} , as returning 0 is the default action for {\f2 int}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Multiple Expectations} \par}
So far we've only shown examples where you have a single expectation. More realistically, you're going to specify expectations on multiple mock methods, which may be from multiple mock objects.\par
By default, when a mock method is invoked, Google {\b Mock} will search the expectations in the {\b reverse order}  they are defined, and stop when an active expectation that matches the arguments is found (you can think of it as "newer rules override older ones."). If the matching expectation cannot take any more calls, you will get an upper-bound-violated failure. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, Forward(_));  // #1\par
EXPECT_CALL(turtle, Forward(10))  // #2\par
    .Times(2);\par
}
\par
If {\f2 Forward(10)}  is called three times in a row, the third time it will be an error, as the last matching expectation (#2) has been saturated. If, however, the third {\f2 Forward(10)}  call is replaced by {\f2 Forward(20)} , then it would be OK, as now #1 will be the matching expectation.\par
{\b Side note:}  Why does Google {\b Mock} search for a match in the {\i reverse}  order of the expectations? The reason is that this allows a user to set up the default expectations in a mock object's constructor or the test fixture's set-up phase and then customize the mock by writing more specific expectations in the test body. So, if you have two expectations on the same method, you want to put the one with more specific matchers {\b after}  the other, or the more specific rule would be shadowed by the more general one that comes after it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ordered vs Unordered Calls} \par}
By default, an expectation can match a call even though an earlier expectation hasn't been satisfied. In other words, the calls don't have to occur in the order the expectations are specified.\par
Sometimes, you may want all the expected calls to occur in a strict order. To say this in Google {\b Mock} is easy:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;...\par
TEST(FooTest, DrawsLineSegment) \{\par
  ...\par
  \{\par
    InSequence dummy;\par
\par
    EXPECT_CALL(turtle, PenDown());\par
    EXPECT_CALL(turtle, Forward(100));\par
    EXPECT_CALL(turtle, PenUp());\par
  \}\par
  Foo();\par
\}\par
}
\par
By creating an object of type {\f2 InSequence} , all expectations in its scope are put into a {\i sequence}  and have to occur {\i sequentially} . Since we are just relying on the constructor and destructor of this object to do the actual work, its name is really irrelevant.\par
In this example, we test that {\f2 Foo()}  calls the three expected functions in the order as written. If a call is made out-of-order, it will be an error.\par
(What if you care about the relative order of some of the calls, but not all of them? Can you specify an arbitrary partial order? The answer is ... yes! If you are impatient, the details can be found in the CookBook.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 All Expectations Are Sticky (Unless Said Otherwise)} \par}
Now let's do a quick quiz to see how well you can use this mock stuff already. How would you test that the turtle is asked to go to the origin {\i exactly twice}  (you want to ignore any other instructions it receives)?\par
After you've come up with your answer, take a look at ours and compare notes (solve it yourself first - don't cheat!):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, GoTo(_, _))  // #1\par
    .Times(AnyNumber());\par
EXPECT_CALL(turtle, GoTo(0, 0))  // #2\par
    .Times(2);\par
}
\par
Suppose {\f2 turtle.GoTo(0, 0)}  is called three times. In the third time, Google {\b Mock} will see that the arguments match expectation #2 (remember that we always pick the last matching expectation). Now, since we said that there should be only two such calls, Google {\b Mock} will report an error immediately. This is basically what we've told you in the "Using Multiple Expectations" section above.\par
This example shows that {\b expectations in Google {\b Mock} are "sticky" by default} , in the sense that they remain active even after we have reached their invocation upper bounds. This is an important rule to remember, as it affects the meaning of the spec, and is {\b different}  to how it's done in many other mocking frameworks (Why'd we do that? Because we think our rule makes the common cases easier to express and understand.).\par
Simple? Let's see if you've really understood it: what does the following code say?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
      .WillOnce(Return(10*i));\par
\}\par
}
\par
If you think it says that {\f2 turtle.GetX()}  will be called {\f2 n}  times and will return 10, 20, 30, ..., consecutively, think twice! The problem is that, as we said, expectations are sticky. So, the second time {\f2 turtle.GetX()}  is called, the last (latest) {\f2 EXPECT_CALL()}  statement will match, and will immediately lead to an "upper bound exceeded" error - this piece of code is not very useful!\par
One correct way of saying that {\f2 turtle.GetX()}  will return 10, 20, 30, ..., is to explicitly say that the expectations are {\i not}  sticky. In other words, they should {\i retire}  as soon as they are saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(10*i))\par
    .RetiresOnSaturation();\par
\}\par
}
\par
And, there's a better way to do it: in this case, we expect the calls to occur in a specific order, and we line up the actions to match the order. Since the order is important here, we should make it explicit using a sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
...\par
\{\par
  InSequence s;\par
\par
  for (int i = 1; i <= n; i++) \{\par
    EXPECT_CALL(turtle, GetX())\par
        .WillOnce(Return(10*i))\par
        .RetiresOnSaturation();\par
  \}\par
\}\par
}
\par
By the way, the other situation where an expectation may {\i not}  be sticky is when it's in a sequence - as soon as another expectation that comes after it in the sequence has been used, it automatically retires (and will never be used to match any call).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Uninteresting Calls} \par}
A mock object may have many methods, and not all of them are that interesting. For example, in some tests we may not care about how many times {\f2 GetX()}  and {\f2 GetY()}  get called.\par
In Google {\b Mock}, if you are not interested in a method, just don't say anything about it. If a call to this method occurs, you'll see a warning in the test output, but it won't be a failure.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Now?} \par}
Congratulations! You've learned enough about Google {\b Mock} to start using it. Now, you might want to join the {\f2 googlemock} discussion group and actually write some tests using Google {\b Mock} - it will be fun. Hey, it may even be addictive - you've been warned.\par
Then, if you feel like increasing your mock quotient, you should move on to the CookBook. You can learn many advanced features of Google {\b Mock} there \'96 and advance your level of enjoyment and testing bliss. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
FrequentlyAskedQuestions{\tc \v FrequentlyAskedQuestions}\par \pard\plain 
{\bkmkstart AAAAAAAENA}
{\bkmkend AAAAAAAENA}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Please send your questions to the {\f2 googlemock} discussion group. If you need help with compiler errors, make sure you have tried Google Mock Doctor first.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I wrote some matchers. After I upgraded to a new version of Google {\b Mock}, they no longer compile. What's going on?} \par}
After version 1.4.0 of Google {\b Mock} was released, we had an idea on how to make it easier to write matchers that can generate informative messages efficiently. We experimented with this idea and liked what we saw. Therefore we decided to implement it.\par
Unfortunately, this means that if you have defined your own matchers by implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()} , your definitions will no longer compile. Matchers defined using the {\f2 MATCHER*}  family of macros are not affected.\par
Sorry for the hassle if your matchers are affected. We believe it's in everyone's long-term interest to make this change sooner than later. Fortunately, it's usually not hard to migrate an existing matcher to the new API. Here's what you need to do:\par
If you wrote your matcher like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
you'll need to change it to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
 (i.e. rename {\f2 Matches()}  to {\f2 MatchAndExplain()}  and give it a second argument of type {\f2 MatchResultListener*} .)\par
If you were also using {\f2 ExplainMatchResultTo()}  to improve the matcher message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the lastest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
\par
  virtual void ExplainMatchResultTo(MyType value,\par
                                    ::std::ostream* os) const \{\par
    // Prints some helpful information to os to help\par
    // a user understand why value matches (or doesn't match).\par
    *os << "the Foo property is " << value.GetFoo();\par
  \}\par
  ...\par
\};\par
}
\par
you should move the logic of {\f2 ExplainMatchResultTo()}  into {\f2 MatchAndExplain()} , using the {\f2 MatchResultListener}  argument where the {\f2 ::std::ostream}  was used: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Foo property is " << value.GetFoo();\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
If your matcher is defined using {\f2 MakePolymorphicMatcher()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you should rename the {\f2 Matches()}  method to {\f2 MatchAndExplain()}  and add a {\f2 MatchResultListener*}  argument (the same as what you need to do for matchers defined by implementing {\f2 MatcherInterface} ): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
If your polymorphic matcher uses {\f2 ExplainMatchResultTo()}  for better failure messages: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
void ExplainMatchResultTo(const MyGreatMatcher& matcher,\par
                          MyType value,\par
                          ::std::ostream* os) \{\par
  // Prints some helpful information to os to help\par
  // a user understand why value matches (or doesn't match).\par
  *os << "the Bar property is " << value.GetBar();\par
\}\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you'll need to move the logic inside {\f2 ExplainMatchResultTo()}  to {\f2 MatchAndExplain()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Bar property is " << value.GetBar();\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
For more information, you can read these two recipes from the cookbook. As always, you are welcome to post questions on {\f2 googlemock@googlegroups.com}  if you need any help.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When using Google {\b Mock}, do I have to use Google Test as the testing framework? I have my favorite testing framework and don't want to switch.} \par}
Google {\b Mock} works out of the box with Google Test. However, it's easy to configure it to work with any testing framework of your choice. Here is how.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How am I supposed to make sense of these horrible template errors?} \par}
If you are confused by the compiler errors gcc threw at you, try consulting the {\i Google {\b Mock} Doctor}  tool first. What it does is to scan stdin for gcc error messages, and spit out diagnoses on the problems (we call them diseases) your code has.\par
To "install", run command: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid alias gmd='<path to googlemock>/scripts/gmock_doctor.py'\par
}
\par
To use it, do: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <your-favorite-build-command> <your-test> 2>&1 | gmd\par
}
\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make my_test 2>&1 | gmd\par
}
\par
Or you can run {\f2 gmd}  and copy-n-paste gcc's error messages to it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I mock a variadic function?} \par}
You cannot mock a variadic function (i.e. a function taking ellipsis ({\f2 ...} ) arguments) directly in Google {\b Mock}.\par
The problem is that in general, there is {\i no way}  for a mock object to know how many arguments are passed to the variadic method, and what the arguments' types are. Only the {\i author of the base class}  knows the protocol, and we cannot look into his head.\par
Therefore, to mock such a function, the {\i user}  must teach the mock object how to figure out the number of arguments and their types. One way to do it is to provide overloaded versions of the function.\par
Ellipsis arguments are inherited from C and not really a C++ feature. They are unsafe to use and don't work with arguments that have constructors or destructors. Therefore we recommend to avoid them in C++ as much as possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MSVC gives me warning C4301 or C4373 when I define a mock method with a const parameter. Why?} \par}
If you compile this using Microsoft Visual C++ 2005 SP1: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(const int i) = 0;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Bar, void(const int i));\par
\};\par
}
 You may get the following warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4301: 'MockFoo::Bar': overriding virtual function only differs from 'Foo::Bar' by const/volatile qualifier\par
}
\par
This is a MSVC bug. The same code compiles fine with gcc ,for example. If you use Visual C++ 2008 SP1, you would get the warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4373: 'MockFoo::Bar': virtual function overrides 'Foo::Bar', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers\par
}
\par
In C++, if you {\i declare}  a function with a {\f2 const}  parameter, the {\f2 const}  modifier is {\i ignored} . Therefore, the {\f2 Foo}  base class above is equivalent to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(int i) = 0;  // int or const int?  Makes no difference.\par
\};\par
}
\par
In fact, you can {\i declare}  Bar() with an {\f2 int}  parameter, and {\i define}  it with a {\f2 const int}  parameter. The compiler will still match them up.\par
Since making a parameter {\f2 const}  is meaningless in the method {\i declaration} , we recommend to remove it in both {\f2 Foo}  and {\f2 {\b MockFoo}} . That should workaround the VC bug.\par
Note that we are talking about the {\i top-level}  {\f2 const}  modifier here. If the function parameter is passed by pointer or reference, declaring the {\i pointee}  or {\i referee}  as {\f2 const}  is still meaningful. For example, the following two declarations are {\i not}  equivalent: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Bar(int* p);        // Neither p nor *p is const.\par
void Bar(const int* p);  // p is not const, but *p is.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a huge mock class, and Microsoft Visual C++ runs out of memory when compiling it. What can I do?} \par}
We've noticed that when the {\f2 /clr}  compiler flag is used, Visual C++ uses 5~6 times as much memory when compiling a mock class. We suggest to avoid {\f2 /clr}  when compiling native C++ mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I can't figure out why Google {\b Mock} thinks my expectations are not satisfied. What should I do?} \par}
You might want to run your test with {\f2 --gmock_verbose=info} . This flag lets Google {\b Mock} print a trace of every mock function call it receives. By studying the trace, you'll gain insights on why the expectations you set are not met.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I assert that a function is NEVER called?} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .Times(0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a failed test where Google {\b Mock} tells me TWICE that a particular expectation is not satisfied. Isn't this redundant?} \par}
When Google {\b Mock} detects a failure, it prints relevant information (the mock function arguments, the state of relevant expectations, and etc) to help the user debug. If another failure is detected, Google {\b Mock} will do the same, including printing the state of relevant expectations.\par
Sometimes an expectation's state didn't change between two failures, and you'll see the same description of the state twice. They are however {\i not}  redundant, as they refer to {\i different points in time} . The fact they are the same {\i is}  interesting information.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I get a heap check failure when using a mock object, but using a real object is fine. What can be wrong?} \par}
Does the class (hopefully a pure interface) you are mocking have a virtual destructor?\par
Whenever you derive from a base class, make sure its destructor is virtual. Otherwise Bad Things will happen. Consider the following code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Base \{\par
 public:\par
  // Not virtual, but should be.\par
  ~Base() \{ ... \}\par
  ...\par
\};\par
\par
class Derived : public Base \{\par
 public:\par
  ...\par
 private:\par
  std::string value_;\par
\};\par
\par
...\par
  Base* p = new Derived;\par
  ...\par
  delete p;  // Surprise! ~Base() will be called, but ~Derived() will not\par
             // - value_ is leaked.\par
}
\par
By changing {\f2 ~Base()}  to virtual, {\f2 ~Derived()}  will be correctly called when {\f2 delete p}  is executed, and the heap checker will be happy.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The "newer expectations override older ones" rule makes writing expectations awkward. Why does Google {\b Mock} do that?} \par}
When people complain about this, often they are referring to code like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  However, I have to write the expectations in the\par
// reverse order.  This sucks big time!!!\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .RetiresOnSaturation();\par
}
\par
The problem is that they didn't pick the {\b best}  way to express the test's intent.\par
By default, expectations don't have to be matched in {\i any}  particular order. If you want them to match in a certain order, you need to be explicit. This is Google {\b Mock}'s (and jMock's) fundamental philosophy: it's easy to accidentally over-specify your tests, and we want to make it harder to do so.\par
There are two better ways to write the test spec. You could either put the expectations in sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  Using a sequence, we can write the expectations\par
// in their natural order.\par
\{\par
  InSequence s;\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(1))\par
      .RetiresOnSaturation();\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(2))\par
      .RetiresOnSaturation();\par
\}\par
}
\par
or you can put the sequence of actions in the same expectation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
}
\par
Back to the original questions: why does Google {\b Mock} search the expectations (and {\f2 ON_CALL} s) from back to front? Because this allows a user to set up a mock's behavior for the common case early (e.g. in the mock's constructor or the test fixture's set-up phase) and customize it with more specific rules later. If Google {\b Mock} searches from front to back, this very useful pattern won't be possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google {\b Mock} prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL. Would it be reasonable not to show the warning in this case?} \par}
When choosing between being neat and being safe, we lean toward the latter. So the answer is that we think it's better to show the warning.\par
Often people write {\f2 ON_CALL} s in the mock object's constructor or {\f2 SetUp()} , as the default behavior rarely changes from test to test. Then in the test body they set the expectations, which are often different for each test. Having an {\f2 ON_CALL}  in the set-up part of a test doesn't mean that the calls are expected. If there's no {\f2 EXPECT_CALL}  and the method is called, it's possibly an error. If we quietly let the call go through without notifying the user, bugs may creep in unnoticed.\par
If, however, you are sure that the calls are OK, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .WillRepeatedly(...);\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(foo, Bar(_))\par
    .WillByDefault(...);\par
}
\par
This tells Google {\b Mock} that you do expect the calls and no warning should be printed.\par
Also, you can control the verbosity using the {\f2 --gmock_verbose}  flag. If you find the output too noisy when debugging, just choose a less verbose level.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I delete the mock function's argument in an action?} \par}
If you find yourself needing to perform some action that's not supported by Google {\b Mock} directly, remember that you can define your own actions using MakeAction() or MakePolymorphicAction(), or you can write a stub function and invoke it using Invoke().\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MOCK_METHODn()'s second argument looks funny. Why don't you use the MOCK_METHODn(Method, return_type, arg_1, ..., arg_n) syntax?} \par}
What?! I think it's beautiful. :-)\par
While which syntax looks more natural is a subjective matter to some extent, Google {\b Mock}'s syntax was chosen for several practical advantages it has.\par
Try to mock a function that takes a map as an argument: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid virtual int GetSize(const map<int, std::string>& m);\par
}
\par
Using the proposed syntax, it would be: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD1(GetSize, int, const map<int, std::string>& m);\par
}
\par
Guess what? You'll get a compiler error as the compiler thinks that {\f2 const map<int, std::string>& m}  are {\b two} , not one, arguments. To work around this you can use {\f2 typedef}  to give the map type a name, but that gets in the way of your work. Google {\b Mock}'s syntax avoids this problem as the function's argument types are protected inside a pair of parentheses: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // This compiles fine.\par
MOCK_METHOD1(GetSize, int(const map<int, std::string>& m));\par
}
\par
You still need a {\f2 typedef}  if the return type contains an unprotected comma, but that's much rarer.\par
Other advantages include:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 MOCK_METHOD1(Foo, int, bool)}  can leave a reader wonder whether the method returns {\f2 int}  or {\f2 bool} , while there won't be such confusion using Google {\b Mock}'s syntax.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The way Google {\b Mock} describes a function type is nothing new, although many people may not be familiar with it. The same syntax was used in C, and the {\f2 function}  library in {\f2 tr1}  uses this syntax extensively. Since {\f2 tr1}  will become a part of the new version of STL, we feel very comfortable to be consistent with it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The function type syntax is also used in other parts of Google {\b Mock}'s API (e.g. the action interface) in order to make the implementation tractable. A user needs to learn it anyway in order to utilize Google {\b Mock}'s more advanced features. We'd as well stick to the same syntax in {\f2 MOCK_METHOD*} !\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My code calls a static/global function. Can I mock it?} \par}
You can, but you need to make some changes.\par
In general, if you find yourself needing to mock a static function, it's a sign that your modules are too tightly coupled (and less flexible, less reusable, less testable, etc). You are probably better off defining a small interface and call the function through that interface, which then can be easily mocked. It's a bit of work initially, but usually pays for itself quickly.\par
This Google Testing Blog {\f2 post} says it excellently. Check it out.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My mock object needs to do complex stuff. It's a lot of pain to specify the actions. Google {\b Mock} sucks!} \par}
I know it's not a question, but you get an answer for free any way. :-)\par
With Google {\b Mock}, you can create mocks in C++ easily. And people might be tempted to use them everywhere. Sometimes they work great, and sometimes you may find them, well, a pain to use. So, what's wrong in the latter case?\par
When you write a test without using mocks, you exercise the code and assert that it returns the correct value or that the system is in an expected state. This is sometimes called "state-based testing".\par
Mocks are great for what some call "interaction-based" testing: instead of checking the system state at the very end, mock objects verify that they are invoked the right way and report an error as soon as it arises, giving you a handle on the precise context in which the error was triggered. This is often more effective and economical to do than state-based testing.\par
If you are doing state-based testing and using a test double just to simulate the real object, you are probably better off using a fake. Using a mock in this case causes pain, as it's not a strong point for mocks to perform complex actions. If you experience this and think that mocks suck, you are just not using the right tool for your problem. Or, you might be trying to solve the wrong problem. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I got a warning "Uninteresting function call encountered - default action taken.." Should I panic?} \par}
By all means, NO! It's just an FYI.\par
What it means is that you have a mock function, you haven't set any expectations on it (by Google {\b Mock}'s rule this means that you are not interested in calls to this function and therefore it can be called any number of times), and it is called. That's OK - you didn't say it's not OK to call the function!\par
What if you actually meant to disallow this function to be called, but forgot to write {\f2 EXPECT_CALL(foo, Bar()).Times(0)} ? While one can argue that it's the user's fault, Google {\b Mock} tries to be nice and prints you a note.\par
So, when you see the message and believe that there shouldn't be any uninteresting calls, you should investigate what's going on. To make your life easier, Google {\b Mock} prints the function name and arguments when an uninteresting call is encountered.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to define a custom action. Should I use Invoke() or implement the action interface?} \par}
Either way is fine - you want to choose the one that's more convenient for your circumstance.\par
Usually, if your action is for a particular function type, defining it using {\f2 Invoke()}  should be easier; if your action can be used in functions of different types (e.g. if you are defining {\f2 Return(value)} ), {\f2 MakePolymorphicAction()}  is easiest. Sometimes you want precise control on what types of functions the action can be used in, and implementing {\f2 ActionInterface}  is the way to go here. See the implementation of {\f2 Return()}  in {\f2 {\b include/gmock/gmock-actions.h}}  for an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I'm using the set-argument-pointee action, and the compiler complains about "conflicting return type specified". What does it mean?} \par}
You got this error as Google {\b Mock} has no idea what value it should return when the mock method is called. {\f2 SetArgumentPointee()}  says what the side effect is, but doesn't say what the return value should be. You need {\f2 DoAll()}  to chain a {\f2 SetArgumentPointee()}  with a {\f2 Return()} .\par
See this recipe for more details and an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other {\f2 wiki pages},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googlemock@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the revision number if you check out from SVN directly) of Google {\b Mock} you use (Google {\b Mock} is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Defining a Mock Class{\tc \v Defining a Mock Class}\par \pard\plain 
{\bkmkstart AAAAAAAENB}
{\bkmkend AAAAAAAENB}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Normal Class} \par}
Given {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual ~Foo();\par
  virtual int GetSize() const = 0;\par
  virtual string Describe(const char* name) = 0;\par
  virtual string Describe(int type) = 0;\par
  virtual bool Process(Bar elem, int count) = 0;\par
\};\par
}
 (note that {\f2 ~Foo()}  {\b must}  be virtual) we can define its mock as {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"\par
\par
class MockFoo : public Foo \{\par
  MOCK_CONST_METHOD0(GetSize, int());\par
  MOCK_METHOD1(Describe, string(const char* name));\par
  MOCK_METHOD1(Describe, string(int type));\par
  MOCK_METHOD2(Process, bool(Bar elem, int count));\par
\};\par
}
\par
To create a "nice" mock object which ignores all uninteresting calls, or a "strict" mock object, which treats them as failures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid NiceMock<MockFoo> nice_foo;     // The type is a subclass of MockFoo.\par
StrictMock<MockFoo> strict_foo; // The type is a subclass of MockFoo.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Class Template} \par}
To mock {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
 public:\par
  ...\par
  virtual ~StackInterface();\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
}
 (note that {\f2 ~StackInterface()}  {\b must}  be virtual) just append {\f2 _T}  to the {\f2 MOCK_*}  macros: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
 public:\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Specifying Calling Conventions for {\b Mock} Functions} \par}
If your mock function doesn't use the default calling convention, you can specify it by appending {\f2 _WITH_CALLTYPE}  to any of the macros described in the previous two sections and supplying the calling convention as the first argument to the macro. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD_1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int n));\par
MOCK_CONST_METHOD2_WITH_CALLTYPE(STDMETHODCALLTYPE, Bar, int(double x, double y));\par
}
 where {\f2 STDMETHODCALLTYPE}  is defined by {\f2 <objbase.h>}  on Windows.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
The typical flow is:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names you need to use. All Google {\b Mock} names are in the {\f2 testing}  namespace unless they are macros or otherwise noted.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, set the default actions of the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set your expectations on the mock objects (How will they be called? What wil they do?).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects; if necessary, check the result using {\f2 Google Test} assertions.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock objects is destructed, Google {\b Mock} automatically verifies that all expectations on it have been satisfied.\par}
Here is an example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;                            // #1\par
\par
TEST(BarTest, DoesThis) \{\par
  MockFoo foo;                                    // #2\par
\par
  ON_CALL(foo, GetSize())                         // #3\par
      .WillByDefault(Return(1));\par
  // ... other default actions ...\par
\par
  EXPECT_CALL(foo, Describe(5))                   // #4\par
      .Times(3)\par
      .WillRepeatedly(Return("Category 5"));\par
  // ... other expectations ...\par
\par
  EXPECT_EQ("good", MyProductionFunction(&foo));  // #5\par
\}                                                 // #6\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Default Actions} \par}
Google {\b Mock} has a {\b built-in default action}  for any function that returns {\f2 void} , {\f2 bool} , a numeric value, or a pointer.\par
To customize the default action for functions with return type {\f2 T}  globally: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DefaultValue;\par
\par
DefaultValue<T>::Set(value);  // Sets the default value to be returned.\par
// ... use the mocks ...\par
DefaultValue<T>::Clear();     // Resets the default value.\par
}
\par
To customize the default action for a particular method, use {\f2 ON_CALL()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .WillByDefault(action);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\f2 EXPECT_CALL()}  sets {\b expectations}  on a mock method (How will it be called? What will it do?): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .Times(cardinality)            ?\par
    .InSequence(sequences)         *\par
    .After(expectations)           *\par
    .WillOnce(action)              *\par
    .WillRepeatedly(action)        ?\par
    .RetiresOnSaturation();        ?\par
}
\par
If {\f2 Times()}  is omitted, the cardinality is assumed to be:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(1)}  when there is neither {\f2 WillOnce()}  nor {\f2 WillRepeatedly()} ;\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(n)}  when there are {\f2 n WillOnce()} s but no {\f2 WillRepeatedly()} , where {\f2 n}  >= 1; or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(AtLeast(n))}  when there are {\f2 n WillOnce()} s and a {\f2 WillRepeatedly()} , where {\f2 n}  >= 0.\par}
A method with no {\f2 EXPECT_CALL()}  is free to be invoked {\i any number of times} , and the default action will be taken each time.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Matchers} \par}
A {\b matcher}  matches a {\i single}  argument. You can use it inside {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , or use it to validate a value directly:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(value, matcher)}  \cell }{Asserts that {\f2 value}  matches {\f2 matcher} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(value, matcher)}  \cell }{The same as {\f2 EXPECT_THAT(value, matcher)} , except that it generates a {\b fatal}  failure. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Built-in matchers (where {\f2 argument}  is the function argument) are divided into several categories:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Wildcard} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 _} \cell }{{\f2 argument}  can be any value of the correct type.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A<type>()}  or {\f2 An<type>()} \cell }{{\f2 argument}  can be any value of type {\f2 type} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generic Comparison} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq(value)}  or {\f2 value} \cell }{{\f2 argument == value}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge(value)}  \cell }{{\f2 argument >= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt(value)}  \cell }{{\f2 argument > value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le(value)}  \cell }{{\f2 argument <= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt(value)}  \cell }{{\f2 argument < value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne(value)}  \cell }{{\f2 argument != value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsNull()}  \cell }{{\f2 argument}  is a {\f2 NULL}  pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NotNull()}  \cell }{{\f2 argument}  is a non-null pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ref(variable)}  \cell }{{\f2 argument}  is a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 TypedEq<type>(value)} \cell }{{\f2 argument}  has type {\f2 type}  and is equal to {\f2 value} . You may need to use this instead of {\f2 Eq(value)}  when the mock function is overloaded. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Except {\f2 Ref()} , these matchers make a {\i copy}  of {\f2 value}  in case it's modified or destructed later. If the compiler complains that {\f2 value}  doesn't have a public copy constructor, try wrap it in {\f2 ByRef()} , e.g. {\f2 Eq(ByRef(non_copyable_value))} . If you do that, make sure {\f2 non_copyable_value}  is not changed afterwards, or the meaning of your matcher will be changed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as unequal.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatEq(a_float)}  \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as unequal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatEq(a_float)} \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
These matchers use ULP-based comparison (the same as used in {\f2 Google Test}). They automatically pick a reasonable error bound based on the absolute value of the expected value. {\f2 DoubleEq()}  and {\f2 FloatEq()}  conform to the IEEE standard, which requires comparing two NaNs for equality to return false. The {\f2 NanSensitive*}  version instead treats two NaNs as equal, which is often what a user wants.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Matchers} \par}
The {\f2 argument}  can be either a C string or a C++ string object:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainsRegex(string)} \cell }{{\f2 argument}  matches the given regular expression.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EndsWith(suffix)}  \cell }{{\f2 argument}  ends with string {\f2 suffix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 HasSubstr(string)}  \cell }{{\f2 argument}  contains {\f2 string}  as a sub-string. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatchesRegex(string)}  \cell }{{\f2 argument}  matches the given regular expression with the match starting at the first character and ending at the last character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StartsWith(prefix)}  \cell }{{\f2 argument}  starts with string {\f2 prefix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\f2 ContainsRegex()}  and {\f2 MatchesRegex()}  use the regular expression syntax defined {\f2 here}. {\f2 StrCaseEq()} , {\f2 StrCaseNe()} , {\f2 StrEq()} , and {\f2 StrNe()}  work for wide strings as well.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Container Matchers} \par}
Most STL-style containers support {\f2 ==} , so you can use {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly. If you want to write the elements in-line, match them more flexibly, or get more informative messages, you can use:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Contains(e)}  \cell }{{\f2 argument}  contains an element that matches {\f2 e} , which can be either a value or a matcher.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Each(e)}  \cell }{{\f2 argument}  is a container where {\i every}  element matches {\f2 e} , which can be either a value or a matcher. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAre(e0, e1, ..., en)}  \cell }{{\f2 argument}  has {\f2 n + 1}  elements, where the i-th element matches {\f2 ei} , which can be a value or a matcher. 0 to 10 arguments are allowed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAreArray(array)}  or {\f2 ElementsAreArray(array, count)}  \cell }{The same as {\f2 ElementsAre()}  except that the expected element values/matchers come from a C-style array. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainerEq(container)}  \cell }{The same as {\f2 Eq(container)}  except that the failure message also includes which elements are in one container but not the other. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pointwise(m, container)}  \cell }{{\f2 argument}  contains the same number of elements as in {\f2 container} , and for all i, (the i-th element in {\f2 argument} , the i-th element in {\f2 container} ) match {\f2 m} , which is a matcher on 2-tuples. E.g. {\f2 Pointwise(Le(), upper_bounds)}  verifies that each element in {\f2 argument}  doesn't exceed the corresponding element in {\f2 upper_bounds} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
These matchers can also match:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab a native array passed by reference (e.g. in {\f2 Foo(const int (&a)[5])} ), and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab an array passed as a pointer and a count (e.g. in {\f2 Bar(const T* buffer, int len)}  \'96 see Multi-argument Matchers).\par}
where the array may be multi-dimensional (i.e. its elements can be arrays).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Member Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Field(&class::field, m)} \cell }{{\f2 argument.field}  (or {\f2 argument->field}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Key(e)}  \cell }{{\f2 argument.first}  matches {\f2 e} , which can be either a value or a matcher. E.g. {\f2 Contains(Key(Le(5)))}  can verify that a {\f2 map}  contains a key {\f2 <= 5} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pair(m1, m2)}  \cell }{{\f2 argument}  is an {\f2 std::pair}  whose {\f2 first}  field matches {\f2 m1}  and {\f2 second}  field matches {\f2 m2} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Property(&class::property, m)} \cell }{{\f2 argument.property()}  (or {\f2 argument->property()}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching the Result of a Function or Functor} \par}
|{\f2 ResultOf(f, m)} |{\f2 f(argument)}  matches matcher {\f2 m} , where {\f2 f}  is a function or functor.| |:------------\'97|:------------------------------------------------------------------\'97|\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Pointer Matchers} \par}
|{\f2 Pointee(m)} |{\f2 argument}  (either a smart pointer or a raw pointer) points to a value that matches matcher {\f2 m} .| |:--------\'97|:--------------------------------------------------------------------------------------------\'97|\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Multiargument Matchers} \par}
Technically, all matchers match a {\i single}  value. A "multi-argument" matcher is just one that matches a {\i tuple} . The following matchers can be used to match a tuple {\f2 (x, y)} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq()} \cell }{{\f2 x == y}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge()} \cell }{{\f2 x >= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt()} \cell }{{\f2 x > y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le()} \cell }{{\f2 x <= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt()} \cell }{{\f2 x < y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne()} \cell }{{\f2 x != y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
You can use the following selectors to pick a subset of the arguments (or reorder them) to participate in the matching:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllArgs(m)} \cell }{Equivalent to {\f2 m} . Useful as syntactic sugar in {\f2 .With(AllArgs(m))} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Args<N1, N2, ..., Nk>(m)} \cell }{The tuple of the {\f2 k}  selected (using 0-based indices) arguments matches {\f2 m} , e.g. {\f2 Args<1, 2>(Eq())} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Matchers} \par}
You can make a matcher from one or more other matchers:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches all of the matchers {\f2 m1}  to {\f2 mn} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches at least one of the matchers {\f2 m1}  to {\f2 mn} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Not(m)}  \cell }{{\f2 argument}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adapters for Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatcherCast<T>(m)} \cell }{casts matcher {\f2 m}  to type {\f2 Matcher<T>} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SafeMatcherCast<T>(m)} \cell }{{\f2 safely casts} matcher {\f2 m}  to type {\f2 Matcher<T>} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Truly(predicate)}  \cell }{{\f2 predicate(argument)}  returns something considered by C++ to be true, where {\f2 predicate}  is a function or functor. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Predicates} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Matches(m)(value)} \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} . You can use {\f2 Matches(m)}  alone as a unary functor.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ExplainMatchResult(m, value, result_listener)} \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} , explaining the result to {\f2 result_listener} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Value(value, m)}  \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER(IsEven, "") \{ return (arg % 2) == 0; \}}  \cell }{Defines a matcher {\f2 IsEven()}  to match an even number.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P(IsDivisibleBy, n, "") \{ *result_listener << "where the remainder is " << (arg % n); return (arg % n) == 0; \}}  \cell }{Defines a macher {\f2 IsDivisibleBy(n)}  to match a number divisible by {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P2(IsBetween, a, b, std::string(negation ? "isn't" : "is") + " between " + PrintToString(a) + " and " + PrintToString(b)) \{ return a <= arg && arg <= b; \}}  \cell }{Defines a matcher {\f2 IsBetween(a, b)}  to match a value in the range [{\f2 a} , {\f2 b} ]. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 MATCHER*}  macros cannot be used inside a function or class.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The matcher body must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 PrintToString(x)}  to convert a value {\f2 x}  of any type to a string.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Test Assertions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(expression, m)} \cell }{Generates a {\f2 fatal failure} if the value of {\f2 expression}  doesn't match matcher {\f2 m} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(expression, m)} \cell }{Generates a non-fatal failure if the value of {\f2 expression}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Actions} \par}
{\b Actions}  specify what a mock function should do when invoked.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning a Value} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return()} \cell }{Return from a {\f2 void}  mock function.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return(value)} \cell }{Return {\f2 value} . If the type of {\f2 value}  is different to the mock function's return type, {\f2 value}  is converted to the latter type {\i at the time the expectation is set} , not when the action is executed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnArg<N>()} \cell }{Return the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNew<T>(a1, ..., ak)} \cell }{Return {\f2 new T(a1, ..., ak)} ; a different object is created each time. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNull()} \cell }{Return a null pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnPointee(ptr)} \cell }{Return the value pointed to by {\f2 ptr} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRef(variable)} \cell }{Return a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRefOfCopy(value)} \cell }{Return a reference to a copy of {\f2 value} ; the copy lives as long as the action. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Side Effects} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Assign(&variable, value)} \cell }{Assign {\f2 value}  to variable.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DeleteArg<N>()}  \cell }{Delete the {\f2 N} -th (0-based) argument, which must be a pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArg<N>(pointer)}  \cell }{Save the {\f2 N} -th (0-based) argument to {\f2 *pointer} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArgPointee<N>(pointer)}  \cell }{Save the value pointed to by the {\f2 N} -th (0-based) argument to {\f2 *pointer} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgReferee<N>(value)}  \cell }{Assign value to the variable referenced by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgPointee<N>(value)}  \cell }{Assign {\f2 value}  to the variable pointed by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgumentPointee<N>(value)} \cell }{Same as {\f2 SetArgPointee<N>(value)} . Deprecated. Will be removed in v1.7.0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArrayArgument<N>(first, last)} \cell }{Copies the elements in source range [{\f2 first} , {\f2 last} ) to the array pointed to by the {\f2 N} -th (0-based) argument, which can be either a pointer or an iterator. The action does not take ownership of the elements in the source range. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetErrnoAndReturn(error, value)} \cell }{Set {\f2 errno}  to {\f2 error}  and return {\f2 value} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Throw(exception)}  \cell }{Throws the given exception, which can be any copyable value. Available since v1.1.0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function or a Functor as an Action} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(f)} \cell }{Invoke {\f2 f}  with the arguments passed to the mock function, where {\f2 f}  can be a global/static function or a functor.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(object_pointer, &class::method)} \cell }{Invoke the \{method on the object with the arguments passed to the mock function. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(f)} \cell }{Invoke {\f2 f} , which can be a global/static function or a functor. {\f2 f}  must take no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(object_pointer, &class::method)} \cell }{Invoke the method on the object, which takes no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeArgument<N>(arg1, arg2, ..., argk)} \cell }{Invoke the mock function's {\f2 N} -th (0-based) argument, which must be a function or a functor, with the {\f2 k}  arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The return value of the invoked function is used as the return value of the action.\par
When defining a function or functor to be used with {\f2 Invoke*()} , you can declare any unused parameters as {\f2 Unused} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid double Distance(Unused, double x, double y) \{ return sqrt(x*x + y*y); \}\par
...\par
EXPECT_CALL(mock, Foo("Hi", _, _)).WillOnce(Invoke(Distance));\par
}
\par
In {\f2 InvokeArgument<N>(...)} , if an argument needs to be passed by reference, wrap it inside {\f2 ByRef()} . For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<2>(5, string("Hi"), ByRef(foo))\par
}
 calls the mock function's #2 argument, passing to it {\f2 5}  and {\f2 string("Hi")}  by value, and {\f2 foo}  by reference.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Default Action} \par}
|{\f2 DoDefault()} |Do the default action (specified by {\f2 ON_CALL()}  or the built-in one).| |:---------\'97|:-----------------------------------------------------------------\'97|\par
{\b Note:}  due to technical reasons, {\f2 DoDefault()}  cannot be used inside a composite action - trying to do so will result in a run-time error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoAll(a1, a2, ..., an)} \cell }{Do all actions {\f2 a1}  to {\f2 an}  and return the result of {\f2 an}  in each invocation. The first {\f2 n - 1}  sub-actions must return void.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IgnoreResult(a)}  \cell }{Perform action {\f2 a}  and ignore its result. {\f2 a}  must not return void. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArg<N>(a)}  \cell }{Pass the {\f2 N} -th (0-based) argument of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArgs<N1, N2, ..., Nk>(a)} \cell }{Pass the selected (0-based) arguments of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithoutArgs(a)}  \cell }{Perform action {\f2 a}  without any arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Sum) \{ return arg0 + arg1; \}}  \cell }{Defines an action {\f2 Sum()}  to return the sum of the mock function's argument #0 and #1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Plus, n) \{ return arg0 + n; \}}  \cell }{Defines an action {\f2 Plus(n)}  to return the sum of the mock function's argument #0 and {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_Pk(Foo, p1, ..., pk) \{ statements; \}}  \cell }{Defines a parameterized action {\f2 Foo(p1, ..., pk)}  to execute the given {\f2 statements} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The {\f2 ACTION*}  macros cannot be used inside a function or class.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Cardinalities} \par}
These are used in {\f2 Times()}  to specify how many times a mock function will be called:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyNumber()} \cell }{The function can be called any number of times.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtLeast(n)}  \cell }{The call is expected at least {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtMost(n)}  \cell }{The call is expected at most {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Between(m, n)} \cell }{The call is expected between {\f2 m}  and {\f2 n}  (inclusive) times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Exactly(n) or n} \cell }{The call is expected exactly {\f2 n}  times. In particular, the call should never happen when {\f2 n}  is 0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Expectation Order} \par}
By default, the expectations can be matched in {\i any}  order. If some or all expectations must be matched in a given order, there are two ways to specify it. They can be used either independently or together.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The After Clause} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Expectation;\par
...\par
Expectation init_x = EXPECT_CALL(foo, InitX());\par
Expectation init_y = EXPECT_CALL(foo, InitY());\par
EXPECT_CALL(foo, Bar())\par
    .After(init_x, init_y);\par
}
 says that {\f2 Bar()}  can be called only after both {\f2 InitX()}  and {\f2 InitY()}  have been called.\par
If you don't know how many pre-requisites an expectation has when you write it, you can use an {\f2 ExpectationSet}  to collect them:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ExpectationSet;\par
...\par
ExpectationSet all_inits;\par
for (int i = 0; i < element_count; i++) \{\par
  all_inits += EXPECT_CALL(foo, InitElement(i));\par
\}\par
EXPECT_CALL(foo, Bar())\par
    .After(all_inits);\par
}
 says that {\f2 Bar()}  can be called only after all elements have been initialized (but we don't care about which elements get initialized before the others).\par
Modifying an {\f2 ExpectationSet}  after using it in an {\f2 .After()}  doesn't affect the meaning of the {\f2 .After()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sequences} \par}
When you have a long chain of sequential expectations, it's easier to specify the order using {\b sequences} , which don't require you to given each expectation in the chain a different name. {\i All expected\par
 calls}  in the same sequence must occur in the order they are specified.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
Sequence s1, s2;\par
...\par
EXPECT_CALL(foo, Reset())\par
    .InSequence(s1, s2)\par
    .WillOnce(Return(true));\par
EXPECT_CALL(foo, GetSize())\par
    .InSequence(s1)\par
    .WillOnce(Return(1));\par
EXPECT_CALL(foo, Describe(A<const char*>()))\par
    .InSequence(s2)\par
    .WillOnce(Return("dummy"));\par
}
 says that {\f2 Reset()}  must be called before {\i both}  {\f2 GetSize()}  {\i and}  {\f2 Describe()} , and the latter two can occur in any order.\par
To put many expectations in a sequence conveniently: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
\{\par
  InSequence dummy;\par
\par
  EXPECT_CALL(...)...;\par
  EXPECT_CALL(...)...;\par
  ...\par
  EXPECT_CALL(...)...;\par
\}\par
}
 says that all expected calls in the scope of {\f2 dummy}  must occur in strict order. The name {\f2 dummy}  is irrelevant.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Verifying and Resetting a {\b Mock}} \par}
Google {\b Mock} will verify the expectations on a mock object when it is destructed, or you can do it earlier: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Mock;\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// returns true iff successful.\par
Mock::VerifyAndClearExpectations(&mock_obj);\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// also removes the default actions set by ON_CALL();\par
// returns true iff successful.\par
Mock::VerifyAndClear(&mock_obj);\par
}
\par
You can also tell Google {\b Mock} that a mock object can be leaked and doesn't need to be verified: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Mock::AllowLeak(&mock_obj);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 {\b Mock} Classes} \par}
Google {\b Mock} defines a convenient mock class template {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFunction<R(A1, ..., An)> \{\par
 public:\par
  MOCK_METHODn(Call, R(A1, ..., An));\par
\};\par
}
 See this {\f2 recipe} for one application of it.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Flags} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_catch_leaked_mocks=0}  \cell }{Don't report leaked mock objects as failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_verbose=LEVEL}  \cell }{Sets the default verbosity level ({\f2 info} , {\f2 warning} , or {\f2 error} ) of Google {\b Mock} messages. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
CookBook{\tc \v CookBook}\par \pard\plain 
{\bkmkstart AAAAAAAENC}
{\bkmkend AAAAAAAENC}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You can find recipes for using Google {\b Mock} here. If you haven't yet, please read the ForDummies document first to make sure you understand the basics.\par
{\b Note:}  Google {\b Mock} lives in the {\f2 testing}  name space. For readability, it is recommended to write {\f2 using ::testing::Foo;}  once in your file before using the name {\f2 Foo}  defined by Google {\b Mock}. We omit such {\f2 using}  statements in this page for brevity, but you should do it in your own code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Creating {\b Mock} Classes} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Private or Protected Methods} \par}
You must always put a mock method definition ({\f2 MOCK_METHOD*} ) in a {\f2 public:}  section of the mock class, regardless of the method being mocked being {\f2 public} , {\f2 protected} , or {\f2 private}  in the base class. This allows {\f2 ON_CALL}  and {\f2 EXPECT_CALL}  to reference the mock function from outside of the mock class. (Yes, C++ allows a subclass to change the access level of a virtual function in the base class.) Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  ...\par
  virtual bool Transform(Gadget* g) = 0;\par
\par
 protected:\par
  virtual void Resume();\par
\par
 private:\par
  virtual int GetTimeOut();\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  ...\par
  MOCK_METHOD1(Transform, bool(Gadget* g));\par
\par
  // The following must be in the public section, even though the\par
  // methods are protected or private in the base class.\par
  MOCK_METHOD0(Resume, void());\par
  MOCK_METHOD0(GetTimeOut, int());\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Overloaded Methods} \par}
You can mock overloaded functions as usual. No special attention is required:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
\par
  // Must be virtual as we'll inherit from Foo.\par
  virtual ~Foo();\par
\par
  // Overloaded on the types and/or numbers of arguments.\par
  virtual int Add(Element x);\par
  virtual int Add(int times, Element x);\par
\par
  // Overloaded on the const-ness of this object.\par
  virtual Bar& GetBar();\par
  virtual const Bar& GetBar() const;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Add, int(Element x));\par
  MOCK_METHOD2(Add, int(int times, Element x);\par
\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
}
\par
{\b Note:}  if you don't mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use {\f2 using}  to bring them in scope:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  using Foo::Add;\par
  MOCK_METHOD1(Add, int(Element x));\par
  // We don't want to mock int Add(int times, Element x);\par
  ...\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Class Templates} \par}
To mock a class template, append {\f2 _T}  to the {\f2 MOCK_*}  macros:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
  ...\par
  // Must be virtual as we'll inherit from StackInterface.\par
  virtual ~StackInterface();\par
\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
\par
template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Nonvirtual Methods} \par}
Google {\b Mock} can mock non-virtual functions to be used in what we call {\i hi-perf dependency injection} .\par
In this case, instead of sharing a common base class with the real class, your mock class will be {\i unrelated}  to the real class, but contain methods with the same signatures. The syntax for mocking non-virtual methods is the {\i same}  as mocking virtual methods:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A simple packet stream class.  None of its members is virtual.\par
class ConcretePacketStream \{\par
 public:\par
  void AppendPacket(Packet* new_packet);\par
  const Packet* GetPacket(size_t packet_number) const;\par
  size_t NumberOfPackets() const;\par
  ...\par
\};\par
\par
// A mock packet stream class.  It inherits from no other, but defines\par
// GetPacket() and NumberOfPackets().\par
class MockPacketStream \{\par
 public:\par
  MOCK_CONST_METHOD1(GetPacket, const Packet*(size_t packet_number));\par
  MOCK_CONST_METHOD0(NumberOfPackets, size_t());\par
  ...\par
\};\par
}
\par
Note that the mock class doesn't define {\f2 AppendPacket()} , unlike the real class. That's fine as long as the test doesn't need to call it.\par
Next, you need a way to say that you want to use {\f2 ConcretePacketStream}  in production code, and use {\f2 MockPacketStream}  in tests. Since the functions are not virtual and the two classes are unrelated, you must specify your choice at {\i compile time}  (as opposed to run time).\par
One way to do it is to templatize your code that needs to use a packet stream. More specifically, you will give your code a template type argument for the type of the packet stream. In production, you will instantiate your template with {\f2 ConcretePacketStream}  as the type argument. In tests, you will instantiate the same template with {\f2 MockPacketStream} . For example, you may write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <class PacketStream>\par
void CreateConnection(PacketStream* stream) \{ ... \}\par
\par
template <class PacketStream>\par
class PacketReader \{\par
 public:\par
  void ReadPackets(PacketStream* stream, size_t packet_num);\par
\};\par
}
\par
Then you can use {\f2 CreateConnection<ConcretePacketStream>()}  and {\f2 PacketReader<ConcretePacketStream>}  in production code, and use {\f2 CreateConnection<MockPacketStream>()}  and {\f2 PacketReader<MockPacketStream>}  in tests.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockPacketStream mock_stream;\par
EXPECT_CALL(mock_stream, ...)...;\par
.. set more expectations on mock_stream ...\par
PacketReader<MockPacketStream> reader(&mock_stream);\par
... exercise reader ...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Free Functions} \par}
It's possible to use Google {\b Mock} to mock a free function (i.e. a C-style function or a static method). You just need to rewrite your code to use an interface (abstract class).\par
Instead of calling a free function (say, {\f2 OpenFile} ) directly, introduce an interface for it and have a concrete subclass that calls the free function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) = 0;\par
\};\par
\par
class File : public FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) \{\par
    return OpenFile(path, mode);\par
  \}\par
\};\par
}
\par
Your code should talk to {\f2 FileInterface}  to open a file. Now it's easy to mock out the function.\par
This may seem much hassle, but in practice you often have multiple related functions that you can put in the same interface, so the per-function syntactic overhead will be much lower.\par
If you are concerned about the performance overhead incurred by virtual functions, and profiling confirms your concern, you can combine this with the recipe for mocking non-virtual methods.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Nice Mocks and Strict Mocks} \par}
If a mock method has no {\f2 EXPECT_CALL}  spec but is called, Google {\b Mock} will print a warning about the "uninteresting call". The rationale is:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
New methods may be added to an interface after a test is written. We shouldn't fail a test just because a method it doesn't know about is called.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
However, this may also mean there's a bug in the test, so Google {\b Mock} shouldn't be silent either. If the user believes these calls are harmless, he can add an {\f2 EXPECT_CALL()}  to suppress the warning.\par}
However, sometimes you may want to suppress all "uninteresting call" warnings, while sometimes you may want the opposite, i.e. to treat all of them as errors. Google {\b Mock} lets you make the decision on a per-mock-object basis.\par
Suppose your test uses a mock class {\f2 {\b MockFoo}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(...) \{\par
  MockFoo mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
If a method of {\f2 mock_foo}  other than {\f2 DoThis()}  is called, it will be reported by Google {\b Mock} as a warning. However, if you rewrite your test to use {\f2 NiceMock<{\b MockFoo}>}  instead, the warning will be gone, resulting in a cleaner test output:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
{\f2 NiceMock<{\b MockFoo}>}  is a subclass of {\f2 {\b MockFoo}} , so it can be used wherever {\f2 {\b MockFoo}}  is accepted.\par
It also works if {\f2 {\b MockFoo}} 's constructor takes some arguments, as {\f2 NiceMock<{\b MockFoo}>}  "inherits" {\f2 {\b MockFoo}} 's constructors:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo(5, "hi");  // Calls MockFoo(5, "hi").\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
The usage of {\f2 StrictMock}  is similar, except that it makes all uninteresting calls failures:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::StrictMock;\par
\par
TEST(...) \{\par
  StrictMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\par
  // The test will fail if a method of mock_foo other than DoThis()\par
  // is called.\par
\}\par
}
\par
There are some caveats though (I don't like them just as much as the next guy, but sadly they are side effects of C++'s limitations):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 NiceMock<{\b MockFoo}>}  and {\f2 StrictMock<{\b MockFoo}>}  only work for mock methods defined using the {\f2 MOCK_METHOD*}  family of macros {\b directly}  in the {\f2 {\b MockFoo}}  class. If a mock method is defined in a {\b base class}  of {\f2 {\b MockFoo}} , the "nice" or "strict" modifier may not affect it, depending on the compiler. In particular, nesting {\f2 NiceMock}  and {\f2 StrictMock}  (e.g. {\f2 NiceMock<StrictMock<{\b MockFoo}> >} ) is {\b not}  supported.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The constructors of the base mock ({\f2 {\b MockFoo}} ) cannot have arguments passed by non-const reference, which happens to be banned by the {\f2 Google C++ style guide}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab During the constructor or destructor of {\f2 {\b MockFoo}} , the mock object is {\i not}  nice or strict. This may cause surprises if the constructor or destructor calls a mock method on {\f2 this}  object. (This behavior, however, is consistent with C++'s general rule: if a constructor or destructor calls a virtual method of {\f2 this}  object, that method is treated as non-virtual. In other words, to the base class's constructor or destructor, {\f2 this}  object behaves like an instance of the base class, not the derived class. This rule is required for safety. Otherwise a base constructor may use members of a derived class before they are initialized, or a base destructor may use members of a derived class after they have been destroyed.)\par}
Finally, you should be {\b very cautious}  when using this feature, as the decision you make applies to {\b all}  future changes to the mock class. If an important change is made in the interface you are mocking (and thus in the mock class), it could break your tests (if you use {\f2 StrictMock} ) or let bugs pass through without a warning (if you use {\f2 NiceMock} ). Therefore, try to specify the mock's behavior using explicit {\f2 EXPECT_CALL}  first, and only turn to {\f2 NiceMock}  or {\f2 StrictMock}  as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Simplifying the {\b Interface} without Breaking Existing Code} \par}
Sometimes a method has a long list of arguments that is mostly uninteresting. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line,\par
                    const struct tm* tm_time,\par
                    const char* message, size_t message_len) = 0;\par
\};\par
}
\par
This method's argument list is lengthy and hard to work with (let's say that the {\f2 message}  argument is not even 0-terminated). If we mock it as is, using the mock will be awkward. If, however, we try to simplify this interface, we'll need to fix all clients depending on it, which is often infeasible.\par
The trick is to re-dispatch the method in the mock class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ScopedMockLog : public LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line, const tm* tm_time,\par
                    const char* message, size_t message_len) \{\par
    // We are only interested in the log severity, full file name, and\par
    // log message.\par
    Log(severity, full_filename, std::string(message, message_len));\par
  \}\par
\par
  // Implements the mock method:\par
  //\par
  //   void Log(LogSeverity severity,\par
  //            const string& file_path,\par
  //            const string& message);\par
  MOCK_METHOD3(Log, void(LogSeverity severity, const string& file_path,\par
                         const string& message));\par
\};\par
}
\par
By defining a new mock method with a trimmed argument list, we make the mock class much more user-friendly.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Alternative to Mocking Concrete Classes} \par}
Often you may find yourself using classes that don't implement interfaces. In order to test your code that uses such a class (let's call it {\f2 Concrete} ), you may be tempted to make the methods of {\f2 Concrete}  virtual and then mock it.\par
Try not to do that.\par
Making a non-virtual function virtual is a big decision. It creates an extension point where subclasses can tweak your class' behavior. This weakens your control on the class because now it's harder to maintain the class' invariants. You should make a function virtual only when there is a valid reason for a subclass to override it.\par
Mocking concrete classes directly is problematic as it creates a tight coupling between the class and the tests - any small change in the class may invalidate your tests and make test maintenance a pain.\par
To avoid such problems, many programmers have been practicing "coding
to interfaces": instead of talking to the {\f2 Concrete}  class, your code would define an interface and talk to it. Then you implement that interface as an adaptor on top of {\f2 Concrete} . In tests, you can easily mock that interface to observe how your code is doing.\par
This technique incurs some overhead:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You pay the cost of virtual function calls (usually not a problem).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There is more abstraction for the programmers to learn.\par}
However, it can also bring significant benefits in addition to better testability:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Concrete} 's API may not fit your problem domain very well, as you may not be the only client it tries to serve. By designing your own interface, you have a chance to tailor it to your need - you may add higher-level functionalities, rename stuff, etc instead of just trimming the class. This allows you to write your code (user of the interface) in a more natural way, which means it will be more readable, more maintainable, and you'll be more productive.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Concrete} 's implementation ever has to change, you don't have to rewrite everywhere it is used. Instead, you can absorb the change in your implementation of the interface, and your other code and tests will be insulated from this change.\par}
Some people worry that if everyone is practicing this technique, they will end up writing lots of redundant code. This concern is totally understandable. However, there are two reasons why it may not be the case:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Different projects may need to use {\f2 Concrete}  in different ways, so the best interfaces for them will be different. Therefore, each of them will have its own domain-specific interface on top of {\f2 Concrete} , and they will not be the same code.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If enough projects want to use the same interface, they can always share it, just like they have been sharing {\f2 Concrete} . You can check in the interface and the adaptor somewhere near {\f2 Concrete}  (perhaps in a {\f2 contrib}  sub-directory) and let many projects use it.\par}
You need to weigh the pros and cons carefully for your particular problem, but I'd like to assure you that the Java community has been practicing this for a long time and it's a proven effective technique applicable in a wide variety of situations. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Fake} \par}
Some times you have a non-trivial fake implementation of an interface. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo() \{\}\par
  virtual char DoThis(int n) = 0;\par
  virtual void DoThat(const char* s, int* p) = 0;\par
\};\par
\par
class FakeFoo : public Foo \{\par
 public:\par
  virtual char DoThis(int n) \{\par
    return (n > 0) ? '+' :\par
        (n < 0) ? '-' : '0';\par
  \}\par
\par
  virtual void DoThat(const char* s, int* p) \{\par
    *p = strlen(s);\par
  \}\par
\};\par
}
\par
Now you want to mock this interface such that you can set expectations on it. However, you also want to use {\f2 FakeFoo}  for the default behavior, as duplicating it in the mock object is, well, a lot of work.\par
When you define the mock class using Google {\b Mock}, you can have it delegate its default action to a fake class you already have, using this pattern:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Normal mock method definitions using Google Mock.\par
  MOCK_METHOD1(DoThis, char(int n));\par
  MOCK_METHOD2(DoThat, void(const char* s, int* p));\par
\par
  // Delegates the default actions of the methods to a FakeFoo object.\par
  // This must be called *before* the custom ON_CALL() statements.\par
  void DelegateToFake() \{\par
    ON_CALL(*this, DoThis(_))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThis));\par
    ON_CALL(*this, DoThat(_, _))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThat));\par
  \}\par
 private:\par
  FakeFoo fake_;  // Keeps an instance of the fake in the mock.\par
\};\par
}
\par
With that, you can use {\f2 {\b MockFoo}}  in your tests as usual. Just remember that if you don't explicitly set an action in an {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , the fake will be called upon to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
TEST(AbcTest, Xyz) \{\par
  MockFoo foo;\par
  foo.DelegateToFake(); // Enables the fake for delegation.\par
\par
  // Put your ON_CALL(foo, ...)s here, if any.\par
\par
  // No action specified, meaning to use the default action.\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(foo, DoThat(_, _));\par
\par
  int n = 0;\par
  EXPECT_EQ('+', foo.DoThis(5));  // FakeFoo::DoThis() is invoked.\par
  foo.DoThat("Hi", &n);           // FakeFoo::DoThat() is invoked.\par
  EXPECT_EQ(2, n);\par
\}\par
}
\par
{\b Some tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you want, you can still override the default action by providing your own {\f2 ON_CALL()}  or using {\f2 .WillOnce()}  / {\f2 .WillRepeatedly()}  in {\f2 EXPECT_CALL()} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In {\f2 DelegateToFake()} , you only need to delegate the methods whose fake implementation you intend to use.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The general technique discussed here works for overloaded methods, but you'll need to tell the compiler which version you mean. To disambiguate a mock function (the one you specify inside the parentheses of {\f2 ON_CALL()} ), see the "Selecting Between Overloaded Functions" section on this page; to disambiguate a fake function (the one you place inside {\f2 Invoke()} ), use a {\f2 static_cast}  to specify the function's type.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Having to mix a mock and a fake is often a sign of something gone wrong. Perhaps you haven't got used to the interaction-based way of testing yet. Or perhaps your interface is taking on too many roles and should be split up. Therefore, {\b don't abuse this} . We would only recommend to do it as an intermediate step when you are refactoring your code.\par}
Regarding the tip on mixing a mock and a fake, here's an example on why it may be a bad sign: Suppose you have a class {\f2 System}  for low-level system operations. In particular, it does file and I/O operations. And suppose you want to test how your code uses {\f2 System}  to do I/O, and you just want the file operations to work normally. If you mock out the entire {\f2 System}  class, you'll have to provide a fake implementation for the file operation part, which suggests that {\f2 System}  is taking on too many roles.\par
Instead, you can define a {\f2 FileOps}  interface and an {\f2 IOOps}  interface and split {\f2 System} 's functionalities into the two. Then you can mock {\f2 IOOps}  without mocking {\f2 FileOps} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Real Object} \par}
When using testing doubles (mocks, fakes, stubs, and etc), sometimes their behaviors will differ from those of the real objects. This difference could be either intentional (as in simulating an error such that you can test the error handling code) or unintentional. If your mocks have different behaviors than the real objects by mistake, you could end up with code that passes the tests but fails in production.\par
You can use the {\i delegating-to-real}  technique to ensure that your mock has the same behavior as the real object while retaining the ability to validate calls. This technique is very similar to the delegating-to-fake technique, the difference being that we use a real object instead of a fake. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AtLeast;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MockFoo() \{\par
    // By default, all calls are delegated to the real object.\par
    ON_CALL(*this, DoThis())\par
        .WillByDefault(Invoke(&real_, &Foo::DoThis));\par
    ON_CALL(*this, DoThat(_))\par
        .WillByDefault(Invoke(&real_, &Foo::DoThat));\par
    ...\par
  \}\par
  MOCK_METHOD0(DoThis, ...);\par
  MOCK_METHOD1(DoThat, ...);\par
  ...\par
 private:\par
  Foo real_;\par
\};\par
...\par
\par
  MockFoo mock;\par
\par
  EXPECT_CALL(mock, DoThis())\par
      .Times(3);\par
  EXPECT_CALL(mock, DoThat("Hi"))\par
      .Times(AtLeast(1));\par
  ... use mock in test ...\par
}
\par
With this, Google {\b Mock} will verify that your code made the right calls (with the right arguments, in the right order, called the right number of times, etc), and a real object will answer the calls (so the behavior will be the same as in production). This gives you the best of both worlds.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Parent Class} \par}
Ideally, you should code to interfaces, whose methods are all pure virtual. In reality, sometimes you do need to mock a virtual method that is not pure (i.e, it already has an implementation). For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo();\par
\par
  virtual void Pure(int n) = 0;\par
  virtual int Concrete(const char* str) \{ ... \}\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\};\par
}
\par
Sometimes you may want to call {\f2 Foo::Concrete()}  instead of {\f2 MockFoo::Concrete()} . Perhaps you want to do it as part of a stub action, or perhaps your test doesn't need to mock {\f2 Concrete()}  at all (but it would be oh-so painful to have to define a new mock class whenever you don't need to mock one of its methods).\par
The trick is to leave a back door in your mock class for accessing the real methods in the base class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\par
  // Use this to call Concrete() defined in Foo.\par
  int FooConcrete(const char* str) \{ return Foo::Concrete(str); \}\par
\};\par
}
\par
Now, you can call {\f2 Foo::Concrete()}  inside an action by:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  EXPECT_CALL(foo, Concrete(_))\par
      .WillOnce(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
or tell the mock object that you don't want to mock {\f2 Concrete()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Invoke;\par
...\par
  ON_CALL(foo, Concrete(_))\par
      .WillByDefault(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
(Why don't we just write {\f2 Invoke(&foo, &Foo::Concrete)} ? If you do that, {\f2 MockFoo::Concrete()}  will be called (and cause an infinite recursion) since {\f2 Foo::Concrete()}  is virtual. That's just how C++ works.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Matchers} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Argument Values Exactly} \par}
You can specify exactly which arguments a mock method is expecting:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(5))\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Simple Matchers} \par}
You can use matchers to match arguments that have a certain property:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::NotNull;\par
using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(Ge(5)))  // The argument must be >= 5.\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", NotNull()));\par
  // The second argument must not be NULL.\par
}
\par
A frequently used matcher is {\f2 _} , which matches anything:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::NotNull;\par
...\par
  EXPECT_CALL(foo, DoThat(_, NotNull()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Matchers} \par}
You can build complex matchers from existing ones using {\f2 AllOf()} , {\f2 AnyOf()} , and {\f2 Not()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::Gt;\par
using ::testing::HasSubstr;\par
using ::testing::Ne;\par
using ::testing::Not;\par
...\par
  // The argument must be > 5 and != 10.\par
  EXPECT_CALL(foo, DoThis(AllOf(Gt(5),\par
                                Ne(10))));\par
\par
  // The first argument must not contain sub-string "blah".\par
  EXPECT_CALL(foo, DoThat(Not(HasSubstr("blah")),\par
                          NULL));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Casting Matchers} \par}
Google {\b Mock} matchers are statically typed, meaning that the compiler can catch your mistake if you use a matcher of the wrong type (for example, if you use {\f2 Eq(5)}  to match a {\f2 string}  argument). Good for you!\par
Sometimes, however, you know what you're doing and want the compiler to give you some slack. One example is that you have a matcher for {\f2 long}  and the argument you want to match is {\f2 int} . While the two types aren't exactly the same, there is nothing really wrong with using a {\f2 Matcher<long>}  to match an {\f2 int}  - after all, we can first convert the {\f2 int}  argument to a {\f2 long}  before giving it to the matcher.\par
To support this need, Google {\b Mock} gives you the {\f2 SafeMatcherCast<T>(m)}  function. It casts a matcher {\f2 m}  to type {\f2 Matcher<T>} . To ensure safety, Google {\b Mock} checks that (let {\f2 U}  be the type {\f2 m}  accepts):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Type {\f2 T}  can be implicitly cast to type {\f2 U} ;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When both {\f2 T}  and {\f2 U}  are built-in arithmetic types ({\f2 bool} , integers, and floating-point numbers), the conversion from {\f2 T}  to {\f2 U}  is not lossy (in other words, any value representable by {\f2 T}  can also be represented by {\f2 U} ); and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When {\f2 U}  is a reference, {\f2 T}  must also be a reference (as the underlying matcher may be interested in the address of the {\f2 U}  value).\par}
The code won't compile if any of these conditions isn't met.\par
Here's one example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SafeMatcherCast;\par
\par
// A base class and a child class.\par
class Base \{ ... \};\par
class Derived : public Base \{ ... \};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(DoThis, void(Derived* derived));\par
\};\par
...\par
\par
  MockFoo foo;\par
  // m is a Matcher<Base*> we got from somewhere.\par
  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\par
}
\par
If you find {\f2 SafeMatcherCast<T>(m)}  too limiting, you can use a similar function {\f2 MatcherCast<T>(m)} . The difference is that {\f2 MatcherCast}  works as long as you can {\f2 static_cast}  type {\f2 T}  to type {\f2 U} .\par
{\f2 MatcherCast}  essentially lets you bypass C++'s type system ({\f2 static_cast}  isn't always safe as it could throw away information, for example), so be careful not to misuse/abuse it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Between Overloaded Functions} \par}
If you expect an overloaded function to be called, the compiler may need some help on which overloaded version it is.\par
To disambiguate functions overloaded on the const-ness of this object, use the {\f2 Const()}  argument wrapper.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar1, bar2;\par
  EXPECT_CALL(foo, GetBar())         // The non-const GetBar().\par
      .WillOnce(ReturnRef(bar1));\par
  EXPECT_CALL(Const(foo), GetBar())  // The const GetBar().\par
      .WillOnce(ReturnRef(bar2));\par
}
\par
({\f2 Const()}  is defined by Google {\b Mock} and returns a {\f2 const}  reference to its argument.)\par
To disambiguate overloaded functions with the same number of arguments but different argument types, you may need to specify the exact type of a matcher, either by wrapping your matcher in {\f2 Matcher<type>()} , or using a matcher whose type is fixed ({\f2 TypedEq<type>} , {\f2 An<type>()} , etc):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::An;\par
using ::testing::Lt;\par
using ::testing::Matcher;\par
using ::testing::TypedEq;\par
\par
class MockPrinter : public Printer \{\par
 public:\par
  MOCK_METHOD1(Print, void(int n));\par
  MOCK_METHOD1(Print, void(char c));\par
\};\par
\par
TEST(PrinterTest, Print) \{\par
  MockPrinter printer;\par
\par
  EXPECT_CALL(printer, Print(An<int>()));            // void Print(int);\par
  EXPECT_CALL(printer, Print(Matcher<int>(Lt(5))));  // void Print(int);\par
  EXPECT_CALL(printer, Print(TypedEq<char>('a')));   // void Print(char);\par
\par
  printer.Print(3);\par
  printer.Print(6);\par
  printer.Print('a');\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Performing Different Actions Based on the Arguments} \par}
When a mock method is called, the {\i last}  matching expectation that's still active will be selected (think "newer overrides older"). So, you can make a method do different things depending on its argument values like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Return;\par
...\par
  // The default case.\par
  EXPECT_CALL(foo, DoThis(_))\par
      .WillRepeatedly(Return('b'));\par
\par
  // The more specific case.\par
  EXPECT_CALL(foo, DoThis(Lt(5)))\par
      .WillRepeatedly(Return('a'));\par
}
\par
Now, if {\f2 foo.DoThis()}  is called with a value less than 5, {\f2 'a'}  will be returned; otherwise {\f2 'b'}  will be returned.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Multiple Arguments as a Whole} \par}
Sometimes it's not enough to match the arguments individually. For example, we may want to say that the first argument must be less than the second argument. The {\f2 With()}  clause allows us to match all arguments of a mock function as a whole. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Ne;\par
...\par
  EXPECT_CALL(foo, InRange(Ne(0), _))\par
      .With(Lt());\par
}
\par
says that the first argument of {\f2 InRange()}  must not be 0, and must be less than the second argument.\par
The expression inside {\f2 With()}  must be a matcher of type {\f2 Matcher<tr1::tuple<A1, ..., An> >} , where {\f2 A1} , ..., {\f2 An}  are the types of the function arguments.\par
You can also write {\f2 AllArgs(m)}  instead of {\f2 m}  inside {\f2 .With()} . The two forms are equivalent, but {\f2 .With(AllArgs(Lt()))}  is more readable than {\f2 .With(Lt())} .\par
You can use {\f2 Args<k1, ..., kn>(m)}  to match the {\f2 n}  selected arguments (as a tuple) against {\f2 m} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AllOf;\par
using ::testing::Args;\par
using ::testing::Lt;\par
...\par
  EXPECT_CALL(foo, Blah(_, _, _))\par
      .With(AllOf(Args<0, 1>(Lt()), Args<1, 2>(Lt())));\par
}
\par
says that {\f2 Blah()}  will be called with arguments {\f2 x} , {\f2 y} , and {\f2 z}  where {\f2 x < y < z} .\par
As a convenience and example, Google {\b Mock} provides some matchers for 2-tuples, including the {\f2 Lt()}  matcher above. See the CheatSheet for the complete list.\par
Note that if you want to pass the arguments to a predicate of your own (e.g. {\f2 .With(Args<0, 1>(Truly(&MyPredicate)))} ), that predicate MUST be written to take a {\f2 tr1::tuple}  as its argument; Google {\b Mock} will pass the {\f2 n}  selected arguments as {\i one}  single tuple to the predicate.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers as Predicates} \par}
Have you noticed that a matcher is just a fancy predicate that also knows how to describe itself? Many existing algorithms take predicates as arguments (e.g. those defined in STL's {\f2 <algorithm>}  header), and it would be a shame if Google {\b Mock} matchers are not allowed to participate.\par
Luckily, you can use a matcher where a unary predicate functor is expected by wrapping it inside the {\f2 Matches()}  function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <algorithm>\par
#include <vector>\par
\par
std::vector<int> v;\par
...\par
// How many elements in v are >= 10?\par
const int count = count_if(v.begin(), v.end(), Matches(Ge(10)));\par
}
\par
Since you can build complex matchers from simpler ones easily using Google {\b Mock}, this gives you a way to conveniently construct composite predicates (doing the same using STL's {\f2 <functional>}  header is just painful). For example, here's a predicate that's satisfied by any number that is >= 0, <= 100, and != 50:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matches(AllOf(Ge(0), Le(100), Ne(50)))\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers in Google Test Assertions} \par}
Since matchers are basically predicates that also know how to describe themselves, there is a way to take advantage of them in {\f2 Google Test} assertions. It's called {\f2 ASSERT_THAT}  and {\f2 EXPECT_THAT} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THAT(value, matcher);  // Asserts that value matches matcher.\par
EXPECT_THAT(value, matcher);  // The non-fatal version.\par
}
\par
For example, in a Google Test test you can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"\par
\par
using ::testing::AllOf;\par
using ::testing::Ge;\par
using ::testing::Le;\par
using ::testing::MatchesRegex;\par
using ::testing::StartsWith;\par
...\par
\par
  EXPECT_THAT(Foo(), StartsWith("Hello"));\par
  EXPECT_THAT(Bar(), MatchesRegex("Line \\\\d+"));\par
  ASSERT_THAT(Baz(), AllOf(Ge(5), Le(10)));\par
}
\par
which (as you can probably guess) executes {\f2 Foo()} , {\f2 Bar()} , and {\f2 Baz()} , and verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Foo()}  returns a string that starts with {\f2 "Hello"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Bar()}  returns a string that matches regular expression {\f2 "Line \\\\d+"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Baz()}  returns a number in the range [5, 10].\par}
The nice thing about these macros is that {\i they read like English} . They generate informative messages too. For example, if the first {\f2 EXPECT_THAT()}  above fails, the message will be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Foo()\par
  Actual: "Hi, world!"\par
Expected: starts with "Hello"\par
}
\par
{\b Credit:}  The idea of {\f2 (ASSERT|EXPECT)_THAT}  was stolen from the {\f2 Hamcrest} project, which adds {\f2 assertThat()}  to JUnit.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Predicates as Matchers} \par}
Google {\b Mock} provides a built-in set of matchers. In case you find them lacking, you can use an arbitray unary predicate function or functor as a matcher - as long as the predicate accepts a value of the type you want. You do this by wrapping the predicate inside the {\f2 Truly()}  function, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Truly;\par
\par
int IsEven(int n) \{ return (n % 2) == 0 ? 1 : 0; \}\par
...\par
\par
  // Bar() must be called with an even number.\par
  EXPECT_CALL(foo, Bar(Truly(IsEven)));\par
}
\par
Note that the predicate function / functor doesn't have to return {\f2 bool} . It works as long as the return value can be used as the condition in statement {\f2 if (condition) ...} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Arguments that Are Not Copyable} \par}
When you do an {\f2 EXPECT_CALL(mock_obj, Foo(bar))} , Google {\b Mock} saves away a copy of {\f2 bar} . When {\f2 Foo()}  is called later, Google {\b Mock} compares the argument to {\f2 Foo()}  with the saved copy of {\f2 bar} . This way, you don't need to worry about {\f2 bar}  being modified or destroyed after the {\f2 EXPECT_CALL()}  is executed. The same is true when you use matchers like {\f2 Eq(bar)} , {\f2 Le(bar)} , and so on.\par
But what if {\f2 bar}  cannot be copied (i.e. has no copy constructor)? You could define your own matcher function and use it with {\f2 Truly()} , as the previous couple of recipes have shown. Or, you may be able to get away from it if you can guarantee that {\f2 bar}  won't be changed after the {\f2 EXPECT_CALL()}  is executed. Just tell Google {\b Mock} that it should save a reference to {\f2 bar} , instead of a copy of it. Here's how:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Eq;\par
using ::testing::ByRef;\par
using ::testing::Lt;\par
...\par
  // Expects that Foo()'s argument == bar.\par
  EXPECT_CALL(mock_obj, Foo(Eq(ByRef(bar))));\par
\par
  // Expects that Foo()'s argument < bar.\par
  EXPECT_CALL(mock_obj, Foo(Lt(ByRef(bar))));\par
}
\par
Remember: if you do this, don't change {\f2 bar}  after the {\f2 EXPECT_CALL()} , or the result is undefined.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating a Member of an Object} \par}
Often a mock function takes a reference to object as an argument. When matching the argument, you may not want to compare the entire object against a fixed object, as that may be over-specification. Instead, you may need to validate a certain member variable or the result of a certain getter method of the object. You can do this with {\f2 Field()}  and {\f2 Property()} . More specifically,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::bar, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 bar}  member variable satisfies matcher {\f2 m} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Property(&Foo::baz, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 baz()}  method returns a value that satisfies matcher {\f2 m} .\par
For example:\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Field(&Foo::number, Ge(3))}  | Matches {\f2 x}  where {\f2 x.number >= 3} . | \par
}|:--------------------------\'97|:--------------------------------\'97| \par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Property(&Foo::name, StartsWith("John "))}  | Matches {\f2 x}  where {\f2 x.name()}  starts with {\f2 "John "} . | \par
}Note that in {\f2 Property(&Foo::baz, ...)} , method {\f2 baz()}  must take no argument and be declared as {\f2 const} .\par
BTW, {\f2 Field()}  and {\f2 Property()}  can also match plain pointers to objects. For instance,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::number, Ge(3))\par
}
\par
matches a plain pointer {\f2 p}  where {\f2 p->number >= 3} . If {\f2 p}  is {\f2 NULL} , the match will always fail regardless of the inner matcher.\par
What if you want to validate more than one members at the same time? Remember that there is {\f2 AllOf()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating the Value Pointed to by a Pointer Argument} \par}
C++ functions often take pointers as arguments. You can use matchers like {\f2 NULL} , {\f2 NotNull()} , and other comparison matchers to match a pointer, but what if you want to make sure the value {\i pointed to}  by the pointer, instead of the pointer itself, has a certain property? Well, you can use the {\f2 Pointee(m)}  matcher.\par
{\f2 Pointee(m)}  matches a pointer iff {\f2 m}  matches the value the pointer points to. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::Pointee;\par
...\par
  EXPECT_CALL(foo, Bar(Pointee(Ge(3))));\par
}
\par
expects {\f2 foo.Bar()}  to be called with a pointer that points to a value greater than or equal to 3.\par
One nice thing about {\f2 Pointee()}  is that it treats a {\f2 NULL}  pointer as a match failure, so you can write {\f2 Pointee(m)}  instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid AllOf(NotNull(), Pointee(m))\par
}
\par
without worrying that a {\f2 NULL}  pointer will crash your test.\par
Also, did we tell you that {\f2 Pointee()}  works with both raw pointers {\b and}  smart pointers ({\f2 linked_ptr} , {\f2 shared_ptr} , {\f2 scoped_ptr} , and etc)?\par
What if you have a pointer to pointer? You guessed it - you can use nested {\f2 Pointee()}  to probe deeper inside the value. For example, {\f2 Pointee(Pointee(Lt(3)))}  matches a pointer that points to a pointer that points to a number less than 3 (what a mouthful...).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing a Certain Property of an Object} \par}
Sometimes you want to specify that an object argument has a certain property, but there is no existing matcher that does this. If you want good error messages, you should define a matcher. If you want to do it quick and dirty, you could get away with writing an ordinary function.\par
Let's say you have a mock function that takes an object of type {\f2 Foo} , which has an {\f2 int bar()}  method and an {\f2 int baz()}  method, and you want to constrain that the argument's {\f2 bar()}  value plus its {\f2 baz()}  value is a given number. Here's how you can define a matcher to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class BarPlusBazEqMatcher : public MatcherInterface<const Foo&> \{\par
 public:\par
  explicit BarPlusBazEqMatcher(int expected_sum)\par
      : expected_sum_(expected_sum) \{\}\par
\par
  virtual bool MatchAndExplain(const Foo& foo,\par
                               MatchResultListener* listener) const \{\par
    return (foo.bar() + foo.baz()) == expected_sum_;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() equals " << expected_sum_;\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() does not equal " << expected_sum_;\par
  \}\par
 private:\par
  const int expected_sum_;\par
\};\par
\par
inline Matcher<const Foo&> BarPlusBazEq(int expected_sum) \{\par
  return MakeMatcher(new BarPlusBazEqMatcher(expected_sum));\par
\}\par
\par
...\par
\par
  EXPECT_CALL(..., DoThis(BarPlusBazEq(5)))...;\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Containers} \par}
Sometimes an STL container (e.g. list, vector, map, ...) is passed to a mock function and you may want to validate it. Since most STL containers support the {\f2 ==}  operator, you can write {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly.\par
Sometimes, though, you may want to be more flexible (for example, the first element must be an exact match, but the second element can be any positive number, and so on). Also, containers used in tests often have a small number of elements, and having to define the expected container out-of-line is a bit of a hassle.\par
You can use the {\f2 ElementsAre()}  matcher in such cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::ElementsAre;\par
using ::testing::Gt;\par
...\par
\par
  MOCK_METHOD1(Foo, void(const vector<int>& numbers));\par
...\par
\par
  EXPECT_CALL(mock, Foo(ElementsAre(1, Gt(0), _, 5)));\par
}
\par
The above matcher says that the container must have 4 elements, which must be 1, greater than 0, anything, and 5 respectively.\par
{\f2 ElementsAre()}  is overloaded to take 0 to 10 arguments. If more are needed, you can place them in a C-style array and use {\f2 ElementsAreArray()}  instead:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
\par
  // ElementsAreArray accepts an array of element values.\par
  const int expected_vector1[] = \{ 1, 5, 2, 4, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector1)));\par
\par
  // Or, an array of element matchers.\par
  Matcher<int> expected_vector2 = \{ 1, Gt(2), _, 3, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector2)));\par
}
\par
In case the array needs to be dynamically created (and therefore the array size cannot be inferred by the compiler), you can give {\f2 ElementsAreArray()}  an additional argument to specify the array size:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
  int* const expected_vector3 = new int[count];\par
  ... fill expected_vector3 with values ...\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector3, count)));\par
}
\par
{\b Tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ElementAre*()}  works with {\i any}  container that implements the STL iterator concept (i.e. it has a {\f2 const_iterator}  type and supports {\f2 begin()/end()} ) and supports {\f2 size()} , not just the ones defined in STL. It will even work with container types yet to be written - as long as they follows the above pattern.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can use nested {\f2 ElementAre*()}  to match nested (multi-dimensional) containers.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the container is passed by pointer instead of by reference, just write {\f2 Pointee(ElementsAre*(...))} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The order of elements {\i matters}  for {\f2 ElementsAre*()} . Therefore don't use it with containers whose element order is undefined (e.g. {\f2 hash_map} ).\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Matchers} \par}
Under the hood, a Google {\b Mock} matcher object consists of a pointer to a ref-counted implementation object. Copying matchers is allowed and very efficient, as only the pointer is copied. When the last matcher that references the implementation object dies, the implementation object will be deleted.\par
Therefore, if you have some complex matcher that you want to use again and again, there is no need to build it everytime. Just assign it to a matcher variable and use that variable repeatedly! For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matcher<int> in_range = AllOf(Gt(5), Le(10));\par
... use in_range as a matcher in multiple EXPECT_CALLs ...\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Uninteresting Calls} \par}
If you are not interested in how a mock method is called, just don't say anything about it. In this case, if the method is ever called, Google {\b Mock} will perform its default action to allow the test program to continue. If you are not happy with the default action taken by Google {\b Mock}, you can override it using {\f2 DefaultValue<T>::Set()}  (described later in this document) or {\f2 ON_CALL()} .\par
Please note that once you expressed interest in a particular mock method (via {\f2 EXPECT_CALL()} ), all invocations to it must match some expectation. If this function is called but the arguments don't match any {\f2 EXPECT_CALL()}  statement, it will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Disallowing Unexpected Calls} \par}
If a mock method shouldn't be called at all, explicitly say so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .Times(0);\par
}
\par
If some calls to the method are allowed, but the rest are not, just list all the expected calls:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AnyNumber;\par
using ::testing::Gt;\par
...\par
  EXPECT_CALL(foo, Bar(5));\par
  EXPECT_CALL(foo, Bar(Gt(10)))\par
      .Times(AnyNumber());\par
}
\par
A call to {\f2 foo.Bar()}  that doesn't match any of the {\f2 EXPECT_CALL()}  statements will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Ordered Calls} \par}
Although an {\f2 EXPECT_CALL()}  statement defined earlier takes precedence when Google {\b Mock} tries to match a function call with an expectation, by default calls don't have to happen in the order {\f2 EXPECT_CALL()}  statements are written. For example, if the arguments match the matchers in the third {\f2 EXPECT_CALL()} , but not those in the first two, then the third expectation will be used.\par
If you would rather have all calls occur in the order of the expectations, put the {\f2 EXPECT_CALL()}  statements in a block where you define a variable of type {\f2 InSequence} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InSequence;\par
\par
\{\par
  InSequence s;\par
\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(bar, DoThat(_))\par
      .Times(2);\par
  EXPECT_CALL(foo, DoThis(6));\par
\}\par
}
\par
In this example, we expect a call to {\f2 foo.DoThis(5)} , followed by two calls to {\f2 bar.DoThat()}  where the argument can be anything, which are in turn followed by a call to {\f2 foo.DoThis(6)} . If a call occurred out-of-order, Google {\b Mock} will report an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Partially Ordered Calls} \par}
Sometimes requiring everything to occur in a predetermined order can lead to brittle tests. For example, we may care about {\f2 A}  occurring before both {\f2 B}  and {\f2 C} , but aren't interested in the relative order of {\f2 B}  and {\f2 C} . In this case, the test should reflect our real intent, instead of being overly constraining.\par
Google {\b Mock} allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to use the {\f2 After} clause of {\f2 EXPECT_CALL} .\par
Another way is via the {\f2 InSequence()}  clause (not the same as the {\f2 InSequence}  class), which we borrowed from jMock 2. It's less flexible than {\f2 After()} , but more convenient when you have long chains of sequential calls, as it doesn't require you to come up with different names for the expectations in the chains. Here's how it works:\par
If we view {\f2 EXPECT_CALL()}  statements as nodes in a graph, and add an edge from node A to node B wherever A must occur before B, we can get a DAG. We use the term "sequence" to mean a directed path in this DAG. Now, if we decompose the DAG into sequences, we just need to know which sequences each {\f2 EXPECT_CALL()}  belongs to in order to be able to reconstruct the orginal DAG.\par
So, to specify the partial order on the expectations we need to do two things: first to define some {\f2 Sequence}  objects, and then for each {\f2 EXPECT_CALL()}  say which {\f2 Sequence}  objects it is part of. Expectations in the same sequence must occur in the order they are written. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(foo, A())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(bar, B())\par
    .InSequence(s1);\par
EXPECT_CALL(bar, C())\par
    .InSequence(s2);\par
EXPECT_CALL(foo, D())\par
    .InSequence(s2);\par
}
\par
specifies the following DAG (where {\f2 s1}  is {\f2 A -> B} , and {\f2 s2}  is {\f2 A -> C -> D} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid      +---> B\par
     |\par
A ---|\par
     |\par
     +---> C ---> D\par
}
\par
This means that A must occur before B and C, and C must occur before D. There's no restriction about the order other than these.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling When an Expectation Retires} \par}
When a mock method is called, Google {\b Mock} only consider expectations that are still active. An expectation is active when created, and becomes inactive (aka {\i retires} ) when a call that has to occur later has occurred. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(log, Log(WARNING, _, "File too large."))     // #1\par
    .Times(AnyNumber())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(log, Log(WARNING, _, "Data set is empty."))  // #2\par
    .InSequence(s1);\par
EXPECT_CALL(log, Log(WARNING, _, "User not found."))     // #3\par
    .InSequence(s2);\par
}
\par
as soon as either #2 or #3 is matched, #1 will retire. If a warning {\f2 "File too large."}  is logged after this, it will be an error.\par
Note that an expectation doesn't retire automatically when it's saturated. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                  // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."));  // #2\par
}
\par
says that there will be exactly one warning with the message {\f2 "File
too large."} . If the second warning contains this message too, #2 will match again and result in an upper-bound-violated error.\par
If this is not what you want, you can ask an expectation to retire as soon as it becomes saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                 // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."))  // #2\par
      .RetiresOnSaturation();\par
}
\par
Here #2 can be used only once, so if you have two warnings with the message {\f2 "File too large."} , the first will match #2 and the second will match #1 - there will be no error.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Actions} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning References from {\b Mock} Methods} \par}
If a mock function's return type is a reference, you need to use {\f2 ReturnRef()}  instead of {\f2 Return()}  to return a result:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(GetBar, Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar;\par
  EXPECT_CALL(foo, GetBar())\par
      .WillOnce(ReturnRef(bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning Live Values from {\b Mock} Methods} \par}
The {\f2 Return(x)}  action saves a copy of {\f2 x}  when the action is {\i created} , and always returns the same value whenever it's executed. Sometimes you may want to instead return the {\i live}  value of {\f2 x}  (i.e. its value at the time when the action is {\i executed} .).\par
If the mock function's return type is a reference, you can do it using {\f2 ReturnRef(x)} , as shown in the previous recipe ("Returning References
from Mock Methods"). However, Google {\b Mock} doesn't let you use {\f2 ReturnRef()}  in a mock function whose return type is not a reference, as doing that usually indicates a user error. So, what shall you do?\par
You may be tempted to try {\f2 ByRef()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::ByRef;\par
using testing::Return;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(GetValue, int());\par
\};\par
...\par
  int x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(Return(ByRef(x)));\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());\par
}
\par
Unfortunately, it doesn't work here. The above code will fail with error:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: foo.GetValue()\par
  Actual: 0\par
Expected: 42\par
}
\par
The reason is that {\f2 Return(value)}  converts {\f2 value}  to the actual return type of the mock function at the time when the action is {\i created} , not when it is {\i executed} . (This behavior was chosen for the action to be safe when {\f2 value}  is a proxy object that references some temporary objects.) As a result, {\f2 ByRef(x)}  is converted to an {\f2 int}  value (instead of a {\f2 const int&} ) when the expectation is set, and {\f2 Return(ByRef(x))}  will always return 0.\par
{\f2 ReturnPointee(pointer)}  was provided to solve this problem specifically. It returns the value pointed to by {\f2 pointer}  at the time the action is {\i executed} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::ReturnPointee;\par
...\par
  int x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(ReturnPointee(&x));  // Note the & here.\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());  // This will succeed now.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Actions} \par}
Want to do more than one thing when a function is called? That's fine. {\f2 DoAll()}  allow you to do sequence of actions every time. Only the return value of the last action in the sequence will be used.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DoAll;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Bar, bool(int n));\par
\};\par
...\par
\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(DoAll(action_1,\par
                      action_2,\par
                      ...\par
                      action_n));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Side Effects} \par}
Sometimes a method exhibits its effect not via returning a value but via side effects. For example, it may change some global state or modify an output argument. To mock side effects, in general you can define your own action by implementing {\f2 {\b testing::ActionInterface}} .\par
If all you need to do is to change an output argument, the built-in {\f2 SetArgPointee()}  action is convenient:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SetArgPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(bool mutate, int* value));\par
  ...\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, Mutate(true, _))\par
      .WillOnce(SetArgPointee<1>(5));\par
}
\par
In this example, when {\f2 mutator.Mutate()}  is called, we will assign 5 to the {\f2 int}  variable pointed to by argument #1 (0-based).\par
{\f2 SetArgPointee()}  conveniently makes an internal copy of the value you pass to it, removing the need to keep the value in scope and alive. The implication however is that the value must have a copy constructor and assignment operator.\par
If the mock method also needs to return a value as well, you can chain {\f2 SetArgPointee()}  with {\f2 Return()}  using {\f2 DoAll()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Return;\par
using ::testing::SetArgPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  ...\par
  MOCK_METHOD1(MutateInt, bool(int* value));\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, MutateInt(_))\par
      .WillOnce(DoAll(SetArgPointee<0>(5),\par
                      Return(true)));\par
}
\par
If the output argument is an array, use the {\f2 SetArrayArgument<N>(first, last)}  action instead. It copies the elements in source range {\f2 [first, last)}  to the array pointed to by the {\f2 N} -th (0-based) argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NotNull;\par
using ::testing::SetArrayArgument;\par
\par
class MockArrayMutator : public ArrayMutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(int* values, int num_values));\par
  ...\par
\};\par
...\par
\par
  MockArrayMutator mutator;\par
  int values[5] = \{ 1, 2, 3, 4, 5 \};\par
  EXPECT_CALL(mutator, Mutate(NotNull(), 5))\par
      .WillOnce(SetArrayArgument<0>(values, values + 5));\par
}
\par
This also works when the argument is an output iterator:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SeArrayArgument;\par
\par
class MockRolodex : public Rolodex \{\par
 public:\par
  MOCK_METHOD1(GetNames, void(std::back_insert_iterator<vector<string> >));\par
  ...\par
\};\par
...\par
\par
  MockRolodex rolodex;\par
  vector<string> names;\par
  names.push_back("George");\par
  names.push_back("John");\par
  names.push_back("Thomas");\par
  EXPECT_CALL(rolodex, GetNames(_))\par
      .WillOnce(SetArrayArgument<0>(names.begin(), names.end()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Changing a {\b Mock} Object's Behavior Based on the State} \par}
If you expect a call to change the behavior of a mock object, you can use {\f2 {\b testing::InSequence}}  to specify different behaviors before and after the call:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
\par
...\par
  \{\par
    InSequence seq;\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(true));\par
    EXPECT_CALL(my_mock, Flush());\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(false));\par
  \}\par
  my_mock.FlushIfDirty();\par
}
\par
This makes {\f2 my_mock.IsDirty()}  return {\f2 true}  before {\f2 my_mock.Flush()}  is called and return {\f2 false}  afterwards.\par
If the behavior change is more complex, you can store the effects in a variable and make a mock method get its return value from that variable:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SaveArg;\par
using ::testing::Return;\par
\par
ACTION_P(ReturnPointee, p) \{ return *p; \}\par
...\par
  int previous_value = 0;\par
  EXPECT_CALL(my_mock, GetPrevValue())\par
      .WillRepeatedly(ReturnPointee(&previous_value));\par
  EXPECT_CALL(my_mock, UpdateValue(_))\par
      .WillRepeatedly(SaveArg<0>(&previous_value));\par
  my_mock.DoSomethingToUpdateValue();\par
}
\par
Here {\f2 my_mock.GetPrevValue()}  will always return the argument of the last {\f2 UpdateValue()}  call.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Value for a Return Type} \par}
If a mock method's return type is a built-in C++ type or pointer, by default it will return 0 when invoked. You only need to specify an action if this default value doesn't work for you.\par
Sometimes, you may want to change this default value, or you may want to specify a default value for types Google {\b Mock} doesn't know about. You can do this using the {\f2 {\b testing::DefaultValue}}  class template:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(CalculateBar, Bar());\par
\};\par
...\par
\par
  Bar default_bar;\par
  // Sets the default return value for type Bar.\par
  DefaultValue<Bar>::Set(default_bar);\par
\par
  MockFoo foo;\par
\par
  // We don't need to specify an action here, as the default\par
  // return value works for us.\par
  EXPECT_CALL(foo, CalculateBar());\par
\par
  foo.CalculateBar();  // This should return default_bar.\par
\par
  // Unsets the default return value.\par
  DefaultValue<Bar>::Clear();\par
}
\par
Please note that changing the default value for a type can make you tests hard to understand. We recommend you to use this feature judiciously. For example, you may want to make sure the {\f2 Set()}  and {\f2 Clear()}  calls are right next to the code that uses your mock.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Actions for a {\b Mock} Method} \par}
You've learned how to change the default value of a given type. However, this may be too coarse for your purpose: perhaps you have two mock methods with the same return type and you want them to have different behaviors. The {\f2 ON_CALL()}  macro allows you to customize your mock's behavior at the method level:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AnyNumber;\par
using ::testing::Gt;\par
using ::testing::Return;\par
...\par
  ON_CALL(foo, Sign(_))\par
      .WillByDefault(Return(-1));\par
  ON_CALL(foo, Sign(0))\par
      .WillByDefault(Return(0));\par
  ON_CALL(foo, Sign(Gt(0)))\par
      .WillByDefault(Return(1));\par
\par
  EXPECT_CALL(foo, Sign(_))\par
      .Times(AnyNumber());\par
\par
  foo.Sign(5);   // This should return 1.\par
  foo.Sign(-9);  // This should return -1.\par
  foo.Sign(0);   // This should return 0.\par
}
\par
As you may have guessed, when there are more than one {\f2 ON_CALL()}  statements, the news order take precedence over the older ones. In other words, the {\b last}  one that matches the function arguments will be used. This matching order allows you to set up the common behavior in a mock object's constructor or the test fixture's set-up phase and specialize the mock's behavior later.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Functions/Methods/Functors as Actions} \par}
If the built-in actions don't suit you, you can easily use an existing function, method, or functor as an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(Sum, int(int x, int y));\par
  MOCK_METHOD1(ComplexJob, bool(int x));\par
\};\par
\par
int CalculateSum(int x, int y) \{ return x + y; \}\par
\par
class Helper \{\par
 public:\par
  bool ComplexJob(int x);\par
\};\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  EXPECT_CALL(foo, Sum(_, _))\par
      .WillOnce(Invoke(CalculateSum));\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(Invoke(&helper, &Helper::ComplexJob));\par
\par
  foo.Sum(5, 6);       // Invokes CalculateSum(5, 6).\par
  foo.ComplexJob(10);  // Invokes helper.ComplexJob(10);\par
}
\par
The only requirement is that the type of the function, etc must be {\i compatible}  with the signature of the mock function, meaning that the latter's arguments can be implicitly converted to the corresponding arguments of the former, and the former's return type can be implicitly converted to that of the latter. So, you can invoke something whose type is {\i not}  exactly the same as the mock function, as long as it's safe to do so - nice, huh?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking a Function/Method/Functor Without Arguments} \par}
{\f2 Invoke()}  is very useful for doing actions that are more complex. It passes the mock function's arguments to the function or functor being invoked such that the callee has the full context of the call to work with. If the invoked function is not interested in some or all of the arguments, it can simply ignore them.\par
Yet, a common pattern is that a test author wants to invoke a function without the arguments of the mock function. {\f2 Invoke()}  allows her to do that using a wrapper function that throws away the arguments before invoking an underlining nullary function. Needless to say, this can be tedious and obscures the intent of the test.\par
{\f2 InvokeWithoutArgs()}  solves this problem. It's like {\f2 Invoke()}  except that it doesn't pass the mock function's arguments to the callee. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeWithoutArgs;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(ComplexJob, bool(int n));\par
\};\par
\par
bool Job1() \{ ... \}\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(InvokeWithoutArgs(Job1));\par
\par
  foo.ComplexJob(10);  // Invokes Job1().\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking an Argument of the {\b Mock} Function} \par}
Sometimes a mock function will receive a function pointer or a functor (in other words, a "callable") as an argument, e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, bool(int n, bool (*fp)(int)));\par
\};\par
}
\par
and you may want to invoke this callable argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(...);\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
Arghh, you need to refer to a mock function argument but C++ has no lambda (yet), so you have to define your own action. :-( Or do you really?\par
Well, Google {\b Mock} has an action to solve {\i exactly}  this problem:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<N>(arg_1, arg_2, ..., arg_m)\par
}
\par
will invoke the {\f2 N} -th (0-based) argument the mock function receives, with {\f2 arg_1} , {\f2 arg_2} , ..., and {\f2 arg_m} . No matter if the argument is a function pointer or a functor, Google {\b Mock} handles them both.\par
With that, you could write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(InvokeArgument<1>(5));\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
What if the callable takes an argument by reference? No problem - just wrap it inside {\f2 ByRef()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(Bar, bool(bool (*fp)(int, const Helper&)));\par
...\par
using ::testing::_;\par
using ::testing::ByRef;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  ...\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(InvokeArgument<0>(5, ByRef(helper)));\par
  // ByRef(helper) guarantees that a reference to helper, not a copy of it,\par
  // will be passed to the callable.\par
}
\par
What if the callable takes an argument by reference and we do {\b not}  wrap the argument in {\f2 ByRef()} ? Then {\f2 InvokeArgument()}  will {\i make a copy}  of the argument, and pass a {\i reference to the copy} , instead of a reference to the original value, to the callable. This is especially handy when the argument is a temporary value:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(DoThat, bool(bool (*f)(const double& x, const string& s)));\par
...\par
using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  ...\par
  EXPECT_CALL(foo, DoThat(_))\par
      .WillOnce(InvokeArgument<0>(5.0, string("Hi")));\par
  // Will execute (*f)(5.0, string("Hi")), where f is the function pointer\par
  // DoThat() receives.  Note that the values 5.0 and string("Hi") are\par
  // temporary and dead once the EXPECT_CALL() statement finishes.  Yet\par
  // it's fine to perform this action later, since a copy of the values\par
  // are kept inside the InvokeArgument action.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring an Action's Result} \par}
Sometimes you have an action that returns {\i something} , but you need an action that returns {\f2 void}  (perhaps you want to use it in a mock function that returns {\f2 void} , or perhaps it needs to be used in {\f2 DoAll()}  and it's not the last in the list). {\f2 IgnoreResult()}  lets you do that. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Return;\par
\par
int Process(const MyData& data);\par
string DoSomething();\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Abc, void(const MyData& data));\par
  MOCK_METHOD0(Xyz, bool());\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, Abc(_))\par
  // .WillOnce(Invoke(Process));\par
  // The above line won't compile as Process() returns int but Abc() needs\par
  // to return void.\par
      .WillOnce(IgnoreResult(Invoke(Process)));\par
\par
  EXPECT_CALL(foo, Xyz())\par
      .WillOnce(DoAll(IgnoreResult(Invoke(DoSomething)),\par
      // Ignores the string DoSomething() returns.\par
                      Return(true)));\par
}
\par
Note that you {\b cannot}  use {\f2 IgnoreResult()}  on an action that already returns {\f2 void} . Doing so will lead to ugly compiler errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting an Action's Arguments} \par}
Say you have a mock function {\f2 Foo()}  that takes seven arguments, and you have a custom action that you want to invoke when {\f2 Foo()}  is called. Trouble is, the custom action only wants three arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  MOCK_METHOD7(Foo, bool(bool visible, const string& name, int x, int y,\par
                         const map<pair<int, int>, double>& weight,\par
                         double min_weight, double max_wight));\par
...\par
\par
bool IsVisibleInQuadrant1(bool visible, int x, int y) \{\par
  return visible && x >= 0 && y >= 0;\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(IsVisibleInQuadrant1));  // Uh, won't compile. :-(\par
}
\par
To please the compiler God, you can to define an "adaptor" that has the same signature as {\f2 Foo()}  and calls the custom action with the right arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
bool MyIsVisibleInQuadrant1(bool visible, const string& name, int x, int y,\par
                            const map<pair<int, int>, double>& weight,\par
                            double min_weight, double max_wight) \{\par
  return IsVisibleInQuadrant1(visible, x, y);\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(MyIsVisibleInQuadrant1));  // Now it works.\par
}
\par
But isn't this awkward?\par
Google {\b Mock} provides a generic {\i action adaptor} , so you can spend your time minding more important business than writing your own adaptors. Here's the syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid WithArgs<N1, N2, ..., Nk>(action)\par
}
\par
creates an action that passes the arguments of the mock function at the given indices (0-based) to the inner {\f2 action}  and performs it. Using {\f2 WithArgs} , our original example can be written as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::WithArgs;\par
...\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(WithArgs<0, 2, 3>(Invoke(IsVisibleInQuadrant1)));\par
      // No need to define your own adaptor.\par
}
\par
For better readability, Google {\b Mock} also gives you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithoutArgs(action)}  when the inner {\f2 action}  takes {\i no}  argument, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithArg<N>(action)}  (no {\f2 s}  after {\f2 Arg} ) when the inner {\f2 action}  takes {\i one}  argument.\par}
As you may have realized, {\f2 InvokeWithoutArgs(...)}  is just syntactic sugar for {\f2 WithoutArgs(Inovke(...))} .\par
Here are more tips:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The inner action used in {\f2 WithArgs}  and friends does not have to be {\f2 Invoke()}  \'96 it can be anything.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can repeat an argument in the argument list if necessary, e.g. {\f2 WithArgs<2, 3, 3, 5>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can change the order of the arguments, e.g. {\f2 WithArgs<3, 2, 1>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The types of the selected arguments do {\i not}  have to match the signature of the inner action exactly. It works as long as they can be implicitly converted to the corresponding arguments of the inner action. For example, if the 4-th argument of the mock function is an {\f2 int}  and {\f2 my_action}  takes a {\f2 double} , {\f2 WithArg<4>(my_action)}  will work.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Arguments in Action Functions} \par}
The selecting-an-action's-arguments recipe showed us one way to make a mock function and an action with incompatible argument lists fit together. The downside is that wrapping the action in {\f2 WithArgs<...>()}  can get tedious for people writing the tests.\par
If you are defining a function, method, or functor to be used with {\f2 Invoke*()} , and you are not interested in some of its arguments, an alternative to {\f2 WithArgs}  is to declare the uninteresting arguments as {\f2 Unused} . This makes the definition less cluttered and less fragile in case the types of the uninteresting arguments change. It could also increase the chance the action function can be reused. For example, given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD3(Foo, double(const string& label, double x, double y));\par
MOCK_METHOD3(Bar, double(int index, double x, double y));\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
double DistanceToOriginWithLabel(const string& label, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
\par
double DistanceToOriginWithIndex(int index, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithLabel));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithIndex));\par
}
\par
you could write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Unused;\par
\par
double DistanceToOrigin(Unused, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Actions} \par}
Just like matchers, a Google {\b Mock} action object consists of a pointer to a ref-counted implementation object. Therefore copying actions is also allowed and very efficient. When the last action that references the implementation object dies, the implementation object will be deleted.\par
If you have some complex action that you want to use again and again, you may not have to build it from scratch everytime. If the action doesn't have an internal state (i.e. if it always does the same thing no matter how many times it has been called), you can assign it to an action variable and use that variable repeatedly. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<bool(int*)> set_flag = DoAll(SetArgPointee<0>(5),\par
                                    Return(true));\par
... use set_flag in .WillOnce() and .WillRepeatedly() ...\par
}
\par
However, if the action has its own state, you may be surprised if you share the action object. Suppose you have an action factory {\f2 IncrementCounter(init)}  which creates an action that increments and returns a counter whose initial value is {\f2 init} , using two actions created from the same expression and using a shared action will exihibit different behaviors. Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(IncrementCounter(0));\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(IncrementCounter(0));\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 1 - Blah() uses a different\par
               // counter than Bar()'s.\par
}
\par
versus\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<int()> increment = IncrementCounter(0);\par
\par
EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(increment);\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(increment);\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 3 - the counter is shared.\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Misc Recipes on Using Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Making the Compilation Faster} \par}
Believe it or not, the {\i vast majority}  of the time spent on compiling a mock class is in generating its constructor and destructor, as they perform non-trivial tasks (e.g. verification of the expectations). What's more, mock methods with different signatures have different types and thus their constructors/destructors need to be generated by the compiler separately. As a result, if you mock many different types of methods, compiling your mock class can get really slow.\par
If you are experiencing slow compilation, you can move the definition of your mock class' constructor and destructor out of the class body and into a {\f2 .cpp}  file. This way, even if you {\f2 #include}  your mock class in N files, the compiler only needs to generate its constructor and destructor once, resulting in a much faster compilation.\par
Let's illustrate the idea using an example. Here's the definition of a mock class before applying this recipe:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.h.\par
...\par
class MockFoo : public Foo \{\par
 public:\par
  // Since we don't declare the constructor or the destructor,\par
  // the compiler will generate them in every translation unit\par
  // where this mock class is used.\par
\par
  MOCK_METHOD0(DoThis, int());\par
  MOCK_METHOD1(DoThat, bool(const char* str));\par
  ... more mock methods ...\par
\};\par
}
\par
After the change, it would look like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.h.\par
...\par
class MockFoo : public Foo \{\par
 public:\par
  // The constructor and destructor are declared, but not defined, here.\par
  MockFoo();\par
  virtual ~MockFoo();\par
\par
  MOCK_METHOD0(DoThis, int());\par
  MOCK_METHOD1(DoThat, bool(const char* str));\par
  ... more mock methods ...\par
\};\par
}
 and {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.cpp.\par
#include "path/to/mock_foo.h"\par
\par
// The definitions may appear trivial, but the functions actually do a\par
// lot of things through the constructors/destructors of the member\par
// variables used to implement the mock methods.\par
MockFoo::MockFoo() \{\}\par
MockFoo::~MockFoo() \{\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Forcing a Verification} \par}
When it's being destoyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, and will generate {\f2 Google Test} failures if not. This is convenient as it leaves you with one less thing to worry about. That is, unless you are not sure if your mock object will be destoyed.\par
How could it be that your mock object won't eventually be destroyed? Well, it might be created on the heap and owned by the code you are testing. Suppose there's a bug in that code and it doesn't delete the mock object properly - you could end up with a passing test when there's actually a bug.\par
Using a heap checker is a good idea and can alleviate the concern, but its implementation may not be 100% reliable. So, sometimes you do want to {\i force}  Google {\b Mock} to verify a mock object before it is (hopefully) destructed. You can do this with {\f2 Mock::VerifyAndClearExpectations(&mock_object)} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyServerTest, ProcessesRequest) \{\par
  using ::testing::Mock;\par
\par
  MockFoo* const foo = new MockFoo;\par
  EXPECT_CALL(*foo, ...)...;\par
  // ... other expectations ...\par
\par
  // server now owns foo.\par
  MyServer server(foo);\par
  server.ProcessRequest(...);\par
\par
  // In case that server's destructor will forget to delete foo,\par
  // this will verify the expectations anyway.\par
  Mock::VerifyAndClearExpectations(foo);\par
\}  // server is destroyed when it goes out of scope here.\par
}
\par
{\b Tip:}  The {\f2 Mock::VerifyAndClearExpectations()}  function returns a {\f2 bool}  to indicate whether the verification was successful ({\f2 true}  for yes), so you can wrap that function call inside a {\f2 ASSERT_TRUE()}  if there is no point going further when the verification has failed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Check Points} \par}
Sometimes you may want to "reset" a mock object at various check points in your test: at each check point, you verify that all existing expectations on the mock object have been satisfied, and then you set some new expectations on it as if it's newly created. This allows you to work with a mock object in "phases" whose sizes are each manageable.\par
One such scenario is that in your test's {\f2 SetUp()}  function, you may want to put the object you are testing into a certain state, with the help from a mock object. Once in the desired state, you want to clear all expectations on the mock, such that in the {\f2 TEST_F}  body you can set fresh expectations on it.\par
As you may have figured out, the {\f2 Mock::VerifyAndClearExpectations()}  function we saw in the previous recipe can help you here. Or, if you are using {\f2 ON_CALL()}  to set default actions on the mock object and want to clear the default actions as well, use {\f2 Mock::VerifyAndClear(&mock_object)}  instead. This function does what {\f2 Mock::VerifyAndClearExpectations(&mock_object)}  does and returns the same {\f2 bool} , {\b plus}  it clears the {\f2 ON_CALL()}  statements on {\f2 mock_object}  too.\par
Another trick you can use to achieve the same effect is to put the expectations in sequences and insert calls to a dummy "check-point" function at specific places. Then you can verify that the mock function calls do happen at the right time. For example, if you are exercising code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Foo(1);\par
Foo(2);\par
Foo(3);\par
}
\par
and want to verify that {\f2 Foo(1)}  and {\f2 Foo(3)}  both invoke {\f2 mock.Bar("a")} , but {\f2 Foo(2)}  doesn't invoke anything. You can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MockFunction;\par
\par
TEST(FooTest, InvokesBarCorrectly) \{\par
  MyMock mock;\par
  // Class MockFunction<F> has exactly one mock method.  It is named\par
  // Call() and has type F.\par
  MockFunction<void(string check_point_name)> check;\par
  \{\par
    InSequence s;\par
\par
    EXPECT_CALL(mock, Bar("a"));\par
    EXPECT_CALL(check, Call("1"));\par
    EXPECT_CALL(check, Call("2"));\par
    EXPECT_CALL(mock, Bar("a"));\par
  \}\par
  Foo(1);\par
  check.Call("1");\par
  Foo(2);\par
  check.Call("2");\par
  Foo(3);\par
\}\par
}
\par
The expectation spec says that the first {\f2 Bar("a")}  must happen before check point "1", the second {\f2 Bar("a")}  must happen after check point "2", and nothing should happen between the two check points. The explicit check points make it easy to tell which {\f2 Bar("a")}  is called by which call to {\f2 Foo()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Destructors} \par}
Sometimes you want to make sure a mock object is destructed at the right time, e.g. after {\f2 bar->A()}  is called but before {\f2 bar->B()}  is called. We already know that you can specify constraints on the order of mock function calls, so all we need to do is to mock the destructor of the mock function.\par
This sounds simple, except for one problem: a destructor is a special function with special syntax and special semantics, and the {\f2 MOCK_METHOD0}  macro doesn't work for it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD0(~MockFoo, void());  // Won't compile!\par
}
\par
The good news is that you can use a simple pattern to achieve the same effect. First, add a mock function {\f2 Die()}  to your mock class and call it in the destructor, like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  // Add the following two lines to the mock class.\par
  MOCK_METHOD0(Die, void());\par
  virtual ~MockFoo() \{ Die(); \}\par
\};\par
}
\par
(If the name {\f2 Die()}  clashes with an existing symbol, choose another name.) Now, we have translated the problem of testing when a {\f2 {\b MockFoo}}  object dies to testing when its {\f2 Die()}  method is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockFoo* foo = new MockFoo;\par
MockBar* bar = new MockBar;\par
...\par
\{\par
  InSequence s;\par
\par
  // Expects *foo to die after bar->A() and before bar->B().\par
  EXPECT_CALL(*bar, A());\par
  EXPECT_CALL(*foo, Die());\par
  EXPECT_CALL(*bar, B());\par
\}\par
}
\par
And that's that.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} and Threads} \par}
{\b IMPORTANT NOTE:}  What we describe in this recipe is {\b ONLY}  true on platforms where Google {\b Mock} is thread-safe. Currently these are only platforms that support the pthreads library (this includes Linux and Mac). To make it thread-safe on other platforms we only need to implement some synchronization operations in {\f2 "gtest/internal/gtest-port.h"} .\par
In a {\b unit}  test, it's best if you could isolate and test a piece of code in a single-threaded context. That avoids race conditions and dead locks, and makes debugging your test much easier.\par
Yet many programs are multi-threaded, and sometimes to test something we need to pound on it from more than one thread. Google {\b Mock} works for this purpose too.\par
Remember the steps for using a mock:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a mock object {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set its default actions and expectations using {\f2 ON_CALL()}  and {\f2 EXPECT_CALL()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The code under test calls methods of {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, verify and reset the mock.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the mock yourself, or let the code under test destroy it. The destructor will automatically verify it.\par}
If you follow the following simple rules, your mocks and threads can live happily togeter:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Execute your {\i test code}  (as opposed to the code being tested) in {\i one}  thread. This makes your test easy to follow.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Obviously, you can do step #1 without locking.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When doing step #2 and #5, make sure no other thread is accessing {\f2 foo} . Obvious too, huh?\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#3 and #4 can be done either in one thread or in multiple threads - anyway you want. Google {\b Mock} takes care of the locking, so you don't have to do any - unless required by your test logic.\par}
If you violate the rules (for example, if you set expectations on a mock while another thread is calling its methods), you get undefined behavior. That's not fun, so don't do it.\par
Google {\b Mock} guarantees that the action for a mock function is done in the same thread that called the mock function. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock, Foo(1))\par
    .WillOnce(action1);\par
EXPECT_CALL(mock, Foo(2))\par
    .WillOnce(action2);\par
}
\par
if {\f2 Foo(1)}  is called in thread 1 and {\f2 Foo(2)}  is called in thread 2, Google {\b Mock} will execute {\f2 action1}  in thread 1 and {\f2 action2}  in thread 2.\par
Google {\b Mock} does {\i not}  impose a sequence on actions performed in different threads (doing so may create deadlocks as the actions may need to cooperate). This means that the execution of {\f2 action1}  and {\f2 action2}  in the above example {\i may}  interleave. If this is a problem, you should add proper synchronization logic to {\f2 action1}  and {\f2 action2}  to make the test thread-safe.\par
Also, remember that {\f2 DefaultValue<T>}  is a global resource that potentially affects {\i all}  living mock objects in your program. Naturally, you won't want to mess with it from multiple threads or when there still are mocks in action.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Much Information Google {\b Mock} Prints} \par}
When Google {\b Mock} sees something that has the potential of being an error (e.g. a mock function with no expectation is called, a.k.a. an uninteresting call, which is allowed but perhaps you forgot to explicitly ban the call), it prints some warning messages, including the arguments of the function and the return value. Hopefully this will remind you to take a look and see if there is indeed a problem.\par
Sometimes you are confident that your tests are correct and may not appreciate such friendly messages. Some other times, you are debugging your tests or learning about the behavior of the code you are testing, and wish you could observe every mock call that happens (including argument values and the return value). Clearly, one size doesn't fit all.\par
You can control how much Google {\b Mock} tells you using the {\f2 --gmock_verbose=LEVEL}  command-line flag, where {\f2 LEVEL}  is a string with three possible values:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 info} : Google {\b Mock} will print all informational messages, warnings, and errors (most verbose). At this setting, Google {\b Mock} will also log any calls to the {\f2 ON_CALL/EXPECT_CALL}  macros.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 warning} : Google {\b Mock} will print both warnings and errors (less verbose). This is the default.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 error} : Google {\b Mock} will print errors only (least verbose).\par}
Alternatively, you can adjust the value of that flag from within your tests like so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gmock_verbose = "error";\par
}
\par
Now, judiciously use the right flag to enable Google {\b Mock} serve you better!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running Tests in Emacs} \par}
If you build and run your tests in Emacs, the source file locations of Google {\b Mock} and {\f2 Google Test} errors will be highlighted. Just press {\f2 <Enter>}  on one of them and you'll be taken to the offending line. Or, you can just type {\f2 C-x} ` to jump to the next error.\par
To make it even easier, you can add the following lines to your {\f2 ~/.emacs}  file:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid (global-set-key "\\M-m"   'compile)  ; m is for make\par
(global-set-key [M-down] 'next-error)\par
(global-set-key [M-up]   '(lambda () (interactive) (next-error -1)))\par
}
\par
Then you can type {\f2 M-m}  to start a build, or {\f2 M-up} /{\f2 M-down}  to move back and forth between errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Fusing Google {\b Mock} Source Files} \par}
Google {\b Mock}'s implementation consists of dozens of files (excluding its own tests). Sometimes you may want them to be packaged up in fewer files instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gmock_files.py}  in the {\f2 scripts/}  directory (starting with release 1.2.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gmock_files.py OUTPUT_DIR\par
}
\par
and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}} , {\f2 {\b gmock/gmock.h}} , and {\f2 gmock-gtest-all.cc}  in it. These three files contain everything you need to use Google {\b Mock} (and Google Test). Just copy them to anywhere you want and you are ready to write tests and use mocks. You can use the {\f2 scrpts/test/Makefile} file as an example on how to compile your tests against them.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Matchers Quickly} \par}
The {\f2 MATCHER*}  family of macros can be used to define custom matchers easily. The syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(name, description_string_expression) \{ statements; \}\par
}
\par
will define a matcher with the given name that executes the statements, which must return a {\f2 bool}  to indicate if the match succeeds. Inside the statements, you can refer to the value being matched by {\f2 arg} , and refer to its type by {\f2 arg_type} .\par
The description string is a {\f2 string} -typed expression that documents what the matcher does, and is used to generate the failure message when the match fails. It can (and should) reference the special {\f2 bool}  variable {\f2 negation} , and should evaluate to the description of the matcher when {\f2 negation}  is {\f2 false} , or that of the matcher's negation when {\f2 negation}  is {\f2 true} .\par
For convenience, we allow the description string to be empty ({\f2 ""} ), in which case Google {\b Mock} will use the sequence of words in the matcher name as the description.\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{ return (arg % 7) == 0; \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects mock_foo.Bar(n) to be called where n is divisible by 7.\par
EXPECT_CALL(mock_foo, Bar(IsDivisibleBy7()));\par
}
 or, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Not;\par
...\par
  EXPECT_THAT(some_expression, IsDivisibleBy7());\par
  EXPECT_THAT(some_other_expression, Not(IsDivisibleBy7()));\par
}
 If the above assertions fail, they will print something like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   Value of: some_expression\par
  Expected: is divisible by 7\par
    Actual: 27\par
...\par
  Value of: some_other_expression\par
  Expected: not (is divisible by 7)\par
    Actual: 21\par
}
 where the descriptions {\f2 "is divisible by 7"}  and {\f2 "not (is divisible
by 7)"}  are automatically calculated from the matcher name {\f2 IsDivisibleBy7} .\par
As you may have noticed, the auto-generated descriptions (especially those for the negation) may not be so great. You can always override them with a string expression of your own: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, std::string(negation ? "isn't" : "is") +\par
                        " divisible by 7") \{\par
  return (arg % 7) == 0;\par
\}\par
}
\par
Optionally, you can stream additional information to a hidden argument named {\f2 result_listener}  to explain the match result. For example, a better definition of {\f2 IsDivisibleBy7}  is: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{\par
  if ((arg % 7) == 0)\par
    return true;\par
\par
  *result_listener << "the remainder is " << (arg % 7);\par
  return false;\par
\}\par
}
\par
With this definition, the above assertion will give a better message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: some_expression\par
Expected: is divisible by 7\par
  Actual: 27 (the remainder is 6)\par
}
\par
You should let {\f2 MatchAndExplain()}  print {\i any additional information}  that can help a user understand the match result. Note that it should explain why the match succeeds in case of a success (unless it's obvious) - this is useful when the matcher is used inside {\f2 Not()} . There is no need to print the argument value itself, as Google {\b Mock} already prints it for you.\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The type of the value being matched ({\f2 arg_type} ) is determined by the context in which you use the matcher and is supplied to you by the compiler, so you don't need to worry about declaring it (nor can you). This allows the matcher to be polymorphic. For example, {\f2 IsDivisibleBy7()}  can be used to match any type where the value of {\f2 (arg % 7) == 0}  can be implicitly converted to a {\f2 bool} . In the {\f2 Bar(IsDivisibleBy7())}  example above, if method {\f2 Bar()}  takes an {\f2 int} , {\f2 arg_type}  will be {\f2 int} ; if it takes an {\f2 unsigned long} , {\f2 arg_type}  will be {\f2 unsigned long} ; and so on.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google {\b Mock} doesn't guarantee when or how many times a matcher will be invoked. Therefore the matcher logic must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters). This requirement must be satisfied no matter how you define the matcher (e.g. using one of the methods described in the following recipes). In particular, a matcher can never call a mock function, as that will affect the state of the mock object and Google {\b Mock}.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Matchers Quickly} \par}
Sometimes you'll want to define a matcher that has parameters. For that you can use the macro: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(name, param_name, description_string) \{ statements; \}\par
}
 where the description string can be either {\f2 ""}  or a string expression that references {\f2 negation}  and {\f2 param_name} .\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(HasAbsoluteValue, value, "") \{ return abs(arg) == value; \}\par
}
 will allow you to write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_THAT(Blah("a"), HasAbsoluteValue(n));\par
}
 which may lead to this message (assuming {\f2 n}  is 10): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Blah("a")\par
Expected: has absolute value 10\par
  Actual: -9\par
}
\par
Note that both the matcher description and its parameter are printed, making the message human-friendly.\par
In the matcher definition body, you can write {\f2 foo_type}  to reference the type of a parameter named {\f2 foo} . For example, in the body of {\f2 MATCHER_P(HasAbsoluteValue, value)}  above, you can write {\f2 value_type}  to refer to the type of {\f2 value} .\par
Google {\b Mock} also provides {\f2 MATCHER_P2} , {\f2 MATCHER_P3} , ..., up to {\f2 MATCHER_P10}  to support multi-parameter matchers: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(name, param_1, ..., param_k, description_string) \{ statements; \}\par
}
\par
Please note that the custom description string is for a particular {\b instance}  of the matcher, where the parameters have been bound to actual values. Therefore usually you'll want the parameter values to be part of the description. Google {\b Mock} lets you do that by referencing the matcher parameters in the description string expression.\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::PrintToString;\par
MATCHER_P2(InClosedRange, low, hi,\par
           std::string(negation ? "isn't" : "is") + " in range [" +\par
           PrintToString(low) + ", " + PrintToString(hi) + "]") \{\par
  return low <= arg && arg <= hi;\par
\}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: is in range [4, 6]\par
}
\par
If you specify {\f2 ""}  as the description, the failure message will contain the sequence of words in the matcher name followed by the parameter values printed as a tuple. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P2(InClosedRange, low, hi, "") \{ ... \}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the text: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: in closed range (4, 6)\par
}
\par
For the purpose of typing, you can view {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(Foo, p1, ..., pk, description_string) \{ ... \}\par
}
 as shorthand for {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename p1_type, ..., typename pk_type>\par
FooMatcherPk<p1_type, ..., pk_type>\par
Foo(p1_type p1, ..., pk_type pk) \{ ... \}\par
}
\par
When you write {\f2 Foo(v1, ..., vk)} , the compiler infers the types of the parameters {\f2 v1} , ..., and {\f2 vk}  for you. If you are not happy with the result of the type inference, you can specify the types by explicitly instantiating the template, as in {\f2 Foo<long, bool>(5, false)} . As said earlier, you don't get to (or need to) specify {\f2 arg_type}  as that's determined by the context in which the matcher is used.\par
You can assign the result of expression {\f2 Foo(p1, ..., pk)}  to a variable of type {\f2 FooMatcherPk<p1_type, ..., pk_type>} . This can be useful when composing matchers. Matchers that don't have a parameter or have only one parameter have special types: you can assign {\f2 Foo()}  to a {\f2 FooMatcher} -typed variable, and assign {\f2 Foo(p)}  to a {\f2 FooMatcherP<p_type>} -typed variable.\par
While you can instantiate a matcher template with reference types, passing the parameters by pointer usually makes your code more readable. If, however, you still want to pass a parameter by reference, be aware that in the failure message generated by the matcher you will see the value of the referenced object but not its address.\par
You can overload matchers with different numbers of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(Blah, a, description_string_1) \{ ... \}\par
MATCHER_P2(Blah, a, b, description_string_2) \{ ... \}\par
}
\par
While it's tempting to always use the {\f2 MATCHER*}  macros when defining a new matcher, you should also consider implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()}  instead (see the recipes that follow), especially if you need to use the matcher a lot. While these approaches require more work, they give you more control on the types of the value being matched and the matcher parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading matchers based on parameter types (as opposed to just based on the number of parameters).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Matchers} \par}
A matcher of argument type {\f2 T}  implements {\f2 {\b testing::MatcherInterface}<T>}  and does two things: it tests whether a value of type {\f2 T}  matches the matcher, and can describe what kind of values it matches. The latter ability is used for generating readable error messages when expectations are violated.\par
The interface looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MatchResultListener \{\par
 public:\par
  ...\par
  // Streams x to the underlying ostream; does nothing if the ostream\par
  // is NULL.\par
  template <typename T>\par
  MatchResultListener& operator<<(const T& x);\par
\par
  // Returns the underlying ostream.\par
  ::std::ostream* stream();\par
\};\par
\par
template <typename T>\par
class MatcherInterface \{\par
 public:\par
  virtual ~MatcherInterface();\par
\par
  // Returns true iff the matcher matches x; also explains the match\par
  // result to 'listener'.\par
  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;\par
\par
  // Describes this matcher to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\par
  // Describes the negation of this matcher to an ostream.\par
  virtual void DescribeNegationTo(::std::ostream* os) const;\par
\};\par
}
\par
If you need a custom matcher but {\f2 Truly()}  is not a good option (for example, you may not be happy with the way {\f2 Truly(predicate)}  describes itself, or you may want your matcher to be polymorphic as {\f2 Eq(value)}  is), you can define a matcher to do whatever you want in two steps: first implement the matcher interface, and then define a factory function to create a matcher instance. The second step is not strictly needed but it makes the syntax of using the matcher nicer.\par
For example, you can define a matcher to test whether an {\f2 int}  is divisible by 7 and then use it like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakeMatcher;\par
using ::testing::Matcher;\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n, MatchResultListener* listener) const \{\par
    return (n % 7) == 0;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "is divisible by 7";\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "is not divisible by 7";\par
  \}\par
\};\par
\par
inline Matcher<int> DivisibleBy7() \{\par
  return MakeMatcher(new DivisibleBy7Matcher);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(DivisibleBy7()));\par
}
\par
You may improve the matcher message by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n,\par
                               MatchResultListener* listener) const \{\par
    const int remainder = n % 7;\par
    if (remainder != 0) \{\par
      *listener << "the remainder is " << remainder;\par
    \}\par
    return remainder == 0;\par
  \}\par
  ...\par
\};\par
}
\par
Then, {\f2 EXPECT_THAT(x, DivisibleBy7());}  may general a message like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: x\par
Expected: is divisible by 7\par
  Actual: 23 (the remainder is 2)\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Matchers} \par}
You've learned how to write your own matchers in the previous recipe. Just one problem: a matcher created using {\f2 MakeMatcher()}  only works for one particular type of arguments. If you want a {\i polymorphic}  matcher that works with arguments of several types (for instance, {\f2 Eq(x)}  can be used to match a {\f2 value}  as long as {\f2 value}  == {\f2 x}  compiles \'96 {\f2 value}  and {\f2 x}  don't have to share the same type), you can learn the trick from {\f2 "gmock/gmock-matchers.h"}  but it's a bit involved.\par
Fortunately, most of the time you can define a polymorphic matcher easily with the help of {\f2 MakePolymorphicMatcher()} . Here's how you can define {\f2 NotNull()}  as an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
using ::testing::NotNull;\par
using ::testing::PolymorphicMatcher;\par
\par
class NotNullMatcher \{\par
 public:\par
  // To implement a polymorphic matcher, first define a COPYABLE class\par
  // that has three members MatchAndExplain(), DescribeTo(), and\par
  // DescribeNegationTo(), like the following.\par
\par
  // In this example, we want to use NotNull() with any pointer, so\par
  // MatchAndExplain() accepts a pointer of any type as its first argument.\par
  // In general, you can define MatchAndExplain() as an ordinary method or\par
  // a method template, or even overload it.\par
  template <typename T>\par
  bool MatchAndExplain(T* p,\par
                       MatchResultListener* /* listener */) const \{\par
    return p != NULL;\par
  \}\par
\par
  // Describes the property of a value matching this matcher.\par
  void DescribeTo(::std::ostream* os) const \{ *os << "is not NULL"; \}\par
\par
  // Describes the property of a value NOT matching this matcher.\par
  void DescribeNegationTo(::std::ostream* os) const \{ *os << "is NULL"; \}\par
\};\par
\par
// To construct a polymorphic matcher, pass an instance of the class\par
// to MakePolymorphicMatcher().  Note the return type.\par
inline PolymorphicMatcher<NotNullMatcher> NotNull() \{\par
  return MakePolymorphicMatcher(NotNullMatcher());\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(NotNull()));  // The argument must be a non-NULL pointer.\par
}
\par
{\b Note:}  Your polymorphic matcher class does {\b not}  need to inherit from {\f2 MatcherInterface}  or any other class, and its methods do {\b not}  need to be virtual.\par
Like in a monomorphic matcher, you may explain the match result by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Cardinalities} \par}
A cardinality is used in {\f2 Times()}  to tell Google {\b Mock} how many times you expect a call to occur. It doesn't have to be exact. For example, you can say {\f2 AtLeast(5)}  or {\f2 Between(2, 4)} .\par
If the built-in set of cardinalities doesn't suit you, you are free to define your own by implementing the following interface (in namespace {\f2 testing} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class CardinalityInterface \{\par
 public:\par
  virtual ~CardinalityInterface();\par
\par
  // Returns true iff call_count calls will satisfy this cardinality.\par
  virtual bool IsSatisfiedByCallCount(int call_count) const = 0;\par
\par
  // Returns true iff call_count calls will saturate this cardinality.\par
  virtual bool IsSaturatedByCallCount(int call_count) const = 0;\par
\par
  // Describes self to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\};\par
}
\par
For example, to specify that a call must occur even number of times, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Cardinality;\par
using ::testing::CardinalityInterface;\par
using ::testing::MakeCardinality;\par
\par
class EvenNumberCardinality : public CardinalityInterface \{\par
 public:\par
  virtual bool IsSatisfiedByCallCount(int call_count) const \{\par
    return (call_count % 2) == 0;\par
  \}\par
\par
  virtual bool IsSaturatedByCallCount(int call_count) const \{\par
    return false;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "called even number of times";\par
  \}\par
\};\par
\par
Cardinality EvenNumber() \{\par
  return MakeCardinality(new EvenNumberCardinality);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(3))\par
      .Times(EvenNumber());\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Actions Quickly} \par}
If the built-in actions don't work for you, and you find it inconvenient to use {\f2 Invoke()} , you can use a macro from the {\f2 ACTION*}  family to quickly define a new action that can be used in your code as if it's a built-in action.\par
By writing {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(name) \{ statements; \}\par
}
 in a namespace scope (i.e. not inside a class or function), you will define an action with the given name that executes the statements. The value returned by {\f2 statements}  will be used as the return value of the action. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as {\f2 argK} . For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(IncrementArg1) \{ return ++(*arg1); \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(IncrementArg1());\par
}
\par
Note that you don't need to specify the types of the mock function arguments. Rest assured that your code is type-safe though: you'll get a compiler error if {\f2 *arg1}  doesn't support the {\f2 ++}  operator, or if the type of {\f2 ++(*arg1)}  isn't compatible with the mock function's return type.\par
Another example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  (*arg2)(5);\par
  Blah();\par
  *arg1 = 0;\par
  return arg0;\par
\}\par
}
 defines an action {\f2 Foo()}  that invokes argument #2 (a function pointer) with 5, calls function {\f2 Blah()} , sets the value pointed to by argument #1 to 0, and returns argument #0.\par
For more convenience and flexibility, you can also use the following pre-defined symbols in the body of {\f2 ACTION} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 argK_type}  \cell }{The type of the K-th (0-based) argument of the mock function  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{All arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{The type of all arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{The return type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{The type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For example, when using an {\f2 ACTION}  as a stub action for mock function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int DoSomething(bool flag, int* ptr);\par
}
 we have: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Pre-defined Symbol}  \cell }{{\b Is Bound To}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0}  \cell }{the value of {\f2 flag}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0_type}  \cell }{the type {\f2 bool}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1}  \cell }{the value of {\f2 ptr}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1_type}  \cell }{the type {\f2 int*}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{the tuple {\f2 (flag, ptr)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{the type {\f2 {\b std::tr1::tuple}<bool, int*>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{the type {\f2 int}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{the type {\f2 int(bool, int*)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Actions Quickly} \par}
Sometimes you'll want to parameterize an action you define. For that we have another macro {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(name, param) \{ statements; \}\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Add, n) \{ return arg0 + n; \}\par
}
 will allow you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns argument #0 + 5.\par
... WillOnce(Add(5));\par
}
\par
For convenience, we use the term {\i arguments}  for the values used to invoke the mock function, and the term {\i parameters}  for the values used to instantiate an action.\par
Note that you don't need to provide the type of the parameter either. Suppose the parameter is named {\f2 param} , you can also use the Google-Mock-defined symbol {\f2 param_type}  to refer to the type of the parameter as inferred by the compiler. For example, in the body of {\f2 ACTION_P(Add, n)}  above, you can write {\f2 n_type}  for the type of {\f2 n} .\par
Google {\b Mock} also provides {\f2 ACTION_P2} , {\f2 ACTION_P3} , and etc to support multi-parameter actions. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P2(ReturnDistanceTo, x, y) \{\par
  double dx = arg0 - x;\par
  double dy = arg1 - y;\par
  return sqrt(dx*dx + dy*dy);\par
\}\par
}
 lets you write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(ReturnDistanceTo(5.0, 26.5));\par
}
\par
You can view {\f2 ACTION}  as a degenerated parameterized action where the number of parameters is 0.\par
You can also easily define actions overloaded on the number of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Plus, a) \{ ... \}\par
ACTION_P2(Plus, a, b) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Restricting the Type of an Argument or Parameter in an ACTION} \par}
For maximum brevity and reusability, the {\f2 ACTION*}  macros don't ask you to provide the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.\par
Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  // Makes sure arg0 can be converted to int.\par
  int n = arg0;\par
  ... use n instead of arg0 here ...\par
\}\par
\par
ACTION_P(Bar, param) \{\par
  // Makes sure the type of arg1 is const char*.\par
  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\par
\par
  // Makes sure param can be converted to bool.\par
  bool flag = param;\par
\}\par
}
 where {\f2 StaticAssertTypeEq}  is a compile-time assertion in Google Test that verifies two types are the same.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Action Templates Quickly} \par}
Sometimes you want to give an action explicit template parameters that cannot be inferred from its value parameters. {\f2 ACTION_TEMPLATE()}  supports that and can be viewed as an extension to {\f2 ACTION()}  and {\f2 ACTION_P*()} .\par
The syntax: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_TEMPLATE(ActionName,\par
                HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),\par
                AND_n_VALUE_PARAMS(p1, ..., p_n)) \{ statements; \}\par
}
\par
defines an action template that takes {\i m}  explicit template parameters and {\i n}  value parameters, where {\i m}  is between 1 and 10, and {\i n}  is between 0 and 10. {\f2 name_i}  is the name of the i-th template parameter, and {\f2 kind_i}  specifies whether it's a {\f2 typename} , an integral constant, or a template. {\f2 p_i}  is the name of the i-th value parameter.\par
Example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // DuplicateArg<k, T>(output) converts the k-th argument of the mock\par
// function to type T and copies it to *output.\par
ACTION_TEMPLATE(DuplicateArg,\par
                // Note the comma between int and k:\par
                HAS_2_TEMPLATE_PARAMS(int, k, typename, T),\par
                AND_1_VALUE_PARAMS(output)) \{\par
  *output = T(std::tr1::get<k>(args));\par
\}\par
}
\par
To create an instance of an action template, write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m>(v1, ..., v_n)\par
}
 where the {\f2 t} s are the template arguments and the {\f2 v} s are the value arguments. The value argument types are inferred by the compiler. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  int n;\par
  EXPECT_CALL(mock, Foo(_, _))\par
      .WillOnce(DuplicateArg<1, unsigned char>(&n));\par
}
\par
If you want to explicitly specify the value argument types, you can provide additional template arguments: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m, u1, ..., u_k>(v1, ..., v_n)\par
}
 where {\f2 u_i}  is the desired type of {\f2 v_i} .\par
{\f2 ACTION_TEMPLATE}  and {\f2 ACTION} /{\f2 ACTION_P*}  can be overloaded on the number of value parameters, but not on the number of template parameters. Without the restriction, the meaning of the following is unclear:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid OverloadedAction<int, bool>(x);\par
}
\par
Are we using a single-template-parameter action where {\f2 bool}  refers to the type of {\f2 x} , or a two-template-parameter action where the compiler is asked to infer the type of {\f2 x} ?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using the ACTION Object's Type} \par}
If you are writing a function that returns an {\f2 ACTION}  object, you'll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Given Definition}  \cell }{{\b Expression}  \cell }{{\b Has Type}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Foo)}  \cell }{{\f2 Foo()}  \cell }{{\f2 FooAction}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Foo, HAS_m_TEMPLATE_PARAMS(...), AND_0_VALUE_PARAMS())}  \cell }{{\f2 Foo<t1, ..., t_m>()}  \cell }{{\f2 FooAction<t1, ..., t_m>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Bar, param)}  \cell }{{\f2 Bar(int_value)}  \cell }{{\f2 BarActionP<int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Bar, HAS_m_TEMPLATE_PARAMS(...), AND_1_VALUE_PARAMS(p1))}  \cell }{{\f2 Bar<t1, ..., t_m>(int_value)}  \cell }{{\f2 FooActionP<t1, ..., t_m, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P2(Baz, p1, p2)}  \cell }{{\f2 Baz(bool_value, int_value)}  \cell }{{\f2 BazActionP2<bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Baz, HAS_m_TEMPLATE_PARAMS(...), AND_2_VALUE_PARAMS(p1, p2))}  \cell }{{\f2 Baz<t1, ..., t_m>(bool_value, int_value)}  \cell }{{\f2 FooActionP2<t1, ..., t_m, bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that we have to pick different suffixes ({\f2 Action} , {\f2 ActionP} , {\f2 ActionP2} , and etc) for actions with different numbers of value parameters, or the action definitions cannot be overloaded on the number of them.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Actions} \par}
While the {\f2 ACTION*}  macros are very convenient, sometimes they are inappropriate. For example, despite the tricks shown in the previous recipes, they don't let you directly specify the types of the mock function arguments and the action parameters, which in general leads to unoptimized compiler error messages that can baffle unfamiliar users. They also don't allow overloading actions based on parameter types without jumping through some hoops.\par
An alternative to the {\f2 ACTION*}  macros is to implement {\f2 {\b testing::ActionInterface}<F>} , where {\f2 F}  is the type of the mock function in which the action will be used. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename F>class ActionInterface \{\par
 public:\par
  virtual ~ActionInterface();\par
\par
  // Performs the action.  Result is the return type of function type\par
  // F, and ArgumentTuple is the tuple of arguments of F.\par
  //\par
  // For example, if F is int(bool, const string&), then Result would\par
  // be int, and ArgumentTuple would be tr1::tuple<bool, const string&>.\par
  virtual Result Perform(const ArgumentTuple& args) = 0;\par
\};\par
\par
using ::testing::_;\par
using ::testing::Action;\par
using ::testing::ActionInterface;\par
using ::testing::MakeAction;\par
\par
typedef int IncrementMethod(int*);\par
\par
class IncrementArgumentAction : public ActionInterface<IncrementMethod> \{\par
 public:\par
  virtual int Perform(const tr1::tuple<int*>& args) \{\par
    int* p = tr1::get<0>(args);  // Grabs the first argument.\par
    return *p++;\par
  \}\par
\};\par
\par
Action<IncrementMethod> IncrementArgument() \{\par
  return MakeAction(new IncrementArgumentAction);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Baz(_))\par
      .WillOnce(IncrementArgument());\par
\par
  int n = 5;\par
  foo.Baz(&n);  // Should return 5 and change n to 6.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Actions} \par}
The previous recipe showed you how to define your own action. This is all good, except that you need to know the type of the function in which the action will be used. Sometimes that can be a problem. For example, if you want to use the action in functions with {\i different}  types (e.g. like {\f2 Return()}  and {\f2 SetArgPointee()} ).\par
If an action can be used in several types of mock functions, we say it's {\i polymorphic} . The {\f2 MakePolymorphicAction()}  function template makes it easy to define such an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
template <typename Impl>\par
PolymorphicAction<Impl> MakePolymorphicAction(const Impl& impl);\par
\par
\}  // namespace testing\par
}
\par
As an example, let's define an action that returns the second argument in the mock function's argument list. The first step is to define an implementation class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ReturnSecondArgumentAction \{\par
 public:\par
  template <typename Result, typename ArgumentTuple>\par
  Result Perform(const ArgumentTuple& args) const \{\par
    // To get the i-th (0-based) argument, use tr1::get<i>(args).\par
    return tr1::get<1>(args);\par
  \}\par
\};\par
}
\par
This implementation class does {\i not}  need to inherit from any particular class. What matters is that it must have a {\f2 Perform()}  method template. This method template takes the mock function's arguments as a tuple in a {\b single}  argument, and returns the result of the action. It can be either {\f2 const}  or not, but must be invokable with exactly one template argument, which is the result type. In other words, you must be able to call {\f2 Perform<R>(args)}  where {\f2 R}  is the mock function's return type and {\f2 args}  is its arguments in a tuple.\par
Next, we use {\f2 MakePolymorphicAction()}  to turn an instance of the implementation class into the polymorphic action we need. It will be convenient to have a wrapper for this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicAction;\par
using ::testing::PolymorphicAction;\par
\par
PolymorphicAction<ReturnSecondArgumentAction> ReturnSecondArgument() \{\par
  return MakePolymorphicAction(ReturnSecondArgumentAction());\par
\}\par
}
\par
Now, you can use this polymorphic action the same way you use the built-in ones:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, int(bool flag, int n));\par
  MOCK_METHOD3(DoThat, string(int x, const char* str1, const char* str2));\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(ReturnSecondArgument());\par
  EXPECT_CALL(foo, DoThat(_, _, _))\par
      .WillOnce(ReturnSecondArgument());\par
  ...\par
  foo.DoThis(true, 5);         // Will return 5.\par
  foo.DoThat(1, "Hi", "Bye");  // Will return "Hi".\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Teaching Google {\b Mock} How to Print Your Values} \par}
When an uninteresting or unexpected call occurs, Google {\b Mock} prints the argument values and the stack trace to help you debug. Assertion macros like {\f2 EXPECT_THAT}  and {\f2 EXPECT_EQ}  also print the values in question when the assertion fails. Google {\b Mock} and Google Test do this using Google Test's user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out. {\f2 Google Test's advanced guide} explains how to extend the printer to do a better job at printing your particular type than to dump the bytes. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentation{\tc \v Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAEND}
{\bkmkend AAAAAAAEND}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all documentation wiki pages for Google {\b Mock} {\b 1.6} {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b if you use a released version of Google {\b Mock}, please read the documentation for that specific version instead.} {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
ForDummies \'96 start here if you are new to Google {\b Mock}.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
CheatSheet \'96 a quick reference.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
CookBook \'96 recipes for doing various tasks using Google {\b Mock}.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
FrequentlyAskedQuestions \'96 check here before asking a question on the mailing list.\par}
\par}
To contribute code to Google {\b Mock}, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Pump Manual} \'96 how we generate some of Google {\b Mock}'s source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
ForDummies{\tc \v ForDummies}\par \pard\plain 
{\bkmkstart AAAAAAAENE}
{\bkmkend AAAAAAAENE}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
({\b Note:}  If you get compiler errors that you don't understand, be sure to consult {\f2 Google Mock Doctor}.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Is Google C++ Mocking Framework?} \par}
When you write a prototype or test, often it's not feasible or wise to rely on real objects entirely. A {\b mock object}  implements the same interface as a real object (so it can be used as one), but lets you specify at run time how it will be used and what it should do (which methods will be called? in which order? how many times? with what arguments? what will they return? etc).\par
{\b Note:}  It is easy to confuse the term {\i fake objects}  with mock objects. Fakes and mocks actually mean very different things in the Test-Driven Development (TDD) community:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fake}  objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocks}  are objects pre-programmed with {\i expectations} , which form a specification of the calls they are expected to receive.\par}
If all this seems too abstract for you, don't worry - the most important thing to remember is that a mock allows you to check the {\i interaction}  between itself and code that uses it. The difference between fakes and mocks will become much clearer once you start to use mocks.\par
{\b Google C++ Mocking Framework}  (or {\b Google {\b Mock}}  for short) is a library (sometimes we also call it a "framework" to make it sound cool) for creating mock classes and using them. It does to C++ what {\f2 jMock} and {\f2 EasyMock} do to Java.\par
Using Google {\b Mock} involves three basic steps:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use some simple macros to describe the interface you want to mock, and they will expand to the implementation of your mock class;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects and specify its expectations and behavior using an intuitive syntax;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects. Google {\b Mock} will catch any violation of the expectations as soon as it arises.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Why Google {\b Mock}?} \par}
While mock objects help you remove unnecessary dependencies in tests and make them fast and reliable, using mocks manually in C++ is {\i hard} :\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Someone has to implement the mocks. The job is usually tedious and error-prone. No wonder people go great distance to avoid it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The quality of those manually written mocks is a bit, uh, unpredictable. You may see some really polished ones, but you may also see some that were hacked up in a hurry and have all sorts of ad hoc restrictions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The knowledge you gained from using one mock doesn't transfer to the next.\par}
In contrast, Java and Python programmers have some fine mock frameworks, which automate the creation of mocks. As a result, mocking is a proven effective technique and widely adopted practice in those communities. Having the right tool absolutely makes the difference.\par
Google {\b Mock} was built to help C++ programmers. It was inspired by {\f2 jMock} and {\f2 EasyMock}, but designed with C++'s specifics in mind. It is your friend if any of the following problems is bothering you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You are stuck with a sub-optimal design and wish you had done more prototyping before it was too late, but prototyping in C++ is by no means "rapid".\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are slow as they depend on too many libraries or use expensive resources (e.g. a database).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are brittle as some resources they use are unreliable (e.g. the network).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test how your code handles a failure (e.g. a file checksum error), but it's not easy to cause one.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You need to make sure that your module interacts with other modules in the right way, but it's hard to observe the interaction; therefore you resort to observing the side effects at the end of the action, which is awkward at best.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to "mock out" your dependencies, except that they don't have mock implementations yet; and, frankly, you aren't thrilled by some of those hand-written mocks.\par}
We encourage you to use Google {\b Mock} as:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i design}  tool, for it lets you experiment with your interface design early and often. More iterations lead to better designs!\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i testing}  tool to cut your tests' outbound dependencies and probe the interaction between your module and its collaborators.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting Started} \par}
Using Google {\b Mock} is easy! Inside your C++ source file, just {\f2 #include}  {\f2 "gtest/gtest.h"}  and {\f2 "gmock/gmock.h"} , and you are ready to go.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 A Case for {\b Mock} Turtles} \par}
Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, {\f2 Turtle} ) and code to that interface:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Turtle \{\par
  ...\par
  virtual ~Turtle() \{\}\par
  virtual void PenUp() = 0;\par
  virtual void PenDown() = 0;\par
  virtual void Forward(int distance) = 0;\par
  virtual void Turn(int degrees) = 0;\par
  virtual void GoTo(int x, int y) = 0;\par
  virtual int GetX() const = 0;\par
  virtual int GetY() const = 0;\par
\};\par
}
\par
(Note that the destructor of {\f2 Turtle}  {\b must}  be virtual, as is the case for {\b all}  classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you'll get corrupted program states like memory leaks.)\par
You can control whether the turtle's movement will leave a trace using {\f2 PenUp()}  and {\f2 PenDown()} , and control its movement using {\f2 Forward()} , {\f2 Turn()} , and {\f2 GoTo()} . Finally, {\f2 GetX()}  and {\f2 GetY()}  tell you the current position of the turtle.\par
Your program will normally use a real implementation of this interface. In tests, you can use a mock implementation instead. This allows you to easily check what drawing primitives your program is calling, with what arguments, and in which order. Tests written this way are much more robust (they won't break because your new machine does anti-aliasing differently), easier to read and maintain (the intent of a test is expressed in the code, not in some binary images), and run {\i much, much faster} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the {\b Mock} Class} \par}
If you are lucky, the mocks you need to use have already been implemented by some nice people. If, however, you find yourself in the position to write a mock class, relax - Google {\b Mock} turns this task into a fun game! (Well, almost.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Define It} \par}
Using the {\f2 Turtle}  interface as example, here are the simple steps you need to follow:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class {\f2 MockTurtle}  from {\f2 Turtle} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Take a {\i virtual}  function of {\f2 Turtle}  (while it's possible to {\f2 mock non-virtual methods using templates}, it's much more involved). Count how many arguments it has.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the {\f2 public:}  section of the child class, write {\f2 MOCK_METHODn();}  (or {\f2 MOCK_CONST_METHODn();}  if you are mocking a {\f2 const}  method), where {\f2 n}  is the number of the arguments; if you counted wrong, shame on you, and a compiler error will tell you so.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Now comes the fun part: you take the function signature, cut-and-paste the {\i function name}  as the {\i first}  argument to the macro, and leave what's left as the {\i second}  argument (in case you're curious, this is the {\i type of the function} ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat until all virtual functions you want to mock are done.\par}
After the process, you should have something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"  // Brings in Google Mock.\par
class MockTurtle : public Turtle \{\par
 public:\par
  ...\par
  MOCK_METHOD0(PenUp, void());\par
  MOCK_METHOD0(PenDown, void());\par
  MOCK_METHOD1(Forward, void(int distance));\par
  MOCK_METHOD1(Turn, void(int degrees));\par
  MOCK_METHOD2(GoTo, void(int x, int y));\par
  MOCK_CONST_METHOD0(GetX, int());\par
  MOCK_CONST_METHOD0(GetY, int());\par
\};\par
}
\par
You don't need to define these mock methods somewhere else - the {\f2 MOCK_METHOD*}  macros will generate the definitions for you. It's that simple! Once you get the hang of it, you can pump out mock classes faster than your source-control system can handle your check-ins.\par
{\b Tip:}  If even this is too much work for you, you'll find the {\f2 gmock_gen.py}  tool in Google {\b Mock}'s {\f2 scripts/generator/}  directory (courtesy of the {\f2 cppclean} project) useful. This command-line tool requires that you have Python 2.4 installed. You give it a C++ file and the name of an abstract class defined in it, and it will print the definition of the mock class for you. Due to the complexity of the C++ language, this script may not always work, but it can be quite handy when it does. For more details, read the {\f2 user documentation}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Where to Put It} \par}
When you define a mock class, you need to decide where to put its definition. Some people put it in a {\f2 *_test.cc} . This is fine when the interface being mocked (say, {\f2 Foo} ) is owned by the same person or team. Otherwise, when the owner of {\f2 Foo}  changes it, your test could break. (You can't really expect {\f2 Foo} 's maintainer to fix every test that uses {\f2 Foo} , can you?)\par
So, the rule of thumb is: if you need to mock {\f2 Foo}  and it's owned by others, define the mock class in {\f2 Foo} 's package (better, in a {\f2 testing}  sub-package such that you can clearly separate production code and testing utilities), and put it in a {\f2 mock_foo.h} . Then everyone can reference {\f2 mock_foo.h}  from their tests. If {\f2 Foo}  ever changes, there is only one copy of {\f2 {\b MockFoo}}  to change, and only tests that depend on the changed methods need to be fixed.\par
Another way to do it: you can introduce a thin layer {\f2 FooAdaptor}  on top of {\f2 Foo}  and code to this new interface. Since you own {\f2 FooAdaptor} , you can absorb changes in {\f2 Foo}  much more easily. While this is more work initially, carefully choosing the adaptor interface can make your code easier to write and more readable (a net win in the long run), as you can choose {\f2 FooAdaptor}  to fit your specific domain much better than {\f2 Foo}  does.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
Once you have a mock class, using it is easy. The typical work flow is:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names from the {\f2 testing}  namespace such that you can use them unqualified (You only have to do it once per file. Remember that namespaces are a good idea and good for your health.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Specify your expectations on them (How many times will a method be called? With what arguments? What should it do? etc.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise some code that uses the mocks; optionally, check the result using Google Test assertions. If a mock method is called more than expected or with wrong arguments, you'll get an error immediately.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock is destructed, Google {\b Mock} will automatically check whether all expectations on it have been satisfied.\par}
Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "path/to/mock-turtle.h"\par
#include "gmock/gmock.h"\par
#include "gtest/gtest.h"\par
using ::testing::AtLeast;                     // #1\par
\par
TEST(PainterTest, CanDrawSomething) \{\par
  MockTurtle turtle;                          // #2\par
  EXPECT_CALL(turtle, PenDown())              // #3\par
      .Times(AtLeast(1));\par
\par
  Painter painter(&turtle);                   // #4\par
\par
  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));\par
\}                                             // #5\par
\par
int main(int argc, char** argv) \{\par
  // The following line must be executed to initialize Google Mock\par
  // (and Google Test) before running the tests.\par
  ::testing::InitGoogleMock(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
As you might have guessed, this test checks that {\f2 PenDown()}  is called at least once. If the {\f2 painter}  object didn't call this method, your test will fail with a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/my_test.cc:119: Failure\par
Actual function call count doesn't match this expectation:\par
Actually: never called;\par
Expected: called at least once.\par
}
\par
{\b Tip 1:}  If you run the test from an Emacs buffer, you can hit {\f2 <Enter>}  on the line number displayed in the error message to jump right to the failed expectation.\par
{\b Tip 2:}  If your mock objects are never deleted, the final verification won't happen. Therefore it's a good idea to use a heap leak checker in your tests when you allocate mocks on the heap.\par
{\b Important note:}  Google {\b Mock} requires expectations to be set {\b before}  the mock functions are called, otherwise the behavior is {\b undefined} . In particular, you mustn't interleave {\f2 EXPECT_CALL()} s and calls to the mock functions.\par
This means {\f2 EXPECT_CALL()}  should be read as expecting that a call will occur {\i in the future} , not that a call has occurred. Why does Google {\b Mock} work like that? Well, specifying the expectation beforehand allows Google {\b Mock} to report a violation as soon as it arises, when the context (stack trace, etc) is still available. This makes debugging much easier.\par
Admittedly, this test is contrived and doesn't do much. You can easily achieve the same effect without using Google {\b Mock}. However, as we shall reveal soon, Google {\b Mock} allows you to do {\i much more}  with the mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} with Any Testing Framework} \par}
If you want to use something other than Google Test (e.g. {\f2 CppUnit} or {\f2 CxxTest}) as your testing framework, just change the {\f2 main()}  function in the previous section to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // The following line causes Google Mock to throw an exception on failure,\par
  // which will be interpreted by your testing framework as a test failure.\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  ::testing::InitGoogleMock(&argc, argv);\par
  ... whatever your testing framework requires ...\par
\}\par
}
\par
This approach has a catch: it makes Google {\b Mock} throw an exception from a mock object's destructor sometimes. With some compilers, this sometimes causes the test program to crash. You'll still be able to notice that the test has failed, but it's not a graceful failure.\par
A better solution is to use Google Test's {\f2 event listener API} to report a test failure to your testing framework properly. You'll need to implement the {\f2 OnTestPartResult()}  method of the event listener interface, but it should be straightforward.\par
If this turns out to be too much work, we suggest that you stick with Google Test, which works with Google {\b Mock} seamlessly (in fact, it is technically part of Google {\b Mock}.). If there is a reason that you cannot use Google Test, please let us know.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
The key to using a mock object successfully is to set the {\i right expectations}  on it. If you set the expectations too strict, your test will fail as the result of unrelated changes. If you set them too loose, bugs can slip through. You want to do it just right such that your test can catch exactly the kind of bugs you intend it to catch. Google {\b Mock} provides the necessary means for you to do it "just right."\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 General Syntax} \par}
In Google {\b Mock} we use the {\f2 EXPECT_CALL()}  macro to set an expectation on a mock method. The general syntax is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .Times(cardinality)\par
    .WillOnce(action)\par
    .WillRepeatedly(action);\par
}
\par
The macro has two arguments: first the mock object, and then the method and its arguments. Note that the two are separated by a comma ({\f2 ,} ), not a period ({\f2 .} ). (Why using a comma? The answer is that it was necessary for technical reasons.)\par
The macro can be followed by some optional {\i clauses}  that provide more information about the expectation. We'll discuss how each clause works in the coming sections.\par
This syntax is designed to make an expectation read like English. For example, you can probably guess that\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .Times(5)\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(150))\par
    .WillRepeatedly(Return(200));\par
}
\par
says that the {\f2 turtle}  object's {\f2 GetX()}  method will be called five times, it will return 100 the first time, 150 the second time, and then 200 every time. Some people like to call this style of syntax a Domain-Specific Language (DSL).\par
{\b Note:}  Why do we use a macro to do this? It serves two purposes: first it makes expectations easily identifiable (either by {\f2 grep}  or by a human reader), and second it allows Google {\b Mock} to include the source file location of a failed expectation in messages, making debugging easier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers: What Arguments Do We Expect?} \par}
When a mock function takes arguments, we must specify what arguments we are expecting; for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects the turtle to move forward by 100 units.\par
EXPECT_CALL(turtle, Forward(100));\par
}
\par
Sometimes you may not want to be too specific (Remember that talk about tests being too rigid? Over specification leads to brittle tests and obscures the intent of tests. Therefore we encourage you to specify only what's necessary - no more, no less.). If you care to check that {\f2 Forward()}  will be called but aren't interested in its actual argument, write {\f2 _}  as the argument, which means "anything goes":\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
// Expects the turtle to move forward.\par
EXPECT_CALL(turtle, Forward(_));\par
}
\par
{\f2 _}  is an instance of what we call {\b matchers} . A matcher is like a predicate and can test whether an argument is what we'd expect. You can use a matcher inside {\f2 EXPECT_CALL()}  wherever a function argument is expected.\par
A list of built-in matchers can be found in the CheatSheet. For example, here's the {\f2 Ge}  (greater than or equal) matcher:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;...\par
EXPECT_CALL(turtle, Forward(Ge(100)));\par
}
\par
This checks that the turtle will be told to go forward by at least 100 units.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Cardinalities: How Many Times Will It Be Called?} \par}
The first clause we can specify following an {\f2 EXPECT_CALL()}  is {\f2 Times()} . We call its argument a {\b cardinality}  as it tells {\i how many times}  the call should occur. It allows us to repeat an expectation many times without actually writing it as many times. More importantly, a cardinality can be "fuzzy", just like a matcher can be. This allows a user to express the intent of a test exactly.\par
An interesting special case is when we say {\f2 Times(0)} . You may have guessed - it means that the function shouldn't be called with the given arguments at all, and Google {\b Mock} will report a Google Test failure whenever the function is (wrongfully) called.\par
We've seen {\f2 AtLeast(n)}  as an example of fuzzy cardinalities earlier. For the list of built-in cardinalities you can use, see the CheatSheet.\par
The {\f2 Times()}  clause can be omitted. {\b If you omit {\f2 Times()} , Google {\b Mock} will infer the cardinality for you.}  The rules are easy to remember:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\b neither}  {\f2 WillOnce()}  {\b nor}  {\f2 WillRepeatedly()}  is in the {\f2 EXPECT_CALL()} , the inferred cardinality is {\f2 Times(1)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's but {\b no}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 1, the cardinality is {\f2 Times(n)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's and {\b one}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 0, the cardinality is {\f2 Times(AtLeast(n))} .\par}
{\b Quick quiz:}  what do you think will happen if a function is expected to be called twice but actually called four times?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Actions: What Should It Do?} \par}
Remember that a mock object doesn't really have a working implementation? We as users have to tell it what to do when a method is invoked. This is easy in Google {\b Mock}.\par
First, if the return type of a mock function is a built-in type or a pointer, the function has a {\b default action}  (a {\f2 void}  function will just return, a {\f2 bool}  function will return {\f2 false} , and other functions will return 0). If you don't say anything, this behavior will be used.\par
Second, if a mock function doesn't have a default action, or the default action doesn't suit you, you can specify the action to be taken each time the expectation matches using a series of {\f2 WillOnce()}  clauses followed by an optional {\f2 WillRepeatedly()} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillOnce(Return(300));\par
}
\par
This says that {\f2 turtle.GetX()}  will be called {\i exactly three times}  (Google {\b Mock} inferred this from how many {\f2 WillOnce()}  clauses we've written, since we didn't explicitly write {\f2 Times()} ), and will return 100, 200, and 300 respectively.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillRepeatedly(Return(300));\par
}
\par
says that {\f2 turtle.GetY()}  will be called {\i at least twice}  (Google {\b Mock} knows this as we've written two {\f2 WillOnce()}  clauses and a {\f2 WillRepeatedly()}  while having no explicit {\f2 Times()} ), will return 100 the first time, 200 the second time, and 300 from the third time on.\par
Of course, if you explicitly write a {\f2 Times()} , Google {\b Mock} will not try to infer the cardinality itself. What if the number you specified is larger than there are {\f2 WillOnce()}  clauses? Well, after all {\f2 WillOnce()} s are used up, Google {\b Mock} will do the {\i default}  action for the function every time (unless, of course, you have a {\f2 WillRepeatedly()} .).\par
What can we do inside {\f2 WillOnce()}  besides {\f2 Return()} ? You can return a reference using {\f2 ReturnRef(variable)} , or invoke a pre-defined function, among {\f2 others}.\par
{\b Important note:}  The {\f2 EXPECT_CALL()}  statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int n = 100;\par
EXPECT_CALL(turtle, GetX())\par
.Times(4)\par
.WillRepeatedly(Return(n++));\par
}
\par
Instead of returning 100, 101, 102, ..., consecutively, this mock function will always return 100 as {\f2 n++}  is only evaluated once. Similarly, {\f2 Return(new Foo)}  will create a new {\f2 Foo}  object when the {\f2 EXPECT_CALL()}  is executed, and will return the same pointer every time. If you want the side effect to happen every time, you need to define a custom action, which we'll teach in the CookBook.\par
Time for another quiz! What do you think the following means?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
.Times(4)\par
.WillOnce(Return(100));\par
}
\par
Obviously {\f2 turtle.GetY()}  is expected to be called four times. But if you think it will return 100 every time, think twice! Remember that one {\f2 WillOnce()}  clause will be consumed each time the function is invoked and the default action will be taken afterwards. So the right answer is that {\f2 turtle.GetY()}  will return 100 the first time, but {\b return 0 from the second time on} , as returning 0 is the default action for {\f2 int}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Multiple Expectations} \par}
So far we've only shown examples where you have a single expectation. More realistically, you're going to specify expectations on multiple mock methods, which may be from multiple mock objects.\par
By default, when a mock method is invoked, Google {\b Mock} will search the expectations in the {\b reverse order}  they are defined, and stop when an active expectation that matches the arguments is found (you can think of it as "newer rules override older ones."). If the matching expectation cannot take any more calls, you will get an upper-bound-violated failure. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, Forward(_));  // #1\par
EXPECT_CALL(turtle, Forward(10))  // #2\par
    .Times(2);\par
}
\par
If {\f2 Forward(10)}  is called three times in a row, the third time it will be an error, as the last matching expectation (#2) has been saturated. If, however, the third {\f2 Forward(10)}  call is replaced by {\f2 Forward(20)} , then it would be OK, as now #1 will be the matching expectation.\par
{\b Side note:}  Why does Google {\b Mock} search for a match in the {\i reverse}  order of the expectations? The reason is that this allows a user to set up the default expectations in a mock object's constructor or the test fixture's set-up phase and then customize the mock by writing more specific expectations in the test body. So, if you have two expectations on the same method, you want to put the one with more specific matchers {\b after}  the other, or the more specific rule would be shadowed by the more general one that comes after it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ordered vs Unordered Calls} \par}
By default, an expectation can match a call even though an earlier expectation hasn't been satisfied. In other words, the calls don't have to occur in the order the expectations are specified.\par
Sometimes, you may want all the expected calls to occur in a strict order. To say this in Google {\b Mock} is easy:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;...\par
TEST(FooTest, DrawsLineSegment) \{\par
  ...\par
  \{\par
    InSequence dummy;\par
\par
    EXPECT_CALL(turtle, PenDown());\par
    EXPECT_CALL(turtle, Forward(100));\par
    EXPECT_CALL(turtle, PenUp());\par
  \}\par
  Foo();\par
\}\par
}
\par
By creating an object of type {\f2 InSequence} , all expectations in its scope are put into a {\i sequence}  and have to occur {\i sequentially} . Since we are just relying on the constructor and destructor of this object to do the actual work, its name is really irrelevant.\par
In this example, we test that {\f2 Foo()}  calls the three expected functions in the order as written. If a call is made out-of-order, it will be an error.\par
(What if you care about the relative order of some of the calls, but not all of them? Can you specify an arbitrary partial order? The answer is ... yes! If you are impatient, the details can be found in the CookBook.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 All Expectations Are Sticky (Unless Said Otherwise)} \par}
Now let's do a quick quiz to see how well you can use this mock stuff already. How would you test that the turtle is asked to go to the origin {\i exactly twice}  (you want to ignore any other instructions it receives)?\par
After you've come up with your answer, take a look at ours and compare notes (solve it yourself first - don't cheat!):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, GoTo(_, _))  // #1\par
    .Times(AnyNumber());\par
EXPECT_CALL(turtle, GoTo(0, 0))  // #2\par
    .Times(2);\par
}
\par
Suppose {\f2 turtle.GoTo(0, 0)}  is called three times. In the third time, Google {\b Mock} will see that the arguments match expectation #2 (remember that we always pick the last matching expectation). Now, since we said that there should be only two such calls, Google {\b Mock} will report an error immediately. This is basically what we've told you in the "Using Multiple Expectations" section above.\par
This example shows that {\b expectations in Google {\b Mock} are "sticky" by default} , in the sense that they remain active even after we have reached their invocation upper bounds. This is an important rule to remember, as it affects the meaning of the spec, and is {\b different}  to how it's done in many other mocking frameworks (Why'd we do that? Because we think our rule makes the common cases easier to express and understand.).\par
Simple? Let's see if you've really understood it: what does the following code say?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
      .WillOnce(Return(10*i));\par
\}\par
}
\par
If you think it says that {\f2 turtle.GetX()}  will be called {\f2 n}  times and will return 10, 20, 30, ..., consecutively, think twice! The problem is that, as we said, expectations are sticky. So, the second time {\f2 turtle.GetX()}  is called, the last (latest) {\f2 EXPECT_CALL()}  statement will match, and will immediately lead to an "upper bound exceeded" error - this piece of code is not very useful!\par
One correct way of saying that {\f2 turtle.GetX()}  will return 10, 20, 30, ..., is to explicitly say that the expectations are {\i not}  sticky. In other words, they should {\i retire}  as soon as they are saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(10*i))\par
    .RetiresOnSaturation();\par
\}\par
}
\par
And, there's a better way to do it: in this case, we expect the calls to occur in a specific order, and we line up the actions to match the order. Since the order is important here, we should make it explicit using a sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
...\par
\{\par
  InSequence s;\par
\par
  for (int i = 1; i <= n; i++) \{\par
    EXPECT_CALL(turtle, GetX())\par
        .WillOnce(Return(10*i))\par
        .RetiresOnSaturation();\par
  \}\par
\}\par
}
\par
By the way, the other situation where an expectation may {\i not}  be sticky is when it's in a sequence - as soon as another expectation that comes after it in the sequence has been used, it automatically retires (and will never be used to match any call).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Uninteresting Calls} \par}
A mock object may have many methods, and not all of them are that interesting. For example, in some tests we may not care about how many times {\f2 GetX()}  and {\f2 GetY()}  get called.\par
In Google {\b Mock}, if you are not interested in a method, just don't say anything about it. If a call to this method occurs, you'll see a warning in the test output, but it won't be a failure.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Now?} \par}
Congratulations! You've learned enough about Google {\b Mock} to start using it. Now, you might want to join the {\f2 googlemock} discussion group and actually write some tests using Google {\b Mock} - it will be fun. Hey, it may even be addictive - you've been warned.\par
Then, if you feel like increasing your mock quotient, you should move on to the CookBook. You can learn many advanced features of Google {\b Mock} there \'96 and advance your level of enjoyment and testing bliss. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
FrequentlyAskedQuestions{\tc \v FrequentlyAskedQuestions}\par \pard\plain 
{\bkmkstart AAAAAAAENF}
{\bkmkend AAAAAAAENF}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Please send your questions to the {\f2 googlemock} discussion group. If you need help with compiler errors, make sure you have tried Google Mock Doctor first.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When I call a method on my mock object, the method for the real object is invoked instead. What's the problem?} \par}
In order for a method to be mocked, it must be {\i virtual} , unless you use the {\f2 high-perf dependency injection technique}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I wrote some matchers. After I upgraded to a new version of Google {\b Mock}, they no longer compile. What's going on?} \par}
After version 1.4.0 of Google {\b Mock} was released, we had an idea on how to make it easier to write matchers that can generate informative messages efficiently. We experimented with this idea and liked what we saw. Therefore we decided to implement it.\par
Unfortunately, this means that if you have defined your own matchers by implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()} , your definitions will no longer compile. Matchers defined using the {\f2 MATCHER*}  family of macros are not affected.\par
Sorry for the hassle if your matchers are affected. We believe it's in everyone's long-term interest to make this change sooner than later. Fortunately, it's usually not hard to migrate an existing matcher to the new API. Here's what you need to do:\par
If you wrote your matcher like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
you'll need to change it to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
 (i.e. rename {\f2 Matches()}  to {\f2 MatchAndExplain()}  and give it a second argument of type {\f2 MatchResultListener*} .)\par
If you were also using {\f2 ExplainMatchResultTo()}  to improve the matcher message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the lastest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
\par
  virtual void ExplainMatchResultTo(MyType value,\par
                                    ::std::ostream* os) const \{\par
    // Prints some helpful information to os to help\par
    // a user understand why value matches (or doesn't match).\par
    *os << "the Foo property is " << value.GetFoo();\par
  \}\par
  ...\par
\};\par
}
\par
you should move the logic of {\f2 ExplainMatchResultTo()}  into {\f2 MatchAndExplain()} , using the {\f2 MatchResultListener}  argument where the {\f2 ::std::ostream}  was used: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Foo property is " << value.GetFoo();\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
If your matcher is defined using {\f2 MakePolymorphicMatcher()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you should rename the {\f2 Matches()}  method to {\f2 MatchAndExplain()}  and add a {\f2 MatchResultListener*}  argument (the same as what you need to do for matchers defined by implementing {\f2 MatcherInterface} ): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
If your polymorphic matcher uses {\f2 ExplainMatchResultTo()}  for better failure messages: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
void ExplainMatchResultTo(const MyGreatMatcher& matcher,\par
                          MyType value,\par
                          ::std::ostream* os) \{\par
  // Prints some helpful information to os to help\par
  // a user understand why value matches (or doesn't match).\par
  *os << "the Bar property is " << value.GetBar();\par
\}\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you'll need to move the logic inside {\f2 ExplainMatchResultTo()}  to {\f2 MatchAndExplain()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Bar property is " << value.GetBar();\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
For more information, you can read these {\f2 two} {\f2 recipes} from the cookbook. As always, you are welcome to post questions on {\f2 googlemock@googlegroups.com}  if you need any help.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When using Google {\b Mock}, do I have to use Google Test as the testing framework? I have my favorite testing framework and don't want to switch.} \par}
Google {\b Mock} works out of the box with Google Test. However, it's easy to configure it to work with any testing framework of your choice. {\f2 Here} is how.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How am I supposed to make sense of these horrible template errors?} \par}
If you are confused by the compiler errors gcc threw at you, try consulting the {\i Google {\b Mock} Doctor}  tool first. What it does is to scan stdin for gcc error messages, and spit out diagnoses on the problems (we call them diseases) your code has.\par
To "install", run command: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid alias gmd='<path to googlemock>/scripts/gmock_doctor.py'\par
}
\par
To use it, do: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <your-favorite-build-command> <your-test> 2>&1 | gmd\par
}
\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make my_test 2>&1 | gmd\par
}
\par
Or you can run {\f2 gmd}  and copy-n-paste gcc's error messages to it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I mock a variadic function?} \par}
You cannot mock a variadic function (i.e. a function taking ellipsis ({\f2 ...} ) arguments) directly in Google {\b Mock}.\par
The problem is that in general, there is {\i no way}  for a mock object to know how many arguments are passed to the variadic method, and what the arguments' types are. Only the {\i author of the base class}  knows the protocol, and we cannot look into his head.\par
Therefore, to mock such a function, the {\i user}  must teach the mock object how to figure out the number of arguments and their types. One way to do it is to provide overloaded versions of the function.\par
Ellipsis arguments are inherited from C and not really a C++ feature. They are unsafe to use and don't work with arguments that have constructors or destructors. Therefore we recommend to avoid them in C++ as much as possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MSVC gives me warning C4301 or C4373 when I define a mock method with a const parameter. Why?} \par}
If you compile this using Microsoft Visual C++ 2005 SP1: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(const int i) = 0;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Bar, void(const int i));\par
\};\par
}
 You may get the following warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4301: 'MockFoo::Bar': overriding virtual function only differs from 'Foo::Bar' by const/volatile qualifier\par
}
\par
This is a MSVC bug. The same code compiles fine with gcc ,for example. If you use Visual C++ 2008 SP1, you would get the warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4373: 'MockFoo::Bar': virtual function overrides 'Foo::Bar', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers\par
}
\par
In C++, if you {\i declare}  a function with a {\f2 const}  parameter, the {\f2 const}  modifier is {\i ignored} . Therefore, the {\f2 Foo}  base class above is equivalent to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(int i) = 0;  // int or const int?  Makes no difference.\par
\};\par
}
\par
In fact, you can {\i declare}  Bar() with an {\f2 int}  parameter, and {\i define}  it with a {\f2 const int}  parameter. The compiler will still match them up.\par
Since making a parameter {\f2 const}  is meaningless in the method {\i declaration} , we recommend to remove it in both {\f2 Foo}  and {\f2 {\b MockFoo}} . That should workaround the VC bug.\par
Note that we are talking about the {\i top-level}  {\f2 const}  modifier here. If the function parameter is passed by pointer or reference, declaring the {\i pointee}  or {\i referee}  as {\f2 const}  is still meaningful. For example, the following two declarations are {\i not}  equivalent: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Bar(int* p);        // Neither p nor *p is const.\par
void Bar(const int* p);  // p is not const, but *p is.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a huge mock class, and Microsoft Visual C++ runs out of memory when compiling it. What can I do?} \par}
We've noticed that when the {\f2 /clr}  compiler flag is used, Visual C++ uses 5~6 times as much memory when compiling a mock class. We suggest to avoid {\f2 /clr}  when compiling native C++ mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I can't figure out why Google {\b Mock} thinks my expectations are not satisfied. What should I do?} \par}
You might want to run your test with {\f2 --gmock_verbose=info} . This flag lets Google {\b Mock} print a trace of every mock function call it receives. By studying the trace, you'll gain insights on why the expectations you set are not met.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I assert that a function is NEVER called?} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .Times(0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a failed test where Google {\b Mock} tells me TWICE that a particular expectation is not satisfied. Isn't this redundant?} \par}
When Google {\b Mock} detects a failure, it prints relevant information (the mock function arguments, the state of relevant expectations, and etc) to help the user debug. If another failure is detected, Google {\b Mock} will do the same, including printing the state of relevant expectations.\par
Sometimes an expectation's state didn't change between two failures, and you'll see the same description of the state twice. They are however {\i not}  redundant, as they refer to {\i different points in time} . The fact they are the same {\i is}  interesting information.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I get a heap check failure when using a mock object, but using a real object is fine. What can be wrong?} \par}
Does the class (hopefully a pure interface) you are mocking have a virtual destructor?\par
Whenever you derive from a base class, make sure its destructor is virtual. Otherwise Bad Things will happen. Consider the following code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Base \{\par
 public:\par
  // Not virtual, but should be.\par
  ~Base() \{ ... \}\par
  ...\par
\};\par
\par
class Derived : public Base \{\par
 public:\par
  ...\par
 private:\par
  std::string value_;\par
\};\par
\par
...\par
  Base* p = new Derived;\par
  ...\par
  delete p;  // Surprise! ~Base() will be called, but ~Derived() will not\par
             // - value_ is leaked.\par
}
\par
By changing {\f2 ~Base()}  to virtual, {\f2 ~Derived()}  will be correctly called when {\f2 delete p}  is executed, and the heap checker will be happy.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The "newer expectations override older ones" rule makes writing expectations awkward. Why does Google {\b Mock} do that?} \par}
When people complain about this, often they are referring to code like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  However, I have to write the expectations in the\par
// reverse order.  This sucks big time!!!\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .RetiresOnSaturation();\par
}
\par
The problem is that they didn't pick the {\b best}  way to express the test's intent.\par
By default, expectations don't have to be matched in {\i any}  particular order. If you want them to match in a certain order, you need to be explicit. This is Google {\b Mock}'s (and jMock's) fundamental philosophy: it's easy to accidentally over-specify your tests, and we want to make it harder to do so.\par
There are two better ways to write the test spec. You could either put the expectations in sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  Using a sequence, we can write the expectations\par
// in their natural order.\par
\{\par
  InSequence s;\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(1))\par
      .RetiresOnSaturation();\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(2))\par
      .RetiresOnSaturation();\par
\}\par
}
\par
or you can put the sequence of actions in the same expectation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
}
\par
Back to the original questions: why does Google {\b Mock} search the expectations (and {\f2 ON_CALL} s) from back to front? Because this allows a user to set up a mock's behavior for the common case early (e.g. in the mock's constructor or the test fixture's set-up phase) and customize it with more specific rules later. If Google {\b Mock} searches from front to back, this very useful pattern won't be possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google {\b Mock} prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL. Would it be reasonable not to show the warning in this case?} \par}
When choosing between being neat and being safe, we lean toward the latter. So the answer is that we think it's better to show the warning.\par
Often people write {\f2 ON_CALL} s in the mock object's constructor or {\f2 SetUp()} , as the default behavior rarely changes from test to test. Then in the test body they set the expectations, which are often different for each test. Having an {\f2 ON_CALL}  in the set-up part of a test doesn't mean that the calls are expected. If there's no {\f2 EXPECT_CALL}  and the method is called, it's possibly an error. If we quietly let the call go through without notifying the user, bugs may creep in unnoticed.\par
If, however, you are sure that the calls are OK, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .WillRepeatedly(...);\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(foo, Bar(_))\par
    .WillByDefault(...);\par
}
\par
This tells Google {\b Mock} that you do expect the calls and no warning should be printed.\par
Also, you can control the verbosity using the {\f2 --gmock_verbose}  flag. If you find the output too noisy when debugging, just choose a less verbose level.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I delete the mock function's argument in an action?} \par}
If you find yourself needing to perform some action that's not supported by Google {\b Mock} directly, remember that you can define your own actions using {\f2 MakeAction()} or {\f2 MakePolymorphicAction()}, or you can write a stub function and invoke it using {\f2 Invoke()}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MOCK_METHODn()'s second argument looks funny. Why don't you use the MOCK_METHODn(Method, return_type, arg_1, ..., arg_n) syntax?} \par}
What?! I think it's beautiful. :-)\par
While which syntax looks more natural is a subjective matter to some extent, Google {\b Mock}'s syntax was chosen for several practical advantages it has.\par
Try to mock a function that takes a map as an argument: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid virtual int GetSize(const map<int, std::string>& m);\par
}
\par
Using the proposed syntax, it would be: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD1(GetSize, int, const map<int, std::string>& m);\par
}
\par
Guess what? You'll get a compiler error as the compiler thinks that {\f2 const map<int, std::string>& m}  are {\b two} , not one, arguments. To work around this you can use {\f2 typedef}  to give the map type a name, but that gets in the way of your work. Google {\b Mock}'s syntax avoids this problem as the function's argument types are protected inside a pair of parentheses: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // This compiles fine.\par
MOCK_METHOD1(GetSize, int(const map<int, std::string>& m));\par
}
\par
You still need a {\f2 typedef}  if the return type contains an unprotected comma, but that's much rarer.\par
Other advantages include:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 MOCK_METHOD1(Foo, int, bool)}  can leave a reader wonder whether the method returns {\f2 int}  or {\f2 bool} , while there won't be such confusion using Google {\b Mock}'s syntax.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The way Google {\b Mock} describes a function type is nothing new, although many people may not be familiar with it. The same syntax was used in C, and the {\f2 function}  library in {\f2 tr1}  uses this syntax extensively. Since {\f2 tr1}  will become a part of the new version of STL, we feel very comfortable to be consistent with it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The function type syntax is also used in other parts of Google {\b Mock}'s API (e.g. the action interface) in order to make the implementation tractable. A user needs to learn it anyway in order to utilize Google {\b Mock}'s more advanced features. We'd as well stick to the same syntax in {\f2 MOCK_METHOD*} !\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My code calls a static/global function. Can I mock it?} \par}
You can, but you need to make some changes.\par
In general, if you find yourself needing to mock a static function, it's a sign that your modules are too tightly coupled (and less flexible, less reusable, less testable, etc). You are probably better off defining a small interface and call the function through that interface, which then can be easily mocked. It's a bit of work initially, but usually pays for itself quickly.\par
This Google Testing Blog {\f2 post} says it excellently. Check it out.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My mock object needs to do complex stuff. It's a lot of pain to specify the actions. Google {\b Mock} sucks!} \par}
I know it's not a question, but you get an answer for free any way. :-)\par
With Google {\b Mock}, you can create mocks in C++ easily. And people might be tempted to use them everywhere. Sometimes they work great, and sometimes you may find them, well, a pain to use. So, what's wrong in the latter case?\par
When you write a test without using mocks, you exercise the code and assert that it returns the correct value or that the system is in an expected state. This is sometimes called "state-based testing".\par
Mocks are great for what some call "interaction-based" testing: instead of checking the system state at the very end, mock objects verify that they are invoked the right way and report an error as soon as it arises, giving you a handle on the precise context in which the error was triggered. This is often more effective and economical to do than state-based testing.\par
If you are doing state-based testing and using a test double just to simulate the real object, you are probably better off using a fake. Using a mock in this case causes pain, as it's not a strong point for mocks to perform complex actions. If you experience this and think that mocks suck, you are just not using the right tool for your problem. Or, you might be trying to solve the wrong problem. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I got a warning "Uninteresting function call encountered - default action taken.." Should I panic?} \par}
By all means, NO! It's just an FYI.\par
What it means is that you have a mock function, you haven't set any expectations on it (by Google {\b Mock}'s rule this means that you are not interested in calls to this function and therefore it can be called any number of times), and it is called. That's OK - you didn't say it's not OK to call the function!\par
What if you actually meant to disallow this function to be called, but forgot to write {\f2 EXPECT_CALL(foo, Bar()).Times(0)} ? While one can argue that it's the user's fault, Google {\b Mock} tries to be nice and prints you a note.\par
So, when you see the message and believe that there shouldn't be any uninteresting calls, you should investigate what's going on. To make your life easier, Google {\b Mock} prints the function name and arguments when an uninteresting call is encountered.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to define a custom action. Should I use Invoke() or implement the action interface?} \par}
Either way is fine - you want to choose the one that's more convenient for your circumstance.\par
Usually, if your action is for a particular function type, defining it using {\f2 Invoke()}  should be easier; if your action can be used in functions of different types (e.g. if you are defining {\f2 Return(value)} ), {\f2 MakePolymorphicAction()}  is easiest. Sometimes you want precise control on what types of functions the action can be used in, and implementing {\f2 ActionInterface}  is the way to go here. See the implementation of {\f2 Return()}  in {\f2 {\b include/gmock/gmock-actions.h}}  for an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I'm using the set-argument-pointee action, and the compiler complains about "conflicting return type specified". What does it mean?} \par}
You got this error as Google {\b Mock} has no idea what value it should return when the mock method is called. {\f2 SetArgPointee()}  says what the side effect is, but doesn't say what the return value should be. You need {\f2 DoAll()}  to chain a {\f2 SetArgPointee()}  with a {\f2 Return()} .\par
See this {\f2 recipe} for more details and an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other {\f2 wiki pages},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googlemock@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the revision number if you check out from SVN directly) of Google {\b Mock} you use (Google {\b Mock} is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Defining a Mock Class{\tc \v Defining a Mock Class}\par \pard\plain 
{\bkmkstart AAAAAAAENG}
{\bkmkend AAAAAAAENG}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Normal Class} \par}
Given {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual ~Foo();\par
  virtual int GetSize() const = 0;\par
  virtual string Describe(const char* name) = 0;\par
  virtual string Describe(int type) = 0;\par
  virtual bool Process(Bar elem, int count) = 0;\par
\};\par
}
 (note that {\f2 ~Foo()}  {\b must}  be virtual) we can define its mock as {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"\par
\par
class MockFoo : public Foo \{\par
  MOCK_CONST_METHOD0(GetSize, int());\par
  MOCK_METHOD1(Describe, string(const char* name));\par
  MOCK_METHOD1(Describe, string(int type));\par
  MOCK_METHOD2(Process, bool(Bar elem, int count));\par
\};\par
}
\par
To create a "nice" mock object which ignores all uninteresting calls, or a "strict" mock object, which treats them as failures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid NiceMock<MockFoo> nice_foo;     // The type is a subclass of MockFoo.\par
StrictMock<MockFoo> strict_foo; // The type is a subclass of MockFoo.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking a Class Template} \par}
To mock {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
 public:\par
  ...\par
  virtual ~StackInterface();\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
}
 (note that {\f2 ~StackInterface()}  {\b must}  be virtual) just append {\f2 _T}  to the {\f2 MOCK_*}  macros: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
 public:\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Specifying Calling Conventions for {\b Mock} Functions} \par}
If your mock function doesn't use the default calling convention, you can specify it by appending {\f2 _WITH_CALLTYPE}  to any of the macros described in the previous two sections and supplying the calling convention as the first argument to the macro. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD_1_WITH_CALLTYPE(STDMETHODCALLTYPE, Foo, bool(int n));\par
MOCK_CONST_METHOD2_WITH_CALLTYPE(STDMETHODCALLTYPE, Bar, int(double x, double y));\par
}
 where {\f2 STDMETHODCALLTYPE}  is defined by {\f2 <objbase.h>}  on Windows.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
The typical flow is:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names you need to use. All Google {\b Mock} names are in the {\f2 testing}  namespace unless they are macros or otherwise noted.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, set the default actions of the mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set your expectations on the mock objects (How will they be called? What wil they do?).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects; if necessary, check the result using {\f2 Google Test} assertions.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock objects is destructed, Google {\b Mock} automatically verifies that all expectations on it have been satisfied.\par}
Here is an example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;                            // #1\par
\par
TEST(BarTest, DoesThis) \{\par
  MockFoo foo;                                    // #2\par
\par
  ON_CALL(foo, GetSize())                         // #3\par
      .WillByDefault(Return(1));\par
  // ... other default actions ...\par
\par
  EXPECT_CALL(foo, Describe(5))                   // #4\par
      .Times(3)\par
      .WillRepeatedly(Return("Category 5"));\par
  // ... other expectations ...\par
\par
  EXPECT_EQ("good", MyProductionFunction(&foo));  // #5\par
\}                                                 // #6\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Default Actions} \par}
Google {\b Mock} has a {\b built-in default action}  for any function that returns {\f2 void} , {\f2 bool} , a numeric value, or a pointer.\par
To customize the default action for functions with return type {\f2 T}  globally: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DefaultValue;\par
\par
DefaultValue<T>::Set(value);  // Sets the default value to be returned.\par
// ... use the mocks ...\par
DefaultValue<T>::Clear();     // Resets the default value.\par
}
\par
To customize the default action for a particular method, use {\f2 ON_CALL()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .WillByDefault(action);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\f2 EXPECT_CALL()}  sets {\b expectations}  on a mock method (How will it be called? What will it do?): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .With(multi_argument_matcher)  ?\par
    .Times(cardinality)            ?\par
    .InSequence(sequences)         *\par
    .After(expectations)           *\par
    .WillOnce(action)              *\par
    .WillRepeatedly(action)        ?\par
    .RetiresOnSaturation();        ?\par
}
\par
If {\f2 Times()}  is omitted, the cardinality is assumed to be:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(1)}  when there is neither {\f2 WillOnce()}  nor {\f2 WillRepeatedly()} ;\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(n)}  when there are {\f2 n WillOnce()} s but no {\f2 WillRepeatedly()} , where {\f2 n}  >= 1; or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Times(AtLeast(n))}  when there are {\f2 n WillOnce()} s and a {\f2 WillRepeatedly()} , where {\f2 n}  >= 0.\par}
A method with no {\f2 EXPECT_CALL()}  is free to be invoked {\i any number of times} , and the default action will be taken each time.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Matchers} \par}
A {\b matcher}  matches a {\i single}  argument. You can use it inside {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , or use it to validate a value directly:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(value, matcher)}  \cell }{Asserts that {\f2 value}  matches {\f2 matcher} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(value, matcher)}  \cell }{The same as {\f2 EXPECT_THAT(value, matcher)} , except that it generates a {\b fatal}  failure. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Built-in matchers (where {\f2 argument}  is the function argument) are divided into several categories:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Wildcard} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 _} \cell }{{\f2 argument}  can be any value of the correct type.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A<type>()}  or {\f2 An<type>()} \cell }{{\f2 argument}  can be any value of type {\f2 type} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generic Comparison} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq(value)}  or {\f2 value} \cell }{{\f2 argument == value}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge(value)}  \cell }{{\f2 argument >= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt(value)}  \cell }{{\f2 argument > value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le(value)}  \cell }{{\f2 argument <= value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt(value)}  \cell }{{\f2 argument < value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne(value)}  \cell }{{\f2 argument != value}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsNull()}  \cell }{{\f2 argument}  is a {\f2 NULL}  pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NotNull()}  \cell }{{\f2 argument}  is a non-null pointer (raw or smart). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ref(variable)}  \cell }{{\f2 argument}  is a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 TypedEq<type>(value)} \cell }{{\f2 argument}  has type {\f2 type}  and is equal to {\f2 value} . You may need to use this instead of {\f2 Eq(value)}  when the mock function is overloaded. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Except {\f2 Ref()} , these matchers make a {\i copy}  of {\f2 value}  in case it's modified or destructed later. If the compiler complains that {\f2 value}  doesn't have a public copy constructor, try wrap it in {\f2 ByRef()} , e.g. {\f2 Eq(ByRef(non_copyable_value))} . If you do that, make sure {\f2 non_copyable_value}  is not changed afterwards, or the meaning of your matcher will be changed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as unequal.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatEq(a_float)}  \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as unequal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleEq(a_double)} \cell }{{\f2 argument}  is a {\f2 double}  value approximately equal to {\f2 a_double} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatEq(a_float)} \cell }{{\f2 argument}  is a {\f2 float}  value approximately equal to {\f2 a_float} , treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The above matchers use ULP-based comparison (the same as used in {\f2 Google Test}). They automatically pick a reasonable error bound based on the absolute value of the expected value. {\f2 DoubleEq()}  and {\f2 FloatEq()}  conform to the IEEE standard, which requires comparing two NaNs for equality to return false. The {\f2 NanSensitive*}  version instead treats two NaNs as equal, which is often what a user wants.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoubleNear(a_double, max_abs_error)} \cell }{{\f2 argument}  is a {\f2 double}  value close to {\f2 a_double}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as unequal.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 FloatNear(a_float, max_abs_error)}  \cell }{{\f2 argument}  is a {\f2 float}  value close to {\f2 a_float}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as unequal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveDoubleNear(a_double, max_abs_error)} \cell }{{\f2 argument}  is a {\f2 double}  value close to {\f2 a_double}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 NanSensitiveFloatNear(a_float, max_abs_error)} \cell }{{\f2 argument}  is a {\f2 float}  value close to {\f2 a_float}  (absolute error <= {\f2 max_abs_error} ), treating two NaNs as equal. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Matchers} \par}
The {\f2 argument}  can be either a C string or a C++ string object:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainsRegex(string)} \cell }{{\f2 argument}  matches the given regular expression.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EndsWith(suffix)}  \cell }{{\f2 argument}  ends with string {\f2 suffix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 HasSubstr(string)}  \cell }{{\f2 argument}  contains {\f2 string}  as a sub-string. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatchesRegex(string)}  \cell }{{\f2 argument}  matches the given regular expression with the match starting at the first character and ending at the last character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StartsWith(prefix)}  \cell }{{\f2 argument}  starts with string {\f2 prefix} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrCaseNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} , ignoring case. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrEq(string)}  \cell }{{\f2 argument}  is equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 StrNe(string)}  \cell }{{\f2 argument}  is not equal to {\f2 string} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\f2 ContainsRegex()}  and {\f2 MatchesRegex()}  use the regular expression syntax defined {\f2 here}. {\f2 StrCaseEq()} , {\f2 StrCaseNe()} , {\f2 StrEq()} , and {\f2 StrNe()}  work for wide strings as well.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Container Matchers} \par}
Most STL-style containers support {\f2 ==} , so you can use {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly. If you want to write the elements in-line, match them more flexibly, or get more informative messages, you can use:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ContainerEq(container)}  \cell }{The same as {\f2 Eq(container)}  except that the failure message also includes which elements are in one container but not the other.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Contains(e)}  \cell }{{\f2 argument}  contains an element that matches {\f2 e} , which can be either a value or a matcher. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Each(e)}  \cell }{{\f2 argument}  is a container where {\i every}  element matches {\f2 e} , which can be either a value or a matcher. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAre(e0, e1, ..., en)}  \cell }{{\f2 argument}  has {\f2 n + 1}  elements, where the i-th element matches {\f2 ei} , which can be a value or a matcher. 0 to 10 arguments are allowed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ElementsAreArray(\{ e0, e1, ..., en \})} , {\f2 ElementsAreArray(array)} , or {\f2 ElementsAreArray(array, count)}  \cell }{The same as {\f2 ElementsAre()}  except that the expected element values/matchers come from an initializer list, vector, or C-style array. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IsEmpty()}  \cell }{{\f2 argument}  is an empty container ({\f2 container.empty()} ). \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pointwise(m, container)}  \cell }{{\f2 argument}  contains the same number of elements as in {\f2 container} , and for all i, (the i-th element in {\f2 argument} , the i-th element in {\f2 container} ) match {\f2 m} , which is a matcher on 2-tuples. E.g. {\f2 Pointwise(Le(), upper_bounds)}  verifies that each element in {\f2 argument}  doesn't exceed the corresponding element in {\f2 upper_bounds} . See more detail below. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SizeIs(m)}  \cell }{{\f2 argument}  is a container whose size matches {\f2 m} . E.g. {\f2 SizeIs(2)}  or {\f2 SizeIs(Lt(2))} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 UnorderedElementsAre(e0, e1, ..., en)}  \cell }{{\f2 argument}  has {\f2 n + 1}  elements, and under some permutation each element matches an {\f2 ei}  (for a different {\f2 i} ), which can be a value or a matcher. 0 to 10 arguments are allowed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 UnorderedElementsAreArray(\{ e0, e1, ..., en \})} , {\f2 UnorderedElementsAreArray(array)} , or {\f2 UnorderedElementsAreArray(array, count)}  \cell }{The same as {\f2 UnorderedElementsAre()}  except that the expected element values/matchers come from an initializer list, vector, or C-style array. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenSorted(m)}  \cell }{When {\f2 argument}  is sorted using the {\f2 <}  operator, it matches container matcher {\f2 m} . E.g. {\f2 WhenSorted(UnorderedElementsAre(1, 2, 3))}  verifies that {\f2 argument}  contains elements {\f2 1} , {\f2 2} , and {\f2 3} , ignoring order. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WhenSortedBy(comparator, m)}  \cell }{The same as {\f2 WhenSorted(m)} , except that the given comparator instead of {\f2 <}  is used to sort {\f2 argument} . E.g. {\f2 WhenSortedBy(std::greater<int>(), ElementsAre(3, 2, 1))} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Notes:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
These matchers can also match:{
\par
\pard\plain \s91\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab a native array passed by reference (e.g. in {\f2 Foo(const int (&a)[5])} ), and\par}
{
\par
\pard\plain \s91\fi-360\li720\widctlpar\fs20\cgrid 
1.\tab an array passed as a pointer and a count (e.g. in {\f2 Bar(const T* buffer, int len)}  \'96 see Multi-argument Matchers).\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The array being matched may be multi-dimensional (i.e. its elements can be arrays).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 m}  in {\f2 Pointwise(m, ...)}  should be a matcher for {\f2 {\b std::tr1::tuple}<T, U>}  where {\f2 T}  and {\f2 U}  are the element type of the actual container and the expected container, respectively. For example, to compare two {\f2 Foo}  containers where {\f2 Foo}  doesn't support {\f2 operator==}  but has an {\f2 Equals()}  method, one might write:\par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::std::tr1::get;\par
MATCHER(FooEq, "") \{\par
  return get<0>(arg).Equals(get<1>(arg));\par
\}\par
...\par
EXPECT_THAT(actual_foos, Pointwise(FooEq(), expected_foos));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Member Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Field(&class::field, m)} \cell }{{\f2 argument.field}  (or {\f2 argument->field}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Key(e)}  \cell }{{\f2 argument.first}  matches {\f2 e} , which can be either a value or a matcher. E.g. {\f2 Contains(Key(Le(5)))}  can verify that a {\f2 map}  contains a key {\f2 <= 5} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Pair(m1, m2)}  \cell }{{\f2 argument}  is an {\f2 std::pair}  whose {\f2 first}  field matches {\f2 m1}  and {\f2 second}  field matches {\f2 m2} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Property(&class::property, m)} \cell }{{\f2 argument.property()}  (or {\f2 argument->property()}  when {\f2 argument}  is a plain pointer) matches matcher {\f2 m} , where {\f2 argument}  is an object of type {\i class} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching the Result of a Function or Functor} \par}
|{\f2 ResultOf(f, m)} |{\f2 f(argument)}  matches matcher {\f2 m} , where {\f2 f}  is a function or functor.| |:------------\'97|:------------------------------------------------------------------\'97|\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Pointer Matchers} \par}
|{\f2 Pointee(m)} |{\f2 argument}  (either a smart pointer or a raw pointer) points to a value that matches matcher {\f2 m} .| |:--------\'97|:--------------------------------------------------------------------------------------------\'97|\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Multiargument Matchers} \par}
Technically, all matchers match a {\i single}  value. A "multi-argument" matcher is just one that matches a {\i tuple} . The following matchers can be used to match a tuple {\f2 (x, y)} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Eq()} \cell }{{\f2 x == y}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ge()} \cell }{{\f2 x >= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Gt()} \cell }{{\f2 x > y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Le()} \cell }{{\f2 x <= y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Lt()} \cell }{{\f2 x < y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Ne()} \cell }{{\f2 x != y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
You can use the following selectors to pick a subset of the arguments (or reorder them) to participate in the matching:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllArgs(m)} \cell }{Equivalent to {\f2 m} . Useful as syntactic sugar in {\f2 .With(AllArgs(m))} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Args<N1, N2, ..., Nk>(m)} \cell }{The tuple of the {\f2 k}  selected (using 0-based indices) arguments matches {\f2 m} , e.g. {\f2 Args<1, 2>(Eq())} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Matchers} \par}
You can make a matcher from one or more other matchers:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AllOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches all of the matchers {\f2 m1}  to {\f2 mn} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyOf(m1, m2, ..., mn)} \cell }{{\f2 argument}  matches at least one of the matchers {\f2 m1}  to {\f2 mn} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Not(m)}  \cell }{{\f2 argument}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adapters for Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MatcherCast<T>(m)} \cell }{casts matcher {\f2 m}  to type {\f2 Matcher<T>} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SafeMatcherCast<T>(m)} \cell }{{\f2 safely casts} matcher {\f2 m}  to type {\f2 Matcher<T>} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Truly(predicate)}  \cell }{{\f2 predicate(argument)}  returns something considered by C++ to be true, where {\f2 predicate}  is a function or functor. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Predicates} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Matches(m)(value)} \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} . You can use {\f2 Matches(m)}  alone as a unary functor.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ExplainMatchResult(m, value, result_listener)} \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} , explaining the result to {\f2 result_listener} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Value(value, m)}  \cell }{evaluates to {\f2 true}  if {\f2 value}  matches {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Matchers} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER(IsEven, "") \{ return (arg % 2) == 0; \}}  \cell }{Defines a matcher {\f2 IsEven()}  to match an even number.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P(IsDivisibleBy, n, "") \{ *result_listener << "where the remainder is " << (arg % n); return (arg % n) == 0; \}}  \cell }{Defines a macher {\f2 IsDivisibleBy(n)}  to match a number divisible by {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 MATCHER_P2(IsBetween, a, b, std::string(negation ? "isn't" : "is") + " between " + PrintToString(a) + " and " + PrintToString(b)) \{ return a <= arg && arg <= b; \}}  \cell }{Defines a matcher {\f2 IsBetween(a, b)}  to match a value in the range [{\f2 a} , {\f2 b} ]. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 MATCHER*}  macros cannot be used inside a function or class.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The matcher body must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 PrintToString(x)}  to convert a value {\f2 x}  of any type to a string.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers as Test Assertions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THAT(expression, m)} \cell }{Generates a {\f2 fatal failure} if the value of {\f2 expression}  doesn't match matcher {\f2 m} .  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_THAT(expression, m)} \cell }{Generates a non-fatal failure if the value of {\f2 expression}  doesn't match matcher {\f2 m} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Actions} \par}
{\b Actions}  specify what a mock function should do when invoked.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning a Value} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return()} \cell }{Return from a {\f2 void}  mock function.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Return(value)} \cell }{Return {\f2 value} . If the type of {\f2 value}  is different to the mock function's return type, {\f2 value}  is converted to the latter type {\i at the time the expectation is set} , not when the action is executed. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnArg<N>()} \cell }{Return the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNew<T>(a1, ..., ak)} \cell }{Return {\f2 new T(a1, ..., ak)} ; a different object is created each time. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnNull()} \cell }{Return a null pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnPointee(ptr)} \cell }{Return the value pointed to by {\f2 ptr} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRef(variable)} \cell }{Return a reference to {\f2 variable} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ReturnRefOfCopy(value)} \cell }{Return a reference to a copy of {\f2 value} ; the copy lives as long as the action. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Side Effects} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Assign(&variable, value)} \cell }{Assign {\f2 value}  to variable.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DeleteArg<N>()}  \cell }{Delete the {\f2 N} -th (0-based) argument, which must be a pointer. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArg<N>(pointer)}  \cell }{Save the {\f2 N} -th (0-based) argument to {\f2 *pointer} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SaveArgPointee<N>(pointer)}  \cell }{Save the value pointed to by the {\f2 N} -th (0-based) argument to {\f2 *pointer} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgReferee<N>(value)}  \cell }{Assign value to the variable referenced by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgPointee<N>(value)}  \cell }{Assign {\f2 value}  to the variable pointed by the {\f2 N} -th (0-based) argument. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArgumentPointee<N>(value)} \cell }{Same as {\f2 SetArgPointee<N>(value)} . Deprecated. Will be removed in v1.7.0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetArrayArgument<N>(first, last)} \cell }{Copies the elements in source range [{\f2 first} , {\f2 last} ) to the array pointed to by the {\f2 N} -th (0-based) argument, which can be either a pointer or an iterator. The action does not take ownership of the elements in the source range. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 SetErrnoAndReturn(error, value)} \cell }{Set {\f2 errno}  to {\f2 error}  and return {\f2 value} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Throw(exception)}  \cell }{Throws the given exception, which can be any copyable value. Available since v1.1.0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function or a Functor as an Action} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(f)} \cell }{Invoke {\f2 f}  with the arguments passed to the mock function, where {\f2 f}  can be a global/static function or a functor.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Invoke(object_pointer, &class::method)} \cell }{Invoke the \{method on the object with the arguments passed to the mock function. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(f)} \cell }{Invoke {\f2 f} , which can be a global/static function or a functor. {\f2 f}  must take no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeWithoutArgs(object_pointer, &class::method)} \cell }{Invoke the method on the object, which takes no arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 InvokeArgument<N>(arg1, arg2, ..., argk)} \cell }{Invoke the mock function's {\f2 N} -th (0-based) argument, which must be a function or a functor, with the {\f2 k}  arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The return value of the invoked function is used as the return value of the action.\par
When defining a function or functor to be used with {\f2 Invoke*()} , you can declare any unused parameters as {\f2 Unused} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid double Distance(Unused, double x, double y) \{ return sqrt(x*x + y*y); \}\par
...\par
EXPECT_CALL(mock, Foo("Hi", _, _)).WillOnce(Invoke(Distance));\par
}
\par
In {\f2 InvokeArgument<N>(...)} , if an argument needs to be passed by reference, wrap it inside {\f2 ByRef()} . For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<2>(5, string("Hi"), ByRef(foo))\par
}
 calls the mock function's #2 argument, passing to it {\f2 5}  and {\f2 string("Hi")}  by value, and {\f2 foo}  by reference.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Default Action} \par}
|{\f2 DoDefault()} |Do the default action (specified by {\f2 ON_CALL()}  or the built-in one).| |:---------\'97|:-----------------------------------------------------------------\'97|\par
{\b Note:}  due to technical reasons, {\f2 DoDefault()}  cannot be used inside a composite action - trying to do so will result in a run-time error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Composite Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 DoAll(a1, a2, ..., an)} \cell }{Do all actions {\f2 a1}  to {\f2 an}  and return the result of {\f2 an}  in each invocation. The first {\f2 n - 1}  sub-actions must return void.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 IgnoreResult(a)}  \cell }{Perform action {\f2 a}  and ignore its result. {\f2 a}  must not return void. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArg<N>(a)}  \cell }{Pass the {\f2 N} -th (0-based) argument of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithArgs<N1, N2, ..., Nk>(a)} \cell }{Pass the selected (0-based) arguments of the mock function to action {\f2 a}  and perform it. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 WithoutArgs(a)}  \cell }{Perform action {\f2 a}  without any arguments. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Actions} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Sum) \{ return arg0 + arg1; \}}  \cell }{Defines an action {\f2 Sum()}  to return the sum of the mock function's argument #0 and #1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Plus, n) \{ return arg0 + n; \}}  \cell }{Defines an action {\f2 Plus(n)}  to return the sum of the mock function's argument #0 and {\f2 n} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_Pk(Foo, p1, ..., pk) \{ statements; \}}  \cell }{Defines a parameterized action {\f2 Foo(p1, ..., pk)}  to execute the given {\f2 statements} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The {\f2 ACTION*}  macros cannot be used inside a function or class.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Cardinalities} \par}
These are used in {\f2 Times()}  to specify how many times a mock function will be called:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AnyNumber()} \cell }{The function can be called any number of times.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtLeast(n)}  \cell }{The call is expected at least {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 AtMost(n)}  \cell }{The call is expected at most {\f2 n}  times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Between(m, n)} \cell }{The call is expected between {\f2 m}  and {\f2 n}  (inclusive) times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Exactly(n) or n} \cell }{The call is expected exactly {\f2 n}  times. In particular, the call should never happen when {\f2 n}  is 0. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Expectation Order} \par}
By default, the expectations can be matched in {\i any}  order. If some or all expectations must be matched in a given order, there are two ways to specify it. They can be used either independently or together.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The After Clause} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Expectation;\par
...\par
Expectation init_x = EXPECT_CALL(foo, InitX());\par
Expectation init_y = EXPECT_CALL(foo, InitY());\par
EXPECT_CALL(foo, Bar())\par
    .After(init_x, init_y);\par
}
 says that {\f2 Bar()}  can be called only after both {\f2 InitX()}  and {\f2 InitY()}  have been called.\par
If you don't know how many pre-requisites an expectation has when you write it, you can use an {\f2 ExpectationSet}  to collect them:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ExpectationSet;\par
...\par
ExpectationSet all_inits;\par
for (int i = 0; i < element_count; i++) \{\par
  all_inits += EXPECT_CALL(foo, InitElement(i));\par
\}\par
EXPECT_CALL(foo, Bar())\par
    .After(all_inits);\par
}
 says that {\f2 Bar()}  can be called only after all elements have been initialized (but we don't care about which elements get initialized before the others).\par
Modifying an {\f2 ExpectationSet}  after using it in an {\f2 .After()}  doesn't affect the meaning of the {\f2 .After()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sequences} \par}
When you have a long chain of sequential expectations, it's easier to specify the order using {\b sequences} , which don't require you to given each expectation in the chain a different name. {\i All expected\par
 calls}  in the same sequence must occur in the order they are specified.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
Sequence s1, s2;\par
...\par
EXPECT_CALL(foo, Reset())\par
    .InSequence(s1, s2)\par
    .WillOnce(Return(true));\par
EXPECT_CALL(foo, GetSize())\par
    .InSequence(s1)\par
    .WillOnce(Return(1));\par
EXPECT_CALL(foo, Describe(A<const char*>()))\par
    .InSequence(s2)\par
    .WillOnce(Return("dummy"));\par
}
 says that {\f2 Reset()}  must be called before {\i both}  {\f2 GetSize()}  {\i and}  {\f2 Describe()} , and the latter two can occur in any order.\par
To put many expectations in a sequence conveniently: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
\{\par
  InSequence dummy;\par
\par
  EXPECT_CALL(...)...;\par
  EXPECT_CALL(...)...;\par
  ...\par
  EXPECT_CALL(...)...;\par
\}\par
}
 says that all expected calls in the scope of {\f2 dummy}  must occur in strict order. The name {\f2 dummy}  is irrelevant.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Verifying and Resetting a {\b Mock}} \par}
Google {\b Mock} will verify the expectations on a mock object when it is destructed, or you can do it earlier: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Mock;\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// returns true iff successful.\par
Mock::VerifyAndClearExpectations(&mock_obj);\par
...\par
// Verifies and removes the expectations on mock_obj;\par
// also removes the default actions set by ON_CALL();\par
// returns true iff successful.\par
Mock::VerifyAndClear(&mock_obj);\par
}
\par
You can also tell Google {\b Mock} that a mock object can be leaked and doesn't need to be verified: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Mock::AllowLeak(&mock_obj);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 {\b Mock} Classes} \par}
Google {\b Mock} defines a convenient mock class template {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFunction<R(A1, ..., An)> \{\par
 public:\par
  MOCK_METHODn(Call, R(A1, ..., An));\par
\};\par
}
 See this {\f2 recipe} for one application of it.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Flags} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_catch_leaked_mocks=0}  \cell }{Don't report leaked mock objects as failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 --gmock_verbose=LEVEL}  \cell }{Sets the default verbosity level ({\f2 info} , {\f2 warning} , or {\f2 error} ) of Google {\b Mock} messages. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
CookBook{\tc \v CookBook}\par \pard\plain 
{\bkmkstart AAAAAAAENH}
{\bkmkend AAAAAAAENH}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
You can find recipes for using Google {\b Mock} here. If you haven't yet, please read the ForDummies document first to make sure you understand the basics.\par
{\b Note:}  Google {\b Mock} lives in the {\f2 testing}  name space. For readability, it is recommended to write {\f2 using ::testing::Foo;}  once in your file before using the name {\f2 Foo}  defined by Google {\b Mock}. We omit such {\f2 using}  statements in this page for brevity, but you should do it in your own code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Creating {\b Mock} Classes} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Private or Protected Methods} \par}
You must always put a mock method definition ({\f2 MOCK_METHOD*} ) in a {\f2 public:}  section of the mock class, regardless of the method being mocked being {\f2 public} , {\f2 protected} , or {\f2 private}  in the base class. This allows {\f2 ON_CALL}  and {\f2 EXPECT_CALL}  to reference the mock function from outside of the mock class. (Yes, C++ allows a subclass to change the access level of a virtual function in the base class.) Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  ...\par
  virtual bool Transform(Gadget* g) = 0;\par
\par
 protected:\par
  virtual void Resume();\par
\par
 private:\par
  virtual int GetTimeOut();\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  ...\par
  MOCK_METHOD1(Transform, bool(Gadget* g));\par
\par
  // The following must be in the public section, even though the\par
  // methods are protected or private in the base class.\par
  MOCK_METHOD0(Resume, void());\par
  MOCK_METHOD0(GetTimeOut, int());\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Overloaded Methods} \par}
You can mock overloaded functions as usual. No special attention is required:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
\par
  // Must be virtual as we'll inherit from Foo.\par
  virtual ~Foo();\par
\par
  // Overloaded on the types and/or numbers of arguments.\par
  virtual int Add(Element x);\par
  virtual int Add(int times, Element x);\par
\par
  // Overloaded on the const-ness of this object.\par
  virtual Bar& GetBar();\par
  virtual const Bar& GetBar() const;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Add, int(Element x));\par
  MOCK_METHOD2(Add, int(int times, Element x);\par
\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
}
\par
{\b Note:}  if you don't mock all versions of the overloaded method, the compiler will give you a warning about some methods in the base class being hidden. To fix that, use {\f2 using}  to bring them in scope:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  using Foo::Add;\par
  MOCK_METHOD1(Add, int(Element x));\par
  // We don't want to mock int Add(int times, Element x);\par
  ...\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Class Templates} \par}
To mock a class template, append {\f2 _T}  to the {\f2 MOCK_*}  macros:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename Elem>\par
class StackInterface \{\par
  ...\par
  // Must be virtual as we'll inherit from StackInterface.\par
  virtual ~StackInterface();\par
\par
  virtual int GetSize() const = 0;\par
  virtual void Push(const Elem& x) = 0;\par
\};\par
\par
template <typename Elem>\par
class MockStack : public StackInterface<Elem> \{\par
  ...\par
  MOCK_CONST_METHOD0_T(GetSize, int());\par
  MOCK_METHOD1_T(Push, void(const Elem& x));\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Nonvirtual Methods} \par}
Google {\b Mock} can mock non-virtual functions to be used in what we call {\i hi-perf dependency injection} .\par
In this case, instead of sharing a common base class with the real class, your mock class will be {\i unrelated}  to the real class, but contain methods with the same signatures. The syntax for mocking non-virtual methods is the {\i same}  as mocking virtual methods:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A simple packet stream class.  None of its members is virtual.\par
class ConcretePacketStream \{\par
 public:\par
  void AppendPacket(Packet* new_packet);\par
  const Packet* GetPacket(size_t packet_number) const;\par
  size_t NumberOfPackets() const;\par
  ...\par
\};\par
\par
// A mock packet stream class.  It inherits from no other, but defines\par
// GetPacket() and NumberOfPackets().\par
class MockPacketStream \{\par
 public:\par
  MOCK_CONST_METHOD1(GetPacket, const Packet*(size_t packet_number));\par
  MOCK_CONST_METHOD0(NumberOfPackets, size_t());\par
  ...\par
\};\par
}
\par
Note that the mock class doesn't define {\f2 AppendPacket()} , unlike the real class. That's fine as long as the test doesn't need to call it.\par
Next, you need a way to say that you want to use {\f2 ConcretePacketStream}  in production code, and use {\f2 MockPacketStream}  in tests. Since the functions are not virtual and the two classes are unrelated, you must specify your choice at {\i compile time}  (as opposed to run time).\par
One way to do it is to templatize your code that needs to use a packet stream. More specifically, you will give your code a template type argument for the type of the packet stream. In production, you will instantiate your template with {\f2 ConcretePacketStream}  as the type argument. In tests, you will instantiate the same template with {\f2 MockPacketStream} . For example, you may write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <class PacketStream>\par
void CreateConnection(PacketStream* stream) \{ ... \}\par
\par
template <class PacketStream>\par
class PacketReader \{\par
 public:\par
  void ReadPackets(PacketStream* stream, size_t packet_num);\par
\};\par
}
\par
Then you can use {\f2 CreateConnection<ConcretePacketStream>()}  and {\f2 PacketReader<ConcretePacketStream>}  in production code, and use {\f2 CreateConnection<MockPacketStream>()}  and {\f2 PacketReader<MockPacketStream>}  in tests.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockPacketStream mock_stream;\par
EXPECT_CALL(mock_stream, ...)...;\par
.. set more expectations on mock_stream ...\par
PacketReader<MockPacketStream> reader(&mock_stream);\par
... exercise reader ...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Free Functions} \par}
It's possible to use Google {\b Mock} to mock a free function (i.e. a C-style function or a static method). You just need to rewrite your code to use an interface (abstract class).\par
Instead of calling a free function (say, {\f2 OpenFile} ) directly, introduce an interface for it and have a concrete subclass that calls the free function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) = 0;\par
\};\par
\par
class File : public FileInterface \{\par
 public:\par
  ...\par
  virtual bool Open(const char* path, const char* mode) \{\par
    return OpenFile(path, mode);\par
  \}\par
\};\par
}
\par
Your code should talk to {\f2 FileInterface}  to open a file. Now it's easy to mock out the function.\par
This may seem much hassle, but in practice you often have multiple related functions that you can put in the same interface, so the per-function syntactic overhead will be much lower.\par
If you are concerned about the performance overhead incurred by virtual functions, and profiling confirms your concern, you can combine this with the recipe for mocking non-virtual methods.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Nice, the Strict, and the Naggy} \par}
If a mock method has no {\f2 EXPECT_CALL}  spec but is called, Google {\b Mock} will print a warning about the "uninteresting call". The rationale is:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
New methods may be added to an interface after a test is written. We shouldn't fail a test just because a method it doesn't know about is called.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
However, this may also mean there's a bug in the test, so Google {\b Mock} shouldn't be silent either. If the user believes these calls are harmless, he can add an {\f2 EXPECT_CALL()}  to suppress the warning.\par}
However, sometimes you may want to suppress all "uninteresting call" warnings, while sometimes you may want the opposite, i.e. to treat all of them as errors. Google {\b Mock} lets you make the decision on a per-mock-object basis.\par
Suppose your test uses a mock class {\f2 {\b MockFoo}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(...) \{\par
  MockFoo mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
If a method of {\f2 mock_foo}  other than {\f2 DoThis()}  is called, it will be reported by Google {\b Mock} as a warning. However, if you rewrite your test to use {\f2 NiceMock<{\b MockFoo}>}  instead, the warning will be gone, resulting in a cleaner test output:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
{\f2 NiceMock<{\b MockFoo}>}  is a subclass of {\f2 {\b MockFoo}} , so it can be used wherever {\f2 {\b MockFoo}}  is accepted.\par
It also works if {\f2 {\b MockFoo}} 's constructor takes some arguments, as {\f2 NiceMock<{\b MockFoo}>}  "inherits" {\f2 {\b MockFoo}} 's constructors:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NiceMock;\par
\par
TEST(...) \{\par
  NiceMock<MockFoo> mock_foo(5, "hi");  // Calls MockFoo(5, "hi").\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\}\par
}
\par
The usage of {\f2 StrictMock}  is similar, except that it makes all uninteresting calls failures:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::StrictMock;\par
\par
TEST(...) \{\par
  StrictMock<MockFoo> mock_foo;\par
  EXPECT_CALL(mock_foo, DoThis());\par
  ... code that uses mock_foo ...\par
\par
  // The test will fail if a method of mock_foo other than DoThis()\par
  // is called.\par
\}\par
}
\par
There are some caveats though (I don't like them just as much as the next guy, but sadly they are side effects of C++'s limitations):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 NiceMock<{\b MockFoo}>}  and {\f2 StrictMock<{\b MockFoo}>}  only work for mock methods defined using the {\f2 MOCK_METHOD*}  family of macros {\b directly}  in the {\f2 {\b MockFoo}}  class. If a mock method is defined in a {\b base class}  of {\f2 {\b MockFoo}} , the "nice" or "strict" modifier may not affect it, depending on the compiler. In particular, nesting {\f2 NiceMock}  and {\f2 StrictMock}  (e.g. {\f2 NiceMock<StrictMock<{\b MockFoo}> >} ) is {\b not}  supported.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The constructors of the base mock ({\f2 {\b MockFoo}} ) cannot have arguments passed by non-const reference, which happens to be banned by the {\f2 Google C++ style guide}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab During the constructor or destructor of {\f2 {\b MockFoo}} , the mock object is {\i not}  nice or strict. This may cause surprises if the constructor or destructor calls a mock method on {\f2 this}  object. (This behavior, however, is consistent with C++'s general rule: if a constructor or destructor calls a virtual method of {\f2 this}  object, that method is treated as non-virtual. In other words, to the base class's constructor or destructor, {\f2 this}  object behaves like an instance of the base class, not the derived class. This rule is required for safety. Otherwise a base constructor may use members of a derived class before they are initialized, or a base destructor may use members of a derived class after they have been destroyed.)\par}
Finally, you should be {\b very cautious}  about when to use naggy or strict mocks, as they tend to make tests more brittle and harder to maintain. When you refactor your code without changing its externally visible behavior, ideally you should't need to update any tests. If your code interacts with a naggy mock, however, you may start to get spammed with warnings as the result of your change. Worse, if your code interacts with a strict mock, your tests may start to fail and you'll be forced to fix them. Our general recommendation is to use nice mocks (not yet the default) most of the time, use naggy mocks (the current default) when developing or debugging tests, and use strict mocks only as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Simplifying the {\b Interface} without Breaking Existing Code} \par}
Sometimes a method has a long list of arguments that is mostly uninteresting. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line,\par
                    const struct tm* tm_time,\par
                    const char* message, size_t message_len) = 0;\par
\};\par
}
\par
This method's argument list is lengthy and hard to work with (let's say that the {\f2 message}  argument is not even 0-terminated). If we mock it as is, using the mock will be awkward. If, however, we try to simplify this interface, we'll need to fix all clients depending on it, which is often infeasible.\par
The trick is to re-dispatch the method in the mock class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ScopedMockLog : public LogSink \{\par
 public:\par
  ...\par
  virtual void send(LogSeverity severity, const char* full_filename,\par
                    const char* base_filename, int line, const tm* tm_time,\par
                    const char* message, size_t message_len) \{\par
    // We are only interested in the log severity, full file name, and\par
    // log message.\par
    Log(severity, full_filename, std::string(message, message_len));\par
  \}\par
\par
  // Implements the mock method:\par
  //\par
  //   void Log(LogSeverity severity,\par
  //            const string& file_path,\par
  //            const string& message);\par
  MOCK_METHOD3(Log, void(LogSeverity severity, const string& file_path,\par
                         const string& message));\par
\};\par
}
\par
By defining a new mock method with a trimmed argument list, we make the mock class much more user-friendly.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Alternative to Mocking Concrete Classes} \par}
Often you may find yourself using classes that don't implement interfaces. In order to test your code that uses such a class (let's call it {\f2 Concrete} ), you may be tempted to make the methods of {\f2 Concrete}  virtual and then mock it.\par
Try not to do that.\par
Making a non-virtual function virtual is a big decision. It creates an extension point where subclasses can tweak your class' behavior. This weakens your control on the class because now it's harder to maintain the class' invariants. You should make a function virtual only when there is a valid reason for a subclass to override it.\par
Mocking concrete classes directly is problematic as it creates a tight coupling between the class and the tests - any small change in the class may invalidate your tests and make test maintenance a pain.\par
To avoid such problems, many programmers have been practicing "coding
to interfaces": instead of talking to the {\f2 Concrete}  class, your code would define an interface and talk to it. Then you implement that interface as an adaptor on top of {\f2 Concrete} . In tests, you can easily mock that interface to observe how your code is doing.\par
This technique incurs some overhead:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You pay the cost of virtual function calls (usually not a problem).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There is more abstraction for the programmers to learn.\par}
However, it can also bring significant benefits in addition to better testability:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Concrete} 's API may not fit your problem domain very well, as you may not be the only client it tries to serve. By designing your own interface, you have a chance to tailor it to your need - you may add higher-level functionalities, rename stuff, etc instead of just trimming the class. This allows you to write your code (user of the interface) in a more natural way, which means it will be more readable, more maintainable, and you'll be more productive.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Concrete} 's implementation ever has to change, you don't have to rewrite everywhere it is used. Instead, you can absorb the change in your implementation of the interface, and your other code and tests will be insulated from this change.\par}
Some people worry that if everyone is practicing this technique, they will end up writing lots of redundant code. This concern is totally understandable. However, there are two reasons why it may not be the case:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Different projects may need to use {\f2 Concrete}  in different ways, so the best interfaces for them will be different. Therefore, each of them will have its own domain-specific interface on top of {\f2 Concrete} , and they will not be the same code.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If enough projects want to use the same interface, they can always share it, just like they have been sharing {\f2 Concrete} . You can check in the interface and the adaptor somewhere near {\f2 Concrete}  (perhaps in a {\f2 contrib}  sub-directory) and let many projects use it.\par}
You need to weigh the pros and cons carefully for your particular problem, but I'd like to assure you that the Java community has been practicing this for a long time and it's a proven effective technique applicable in a wide variety of situations. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Fake} \par}
Some times you have a non-trivial fake implementation of an interface. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo() \{\}\par
  virtual char DoThis(int n) = 0;\par
  virtual void DoThat(const char* s, int* p) = 0;\par
\};\par
\par
class FakeFoo : public Foo \{\par
 public:\par
  virtual char DoThis(int n) \{\par
    return (n > 0) ? '+' :\par
        (n < 0) ? '-' : '0';\par
  \}\par
\par
  virtual void DoThat(const char* s, int* p) \{\par
    *p = strlen(s);\par
  \}\par
\};\par
}
\par
Now you want to mock this interface such that you can set expectations on it. However, you also want to use {\f2 FakeFoo}  for the default behavior, as duplicating it in the mock object is, well, a lot of work.\par
When you define the mock class using Google {\b Mock}, you can have it delegate its default action to a fake class you already have, using this pattern:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Normal mock method definitions using Google Mock.\par
  MOCK_METHOD1(DoThis, char(int n));\par
  MOCK_METHOD2(DoThat, void(const char* s, int* p));\par
\par
  // Delegates the default actions of the methods to a FakeFoo object.\par
  // This must be called *before* the custom ON_CALL() statements.\par
  void DelegateToFake() \{\par
    ON_CALL(*this, DoThis(_))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThis));\par
    ON_CALL(*this, DoThat(_, _))\par
        .WillByDefault(Invoke(&fake_, &FakeFoo::DoThat));\par
  \}\par
 private:\par
  FakeFoo fake_;  // Keeps an instance of the fake in the mock.\par
\};\par
}
\par
With that, you can use {\f2 {\b MockFoo}}  in your tests as usual. Just remember that if you don't explicitly set an action in an {\f2 ON_CALL()}  or {\f2 EXPECT_CALL()} , the fake will be called upon to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
TEST(AbcTest, Xyz) \{\par
  MockFoo foo;\par
  foo.DelegateToFake(); // Enables the fake for delegation.\par
\par
  // Put your ON_CALL(foo, ...)s here, if any.\par
\par
  // No action specified, meaning to use the default action.\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(foo, DoThat(_, _));\par
\par
  int n = 0;\par
  EXPECT_EQ('+', foo.DoThis(5));  // FakeFoo::DoThis() is invoked.\par
  foo.DoThat("Hi", &n);           // FakeFoo::DoThat() is invoked.\par
  EXPECT_EQ(2, n);\par
\}\par
}
\par
{\b Some tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you want, you can still override the default action by providing your own {\f2 ON_CALL()}  or using {\f2 .WillOnce()}  / {\f2 .WillRepeatedly()}  in {\f2 EXPECT_CALL()} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In {\f2 DelegateToFake()} , you only need to delegate the methods whose fake implementation you intend to use.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The general technique discussed here works for overloaded methods, but you'll need to tell the compiler which version you mean. To disambiguate a mock function (the one you specify inside the parentheses of {\f2 ON_CALL()} ), see the "Selecting Between Overloaded Functions" section on this page; to disambiguate a fake function (the one you place inside {\f2 Invoke()} ), use a {\f2 static_cast}  to specify the function's type. For instance, if class {\f2 Foo}  has methods {\f2 char DoThis(int n)}  and {\f2 bool DoThis(double x) const} , and you want to invoke the latter, you need to write {\f2 Invoke(&fake_, static_cast<bool (FakeFoo::*)(double) const>(&FakeFoo::DoThis))}  instead of {\f2 Invoke(&fake_, &FakeFoo::DoThis)}  (The strange-looking thing inside the angled brackets of {\f2 static_cast}  is the type of a function pointer to the second {\f2 DoThis()}  method.).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Having to mix a mock and a fake is often a sign of something gone wrong. Perhaps you haven't got used to the interaction-based way of testing yet. Or perhaps your interface is taking on too many roles and should be split up. Therefore, {\b don't abuse this} . We would only recommend to do it as an intermediate step when you are refactoring your code.\par}
Regarding the tip on mixing a mock and a fake, here's an example on why it may be a bad sign: Suppose you have a class {\f2 System}  for low-level system operations. In particular, it does file and I/O operations. And suppose you want to test how your code uses {\f2 System}  to do I/O, and you just want the file operations to work normally. If you mock out the entire {\f2 System}  class, you'll have to provide a fake implementation for the file operation part, which suggests that {\f2 System}  is taking on too many roles.\par
Instead, you can define a {\f2 FileOps}  interface and an {\f2 IOOps}  interface and split {\f2 System} 's functionalities into the two. Then you can mock {\f2 IOOps}  without mocking {\f2 FileOps} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Real Object} \par}
When using testing doubles (mocks, fakes, stubs, and etc), sometimes their behaviors will differ from those of the real objects. This difference could be either intentional (as in simulating an error such that you can test the error handling code) or unintentional. If your mocks have different behaviors than the real objects by mistake, you could end up with code that passes the tests but fails in production.\par
You can use the {\i delegating-to-real}  technique to ensure that your mock has the same behavior as the real object while retaining the ability to validate calls. This technique is very similar to the delegating-to-fake technique, the difference being that we use a real object instead of a fake. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AtLeast;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MockFoo() \{\par
    // By default, all calls are delegated to the real object.\par
    ON_CALL(*this, DoThis())\par
        .WillByDefault(Invoke(&real_, &Foo::DoThis));\par
    ON_CALL(*this, DoThat(_))\par
        .WillByDefault(Invoke(&real_, &Foo::DoThat));\par
    ...\par
  \}\par
  MOCK_METHOD0(DoThis, ...);\par
  MOCK_METHOD1(DoThat, ...);\par
  ...\par
 private:\par
  Foo real_;\par
\};\par
...\par
\par
  MockFoo mock;\par
\par
  EXPECT_CALL(mock, DoThis())\par
      .Times(3);\par
  EXPECT_CALL(mock, DoThat("Hi"))\par
      .Times(AtLeast(1));\par
  ... use mock in test ...\par
}
\par
With this, Google {\b Mock} will verify that your code made the right calls (with the right arguments, in the right order, called the right number of times, etc), and a real object will answer the calls (so the behavior will be the same as in production). This gives you the best of both worlds.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Delegating Calls to a Parent Class} \par}
Ideally, you should code to interfaces, whose methods are all pure virtual. In reality, sometimes you do need to mock a virtual method that is not pure (i.e, it already has an implementation). For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
 public:\par
  virtual ~Foo();\par
\par
  virtual void Pure(int n) = 0;\par
  virtual int Concrete(const char* str) \{ ... \}\par
\};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\};\par
}
\par
Sometimes you may want to call {\f2 Foo::Concrete()}  instead of {\f2 MockFoo::Concrete()} . Perhaps you want to do it as part of a stub action, or perhaps your test doesn't need to mock {\f2 Concrete()}  at all (but it would be oh-so painful to have to define a new mock class whenever you don't need to mock one of its methods).\par
The trick is to leave a back door in your mock class for accessing the real methods in the base class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  // Mocking a pure method.\par
  MOCK_METHOD1(Pure, void(int n));\par
  // Mocking a concrete method.  Foo::Concrete() is shadowed.\par
  MOCK_METHOD1(Concrete, int(const char* str));\par
\par
  // Use this to call Concrete() defined in Foo.\par
  int FooConcrete(const char* str) \{ return Foo::Concrete(str); \}\par
\};\par
}
\par
Now, you can call {\f2 Foo::Concrete()}  inside an action by:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  EXPECT_CALL(foo, Concrete(_))\par
      .WillOnce(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
or tell the mock object that you don't want to mock {\f2 Concrete()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Invoke;\par
...\par
  ON_CALL(foo, Concrete(_))\par
      .WillByDefault(Invoke(&foo, &MockFoo::FooConcrete));\par
}
\par
(Why don't we just write {\f2 Invoke(&foo, &Foo::Concrete)} ? If you do that, {\f2 MockFoo::Concrete()}  will be called (and cause an infinite recursion) since {\f2 Foo::Concrete()}  is virtual. That's just how C++ works.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Matchers} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Argument Values Exactly} \par}
You can specify exactly which arguments a mock method is expecting:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(5))\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Simple Matchers} \par}
You can use matchers to match arguments that have a certain property:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::NotNull;\par
using ::testing::Return;\par
...\par
  EXPECT_CALL(foo, DoThis(Ge(5)))  // The argument must be >= 5.\par
      .WillOnce(Return('a'));\par
  EXPECT_CALL(foo, DoThat("Hello", NotNull()));\par
  // The second argument must not be NULL.\par
}
\par
A frequently used matcher is {\f2 _} , which matches anything:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::NotNull;\par
...\par
  EXPECT_CALL(foo, DoThat(_, NotNull()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Matchers} \par}
You can build complex matchers from existing ones using {\f2 AllOf()} , {\f2 AnyOf()} , and {\f2 Not()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AllOf;\par
using ::testing::Gt;\par
using ::testing::HasSubstr;\par
using ::testing::Ne;\par
using ::testing::Not;\par
...\par
  // The argument must be > 5 and != 10.\par
  EXPECT_CALL(foo, DoThis(AllOf(Gt(5),\par
                                Ne(10))));\par
\par
  // The first argument must not contain sub-string "blah".\par
  EXPECT_CALL(foo, DoThat(Not(HasSubstr("blah")),\par
                          NULL));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Casting Matchers} \par}
Google {\b Mock} matchers are statically typed, meaning that the compiler can catch your mistake if you use a matcher of the wrong type (for example, if you use {\f2 Eq(5)}  to match a {\f2 string}  argument). Good for you!\par
Sometimes, however, you know what you're doing and want the compiler to give you some slack. One example is that you have a matcher for {\f2 long}  and the argument you want to match is {\f2 int} . While the two types aren't exactly the same, there is nothing really wrong with using a {\f2 Matcher<long>}  to match an {\f2 int}  - after all, we can first convert the {\f2 int}  argument to a {\f2 long}  before giving it to the matcher.\par
To support this need, Google {\b Mock} gives you the {\f2 SafeMatcherCast<T>(m)}  function. It casts a matcher {\f2 m}  to type {\f2 Matcher<T>} . To ensure safety, Google {\b Mock} checks that (let {\f2 U}  be the type {\f2 m}  accepts):\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Type {\f2 T}  can be implicitly cast to type {\f2 U} ;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When both {\f2 T}  and {\f2 U}  are built-in arithmetic types ({\f2 bool} , integers, and floating-point numbers), the conversion from {\f2 T}  to {\f2 U}  is not lossy (in other words, any value representable by {\f2 T}  can also be represented by {\f2 U} ); and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When {\f2 U}  is a reference, {\f2 T}  must also be a reference (as the underlying matcher may be interested in the address of the {\f2 U}  value).\par}
The code won't compile if any of these conditions isn't met.\par
Here's one example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SafeMatcherCast;\par
\par
// A base class and a child class.\par
class Base \{ ... \};\par
class Derived : public Base \{ ... \};\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(DoThis, void(Derived* derived));\par
\};\par
...\par
\par
  MockFoo foo;\par
  // m is a Matcher<Base*> we got from somewhere.\par
  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\par
}
\par
If you find {\f2 SafeMatcherCast<T>(m)}  too limiting, you can use a similar function {\f2 MatcherCast<T>(m)} . The difference is that {\f2 MatcherCast}  works as long as you can {\f2 static_cast}  type {\f2 T}  to type {\f2 U} .\par
{\f2 MatcherCast}  essentially lets you bypass C++'s type system ({\f2 static_cast}  isn't always safe as it could throw away information, for example), so be careful not to misuse/abuse it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Between Overloaded Functions} \par}
If you expect an overloaded function to be called, the compiler may need some help on which overloaded version it is.\par
To disambiguate functions overloaded on the const-ness of this object, use the {\f2 Const()}  argument wrapper.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD0(GetBar, Bar&());\par
  MOCK_CONST_METHOD0(GetBar, const Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar1, bar2;\par
  EXPECT_CALL(foo, GetBar())         // The non-const GetBar().\par
      .WillOnce(ReturnRef(bar1));\par
  EXPECT_CALL(Const(foo), GetBar())  // The const GetBar().\par
      .WillOnce(ReturnRef(bar2));\par
}
\par
({\f2 Const()}  is defined by Google {\b Mock} and returns a {\f2 const}  reference to its argument.)\par
To disambiguate overloaded functions with the same number of arguments but different argument types, you may need to specify the exact type of a matcher, either by wrapping your matcher in {\f2 Matcher<type>()} , or using a matcher whose type is fixed ({\f2 TypedEq<type>} , {\f2 An<type>()} , etc):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::An;\par
using ::testing::Lt;\par
using ::testing::Matcher;\par
using ::testing::TypedEq;\par
\par
class MockPrinter : public Printer \{\par
 public:\par
  MOCK_METHOD1(Print, void(int n));\par
  MOCK_METHOD1(Print, void(char c));\par
\};\par
\par
TEST(PrinterTest, Print) \{\par
  MockPrinter printer;\par
\par
  EXPECT_CALL(printer, Print(An<int>()));            // void Print(int);\par
  EXPECT_CALL(printer, Print(Matcher<int>(Lt(5))));  // void Print(int);\par
  EXPECT_CALL(printer, Print(TypedEq<char>('a')));   // void Print(char);\par
\par
  printer.Print(3);\par
  printer.Print(6);\par
  printer.Print('a');\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Performing Different Actions Based on the Arguments} \par}
When a mock method is called, the {\i last}  matching expectation that's still active will be selected (think "newer overrides older"). So, you can make a method do different things depending on its argument values like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Return;\par
...\par
  // The default case.\par
  EXPECT_CALL(foo, DoThis(_))\par
      .WillRepeatedly(Return('b'));\par
\par
  // The more specific case.\par
  EXPECT_CALL(foo, DoThis(Lt(5)))\par
      .WillRepeatedly(Return('a'));\par
}
\par
Now, if {\f2 foo.DoThis()}  is called with a value less than 5, {\f2 'a'}  will be returned; otherwise {\f2 'b'}  will be returned.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Multiple Arguments as a Whole} \par}
Sometimes it's not enough to match the arguments individually. For example, we may want to say that the first argument must be less than the second argument. The {\f2 With()}  clause allows us to match all arguments of a mock function as a whole. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Lt;\par
using ::testing::Ne;\par
...\par
  EXPECT_CALL(foo, InRange(Ne(0), _))\par
      .With(Lt());\par
}
\par
says that the first argument of {\f2 InRange()}  must not be 0, and must be less than the second argument.\par
The expression inside {\f2 With()}  must be a matcher of type {\f2 Matcher<tr1::tuple<A1, ..., An> >} , where {\f2 A1} , ..., {\f2 An}  are the types of the function arguments.\par
You can also write {\f2 AllArgs(m)}  instead of {\f2 m}  inside {\f2 .With()} . The two forms are equivalent, but {\f2 .With(AllArgs(Lt()))}  is more readable than {\f2 .With(Lt())} .\par
You can use {\f2 Args<k1, ..., kn>(m)}  to match the {\f2 n}  selected arguments (as a tuple) against {\f2 m} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AllOf;\par
using ::testing::Args;\par
using ::testing::Lt;\par
...\par
  EXPECT_CALL(foo, Blah(_, _, _))\par
      .With(AllOf(Args<0, 1>(Lt()), Args<1, 2>(Lt())));\par
}
\par
says that {\f2 Blah()}  will be called with arguments {\f2 x} , {\f2 y} , and {\f2 z}  where {\f2 x < y < z} .\par
As a convenience and example, Google {\b Mock} provides some matchers for 2-tuples, including the {\f2 Lt()}  matcher above. See the CheatSheet for the complete list.\par
Note that if you want to pass the arguments to a predicate of your own (e.g. {\f2 .With(Args<0, 1>(Truly(&MyPredicate)))} ), that predicate MUST be written to take a {\f2 tr1::tuple}  as its argument; Google {\b Mock} will pass the {\f2 n}  selected arguments as {\i one}  single tuple to the predicate.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers as Predicates} \par}
Have you noticed that a matcher is just a fancy predicate that also knows how to describe itself? Many existing algorithms take predicates as arguments (e.g. those defined in STL's {\f2 <algorithm>}  header), and it would be a shame if Google {\b Mock} matchers are not allowed to participate.\par
Luckily, you can use a matcher where a unary predicate functor is expected by wrapping it inside the {\f2 Matches()}  function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <algorithm>\par
#include <vector>\par
\par
std::vector<int> v;\par
...\par
// How many elements in v are >= 10?\par
const int count = count_if(v.begin(), v.end(), Matches(Ge(10)));\par
}
\par
Since you can build complex matchers from simpler ones easily using Google {\b Mock}, this gives you a way to conveniently construct composite predicates (doing the same using STL's {\f2 <functional>}  header is just painful). For example, here's a predicate that's satisfied by any number that is >= 0, <= 100, and != 50:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matches(AllOf(Ge(0), Le(100), Ne(50)))\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Matchers in Google Test Assertions} \par}
Since matchers are basically predicates that also know how to describe themselves, there is a way to take advantage of them in {\f2 Google Test} assertions. It's called {\f2 ASSERT_THAT}  and {\f2 EXPECT_THAT} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THAT(value, matcher);  // Asserts that value matches matcher.\par
EXPECT_THAT(value, matcher);  // The non-fatal version.\par
}
\par
For example, in a Google Test test you can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"\par
\par
using ::testing::AllOf;\par
using ::testing::Ge;\par
using ::testing::Le;\par
using ::testing::MatchesRegex;\par
using ::testing::StartsWith;\par
...\par
\par
  EXPECT_THAT(Foo(), StartsWith("Hello"));\par
  EXPECT_THAT(Bar(), MatchesRegex("Line \\\\d+"));\par
  ASSERT_THAT(Baz(), AllOf(Ge(5), Le(10)));\par
}
\par
which (as you can probably guess) executes {\f2 Foo()} , {\f2 Bar()} , and {\f2 Baz()} , and verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Foo()}  returns a string that starts with {\f2 "Hello"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Bar()}  returns a string that matches regular expression {\f2 "Line \\\\d+"} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Baz()}  returns a number in the range [5, 10].\par}
The nice thing about these macros is that {\i they read like English} . They generate informative messages too. For example, if the first {\f2 EXPECT_THAT()}  above fails, the message will be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Foo()\par
  Actual: "Hi, world!"\par
Expected: starts with "Hello"\par
}
\par
{\b Credit:}  The idea of {\f2 (ASSERT|EXPECT)_THAT}  was stolen from the {\f2 Hamcrest} project, which adds {\f2 assertThat()}  to JUnit.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Predicates as Matchers} \par}
Google {\b Mock} provides a built-in set of matchers. In case you find them lacking, you can use an arbitray unary predicate function or functor as a matcher - as long as the predicate accepts a value of the type you want. You do this by wrapping the predicate inside the {\f2 Truly()}  function, for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Truly;\par
\par
int IsEven(int n) \{ return (n % 2) == 0 ? 1 : 0; \}\par
...\par
\par
  // Bar() must be called with an even number.\par
  EXPECT_CALL(foo, Bar(Truly(IsEven)));\par
}
\par
Note that the predicate function / functor doesn't have to return {\f2 bool} . It works as long as the return value can be used as the condition in statement {\f2 if (condition) ...} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Arguments that Are Not Copyable} \par}
When you do an {\f2 EXPECT_CALL(mock_obj, Foo(bar))} , Google {\b Mock} saves away a copy of {\f2 bar} . When {\f2 Foo()}  is called later, Google {\b Mock} compares the argument to {\f2 Foo()}  with the saved copy of {\f2 bar} . This way, you don't need to worry about {\f2 bar}  being modified or destroyed after the {\f2 EXPECT_CALL()}  is executed. The same is true when you use matchers like {\f2 Eq(bar)} , {\f2 Le(bar)} , and so on.\par
But what if {\f2 bar}  cannot be copied (i.e. has no copy constructor)? You could define your own matcher function and use it with {\f2 Truly()} , as the previous couple of recipes have shown. Or, you may be able to get away from it if you can guarantee that {\f2 bar}  won't be changed after the {\f2 EXPECT_CALL()}  is executed. Just tell Google {\b Mock} that it should save a reference to {\f2 bar} , instead of a copy of it. Here's how:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Eq;\par
using ::testing::ByRef;\par
using ::testing::Lt;\par
...\par
  // Expects that Foo()'s argument == bar.\par
  EXPECT_CALL(mock_obj, Foo(Eq(ByRef(bar))));\par
\par
  // Expects that Foo()'s argument < bar.\par
  EXPECT_CALL(mock_obj, Foo(Lt(ByRef(bar))));\par
}
\par
Remember: if you do this, don't change {\f2 bar}  after the {\f2 EXPECT_CALL()} , or the result is undefined.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating a Member of an Object} \par}
Often a mock function takes a reference to object as an argument. When matching the argument, you may not want to compare the entire object against a fixed object, as that may be over-specification. Instead, you may need to validate a certain member variable or the result of a certain getter method of the object. You can do this with {\f2 Field()}  and {\f2 Property()} . More specifically,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::bar, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 bar}  member variable satisfies matcher {\f2 m} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Property(&Foo::baz, m)\par
}
\par
is a matcher that matches a {\f2 Foo}  object whose {\f2 baz()}  method returns a value that satisfies matcher {\f2 m} .\par
For example:\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Field(&Foo::number, Ge(3))}  | Matches {\f2 x}  where {\f2 x.number >= 3} . | \par
}|:--------------------------\'97|:--------------------------------\'97| \par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid | {\f2 Property(&Foo::name, StartsWith("John "))}  | Matches {\f2 x}  where {\f2 x.name()}  starts with {\f2 "John "} . | \par
}Note that in {\f2 Property(&Foo::baz, ...)} , method {\f2 baz()}  must take no argument and be declared as {\f2 const} .\par
BTW, {\f2 Field()}  and {\f2 Property()}  can also match plain pointers to objects. For instance,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Field(&Foo::number, Ge(3))\par
}
\par
matches a plain pointer {\f2 p}  where {\f2 p->number >= 3} . If {\f2 p}  is {\f2 NULL} , the match will always fail regardless of the inner matcher.\par
What if you want to validate more than one members at the same time? Remember that there is {\f2 AllOf()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Validating the Value Pointed to by a Pointer Argument} \par}
C++ functions often take pointers as arguments. You can use matchers like {\f2 IsNull()} , {\f2 NotNull()} , and other comparison matchers to match a pointer, but what if you want to make sure the value {\i pointed to}  by the pointer, instead of the pointer itself, has a certain property? Well, you can use the {\f2 Pointee(m)}  matcher.\par
{\f2 Pointee(m)}  matches a pointer iff {\f2 m}  matches the value the pointer points to. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;\par
using ::testing::Pointee;\par
...\par
  EXPECT_CALL(foo, Bar(Pointee(Ge(3))));\par
}
\par
expects {\f2 foo.Bar()}  to be called with a pointer that points to a value greater than or equal to 3.\par
One nice thing about {\f2 Pointee()}  is that it treats a {\f2 NULL}  pointer as a match failure, so you can write {\f2 Pointee(m)}  instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid AllOf(NotNull(), Pointee(m))\par
}
\par
without worrying that a {\f2 NULL}  pointer will crash your test.\par
Also, did we tell you that {\f2 Pointee()}  works with both raw pointers {\b and}  smart pointers ({\f2 linked_ptr} , {\f2 shared_ptr} , {\f2 scoped_ptr} , and etc)?\par
What if you have a pointer to pointer? You guessed it - you can use nested {\f2 Pointee()}  to probe deeper inside the value. For example, {\f2 Pointee(Pointee(Lt(3)))}  matches a pointer that points to a pointer that points to a number less than 3 (what a mouthful...).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing a Certain Property of an Object} \par}
Sometimes you want to specify that an object argument has a certain property, but there is no existing matcher that does this. If you want good error messages, you should define a matcher. If you want to do it quick and dirty, you could get away with writing an ordinary function.\par
Let's say you have a mock function that takes an object of type {\f2 Foo} , which has an {\f2 int bar()}  method and an {\f2 int baz()}  method, and you want to constrain that the argument's {\f2 bar()}  value plus its {\f2 baz()}  value is a given number. Here's how you can define a matcher to do it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class BarPlusBazEqMatcher : public MatcherInterface<const Foo&> \{\par
 public:\par
  explicit BarPlusBazEqMatcher(int expected_sum)\par
      : expected_sum_(expected_sum) \{\}\par
\par
  virtual bool MatchAndExplain(const Foo& foo,\par
                               MatchResultListener* listener) const \{\par
    return (foo.bar() + foo.baz()) == expected_sum_;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() equals " << expected_sum_;\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "bar() + baz() does not equal " << expected_sum_;\par
  \}\par
 private:\par
  const int expected_sum_;\par
\};\par
\par
inline Matcher<const Foo&> BarPlusBazEq(int expected_sum) \{\par
  return MakeMatcher(new BarPlusBazEqMatcher(expected_sum));\par
\}\par
\par
...\par
\par
  EXPECT_CALL(..., DoThis(BarPlusBazEq(5)))...;\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matching Containers} \par}
Sometimes an STL container (e.g. list, vector, map, ...) is passed to a mock function and you may want to validate it. Since most STL containers support the {\f2 ==}  operator, you can write {\f2 Eq(expected_container)}  or simply {\f2 expected_container}  to match a container exactly.\par
Sometimes, though, you may want to be more flexible (for example, the first element must be an exact match, but the second element can be any positive number, and so on). Also, containers used in tests often have a small number of elements, and having to define the expected container out-of-line is a bit of a hassle.\par
You can use the {\f2 ElementsAre()}  or {\f2 UnorderedElementsAre()}  matcher in such cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::ElementsAre;\par
using ::testing::Gt;\par
...\par
\par
  MOCK_METHOD1(Foo, void(const vector<int>& numbers));\par
...\par
\par
  EXPECT_CALL(mock, Foo(ElementsAre(1, Gt(0), _, 5)));\par
}
\par
The above matcher says that the container must have 4 elements, which must be 1, greater than 0, anything, and 5 respectively.\par
If you instead write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Gt;\par
using ::testing::UnorderedElementsAre;\par
...\par
\par
  MOCK_METHOD1(Foo, void(const vector<int>& numbers));\par
...\par
\par
  EXPECT_CALL(mock, Foo(UnorderedElementsAre(1, Gt(0), _, 5)));\par
}
\par
It means that the container must have 4 elements, which under some permutation must be 1, greater than 0, anything, and 5 respectively.\par
{\f2 ElementsAre()}  and {\f2 UnorderedElementsAre()}  are overloaded to take 0 to 10 arguments. If more are needed, you can place them in a C-style array and use {\f2 ElementsAreArray()}  or {\f2 UnorderedElementsAreArray()}  instead:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
\par
  // ElementsAreArray accepts an array of element values.\par
  const int expected_vector1[] = \{ 1, 5, 2, 4, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector1)));\par
\par
  // Or, an array of element matchers.\par
  Matcher<int> expected_vector2 = \{ 1, Gt(2), _, 3, ... \};\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector2)));\par
}
\par
In case the array needs to be dynamically created (and therefore the array size cannot be inferred by the compiler), you can give {\f2 ElementsAreArray()}  an additional argument to specify the array size:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ElementsAreArray;\par
...\par
  int* const expected_vector3 = new int[count];\par
  ... fill expected_vector3 with values ...\par
  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector3, count)));\par
}
\par
{\b Tips:} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ElementsAre*()}  can be used to match {\i any}  container that implements the STL iterator pattern (i.e. it has a {\f2 const_iterator}  type and supports {\f2 begin()/end()} ), not just the ones defined in STL. It will even work with container types yet to be written - as long as they follows the above pattern.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can use nested {\f2 ElementsAre*()}  to match nested (multi-dimensional) containers.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the container is passed by pointer instead of by reference, just write {\f2 Pointee(ElementsAre*(...))} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The order of elements {\i matters}  for {\f2 ElementsAre*()} . Therefore don't use it with containers whose element order is undefined (e.g. {\f2 hash_map} ).\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Matchers} \par}
Under the hood, a Google {\b Mock} matcher object consists of a pointer to a ref-counted implementation object. Copying matchers is allowed and very efficient, as only the pointer is copied. When the last matcher that references the implementation object dies, the implementation object will be deleted.\par
Therefore, if you have some complex matcher that you want to use again and again, there is no need to build it everytime. Just assign it to a matcher variable and use that variable repeatedly! For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Matcher<int> in_range = AllOf(Gt(5), Le(10));\par
... use in_range as a matcher in multiple EXPECT_CALLs ...\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Knowing When to Expect} \par}
{\f2 ON_CALL}  is likely the single most under-utilized construct in Google {\b Mock}.\par
There are basically two constructs for defining the behavior of a mock object: {\f2 ON_CALL}  and {\f2 EXPECT_CALL} . The difference? {\f2 ON_CALL}  defines what happens when a mock method is called, but {\i doesn't imply any expectation on the method being called.}  {\f2 EXPECT_CALL}  not only defines the behavior, but also sets an expectation that {\i the method will be called with the given arguments, for the given number of times}  (and {\i in the given order}  when you specify the order too).\par
Since {\f2 EXPECT_CALL}  does more, isn't it better than {\f2 ON_CALL} ? Not really. Every {\f2 EXPECT_CALL}  adds a constraint on the behavior of the code under test. Having more constraints than necessary is {\i baaad}  - even worse than not having enough constraints.\par
This may be counter-intuitive. How could tests that verify more be worse than tests that verify less? Isn't verification the whole point of tests?\par
The answer, lies in {\i what}  a test should verify. {\b A good test verifies the contract of the code.}  If a test over-specifies, it doesn't leave enough freedom to the implementation. As a result, changing the implementation without breaking the contract (e.g. refactoring and optimization), which should be perfectly fine to do, can break such tests. Then you have to spend time fixing them, only to see them broken again the next time the implementation is changed.\par
Keep in mind that one doesn't have to verify more than one property in one test. In fact, {\b it's a good style to verify only one thing in one test.}  If you do that, a bug will likely break only one or two tests instead of dozens (which case would you rather debug?). If you are also in the habit of giving tests descriptive names that tell what they verify, you can often easily guess what's wrong just from the test log itself.\par
So use {\f2 ON_CALL}  by default, and only use {\f2 EXPECT_CALL}  when you actually intend to verify that the call is made. For example, you may have a bunch of {\f2 ON_CALL} s in your test fixture to set the common mock behavior shared by all tests in the same group, and write (scarcely) different {\f2 EXPECT_CALL} s in different {\f2 TEST_F} s to verify different aspects of the code's behavior. Compared with the style where each {\f2 TEST}  has many {\f2 EXPECT_CALL} s, this leads to tests that are more resilient to implementational changes (and thus less likely to require maintenance) and makes the intent of the tests more obvious (so they are easier to maintain when you do need to maintain them).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Uninteresting Calls} \par}
If you are not interested in how a mock method is called, just don't say anything about it. In this case, if the method is ever called, Google {\b Mock} will perform its default action to allow the test program to continue. If you are not happy with the default action taken by Google {\b Mock}, you can override it using {\f2 DefaultValue<T>::Set()}  (described later in this document) or {\f2 ON_CALL()} .\par
Please note that once you expressed interest in a particular mock method (via {\f2 EXPECT_CALL()} ), all invocations to it must match some expectation. If this function is called but the arguments don't match any {\f2 EXPECT_CALL()}  statement, it will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Disallowing Unexpected Calls} \par}
If a mock method shouldn't be called at all, explicitly say so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(foo, Bar(_))\par
      .Times(0);\par
}
\par
If some calls to the method are allowed, but the rest are not, just list all the expected calls:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::AnyNumber;\par
using ::testing::Gt;\par
...\par
  EXPECT_CALL(foo, Bar(5));\par
  EXPECT_CALL(foo, Bar(Gt(10)))\par
      .Times(AnyNumber());\par
}
\par
A call to {\f2 foo.Bar()}  that doesn't match any of the {\f2 EXPECT_CALL()}  statements will be an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Ordered Calls} \par}
Although an {\f2 EXPECT_CALL()}  statement defined earlier takes precedence when Google {\b Mock} tries to match a function call with an expectation, by default calls don't have to happen in the order {\f2 EXPECT_CALL()}  statements are written. For example, if the arguments match the matchers in the third {\f2 EXPECT_CALL()} , but not those in the first two, then the third expectation will be used.\par
If you would rather have all calls occur in the order of the expectations, put the {\f2 EXPECT_CALL()}  statements in a block where you define a variable of type {\f2 InSequence} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InSequence;\par
\par
\{\par
  InSequence s;\par
\par
  EXPECT_CALL(foo, DoThis(5));\par
  EXPECT_CALL(bar, DoThat(_))\par
      .Times(2);\par
  EXPECT_CALL(foo, DoThis(6));\par
\}\par
}
\par
In this example, we expect a call to {\f2 foo.DoThis(5)} , followed by two calls to {\f2 bar.DoThat()}  where the argument can be anything, which are in turn followed by a call to {\f2 foo.DoThis(6)} . If a call occurred out-of-order, Google {\b Mock} will report an error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Expecting Partially Ordered Calls} \par}
Sometimes requiring everything to occur in a predetermined order can lead to brittle tests. For example, we may care about {\f2 A}  occurring before both {\f2 B}  and {\f2 C} , but aren't interested in the relative order of {\f2 B}  and {\f2 C} . In this case, the test should reflect our real intent, instead of being overly constraining.\par
Google {\b Mock} allows you to impose an arbitrary DAG (directed acyclic graph) on the calls. One way to express the DAG is to use the {\f2 After} clause of {\f2 EXPECT_CALL} .\par
Another way is via the {\f2 InSequence()}  clause (not the same as the {\f2 InSequence}  class), which we borrowed from jMock 2. It's less flexible than {\f2 After()} , but more convenient when you have long chains of sequential calls, as it doesn't require you to come up with different names for the expectations in the chains. Here's how it works:\par
If we view {\f2 EXPECT_CALL()}  statements as nodes in a graph, and add an edge from node A to node B wherever A must occur before B, we can get a DAG. We use the term "sequence" to mean a directed path in this DAG. Now, if we decompose the DAG into sequences, we just need to know which sequences each {\f2 EXPECT_CALL()}  belongs to in order to be able to reconstruct the orginal DAG.\par
So, to specify the partial order on the expectations we need to do two things: first to define some {\f2 Sequence}  objects, and then for each {\f2 EXPECT_CALL()}  say which {\f2 Sequence}  objects it is part of. Expectations in the same sequence must occur in the order they are written. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(foo, A())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(bar, B())\par
    .InSequence(s1);\par
EXPECT_CALL(bar, C())\par
    .InSequence(s2);\par
EXPECT_CALL(foo, D())\par
    .InSequence(s2);\par
}
\par
specifies the following DAG (where {\f2 s1}  is {\f2 A -> B} , and {\f2 s2}  is {\f2 A -> C -> D} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid      +---> B\par
     |\par
A ---|\par
     |\par
     +---> C ---> D\par
}
\par
This means that A must occur before B and C, and C must occur before D. There's no restriction about the order other than these.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling When an Expectation Retires} \par}
When a mock method is called, Google {\b Mock} only consider expectations that are still active. An expectation is active when created, and becomes inactive (aka {\i retires} ) when a call that has to occur later has occurred. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Sequence;\par
\par
Sequence s1, s2;\par
\par
EXPECT_CALL(log, Log(WARNING, _, "File too large."))     // #1\par
    .Times(AnyNumber())\par
    .InSequence(s1, s2);\par
EXPECT_CALL(log, Log(WARNING, _, "Data set is empty."))  // #2\par
    .InSequence(s1);\par
EXPECT_CALL(log, Log(WARNING, _, "User not found."))     // #3\par
    .InSequence(s2);\par
}
\par
as soon as either #2 or #3 is matched, #1 will retire. If a warning {\f2 "File too large."}  is logged after this, it will be an error.\par
Note that an expectation doesn't retire automatically when it's saturated. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                  // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."));  // #2\par
}
\par
says that there will be exactly one warning with the message {\f2 "File
too large."} . If the second warning contains this message too, #2 will match again and result in an upper-bound-violated error.\par
If this is not what you want, you can ask an expectation to retire as soon as it becomes saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  EXPECT_CALL(log, Log(WARNING, _, _));                 // #1\par
  EXPECT_CALL(log, Log(WARNING, _, "File too large."))  // #2\par
      .RetiresOnSaturation();\par
}
\par
Here #2 can be used only once, so if you have two warnings with the message {\f2 "File too large."} , the first will match #2 and the second will match #1 - there will be no error.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Actions} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning References from {\b Mock} Methods} \par}
If a mock function's return type is a reference, you need to use {\f2 ReturnRef()}  instead of {\f2 Return()}  to return a result:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::ReturnRef;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(GetBar, Bar&());\par
\};\par
...\par
\par
  MockFoo foo;\par
  Bar bar;\par
  EXPECT_CALL(foo, GetBar())\par
      .WillOnce(ReturnRef(bar));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Returning Live Values from {\b Mock} Methods} \par}
The {\f2 Return(x)}  action saves a copy of {\f2 x}  when the action is {\i created} , and always returns the same value whenever it's executed. Sometimes you may want to instead return the {\i live}  value of {\f2 x}  (i.e. its value at the time when the action is {\i executed} .).\par
If the mock function's return type is a reference, you can do it using {\f2 ReturnRef(x)} , as shown in the previous recipe ("Returning References
from Mock Methods"). However, Google {\b Mock} doesn't let you use {\f2 ReturnRef()}  in a mock function whose return type is not a reference, as doing that usually indicates a user error. So, what shall you do?\par
You may be tempted to try {\f2 ByRef()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::ByRef;\par
using testing::Return;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(GetValue, int());\par
\};\par
...\par
  int x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(Return(ByRef(x)));\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());\par
}
\par
Unfortunately, it doesn't work here. The above code will fail with error:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: foo.GetValue()\par
  Actual: 0\par
Expected: 42\par
}
\par
The reason is that {\f2 Return(value)}  converts {\f2 value}  to the actual return type of the mock function at the time when the action is {\i created} , not when it is {\i executed} . (This behavior was chosen for the action to be safe when {\f2 value}  is a proxy object that references some temporary objects.) As a result, {\f2 ByRef(x)}  is converted to an {\f2 int}  value (instead of a {\f2 const int&} ) when the expectation is set, and {\f2 Return(ByRef(x))}  will always return 0.\par
{\f2 ReturnPointee(pointer)}  was provided to solve this problem specifically. It returns the value pointed to by {\f2 pointer}  at the time the action is {\i executed} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::ReturnPointee;\par
...\par
  int x = 0;\par
  MockFoo foo;\par
  EXPECT_CALL(foo, GetValue())\par
      .WillRepeatedly(ReturnPointee(&x));  // Note the & here.\par
  x = 42;\par
  EXPECT_EQ(42, foo.GetValue());  // This will succeed now.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Combining Actions} \par}
Want to do more than one thing when a function is called? That's fine. {\f2 DoAll()}  allow you to do sequence of actions every time. Only the return value of the last action in the sequence will be used.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::DoAll;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Bar, bool(int n));\par
\};\par
...\par
\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(DoAll(action_1,\par
                      action_2,\par
                      ...\par
                      action_n));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Side Effects} \par}
Sometimes a method exhibits its effect not via returning a value but via side effects. For example, it may change some global state or modify an output argument. To mock side effects, in general you can define your own action by implementing {\f2 {\b testing::ActionInterface}} .\par
If all you need to do is to change an output argument, the built-in {\f2 SetArgPointee()}  action is convenient:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::SetArgPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(bool mutate, int* value));\par
  ...\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, Mutate(true, _))\par
      .WillOnce(SetArgPointee<1>(5));\par
}
\par
In this example, when {\f2 mutator.Mutate()}  is called, we will assign 5 to the {\f2 int}  variable pointed to by argument #1 (0-based).\par
{\f2 SetArgPointee()}  conveniently makes an internal copy of the value you pass to it, removing the need to keep the value in scope and alive. The implication however is that the value must have a copy constructor and assignment operator.\par
If the mock method also needs to return a value as well, you can chain {\f2 SetArgPointee()}  with {\f2 Return()}  using {\f2 DoAll()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Return;\par
using ::testing::SetArgPointee;\par
\par
class MockMutator : public Mutator \{\par
 public:\par
  ...\par
  MOCK_METHOD1(MutateInt, bool(int* value));\par
\};\par
...\par
\par
  MockMutator mutator;\par
  EXPECT_CALL(mutator, MutateInt(_))\par
      .WillOnce(DoAll(SetArgPointee<0>(5),\par
                      Return(true)));\par
}
\par
If the output argument is an array, use the {\f2 SetArrayArgument<N>(first, last)}  action instead. It copies the elements in source range {\f2 [first, last)}  to the array pointed to by the {\f2 N} -th (0-based) argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::NotNull;\par
using ::testing::SetArrayArgument;\par
\par
class MockArrayMutator : public ArrayMutator \{\par
 public:\par
  MOCK_METHOD2(Mutate, void(int* values, int num_values));\par
  ...\par
\};\par
...\par
\par
  MockArrayMutator mutator;\par
  int values[5] = \{ 1, 2, 3, 4, 5 \};\par
  EXPECT_CALL(mutator, Mutate(NotNull(), 5))\par
      .WillOnce(SetArrayArgument<0>(values, values + 5));\par
}
\par
This also works when the argument is an output iterator:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SeArrayArgument;\par
\par
class MockRolodex : public Rolodex \{\par
 public:\par
  MOCK_METHOD1(GetNames, void(std::back_insert_iterator<vector<string> >));\par
  ...\par
\};\par
...\par
\par
  MockRolodex rolodex;\par
  vector<string> names;\par
  names.push_back("George");\par
  names.push_back("John");\par
  names.push_back("Thomas");\par
  EXPECT_CALL(rolodex, GetNames(_))\par
      .WillOnce(SetArrayArgument<0>(names.begin(), names.end()));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Changing a {\b Mock} Object's Behavior Based on the State} \par}
If you expect a call to change the behavior of a mock object, you can use {\f2 {\b testing::InSequence}}  to specify different behaviors before and after the call:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
\par
...\par
  \{\par
    InSequence seq;\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(true));\par
    EXPECT_CALL(my_mock, Flush());\par
    EXPECT_CALL(my_mock, IsDirty())\par
        .WillRepeatedly(Return(false));\par
  \}\par
  my_mock.FlushIfDirty();\par
}
\par
This makes {\f2 my_mock.IsDirty()}  return {\f2 true}  before {\f2 my_mock.Flush()}  is called and return {\f2 false}  afterwards.\par
If the behavior change is more complex, you can store the effects in a variable and make a mock method get its return value from that variable:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::SaveArg;\par
using ::testing::Return;\par
\par
ACTION_P(ReturnPointee, p) \{ return *p; \}\par
...\par
  int previous_value = 0;\par
  EXPECT_CALL(my_mock, GetPrevValue())\par
      .WillRepeatedly(ReturnPointee(&previous_value));\par
  EXPECT_CALL(my_mock, UpdateValue(_))\par
      .WillRepeatedly(SaveArg<0>(&previous_value));\par
  my_mock.DoSomethingToUpdateValue();\par
}
\par
Here {\f2 my_mock.GetPrevValue()}  will always return the argument of the last {\f2 UpdateValue()}  call.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Value for a Return Type} \par}
If a mock method's return type is a built-in C++ type or pointer, by default it will return 0 when invoked. You only need to specify an action if this default value doesn't work for you.\par
Sometimes, you may want to change this default value, or you may want to specify a default value for types Google {\b Mock} doesn't know about. You can do this using the {\f2 {\b testing::DefaultValue}}  class template:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD0(CalculateBar, Bar());\par
\};\par
...\par
\par
  Bar default_bar;\par
  // Sets the default return value for type Bar.\par
  DefaultValue<Bar>::Set(default_bar);\par
\par
  MockFoo foo;\par
\par
  // We don't need to specify an action here, as the default\par
  // return value works for us.\par
  EXPECT_CALL(foo, CalculateBar());\par
\par
  foo.CalculateBar();  // This should return default_bar.\par
\par
  // Unsets the default return value.\par
  DefaultValue<Bar>::Clear();\par
}
\par
Please note that changing the default value for a type can make you tests hard to understand. We recommend you to use this feature judiciously. For example, you may want to make sure the {\f2 Set()}  and {\f2 Clear()}  calls are right next to the code that uses your mock.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setting the Default Actions for a {\b Mock} Method} \par}
You've learned how to change the default value of a given type. However, this may be too coarse for your purpose: perhaps you have two mock methods with the same return type and you want them to have different behaviors. The {\f2 ON_CALL()}  macro allows you to customize your mock's behavior at the method level:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::AnyNumber;\par
using ::testing::Gt;\par
using ::testing::Return;\par
...\par
  ON_CALL(foo, Sign(_))\par
      .WillByDefault(Return(-1));\par
  ON_CALL(foo, Sign(0))\par
      .WillByDefault(Return(0));\par
  ON_CALL(foo, Sign(Gt(0)))\par
      .WillByDefault(Return(1));\par
\par
  EXPECT_CALL(foo, Sign(_))\par
      .Times(AnyNumber());\par
\par
  foo.Sign(5);   // This should return 1.\par
  foo.Sign(-9);  // This should return -1.\par
  foo.Sign(0);   // This should return 0.\par
}
\par
As you may have guessed, when there are more than one {\f2 ON_CALL()}  statements, the news order take precedence over the older ones. In other words, the {\b last}  one that matches the function arguments will be used. This matching order allows you to set up the common behavior in a mock object's constructor or the test fixture's set-up phase and specialize the mock's behavior later.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Functions/Methods/Functors as Actions} \par}
If the built-in actions don't suit you, you can easily use an existing function, method, or functor as an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(Sum, int(int x, int y));\par
  MOCK_METHOD1(ComplexJob, bool(int x));\par
\};\par
\par
int CalculateSum(int x, int y) \{ return x + y; \}\par
\par
class Helper \{\par
 public:\par
  bool ComplexJob(int x);\par
\};\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  EXPECT_CALL(foo, Sum(_, _))\par
      .WillOnce(Invoke(CalculateSum));\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(Invoke(&helper, &Helper::ComplexJob));\par
\par
  foo.Sum(5, 6);       // Invokes CalculateSum(5, 6).\par
  foo.ComplexJob(10);  // Invokes helper.ComplexJob(10);\par
}
\par
The only requirement is that the type of the function, etc must be {\i compatible}  with the signature of the mock function, meaning that the latter's arguments can be implicitly converted to the corresponding arguments of the former, and the former's return type can be implicitly converted to that of the latter. So, you can invoke something whose type is {\i not}  exactly the same as the mock function, as long as it's safe to do so - nice, huh?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking a Function/Method/Functor Without Arguments} \par}
{\f2 Invoke()}  is very useful for doing actions that are more complex. It passes the mock function's arguments to the function or functor being invoked such that the callee has the full context of the call to work with. If the invoked function is not interested in some or all of the arguments, it can simply ignore them.\par
Yet, a common pattern is that a test author wants to invoke a function without the arguments of the mock function. {\f2 Invoke()}  allows her to do that using a wrapper function that throws away the arguments before invoking an underlining nullary function. Needless to say, this can be tedious and obscures the intent of the test.\par
{\f2 InvokeWithoutArgs()}  solves this problem. It's like {\f2 Invoke()}  except that it doesn't pass the mock function's arguments to the callee. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeWithoutArgs;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(ComplexJob, bool(int n));\par
\};\par
\par
bool Job1() \{ ... \}\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, ComplexJob(_))\par
      .WillOnce(InvokeWithoutArgs(Job1));\par
\par
  foo.ComplexJob(10);  // Invokes Job1().\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Invoking an Argument of the {\b Mock} Function} \par}
Sometimes a mock function will receive a function pointer or a functor (in other words, a "callable") as an argument, e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, bool(int n, bool (*fp)(int)));\par
\};\par
}
\par
and you may want to invoke this callable argument:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(...);\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
Arghh, you need to refer to a mock function argument but C++ has no lambda (yet), so you have to define your own action. :-( Or do you really?\par
Well, Google {\b Mock} has an action to solve {\i exactly}  this problem:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid InvokeArgument<N>(arg_1, arg_2, ..., arg_m)\par
}
\par
will invoke the {\f2 N} -th (0-based) argument the mock function receives, with {\f2 arg_1} , {\f2 arg_2} , ..., and {\f2 arg_m} . No matter if the argument is a function pointer or a functor, Google {\b Mock} handles them both.\par
With that, you could write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(InvokeArgument<1>(5));\par
  // Will execute (*fp)(5), where fp is the\par
  // second argument DoThis() receives.\par
}
\par
What if the callable takes an argument by reference? No problem - just wrap it inside {\f2 ByRef()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(Bar, bool(bool (*fp)(int, const Helper&)));\par
...\par
using ::testing::_;\par
using ::testing::ByRef;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  Helper helper;\par
  ...\par
  EXPECT_CALL(foo, Bar(_))\par
      .WillOnce(InvokeArgument<0>(5, ByRef(helper)));\par
  // ByRef(helper) guarantees that a reference to helper, not a copy of it,\par
  // will be passed to the callable.\par
}
\par
What if the callable takes an argument by reference and we do {\b not}  wrap the argument in {\f2 ByRef()} ? Then {\f2 InvokeArgument()}  will {\i make a copy}  of the argument, and pass a {\i reference to the copy} , instead of a reference to the original value, to the callable. This is especially handy when the argument is a temporary value:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  MOCK_METHOD1(DoThat, bool(bool (*f)(const double& x, const string& s)));\par
...\par
using ::testing::_;\par
using ::testing::InvokeArgument;\par
...\par
\par
  MockFoo foo;\par
  ...\par
  EXPECT_CALL(foo, DoThat(_))\par
      .WillOnce(InvokeArgument<0>(5.0, string("Hi")));\par
  // Will execute (*f)(5.0, string("Hi")), where f is the function pointer\par
  // DoThat() receives.  Note that the values 5.0 and string("Hi") are\par
  // temporary and dead once the EXPECT_CALL() statement finishes.  Yet\par
  // it's fine to perform this action later, since a copy of the values\par
  // are kept inside the InvokeArgument action.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring an Action's Result} \par}
Sometimes you have an action that returns {\i something} , but you need an action that returns {\f2 void}  (perhaps you want to use it in a mock function that returns {\f2 void} , or perhaps it needs to be used in {\f2 DoAll()}  and it's not the last in the list). {\f2 IgnoreResult()}  lets you do that. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Return;\par
\par
int Process(const MyData& data);\par
string DoSomething();\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD1(Abc, void(const MyData& data));\par
  MOCK_METHOD0(Xyz, bool());\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, Abc(_))\par
  // .WillOnce(Invoke(Process));\par
  // The above line won't compile as Process() returns int but Abc() needs\par
  // to return void.\par
      .WillOnce(IgnoreResult(Invoke(Process)));\par
\par
  EXPECT_CALL(foo, Xyz())\par
      .WillOnce(DoAll(IgnoreResult(Invoke(DoSomething)),\par
      // Ignores the string DoSomething() returns.\par
                      Return(true)));\par
}
\par
Note that you {\b cannot}  use {\f2 IgnoreResult()}  on an action that already returns {\f2 void} . Doing so will lead to ugly compiler errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting an Action's Arguments} \par}
Say you have a mock function {\f2 Foo()}  that takes seven arguments, and you have a custom action that you want to invoke when {\f2 Foo()}  is called. Trouble is, the custom action only wants three arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
...\par
  MOCK_METHOD7(Foo, bool(bool visible, const string& name, int x, int y,\par
                         const map<pair<int, int>, double>& weight,\par
                         double min_weight, double max_wight));\par
...\par
\par
bool IsVisibleInQuadrant1(bool visible, int x, int y) \{\par
  return visible && x >= 0 && y >= 0;\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(IsVisibleInQuadrant1));  // Uh, won't compile. :-(\par
}
\par
To please the compiler God, you can to define an "adaptor" that has the same signature as {\f2 Foo()}  and calls the custom action with the right arguments:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
bool MyIsVisibleInQuadrant1(bool visible, const string& name, int x, int y,\par
                            const map<pair<int, int>, double>& weight,\par
                            double min_weight, double max_wight) \{\par
  return IsVisibleInQuadrant1(visible, x, y);\par
\}\par
...\par
\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(Invoke(MyIsVisibleInQuadrant1));  // Now it works.\par
}
\par
But isn't this awkward?\par
Google {\b Mock} provides a generic {\i action adaptor} , so you can spend your time minding more important business than writing your own adaptors. Here's the syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid WithArgs<N1, N2, ..., Nk>(action)\par
}
\par
creates an action that passes the arguments of the mock function at the given indices (0-based) to the inner {\f2 action}  and performs it. Using {\f2 WithArgs} , our original example can be written as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::WithArgs;\par
...\par
  EXPECT_CALL(mock, Foo(_, _, _, _, _, _, _))\par
      .WillOnce(WithArgs<0, 2, 3>(Invoke(IsVisibleInQuadrant1)));\par
      // No need to define your own adaptor.\par
}
\par
For better readability, Google {\b Mock} also gives you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithoutArgs(action)}  when the inner {\f2 action}  takes {\i no}  argument, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 WithArg<N>(action)}  (no {\f2 s}  after {\f2 Arg} ) when the inner {\f2 action}  takes {\i one}  argument.\par}
As you may have realized, {\f2 InvokeWithoutArgs(...)}  is just syntactic sugar for {\f2 WithoutArgs(Inovke(...))} .\par
Here are more tips:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The inner action used in {\f2 WithArgs}  and friends does not have to be {\f2 Invoke()}  \'96 it can be anything.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can repeat an argument in the argument list if necessary, e.g. {\f2 WithArgs<2, 3, 3, 5>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can change the order of the arguments, e.g. {\f2 WithArgs<3, 2, 1>(...)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The types of the selected arguments do {\i not}  have to match the signature of the inner action exactly. It works as long as they can be implicitly converted to the corresponding arguments of the inner action. For example, if the 4-th argument of the mock function is an {\f2 int}  and {\f2 my_action}  takes a {\f2 double} , {\f2 WithArg<4>(my_action)}  will work.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ignoring Arguments in Action Functions} \par}
The selecting-an-action's-arguments recipe showed us one way to make a mock function and an action with incompatible argument lists fit together. The downside is that wrapping the action in {\f2 WithArgs<...>()}  can get tedious for people writing the tests.\par
If you are defining a function, method, or functor to be used with {\f2 Invoke*()} , and you are not interested in some of its arguments, an alternative to {\f2 WithArgs}  is to declare the uninteresting arguments as {\f2 Unused} . This makes the definition less cluttered and less fragile in case the types of the uninteresting arguments change. It could also increase the chance the action function can be reused. For example, given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD3(Foo, double(const string& label, double x, double y));\par
MOCK_METHOD3(Bar, double(int index, double x, double y));\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
\par
double DistanceToOriginWithLabel(const string& label, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
\par
double DistanceToOriginWithIndex(int index, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithLabel));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOriginWithIndex));\par
}
\par
you could write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
using ::testing::Invoke;\par
using ::testing::Unused;\par
\par
double DistanceToOrigin(Unused, double x, double y) \{\par
  return sqrt(x*x + y*y);\par
\}\par
...\par
\par
  EXEPCT_CALL(mock, Foo("abc", _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
  EXEPCT_CALL(mock, Bar(5, _, _))\par
      .WillOnce(Invoke(DistanceToOrigin));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Sharing Actions} \par}
Just like matchers, a Google {\b Mock} action object consists of a pointer to a ref-counted implementation object. Therefore copying actions is also allowed and very efficient. When the last action that references the implementation object dies, the implementation object will be deleted.\par
If you have some complex action that you want to use again and again, you may not have to build it from scratch everytime. If the action doesn't have an internal state (i.e. if it always does the same thing no matter how many times it has been called), you can assign it to an action variable and use that variable repeatedly. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<bool(int*)> set_flag = DoAll(SetArgPointee<0>(5),\par
                                    Return(true));\par
... use set_flag in .WillOnce() and .WillRepeatedly() ...\par
}
\par
However, if the action has its own state, you may be surprised if you share the action object. Suppose you have an action factory {\f2 IncrementCounter(init)}  which creates an action that increments and returns a counter whose initial value is {\f2 init} , using two actions created from the same expression and using a shared action will exihibit different behaviors. Example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(IncrementCounter(0));\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(IncrementCounter(0));\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 1 - Blah() uses a different\par
               // counter than Bar()'s.\par
}
\par
versus\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Action<int()> increment = IncrementCounter(0);\par
\par
EXPECT_CALL(foo, DoThis())\par
    .WillRepeatedly(increment);\par
EXPECT_CALL(foo, DoThat())\par
    .WillRepeatedly(increment);\par
foo.DoThis();  // Returns 1.\par
foo.DoThis();  // Returns 2.\par
foo.DoThat();  // Returns 3 - the counter is shared.\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Misc Recipes on Using Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Making the Compilation Faster} \par}
Believe it or not, the {\i vast majority}  of the time spent on compiling a mock class is in generating its constructor and destructor, as they perform non-trivial tasks (e.g. verification of the expectations). What's more, mock methods with different signatures have different types and thus their constructors/destructors need to be generated by the compiler separately. As a result, if you mock many different types of methods, compiling your mock class can get really slow.\par
If you are experiencing slow compilation, you can move the definition of your mock class' constructor and destructor out of the class body and into a {\f2 .cpp}  file. This way, even if you {\f2 #include}  your mock class in N files, the compiler only needs to generate its constructor and destructor once, resulting in a much faster compilation.\par
Let's illustrate the idea using an example. Here's the definition of a mock class before applying this recipe:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.h.\par
...\par
class MockFoo : public Foo \{\par
 public:\par
  // Since we don't declare the constructor or the destructor,\par
  // the compiler will generate them in every translation unit\par
  // where this mock class is used.\par
\par
  MOCK_METHOD0(DoThis, int());\par
  MOCK_METHOD1(DoThat, bool(const char* str));\par
  ... more mock methods ...\par
\};\par
}
\par
After the change, it would look like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.h.\par
...\par
class MockFoo : public Foo \{\par
 public:\par
  // The constructor and destructor are declared, but not defined, here.\par
  MockFoo();\par
  virtual ~MockFoo();\par
\par
  MOCK_METHOD0(DoThis, int());\par
  MOCK_METHOD1(DoThat, bool(const char* str));\par
  ... more mock methods ...\par
\};\par
}
 and {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File mock_foo.cpp.\par
#include "path/to/mock_foo.h"\par
\par
// The definitions may appear trivial, but the functions actually do a\par
// lot of things through the constructors/destructors of the member\par
// variables used to implement the mock methods.\par
MockFoo::MockFoo() \{\}\par
MockFoo::~MockFoo() \{\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Forcing a Verification} \par}
When it's being destoyed, your friendly mock object will automatically verify that all expectations on it have been satisfied, and will generate {\f2 Google Test} failures if not. This is convenient as it leaves you with one less thing to worry about. That is, unless you are not sure if your mock object will be destoyed.\par
How could it be that your mock object won't eventually be destroyed? Well, it might be created on the heap and owned by the code you are testing. Suppose there's a bug in that code and it doesn't delete the mock object properly - you could end up with a passing test when there's actually a bug.\par
Using a heap checker is a good idea and can alleviate the concern, but its implementation may not be 100% reliable. So, sometimes you do want to {\i force}  Google {\b Mock} to verify a mock object before it is (hopefully) destructed. You can do this with {\f2 Mock::VerifyAndClearExpectations(&mock_object)} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyServerTest, ProcessesRequest) \{\par
  using ::testing::Mock;\par
\par
  MockFoo* const foo = new MockFoo;\par
  EXPECT_CALL(*foo, ...)...;\par
  // ... other expectations ...\par
\par
  // server now owns foo.\par
  MyServer server(foo);\par
  server.ProcessRequest(...);\par
\par
  // In case that server's destructor will forget to delete foo,\par
  // this will verify the expectations anyway.\par
  Mock::VerifyAndClearExpectations(foo);\par
\}  // server is destroyed when it goes out of scope here.\par
}
\par
{\b Tip:}  The {\f2 Mock::VerifyAndClearExpectations()}  function returns a {\f2 bool}  to indicate whether the verification was successful ({\f2 true}  for yes), so you can wrap that function call inside a {\f2 ASSERT_TRUE()}  if there is no point going further when the verification has failed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Check Points} \par}
Sometimes you may want to "reset" a mock object at various check points in your test: at each check point, you verify that all existing expectations on the mock object have been satisfied, and then you set some new expectations on it as if it's newly created. This allows you to work with a mock object in "phases" whose sizes are each manageable.\par
One such scenario is that in your test's {\f2 SetUp()}  function, you may want to put the object you are testing into a certain state, with the help from a mock object. Once in the desired state, you want to clear all expectations on the mock, such that in the {\f2 TEST_F}  body you can set fresh expectations on it.\par
As you may have figured out, the {\f2 Mock::VerifyAndClearExpectations()}  function we saw in the previous recipe can help you here. Or, if you are using {\f2 ON_CALL()}  to set default actions on the mock object and want to clear the default actions as well, use {\f2 Mock::VerifyAndClear(&mock_object)}  instead. This function does what {\f2 Mock::VerifyAndClearExpectations(&mock_object)}  does and returns the same {\f2 bool} , {\b plus}  it clears the {\f2 ON_CALL()}  statements on {\f2 mock_object}  too.\par
Another trick you can use to achieve the same effect is to put the expectations in sequences and insert calls to a dummy "check-point" function at specific places. Then you can verify that the mock function calls do happen at the right time. For example, if you are exercising code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Foo(1);\par
Foo(2);\par
Foo(3);\par
}
\par
and want to verify that {\f2 Foo(1)}  and {\f2 Foo(3)}  both invoke {\f2 mock.Bar("a")} , but {\f2 Foo(2)}  doesn't invoke anything. You can write:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MockFunction;\par
\par
TEST(FooTest, InvokesBarCorrectly) \{\par
  MyMock mock;\par
  // Class MockFunction<F> has exactly one mock method.  It is named\par
  // Call() and has type F.\par
  MockFunction<void(string check_point_name)> check;\par
  \{\par
    InSequence s;\par
\par
    EXPECT_CALL(mock, Bar("a"));\par
    EXPECT_CALL(check, Call("1"));\par
    EXPECT_CALL(check, Call("2"));\par
    EXPECT_CALL(mock, Bar("a"));\par
  \}\par
  Foo(1);\par
  check.Call("1");\par
  Foo(2);\par
  check.Call("2");\par
  Foo(3);\par
\}\par
}
\par
The expectation spec says that the first {\f2 Bar("a")}  must happen before check point "1", the second {\f2 Bar("a")}  must happen after check point "2", and nothing should happen between the two check points. The explicit check points make it easy to tell which {\f2 Bar("a")}  is called by which call to {\f2 Foo()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mocking Destructors} \par}
Sometimes you want to make sure a mock object is destructed at the right time, e.g. after {\f2 bar->A()}  is called but before {\f2 bar->B()}  is called. We already know that you can specify constraints on the order of mock function calls, so all we need to do is to mock the destructor of the mock function.\par
This sounds simple, except for one problem: a destructor is a special function with special syntax and special semantics, and the {\f2 MOCK_METHOD0}  macro doesn't work for it:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD0(~MockFoo, void());  // Won't compile!\par
}
\par
The good news is that you can use a simple pattern to achieve the same effect. First, add a mock function {\f2 Die()}  to your mock class and call it in the destructor, like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MockFoo : public Foo \{\par
  ...\par
  // Add the following two lines to the mock class.\par
  MOCK_METHOD0(Die, void());\par
  virtual ~MockFoo() \{ Die(); \}\par
\};\par
}
\par
(If the name {\f2 Die()}  clashes with an existing symbol, choose another name.) Now, we have translated the problem of testing when a {\f2 {\b MockFoo}}  object dies to testing when its {\f2 Die()}  method is called:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MockFoo* foo = new MockFoo;\par
MockBar* bar = new MockBar;\par
...\par
\{\par
  InSequence s;\par
\par
  // Expects *foo to die after bar->A() and before bar->B().\par
  EXPECT_CALL(*bar, A());\par
  EXPECT_CALL(*foo, Die());\par
  EXPECT_CALL(*bar, B());\par
\}\par
}
\par
And that's that.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} and Threads} \par}
{\b IMPORTANT NOTE:}  What we describe in this recipe is {\b ONLY}  true on platforms where Google {\b Mock} is thread-safe. Currently these are only platforms that support the pthreads library (this includes Linux and Mac). To make it thread-safe on other platforms we only need to implement some synchronization operations in {\f2 "gtest/internal/gtest-port.h"} .\par
In a {\b unit}  test, it's best if you could isolate and test a piece of code in a single-threaded context. That avoids race conditions and dead locks, and makes debugging your test much easier.\par
Yet many programs are multi-threaded, and sometimes to test something we need to pound on it from more than one thread. Google {\b Mock} works for this purpose too.\par
Remember the steps for using a mock:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a mock object {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Set its default actions and expectations using {\f2 ON_CALL()}  and {\f2 EXPECT_CALL()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The code under test calls methods of {\f2 foo} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Optionally, verify and reset the mock.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Destroy the mock yourself, or let the code under test destroy it. The destructor will automatically verify it.\par}
If you follow the following simple rules, your mocks and threads can live happily togeter:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Execute your {\i test code}  (as opposed to the code being tested) in {\i one}  thread. This makes your test easy to follow.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Obviously, you can do step #1 without locking.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
When doing step #2 and #5, make sure no other thread is accessing {\f2 foo} . Obvious too, huh?\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#3 and #4 can be done either in one thread or in multiple threads - anyway you want. Google {\b Mock} takes care of the locking, so you don't have to do any - unless required by your test logic.\par}
If you violate the rules (for example, if you set expectations on a mock while another thread is calling its methods), you get undefined behavior. That's not fun, so don't do it.\par
Google {\b Mock} guarantees that the action for a mock function is done in the same thread that called the mock function. For example, in\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock, Foo(1))\par
    .WillOnce(action1);\par
EXPECT_CALL(mock, Foo(2))\par
    .WillOnce(action2);\par
}
\par
if {\f2 Foo(1)}  is called in thread 1 and {\f2 Foo(2)}  is called in thread 2, Google {\b Mock} will execute {\f2 action1}  in thread 1 and {\f2 action2}  in thread 2.\par
Google {\b Mock} does {\i not}  impose a sequence on actions performed in different threads (doing so may create deadlocks as the actions may need to cooperate). This means that the execution of {\f2 action1}  and {\f2 action2}  in the above example {\i may}  interleave. If this is a problem, you should add proper synchronization logic to {\f2 action1}  and {\f2 action2}  to make the test thread-safe.\par
Also, remember that {\f2 DefaultValue<T>}  is a global resource that potentially affects {\i all}  living mock objects in your program. Naturally, you won't want to mess with it from multiple threads or when there still are mocks in action.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Much Information Google {\b Mock} Prints} \par}
When Google {\b Mock} sees something that has the potential of being an error (e.g. a mock function with no expectation is called, a.k.a. an uninteresting call, which is allowed but perhaps you forgot to explicitly ban the call), it prints some warning messages, including the arguments of the function and the return value. Hopefully this will remind you to take a look and see if there is indeed a problem.\par
Sometimes you are confident that your tests are correct and may not appreciate such friendly messages. Some other times, you are debugging your tests or learning about the behavior of the code you are testing, and wish you could observe every mock call that happens (including argument values and the return value). Clearly, one size doesn't fit all.\par
You can control how much Google {\b Mock} tells you using the {\f2 --gmock_verbose=LEVEL}  command-line flag, where {\f2 LEVEL}  is a string with three possible values:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 info} : Google {\b Mock} will print all informational messages, warnings, and errors (most verbose). At this setting, Google {\b Mock} will also log any calls to the {\f2 ON_CALL/EXPECT_CALL}  macros.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 warning} : Google {\b Mock} will print both warnings and errors (less verbose). This is the default.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 error} : Google {\b Mock} will print errors only (least verbose).\par}
Alternatively, you can adjust the value of that flag from within your tests like so:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gmock_verbose = "error";\par
}
\par
Now, judiciously use the right flag to enable Google {\b Mock} serve you better!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Gaining Super Vision into {\b Mock} Calls} \par}
You have a test using Google {\b Mock}. It fails: Google {\b Mock} tells you that some expectations aren't satisfied. However, you aren't sure why: Is there a typo somewhere in the matchers? Did you mess up the order of the {\f2 EXPECT_CALL} s? Or is the code under test doing something wrong? How can you find out the cause?\par
Won't it be nice if you have X-ray vision and can actually see the trace of all {\f2 EXPECT_CALL} s and mock method calls as they are made? For each call, would you like to see its actual argument values and which {\f2 EXPECT_CALL}  Google {\b Mock} thinks it matches?\par
You can unlock this power by running your test with the {\f2 --gmock_verbose=info}  flag. For example, given the test program:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using testing::_;\par
using testing::HasSubstr;\par
using testing::Return;\par
\par
class MockFoo \{\par
 public:\par
  MOCK_METHOD2(F, void(const string& x, const string& y));\par
\};\par
\par
TEST(Foo, Bar) \{\par
  MockFoo mock;\par
  EXPECT_CALL(mock, F(_, _)).WillRepeatedly(Return());\par
  EXPECT_CALL(mock, F("a", "b"));\par
  EXPECT_CALL(mock, F("c", HasSubstr("d")));\par
\par
  mock.F("a", "good");\par
  mock.F("a", "b");\par
\}\par
}
\par
if you run it with {\f2 --gmock_verbose=info} , you will see this output:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [ RUN      ] Foo.Bar\par
\par
foo_test.cc:14: EXPECT_CALL(mock, F(_, _)) invoked\par
foo_test.cc:15: EXPECT_CALL(mock, F("a", "b")) invoked\par
foo_test.cc:16: EXPECT_CALL(mock, F("c", HasSubstr("d"))) invoked\par
foo_test.cc:14: Mock function call matches EXPECT_CALL(mock, F(_, _))...\par
    Function call: F(@0x7fff7c8dad40"a", @0x7fff7c8dad10"good")\par
foo_test.cc:15: Mock function call matches EXPECT_CALL(mock, F("a", "b"))...\par
    Function call: F(@0x7fff7c8dada0"a", @0x7fff7c8dad70"b")\par
foo_test.cc:16: Failure\par
Actual function call count doesn't match EXPECT_CALL(mock, F("c", HasSubstr("d")))...\par
         Expected: to be called once\par
           Actual: never called - unsatisfied and active\par
[  FAILED  ] Foo.Bar\par
}
\par
Suppose the bug is that the {\f2 "c"}  in the third {\f2 EXPECT_CALL}  is a typo and should actually be {\f2 "a"} . With the above message, you should see that the actual {\f2 F("a", "good")}  call is matched by the first {\f2 EXPECT_CALL} , not the third as you thought. From that it should be obvious that the third {\f2 EXPECT_CALL}  is written wrong. Case solved.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running Tests in Emacs} \par}
If you build and run your tests in Emacs, the source file locations of Google {\b Mock} and {\f2 Google Test} errors will be highlighted. Just press {\f2 <Enter>}  on one of them and you'll be taken to the offending line. Or, you can just type {\f2 C-x} ` to jump to the next error.\par
To make it even easier, you can add the following lines to your {\f2 ~/.emacs}  file:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid (global-set-key "\\M-m"   'compile)  ; m is for make\par
(global-set-key [M-down] 'next-error)\par
(global-set-key [M-up]   '(lambda () (interactive) (next-error -1)))\par
}
\par
Then you can type {\f2 M-m}  to start a build, or {\f2 M-up} /{\f2 M-down}  to move back and forth between errors.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Fusing Google {\b Mock} Source Files} \par}
Google {\b Mock}'s implementation consists of dozens of files (excluding its own tests). Sometimes you may want them to be packaged up in fewer files instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gmock_files.py}  in the {\f2 scripts/}  directory (starting with release 1.2.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gmock_files.py OUTPUT_DIR\par
}
\par
and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}} , {\f2 {\b gmock/gmock.h}} , and {\f2 gmock-gtest-all.cc}  in it. These three files contain everything you need to use Google {\b Mock} (and Google Test). Just copy them to anywhere you want and you are ready to write tests and use mocks. You can use the {\f2 scrpts/test/Makefile} file as an example on how to compile your tests against them.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Matchers Quickly} \par}
The {\f2 MATCHER*}  family of macros can be used to define custom matchers easily. The syntax:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(name, description_string_expression) \{ statements; \}\par
}
\par
will define a matcher with the given name that executes the statements, which must return a {\f2 bool}  to indicate if the match succeeds. Inside the statements, you can refer to the value being matched by {\f2 arg} , and refer to its type by {\f2 arg_type} .\par
The description string is a {\f2 string} -typed expression that documents what the matcher does, and is used to generate the failure message when the match fails. It can (and should) reference the special {\f2 bool}  variable {\f2 negation} , and should evaluate to the description of the matcher when {\f2 negation}  is {\f2 false} , or that of the matcher's negation when {\f2 negation}  is {\f2 true} .\par
For convenience, we allow the description string to be empty ({\f2 ""} ), in which case Google {\b Mock} will use the sequence of words in the matcher name as the description.\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{ return (arg % 7) == 0; \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects mock_foo.Bar(n) to be called where n is divisible by 7.\par
EXPECT_CALL(mock_foo, Bar(IsDivisibleBy7()));\par
}
 or, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Not;\par
...\par
  EXPECT_THAT(some_expression, IsDivisibleBy7());\par
  EXPECT_THAT(some_other_expression, Not(IsDivisibleBy7()));\par
}
 If the above assertions fail, they will print something like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid   Value of: some_expression\par
  Expected: is divisible by 7\par
    Actual: 27\par
...\par
  Value of: some_other_expression\par
  Expected: not (is divisible by 7)\par
    Actual: 21\par
}
 where the descriptions {\f2 "is divisible by 7"}  and {\f2 "not (is divisible
by 7)"}  are automatically calculated from the matcher name {\f2 IsDivisibleBy7} .\par
As you may have noticed, the auto-generated descriptions (especially those for the negation) may not be so great. You can always override them with a string expression of your own: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, std::string(negation ? "isn't" : "is") +\par
                        " divisible by 7") \{\par
  return (arg % 7) == 0;\par
\}\par
}
\par
Optionally, you can stream additional information to a hidden argument named {\f2 result_listener}  to explain the match result. For example, a better definition of {\f2 IsDivisibleBy7}  is: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER(IsDivisibleBy7, "") \{\par
  if ((arg % 7) == 0)\par
    return true;\par
\par
  *result_listener << "the remainder is " << (arg % 7);\par
  return false;\par
\}\par
}
\par
With this definition, the above assertion will give a better message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: some_expression\par
Expected: is divisible by 7\par
  Actual: 27 (the remainder is 6)\par
}
\par
You should let {\f2 MatchAndExplain()}  print {\i any additional information}  that can help a user understand the match result. Note that it should explain why the match succeeds in case of a success (unless it's obvious) - this is useful when the matcher is used inside {\f2 Not()} . There is no need to print the argument value itself, as Google {\b Mock} already prints it for you.\par
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The type of the value being matched ({\f2 arg_type} ) is determined by the context in which you use the matcher and is supplied to you by the compiler, so you don't need to worry about declaring it (nor can you). This allows the matcher to be polymorphic. For example, {\f2 IsDivisibleBy7()}  can be used to match any type where the value of {\f2 (arg % 7) == 0}  can be implicitly converted to a {\f2 bool} . In the {\f2 Bar(IsDivisibleBy7())}  example above, if method {\f2 Bar()}  takes an {\f2 int} , {\f2 arg_type}  will be {\f2 int} ; if it takes an {\f2 unsigned long} , {\f2 arg_type}  will be {\f2 unsigned long} ; and so on.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google {\b Mock} doesn't guarantee when or how many times a matcher will be invoked. Therefore the matcher logic must be {\i purely functional}  (i.e. it cannot have any side effect, and the result must not depend on anything other than the value being matched and the matcher parameters). This requirement must be satisfied no matter how you define the matcher (e.g. using one of the methods described in the following recipes). In particular, a matcher can never call a mock function, as that will affect the state of the mock object and Google {\b Mock}.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Matchers Quickly} \par}
Sometimes you'll want to define a matcher that has parameters. For that you can use the macro: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(name, param_name, description_string) \{ statements; \}\par
}
 where the description string can be either {\f2 ""}  or a string expression that references {\f2 negation}  and {\f2 param_name} .\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(HasAbsoluteValue, value, "") \{ return abs(arg) == value; \}\par
}
 will allow you to write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_THAT(Blah("a"), HasAbsoluteValue(n));\par
}
 which may lead to this message (assuming {\f2 n}  is 10): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: Blah("a")\par
Expected: has absolute value 10\par
  Actual: -9\par
}
\par
Note that both the matcher description and its parameter are printed, making the message human-friendly.\par
In the matcher definition body, you can write {\f2 foo_type}  to reference the type of a parameter named {\f2 foo} . For example, in the body of {\f2 MATCHER_P(HasAbsoluteValue, value)}  above, you can write {\f2 value_type}  to refer to the type of {\f2 value} .\par
Google {\b Mock} also provides {\f2 MATCHER_P2} , {\f2 MATCHER_P3} , ..., up to {\f2 MATCHER_P10}  to support multi-parameter matchers: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(name, param_1, ..., param_k, description_string) \{ statements; \}\par
}
\par
Please note that the custom description string is for a particular {\b instance}  of the matcher, where the parameters have been bound to actual values. Therefore usually you'll want the parameter values to be part of the description. Google {\b Mock} lets you do that by referencing the matcher parameters in the description string expression.\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::PrintToString;\par
MATCHER_P2(InClosedRange, low, hi,\par
           std::string(negation ? "isn't" : "is") + " in range [" +\par
           PrintToString(low) + ", " + PrintToString(hi) + "]") \{\par
  return low <= arg && arg <= hi;\par
\}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: is in range [4, 6]\par
}
\par
If you specify {\f2 ""}  as the description, the failure message will contain the sequence of words in the matcher name followed by the parameter values printed as a tuple. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P2(InClosedRange, low, hi, "") \{ ... \}\par
...\par
EXPECT_THAT(3, InClosedRange(4, 6));\par
}
 would generate a failure that contains the text: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Expected: in closed range (4, 6)\par
}
\par
For the purpose of typing, you can view {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_Pk(Foo, p1, ..., pk, description_string) \{ ... \}\par
}
 as shorthand for {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename p1_type, ..., typename pk_type>\par
FooMatcherPk<p1_type, ..., pk_type>\par
Foo(p1_type p1, ..., pk_type pk) \{ ... \}\par
}
\par
When you write {\f2 Foo(v1, ..., vk)} , the compiler infers the types of the parameters {\f2 v1} , ..., and {\f2 vk}  for you. If you are not happy with the result of the type inference, you can specify the types by explicitly instantiating the template, as in {\f2 Foo<long, bool>(5, false)} . As said earlier, you don't get to (or need to) specify {\f2 arg_type}  as that's determined by the context in which the matcher is used.\par
You can assign the result of expression {\f2 Foo(p1, ..., pk)}  to a variable of type {\f2 FooMatcherPk<p1_type, ..., pk_type>} . This can be useful when composing matchers. Matchers that don't have a parameter or have only one parameter have special types: you can assign {\f2 Foo()}  to a {\f2 FooMatcher} -typed variable, and assign {\f2 Foo(p)}  to a {\f2 FooMatcherP<p_type>} -typed variable.\par
While you can instantiate a matcher template with reference types, passing the parameters by pointer usually makes your code more readable. If, however, you still want to pass a parameter by reference, be aware that in the failure message generated by the matcher you will see the value of the referenced object but not its address.\par
You can overload matchers with different numbers of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MATCHER_P(Blah, a, description_string_1) \{ ... \}\par
MATCHER_P2(Blah, a, b, description_string_2) \{ ... \}\par
}
\par
While it's tempting to always use the {\f2 MATCHER*}  macros when defining a new matcher, you should also consider implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()}  instead (see the recipes that follow), especially if you need to use the matcher a lot. While these approaches require more work, they give you more control on the types of the value being matched and the matcher parameters, which in general leads to better compiler error messages that pay off in the long run. They also allow overloading matchers based on parameter types (as opposed to just based on the number of parameters).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Matchers} \par}
A matcher of argument type {\f2 T}  implements {\f2 {\b testing::MatcherInterface}<T>}  and does two things: it tests whether a value of type {\f2 T}  matches the matcher, and can describe what kind of values it matches. The latter ability is used for generating readable error messages when expectations are violated.\par
The interface looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MatchResultListener \{\par
 public:\par
  ...\par
  // Streams x to the underlying ostream; does nothing if the ostream\par
  // is NULL.\par
  template <typename T>\par
  MatchResultListener& operator<<(const T& x);\par
\par
  // Returns the underlying ostream.\par
  ::std::ostream* stream();\par
\};\par
\par
template <typename T>\par
class MatcherInterface \{\par
 public:\par
  virtual ~MatcherInterface();\par
\par
  // Returns true iff the matcher matches x; also explains the match\par
  // result to 'listener'.\par
  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;\par
\par
  // Describes this matcher to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\par
  // Describes the negation of this matcher to an ostream.\par
  virtual void DescribeNegationTo(::std::ostream* os) const;\par
\};\par
}
\par
If you need a custom matcher but {\f2 Truly()}  is not a good option (for example, you may not be happy with the way {\f2 Truly(predicate)}  describes itself, or you may want your matcher to be polymorphic as {\f2 Eq(value)}  is), you can define a matcher to do whatever you want in two steps: first implement the matcher interface, and then define a factory function to create a matcher instance. The second step is not strictly needed but it makes the syntax of using the matcher nicer.\par
For example, you can define a matcher to test whether an {\f2 int}  is divisible by 7 and then use it like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakeMatcher;\par
using ::testing::Matcher;\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
\par
class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n, MatchResultListener* listener) const \{\par
    return (n % 7) == 0;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "is divisible by 7";\par
  \}\par
\par
  virtual void DescribeNegationTo(::std::ostream* os) const \{\par
    *os << "is not divisible by 7";\par
  \}\par
\};\par
\par
inline Matcher<int> DivisibleBy7() \{\par
  return MakeMatcher(new DivisibleBy7Matcher);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(DivisibleBy7()));\par
}
\par
You may improve the matcher message by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class DivisibleBy7Matcher : public MatcherInterface<int> \{\par
 public:\par
  virtual bool MatchAndExplain(int n,\par
                               MatchResultListener* listener) const \{\par
    const int remainder = n % 7;\par
    if (remainder != 0) \{\par
      *listener << "the remainder is " << remainder;\par
    \}\par
    return remainder == 0;\par
  \}\par
  ...\par
\};\par
}
\par
Then, {\f2 EXPECT_THAT(x, DivisibleBy7());}  may general a message like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Value of: x\par
Expected: is divisible by 7\par
  Actual: 23 (the remainder is 2)\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Matchers} \par}
You've learned how to write your own matchers in the previous recipe. Just one problem: a matcher created using {\f2 MakeMatcher()}  only works for one particular type of arguments. If you want a {\i polymorphic}  matcher that works with arguments of several types (for instance, {\f2 Eq(x)}  can be used to match a {\f2 value}  as long as {\f2 value}  == {\f2 x}  compiles \'96 {\f2 value}  and {\f2 x}  don't have to share the same type), you can learn the trick from {\f2 "gmock/gmock-matchers.h"}  but it's a bit involved.\par
Fortunately, most of the time you can define a polymorphic matcher easily with the help of {\f2 MakePolymorphicMatcher()} . Here's how you can define {\f2 NotNull()}  as an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
using ::testing::NotNull;\par
using ::testing::PolymorphicMatcher;\par
\par
class NotNullMatcher \{\par
 public:\par
  // To implement a polymorphic matcher, first define a COPYABLE class\par
  // that has three members MatchAndExplain(), DescribeTo(), and\par
  // DescribeNegationTo(), like the following.\par
\par
  // In this example, we want to use NotNull() with any pointer, so\par
  // MatchAndExplain() accepts a pointer of any type as its first argument.\par
  // In general, you can define MatchAndExplain() as an ordinary method or\par
  // a method template, or even overload it.\par
  template <typename T>\par
  bool MatchAndExplain(T* p,\par
                       MatchResultListener* /* listener */) const \{\par
    return p != NULL;\par
  \}\par
\par
  // Describes the property of a value matching this matcher.\par
  void DescribeTo(::std::ostream* os) const \{ *os << "is not NULL"; \}\par
\par
  // Describes the property of a value NOT matching this matcher.\par
  void DescribeNegationTo(::std::ostream* os) const \{ *os << "is NULL"; \}\par
\};\par
\par
// To construct a polymorphic matcher, pass an instance of the class\par
// to MakePolymorphicMatcher().  Note the return type.\par
inline PolymorphicMatcher<NotNullMatcher> NotNull() \{\par
  return MakePolymorphicMatcher(NotNullMatcher());\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(NotNull()));  // The argument must be a non-NULL pointer.\par
}
\par
{\b Note:}  Your polymorphic matcher class does {\b not}  need to inherit from {\f2 MatcherInterface}  or any other class, and its methods do {\b not}  need to be virtual.\par
Like in a monomorphic matcher, you may explain the match result by streaming additional information to the {\f2 listener}  argument in {\f2 MatchAndExplain()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Cardinalities} \par}
A cardinality is used in {\f2 Times()}  to tell Google {\b Mock} how many times you expect a call to occur. It doesn't have to be exact. For example, you can say {\f2 AtLeast(5)}  or {\f2 Between(2, 4)} .\par
If the built-in set of cardinalities doesn't suit you, you are free to define your own by implementing the following interface (in namespace {\f2 testing} ):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class CardinalityInterface \{\par
 public:\par
  virtual ~CardinalityInterface();\par
\par
  // Returns true iff call_count calls will satisfy this cardinality.\par
  virtual bool IsSatisfiedByCallCount(int call_count) const = 0;\par
\par
  // Returns true iff call_count calls will saturate this cardinality.\par
  virtual bool IsSaturatedByCallCount(int call_count) const = 0;\par
\par
  // Describes self to an ostream.\par
  virtual void DescribeTo(::std::ostream* os) const = 0;\par
\};\par
}
\par
For example, to specify that a call must occur even number of times, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Cardinality;\par
using ::testing::CardinalityInterface;\par
using ::testing::MakeCardinality;\par
\par
class EvenNumberCardinality : public CardinalityInterface \{\par
 public:\par
  virtual bool IsSatisfiedByCallCount(int call_count) const \{\par
    return (call_count % 2) == 0;\par
  \}\par
\par
  virtual bool IsSaturatedByCallCount(int call_count) const \{\par
    return false;\par
  \}\par
\par
  virtual void DescribeTo(::std::ostream* os) const \{\par
    *os << "called even number of times";\par
  \}\par
\};\par
\par
Cardinality EvenNumber() \{\par
  return MakeCardinality(new EvenNumberCardinality);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Bar(3))\par
      .Times(EvenNumber());\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Actions Quickly} \par}
If the built-in actions don't work for you, and you find it inconvenient to use {\f2 Invoke()} , you can use a macro from the {\f2 ACTION*}  family to quickly define a new action that can be used in your code as if it's a built-in action.\par
By writing {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(name) \{ statements; \}\par
}
 in a namespace scope (i.e. not inside a class or function), you will define an action with the given name that executes the statements. The value returned by {\f2 statements}  will be used as the return value of the action. Inside the statements, you can refer to the K-th (0-based) argument of the mock function as {\f2 argK} . For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(IncrementArg1) \{ return ++(*arg1); \}\par
}
 allows you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(IncrementArg1());\par
}
\par
Note that you don't need to specify the types of the mock function arguments. Rest assured that your code is type-safe though: you'll get a compiler error if {\f2 *arg1}  doesn't support the {\f2 ++}  operator, or if the type of {\f2 ++(*arg1)}  isn't compatible with the mock function's return type.\par
Another example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  (*arg2)(5);\par
  Blah();\par
  *arg1 = 0;\par
  return arg0;\par
\}\par
}
 defines an action {\f2 Foo()}  that invokes argument #2 (a function pointer) with 5, calls function {\f2 Blah()} , sets the value pointed to by argument #1 to 0, and returns argument #0.\par
For more convenience and flexibility, you can also use the following pre-defined symbols in the body of {\f2 ACTION} :\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 argK_type}  \cell }{The type of the K-th (0-based) argument of the mock function  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{All arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{The type of all arguments of the mock function as a tuple \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{The return type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{The type of the mock function \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For example, when using an {\f2 ACTION}  as a stub action for mock function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int DoSomething(bool flag, int* ptr);\par
}
 we have: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Pre-defined Symbol}  \cell }{{\b Is Bound To}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0}  \cell }{the value of {\f2 flag}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg0_type}  \cell }{the type {\f2 bool}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1}  \cell }{the value of {\f2 ptr}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 arg1_type}  \cell }{the type {\f2 int*}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args}  \cell }{the tuple {\f2 (flag, ptr)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 args_type}  \cell }{the type {\f2 {\b std::tr1::tuple}<bool, int*>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 return_type}  \cell }{the type {\f2 int}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 function_type}  \cell }{the type {\f2 int(bool, int*)}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Parameterized Actions Quickly} \par}
Sometimes you'll want to parameterize an action you define. For that we have another macro {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(name, param) \{ statements; \}\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Add, n) \{ return arg0 + n; \}\par
}
 will allow you to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns argument #0 + 5.\par
... WillOnce(Add(5));\par
}
\par
For convenience, we use the term {\i arguments}  for the values used to invoke the mock function, and the term {\i parameters}  for the values used to instantiate an action.\par
Note that you don't need to provide the type of the parameter either. Suppose the parameter is named {\f2 param} , you can also use the Google-Mock-defined symbol {\f2 param_type}  to refer to the type of the parameter as inferred by the compiler. For example, in the body of {\f2 ACTION_P(Add, n)}  above, you can write {\f2 n_type}  for the type of {\f2 n} .\par
Google {\b Mock} also provides {\f2 ACTION_P2} , {\f2 ACTION_P3} , and etc to support multi-parameter actions. For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P2(ReturnDistanceTo, x, y) \{\par
  double dx = arg0 - x;\par
  double dy = arg1 - y;\par
  return sqrt(dx*dx + dy*dy);\par
\}\par
}
 lets you write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ... WillOnce(ReturnDistanceTo(5.0, 26.5));\par
}
\par
You can view {\f2 ACTION}  as a degenerated parameterized action where the number of parameters is 0.\par
You can also easily define actions overloaded on the number of parameters: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_P(Plus, a) \{ ... \}\par
ACTION_P2(Plus, a, b) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Restricting the Type of an Argument or Parameter in an ACTION} \par}
For maximum brevity and reusability, the {\f2 ACTION*}  macros don't ask you to provide the types of the mock function arguments and the action parameters. Instead, we let the compiler infer the types for us.\par
Sometimes, however, we may want to be more explicit about the types. There are several tricks to do that. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION(Foo) \{\par
  // Makes sure arg0 can be converted to int.\par
  int n = arg0;\par
  ... use n instead of arg0 here ...\par
\}\par
\par
ACTION_P(Bar, param) \{\par
  // Makes sure the type of arg1 is const char*.\par
  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\par
\par
  // Makes sure param can be converted to bool.\par
  bool flag = param;\par
\}\par
}
 where {\f2 StaticAssertTypeEq}  is a compile-time assertion in Google Test that verifies two types are the same.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Action Templates Quickly} \par}
Sometimes you want to give an action explicit template parameters that cannot be inferred from its value parameters. {\f2 ACTION_TEMPLATE()}  supports that and can be viewed as an extension to {\f2 ACTION()}  and {\f2 ACTION_P*()} .\par
The syntax: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ACTION_TEMPLATE(ActionName,\par
                HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),\par
                AND_n_VALUE_PARAMS(p1, ..., p_n)) \{ statements; \}\par
}
\par
defines an action template that takes {\i m}  explicit template parameters and {\i n}  value parameters, where {\i m}  is between 1 and 10, and {\i n}  is between 0 and 10. {\f2 name_i}  is the name of the i-th template parameter, and {\f2 kind_i}  specifies whether it's a {\f2 typename} , an integral constant, or a template. {\f2 p_i}  is the name of the i-th value parameter.\par
Example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // DuplicateArg<k, T>(output) converts the k-th argument of the mock\par
// function to type T and copies it to *output.\par
ACTION_TEMPLATE(DuplicateArg,\par
                // Note the comma between int and k:\par
                HAS_2_TEMPLATE_PARAMS(int, k, typename, T),\par
                AND_1_VALUE_PARAMS(output)) \{\par
  *output = T(std::tr1::get<k>(args));\par
\}\par
}
\par
To create an instance of an action template, write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m>(v1, ..., v_n)\par
}
 where the {\f2 t} s are the template arguments and the {\f2 v} s are the value arguments. The value argument types are inferred by the compiler. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
  int n;\par
  EXPECT_CALL(mock, Foo(_, _))\par
      .WillOnce(DuplicateArg<1, unsigned char>(&n));\par
}
\par
If you want to explicitly specify the value argument types, you can provide additional template arguments: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ActionName<t1, ..., t_m, u1, ..., u_k>(v1, ..., v_n)\par
}
 where {\f2 u_i}  is the desired type of {\f2 v_i} .\par
{\f2 ACTION_TEMPLATE}  and {\f2 ACTION} /{\f2 ACTION_P*}  can be overloaded on the number of value parameters, but not on the number of template parameters. Without the restriction, the meaning of the following is unclear:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid OverloadedAction<int, bool>(x);\par
}
\par
Are we using a single-template-parameter action where {\f2 bool}  refers to the type of {\f2 x} , or a two-template-parameter action where the compiler is asked to infer the type of {\f2 x} ?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using the ACTION Object's Type} \par}
If you are writing a function that returns an {\f2 ACTION}  object, you'll need to know its type. The type depends on the macro used to define the action and the parameter types. The rule is relatively simple: \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Given Definition}  \cell }{{\b Expression}  \cell }{{\b Has Type}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION(Foo)}  \cell }{{\f2 Foo()}  \cell }{{\f2 FooAction}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Foo, HAS_m_TEMPLATE_PARAMS(...), AND_0_VALUE_PARAMS())}  \cell }{{\f2 Foo<t1, ..., t_m>()}  \cell }{{\f2 FooAction<t1, ..., t_m>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P(Bar, param)}  \cell }{{\f2 Bar(int_value)}  \cell }{{\f2 BarActionP<int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Bar, HAS_m_TEMPLATE_PARAMS(...), AND_1_VALUE_PARAMS(p1))}  \cell }{{\f2 Bar<t1, ..., t_m>(int_value)}  \cell }{{\f2 FooActionP<t1, ..., t_m, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_P2(Baz, p1, p2)}  \cell }{{\f2 Baz(bool_value, int_value)}  \cell }{{\f2 BazActionP2<bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ACTION_TEMPLATE(Baz, HAS_m_TEMPLATE_PARAMS(...), AND_2_VALUE_PARAMS(p1, p2))}  \cell }{{\f2 Baz<t1, ..., t_m>(bool_value, int_value)}  \cell }{{\f2 FooActionP2<t1, ..., t_m, bool, int>}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that we have to pick different suffixes ({\f2 Action} , {\f2 ActionP} , {\f2 ActionP2} , and etc) for actions with different numbers of value parameters, or the action definitions cannot be overloaded on the number of them.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Monomorphic Actions} \par}
While the {\f2 ACTION*}  macros are very convenient, sometimes they are inappropriate. For example, despite the tricks shown in the previous recipes, they don't let you directly specify the types of the mock function arguments and the action parameters, which in general leads to unoptimized compiler error messages that can baffle unfamiliar users. They also don't allow overloading actions based on parameter types without jumping through some hoops.\par
An alternative to the {\f2 ACTION*}  macros is to implement {\f2 {\b testing::ActionInterface}<F>} , where {\f2 F}  is the type of the mock function in which the action will be used. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename F>class ActionInterface \{\par
 public:\par
  virtual ~ActionInterface();\par
\par
  // Performs the action.  Result is the return type of function type\par
  // F, and ArgumentTuple is the tuple of arguments of F.\par
  //\par
  // For example, if F is int(bool, const string&), then Result would\par
  // be int, and ArgumentTuple would be tr1::tuple<bool, const string&>.\par
  virtual Result Perform(const ArgumentTuple& args) = 0;\par
\};\par
\par
using ::testing::_;\par
using ::testing::Action;\par
using ::testing::ActionInterface;\par
using ::testing::MakeAction;\par
\par
typedef int IncrementMethod(int*);\par
\par
class IncrementArgumentAction : public ActionInterface<IncrementMethod> \{\par
 public:\par
  virtual int Perform(const tr1::tuple<int*>& args) \{\par
    int* p = tr1::get<0>(args);  // Grabs the first argument.\par
    return *p++;\par
  \}\par
\};\par
\par
Action<IncrementMethod> IncrementArgument() \{\par
  return MakeAction(new IncrementArgumentAction);\par
\}\par
...\par
\par
  EXPECT_CALL(foo, Baz(_))\par
      .WillOnce(IncrementArgument());\par
\par
  int n = 5;\par
  foo.Baz(&n);  // Should return 5 and change n to 6.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Writing New Polymorphic Actions} \par}
The previous recipe showed you how to define your own action. This is all good, except that you need to know the type of the function in which the action will be used. Sometimes that can be a problem. For example, if you want to use the action in functions with {\i different}  types (e.g. like {\f2 Return()}  and {\f2 SetArgPointee()} ).\par
If an action can be used in several types of mock functions, we say it's {\i polymorphic} . The {\f2 MakePolymorphicAction()}  function template makes it easy to define such an action:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
template <typename Impl>\par
PolymorphicAction<Impl> MakePolymorphicAction(const Impl& impl);\par
\par
\}  // namespace testing\par
}
\par
As an example, let's define an action that returns the second argument in the mock function's argument list. The first step is to define an implementation class:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class ReturnSecondArgumentAction \{\par
 public:\par
  template <typename Result, typename ArgumentTuple>\par
  Result Perform(const ArgumentTuple& args) const \{\par
    // To get the i-th (0-based) argument, use tr1::get<i>(args).\par
    return tr1::get<1>(args);\par
  \}\par
\};\par
}
\par
This implementation class does {\i not}  need to inherit from any particular class. What matters is that it must have a {\f2 Perform()}  method template. This method template takes the mock function's arguments as a tuple in a {\b single}  argument, and returns the result of the action. It can be either {\f2 const}  or not, but must be invokable with exactly one template argument, which is the result type. In other words, you must be able to call {\f2 Perform<R>(args)}  where {\f2 R}  is the mock function's return type and {\f2 args}  is its arguments in a tuple.\par
Next, we use {\f2 MakePolymorphicAction()}  to turn an instance of the implementation class into the polymorphic action we need. It will be convenient to have a wrapper for this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::MakePolymorphicAction;\par
using ::testing::PolymorphicAction;\par
\par
PolymorphicAction<ReturnSecondArgumentAction> ReturnSecondArgument() \{\par
  return MakePolymorphicAction(ReturnSecondArgumentAction());\par
\}\par
}
\par
Now, you can use this polymorphic action the same way you use the built-in ones:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
\par
class MockFoo : public Foo \{\par
 public:\par
  MOCK_METHOD2(DoThis, int(bool flag, int n));\par
  MOCK_METHOD3(DoThat, string(int x, const char* str1, const char* str2));\par
\};\par
...\par
\par
  MockFoo foo;\par
  EXPECT_CALL(foo, DoThis(_, _))\par
      .WillOnce(ReturnSecondArgument());\par
  EXPECT_CALL(foo, DoThat(_, _, _))\par
      .WillOnce(ReturnSecondArgument());\par
  ...\par
  foo.DoThis(true, 5);         // Will return 5.\par
  foo.DoThat(1, "Hi", "Bye");  // Will return "Hi".\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Teaching Google {\b Mock} How to Print Your Values} \par}
When an uninteresting or unexpected call occurs, Google {\b Mock} prints the argument values and the stack trace to help you debug. Assertion macros like {\f2 EXPECT_THAT}  and {\f2 EXPECT_EQ}  also print the values in question when the assertion fails. Google {\b Mock} and Google Test do this using Google Test's user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out. {\f2 Google Test's advanced guide} explains how to extend the printer to do a better job at printing your particular type than to dump the bytes. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentation{\tc \v Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAENI}
{\bkmkend AAAAAAAENI}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all documentation wiki pages for Google {\b Mock} **(the SVN trunk version)**{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b if you use a released version of Google {\b Mock}, please read the documentation for that specific version instead.} {
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
ForDummies \'96 start here if you are new to Google {\b Mock}.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
CheatSheet \'96 a quick reference.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
CookBook \'96 recipes for doing various tasks using Google {\b Mock}.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
FrequentlyAskedQuestions \'96 check here before asking a question on the mailing list.\par}
\par}
To contribute code to Google {\b Mock}, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Pump Manual} \'96 how we generate some of Google {\b Mock}'s source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
ForDummies{\tc \v ForDummies}\par \pard\plain 
{\bkmkstart AAAAAAAENJ}
{\bkmkend AAAAAAAENJ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
({\b Note:}  If you get compiler errors that you don't understand, be sure to consult {\f2 Google Mock Doctor}.)\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Is Google C++ Mocking Framework?} \par}
When you write a prototype or test, often it's not feasible or wise to rely on real objects entirely. A {\b mock object}  implements the same interface as a real object (so it can be used as one), but lets you specify at run time how it will be used and what it should do (which methods will be called? in which order? how many times? with what arguments? what will they return? etc).\par
{\b Note:}  It is easy to confuse the term {\i fake objects}  with mock objects. Fakes and mocks actually mean very different things in the Test-Driven Development (TDD) community:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fake}  objects have working implementations, but usually take some shortcut (perhaps to make the operations less expensive), which makes them not suitable for production. An in-memory file system would be an example of a fake.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Mocks}  are objects pre-programmed with {\i expectations} , which form a specification of the calls they are expected to receive.\par}
If all this seems too abstract for you, don't worry - the most important thing to remember is that a mock allows you to check the {\i interaction}  between itself and code that uses it. The difference between fakes and mocks will become much clearer once you start to use mocks.\par
{\b Google C++ Mocking Framework}  (or {\b Google {\b Mock}}  for short) is a library (sometimes we also call it a "framework" to make it sound cool) for creating mock classes and using them. It does to C++ what {\f2 jMock} and {\f2 EasyMock} do to Java.\par
Using Google {\b Mock} involves three basic steps:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use some simple macros to describe the interface you want to mock, and they will expand to the implementation of your mock class;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects and specify its expectations and behavior using an intuitive syntax;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise code that uses the mock objects. Google {\b Mock} will catch any violation of the expectations as soon as it arises.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Why Google {\b Mock}?} \par}
While mock objects help you remove unnecessary dependencies in tests and make them fast and reliable, using mocks manually in C++ is {\i hard} :\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Someone has to implement the mocks. The job is usually tedious and error-prone. No wonder people go great distance to avoid it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The quality of those manually written mocks is a bit, uh, unpredictable. You may see some really polished ones, but you may also see some that were hacked up in a hurry and have all sorts of ad hoc restrictions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The knowledge you gained from using one mock doesn't transfer to the next.\par}
In contrast, Java and Python programmers have some fine mock frameworks, which automate the creation of mocks. As a result, mocking is a proven effective technique and widely adopted practice in those communities. Having the right tool absolutely makes the difference.\par
Google {\b Mock} was built to help C++ programmers. It was inspired by {\f2 jMock} and {\f2 EasyMock}, but designed with C++'s specifics in mind. It is your friend if any of the following problems is bothering you:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You are stuck with a sub-optimal design and wish you had done more prototyping before it was too late, but prototyping in C++ is by no means "rapid".\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are slow as they depend on too many libraries or use expensive resources (e.g. a database).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your tests are brittle as some resources they use are unreliable (e.g. the network).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test how your code handles a failure (e.g. a file checksum error), but it's not easy to cause one.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You need to make sure that your module interacts with other modules in the right way, but it's hard to observe the interaction; therefore you resort to observing the side effects at the end of the action, which is awkward at best.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to "mock out" your dependencies, except that they don't have mock implementations yet; and, frankly, you aren't thrilled by some of those hand-written mocks.\par}
We encourage you to use Google {\b Mock} as:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i design}  tool, for it lets you experiment with your interface design early and often. More iterations lead to better designs!\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a {\i testing}  tool to cut your tests' outbound dependencies and probe the interaction between your module and its collaborators.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting Started} \par}
Using Google {\b Mock} is easy! Inside your C++ source file, just {\f2 #include}  {\f2 "gtest/gtest.h"}  and {\f2 "gmock/gmock.h"} , and you are ready to go.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 A Case for {\b Mock} Turtles} \par}
Let's look at an example. Suppose you are developing a graphics program that relies on a LOGO-like API for drawing. How would you test that it does the right thing? Well, you can run it and compare the screen with a golden screen snapshot, but let's admit it: tests like this are expensive to run and fragile (What if you just upgraded to a shiny new graphics card that has better anti-aliasing? Suddenly you have to update all your golden images.). It would be too painful if all your tests are like this. Fortunately, you learned about Dependency Injection and know the right thing to do: instead of having your application talk to the drawing API directly, wrap the API in an interface (say, {\f2 Turtle} ) and code to that interface:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Turtle \{\par
  ...\par
  virtual ~Turtle() \{\}\par
  virtual void PenUp() = 0;\par
  virtual void PenDown() = 0;\par
  virtual void Forward(int distance) = 0;\par
  virtual void Turn(int degrees) = 0;\par
  virtual void GoTo(int x, int y) = 0;\par
  virtual int GetX() const = 0;\par
  virtual int GetY() const = 0;\par
\};\par
}
\par
(Note that the destructor of {\f2 Turtle}  {\b must}  be virtual, as is the case for {\b all}  classes you intend to inherit from - otherwise the destructor of the derived class will not be called when you delete an object through a base pointer, and you'll get corrupted program states like memory leaks.)\par
You can control whether the turtle's movement will leave a trace using {\f2 PenUp()}  and {\f2 PenDown()} , and control its movement using {\f2 Forward()} , {\f2 Turn()} , and {\f2 GoTo()} . Finally, {\f2 GetX()}  and {\f2 GetY()}  tell you the current position of the turtle.\par
Your program will normally use a real implementation of this interface. In tests, you can use a mock implementation instead. This allows you to easily check what drawing primitives your program is calling, with what arguments, and in which order. Tests written this way are much more robust (they won't break because your new machine does anti-aliasing differently), easier to read and maintain (the intent of a test is expressed in the code, not in some binary images), and run {\i much, much faster} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the {\b Mock} Class} \par}
If you are lucky, the mocks you need to use have already been implemented by some nice people. If, however, you find yourself in the position to write a mock class, relax - Google {\b Mock} turns this task into a fun game! (Well, almost.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Define It} \par}
Using the {\f2 Turtle}  interface as example, here are the simple steps you need to follow:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class {\f2 MockTurtle}  from {\f2 Turtle} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Take a {\i virtual}  function of {\f2 Turtle}  (while it's possible to {\f2 mock non-virtual methods using templates}, it's much more involved). Count how many arguments it has.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the {\f2 public:}  section of the child class, write {\f2 MOCK_METHODn();}  (or {\f2 MOCK_CONST_METHODn();}  if you are mocking a {\f2 const}  method), where {\f2 n}  is the number of the arguments; if you counted wrong, shame on you, and a compiler error will tell you so.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Now comes the fun part: you take the function signature, cut-and-paste the {\i function name}  as the {\i first}  argument to the macro, and leave what's left as the {\i second}  argument (in case you're curious, this is the {\i type of the function} ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat until all virtual functions you want to mock are done.\par}
After the process, you should have something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gmock/gmock.h"  // Brings in Google Mock.\par
class MockTurtle : public Turtle \{\par
 public:\par
  ...\par
  MOCK_METHOD0(PenUp, void());\par
  MOCK_METHOD0(PenDown, void());\par
  MOCK_METHOD1(Forward, void(int distance));\par
  MOCK_METHOD1(Turn, void(int degrees));\par
  MOCK_METHOD2(GoTo, void(int x, int y));\par
  MOCK_CONST_METHOD0(GetX, int());\par
  MOCK_CONST_METHOD0(GetY, int());\par
\};\par
}
\par
You don't need to define these mock methods somewhere else - the {\f2 MOCK_METHOD*}  macros will generate the definitions for you. It's that simple! Once you get the hang of it, you can pump out mock classes faster than your source-control system can handle your check-ins.\par
{\b Tip:}  If even this is too much work for you, you'll find the {\f2 gmock_gen.py}  tool in Google {\b Mock}'s {\f2 scripts/generator/}  directory (courtesy of the {\f2 cppclean} project) useful. This command-line tool requires that you have Python 2.4 installed. You give it a C++ file and the name of an abstract class defined in it, and it will print the definition of the mock class for you. Due to the complexity of the C++ language, this script may not always work, but it can be quite handy when it does. For more details, read the {\f2 user documentation}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Where to Put It} \par}
When you define a mock class, you need to decide where to put its definition. Some people put it in a {\f2 *_test.cc} . This is fine when the interface being mocked (say, {\f2 Foo} ) is owned by the same person or team. Otherwise, when the owner of {\f2 Foo}  changes it, your test could break. (You can't really expect {\f2 Foo} 's maintainer to fix every test that uses {\f2 Foo} , can you?)\par
So, the rule of thumb is: if you need to mock {\f2 Foo}  and it's owned by others, define the mock class in {\f2 Foo} 's package (better, in a {\f2 testing}  sub-package such that you can clearly separate production code and testing utilities), and put it in a {\f2 mock_foo.h} . Then everyone can reference {\f2 mock_foo.h}  from their tests. If {\f2 Foo}  ever changes, there is only one copy of {\f2 {\b MockFoo}}  to change, and only tests that depend on the changed methods need to be fixed.\par
Another way to do it: you can introduce a thin layer {\f2 FooAdaptor}  on top of {\f2 Foo}  and code to this new interface. Since you own {\f2 FooAdaptor} , you can absorb changes in {\f2 Foo}  much more easily. While this is more work initially, carefully choosing the adaptor interface can make your code easier to write and more readable (a net win in the long run), as you can choose {\f2 FooAdaptor}  to fit your specific domain much better than {\f2 Foo}  does.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Mocks in Tests} \par}
Once you have a mock class, using it is easy. The typical work flow is:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Import the Google {\b Mock} names from the {\f2 testing}  namespace such that you can use them unqualified (You only have to do it once per file. Remember that namespaces are a good idea and good for your health.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create some mock objects.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Specify your expectations on them (How many times will a method be called? With what arguments? What should it do? etc.).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Exercise some code that uses the mocks; optionally, check the result using Google Test assertions. If a mock method is called more than expected or with wrong arguments, you'll get an error immediately.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When a mock is destructed, Google {\b Mock} will automatically check whether all expectations on it have been satisfied.\par}
Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "path/to/mock-turtle.h"\par
#include "gmock/gmock.h"\par
#include "gtest/gtest.h"\par
using ::testing::AtLeast;                     // #1\par
\par
TEST(PainterTest, CanDrawSomething) \{\par
  MockTurtle turtle;                          // #2\par
  EXPECT_CALL(turtle, PenDown())              // #3\par
      .Times(AtLeast(1));\par
\par
  Painter painter(&turtle);                   // #4\par
\par
  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));\par
\}                                             // #5\par
\par
int main(int argc, char** argv) \{\par
  // The following line must be executed to initialize Google Mock\par
  // (and Google Test) before running the tests.\par
  ::testing::InitGoogleMock(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
As you might have guessed, this test checks that {\f2 PenDown()}  is called at least once. If the {\f2 painter}  object didn't call this method, your test will fail with a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/my_test.cc:119: Failure\par
Actual function call count doesn't match this expectation:\par
Actually: never called;\par
Expected: called at least once.\par
}
\par
{\b Tip 1:}  If you run the test from an Emacs buffer, you can hit {\f2 <Enter>}  on the line number displayed in the error message to jump right to the failed expectation.\par
{\b Tip 2:}  If your mock objects are never deleted, the final verification won't happen. Therefore it's a good idea to use a heap leak checker in your tests when you allocate mocks on the heap.\par
{\b Important note:}  Google {\b Mock} requires expectations to be set {\b before}  the mock functions are called, otherwise the behavior is {\b undefined} . In particular, you mustn't interleave {\f2 EXPECT_CALL()} s and calls to the mock functions.\par
This means {\f2 EXPECT_CALL()}  should be read as expecting that a call will occur {\i in the future} , not that a call has occurred. Why does Google {\b Mock} work like that? Well, specifying the expectation beforehand allows Google {\b Mock} to report a violation as soon as it arises, when the context (stack trace, etc) is still available. This makes debugging much easier.\par
Admittedly, this test is contrived and doesn't do much. You can easily achieve the same effect without using Google {\b Mock}. However, as we shall reveal soon, Google {\b Mock} allows you to do {\i much more}  with the mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} with Any Testing Framework} \par}
If you want to use something other than Google Test (e.g. {\f2 CppUnit} or {\f2 CxxTest}) as your testing framework, just change the {\f2 main()}  function in the previous section to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // The following line causes Google Mock to throw an exception on failure,\par
  // which will be interpreted by your testing framework as a test failure.\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  ::testing::InitGoogleMock(&argc, argv);\par
  ... whatever your testing framework requires ...\par
\}\par
}
\par
This approach has a catch: it makes Google {\b Mock} throw an exception from a mock object's destructor sometimes. With some compilers, this sometimes causes the test program to crash. You'll still be able to notice that the test has failed, but it's not a graceful failure.\par
A better solution is to use Google Test's {\f2 event listener API} to report a test failure to your testing framework properly. You'll need to implement the {\f2 OnTestPartResult()}  method of the event listener interface, but it should be straightforward.\par
If this turns out to be too much work, we suggest that you stick with Google Test, which works with Google {\b Mock} seamlessly (in fact, it is technically part of Google {\b Mock}.). If there is a reason that you cannot use Google Test, please let us know.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting Expectations} \par}
The key to using a mock object successfully is to set the {\i right expectations}  on it. If you set the expectations too strict, your test will fail as the result of unrelated changes. If you set them too loose, bugs can slip through. You want to do it just right such that your test can catch exactly the kind of bugs you intend it to catch. Google {\b Mock} provides the necessary means for you to do it "just right."\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 General Syntax} \par}
In Google {\b Mock} we use the {\f2 EXPECT_CALL()}  macro to set an expectation on a mock method. The general syntax is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(mock_object, method(matchers))\par
    .Times(cardinality)\par
    .WillOnce(action)\par
    .WillRepeatedly(action);\par
}
\par
The macro has two arguments: first the mock object, and then the method and its arguments. Note that the two are separated by a comma ({\f2 ,} ), not a period ({\f2 .} ). (Why using a comma? The answer is that it was necessary for technical reasons.)\par
The macro can be followed by some optional {\i clauses}  that provide more information about the expectation. We'll discuss how each clause works in the coming sections.\par
This syntax is designed to make an expectation read like English. For example, you can probably guess that\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .Times(5)\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(150))\par
    .WillRepeatedly(Return(200));\par
}
\par
says that the {\f2 turtle}  object's {\f2 GetX()}  method will be called five times, it will return 100 the first time, 150 the second time, and then 200 every time. Some people like to call this style of syntax a Domain-Specific Language (DSL).\par
{\b Note:}  Why do we use a macro to do this? It serves two purposes: first it makes expectations easily identifiable (either by {\f2 grep}  or by a human reader), and second it allows Google {\b Mock} to include the source file location of a failed expectation in messages, making debugging easier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Matchers: What Arguments Do We Expect?} \par}
When a mock function takes arguments, we must specify what arguments we are expecting; for example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Expects the turtle to move forward by 100 units.\par
EXPECT_CALL(turtle, Forward(100));\par
}
\par
Sometimes you may not want to be too specific (Remember that talk about tests being too rigid? Over specification leads to brittle tests and obscures the intent of tests. Therefore we encourage you to specify only what's necessary - no more, no less.). If you care to check that {\f2 Forward()}  will be called but aren't interested in its actual argument, write {\f2 _}  as the argument, which means "anything goes":\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;\par
...\par
// Expects the turtle to move forward.\par
EXPECT_CALL(turtle, Forward(_));\par
}
\par
{\f2 _}  is an instance of what we call {\b matchers} . A matcher is like a predicate and can test whether an argument is what we'd expect. You can use a matcher inside {\f2 EXPECT_CALL()}  wherever a function argument is expected.\par
A list of built-in matchers can be found in the CheatSheet. For example, here's the {\f2 Ge}  (greater than or equal) matcher:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Ge;...\par
EXPECT_CALL(turtle, Forward(Ge(100)));\par
}
\par
This checks that the turtle will be told to go forward by at least 100 units.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Cardinalities: How Many Times Will It Be Called?} \par}
The first clause we can specify following an {\f2 EXPECT_CALL()}  is {\f2 Times()} . We call its argument a {\b cardinality}  as it tells {\i how many times}  the call should occur. It allows us to repeat an expectation many times without actually writing it as many times. More importantly, a cardinality can be "fuzzy", just like a matcher can be. This allows a user to express the intent of a test exactly.\par
An interesting special case is when we say {\f2 Times(0)} . You may have guessed - it means that the function shouldn't be called with the given arguments at all, and Google {\b Mock} will report a Google Test failure whenever the function is (wrongfully) called.\par
We've seen {\f2 AtLeast(n)}  as an example of fuzzy cardinalities earlier. For the list of built-in cardinalities you can use, see the CheatSheet.\par
The {\f2 Times()}  clause can be omitted. {\b If you omit {\f2 Times()} , Google {\b Mock} will infer the cardinality for you.}  The rules are easy to remember:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\b neither}  {\f2 WillOnce()}  {\b nor}  {\f2 WillRepeatedly()}  is in the {\f2 EXPECT_CALL()} , the inferred cardinality is {\f2 Times(1)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's but {\b no}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 1, the cardinality is {\f2 Times(n)} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If there are {\f2 n WillOnce()} 's and {\b one}  {\f2 WillRepeatedly()} , where {\f2 n}  >= 0, the cardinality is {\f2 Times(AtLeast(n))} .\par}
{\b Quick quiz:}  what do you think will happen if a function is expected to be called twice but actually called four times?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Actions: What Should It Do?} \par}
Remember that a mock object doesn't really have a working implementation? We as users have to tell it what to do when a method is invoked. This is easy in Google {\b Mock}.\par
First, if the return type of a mock function is a built-in type or a pointer, the function has a {\b default action}  (a {\f2 void}  function will just return, a {\f2 bool}  function will return {\f2 false} , and other functions will return 0). If you don't say anything, this behavior will be used.\par
Second, if a mock function doesn't have a default action, or the default action doesn't suit you, you can specify the action to be taken each time the expectation matches using a series of {\f2 WillOnce()}  clauses followed by an optional {\f2 WillRepeatedly()} . For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillOnce(Return(300));\par
}
\par
This says that {\f2 turtle.GetX()}  will be called {\i exactly three times}  (Google {\b Mock} inferred this from how many {\f2 WillOnce()}  clauses we've written, since we didn't explicitly write {\f2 Times()} ), and will return 100, 200, and 300 respectively.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
    .WillOnce(Return(100))\par
    .WillOnce(Return(200))\par
    .WillRepeatedly(Return(300));\par
}
\par
says that {\f2 turtle.GetY()}  will be called {\i at least twice}  (Google {\b Mock} knows this as we've written two {\f2 WillOnce()}  clauses and a {\f2 WillRepeatedly()}  while having no explicit {\f2 Times()} ), will return 100 the first time, 200 the second time, and 300 from the third time on.\par
Of course, if you explicitly write a {\f2 Times()} , Google {\b Mock} will not try to infer the cardinality itself. What if the number you specified is larger than there are {\f2 WillOnce()}  clauses? Well, after all {\f2 WillOnce()} s are used up, Google {\b Mock} will do the {\i default}  action for the function every time (unless, of course, you have a {\f2 WillRepeatedly()} .).\par
What can we do inside {\f2 WillOnce()}  besides {\f2 Return()} ? You can return a reference using {\f2 ReturnRef(variable)} , or invoke a pre-defined function, among {\f2 others}.\par
{\b Important note:}  The {\f2 EXPECT_CALL()}  statement evaluates the action clause only once, even though the action may be performed many times. Therefore you must be careful about side effects. The following may not do what you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int n = 100;\par
EXPECT_CALL(turtle, GetX())\par
.Times(4)\par
.WillRepeatedly(Return(n++));\par
}
\par
Instead of returning 100, 101, 102, ..., consecutively, this mock function will always return 100 as {\f2 n++}  is only evaluated once. Similarly, {\f2 Return(new Foo)}  will create a new {\f2 Foo}  object when the {\f2 EXPECT_CALL()}  is executed, and will return the same pointer every time. If you want the side effect to happen every time, you need to define a custom action, which we'll teach in the CookBook.\par
Time for another quiz! What do you think the following means?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;...\par
EXPECT_CALL(turtle, GetY())\par
.Times(4)\par
.WillOnce(Return(100));\par
}
\par
Obviously {\f2 turtle.GetY()}  is expected to be called four times. But if you think it will return 100 every time, think twice! Remember that one {\f2 WillOnce()}  clause will be consumed each time the function is invoked and the default action will be taken afterwards. So the right answer is that {\f2 turtle.GetY()}  will return 100 the first time, but {\b return 0 from the second time on} , as returning 0 is the default action for {\f2 int}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Multiple Expectations} \par}
So far we've only shown examples where you have a single expectation. More realistically, you're going to specify expectations on multiple mock methods, which may be from multiple mock objects.\par
By default, when a mock method is invoked, Google {\b Mock} will search the expectations in the {\b reverse order}  they are defined, and stop when an active expectation that matches the arguments is found (you can think of it as "newer rules override older ones."). If the matching expectation cannot take any more calls, you will get an upper-bound-violated failure. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, Forward(_));  // #1\par
EXPECT_CALL(turtle, Forward(10))  // #2\par
    .Times(2);\par
}
\par
If {\f2 Forward(10)}  is called three times in a row, the third time it will be an error, as the last matching expectation (#2) has been saturated. If, however, the third {\f2 Forward(10)}  call is replaced by {\f2 Forward(20)} , then it would be OK, as now #1 will be the matching expectation.\par
{\b Side note:}  Why does Google {\b Mock} search for a match in the {\i reverse}  order of the expectations? The reason is that this allows a user to set up the default expectations in a mock object's constructor or the test fixture's set-up phase and then customize the mock by writing more specific expectations in the test body. So, if you have two expectations on the same method, you want to put the one with more specific matchers {\b after}  the other, or the more specific rule would be shadowed by the more general one that comes after it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Ordered vs Unordered Calls} \par}
By default, an expectation can match a call even though an earlier expectation hasn't been satisfied. In other words, the calls don't have to occur in the order the expectations are specified.\par
Sometimes, you may want all the expected calls to occur in a strict order. To say this in Google {\b Mock} is easy:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;...\par
TEST(FooTest, DrawsLineSegment) \{\par
  ...\par
  \{\par
    InSequence dummy;\par
\par
    EXPECT_CALL(turtle, PenDown());\par
    EXPECT_CALL(turtle, Forward(100));\par
    EXPECT_CALL(turtle, PenUp());\par
  \}\par
  Foo();\par
\}\par
}
\par
By creating an object of type {\f2 InSequence} , all expectations in its scope are put into a {\i sequence}  and have to occur {\i sequentially} . Since we are just relying on the constructor and destructor of this object to do the actual work, its name is really irrelevant.\par
In this example, we test that {\f2 Foo()}  calls the three expected functions in the order as written. If a call is made out-of-order, it will be an error.\par
(What if you care about the relative order of some of the calls, but not all of them? Can you specify an arbitrary partial order? The answer is ... yes! If you are impatient, the details can be found in the CookBook.)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 All Expectations Are Sticky (Unless Said Otherwise)} \par}
Now let's do a quick quiz to see how well you can use this mock stuff already. How would you test that the turtle is asked to go to the origin {\i exactly twice}  (you want to ignore any other instructions it receives)?\par
After you've come up with your answer, take a look at ours and compare notes (solve it yourself first - don't cheat!):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::_;...\par
EXPECT_CALL(turtle, GoTo(_, _))  // #1\par
    .Times(AnyNumber());\par
EXPECT_CALL(turtle, GoTo(0, 0))  // #2\par
    .Times(2);\par
}
\par
Suppose {\f2 turtle.GoTo(0, 0)}  is called three times. In the third time, Google {\b Mock} will see that the arguments match expectation #2 (remember that we always pick the last matching expectation). Now, since we said that there should be only two such calls, Google {\b Mock} will report an error immediately. This is basically what we've told you in the "Using Multiple Expectations" section above.\par
This example shows that {\b expectations in Google {\b Mock} are "sticky" by default} , in the sense that they remain active even after we have reached their invocation upper bounds. This is an important rule to remember, as it affects the meaning of the spec, and is {\b different}  to how it's done in many other mocking frameworks (Why'd we do that? Because we think our rule makes the common cases easier to express and understand.).\par
Simple? Let's see if you've really understood it: what does the following code say?\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
      .WillOnce(Return(10*i));\par
\}\par
}
\par
If you think it says that {\f2 turtle.GetX()}  will be called {\f2 n}  times and will return 10, 20, 30, ..., consecutively, think twice! The problem is that, as we said, expectations are sticky. So, the second time {\f2 turtle.GetX()}  is called, the last (latest) {\f2 EXPECT_CALL()}  statement will match, and will immediately lead to an "upper bound exceeded" error - this piece of code is not very useful!\par
One correct way of saying that {\f2 turtle.GetX()}  will return 10, 20, 30, ..., is to explicitly say that the expectations are {\i not}  sticky. In other words, they should {\i retire}  as soon as they are saturated:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::Return;\par
...\par
for (int i = n; i > 0; i--) \{\par
  EXPECT_CALL(turtle, GetX())\par
    .WillOnce(Return(10*i))\par
    .RetiresOnSaturation();\par
\}\par
}
\par
And, there's a better way to do it: in this case, we expect the calls to occur in a specific order, and we line up the actions to match the order. Since the order is important here, we should make it explicit using a sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid using ::testing::InSequence;\par
using ::testing::Return;\par
...\par
\{\par
  InSequence s;\par
\par
  for (int i = 1; i <= n; i++) \{\par
    EXPECT_CALL(turtle, GetX())\par
        .WillOnce(Return(10*i))\par
        .RetiresOnSaturation();\par
  \}\par
\}\par
}
\par
By the way, the other situation where an expectation may {\i not}  be sticky is when it's in a sequence - as soon as another expectation that comes after it in the sequence has been used, it automatically retires (and will never be used to match any call).\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Uninteresting Calls} \par}
A mock object may have many methods, and not all of them are that interesting. For example, in some tests we may not care about how many times {\f2 GetX()}  and {\f2 GetY()}  get called.\par
In Google {\b Mock}, if you are not interested in a method, just don't say anything about it. If a call to this method occurs, you'll see a warning in the test output, but it won't be a failure.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 What Now?} \par}
Congratulations! You've learned enough about Google {\b Mock} to start using it. Now, you might want to join the {\f2 googlemock} discussion group and actually write some tests using Google {\b Mock} - it will be fun. Hey, it may even be addictive - you've been warned.\par
Then, if you feel like increasing your mock quotient, you should move on to the CookBook. You can learn many advanced features of Google {\b Mock} there \'96 and advance your level of enjoyment and testing bliss. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
FrequentlyAskedQuestions{\tc \v FrequentlyAskedQuestions}\par \pard\plain 
{\bkmkstart AAAAAAAENK}
{\bkmkend AAAAAAAENK}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Please send your questions to the {\f2 googlemock} discussion group. If you need help with compiler errors, make sure you have tried Google Mock Doctor first.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When I call a method on my mock object, the method for the real object is invoked instead. What's the problem?} \par}
In order for a method to be mocked, it must be {\i virtual} , unless you use the {\f2 high-perf dependency injection technique}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I wrote some matchers. After I upgraded to a new version of Google {\b Mock}, they no longer compile. What's going on?} \par}
After version 1.4.0 of Google {\b Mock} was released, we had an idea on how to make it easier to write matchers that can generate informative messages efficiently. We experimented with this idea and liked what we saw. Therefore we decided to implement it.\par
Unfortunately, this means that if you have defined your own matchers by implementing {\f2 MatcherInterface}  or using {\f2 MakePolymorphicMatcher()} , your definitions will no longer compile. Matchers defined using the {\f2 MATCHER*}  family of macros are not affected.\par
Sorry for the hassle if your matchers are affected. We believe it's in everyone's long-term interest to make this change sooner than later. Fortunately, it's usually not hard to migrate an existing matcher to the new API. Here's what you need to do:\par
If you wrote your matcher like this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
you'll need to change it to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
 (i.e. rename {\f2 Matches()}  to {\f2 MatchAndExplain()}  and give it a second argument of type {\f2 MatchResultListener*} .)\par
If you were also using {\f2 ExplainMatchResultTo()}  to improve the matcher message: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the lastest\par
// Google Mock.\par
using ::testing::MatcherInterface;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetFoo() > 5;\par
  \}\par
\par
  virtual void ExplainMatchResultTo(MyType value,\par
                                    ::std::ostream* os) const \{\par
    // Prints some helpful information to os to help\par
    // a user understand why value matches (or doesn't match).\par
    *os << "the Foo property is " << value.GetFoo();\par
  \}\par
  ...\par
\};\par
}
\par
you should move the logic of {\f2 ExplainMatchResultTo()}  into {\f2 MatchAndExplain()} , using the {\f2 MatchResultListener}  argument where the {\f2 ::std::ostream}  was used: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MatcherInterface;\par
using ::testing::MatchResultListener;\par
...\par
class MyWonderfulMatcher : public MatcherInterface<MyType> \{\par
 public:\par
  ...\par
  virtual bool MatchAndExplain(MyType value,\par
                               MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Foo property is " << value.GetFoo();\par
    return value.GetFoo() > 5;\par
  \}\par
  ...\par
\};\par
}
\par
If your matcher is defined using {\f2 MakePolymorphicMatcher()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you should rename the {\f2 Matches()}  method to {\f2 MatchAndExplain()}  and add a {\f2 MatchResultListener*}  argument (the same as what you need to do for matchers defined by implementing {\f2 MatcherInterface} ): {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
If your polymorphic matcher uses {\f2 ExplainMatchResultTo()}  for better failure messages: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Old matcher definition that doesn't work with the latest\par
// Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool Matches(MyType value) const \{\par
    // Returns true if value matches.\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
void ExplainMatchResultTo(const MyGreatMatcher& matcher,\par
                          MyType value,\par
                          ::std::ostream* os) \{\par
  // Prints some helpful information to os to help\par
  // a user understand why value matches (or doesn't match).\par
  *os << "the Bar property is " << value.GetBar();\par
\}\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
you'll need to move the logic inside {\f2 ExplainMatchResultTo()}  to {\f2 MatchAndExplain()} : {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // New matcher definition that works with the latest Google Mock.\par
using ::testing::MakePolymorphicMatcher;\par
using ::testing::MatchResultListener;\par
...\par
class MyGreatMatcher \{\par
 public:\par
  ...\par
  bool MatchAndExplain(MyType value,\par
                       MatchResultListener* listener) const \{\par
    // Returns true if value matches.\par
    *listener << "the Bar property is " << value.GetBar();\par
    return value.GetBar() < 42;\par
  \}\par
  ...\par
\};\par
... MakePolymorphicMatcher(MyGreatMatcher()) ...\par
}
\par
For more information, you can read these {\f2 two} {\f2 recipes} from the cookbook. As always, you are welcome to post questions on {\f2 googlemock@googlegroups.com}  if you need any help.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 When using Google {\b Mock}, do I have to use Google Test as the testing framework? I have my favorite testing framework and don't want to switch.} \par}
Google {\b Mock} works out of the box with Google Test. However, it's easy to configure it to work with any testing framework of your choice. {\f2 Here} is how.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How am I supposed to make sense of these horrible template errors?} \par}
If you are confused by the compiler errors gcc threw at you, try consulting the {\i Google {\b Mock} Doctor}  tool first. What it does is to scan stdin for gcc error messages, and spit out diagnoses on the problems (we call them diseases) your code has.\par
To "install", run command: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid alias gmd='<path to googlemock>/scripts/gmock_doctor.py'\par
}
\par
To use it, do: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <your-favorite-build-command> <your-test> 2>&1 | gmd\par
}
\par
For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make my_test 2>&1 | gmd\par
}
\par
Or you can run {\f2 gmd}  and copy-n-paste gcc's error messages to it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I mock a variadic function?} \par}
You cannot mock a variadic function (i.e. a function taking ellipsis ({\f2 ...} ) arguments) directly in Google {\b Mock}.\par
The problem is that in general, there is {\i no way}  for a mock object to know how many arguments are passed to the variadic method, and what the arguments' types are. Only the {\i author of the base class}  knows the protocol, and we cannot look into his head.\par
Therefore, to mock such a function, the {\i user}  must teach the mock object how to figure out the number of arguments and their types. One way to do it is to provide overloaded versions of the function.\par
Ellipsis arguments are inherited from C and not really a C++ feature. They are unsafe to use and don't work with arguments that have constructors or destructors. Therefore we recommend to avoid them in C++ as much as possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MSVC gives me warning C4301 or C4373 when I define a mock method with a const parameter. Why?} \par}
If you compile this using Microsoft Visual C++ 2005 SP1: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(const int i) = 0;\par
\};\par
\par
class MockFoo : public Foo \{\par
  ...\par
  MOCK_METHOD1(Bar, void(const int i));\par
\};\par
}
 You may get the following warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4301: 'MockFoo::Bar': overriding virtual function only differs from 'Foo::Bar' by const/volatile qualifier\par
}
\par
This is a MSVC bug. The same code compiles fine with gcc ,for example. If you use Visual C++ 2008 SP1, you would get the warning: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid warning C4373: 'MockFoo::Bar': virtual function overrides 'Foo::Bar', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers\par
}
\par
In C++, if you {\i declare}  a function with a {\f2 const}  parameter, the {\f2 const}  modifier is {\i ignored} . Therefore, the {\f2 Foo}  base class above is equivalent to: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  ...\par
  virtual void Bar(int i) = 0;  // int or const int?  Makes no difference.\par
\};\par
}
\par
In fact, you can {\i declare}  Bar() with an {\f2 int}  parameter, and {\i define}  it with a {\f2 const int}  parameter. The compiler will still match them up.\par
Since making a parameter {\f2 const}  is meaningless in the method {\i declaration} , we recommend to remove it in both {\f2 Foo}  and {\f2 {\b MockFoo}} . That should workaround the VC bug.\par
Note that we are talking about the {\i top-level}  {\f2 const}  modifier here. If the function parameter is passed by pointer or reference, declaring the {\i pointee}  or {\i referee}  as {\f2 const}  is still meaningful. For example, the following two declarations are {\i not}  equivalent: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Bar(int* p);        // Neither p nor *p is const.\par
void Bar(const int* p);  // p is not const, but *p is.\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a huge mock class, and Microsoft Visual C++ runs out of memory when compiling it. What can I do?} \par}
We've noticed that when the {\f2 /clr}  compiler flag is used, Visual C++ uses 5~6 times as much memory when compiling a mock class. We suggest to avoid {\f2 /clr}  when compiling native C++ mocks.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I can't figure out why Google {\b Mock} thinks my expectations are not satisfied. What should I do?} \par}
You might want to run your test with {\f2 --gmock_verbose=info} . This flag lets Google {\b Mock} print a trace of every mock function call it receives. By studying the trace, you'll gain insights on why the expectations you set are not met.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I assert that a function is NEVER called?} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .Times(0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a failed test where Google {\b Mock} tells me TWICE that a particular expectation is not satisfied. Isn't this redundant?} \par}
When Google {\b Mock} detects a failure, it prints relevant information (the mock function arguments, the state of relevant expectations, and etc) to help the user debug. If another failure is detected, Google {\b Mock} will do the same, including printing the state of relevant expectations.\par
Sometimes an expectation's state didn't change between two failures, and you'll see the same description of the state twice. They are however {\i not}  redundant, as they refer to {\i different points in time} . The fact they are the same {\i is}  interesting information.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I get a heap check failure when using a mock object, but using a real object is fine. What can be wrong?} \par}
Does the class (hopefully a pure interface) you are mocking have a virtual destructor?\par
Whenever you derive from a base class, make sure its destructor is virtual. Otherwise Bad Things will happen. Consider the following code:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Base \{\par
 public:\par
  // Not virtual, but should be.\par
  ~Base() \{ ... \}\par
  ...\par
\};\par
\par
class Derived : public Base \{\par
 public:\par
  ...\par
 private:\par
  std::string value_;\par
\};\par
\par
...\par
  Base* p = new Derived;\par
  ...\par
  delete p;  // Surprise! ~Base() will be called, but ~Derived() will not\par
             // - value_ is leaked.\par
}
\par
By changing {\f2 ~Base()}  to virtual, {\f2 ~Derived()}  will be correctly called when {\f2 delete p}  is executed, and the heap checker will be happy.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The "newer expectations override older ones" rule makes writing expectations awkward. Why does Google {\b Mock} do that?} \par}
When people complain about this, often they are referring to code like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  However, I have to write the expectations in the\par
// reverse order.  This sucks big time!!!\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .RetiresOnSaturation();\par
}
\par
The problem is that they didn't pick the {\b best}  way to express the test's intent.\par
By default, expectations don't have to be matched in {\i any}  particular order. If you want them to match in a certain order, you need to be explicit. This is Google {\b Mock}'s (and jMock's) fundamental philosophy: it's easy to accidentally over-specify your tests, and we want to make it harder to do so.\par
There are two better ways to write the test spec. You could either put the expectations in sequence:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.  Using a sequence, we can write the expectations\par
// in their natural order.\par
\{\par
  InSequence s;\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(1))\par
      .RetiresOnSaturation();\par
  EXPECT_CALL(foo, Bar())\par
      .WillOnce(Return(2))\par
      .RetiresOnSaturation();\par
\}\par
}
\par
or you can put the sequence of actions in the same expectation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.Bar() should be called twice, return 1 the first time, and return\par
// 2 the second time.\par
EXPECT_CALL(foo, Bar())\par
    .WillOnce(Return(1))\par
    .WillOnce(Return(2))\par
    .RetiresOnSaturation();\par
}
\par
Back to the original questions: why does Google {\b Mock} search the expectations (and {\f2 ON_CALL} s) from back to front? Because this allows a user to set up a mock's behavior for the common case early (e.g. in the mock's constructor or the test fixture's set-up phase) and customize it with more specific rules later. If Google {\b Mock} searches from front to back, this very useful pattern won't be possible.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google {\b Mock} prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL. Would it be reasonable not to show the warning in this case?} \par}
When choosing between being neat and being safe, we lean toward the latter. So the answer is that we think it's better to show the warning.\par
Often people write {\f2 ON_CALL} s in the mock object's constructor or {\f2 SetUp()} , as the default behavior rarely changes from test to test. Then in the test body they set the expectations, which are often different for each test. Having an {\f2 ON_CALL}  in the set-up part of a test doesn't mean that the calls are expected. If there's no {\f2 EXPECT_CALL}  and the method is called, it's possibly an error. If we quietly let the call go through without notifying the user, bugs may creep in unnoticed.\par
If, however, you are sure that the calls are OK, you can write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_CALL(foo, Bar(_))\par
    .WillRepeatedly(...);\par
}
\par
instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ON_CALL(foo, Bar(_))\par
    .WillByDefault(...);\par
}
\par
This tells Google {\b Mock} that you do expect the calls and no warning should be printed.\par
Also, you can control the verbosity using the {\f2 --gmock_verbose}  flag. If you find the output too noisy when debugging, just choose a less verbose level.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can I delete the mock function's argument in an action?} \par}
If you find yourself needing to perform some action that's not supported by Google {\b Mock} directly, remember that you can define your own actions using {\f2 MakeAction()} or {\f2 MakePolymorphicAction()}, or you can write a stub function and invoke it using {\f2 Invoke()}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 MOCK_METHODn()'s second argument looks funny. Why don't you use the MOCK_METHODn(Method, return_type, arg_1, ..., arg_n) syntax?} \par}
What?! I think it's beautiful. :-)\par
While which syntax looks more natural is a subjective matter to some extent, Google {\b Mock}'s syntax was chosen for several practical advantages it has.\par
Try to mock a function that takes a map as an argument: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid virtual int GetSize(const map<int, std::string>& m);\par
}
\par
Using the proposed syntax, it would be: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid MOCK_METHOD1(GetSize, int, const map<int, std::string>& m);\par
}
\par
Guess what? You'll get a compiler error as the compiler thinks that {\f2 const map<int, std::string>& m}  are {\b two} , not one, arguments. To work around this you can use {\f2 typedef}  to give the map type a name, but that gets in the way of your work. Google {\b Mock}'s syntax avoids this problem as the function's argument types are protected inside a pair of parentheses: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // This compiles fine.\par
MOCK_METHOD1(GetSize, int(const map<int, std::string>& m));\par
}
\par
You still need a {\f2 typedef}  if the return type contains an unprotected comma, but that's much rarer.\par
Other advantages include:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 MOCK_METHOD1(Foo, int, bool)}  can leave a reader wonder whether the method returns {\f2 int}  or {\f2 bool} , while there won't be such confusion using Google {\b Mock}'s syntax.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The way Google {\b Mock} describes a function type is nothing new, although many people may not be familiar with it. The same syntax was used in C, and the {\f2 function}  library in {\f2 tr1}  uses this syntax extensively. Since {\f2 tr1}  will become a part of the new version of STL, we feel very comfortable to be consistent with it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The function type syntax is also used in other parts of Google {\b Mock}'s API (e.g. the action interface) in order to make the implementation tractable. A user needs to learn it anyway in order to utilize Google {\b Mock}'s more advanced features. We'd as well stick to the same syntax in {\f2 MOCK_METHOD*} !\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My code calls a static/global function. Can I mock it?} \par}
You can, but you need to make some changes.\par
In general, if you find yourself needing to mock a static function, it's a sign that your modules are too tightly coupled (and less flexible, less reusable, less testable, etc). You are probably better off defining a small interface and call the function through that interface, which then can be easily mocked. It's a bit of work initially, but usually pays for itself quickly.\par
This Google Testing Blog {\f2 post} says it excellently. Check it out.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My mock object needs to do complex stuff. It's a lot of pain to specify the actions. Google {\b Mock} sucks!} \par}
I know it's not a question, but you get an answer for free any way. :-)\par
With Google {\b Mock}, you can create mocks in C++ easily. And people might be tempted to use them everywhere. Sometimes they work great, and sometimes you may find them, well, a pain to use. So, what's wrong in the latter case?\par
When you write a test without using mocks, you exercise the code and assert that it returns the correct value or that the system is in an expected state. This is sometimes called "state-based testing".\par
Mocks are great for what some call "interaction-based" testing: instead of checking the system state at the very end, mock objects verify that they are invoked the right way and report an error as soon as it arises, giving you a handle on the precise context in which the error was triggered. This is often more effective and economical to do than state-based testing.\par
If you are doing state-based testing and using a test double just to simulate the real object, you are probably better off using a fake. Using a mock in this case causes pain, as it's not a strong point for mocks to perform complex actions. If you experience this and think that mocks suck, you are just not using the right tool for your problem. Or, you might be trying to solve the wrong problem. :-)\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I got a warning "Uninteresting function call encountered - default action taken.." Should I panic?} \par}
By all means, NO! It's just an FYI.\par
What it means is that you have a mock function, you haven't set any expectations on it (by Google {\b Mock}'s rule this means that you are not interested in calls to this function and therefore it can be called any number of times), and it is called. That's OK - you didn't say it's not OK to call the function!\par
What if you actually meant to disallow this function to be called, but forgot to write {\f2 EXPECT_CALL(foo, Bar()).Times(0)} ? While one can argue that it's the user's fault, Google {\b Mock} tries to be nice and prints you a note.\par
So, when you see the message and believe that there shouldn't be any uninteresting calls, you should investigate what's going on. To make your life easier, Google {\b Mock} prints the function name and arguments when an uninteresting call is encountered.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to define a custom action. Should I use Invoke() or implement the action interface?} \par}
Either way is fine - you want to choose the one that's more convenient for your circumstance.\par
Usually, if your action is for a particular function type, defining it using {\f2 Invoke()}  should be easier; if your action can be used in functions of different types (e.g. if you are defining {\f2 Return(value)} ), {\f2 MakePolymorphicAction()}  is easiest. Sometimes you want precise control on what types of functions the action can be used in, and implementing {\f2 ActionInterface}  is the way to go here. See the implementation of {\f2 Return()}  in {\f2 {\b include/gmock/gmock-actions.h}}  for an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I'm using the set-argument-pointee action, and the compiler complains about "conflicting return type specified". What does it mean?} \par}
You got this error as Google {\b Mock} has no idea what value it should return when the mock method is called. {\f2 SetArgPointee()}  says what the side effect is, but doesn't say what the return value should be. You need {\f2 DoAll()}  to chain a {\f2 SetArgPointee()}  with a {\f2 Return()} .\par
See this {\f2 recipe} for more details and an example.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other {\f2 wiki pages},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googlemock@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the revision number if you check out from SVN directly) of Google {\b Mock} you use (Google {\b Mock} is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Google Mock{\tc \v Google Mock}\par \pard\plain 
{\bkmkstart AAAAAAAENL}
{\bkmkend AAAAAAAENL}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
The Google C++ mocking framework.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Overview} \par}
Google's framework for writing and using C++ mock classes. It can help you derive better designs of your system and write better tests.\par
It is inspired by:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 jMock},\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 EasyMock}, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Hamcrest},\par}
and designed with C++'s specifics in mind.\par
Google mock:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
lets you create mock classes trivially using simple macros.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
supports a rich set of matchers and actions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
handles unordered, partially ordered, or completely ordered expectations.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
is extensible by users.\par}
We hope you find it useful!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Features} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Provides a declarative syntax for defining mocks.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Can easily define partial (hybrid) mocks, which are a cross of real and mock objects.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Handles functions of arbitrary types and overloaded functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Comes with a rich set of matchers for validating function arguments.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Uses an intuitive syntax for controlling the behavior of a mock.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Does automatic verification of expectations (no record-and-replay needed).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Allows arbitrary (partial) ordering constraints on function calls to be expressed,.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Lets a user extend it by defining new matchers and actions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Does not use exceptions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Is easy to learn and use.\par}
Please see the project page above for more information as well as the mailing list for questions, discussions, and development. There is also an IRC channel on OFTC (irc.oftc.net) #gtest available. Please join us!\par
Please note that code under {\f2 scripts/generator} is from {\f2 cppclean} and released under the Apache License, which is different from Google {\b Mock}'s license.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Getting Started} \par}
If you are new to the project, we suggest that you read the user documentation in the following order:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Learn the ../googletest/docs/Primer.md "basics" of Google Test, if you choose to use Google {\b Mock} with it (recommended).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Read Google Mock for Dummies.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Read the instructions below on how to build Google {\b Mock}.\par}
You can also watch Zhanyong's {\f2 talk} on Google {\b Mock}'s usage and implementation.\par
Once you understand the basics, check out the rest of the docs:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CheatSheet - all the commonly used stuff at a glance.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
CookBook - recipes for getting things done, including advanced techniques.\par}
If you need help, please check the KnownIssues and FrequentlyAskedQuestions before posting a question on the {\f2 discussion group}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Google {\b Mock} Without Google Test} \par}
Google {\b Mock} is not a testing framework itself. Instead, it needs a testing framework for writing tests. Google {\b Mock} works seamlessly with {\f2 Google Test}, but you can also use it with {\f2 any C++ testing framework}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Requirements for End Users} \par}
Google {\b Mock} is implemented on top of {\f2 Google Test}, and depends on it. You must use the bundled version of Google Test when using Google {\b Mock}.\par
You can also easily configure Google {\b Mock} to work with another testing framework, although it will still need Google Test. Please read {\f2 "Using_Google_Mock_with_Any_Testing_Framework"} for instructions.\par
Google {\b Mock} depends on advanced C++ features and thus requires a more modern compiler. The following are needed to use Google {\b Mock}:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Linux Requirements} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
GNU-compatible Make or "gmake"\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
POSIX-standard shell\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
POSIX(-2) Regular Expressions (regex.h)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
C++98-standard-compliant compiler (e.g. GCC 3.4 or newer)\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Windows Requirements} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Microsoft Visual C++ 8.0 SP1 or newer\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mac OS X Requirements} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Mac OS X 10.4 Tiger or newer\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Developer Tools Installed\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Requirements for Contributors} \par}
We welcome patches. If you plan to contribute a patch, you need to build Google {\b Mock} and its tests, which has further requirements:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Automake version 1.9 or newer\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Autoconf version 2.59 or newer\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Libtool / Libtoolize\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Python version 2.3 or newer (for running some of the tests and re-generating certain source files from templates)\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Building Google {\b Mock}} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Preparing to Build (Unix only)} \par}
If you are using a Unix system and plan to use the GNU Autotools build system to build Google {\b Mock} (described below), you'll need to configure it now.\par
To prepare the Autotools build system: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd googlemock\par
autoreconf -fvi\par
}
\par
To build Google {\b Mock} and your tests that use it, you need to tell your build system where to find its headers and source files. The exact way to do it depends on which build system you use, and is usually straightforward.\par
This section shows how you can integrate Google {\b Mock} into your existing build system.\par
Suppose you put Google {\b Mock} in directory {\f2 $\{GMOCK_DIR\}}  and Google Test in {\f2 $\{GTEST_DIR\}}  (the latter is {\f2 $\{GMOCK_DIR\}/gtest}  by default). To build Google {\b Mock}, create a library build target (or a project as called by Visual Studio and Xcode) to compile {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $\{GTEST_DIR\}/src/gtest-all.cc and $\{GMOCK_DIR\}/src/gmock-all.cc\par
}
\par
with {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $\{GTEST_DIR\}/include and $\{GMOCK_DIR\}/include\par
}
\par
in the system header search path, and {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $\{GTEST_DIR\} and $\{GMOCK_DIR\}\par
}
\par
in the normal header search path. Assuming a Linux-like system and gcc, something like the following will do: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid g++ -isystem $\{GTEST_DIR\}/include -I$\{GTEST_DIR\} \\\par
    -isystem $\{GMOCK_DIR\}/include -I$\{GMOCK_DIR\} \\\par
    -pthread -c $\{GTEST_DIR\}/src/gtest-all.cc\par
g++ -isystem $\{GTEST_DIR\}/include -I$\{GTEST_DIR\} \\\par
    -isystem $\{GMOCK_DIR\}/include -I$\{GMOCK_DIR\} \\\par
    -pthread -c $\{GMOCK_DIR\}/src/gmock-all.cc\par
ar -rv libgmock.a gtest-all.o gmock-all.o\par
}
\par
(We need -pthread as Google Test and Google {\b Mock} use threads.)\par
Next, you should compile your test source file with $\{GTEST_DIR\}/include and $\{GMOCK_DIR\}/include in the header search path, and link it with gmock and any other necessary libraries: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid g++ -isystem $\{GTEST_DIR\}/include -isystem $\{GMOCK_DIR\}/include \\\par
    -pthread path/to/your_test.cc libgmock.a -o your_test\par
}
\par
As an example, the make/ directory contains a Makefile that you can use to build Google {\b Mock} on systems where GNU make is available (e.g. Linux, Mac OS X, and Cygwin). It doesn't try to build Google {\b Mock}'s own tests. Instead, it just builds the Google {\b Mock} library and a sample test. You can use it as a starting point for your own build script.\par
If the default settings are correct for your environment, the following commands should succeed: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd $\{GMOCK_DIR\}/make\par
make\par
./gmock_test\par
}
\par
If you see errors, try to tweak the contents of {\f2 make/Makefile} to make them go away.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Windows} \par}
The msvc/2005 directory contains VC++ 2005 projects and the msvc/2010 directory contains VC++ 2010 projects for building Google {\b Mock} and selected tests.\par
Change to the appropriate directory and run "msbuild gmock.sln" to build the library and tests (or open the gmock.sln in the MSVC IDE). If you want to create your own project to use with Google {\b Mock}, you'll have to configure it to use the {\f2 gmock_config}  propety sheet. For that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Open the Property Manager window (View | Other Windows | Property Manager)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Right-click on your project and select "Add Existing Property Sheet..."\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Navigate to {\f2 gmock_config.vsprops}  or {\f2 gmock_config.props}  and select it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In Project Properties | Configuration Properties | General | Additional Include Directories, type <path to="" google="" mock>="">/include.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tweaking Google {\b Mock}} \par}
Google {\b Mock} can be used in diverse environments. The default configuration may not work (or may not work well) out of the box in some environments. However, you can easily tweak Google {\b Mock} by defining control macros on the compiler command line. Generally, these macros are named like {\f2 GTEST_XYZ}  and you define them to either 1 or 0 to enable or disable a certain feature.\par
We list the most frequently used macros below. For a complete list, see file {\f2 $\{GTEST_DIR\}/include/gtest/internal/gtest-port.h}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Choosing a TR1 Tuple Library} \par}
Google {\b Mock} uses the C++ Technical Report 1 (TR1) tuple library heavily. Unfortunately TR1 tuple is not yet widely available with all compilers. The good news is that Google Test 1.4.0+ implements a subset of TR1 tuple that's enough for Google {\b Mock}'s need. Google {\b Mock} will automatically use that implementation when the compiler doesn't provide TR1 tuple.\par
Usually you don't need to care about which tuple library Google Test and Google {\b Mock} use. However, if your project already uses TR1 tuple, you need to tell Google Test and Google {\b Mock} to use the same TR1 tuple library the rest of your project uses, or the two tuple implementations will clash. To do that, add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_USE_OWN_TR1_TUPLE=0\par
}
\par
to the compiler flags while compiling Google Test, Google {\b Mock}, and your tests. If you want to force Google Test and Google {\b Mock} to use their own tuple library, just add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_USE_OWN_TR1_TUPLE=1\par
}
\par
to the compiler flags instead.\par
If you want to use Boost's TR1 tuple library with Google {\b Mock}, please refer to the Boost website ({\f2 http://www.boost.org/}) for how to obtain it and set it up.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 As a Shared Library (DLL)} \par}
Google {\b Mock} is compact, so most users can build and link it as a static library for the simplicity. Google {\b Mock} can be used as a DLL, but the same DLL must contain Google Test as well. See ../googletest/README.md "Google Test's README" for instructions on how to set up necessary compiler settings.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tweaking Google {\b Mock}} \par}
Most of Google Test's control macros apply to Google {\b Mock} as well. Please see ../googletest/README.md "Google Test's README" for how to tweak them.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Upgrading from an Earlier Version} \par}
We strive to keep Google {\b Mock} releases backward compatible. Sometimes, though, we have to make some breaking changes for the users' long-term benefits. This section describes what you'll need to do if you are upgrading from an earlier version of Google {\b Mock}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Upgrading from 1.1.0 or Earlier} \par}
You may need to explicitly enable or disable Google Test's own TR1 tuple library. See the instructions in section "[Choosing a TR1 Tuple
Library](../googletest/#choosing-a-tr1-tuple-library)".\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Upgrading from 1.4.0 or Earlier} \par}
On platforms where the pthread library is available, Google Test and Google {\b Mock} use it in order to be thread-safe. For this to work, you may need to tweak your compiler and/or linker flags. Please see the "[Multi-threaded Tests](../googletest#multi-threaded-tests
)" section in file Google Test's README for what you may need to do.\par
If you have custom matchers defined using {\f2 MatcherInterface}  or {\f2 MakePolymorphicMatcher()} , you'll need to update their definitions to use the new matcher API ( {\f2 monomorphic}, {\f2 polymorphic}). Matchers defined using {\f2 MATCHER()}  or {\f2 MATCHER_P*()}  aren't affected.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Developing Google {\b Mock}} \par}
This section discusses how to make your own changes to Google {\b Mock}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing Google {\b Mock} Itself} \par}
To make sure your changes work as intended and don't break existing functionality, you'll want to compile and run Google Test's own tests. For that you'll need Autotools. First, make sure you have followed the instructions above to configure Google {\b Mock}. Then, create a build output directory and enter it. Next, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $\{GMOCK_DIR\}/configure  # try --help for more info\par
}
\par
Once you have successfully configured Google {\b Mock}, the build steps are standard for GNU-style OSS packages. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make        # Standard makefile following GNU conventions\par
make check  # Builds and runs all tests - all should pass.\par
}
\par
Note that when building your project against Google {\b Mock}, you are building against Google Test as well. There is no need to configure Google Test separately.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Contributing a Patch} \par}
We welcome patches. Please read the Developer's Guide for how you can contribute. In particular, make sure you have signed the Contributor License Agreement, or we won't be able to accept the patch.\par
Happy testing! \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
AdvancedGuide{\tc \v AdvancedGuide}\par \pard\plain 
{\bkmkstart AAAAAAAENM}
{\bkmkend AAAAAAAENM}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Now that you have read Primer and learned how to write tests using Google Test, it's time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 More Assertions} \par}
This section covers some less frequently used, but still significant, assertions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Explicit Success and Failure} \par}
These three assertions do not actually test a value or expression. Instead, they generate a success or failure directly. Like the macros that actually perform a test, you may stream a custom failure message into the them.\par
| {\f2 SUCCEED();}  | |:----------\'97|\par
Generates a success. This does NOT make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.\par
Note: {\f2 SUCCEED()}  is purely documentary and currently doesn't generate any user-visible output. However, we may add {\f2 SUCCEED()}  messages to Google Test's output in the future.\par
| {\f2 FAIL();}  | {\f2 ADD_FAILURE();}  | {\f2 ADD_FAILURE_AT("</tt>_file_path_<tt>",} _line_number_{\f2 );}  | |:--------\'97|:--------------\'97|:---------------------------------------------------\'97|\par
{\f2 FAIL()}  generates a fatal failure, while {\f2 ADD_FAILURE()}  and {\f2 ADD_FAILURE_AT()}  generate a nonfatal failure. These are useful when control flow, rather than a Boolean expression, deteremines the test's success or failure. For example, you might want to write something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid switch(expression) \{\par
  case 1: ... some checks ...\par
  case 2: ... some other checks\par
  ...\par
  default: FAIL() << "We shouldn't get here.";\par
\}\par
}
\par
Note: you can only use {\f2 FAIL()}  in functions that return {\f2 void} . See the {\f2 Assertion Placement section} for more information.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Exception Assertions} \par}
These are for verifying that a piece of code throws (or does not throw) an exception of the given type:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\f2 EXPECT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\i statement}  throws an exception of the given type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  throws an exception of any type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't throw any exception \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THROW(Foo(5), bar_exception);\par
\par
EXPECT_NO_THROW(\{\par
  int n = 5;\par
  Bar(&n);\par
\});\par
}
\par
{\i Availability} : Linux, Windows, Mac; since version 1.1.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Predicate Assertions for Better Error Messages} \par}
Even though Google Test has a rich set of assertions, they can never be complete, as it's impossible (nor a good idea) to anticipate all the scenarios a user might run into. Therefore, sometimes a user has to use {\f2 EXPECT_TRUE()}  to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into {\f2 EXPECT_TRUE()} . However, this is awkward especially when the expression has side-effects or is expensive to evaluate.\par
Google Test gives you three different options to solve this problem:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using an Existing Boolean Function} \par}
If you already have a function or a functor that returns {\f2 bool}  (or a type that can be implicitly converted to {\f2 bool} ), you can use it in a {\i predicate assertion}  to get the function arguments printed for free:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\i pred1(val1)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\f2 EXPECT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\i pred2(val1, val2)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the above, {\i predn}  is an {\i n} -ary predicate function or functor, where {\i val1} , {\i val2} , ..., and {\i valn}  are its arguments. The assertion succeeds if the predicate returns {\f2 true}  when applied to the given arguments, and fails otherwise. When the assertion fails, it prints the value of each argument. In either case, the arguments are evaluated exactly once.\par
Here's an example. Given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns true iff m and n have no common divisors except 1.\par
bool MutuallyPrime(int m, int n) \{ ... \}\par
const int a = 3;\par
const int b = 4;\par
const int c = 10;\par
}
\par
the assertion {\f2 EXPECT_PRED2(MutuallyPrime, a, b);}  will succeed, while the assertion {\f2 EXPECT_PRED2(MutuallyPrime, b, c);}  will fail with the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
!MutuallyPrime(b, c) is false, where\par

b is 4\par

c is 10\par

\par}
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If you see a compiler error "no matching function to call" when using {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*} , please see {\f2 this FAQ} for how to resolve it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.\par}
{\i Availability} : Linux, Windows, Mac\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function That Returns an AssertionResult} \par}
While {\f2 EXPECT_PRED*()}  and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The {\f2 {\b testing::AssertionResult}}  class solves this problem.\par
An {\f2 AssertionResult}  object represents the result of an assertion (whether it's a success or a failure, and an associated message). You can create an {\f2 AssertionResult}  using one of these factory functions:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// succeeded.\par
AssertionResult AssertionSuccess();\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// failed.\par
AssertionResult AssertionFailure();\par
\par
\}\par
}
\par
You can then use the {\f2 <<}  operator to stream messages to the {\f2 AssertionResult}  object.\par
To provide more readable messages in Boolean assertions (e.g. {\f2 EXPECT_TRUE()} ), write a predicate function that returns {\f2 AssertionResult}  instead of {\f2 bool} . For example, if you define {\f2 IsEven()}  as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess();\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
instead of:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsEven(int n) \{\par
  return (n % 2) == 0;\par
\}\par
}
\par
the failed assertion {\f2 EXPECT_TRUE(IsEven(Fib(4)))}  will print:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: IsEven(Fib(4))\par

Actual: false (*3 is odd*)\par

Expected: true\par

\par}
instead of a more opaque\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: IsEven(Fib(4))\par

Actual: false\par

Expected: true\par

\par}
If you want informative messages in {\f2 EXPECT_FALSE}  and {\f2 ASSERT_FALSE}  as well, and are fine with making the predicate slower in the success case, you can supply a success message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess() << n << " is even";\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
Then the statement {\f2 EXPECT_FALSE(IsEven(Fib(6)))}  will print\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: IsEven(Fib(6))\par

Actual: true (8 is even)\par

Expected: false\par

\par}
{\i Availability} : Linux, Windows, Mac; since version 1.4.1.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Predicate-Formatter} \par}
If you find the default message generated by {\f2 (ASSERT|EXPECT)_PRED*}  and {\f2 (ASSERT|EXPECT)_(TRUE|FALSE)}  unsatisfactory, or some arguments to your predicate do not support streaming to {\f2 ostream} , you can instead use the following {\i predicate-formatter assertions}  to {\i fully}  customize how the message is formatted:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED_FORMAT1(} _pred_format1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED_FORMAT1(} _pred_format1, val1_{\f2 );}  \cell }{{\i pred_format1(val1)}  is successful \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED_FORMAT2(} _pred_format2, val1, val2_{\f2 );}  \cell }{{\f2 EXPECT_PRED_FORMAT2(} _pred_format2, val1, val2_{\f2 );}  \cell }{{\i pred_format2(val1, val2)}  is successful \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ...}  \cell }{{\f2 ...}  \cell }{{\f2 ...}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The difference between this and the previous two groups of macros is that instead of a predicate, {\f2 (ASSERT|EXPECT)_PRED_FORMAT*}  take a {\i predicate-formatter}  ({\i pred_formatn} ), which is a function or functor with the signature:\par
{\f2 {\b testing::AssertionResult} PredicateFormattern(const char*} _expr1_{\f2 , const char*} _expr2_{\f2 , ... const char*} _exprn_{\f2 , T1} _val1_{\f2 , T2} _val2_{\f2 , ... Tn} _valn_{\f2 );} \par
where {\i val1} , {\i val2} , ..., and {\i valn}  are the values of the predicate arguments, and {\i expr1} , {\i expr2} , ..., and {\i exprn}  are the corresponding expressions as they appear in the source code. The types {\f2 T1} , {\f2 T2} , ..., and {\f2 Tn}  can be either value types or reference types. For example, if an argument has type {\f2 Foo} , you can declare it as either {\f2 Foo}  or {\f2 const Foo&} , whichever is appropriate.\par
A predicate-formatter returns a {\f2 {\b testing::AssertionResult}}  object to indicate whether the assertion has succeeded or not. The only way to create such an object is to call one of these factory functions:\par
As an example, let's improve the failure message in the previous example, which uses {\f2 EXPECT_PRED2()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns the smallest prime common divisor of m and n,\par
// or 1 when m and n are mutually prime.\par
int SmallestPrimeCommonDivisor(int m, int n) \{ ... \}\par
\par
// A predicate-formatter for asserting that two integers are mutually prime.\par
::testing::AssertionResult AssertMutuallyPrime(const char* m_expr,\par
                                               const char* n_expr,\par
                                               int m,\par
                                               int n) \{\par
  if (MutuallyPrime(m, n))\par
    return ::testing::AssertionSuccess();\par
\par
  return ::testing::AssertionFailure()\par
      << m_expr << " and " << n_expr << " (" << m << " and " << n\par
      << ") are not mutually prime, " << "as they have a common divisor "\par
      << SmallestPrimeCommonDivisor(m, n);\par
\}\par
}
\par
With this predicate-formatter, we can use\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);\par
}
\par
to generate the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
b and c (4 and 10) are not mutually prime, as they have a common divisor 2.\par

\par}
As you may have realized, many of the assertions we introduced earlier are special cases of {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} . In fact, most of them are indeed defined using {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Comparison} \par}
Comparing floating-point numbers is tricky. Due to round-off errors, it is very unlikely that two floating-points will match exactly. Therefore, {\f2 ASSERT_EQ}  's naive comparison usually doesn't work. And since floating-points can have a wide value range, no single fixed error bound works. It's better to compare by a fixed relative error bound, except for values close to 0 due to the loss of precision there.\par
In general, for floating-point comparison to make sense, the user needs to carefully choose the error bound. If they don't want or care to, comparing in terms of Units in the Last Place (ULPs) is a good default, and Google Test provides assertions to do this. Full details about ULPs are quite long; if you want to learn more, see {\f2 this article on float comparison}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Macros} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FLOAT_EQ(} _val1, val2_{\f2 );}  \cell }{{\f2 EXPECT_FLOAT_EQ(} _val1, val2_{\f2 );}  \cell }{the two {\f2 float}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DOUBLE_EQ(} _val1, val2_{\f2 );}  \cell }{{\f2 EXPECT_DOUBLE_EQ(} _val1, val2_{\f2 );}  \cell }{the two {\f2 double}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
By "almost equal", we mean the two values are within 4 ULP's from each other.\par
The following assertions allow you to choose the acceptable error bound:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NEAR(} _val1, val2, abs_error_{\f2 );}  \cell }{{\f2 EXPECT_NEAR} _(val1, val2, abs_error_<tt>); \cell }{the difference between {\i val1}  and {\i val2}  doesn't exceed the given absolute error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Predicate-Format Functions} \par}
Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in predicate assertion macros (e.g. {\f2 EXPECT_PRED_FORMAT2} , etc).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(::testing::FloatLE, val1, val2);\par
EXPECT_PRED_FORMAT2(::testing::DoubleLE, val1, val2);\par
}
\par
Verifies that {\i val1}  is less than, or almost equal to, {\i val2} . You can replace {\f2 EXPECT_PRED_FORMAT2}  in the above table with {\f2 ASSERT_PRED_FORMAT2} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Windows HRESULT assertions} \par}
These assertions test for {\f2 HRESULT}  success or failure.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\i expression}  is a success {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\i expression}  is a failure {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The generated output contains the human-readable error message associated with the {\f2 HRESULT}  code returned by {\i expression} .\par
You might use them like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CComPtr shell;\par
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L"Shell.Application"));\par
CComVariant empty;\par
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));\par
}
\par
{\i Availability} : Windows.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Type Assertions} \par}
You can call the function {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::StaticAssertTypeEq<T1, T2>();\par
}
 to assert that types {\f2 T1}  and {\f2 T2}  are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, and the compiler error message will likely (depending on the compiler) show you the actual values of {\f2 T1}  and {\f2 T2} . This is mainly useful inside template code.\par
{\i Caveat:}  When used inside a member function of a class template or a function template, {\f2 StaticAssertTypeEq<T1, T2>()}  is effective {\i only if}  the function is instantiated. For example, given: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T> class Foo \{\par
 public:\par
  void Bar() \{ ::testing::StaticAssertTypeEq<int, T>(); \}\par
\};\par
}
 the code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test1() \{ Foo<bool> foo; \}\par
}
 will {\i not}  generate a compiler error, as {\f2 Foo<bool>::Bar()}  is never actually instantiated. Instead, you need: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test2() \{ Foo<bool> foo; foo.Bar(); \}\par
}
 to cause a compiler error.\par
{\i Availability:}  Linux, Windows, Mac; since version 1.3.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Assertion Placement} \par}
You can use assertions in any C++ function. In particular, it doesn't have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure ({\f2 FAIL*}  and {\f2 ASSERT_*} ) can only be used in void-returning functions. This is a consequence of Google Test not using exceptions. By placing it in a non-void function you'll get a confusing compile error like {\f2 "error: void value not ignored as it ought to be"} .\par
If you need to use assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite {\f2 T2 Foo(T1 x)}  to {\f2 void Foo(T1 x, T2* result)} . You need to make sure that {\f2 *result}  contains some sensible value even when the function returns prematurely. As the function now returns {\f2 void} , you can use any assertion inside of it.\par
If changing the function's type is not an option, you should just use assertions that generate non-fatal failures, such as {\f2 ADD_FAILURE*}  and {\f2 EXPECT_*} .\par
{\i Note} : Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them. You'll get a compilation error if you try. A simple workaround is to transfer the entire body of the constructor or destructor to a private void-returning method. However, you should be aware that a fatal assertion failure in a constructor does not terminate the current test, as your intuition might suggest; it merely returns from the constructor early, possibly leaving your object in a partially-constructed state. Likewise, a fatal assertion failure in a destructor may leave your object in a partially-destructed state. Use assertions carefully in these situations!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Teaching Google Test How to Print Your Values} \par}
When a test assertion such as {\f2 EXPECT_EQ}  fails, Google Test prints the argument values to help you debug. It does this using a user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out.\par
As mentioned earlier, the printer is {\i extensible} . That means you can teach it to do a better job at printing your particular type than to dump the bytes. To do that, define {\f2 <<}  for your type:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Bar \{ ... \};  // We want Google Test to be able to print instances of this.\par
\par
// It's important that the << operator is defined in the SAME\par
// namespace that defines Bar.  C++'s look-up rules rely on that.\par
::std::ostream& operator<<(::std::ostream& os, const Bar& bar) \{\par
  return os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
Sometimes, this might not be an option: your team may consider it bad style to have a {\f2 <<}  operator for {\f2 Bar} , or {\f2 Bar}  may already have a {\f2 <<}  operator that doesn't do what you want (and you cannot change it). If so, you can instead define a {\f2 PrintTo()}  function like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Bar \{ ... \};\par
\par
// It's important that PrintTo() is defined in the SAME\par
// namespace that defines Bar.  C++'s look-up rules rely on that.\par
void PrintTo(const Bar& bar, ::std::ostream* os) \{\par
  *os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
If you have defined both {\f2 <<}  and {\f2 PrintTo()} , the latter will be used when Google Test is concerned. This allows you to customize how the value appears in Google Test's output without affecting code that relies on the behavior of its {\f2 <<}  operator.\par
If you want to print a value {\f2 x}  using Google Test's value printer yourself, just call {\f2 ::testing::PrintToString(} _x_{\f2 )} , which returns an {\f2 std::string} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid vector<pair<Bar, int> > bar_ints = GetBarIntVector();\par
\par
EXPECT_TRUE(IsCorrectBarIntVector(bar_ints))\par
    << "bar_ints = " << ::testing::PrintToString(bar_ints);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Death Tests} \par}
In many applications, there are assertions that can cause application failure if a condition is not met. These sanity checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.\par
Since these precondition checks cause the processes to die, we call such tests {\i death tests} . More generally, any test that checks that a program terminates (except by throwing an exception) in an expected fashion is also a death test.\par
Note that if a piece of code throws an exception, we don't consider it "death" for the purpose of death tests, as the caller of the code could catch the exception and avoid the crash. If you want to verify exceptions thrown by your code, see {\f2 Exception Assertions}.\par
If you want to test {\f2 EXPECT_*()/ASSERT_*()}  failures in your test code, see {\f2 Catching Failures}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write a Death Test} \par}
Google Test has the following macros to support death tests:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH(} _statement, regex_{\f2 );}  \cell }{{\f2 EXPECT_DEATH(} _statement, regex_{\f2 );}  \cell }{{\i statement}  crashes with the given error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH_IF_SUPPORTED(} _statement, regex_{\f2 );}  \cell }{{\f2 EXPECT_DEATH_IF_SUPPORTED(} _statement, regex_{\f2 );}  \cell }{if death tests are supported, verifies that {\i statement}  crashes with the given error; otherwise verifies nothing \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EXIT(} _statement, predicate, regex_{\f2 );}  \cell }{{\f2 EXPECT_EXIT(} _statement, predicate, regex_{\f2 );}  \cell }{_statement_ exits with the given error and its exit code matches {\i predicate}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
where {\i statement}  is a statement that is expected to cause the process to die, {\i predicate}  is a function or function object that evaluates an integer exit status, and {\i regex}  is a regular expression that the stderr output of {\i statement}  is expected to match. Note that {\i statement}  can be {\i any valid statement}  (including {\i compound statement} ) and doesn't have to be an expression.\par
As usual, the {\f2 ASSERT}  variants abort the current test function, while the {\f2 EXPECT}  variants do not.\par
{\b Note:}  We use the word "crash" here to mean that the process terminates with a {\i non-zero}  exit status code. There are two possibilities: either the process has called {\f2 exit()}  or {\f2 _exit()}  with a non-zero value, or it may be killed by a signal.\par
This means that if {\i statement}  terminates the process with a 0 exit code, it is {\i not}  considered a crash by {\f2 EXPECT_DEATH} . Use {\f2 EXPECT_EXIT}  instead if this is the case, or if you want to restrict the exit code more precisely.\par
A predicate here must accept an {\f2 int}  and return a {\f2 bool} . The death test succeeds only if the predicate returns {\f2 true} . Google Test defines a few predicates that handle the most common cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::ExitedWithCode(exit_code)\par
}
\par
This expression is {\f2 true}  if the program exited normally with the given exit code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::KilledBySignal(signal_number)  // Not available on Windows.\par
}
\par
This expression is {\f2 true}  if the program was killed by the given signal.\par
The {\f2 *_DEATH}  macros are convenient wrappers for {\f2 *_EXIT}  that use a predicate that verifies the process' exit code is non-zero.\par
Note that a death test only cares about three things:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does {\i statement}  abort or exit the process?\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab (in the case of {\f2 ASSERT_EXIT}  and {\f2 EXPECT_EXIT} ) does the exit status satisfy {\i predicate} ? Or (in the case of {\f2 ASSERT_DEATH}  and {\f2 EXPECT_DEATH} ) is the exit status non-zero? And\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does the stderr output match {\i regex} ?\par}
In particular, if {\i statement}  generates an {\f2 ASSERT_*}  or {\f2 EXPECT_*}  failure, it will {\b not}  cause the death test to fail, as Google Test assertions don't abort the process.\par
To write a death test, simply use one of the above macros inside your test function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyDeathTest, Foo) \{\par
  // This death test uses a compound statement.\par
  ASSERT_DEATH(\{ int n = 5; Foo(&n); \}, "Error on line .* of Foo()");\par
\}\par
TEST(MyDeathTest, NormalExit) \{\par
  EXPECT_EXIT(NormalExit(), ::testing::ExitedWithCode(0), "Success");\par
\}\par
TEST(MyDeathTest, KillMyself) \{\par
  EXPECT_EXIT(KillMyself(), ::testing::KilledBySignal(SIGKILL), "Sending myself unblockable signal");\par
\}\par
}
\par
verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 Foo(5)}  causes the process to die with the given error message,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 NormalExit()}  causes the process to print {\f2 "Success"}  to stderr and exit with exit code 0, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 KillMyself()}  kills the process with signal {\f2 SIGKILL} .\par}
The test function body may contain other assertions and statements as well, if necessary.\par
{\i Important:}  We strongly recommend you to follow the convention of naming your test case (not test) {\f2 *DeathTest}  when it contains a death test, as demonstrated in the above example. The {\f2 Death Tests And Threads}  section below explains why.\par
If a test fixture class is shared by normal tests and death tests, you can use typedef to introduce an alias for the fixture class and avoid duplicating its code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooTest, DoesThis) \{\par
  // normal test\par
\}\par
\par
TEST_F(FooDeathTest, DoesThat) \{\par
  // death test\par
\}\par
}
\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Cygwin, and Mac (the latter three are supported since v1.3.0). {\f2 (ASSERT|EXPECT)_DEATH_IF_SUPPORTED}  are new in v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Regular Expression Syntax} \par}
On POSIX systems (e.g. Linux, Cygwin, and Mac), Google Test uses the {\f2 POSIX extended regular expression} syntax in death tests. To learn about this syntax, you may want to read this {\f2 Wikipedia entry}.\par
On Windows, Google Test uses its own simple regular expression implementation. It lacks many features you can find in POSIX extended regular expressions. For example, we don't support union ({\f2 "x|y"} ), grouping ({\f2 "(xy)"} ), brackets ({\f2 "[xy]"} ), and repetition count ({\f2 "x\{5,7\}"} ), among others. Below is what we do support (Letter {\f2 A}  denotes a literal character, period ({\f2 .} ), or a single {\f2 \\\\}  escape sequence; {\f2 x}  and {\f2 y}  denote regular expressions.):\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 c}  \cell }{matches any literal character {\f2 c}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\d}  \cell }{matches any decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\D}  \cell }{matches any character that's not a decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\f}  \cell }{matches {\f2 \\f}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\n}  \cell }{matches {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\r}  \cell }{matches {\f2 \\r}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\s}  \cell }{matches any ASCII whitespace, including {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\S}  \cell }{matches any character that's not a whitespace \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\t}  \cell }{matches {\f2 \\t}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\v}  \cell }{matches {\f2 \\v}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\w}  \cell }{matches any letter, {\f2 _} , or decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\W}  \cell }{matches any character that {\f2 \\\\w}  doesn't match \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\c}  \cell }{matches any literal character {\f2 c} , which must be a punctuation \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\.}  \cell }{matches the {\f2 .}  character \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 .}  \cell }{matches any single character except {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A?}  \cell }{matches 0 or 1 occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A*}  \cell }{matches 0 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A+}  \cell }{matches 1 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ^}  \cell }{matches the beginning of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $}  \cell }{matches the end of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 xy}  \cell }{matches {\f2 x}  followed by {\f2 y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
To help you determine which capability is available on your system, Google Test defines macro {\f2 GTEST_USES_POSIX_RE=1}  when it uses POSIX extended regular expressions, or {\f2 GTEST_USES_SIMPLE_RE=1}  when it uses the simple version. If you want your death tests to work in both cases, you can either {\f2 #if}  on these macros or use the more limited syntax only.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How It Works} \par}
Under the hood, {\f2 ASSERT_EXIT()}  spawns a new process and executes the death test statement in that process. The details of of how precisely that happens depend on the platform and the variable {\f2 ::testing::GTEST_FLAG(death_test_style)}  (which is initialized from the command-line flag {\f2 --gtest_death_test_style} ).\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On POSIX systems, {\f2 fork()}  (or {\f2 clone()}  on Linux) is used to spawn the child, after which:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "fast"} , the death test statement is immediately executed.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "threadsafe"} , the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On Windows, the child is spawned using the {\f2 CreateProcess()}  API, and re-executes the binary to cause just the single death test under consideration to be run - much like the {\f2 threadsafe}  mode on POSIX.\par}
Other values for the variable are illegal and will cause the death test to fail. Currently, the flag's default value is {\f2 "fast"} . However, we reserve the right to change it in the future. Therefore, your tests should not depend on this.\par
In either case, the parent process waits for the child process to complete, and checks that\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's exit status satisfies the predicate, and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's stderr matches the regular expression.\par}
If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Tests And Threads} \par}
The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn't feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.\par
Google Test has three features intended to raise awareness of threading issues.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A warning is emitted if multiple threads are running when a death test is encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test cases with a name ending in "DeathTest" are run before all other tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It uses {\f2 clone()}  instead of {\f2 fork()}  to spawn the child process on Linux ({\f2 clone()}  is not available on Cygwin and Mac), as {\f2 fork()}  is more likely to cause the child to hang when the parent process has multiple threads.\par}
It's perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Test Styles} \par}
The "threadsafe" death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety. We suggest using the faster, default "fast" style unless your test has specific problems with it.\par
You can choose a particular style of death tests by setting the flag programmatically:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
}
\par
You can do this in {\f2 main()}  to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyDeathTest, TestOne) \{\par
  ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
  // This test is run in the "threadsafe" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
TEST(MyDeathTest, TestTwo) \{\par
  // This test is run in the "fast" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  ::testing::FLAGS_gtest_death_test_style = "fast";\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Caveats} \par}
The {\i statement}  argument of {\f2 ASSERT_EXIT()}  can be any valid C++ statement. If it leaves the current function via a {\f2 return}  statement or by throwing an exception, the death test is considered to have failed. Some Google Test macros may return from the current function (e.g. {\f2 ASSERT_TRUE()} ), so be sure to avoid them in {\i statement} .\par
Since {\i statement}  runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will {\i not}  be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab try not to free memory in a death test;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab free the memory again in the parent process; or\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab do not use the heap checker in your program.\par}
Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.\par
Despite the improved thread safety afforded by the "threadsafe" style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with {\f2 pthread_atfork(3)} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Assertions in Sub-routines} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adding Traces to Assertions} \par}
If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the {\f2 SCOPED_TRACE}  macro:\par
| {\f2 SCOPED_TRACE(} _message_{\f2 );}  | |:--------------------------\'97|\par
where {\i message}  can be anything streamable to {\f2 std::ostream} . This macro will cause the current file name, line number, and the given message to be added in every failure message. The effect will be undone when the control leaves the current lexical scope.\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10: void Sub1(int n) \{\par
11:   EXPECT_EQ(1, Bar(n));\par
12:   EXPECT_EQ(2, Bar(n + 1));\par
13: \}\par
14:\par
15: TEST(FooTest, Bar) \{\par
16:   \{\par
17:     SCOPED_TRACE("A");  // This trace point will be included in\par
18:                         // every failure in this scope.\par
19:     Sub1(1);\par
20:   \}\par
21:   // Now it won't.\par
22:   Sub1(9);\par
23: \}\par
}
\par
could result in messages like these:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/foo_test.cc:11: Failure\par
Value of: Bar(n)\par
Expected: 1\par
  Actual: 2\par
   Trace:\par
path/to/foo_test.cc:17: A\par
\par
path/to/foo_test.cc:12: Failure\par
Value of: Bar(n + 1)\par
Expected: 2\par
  Actual: 3\par
}
\par
Without the trace, it would've been difficult to know which invocation of {\f2 Sub1()}  the two failures come from respectively. (You could add an extra message to each assertion in {\f2 Sub1()}  to indicate the value of {\f2 n} , but that's tedious.)\par
Some tips on using {\f2 SCOPED_TRACE} :\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab With a suitable message, it's often enough to use {\f2 SCOPED_TRACE}  at the beginning of a sub-routine, instead of at each call site.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When calling sub-routines inside a loop, make the loop iterator part of the message in {\f2 SCOPED_TRACE}  such that you can know which iteration the failure is from.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for {\f2 SCOPED_TRACE} . You can simply use {\f2 ""} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 SCOPED_TRACE}  in an inner scope when there is one in the outer scope. In this case, all active trace points will be included in the failure messages, in reverse order they are encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!\par}
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Propagating Fatal Failures} \par}
A common pitfall when using {\f2 ASSERT_*}  and {\f2 FAIL*}  is not understanding that when they fail they only abort the {\i current function} , not the entire test. For example, the following test will segfault: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Subroutine() \{\par
  // Generates a fatal failure and aborts the current function.\par
  ASSERT_EQ(1, 2);\par
  // The following won't be executed.\par
  ...\par
\}\par
\par
TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // The intended behavior is for the fatal failure\par
  // in Subroutine() to abort the entire test.\par
  // The actual behavior: the function goes on after Subroutine() returns.\par
  int* p = NULL;\par
  *p = 3; // Segfault!\par
\}\par
}
\par
Since we don't use exceptions, it is technically impossible to implement the intended behavior here. To alleviate this, Google Test provides two solutions. You could use either the {\f2 (ASSERT|EXPECT)_NO_FATAL_FAILURE}  assertions or the {\f2 HasFatalFailure()}  function. They are described in the following two subsections.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Asserting on Subroutines} \par}
As shown above, if your test calls a subroutine that has an {\f2 ASSERT_*}  failure in it, the test will continue after the subroutine returns. This may not be what you want.\par
Often people want fatal failures to propagate like exceptions. For that Google Test offers the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't generate any new fatal failures in the current thread. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If {\i statement}  creates new threads, failures in these threads are ignored.\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_NO_FATAL_FAILURE(Foo());\par
\par
int i;\par
EXPECT_NO_FATAL_FAILURE(\{\par
  i = Bar();\par
\});\par
}
\par
{\i Availability:}  Linux, Windows, Mac. Assertions from multiple threads are currently not supported.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Checking for Failures in the Current Test} \par}
{\f2 HasFatalFailure()}  in the {\f2 {\b testing::Test}}  class returns {\f2 true}  if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Test \{\par
 public:\par
  ...\par
  static bool HasFatalFailure();\par
\};\par
}
\par
The typical usage, which basically simulates the behavior of a thrown exception, is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // Aborts if Subroutine() had a fatal failure.\par
  if (HasFatalFailure())\par
    return;\par
  // The following won't be executed.\par
  ...\par
\}\par
}
\par
If {\f2 HasFatalFailure()}  is used outside of {\f2 TEST()}  , {\f2 {\b TEST_F()}}  , or a test fixture, you must add the {\f2 {\b testing::Test}::}  prefix, as in:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (::testing::Test::HasFatalFailure())\par
  return;\par
}
\par
Similarly, {\f2 HasNonfatalFailure()}  returns {\f2 true}  if the current test has at least one non-fatal failure, and {\f2 HasFailure()}  returns {\f2 true}  if the current test has at least one failure of either kind.\par
{\i Availability:}  Linux, Windows, Mac. {\f2 HasNonfatalFailure()}  and {\f2 HasFailure()}  are available since version 1.4.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Logging Additional Information} \par}
In your test code, you can call {\f2 RecordProperty("key", value)}  to log additional information, where {\f2 value}  can be either a string or an {\f2 int} . The {\i last}  value recorded for a key will be emitted to the XML output if you specify one. For example, the test\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(WidgetUsageTest, MinAndMaxWidgets) \{\par
  RecordProperty("MaximumWidgets", ComputeMaxUsage());\par
  RecordProperty("MinimumWidgets", ComputeMinUsage());\par
\}\par
}
\par
will output XML like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  <testcase name="MinAndMaxWidgets" status="run" time="6" classname="WidgetUsageTest"\par
            MaximumWidgets="12"\par
            MinimumWidgets="9" />\par
...\par
}
\par
{\i Note} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 RecordProperty()}  is a static member of the {\f2 Test}  class. Therefore it needs to be prefixed with {\f2 {\b testing::Test}::}  if used outside of the {\f2 TEST}  body and the test fixture class.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 key}  must be a valid XML attribute name, and cannot conflict with the ones already used by Google Test ({\f2 name} , {\f2 status} , {\f2 time} , {\f2 classname} , {\f2 type_param} , and {\f2 value_param} ).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Calling {\f2 RecordProperty()}  outside of the lifespan of a test is allowed. If it's called outside of a test but between a test case's {\f2 SetUpTestCase()}  and {\f2 TearDownTestCase()}  methods, it will be attributed to the XML element for the test case. If it's called outside of all test cases (e.g. in a test environment), it will be attributed to the top-level XML element.\par}
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Sharing Resources Between Tests in the Same Test Case} \par}
Google Test creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.\par
If the tests don't change the resource, there's no harm in them sharing a single resource copy. So, in addition to per-test set-up/tear-down, Google Test also supports per-test-case set-up/tear-down. To use it:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In your test fixture class (say {\f2 {\b FooTest}}  ), define as {\f2 static}  some member variables to hold the shared resources.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the same test fixture class, define a {\f2 static void SetUpTestCase()}  function (remember not to spell it as **{\f2 SetupTestCase} ** with a small {\f2 u} !) to set up the shared resources and a {\f2 static void TearDownTestCase()}  function to tear them down.\par}
That's it! Google Test automatically calls {\f2 SetUpTestCase()}  before running the {\i first test}  in the {\f2 {\b FooTest}}  test case (i.e. before creating the first {\f2 {\b FooTest}}  object), and calls {\f2 TearDownTestCase()}  after running the {\i last test}  in it (i.e. after deleting the last {\f2 {\b FooTest}}  object). In between, the tests can use the shared resources.\par
Remember that the test order is undefined, so your code can't depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.\par
Here's an example of per-test-case set-up and tear-down: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\par
 protected:\par
  // Per-test-case set-up.\par
  // Called before the first test in this test case.\par
  // Can be omitted if not needed.\par
  static void SetUpTestCase() \{\par
    shared_resource_ = new ...;\par
  \}\par
\par
  // Per-test-case tear-down.\par
  // Called after the last test in this test case.\par
  // Can be omitted if not needed.\par
  static void TearDownTestCase() \{\par
    delete shared_resource_;\par
    shared_resource_ = NULL;\par
  \}\par
\par
  // You can define per-test set-up and tear-down logic as usual.\par
  virtual void SetUp() \{ ... \}\par
  virtual void TearDown() \{ ... \}\par
\par
  // Some expensive resource shared by all tests.\par
  static T* shared_resource_;\par
\};\par
\par
T* FooTest::shared_resource_ = NULL;\par
\par
TEST_F(FooTest, Test1) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
TEST_F(FooTest, Test2) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
}
\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Global Set-Up and Tear-Down} \par}
Just as you can do set-up and tear-down at the test level and the test case level, you can also do it at the test program level. Here's how.\par
First, you subclass the {\f2 {\b testing::Environment}}  class to define a test environment, which knows how to set-up and tear-down:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Environment \{\par
 public:\par
  virtual ~Environment() \{\}\par
  // Override this to define how to set up the environment.\par
  virtual void SetUp() \{\}\par
  // Override this to define how to tear down the environment.\par
  virtual void TearDown() \{\}\par
\};\par
}
\par
Then, you register an instance of your environment class with Google Test by calling the {\f2 ::testing::AddGlobalTestEnvironment()}  function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Environment* AddGlobalTestEnvironment(Environment* env);\par
}
\par
Now, when {\f2 RUN_ALL_TESTS()}  is called, it first calls the {\f2 SetUp()}  method of the environment object, then runs the tests if there was no fatal failures, and finally calls {\f2 TearDown()}  of the environment object.\par
It's OK to register multiple environment objects. In this case, their {\f2 SetUp()}  will be called in the order they are registered, and their {\f2 TearDown()}  will be called in the reverse order.\par
Note that Google Test takes ownership of the registered environment objects. Therefore {\b do not delete them}  by yourself.\par
You should call {\f2 AddGlobalTestEnvironment()}  before {\f2 RUN_ALL_TESTS()}  is called, probably in {\f2 main()} . If you use {\f2 gtest_main} , you need to call this before {\f2 main()}  starts for it to take effect. One way to do this is to define a global variable like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::Environment* const foo_env = ::testing::AddGlobalTestEnvironment(new FooEnvironment);\par
}
\par
However, we strongly recommend you to write your own {\f2 main()}  and call {\f2 AddGlobalTestEnvironment()}  there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn't guarantee the order in which global variables from different translation units are initialized).\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Value Parameterized Tests} \par}
{\i Value-parameterized tests}  allow you to test your code with different parameters without writing multiple copies of the same test.\par
Suppose you write a test for your code and then realize that your code is affected by a presence of a Boolean command line flag.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyCodeTest, TestFoo) \{\par
  // A code to test foo().\par
\}\par
}
\par
Usually people factor their test code into a function with a Boolean parameter in such situations. The function sets the flag, then executes the testing code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooHelper(bool flag_value) \{\par
  flag = flag_value;\par
  // A code to test foo().\par
\}\par
\par
TEST(MyCodeTest, TestFoo) \{\par
  TestFooHelper(false);\par
  TestFooHelper(true);\par
\}\par
}
\par
But this setup has serious drawbacks. First, when a test assertion fails in your tests, it becomes unclear what value of the parameter caused it to fail. You can stream a clarifying message into your {\f2 EXPECT} /{\f2 ASSERT}  statements, but it you'll have to do it with all of them. Second, you have to add one such helper function per test. What if you have ten tests? Twenty? A hundred?\par
Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.\par
Here are some other situations when value-parameterized tests come handy:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test different implementations of an OO interface.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write Value-Parameterized Tests} \par}
To write value-parameterized tests, first you should define a fixture class. It must be derived from both {\f2 {\b testing::Test}}  and {\f2 ::testing::WithParamInterface<T>}  (the latter is a pure interface), where {\f2 T}  is the type of your parameter values. For convenience, you can just derive the fixture class from {\f2 ::testing::TestWithParam<T>} , which itself is derived from both {\f2 {\b testing::Test}}  and {\f2 ::testing::WithParamInterface<T>} . {\f2 T}  can be any copyable type. If it's a raw pointer, you are responsible for managing the lifespan of the pointed values.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::TestWithParam<const char*> \{\par
  // You can implement all the usual fixture class members here.\par
  // To access the test parameter, call GetParam() from class\par
  // TestWithParam<T>.\par
\};\par
\par
// Or, when you want to add parameters to a pre-existing fixture class:\par
class BaseTest : public ::testing::Test \{\par
  ...\par
\};\par
class BarTest : public BaseTest,\par
                public ::testing::WithParamInterface<const char*> \{\par
  ...\par
\};\par
}
\par
Then, use the {\f2 TEST_P}  macro to define as many test patterns using this fixture as you want. The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, access the test parameter with the GetParam() method\par
  // of the TestWithParam<T> class:\par
  EXPECT_TRUE(foo.Blah(GetParam()));\par
  ...\par
\}\par
\par
TEST_P(FooTest, HasBlahBlah) \{\par
  ...\par
\}\par
}
\par
Finally, you can use {\f2 INSTANTIATE_TEST_CASE_P}  to instantiate the test case with any set of parameters you want. Google Test defines a number of functions for generating test parameters. They return what we call (surprise!) {\i parameter generators} . Here is a summary of them, which are all in the {\f2 testing}  namespace:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Range(begin, end[, step])}  \cell }{Yields values {\f2 \{begin, begin+step, begin+step+step, ...\}} . The values do not include {\f2 end} . {\f2 step}  defaults to 1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Values(v1, v2, ..., vN)}  \cell }{Yields values {\f2 \{v1, v2, ..., vN\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ValuesIn(container)}  and {\f2 ValuesIn(begin, end)}  \cell }{Yields values from a C-style array, an STL-style container, or an iterator range {\f2 [begin, end)} . {\f2 container} , {\f2 begin} , and {\f2 end}  can be expressions whose values are determined at run time. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 {\b Bool()}}  \cell }{Yields sequence {\f2 \{false, true\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Combine(g1, g2, ..., gN)}  \cell }{Yields all combinations (the Cartesian product for the math savvy) of the values generated by the {\f2 N}  generators. This is only available if your system provides the {\f2 <tr1/tuple>}  header. If you are sure your system does, and Google Test disagrees, you can override it by defining {\f2 GTEST_HAS_TR1_TUPLE=1} . See comments in {\f2 include/gtest/internal/gtest-port.h} for more information. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For more details, see the comments at the definitions of these functions in the {\f2 source code}.\par
The following statement will instantiate tests from the {\f2 {\b FooTest}}  test case each with parameter values {\f2 "meeny"} , {\f2 "miny"} , and {\f2 "moe"} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TEST_CASE_P(InstantiationName,\par
                        FooTest,\par
                        ::testing::Values("meeny", "miny", "moe"));\par
}
\par
To distinguish different instances of the pattern (yes, you can instantiate it more than once), the first argument to {\f2 INSTANTIATE_TEST_CASE_P}  is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/2}  for {\f2 "moe"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/2}  for {\f2 "moe"} \par}
You can use these names in {\f2 \'96gtest_filter}.\par
This statement will instantiate all tests from {\f2 {\b FooTest}}  again, each with parameter values {\f2 "cat"}  and {\f2 "dog"} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const char* pets[] = \{"cat", "dog"\};\par
INSTANTIATE_TEST_CASE_P(AnotherInstantiationName, FooTest,\par
                        ::testing::ValuesIn(pets));\par
}
\par
The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/1}  for {\f2 "dog"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "dog"} \par}
Please note that {\f2 INSTANTIATE_TEST_CASE_P}  will instantiate {\i all}  tests in the given test case, whether their definitions come before or {\i after}  the {\f2 INSTANTIATE_TEST_CASE_P}  statement.\par
You can see {\f2 these} {\f2 files} for more examples.\par
{\i Availability} : Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.2.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Creating Value-Parameterized Abstract Tests} \par}
In the above, we define and instantiate {\f2 {\b FooTest}}  in the same source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as {\i abstract tests} . As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, he can instantiate your suite to get all the interface-conformance tests for free.\par
To define abstract tests, you should organize your code like this:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the definition of the parameterized test fixture class (e.g. {\f2 {\b FooTest}} ) in a header file, say {\f2 foo_param_test.h} . Think of this as {\i declaring}  your abstract tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the {\f2 TEST_P}  definitions in {\f2 foo_param_test.cc} , which includes {\f2 foo_param_test.h} . Think of this as {\i implementing}  your abstract tests.\par}
Once they are defined, you can instantiate them by including {\f2 foo_param_test.h} , invoking {\f2 INSTANTIATE_TEST_CASE_P()} , and linking with {\f2 foo_param_test.cc} . You can instantiate the same abstract test case multiple times, possibly in different source files.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Typed Tests} \par}
Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same "concept" and you want to verify it. In both cases, you want the same test logic repeated for different types.\par
While you can write one {\f2 TEST}  or {\f2 TEST_F}  for each type you want to test (and you may even factor the test logic into a function template that you invoke from the {\f2 TEST} ), it's tedious and doesn't scale: if you want {\i m}  tests over {\i n}  types, you'll end up writing {\i m*n}  {\f2 TEST} s.\par
{\i Typed tests}  allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here's how you do it:\par
First, define a fixture class template. It should be parameterized by a type. Remember to derive it from {\f2 {\b testing::Test}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
 public:\par
  ...\par
  typedef std::list<T> List;\par
  static T shared_;\par
  T value_;\par
\};\par
}
\par
Next, associate a list of types with the test case, which will be repeated for each type in the list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
TYPED_TEST_CASE(FooTest, MyTypes);\par
}
\par
The {\f2 typedef}  is necessary for the {\f2 TYPED_TEST_CASE}  macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.\par
Then, use {\f2 TYPED_TEST()}  instead of {\f2 {\b TEST_F()}}  to define a typed test for this test case. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST(FooTest, DoesBlah) \{\par
  // Inside a test, refer to the special name TypeParam to get the type\par
  // parameter.  Since we are inside a derived class template, C++ requires\par
  // us to visit the members of FooTest via 'this'.\par
  TypeParam n = this->value_;\par
\par
  // To visit static members of the fixture, add the 'TestFixture::'\par
  // prefix.\par
  n += TestFixture::shared_;\par
\par
  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\par
  // prefix.  The 'typename' is required to satisfy the compiler.\par
  typename TestFixture::List values;\par
  values.push_back(n);\par
  ...\par
\}\par
\par
TYPED_TEST(FooTest, HasPropertyA) \{ ... \}\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Type-Parameterized Tests} \par}
{\i Type-parameterized tests}  are like typed tests, except that they don't require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.\par
If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with his type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here's an example:\par
First, define a fixture class template, as we did with typed tests:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
  ...\par
\};\par
}
\par
Next, declare that you will define a type-parameterized test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_CASE_P(FooTest);\par
}
\par
The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
Then, use {\f2 TYPED_TEST_P()}  to define a type-parameterized test. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, refer to TypeParam to get the type parameter.\par
  TypeParam n = 0;\par
  ...\par
\}\par
\par
TYPED_TEST_P(FooTest, HasPropertyA) \{ ... \}\par
}
\par
Now the tricky part: you need to register all test patterns using the {\f2 REGISTER_TYPED_TEST_CASE_P}  macro before you can instantiate them. The first argument of the macro is the test case name; the rest are the names of the tests in this test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid REGISTER_TYPED_TEST_CASE_P(FooTest,\par
                           DoesBlah, HasPropertyA);\par
}
\par
Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can {\f2 #include}  it in multiple C++ source files and instantiate it multiple times.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, MyTypes);\par
}
\par
To distinguish different instances of the pattern, the first argument to the {\f2 INSTANTIATE_TYPED_TEST_CASE_P}  macro is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instances.\par
In the special case where the type list contains only one type, you can write that type directly without {\f2 ::testing::Types<...>} , like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, int);\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Testing Private Code} \par}
If you change your software's internal implementation, your tests should not break as long as the change is not observable by users. Therefore, per the {\i black-box testing principle} , most of the time you should test your code through its public interfaces.\par
If you still find yourself needing to test internal implementation code, consider if there's a better design that wouldn't require you to do so. If you absolutely have to test non-public interface code though, you can. There are two cases to consider:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Static functions ({\i not}  the same as static member functions!) or unnamed namespaces, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Private or protected class members\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Static Functions} \par}
Both static functions and definitions/declarations in an unnamed namespace are only visible within the same translation unit. To test them, you can {\f2 #include}  the entire {\f2 .cc}  file being tested in your {\f2 *_test.cc}  file. ({\f2 #include} ing {\f2 .cc}  files is not a good way to reuse code - you should not do this in production code!)\par
However, a better approach is to move the private code into the {\f2 foo::internal}  namespace, where {\f2 foo}  is the namespace your project normally uses, and put the private declarations in a {\f2 *-internal.h}  file. Your production {\f2 .cc}  files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Private Class Members} \par}
Private class members are only accessible from within the class or by friends. To access a class' private members, you can declare your test fixture as a friend to the class and define accessors in your fixture. Tests using the fixture can then access the private members of your production class via the accessors in the fixture. Note that even though your fixture is a friend to your production class, your tests are not automatically friends to it, as they are technically defined in sub-classes of the fixture.\par
Another way to test private members is to refactor them into an implementation class, which is then declared in a {\f2 *-internal.h}  file. Your clients aren't allowed to include this header but your tests can. Such is called the Pimpl (Private Implementation) idiom.\par
Or, you can declare an individual test as a friend of your class by adding this line in the class body:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid FRIEND_TEST(TestCaseName, TestName);\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
#include "gtest/gtest_prod.h"\par
\par
// Defines FRIEND_TEST.\par
class Foo \{\par
  ...\par
 private:\par
  FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\par
  int Bar(void* x);\par
\};\par
\par
// foo_test.cc\par
...\par
TEST(FooTest, BarReturnsZeroOnNull) \{\par
  Foo foo;\par
  EXPECT_EQ(0, foo.Bar(NULL));\par
  // Uses Foo's private member Bar().\par
\}\par
}
\par
Pay special attention when your class is defined in a namespace, as you should define your test fixtures and tests in the same namespace if you want them to be friends of your class. For example, if the code to be tested looks like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
\par
class Foo \{\par
  friend class FooTest;\par
  FRIEND_TEST(FooTest, Bar);\par
  FRIEND_TEST(FooTest, Baz);\par
  ...\par
  definition of the class Foo\par
  ...\par
\};\par
\par
\}  // namespace my_namespace\par
}
\par
Your test code should be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
\};\par
\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
\}  // namespace my_namespace\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Catching Failures} \par}
If you are building a testing utility on top of Google Test, you'll want to test your utility. What framework would you use to test it? Google Test, of course.\par
The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But Google Test doesn't use exceptions, so how do we test that a piece of code generates an expected failure?\par
{\f2 "gtest/gtest-spi.h"}  contains some constructs to do this. After {\f2 #include} ing this header, you can use\par
| {\f2 EXPECT_FATAL_FAILURE(} _statement, substring_{\f2 );}  | |:-----------------------------------------------\'97|\par
to assert that {\i statement}  generates a fatal (e.g. {\f2 ASSERT_*} ) failure whose message contains the given {\i substring} , or use\par
| {\f2 EXPECT_NONFATAL_FAILURE(} _statement, substring_{\f2 );}  | |:--------------------------------------------------\'97|\par
if you are expecting a non-fatal (e.g. {\f2 EXPECT_*} ) failure.\par
For technical reasons, there are some caveats:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot stream a failure message to either macro.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot reference local non-static variables or non-static members of {\f2 this}  object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot return a value.\par}
{\i Note:}  Google Test is designed with threads in mind. Once the synchronization primitives in {\f2 "gtest/internal/gtest-port.h"}  have been implemented, Google Test will become thread-safe, meaning that you can then use assertions in multiple threads concurrently. Before that, however, Google Test only supports single-threaded usage. Once thread-safe, {\f2 EXPECT_FATAL_FAILURE()}  and {\f2 EXPECT_NONFATAL_FAILURE()}  will capture failures in the current thread only. If {\i statement}  creates new threads, failures in these threads will be ignored. If you want to capture failures from all threads instead, you should use the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_FATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting the Current Test's Name} \par}
Sometimes a function may need to know the name of the currently running test. For example, you may be using the {\f2 SetUp()}  method of your test fixture to set the golden file name based on which test is running. The {\f2 {\b testing::TestInfo}}  class has this information:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
class TestInfo \{\par
 public:\par
  // Returns the test case name and the test name, respectively.\par
  //\par
  // Do NOT delete or free the return value - it's managed by the\par
  // TestInfo class.\par
  const char* test_case_name() const;\par
  const char* name() const;\par
\};\par
\par
\}  // namespace testing\par
}
\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid To obtain a {\f2 TestInfo}  object for the currently running test, call \par
}{\f2 current_test_info()}  on the {\f2 UnitTest}  singleton object:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Gets information about the currently running test.\par
// Do NOT delete the returned object - it's managed by the UnitTest class.\par
const ::testing::TestInfo* const test_info =\par
  ::testing::UnitTest::GetInstance()->current_test_info();\par
printf("We are in test %s of test case %s.\\n",\par
       test_info->name(), test_info->test_case_name());\par
}
\par
{\f2 current_test_info()}  returns a null pointer if no test is running. In particular, you cannot find the test case name in {\f2 TestCaseSetUp()} , {\f2 TestCaseTearDown()}  (where you know the test case name implicitly), or functions called from them.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google Test by Handling Test Events} \par}
Google Test provides an {\b event listener API}  to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test case, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.\par
{\i Availability:}  Linux, Windows, Mac; since v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Event Listeners} \par}
To define a event listener, you subclass either {\f2 testing::TestEventListener} or {\f2 testing::EmptyTestEventListener}. The former is an (abstract) interface, where {\i each pure virtual method\par
 can be overridden to handle a test event}  (For example, when a test starts, the {\f2 OnTestStart()}  method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.\par
When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 UnitTest} reflects the state of the entire test program,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestCase} has information about a test case, which can contain one or more tests,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestInfo} contains the state of a test, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestPartResult} represents the result of a test assertion.\par}
An event handler function can examine the argument it receives to find out interesting information about the event and the test program's state. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MinimalistPrinter : public ::testing::EmptyTestEventListener \{\par
  // Called before a test starts.\par
  virtual void OnTestStart(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s starting.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\par
  // Called after a failed assertion or a SUCCEED() invocation.\par
  virtual void OnTestPartResult(\par
      const ::testing::TestPartResult& test_part_result) \{\par
    printf("%s in %s:%d\\n%s\\n",\par
           test_part_result.failed() ? "*** Failure" : "Success",\par
           test_part_result.file_name(),\par
           test_part_result.line_number(),\par
           test_part_result.summary());\par
  \}\par
\par
  // Called after a test ends.\par
  virtual void OnTestEnd(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s ending.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Event Listeners} \par}
To use the event listener you have defined, add an instance of it to the Google Test event listener list (represented by class {\f2 TestEventListeners}{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
note the "s" at the end of the name) in your {\f2 main()}  function, before calling {\f2 RUN_ALL_TESTS()} : {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  // Gets hold of the event listener list.\par
  ::testing::TestEventListeners& listeners =\par
      ::testing::UnitTest::GetInstance()->listeners();\par
  // Adds a listener to the end.  Google Test takes the ownership.\par
  listeners.Append(new MinimalistPrinter);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par}
There's only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
delete listeners.Release(listeners.default_result_printer());\par
listeners.Append(new MinimalistPrinter);\par
return RUN_ALL_TESTS();\par
}
\par
Now, sit back and enjoy a completely different output from your tests. For more details, you can read this {\f2 sample}.\par
You may append more than one listener to the list. When an {\f2 On*Start()}  or {\f2 OnTestPartResult()}  event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An {\f2 On*End()}  event will be received by the listeners in the {\i reverse}  order. This allows output by listeners added later to be framed by output from listeners added earlier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating Failures in Listeners} \par}
You may use failure-raising macros ({\f2 EXPECT_*()} , {\f2 ASSERT_*()} , {\f2 FAIL()} , etc) when processing an event. There are some restrictions:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot generate any failure in {\f2 OnTestPartResult()}  (otherwise it will cause {\f2 OnTestPartResult()}  to be called recursively).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A listener that handles {\f2 OnTestPartResult()}  is not allowed to generate any failure.\par}
When you add listeners to the listener list, you should put listeners that handle {\f2 OnTestPartResult()}  {\i before}  listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.\par
We have a sample of failure-raising listener {\f2 here}.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Running Test Programs: Advanced Options} \par}
Google Test test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call {\f2 ::testing::InitGoogleTest()}  before calling {\f2 RUN_ALL_TESTS()} .\par
To see a list of supported flags and their usage, please run your test program with the {\f2 --help}  flag. You can also use {\f2 -h} , {\f2 -?} , or {\f2 /?}  for short. This feature is added in version 1.3.0.\par
If an option is specified both by an environment variable and by a flag, the latter takes precedence. Most of the options can also be set/read in code: to access the value of command line flag {\f2 --gtest_foo} , write {\f2 ::testing::GTEST_FLAG(foo)} . A common pattern is to set the value of a flag before calling {\f2 ::testing::InitGoogleTest()}  to change the default value of the flag: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // Disables elapsed time by default.\par
  ::testing::GTEST_FLAG(print_time) = false;\par
\par
  // This allows the user to override the flag on the command line.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Tests} \par}
This section shows various options for choosing which tests to run.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Listing Test Names} \par}
Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag {\f2 --gtest_list_tests}  overrides all other flags and lists tests in the following format: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TestCase1.\par
  TestName1\par
  TestName2\par
TestCase2.\par
  TestName\par
}
\par
None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running a Subset of the Tests} \par}
By default, a Google Test program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the {\f2 GTEST_FILTER}  environment variable or the {\f2 --gtest_filter}  flag to a filter string, Google Test will only run the tests whose full names (in the form of {\f2 TestCaseName.TestName} ) match the filter.\par
The format of a filter is a '{\f2 :} '-separated list of wildcard patterns (called the positive patterns) optionally followed by a '{\f2 -} ' and another '{\f2 :} '-separated pattern list (called the negative patterns). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.\par
A pattern may contain `'*'{\f2 (matches any string) or} '?'{\f2 (matches any single character). For convenience, the filter} '{\i -NegativePatterns'{\f2 can be also written as} '-NegativePatterns'`.} \par
{\i For example:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test}  Has no flag, and thus runs all its tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test --gtest_filter=*}  Also runs everything, due to the single match-everything `{\f2 value. *} ./foo_test \'96gtest_filter={\b FooTest}.*{\f2 Runs everything in test case} {\b FooTest}{\f2 . *} ./foo_test \'96gtest_filter=*Null*:{\i Constructor} {\f2 Runs any test whose full name contains either} "Null"{\f2 or} "Constructor"{\f2 . *} ./foo_test \'96gtest_filter=-*DeathTest.*{\f2 Runs all non-death tests. *} ./foo_test \'96gtest_filter={\b FooTest}.*-FooTest.Bar{\f2 Runs everything in test case} {\b FooTest}{\f2 except} FooTest.Bar`.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Disabling Tests} \par}
} \par
{\i } \par
{\i If you have a broken test that you cannot fix right away, you can add the {\f2 DISABLED_}  prefix to its name. This will exclude it from execution. This is better than commenting out the code or using {\f2 #if 0} , as disabled tests are still compiled (and thus won't rot).} \par
{\i If you need to disable all tests in a test case, you can either add {\f2 DISABLED_}  to the front of the name of each test, or alternatively add it to the front of the test case name.} \par
{\i For example, the following tests won't be run by Google Test, even though they will still be compiled:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests that Foo does Abc.\par
TEST(FooTest, DISABLED_DoesAbc) \{ ... \}\par
\par
class DISABLED_BarTest : public ::testing::Test \{ ... \};\par
\par
// Tests that Bar does Xyz.\par
TEST_F(DISABLED_BarTest, DoesXyz) \{ ... \}\par
}
} \par
{\i {\i Note:}  This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, Google Test will print a banner warning you if a test program contains any disabled tests.} \par
{\i {\i Tip:}  You can easily count the number of disabled tests you have using {\f2 grep} . This number can be used as a metric for improving your test quality.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Enabling Disabled Tests} \par}
} \par
{\i } \par
{\i To include {\f2 disabled tests} in test execution, just invoke the test program with the {\f2 --gtest_also_run_disabled_tests}  flag or set the {\f2 GTEST_ALSO_RUN_DISABLED_TESTS}  environment variable to a value other than {\f2 0} . You can combine this with the {\f2 \'96gtest_filter} flag to further select which disabled tests to run.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Repeating the Tests} \par}
} \par
{\i } \par
{\i Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.} \par
{\i The {\f2 --gtest_repeat}  flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here's how to use it:} \par
{\i \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000}  \cell }{Repeat foo_test 1000 times and don't stop at failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=-1}  \cell }{A negative count means repeating forever. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_break_on_failure}  \cell }{Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_filter=FooBar}  \cell }{Repeat the tests whose name matches the filter 1000 times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
If your test program contains global set-up/tear-down code registered using {\f2 AddGlobalTestEnvironment()} , it will be repeated in each iteration as well, as the flakiness may be in it. You can also specify the repeat count by setting the {\f2 GTEST_REPEAT}  environment variable.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Shuffling the Tests} \par}
} \par
{\i } \par
{\i You can specify the {\f2 --gtest_shuffle}  flag (or set the {\f2 GTEST_SHUFFLE}  environment variable to {\f2 1} ) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.} \par
{\i By default, Google Test uses a random seed calculated from the current time. Therefore you'll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the {\f2 --gtest_random_seed=SEED}  flag (or set the {\f2 GTEST_RANDOM_SEED}  environment variable), where {\f2 SEED}  is an integer between 0 and 99999. The seed value 0 is special: it tells Google Test to do the default behavior of calculating the seed from the current time.} \par
{\i If you combine this with {\f2 --gtest_repeat=N} , Google Test will pick a different random seed and re-shuffle the tests in each iteration.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.4.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling Test Output} \par}
} \par
{\i } \par
{\i This section teaches how to tweak the way test results are reported.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Colored Terminal Output} \par}
} \par
{\i } \par
{\i Google Test can use colors in its terminal output to make it easier to spot the separation between tests, and whether tests passed.} \par
{\i You can set the GTEST_COLOR environment variable or set the {\f2 --gtest_color}  command line flag to {\f2 yes} , {\f2 no} , or {\f2 auto}  (the default) to enable colors, disable colors, or let Google Test decide. When the value is {\f2 auto} , Google Test will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the {\f2 TERM}  environment variable is set to {\f2 xterm}  or {\f2 xterm-color} .} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Suppressing the Elapsed Time} \par}
} \par
{\i } \par
{\i By default, Google Test prints the time it takes to run each test. To suppress that, run the test program with the {\f2 --gtest_print_time=0}  command line flag. Setting the {\f2 GTEST_PRINT_TIME}  environment variable to {\f2 0}  has the same effect.} \par
{\i {\i Availability:}  Linux, Windows, Mac. (In Google Test 1.3.0 and lower, the default behavior is that the elapsed time is {\b not}  printed.)} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating an XML Report} \par}
} \par
{\i } \par
{\i Google Test can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.} \par
{\i To generate the XML report, set the {\f2 GTEST_OUTPUT}  environment variable or the {\f2 --gtest_output}  flag to the string {\f2 "xml:_path_to_output_file_"} , which will create the file at the given location. You can also just use the string {\f2 "xml"} , in which case the output can be found in the {\f2 test_detail.xml}  file in the current directory.} \par
{\i If you specify a directory (for example, {\f2 "xml:output/directory/"}  on Linux or {\f2 "xml:output\\directory\\"}  on Windows), Google Test will create the XML file in that directory, named after the test executable (e.g. {\f2 foo_test.xml}  for test program {\f2 foo_test}  or {\f2 foo_test.exe} ). If the file already exists (perhaps left over from a previous run), Google Test will pick a different name (e.g. {\f2 foo_test_1.xml} ) to avoid overwriting it.} \par
{\i The report uses the format described here. It is based on the {\f2 junitreport}  Ant task and can be parsed by popular continuous build systems like {\f2 Hudson}. Since that format was originally intended for Java, a little interpretation is required to make it apply to Google Test tests, as shown here:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <testsuites name="AllTests" ...>\par
  <testsuite name="test_case_name" ...>\par
    <testcase name="test_name" ...>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The root {\f2 <testsuites>}  element corresponds to the entire test program.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testsuite>}  elements correspond to Google Test test cases.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testcase>}  elements correspond to Google Test test functions.\par}
} \par
{\i For instance, the following program} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MathTest, Addition) \{ ... \}\par
TEST(MathTest, Subtraction) \{ ... \}\par
TEST(LogicTest, NonContradiction) \{ ... \}\par
}
} \par
{\i could generate this report:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <?xml version="1.0" encoding="UTF-8"?>\par
<testsuites tests="3" failures="1" errors="0" time="35" name="AllTests">\par
  <testsuite name="MathTest" tests="2" failures="1" errors="0" time="15">\par
    <testcase name="Addition" status="run" time="7" classname="">\par
      <failure message="Value of: add(1, 1)&#x0A; Actual: 3&#x0A;Expected: 2" type=""/>\par
      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>\par
    </testcase>\par
    <testcase name="Subtraction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
  <testsuite name="LogicTest" tests="1" failures="0" errors="0" time="5">\par
    <testcase name="NonContradiction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i Things to note:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 tests}  attribute of a {\f2 <testsuites>}  or {\f2 <testsuite>}  element tells how many test functions the Google Test program or test case contains, while the {\f2 failures}  attribute tells how many of them failed.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 time}  attribute expresses the duration of the test, test case, or entire test program in milliseconds.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Each {\f2 <failure>}  element corresponds to a single failed Google Test assertion.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Some JUnit concepts don't apply to Google Test, yet we have to conform to the DTD. Therefore you'll see some dummy elements and attributes in the report. You can safely ignore these parts.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Failures Are Reported} \par}
} \par
{\i } \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Turning Assertion Failures into Break-Points} \par}
} \par
{\i } \par
{\i When running test programs under a debugger, it's very convenient if the debugger can catch an assertion failure and automatically drop into interactive mode. Google Test's {\i break-on-failure}  mode supports this behavior.} \par
{\i To enable it, set the {\f2 GTEST_BREAK_ON_FAILURE}  environment variable to a value other than {\f2 0}  . Alternatively, you can use the {\f2 --gtest_break_on_failure}  command line flag.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Disabling Catching Test-Thrown Exceptions} \par}
} \par
{\i } \par
{\i Google Test can be used either with or without exceptions enabled. If a test throws a C++ exception or (on Windows) a structured exception (SEH), by default Google Test catches it, reports it as a test failure, and continues with the next test method. This maximizes the coverage of a test run. Also, on Windows an uncaught exception will cause a pop-up window, so catching the exceptions allows you to run the tests automatically.} \par
{\i When debugging the test failures, however, you may instead want the exceptions to be handled by the debugger, such that you can examine the call stack when an exception is thrown. To achieve that, set the {\f2 GTEST_CATCH_EXCEPTIONS}  environment variable to {\f2 0} , or use the {\f2 --gtest_catch_exceptions=0}  flag when running the tests.} \par
{\i {\b Availability} : Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Letting Another Testing Framework Drive} \par}
} \par
{\i } \par
{\i If you work on a project that has already been using another testing framework and is not ready to completely switch to Google Test yet, you can get much of Google Test's benefit by using its assertions in your existing tests. Just change your {\f2 main()}  function to look like:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gtest/gtest.h"\par
\par
int main(int argc, char** argv) \{\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  // Important: Google Test must be initialized.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  ... whatever your existing testing framework requires ...\par
\}\par
}
} \par
{\i With that, you can use Google Test assertions in addition to the native assertions your testing framework provides, for example:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooDoesBar() \{\par
  Foo foo;\par
  EXPECT_LE(foo.Bar(1), 100);     // A Google Test assertion.\par
  CPPUNIT_ASSERT(foo.IsEmpty());  // A native assertion.\par
\}\par
}
} \par
{\i If a Google Test assertion fails, it will print an error message and throw an exception, which will be treated as a failure by your host testing framework. If you compile your code with exceptions disabled, a failed Google Test assertion will instead exit your program with a non-zero code, which will also signal a test failure to your test runner.} \par
{\i If you don't write {\f2 ::testing::GTEST_FLAG(throw_on_failure) = true;}  in your {\f2 main()} , you can alternatively enable this feature by specifying the {\f2 --gtest_throw_on_failure}  flag on the command-line or setting the {\f2 GTEST_THROW_ON_FAILURE}  environment variable to a non-zero value.} \par
{\i Death tests are {\i not}  supported when other test framework is used to organize tests.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Distributing Test Functions to Multiple Machines} \par}
} \par
{\i } \par
{\i If you have more than one machine you can use to run a test program, you might want to run the test functions in parallel and get the result faster. We call this technique {\i sharding} , where each machine is called a {\i shard} .} \par
{\i Google Test is compatible with test sharding. To take advantage of this feature, your test runner (not part of Google Test) needs to do the following:} \par
{\i {
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allocate a number of machines (shards) to run the tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_TOTAL_SHARDS}  environment variable to the total number of shards. It must be the same for all shards.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_SHARD_INDEX}  environment variable to the index of the shard. Different shards must be assigned different indices, which must be in the range {\f2 [0, GTEST_TOTAL_SHARDS - 1]} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the same test program on all shards. When Google Test sees the above two environment variables, it will select a subset of the test functions to run. Across all shards, each test function in the program will be run exactly once.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for all shards to finish, then collect and report the results.\par}
} \par
{\i Your project may have tests that were written without Google Test and thus don't understand this protocol. In order for your test runner to figure out which test supports sharding, it can set the environment variable {\f2 GTEST_SHARD_STATUS_FILE}  to a non-existent file path. If a test program supports sharding, it will create this file to acknowledge the fact (the actual contents of the file are not important at this time; although we may stick some useful information in it in the future.); otherwise it will not create it.} \par
{\i Here's an example to make it clear. Suppose you have a test program {\f2 foo_test}  that contains the following 5 test functions: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(A, V)\par
TEST(A, W)\par
TEST(B, X)\par
TEST(B, Y)\par
TEST(B, Z)\par
}
 and you have 3 machines at your disposal. To run the test functions in parallel, you would set {\f2 GTEST_TOTAL_SHARDS}  to 3 on all machines, and set {\f2 GTEST_SHARD_INDEX}  to 0, 1, and 2 on the machines respectively. Then you would run the same {\f2 foo_test}  on each machine.} \par
{\i Google Test reserves the right to change how the work is distributed across the shards, but here's one possible scenario:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #0 runs {\f2 A.V}  and {\f2 B.X} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #1 runs {\f2 A.W}  and {\f2 B.Y} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #2 runs {\f2 B.Z} .\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Fusing Google Test Source Files} \par}
} \par
{\i } \par
{\i Google Test's implementation consists of ~30 files (excluding its own tests). Sometimes you may want them to be packaged up in two files (a {\f2 .h}  and a {\f2 .cc} ) instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gtest_files.py}  in the {\f2 scripts/}  directory (since release 1.3.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gtest_files.py OUTPUT_DIR\par
}
} \par
{\i and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}}  and {\f2 gtest/gtest-all.cc}  in it. These files contain everything you need to use Google Test. Just copy them to anywhere you want and you are ready to write tests. You can use the {\f2 scripts/test/Makefile} file as an example on how to compile your tests against them.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
} \par
{\i } \par
{\i Congratulations! You've now learned more advanced Google Test tools and are ready to tackle more complex testing tasks. If you want to dive even deeper, you can read the Frequently-Asked Questions. } \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
DevGuide{\tc \v DevGuide}\par \pard\plain 
{\bkmkstart AAAAAAAENN}
{\bkmkend AAAAAAAENN}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you are interested in understanding the internals of Google Test, building from source, or contributing ideas or modifications to the project, then this document is for you.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Introduction} \par}
First, let's give you some background of the project.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Licensing} \par}
All Google Test source and pre-built packages are provided under the {\f2 New BSD License}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Google Test Community} \par}
The Google Test community exists primarily through the {\f2 discussion group} and the GitHub repository. You are definitely encouraged to contribute to the discussion and you can also help us to keep the effectiveness of the group high by following and promoting the guidelines listed here.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Please Be Friendly} \par}
Showing courtesy and respect to others is a vital part of the Google culture, and we strongly encourage everyone participating in Google Test development to join us in accepting nothing less. Of course, being courteous is not the same as failing to constructively disagree with each other, but it does mean that we should be respectful of each other when enumerating the 42 technical reasons that a particular proposal may not be the best choice. There's never a reason to be antagonistic or dismissive toward anyone who is sincerely trying to contribute to a discussion.\par
Sure, C++ testing is serious business and all that, but it's also a lot of fun. Let's keep it that way. Let's strive to be one of the friendliest communities in all of open source.\par
As always, discuss Google Test in the official GoogleTest discussion group. You don't have to actually submit code in order to sign up. Your participation itself is a valuable contribution.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Working with the Code} \par}
If you want to get your hands dirty with the code inside Google Test, this is the section for you.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Compiling from Source} \par}
Once you check out the code, you can find instructions on how to compile it in the ../README.md "README" file.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing} \par}
A testing framework is of no good if itself is not thoroughly tested. Tests should be written for any new code, and changes should be verified to not break existing tests before they are submitted for review. To perform the tests, follow the instructions in ../README.md "README" and verify that there are no failures.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Contributing Code} \par}
We are excited that Google Test is now open source, and hope to get great patches from the community. Before you fire up your favorite IDE and begin hammering away at that new feature, though, please take the time to read this section and understand the process. While it seems rigorous, we want to keep a high standard of quality in the code base.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Contributor License Agreements} \par}
You must sign a Contributor License Agreement (CLA) before we can accept any code. The CLA protects you and us.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you are an individual writing original source code and you're sure you own the intellectual property, then you'll need to sign an {\f2 individual CLA}.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you work for a company that wants to allow you to contribute your work to Google Test, then you'll need to sign a {\f2 corporate CLA}.\par}
Follow either of the two links above to access the appropriate CLA and instructions for how to sign and return it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Coding Style} \par}
To keep the source consistent, readable, diffable and easy to merge, we use a fairly rigid coding style, as defined by the {\f2 google-styleguide} project. All patches will be expected to conform to the style outlined {\f2 here}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Updating Generated Code} \par}
Some of Google Test's source files are generated by the Pump tool (a Python script). If you need to update such files, please modify the source ({\f2 foo.h.pump} ) and re-generate the C++ file using Pump. You can read the PumpManual for details.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Submitting Patches} \par}
Please do submit code. Here's what you need to do:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A submission should be a set of changes that addresses one issue in the {\f2 issue tracker}. Please don't mix more than one logical change per submittal, because it makes the history hard to follow. If you want to make a change that doesn't have a corresponding issue in the issue tracker, please create one.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Also, coordinate with team members that are listed on the issue in question. This ensures that work isn't being duplicated and communicating your plan early also generally leads to better patches.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Ensure that your code adheres to the Google Test source code style.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Ensure that there are unit tests for your code.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Sign a Contributor License Agreement.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a Pull Request in the usual way.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google Test Committers} \par}
The current members of the Google Test engineering team are the only committers at present. In the great tradition of eating one's own dogfood, we will be requiring each new Google Test engineering team member to earn the right to become a committer by following the procedures in this document, writing consistently great code, and demonstrating repeatedly that he or she truly gets the zen of Google Test.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Release Process} \par}
We follow a typical release process:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A release branch named {\f2 release-X.Y}  is created.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Bugs are fixed and features are added in trunk; those individual patches are merged into the release branch until it's stable.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab An individual point release (the {\f2 Z}  in {\f2 X.Y.Z} ) is made by creating a tag from the branch.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeat steps 2 and 3 throughout one release cycle (as determined by features or time).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Go back to step 1 to create another release branch and so on. {\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\par}
This page is based on the {\f2 Making GWT Better} guide from the {\f2 Google Web Toolkit} project. Except as otherwise {\f2 noted}, the content of this page is licensed under the {\f2 Creative Commons Attribution 2.5 License}. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Documentation{\tc \v Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAENO}
{\bkmkend AAAAAAAENO}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all documentation wiki pages for Google Test **(the SVN trunk version)** \'96 {\b if you use a released version of Google Test, please read the documentation for that specific version instead.} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Primer \'96 start here if you are new to Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Samples \'96 learn from examples.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
AdvancedGuide \'96 learn more about Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
XcodeGuide \'96 how to use Google Test in Xcode on Mac.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Frequently-Asked Questions \'96 check here before asking a question on the mailing list.\par}
To contribute code to Google Test, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
PumpManual \'96 how we generate some of Google Test's source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
FAQ{\tc \v FAQ}\par \pard\plain 
{\bkmkstart AAAAAAAENP}
{\bkmkend AAAAAAAENP}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you cannot find the answer to your question here, and you have read Primer and AdvancedGuide, send it to {\f2 googletestframework@googlegroups.com}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I use Google Test instead of my favorite C++ testing framework?} \par}
First, let us say clearly that we don't want to get into the debate of which C++ testing framework is {\b the best} . There exist many fine frameworks for writing C++ tests, and we have tremendous respect for the developers and users of them. We don't think there is (or will be) a single best framework - you have to pick the right tool for the particular task you are tackling.\par
We created Google Test because we couldn't find the right combination of features and conveniences in an existing framework to satisfy {\i our}  needs. The following is a list of things that {\i we}  like about Google Test. We don't claim them to be unique to Google Test - rather, the combination of them makes Google Test the choice for us. We hope this list can help you decide whether it is for you too.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test is designed to be portable: it doesn't require exceptions or RTTI; it works around various bugs in various compilers and environments; etc. As a result, it works on Linux, Mac OS X, Windows and several embedded operating systems.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Nonfatal assertions ({\f2 EXPECT_*} ) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. {\f2 ASSERT_EQ(5, Foo(i)) << " where i = " << i;} . It doesn't require a new set of macros or special functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 SCOPED_TRACE}  helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can decide which tests to run using name patterns. This saves time when you want to quickly reproduce a test failure.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test can generate XML test result reports that can be parsed by popular continuous build system like Hudson.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Simple things are easy in Google Test, while hard things are possible: in addition to advanced features like {\f2 global test environments} and tests parameterized by {\f2 values} or {\f2 types}, Google Test supports various ways for the user to extend the framework \'96 if Google Test doesn't do something out of the box, chances are that a user can implement the feature using Google Test's public API, without changing Google Test itself. In particular, you can:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
expand your testing vocabulary by defining {\f2 custom predicates},\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
teach Google Test how to {\f2 print your types},\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
define your own testing macros or utilities and verify them using Google Test's {\f2 Service Provider Interface}, and\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
reflect on the test cases or change the test output format by intercepting the {\f2 test events}.\par}
\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I'm getting warnings when compiling Google Test. Would you fix them?} \par}
We strive to minimize compiler warnings Google Test generates. Before releasing a new version, we test to make sure that it doesn't generate warnings when compiled using its CMake script on Windows, Linux, and Mac OS.\par
Unfortunately, this doesn't mean you are guaranteed to see no warnings when compiling Google Test in your environment:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You may be using a different compiler as we use, or a different version of the same compiler. We cannot possibly test for all compilers.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You may be compiling on a different platform as we do.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your project may be using different compiler flags as we do.\par}
It is not always possible to make Google Test warning-free for everyone. Or, it may not be desirable if the warning is rarely enabled and fixing the violations makes the code more complex.\par
If you see warnings when compiling Google Test, we suggest that you use the {\f2 -isystem}  flag (assuming your are using GCC) to mark Google Test headers as system headers. That'll suppress warnings from Google Test headers.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should not test case names and test names contain underscore?} \par}
Underscore ({\f2 _} ) is special, as C++ reserves the following to be used by the compiler and the standard library:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab any identifier that starts with an {\f2 _}  followed by an upper-case letter, and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab any identifier that containers two consecutive underscores (i.e. {\f2 __} ) {\i anywhere}  in its name.\par}
User code is {\i prohibited}  from using such identifiers.\par
Now let's look at what this means for {\f2 TEST}  and {\f2 TEST_F} .\par
Currently {\f2 TEST(TestCaseName, TestName)}  generates a class named {\f2 TestCaseName_TestName_Test} . What happens if {\f2 TestCaseName}  or {\f2 TestName}  contains {\f2 _} ?\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestCaseName}  starts with an {\f2 _}  followed by an upper-case letter (say, {\f2 _Foo} ), we end up with {\f2 _Foo_TestName_Test} , which is reserved and thus invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestCaseName}  ends with an {\f2 _}  (say, {\f2 Foo_} ), we get {\f2 Foo__TestName_Test} , which is invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestName}  starts with an {\f2 _}  (say, {\f2 _Bar} ), we get {\f2 TestCaseName__Bar_Test} , which is invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestName}  ends with an {\f2 _}  (say, {\f2 Bar_} ), we get {\f2 TestCaseName_Bar__Test} , which is invalid.\par}
So clearly {\f2 TestCaseName}  and {\f2 TestName}  cannot start or end with {\f2 _}  (Actually, {\f2 TestCaseName}  can start with {\f2 _}  \'96 as long as the {\f2 _}  isn't followed by an upper-case letter. But that's getting complicated. So for simplicity we just say that it cannot start with {\f2 _} .).\par
It may seem fine for {\f2 TestCaseName}  and {\f2 TestName}  to contain {\f2 _}  in the middle. However, consider this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(Time, Flies_Like_An_Arrow) \{ ... \}\par
TEST(Time_Flies, Like_An_Arrow) \{ ... \}\par
}
\par
Now, the two {\f2 TEST} s will both generate the same class ({\f2 Time_Files_Like_An_Arrow_Test} ). That's not good.\par
So for simplicity, we just ask the users to avoid {\f2 _}  in {\f2 TestCaseName}  and {\f2 TestName} . The rule is more constraining than necessary, but it's simple and easy to remember. It also gives Google Test some wiggle room in case its implementation needs to change in the future.\par
If you violate the rule, there may not be immediately consequences, but your test may (just may) break with a new compiler (or a new version of the compiler you are using) or with a new version of Google Test. Therefore it's best to follow the rule.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why is it not recommended to install a pre-compiled copy of Google Test (for example, into /usr/local)?} \par}
In the early days, we said that you could install compiled Google Test libraries on {\f2 *} nix systems using {\f2 make install} . Then every user of your machine can write tests without recompiling Google Test.\par
This seemed like a good idea, but it has a got-cha: every user needs to compile his tests using the {\i same}  compiler flags used to compile the installed Google Test libraries; otherwise he may run into undefined behaviors (i.e. the tests can behave strangely and may even crash for no obvious reasons).\par
Why? Because C++ has this thing called the One-Definition Rule: if two C++ source files contain different definitions of the same class/function/variable, and you link them together, you violate the rule. The linker may or may not catch the error (in many cases it's not required by the C++ standard to catch the violation). If it doesn't, you get strange run-time behaviors that are unexpected and hard to debug.\par
If you compile Google Test and your test code using different compiler flags, they may see different definitions of the same class/function/variable (e.g. due to the use of {\f2 #if}  in Google Test). Therefore, for your sanity, we recommend to avoid installing pre-compiled Google Test libraries. Instead, each project should compile Google Test itself such that it can be sure that the same flags are used for both Google Test and the tests.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I generate 64-bit binaries on Windows (using Visual Studio 2008)?} \par}
(Answered by Trevor Robinson)\par
Load the supplied Visual Studio solution file, either {\f2 msvc\\gtest-md.sln}  or {\f2 msvc\\gtest.sln} . Go through the migration wizard to migrate the solution and project files to Visual Studio 2008. Select {\f2 Configuration Manager...}  from the {\f2 Build}  menu. Select {\f2 <New...>}  from the {\f2 Active solution platform}  dropdown. Select {\f2 x64}  from the new platform dropdown, leave {\f2 Copy settings from}  set to {\f2 Win32}  and {\f2 Create new project platforms}  checked, then click {\f2 OK} . You now have {\f2 Win32}  and {\f2 x64}  platform configurations, selectable from the {\f2 Standard}  toolbar, which allow you to toggle between building 32-bit or 64-bit binaries (or both at once using Batch Build).\par
In order to prevent build output files from overwriting one another, you'll need to change the {\f2 Intermediate Directory}  settings for the newly created platform configuration across all the projects. To do this, multi-select (e.g. using shift-click) all projects (but not the solution) in the {\f2 Solution Explorer} . Right-click one of them and select {\f2 Properties} . In the left pane, select {\f2 Configuration Properties} , and from the {\f2 Configuration}  dropdown, select {\f2 All Configurations} . Make sure the selected platform is {\f2 x64} . For the {\f2 Intermediate Directory}  setting, change the value from {\f2 \\}  to {\f2 \\} . Click {\f2 OK}  and then build the solution. When the build is complete, the 64-bit binaries will be in the {\f2 msvc\\x64\\Debug}  directory.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I use Google Test on MinGW?} \par}
We haven't tested this ourselves, but Per Abrahamsen reported that he was able to compile and install Google Test successfully when using MinGW from Cygwin. You'll need to configure it with:\par
{\f2 PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"} \par
You should be able to replace the {\f2 -mno-cygwin}  option with direct links to the real MinGW binaries, but we haven't tried that.\par
Caveats:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There are many warnings when compiling.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 make check}  will produce some errors as not all tests for Google Test itself are compatible with MinGW.\par}
We also have reports on successful cross compilation of Google Test MinGW binaries on Linux using {\f2 these instructions} on the WxWidgets site.\par
Please contact {\f2 googletestframework@googlegroups.com}  if you are interested in improving the support for MinGW.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test support EXPECT_EQ(NULL, ptr) and ASSERT_EQ(NULL, ptr) but not EXPECT_NE(NULL, ptr) and ASSERT_NE(NULL, ptr)?} \par}
Due to some peculiarity of C++, it requires some non-trivial template meta programming tricks to support using {\f2 NULL}  as an argument of the {\f2 EXPECT_XX()}  and {\f2 ASSERT_XX()}  macros. Therefore we only do it where it's most needed (otherwise we make the implementation of Google Test harder to maintain and more error-prone than necessary).\par
The {\f2 EXPECT_EQ()}  macro takes the {\i expected}  value as its first argument and the {\i actual}  value as the second. It's reasonable that someone wants to write {\f2 EXPECT_EQ(NULL, some_expression)} , and this indeed was requested several times. Therefore we implemented it.\par
The need for {\f2 EXPECT_NE(NULL, ptr)}  isn't nearly as strong. When the assertion fails, you already know that {\f2 ptr}  must be {\f2 NULL} , so it doesn't add any information to print ptr in this case. That means {\f2 EXPECT_TRUE(ptr != NULL)}  works just as well.\par
If we were to support {\f2 EXPECT_NE(NULL, ptr)} , for consistency we'll have to support {\f2 EXPECT_NE(ptr, NULL)}  as well, as unlike {\f2 EXPECT_EQ} , we don't have a convention on the order of the two arguments for {\f2 EXPECT_NE} . This means using the template meta programming tricks twice in the implementation, making it even harder to understand and maintain. We believe the benefit doesn't justify the cost.\par
Finally, with the growth of Google {\b Mock}'s {\f2 matcher} library, we are encouraging people to use the unified {\f2 EXPECT_THAT(value, matcher)}  syntax more often in tests. One significant advantage of the matcher approach is that matchers can be easily combined to form new matchers, while the {\f2 EXPECT_NE} , etc, macros cannot be easily combined. Therefore we want to invest more in the matchers than in the {\f2 EXPECT_XX()}  macros.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Does Google Test support running tests in parallel?} \par}
Test runners tend to be tightly coupled with the build/test environment, and Google Test doesn't try to solve the problem of running tests in parallel. Instead, we tried to make Google Test work nicely with test runners. For example, Google Test's XML report contains the time spent on each test, and its {\f2 gtest_list_tests}  and {\f2 gtest_filter}  flags can be used for splitting the execution of test methods into multiple processes. These functionalities can help the test runner run the tests in parallel.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't Google Test run the tests in different threads to speed things up?} \par}
It's difficult to write thread-safe code. Most tests are not written with thread-safety in mind, and thus may not work correctly in a multi-threaded setting.\par
If you think about it, it's already hard to make your code work when you know what other threads are doing. It's much harder, and sometimes even impossible, to make your code work when you don't know what other threads are doing (remember that test methods can be added, deleted, or modified after your test was written). If you want to run the tests in parallel, you'd better run them in different processes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why aren't Google Test assertions implemented using exceptions?} \par}
Our original motivation was to be able to use Google Test in projects that disable exceptions. Later we realized some additional benefits of this approach:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Throwing in a destructor is undefined behavior in C++. Not using exceptions means Google Test's assertions are safe to use in destructors.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 EXPECT_*}  family of macros will continue even after a failure, allowing multiple failures in a {\f2 TEST}  to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If assertions are implemented using exceptions, a test may falsely ignore a failure if it's caught by user code: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid try \{ ... ASSERT_TRUE(...) ... \}\par
catch (...) \{ ... \}\par
}
 The above code will pass even if the {\f2 ASSERT_TRUE}  throws. While it's unlikely for someone to write this in a test, it's possible to run into this pattern when you write assertions in callbacks that are called by the code under test.\par}
The downside of not using exceptions is that {\f2 ASSERT_*}  (implemented using {\f2 return} ) will only abort the current function, not the current {\f2 TEST} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why do we use two different macros for tests with and without fixtures?} \par}
Unfortunately, C++'s macro system doesn't allow us to use the same macro for both cases. One possibility is to provide only one macro for tests with fixtures, and require the user to define an empty fixture sometimes:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\};\par
\par
TEST_F(FooTest, DoesThis) \{ ... \}\par
}
 or {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Test FooTest;\par
\par
TEST_F(FooTest, DoesThat) \{ ... \}\par
}
\par
Yet, many people think this is one line too many. :-) Our goal was to make it really easy to write tests, so we tried to make simple tests trivial to create. That means using a separate macro for such tests.\par
We think neither approach is ideal, yet either of them is reasonable. In the end, it probably doesn't matter much either way.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't we use structs as test fixtures?} \par}
We like to use structs only when representing passive data. This distinction between structs and classes is good for documenting the intent of the code's author. Since test fixtures have logic like {\f2 SetUp()}  and {\f2 TearDown()} , they are better defined as classes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why are death tests implemented as assertions instead of using a test runner?} \par}
Our goal was to make death tests as convenient for a user as C++ possibly allows. In particular:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect. The death test would be written in C++, while the runner spec may or may not be. A user needs to carefully keep the two in sync. {\f2 ASSERT_DEATH(statement, expected_message)}  specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can be mixed with other assertions and other logic at your will. You are not limited to one death test per test method. For example, you can write something like: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (FooCondition()) \{\par
  ASSERT_DEATH(Bar(), "blah");\par
\} else \{\par
  ASSERT_EQ(5, Bar());\par
\}\par
}
 If you prefer one death test per test method, you can write your tests in that style too, but we don't want to impose that on the users. The fewer artificial limitations the better.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can reference local variables in the current function, and you can decide how many death tests you want based on run-time information. For example, {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int count = GetCount();  // Only known at run time.\par
for (int i = 1; i <= count; i++) \{\par
  ASSERT_DEATH(\{\par
    double* buffer = new double[i];\par
    ... initializes buffer ...\par
    Foo(buffer, i)\par
  \}, "blah blah");\par
\}\par
}
 The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.\par}
Another interesting thing about {\f2 ASSERT_DEATH}  is that it calls {\f2 fork()}  to create a child process to run the death test. This is lightening fast, as {\f2 fork()}  uses copy-on-write pages and incurs almost zero overhead, and the child process starts from the user-supplied statement directly, skipping all global and local initialization and any code leading to the given statement. If you launch the child process from scratch, it can take seconds just to load everything and start running if the test links to many libraries dynamically.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test modifies some state, but the change seems lost after the death test finishes. Why?} \par}
Death tests ({\f2 EXPECT_DEATH} , etc) are executed in a sub-process s.t. the expected crash won't kill the test program (i.e. the parent process). As a result, any in-memory side effects they incur are observable in their respective sub-processes, but not in the parent process. You can think of them as running in a parallel universe, more or less.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "undefined references" to some static const member variables, but I did define them in the class body. What's wrong?} \par}
If your class has a static data member:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
  static const int kBar = 100;\par
\};\par
}
\par
You also need to define it {\i outside}  of the class body in {\f2 foo.cc} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int Foo::kBar;  // No initializer here.\par
}
\par
Otherwise your code is **invalid C++**, and may break in unexpected ways. In particular, using it in Google Test comparison assertions ({\f2 EXPECT_EQ} , etc) will generate an "undefined reference" linker error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have an interface that has several implementations. Can I write a set of tests once and repeat them over all the implementations?} \par}
Google Test doesn't yet have good support for this kind of tests, or data-driven tests in general. We hope to be able to make improvements in this area soon.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I derive a test fixture from another?} \par}
Yes.\par
Each test fixture has a corresponding and same named test case. This means only one test case can use a particular fixture. Sometimes, however, multiple test cases may want to use the same or slightly different fixtures. For example, you may want to make sure that all of a GUI library's test cases don't leak important system resources like fonts and brushes.\par
In Google Test, you share a fixture among test cases by putting the shared logic in a base test fixture, then deriving from that base a separate fixture for each test case that wants to use this common logic. You then use {\f2 {\b TEST_F()}}  to write tests using each derived fixture.\par
Typically, your code looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Defines a base test fixture.\par
class BaseTest : public ::testing::Test \{\par
  protected:\par
   ...\par
\};\par
\par
// Derives a fixture FooTest from BaseTest.\par
class FooTest : public BaseTest \{\par
  protected:\par
    virtual void SetUp() \{\par
      BaseTest::SetUp();  // Sets up the base fixture first.\par
      ... additional set-up work ...\par
    \}\par
    virtual void TearDown() \{\par
      ... clean-up work for FooTest ...\par
      BaseTest::TearDown();  // Remember to tear down the base fixture\par
                             // after cleaning up FooTest!\par
    \}\par
    ... functions and variables for FooTest ...\par
\};\par
\par
// Tests that use the fixture FooTest.\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
... additional fixtures derived from BaseTest ...\par
}
\par
If necessary, you can continue to derive test fixtures from a derived fixture. Google Test has no limit on how deep the hierarchy can be.\par
For a complete example using derived test fixtures, see {\f2 sample5}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains "void value not ignored as it ought to be." What does this mean?} \par}
You're probably using an {\f2 ASSERT_*()}  in a function that doesn't return {\f2 void} . {\f2 ASSERT_*()}  can only be used in {\f2 void}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test hangs (or seg-faults). How do I fix it?} \par}
In Google Test, death tests are run in a child process and the way they work is delicate. To write death tests you really need to understand how they work. Please make sure you have read this.\par
In particular, death tests don't like having multiple threads in the parent process. So the first thing you can try is to eliminate creating threads outside of {\f2 EXPECT_DEATH()} .\par
Sometimes this is impossible as some library you must use may be creating threads before {\f2 main()}  is even reached. In this case, you can try to minimize the chance of conflicts by either moving as many activities as possible inside {\f2 EXPECT_DEATH()}  (in the extreme case, you want to move everything inside), or leaving as few things as possible in it. Also, you can try to set the death test style to {\f2 "threadsafe"} , which is safer but slower, and see if it helps.\par
If you go with thread-safe death tests, remember that they rerun the test program from the beginning in the child process. Therefore make sure your program can run side-by-side with itself and is deterministic.\par
In the end, this boils down to good concurrent programming. You have to make sure that there is no race conditions or dead locks in your program. No silver bullet - sorry!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Should I use the constructor/destructor of the test fixture or the set-up/tear-down function?} \par}
The first thing to remember is that Google Test does not reuse the same test fixture object across multiple tests. For each {\f2 TEST_F} , Google Test will create a fresh test fixture object, {\i immediately}  call {\f2 SetUp()} , run the test body, call {\f2 TearDown()} , and then {\i immediately}  delete the test fixture object.\par
When you need to write per-test set-up and tear-down logic, you have the choice between using the test fixture constructor/destructor or {\f2 SetUp()/TearDown()} . The former is usually preferred, as it has the following benefits:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
By initializing a member variable in the constructor, we have the option to make it {\f2 const} , which helps prevent accidental changes to its value and makes the tests more obviously correct.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In case we need to subclass the test fixture class, the subclass' constructor is guaranteed to call the base class' constructor first, and the subclass' destructor is guaranteed to call the base class' destructor afterward. With {\f2 SetUp()/TearDown()} , a subclass may make the mistake of forgetting to call the base class' {\f2 SetUp()/TearDown()}  or call them at the wrong moment.\par}
You may still want to use {\f2 SetUp()/TearDown()}  in the following rare cases:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the tear-down operation could throw an exception, you must use {\f2 TearDown()}  as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer {\f2 TearDown()}  if you want to write portable tests that work with or without exceptions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The assertion macros throw an exception when flag {\f2 --gtest_throw_on_failure}  is specified. Therefore, you shouldn't use Google Test assertions in a destructor if you plan to run your tests with this flag.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use {\f2 SetUp()/TearDown()} .\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains "no matching function to call" when I use ASSERT_PREDn. How do I fix it?} \par}
If the predicate function you use in {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*}  is overloaded or a template, the compiler will have trouble figuring out which overloaded version it should use. {\f2 ASSERT_PRED_FORMAT*}  and {\f2 EXPECT_PRED_FORMAT*}  don't have this problem.\par
If you see this error, you might want to switch to {\f2 (ASSERT|EXPECT)_PRED_FORMAT*} , which will also give you a better failure message. If, however, that is not an option, you can resolve the problem by explicitly telling the compiler which version to pick.\par
For example, suppose you have\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsPositive(int n) \{\par
  return n > 0;\par
\}\par
bool IsPositive(double x) \{\par
  return x > 0;\par
\}\par
}
\par
you will get a compiler error if you write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(IsPositive, 5);\par
}
\par
However, this will work:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(*static_cast<bool (*)(int)>*(IsPositive), 5);\par
}
\par
(The stuff inside the angled brackets for the {\f2 static_cast}  operator is the type of the function pointer for the {\f2 int} -version of {\f2 IsPositive()} .)\par
As another example, when you have a template function\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
bool IsNegative(T x) \{\par
  return x < 0;\par
\}\par
}
\par
you can use it in a predicate assertion like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED1(IsNegative*<int>*, -5);\par
}
\par
Things are more interesting if your template has more than one parameters. The following won't compile:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*GreaterThan<int, int>*, 5, 0);\par
}
\par
as the C++ pre-processor thinks you are giving {\f2 ASSERT_PRED2}  4 arguments, which is one more than expected. The workaround is to wrap the predicate function in parentheses:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*(GreaterThan<int, int>)*, 5, 0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains about "ignoring return value" when I call RUN_ALL_TESTS(). Why?} \par}
Some people had been ignoring the return value of {\f2 RUN_ALL_TESTS()} . That is, instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid return RUN_ALL_TESTS();\par
}
\par
they write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid RUN_ALL_TESTS();\par
}
\par
This is wrong and dangerous. A test runner needs to see the return value of {\f2 RUN_ALL_TESTS()}  in order to determine if a test has passed. If your {\f2 main()}  function ignores it, your test will be considered successful even if it has a Google Test assertion failure. Very bad.\par
To help the users avoid this dangerous bug, the implementation of {\f2 RUN_ALL_TESTS()}  causes gcc to raise this warning, when the return value is ignored. If you see this warning, the fix is simple: just make sure its value is used as the return value of {\f2 main()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains that a constructor (or destructor) cannot return a value. What's going on?} \par}
Due to a peculiarity of C++, in order to support the syntax for streaming messages to an {\f2 ASSERT_*} , e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(1, Foo()) << "blah blah" << foo;\par
}
\par
we had to give up using {\f2 ASSERT*}  and {\f2 FAIL*}  (but not {\f2 EXPECT*}  and {\f2 ADD_FAILURE*} ) in constructors and destructors. The workaround is to move the content of your constructor/destructor to a private void member function, or switch to {\f2 EXPECT_*()}  if that works. This section in the user's guide explains it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My set-up function is not called. Why?} \par}
C++ is case-sensitive. It should be spelled as {\f2 SetUp()} . Did you spell it as {\f2 Setup()} ?\par
Similarly, sometimes people spell {\f2 SetUpTestCase()}  as {\f2 SetupTestCase()}  and wonder why it's never called.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I jump to the line of a failure in Emacs directly?} \par}
Google Test's failure message format is understood by Emacs and many other IDEs, like acme and XCode. If a Google Test message is in a compilation buffer in Emacs, then it's clickable. You can now hit {\f2 enter}  on a message to jump to the corresponding source code, or use {\f2 C-x} ` to jump to the next failure.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have several test cases which share the same test fixture logic, do I have to define a new test fixture class for each of them? This seems pretty tedious.} \par}
You don't have to. Instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public BaseTest \{\};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
class BarTest : public BaseTest \{\};\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
you can simply {\f2 typedef}  the test fixtures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef BaseTest FooTest;\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef BaseTest BarTest;\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Google Test output is buried in a whole bunch of log messages. What do I do?} \par}
The Google Test output is meant to be a concise and human-friendly report. If your test generates textual output itself, it will mix with the Google Test output, making it hard to read. However, there is an easy solution to this problem.\par
Since most log messages go to stderr, we decided to let Google Test output go to stdout. This way, you can easily separate the two using redirection. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ./my_test > googletest_output.txt\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I prefer test fixtures over global variables?} \par}
There are several good reasons:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It's likely your test needs to change the states of its global variables. This makes it difficult to keep side effects from escaping one test and contaminating others, making debugging difficult. By using fixtures, each test has a fresh set of variables that's different (but with the same names). Thus, tests are kept independent of each other.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Global variables pollute the global namespace.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test fixtures can be reused via subclassing, which cannot be done easily with global variables. This is useful if many test cases have something in common.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class members without writing FRIEND_TEST()s?} \par}
You should try to write testable code, which means classes should be easily tested from their public interface. One way to achieve this is the Pimpl idiom: you move all private members of a class into a helper class, and make all members of the helper class public.\par
You have several other options that don't require using {\f2 FRIEND_TEST} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Write the tests as members of the fixture class: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  void Test1() \{...\} // This accesses private members of class Foo.\par
  void Test2() \{...\} // So does this one.\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  Test1();\par
\}\par
\par
TEST_F(FooTest, Test2) \{\par
  Test2();\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In the fixture class, write accessors for the tested class' private members, then use the accessors in your tests: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  T1 get_private_member1(Foo* obj) \{\par
    return obj->private_member1_;\par
  \}\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  ...\par
  get_private_member1(x)\par
  ...\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the methods are declared {\b protected} , you can change their access level in a test-only subclass: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class YourClass \{\par
  ...\par
 protected: // protected access for testability.\par
  int DoSomethingReturningInt();\par
  ...\par
\};\par
\par
// in the your_class_test.cc file:\par
class TestableYourClass : public YourClass \{\par
  ...\par
 public: using YourClass::DoSomethingReturningInt; // changes access rights\par
  ...\par
\};\par
\par
TEST_F(YourClassTest, DoSomethingTest) \{\par
  TestableYourClass obj;\par
  assertEquals(expected_value, obj.DoSomethingReturningInt());\par
\}\par
}
\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class static members without writing FRIEND_TEST()s?} \par}
We find private static methods clutter the header file. They are implementation details and ideally should be kept out of a .h. So often I make them free functions instead.\par
Instead of: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
 private:\par
  static bool Func(int n);\par
\};\par
\par
// foo.cc\par
bool Foo::Func(int n) \{ ... \}\par
\par
// foo_test.cc\par
EXPECT_TRUE(Foo::Func(12345));\par
}
\par
You probably should better write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
\};\par
\par
// foo.cc\par
namespace internal \{\par
  bool Func(int n) \{ ... \}\par
\}\par
\par
// foo_test.cc\par
namespace internal \{\par
  bool Func(int n);\par
\}\par
\par
EXPECT_TRUE(internal::Func(12345));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I would like to run a test several times with different parameters. Do I need to write several similar copies of it?} \par}
No. You can use a feature called {\f2 value-parameterized tests} which lets you repeat your tests with different parameters, without defining it more than once.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test a file that defines main()?} \par}
To test a {\f2 foo.cc}  file, you need to compile and link it into your unit test program. However, when the file contains a definition for the {\f2 main()}  function, it will clash with the {\f2 main()}  of your unit test, and will result in a build error.\par
The right solution is to split it into three files:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.h}  which contains the declarations,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.cc}  which contains the definitions except {\f2 main()} , and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo_main.cc}  which contains nothing but the definition of {\f2 main()} .\par}
Then {\f2 foo.cc}  can be easily tested.\par
If you are adding tests to an existing file and don't want an intrusive change like this, there is a hack: just include the entire {\f2 foo.cc}  file in your unit test. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File foo_unittest.cc\par
\par
// The headers section\par
...\par
\par
// Renames main() in foo.cc to make room for the unit test main()\par
#define main FooMain\par
\par
#include "a/b/foo.cc"\par
\par
// The tests start here.\par
...\par
}
\par
However, please remember this is a hack and should only be used as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What can the statement argument in ASSERT_DEATH() be?} \par}
{\f2 ASSERT_DEATH(_statement_, _regex_)}  (or any death assertion macro) can be used wherever {\f2 _statement_}  is valid. So basically {\f2 _statement_}  can be any C++ statement that makes sense in the current context. In particular, it can reference global and/or local variables, and can be:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a simple function call (often the case),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a complex expression, or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a compound statement.\par}
Some examples are shown here:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A death test can be a simple function call.\par
TEST(MyDeathTest, FunctionCall) \{\par
  ASSERT_DEATH(Xyz(5), "Xyz failed");\par
\}\par
\par
// Or a complex expression that references variables and functions.\par
TEST(MyDeathTest, ComplexExpression) \{\par
  const bool c = Condition();\par
  ASSERT_DEATH((c ? Func1(0) : object2.Method("test")),\par
               "(Func1|Method) failed");\par
\}\par
\par
// Death assertions can be used any where in a function. In\par
// particular, they can be inside a loop.\par
TEST(MyDeathTest, InsideLoop) \{\par
  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\par
  for (int i = 0; i < 5; i++) \{\par
    EXPECT_DEATH_M(Foo(i), "Foo has \\\\d+ errors",\par
                   ::testing::Message() << "where i is " << i);\par
  \}\par
\}\par
\par
// A death assertion can contain a compound statement.\par
TEST(MyDeathTest, CompoundStatement) \{\par
  // Verifies that at lease one of Bar(0), Bar(1), ..., and\par
  // Bar(4) dies.\par
  ASSERT_DEATH(\{\par
    for (int i = 0; i < 5; i++) \{\par
      Bar(i);\par
    \}\par
  \},\par
  "Bar has \\\\d+ errors");\}\par
}
\par
{\f2 googletest_unittest.cc}  contains more examples if you are interested.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What syntax does the regular expression in ASSERT_DEATH use?} \par}
On POSIX systems, Google Test uses the POSIX Extended regular expression syntax ({\f2 http://en.wikipedia.org/wiki/Regular_expression#POSIX_Extended_Regular_Expressions}). On Windows, it uses a limited variant of regular expression syntax. For more details, see the {\f2 regular expression syntax}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a fixture class Foo, but TEST_F(Foo, Bar) gives me error "no matching function for call to Foo::Foo()". Why?} \par}
Google Test needs to be able to create objects of your test fixture class, so it must have a default constructor. Normally the compiler will define one for you. However, there are cases where you have to define your own:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you explicitly declare a non-default constructor for class {\f2 Foo} , then you need to define a default constructor, even if it would be empty.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Foo}  has a const non-static data member, then you have to define the default constructor {\i and}  initialize the const member in the initializer list of the constructor. (Early versions of {\f2 gcc}  doesn't force you to initialize the const member. It's a bug that has been fixed in {\f2 gcc 4} .)\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does ASSERT_DEATH complain about previous threads that were already joined?} \par}
With the Linux pthread library, there is no turning back once you cross the line from single thread to multiple threads. The first time you create a thread, a manager thread is created in addition, so you get 3, not 2, threads. Later when the thread you create joins the main thread, the thread count decrements by 1, but the manager thread will never be killed, so you still have 2 threads, which means you cannot safely run a death test.\par
The new NPTL thread library doesn't suffer from this problem, as it doesn't create a manager thread. However, if you don't control which machine your test runs on, you shouldn't depend on this.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test require the entire test case, instead of individual tests, to be named FOODeathTest when it uses ASSERT_DEATH?} \par}
Google Test does not interleave tests from different test cases. That is, it runs all tests in one test case first, and then runs all tests in the next test case, and so on. Google Test does this because it needs to set up a test case before the first test in it is run, and tear it down afterwords. Splitting up the test case would require multiple set-up and tear-down processes, which is inefficient and makes the semantics unclean.\par
If we were to determine the order of tests based on test name instead of test case name, then we would have a problem with the following situation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(FooTest, AbcDeathTest) \{ ... \}\par
TEST_F(FooTest, Uvw) \{ ... \}\par
\par
TEST_F(BarTest, DefDeathTest) \{ ... \}\par
TEST_F(BarTest, Xyz) \{ ... \}\par
}
\par
Since {\f2 FooTest.AbcDeathTest}  needs to run before {\f2 BarTest.Xyz} , and we don't interleave tests from different test cases, we need to run all tests in the {\f2 {\b FooTest}}  case before running any test in the {\f2 BarTest}  case. This contradicts with the requirement to run {\f2 BarTest.DefDeathTest}  before {\f2 FooTest.Uvw} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do?} \par}
You don't have to, but if you like, you may split up the test case into {\f2 {\b FooTest}}  and {\f2 FooDeathTest} , where the names make it clear that they are related:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooDeathTest, Uvw) \{ ... EXPECT_DEATH(...) ... \}\par
TEST_F(FooDeathTest, Xyz) \{ ... ASSERT_DEATH(...) ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "no match for 'operator<<'" when I use an assertion. What gives?} \par}
If you use a user-defined type {\f2 FooType}  in an assertion, you must make sure there is an {\f2 std::ostream& operator<<(std::ostream&, const FooType&)}  function defined such that we can print a value of {\f2 FooType} .\par
In addition, if {\f2 FooType}  is declared in a name space, the {\f2 <<}  operator also needs to be defined in the {\i same}  name space.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I suppress the memory leak messages on Windows?} \par}
Since the statically initialized Google Test singleton requires allocations on the heap, the Visual C++ memory leak detector will report memory leaks at the end of the program run. The easiest way to avoid this is to use the {\f2 _CrtMemCheckpoint}  and {\f2 _CrtMemDumpAllObjectsSince}  calls to not report any statically initialized heap objects. See MSDN for more details and additional heap check/debug routines.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I am building my project with Google Test in Visual Studio and all I'm getting is a bunch of linker errors (or warnings). Help!} \par}
You may get a number of the following linker error or warnings if you attempt to link your test project with the Google Test library when your project and the are not built using the same compiler settings.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK2005: symbol already defined in object\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4217: locally defined symbol 'symbol' imported in function 'function'\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4049: locally defined symbol 'symbol' imported\par}
The Google Test project (gtest.vcproj) has the Runtime Library option set to /MT (use multi-threaded static libraries, /MTd for debug). If your project uses something else, for example /MD (use multi-threaded DLLs, /MDd for debug), you need to change the setting in the Google Test project to match your project's.\par
To update this setting open the project properties in the Visual Studio IDE then select the branch Configuration Properties | C/C++ | Code Generation and change the option "Runtime Library". You may also try using gtest-md.vcproj instead of gtest.vcproj.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I put my tests in a library and Google Test doesn't run them. What's happening?} \par}
Have you read a {\f2 warning} on the Google Test Primer page?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to use Google Test with Visual Studio but don't know where to start.} \par}
Many people are in your position and one of the posted his solution to our mailing list.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I am seeing compile errors mentioning std::type_traits when I try to use Google Test on Solaris.} \par}
Google Test uses parts of the standard C++ library that SunStudio does not support. Our users reported success using alternative implementations. Try running the build after runing this commad:\par
`export CC=cc CXX=CC CXXFLAGS='-library=stlport4'`\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can my code detect if it is running in a test?} \par}
If you write code that sniffs whether it's running in a test and does different things accordingly, you are leaking test-only logic into production code and there is no easy way to ensure that the test-only code paths aren't run by mistake in production. Such cleverness also leads to {\f2 Heisenbugs}. Therefore we strongly advise against the practice, and Google Test doesn't provide a way to do it.\par
In general, the recommended way to cause the code to behave differently under test is {\f2 dependency injection}. You can inject different functionality from the test and from the production code. Since your production code doesn't link in the for-test logic at all, there is no danger in accidentally running it.\par
However, if you {\i really} , {\i really} , {\i really}  have no choice, and if you follow the rule of ending your test program names with {\f2 _test} , you can use the {\i horrible}  hack of sniffing your executable name ({\f2 argv[0]}  in {\f2 main()} ) to know whether the code is under test.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google Test defines a macro that clashes with one defined by another library. How do I deal with that?} \par}
In C++, macros don't obey namespaces. Therefore two libraries that both define a macro of the same name will clash if you {\f2 #include}  both definitions. In case a Google Test macro clashes with another library, you can force Google Test to rename its macro to avoid the conflict.\par
Specifically, if both Google Test and some other code define macro {\f2 FOO} , you can add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_DONT_DEFINE_FOO=1\par
}
 to the compiler flags to tell Google Test to change the macro's name from {\f2 FOO}  to {\f2 GTEST_FOO} . For example, with {\f2 -DGTEST_DONT_DEFINE_TEST=1} , you'll need to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid GTEST_TEST(SomeTest, DoesThis) \{ ... \}\par
}
 instead of {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(SomeTest, DoesThis) \{ ... \}\par
}
 in order to define a test.\par
Currently, the following {\f2 TEST} , {\f2 FAIL} , {\f2 SUCCEED} , and the basic comparison assertion macros can have alternative names. You can see the full list of covered macros {\f2 here}. More information can be found in the "Avoiding Macro Name Clashes" section of the README file.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Is it OK if I have two separate {\f2 TEST(Foo, Bar)}  test methods defined in different namespaces?} \par}
Yes.\par
The rule is {\b all test methods in the same test case must use the same fixture class} . This means that the following is {\b allowed}  because both tests use the same fixture class ({\f2 {\b testing::Test}} ).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace foo \{\par
TEST(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
\par
namespace bar \{\par
TEST(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
}
\par
However, the following code is {\b not allowed}  and will produce a runtime error from Google Test because the test methods are using different test fixture classes with the same test case name.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace foo \{\par
class CoolTest : public ::testing::Test \{\};  // Fixture foo::CoolTest\par
TEST_F(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
\par
namespace bar \{\par
class CoolTest : public ::testing::Test \{\};  // Fixture: bar::CoolTest\par
TEST_F(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I build Google Testing Framework with Xcode 4?} \par}
If you try to build Google Test's Xcode project with Xcode 4.0 or later, you may encounter an error message that looks like "Missing SDK in target gtest\\_framework: /Developer/SDKs/MacOSX10.4u.sdk". That means that Xcode does not support the SDK the project is targeting. See the Xcode section in the ../README.md "README" file on how to resolve this.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not covered in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other {\f2 wiki pages},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googletestframework@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the commit hash if you check out from Git directly) of Google Test you use (Google Test is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Introduction: Why Google C++ Testing Framework?{\tc \v Introduction: Why Google C++ Testing Framework?}\par \pard\plain 
{\bkmkstart AAAAAAAENQ}
{\bkmkend AAAAAAAENQ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\i Google C++ Testing Framework}  helps you write better C++ tests.\par
No matter whether you work on Linux, Windows, or a Mac, if you write C++ code, Google Test can help you.\par
So what makes a good test, and how does Google C++ Testing Framework fit in? We believe:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i independent}  and {\i repeatable} . It's a pain to debug a test that succeeds or fails as a result of other tests. Google C++ Testing Framework isolates the tests by running each of them on a different object. When a test fails, Google C++ Testing Framework allows you to run it in isolation for quick debugging.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be well {\i organized}  and reflect the structure of the tested code. Google C++ Testing Framework groups related tests into test cases that can share data and subroutines. This common pattern is easy to recognize and makes tests easy to maintain. Such consistency is especially helpful when people switch projects and start to work on a new code base.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i portable}  and {\i reusable} . The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral. Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations. (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When tests fail, they should provide as much {\i information}  about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The testing framework should liberate test writers from housekeeping chores and let them focus on the test {\i content} . Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i fast} . With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\par}
Since Google C++ Testing Framework is based on the popular xUnit architecture, you'll feel right at home if you've used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let's go!\par
{\i Note:}  We sometimes refer to Google C++ Testing Framework informally as {\i Google Test} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting up a New Test Project} \par}
To write a test program using Google Test, you need to compile Google Test into a library and link your test with it. We provide build files for some popular build systems: {\f2 msvc/}  for Visual Studio, {\f2 xcode/}  for Mac Xcode, {\f2 make/}  for GNU make, {\f2 codegear/}  for Borland C++ Builder, and the autotools script (deprecated) and {\f2 CMakeLists.txt}  for CMake (recommended) in the Google Test root directory. If your build system is not on this list, you can take a look at {\f2 make/Makefile}  to learn how Google Test should be compiled (basically you want to compile {\f2 src/gtest-all.cc}  with {\f2 GTEST_ROOT}  and {\f2 GTEST_ROOT/include}  in the header search path, where {\f2 GTEST_ROOT}  is the Google Test root directory).\par
Once you are able to compile the Google Test library, you should create a project or build target for your test program. Make sure you have {\f2 GTEST_ROOT/include}  in the header search path so that the compiler can find {\f2 "gtest/gtest.h"}  when compiling your test. Set up your test project to link with the Google Test library (for example, in Visual Studio, this is done by adding a dependency on {\f2 gtest.vcproj} ).\par
If you still have questions, take a look at how Google Test's own tests are built and use them as examples.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Basic Concepts} \par}
When using Google Test, you start by writing {\i assertions} , which are statements that check whether a condition is true. An assertion's result can be {\i success} , {\i nonfatal failure} , or {\i fatal failure} . If a fatal failure occurs, it aborts the current function; otherwise the program continues normally.\par
{\i Tests}  use assertions to verify the tested code's behavior. If a test crashes or has a failed assertion, then it {\i fails} ; otherwise it {\i succeeds} .\par
A {\i test case}  contains one or many tests. You should group your tests into test cases that reflect the structure of the tested code. When multiple tests in a test case need to share common objects and subroutines, you can put them into a {\i test fixture}  class.\par
A {\i test program}  can contain multiple test cases.\par
We'll now explain how to write a test program, starting at the individual assertion level and building up to tests and test cases.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Assertions} \par}
Google Test assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, Google Test prints the assertion's source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to Google Test's message.\par
The assertions come in pairs that test the same thing but have different effects on the current function. {\f2 ASSERT_*}  versions generate fatal failures when they fail, and {\b abort the current function} . {\f2 EXPECT_*}  versions generate nonfatal failures, which don't abort the current function. Usually {\f2 EXPECT_*}  are preferred, as they allow more than one failures to be reported in a test. However, you should use {\f2 ASSERT_*}  if it doesn't make sense to continue when the assertion in question fails.\par
Since a failed {\f2 ASSERT_*}  returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors.\par
To provide a custom failure message, simply stream it into the macro using the {\f2 <<}  operator, or a sequence of such operators. An example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";\par
\par
for (int i = 0; i < x.size(); ++i) \{\par
  EXPECT_EQ(x[i], y[i]) << "Vectors x and y differ at index " << i;\par
\}\par
}
\par
Anything that can be streamed to an {\f2 ostream}  can be streamed to an assertion macro\'96in particular, C strings and {\f2 string}  objects. If a wide string ({\f2 wchar_t*} , {\f2 TCHAR*}  in {\f2 UNICODE}  mode on Windows, or {\f2 std::wstring} ) is streamed to an assertion, it will be translated to UTF-8 when printed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Basic Assertions} \par}
These assertions do basic true/false condition testing.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_TRUE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_TRUE(} _condition_{\f2 )} ; \cell }{{\i condition}  is true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FALSE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_FALSE(} _condition_{\f2 )} ; \cell }{{\i condition}  is false \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Remember, when they fail, {\f2 ASSERT_*}  yields a fatal failure and returns from the current function, while {\f2 EXPECT_*}  yields a nonfatal failure, allowing the function to continue running. In either case, an assertion failure means its containing test fails.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Binary Comparison} \par}
This section describes assertions that compare two values.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EQ(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\f2 EXPECT_EQ(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\i val1}  {\f2 ==}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NE(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\f2 EXPECT_NE(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\i val1}  {\f2 !=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LT(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\f2 EXPECT_LT(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\i val1}  {\f2 <}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LE(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\f2 EXPECT_LE(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\i val1}  {\f2 <=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GT(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\f2 EXPECT_GT(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\i val1}  {\f2 >}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GE(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\f2 EXPECT_GE(} _val1_{\f2 ,} _val2_{\f2 );} \cell }{{\i val1}  {\f2 >=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the event of a failure, Google Test prints both {\i val1}  and {\i val2} .\par
Value arguments must be comparable by the assertion's comparison operator or you'll get a compiler error. We used to require the arguments to support the {\f2 <<}  operator for streaming to an {\f2 ostream} , but it's no longer necessary since v1.6.0 (if {\f2 <<}  is supported, it will be called to print the arguments when the assertion fails; otherwise Google Test will attempt to print them in the best way it can. For more details and how to customize the printing of the arguments, see this Google {\b Mock} {\f2 recipe}.).\par
These assertions can work with a user-defined type, but only if you define the corresponding comparison operator (e.g. {\f2 ==} , {\f2 <} , etc). If the corresponding operator is defined, prefer using the {\f2 ASSERT_*()}  macros because they will print out not only the result of the comparison, but the two operands as well.\par
Arguments are always evaluated exactly once. Therefore, it's OK for the arguments to have side effects. However, as with any ordinary C/C++ function, the arguments' evaluation order is undefined (i.e. the compiler is free to choose any order) and your code should not depend on any particular argument evaluation order.\par
{\f2 ASSERT_EQ()}  does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Therefore, if you want to compare C strings (e.g. {\f2 const char*} ) by value, use {\f2 ASSERT_STREQ()}  , which will be described later on. In particular, to assert that a C string is {\f2 NULL} , use {\f2 ASSERT_STREQ(NULL, c_string)}  . However, to compare two {\f2 string}  objects, you should use {\f2 ASSERT_EQ} .\par
Macros in this section work with both narrow and wide string objects ({\f2 string}  and {\f2 wstring} ).\par
{\i Availability} : Linux, Windows, Mac.\par
{\i Historical note} : Before February 2016 {\f2 *_EQ}  had a convention of calling it as {\f2 ASSERT_EQ(expected, actual)} , so lots of existing code uses this order. Now {\f2 *_EQ}  treats both parameters in the same way.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Comparison} \par}
The assertions in this group compare two {\b C strings} . If you want to compare two {\f2 string}  objects, use {\f2 EXPECT_EQ} , {\f2 EXPECT_NE} , and etc instead.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STREQ(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{{\f2 EXPECT_STREQ(} _str1_{\f2 ,} _str_2{\f2 );}  \cell }{the two C strings have the same content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{{\f2 EXPECT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASEEQ(} _str1_{\f2 ,} _str2_{\f2 );} \cell }{{\f2 EXPECT_STRCASEEQ(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have the same content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );} \cell }{{\f2 EXPECT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that "CASE" in an assertion name means that case is ignored.\par
{\f2 *STREQ*}  and {\f2 *STRNE*}  also accept wide C strings ({\f2 wchar_t*} ). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings.\par
A {\f2 NULL}  pointer and an empty string are considered {\i different} .\par
{\i Availability} : Linux, Windows, Mac.\par
See also: For more string comparison tricks (substring, prefix, suffix, and regular expression matching, for example), see the Advanced Google Test Guide.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Simple Tests} \par}
To create a test:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use the {\f2 TEST()}  macro to define and name a test function, These are ordinary C++ functions that don't return a value.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In this function, along with any valid C++ statements you want to include, use the various Google Test assertions to check values.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.\par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
{\f2 TEST()}  arguments go from general to specific. The {\i first}  argument is the name of the test case, and the {\i second}  argument is the test's name within the test case. Both names must be valid C++ identifiers, and they should not contain underscore ({\f2 _} ). A test's {\i full name}  consists of its containing test case and its individual name. Tests from different test cases can have the same individual name.\par
For example, let's take a simple integer function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int Factorial(int n); // Returns the factorial of n\par
}
\par
A test case for this function might look like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests factorial of 0.\par
TEST(FactorialTest, HandlesZeroInput) \{\par
  EXPECT_EQ(1, Factorial(0));\par
\}\par
\par
// Tests factorial of positive numbers.\par
TEST(FactorialTest, HandlesPositiveInput) \{\par
  EXPECT_EQ(1, Factorial(1));\par
  EXPECT_EQ(2, Factorial(2));\par
  EXPECT_EQ(6, Factorial(3));\par
  EXPECT_EQ(40320, Factorial(8));\par
\}\par
}
\par
Google Test groups the test results by test cases, so logically-related tests should be in the same test case; in other words, the first argument to their {\f2 TEST()}  should be the same. In the above example, we have two tests, {\f2 HandlesZeroInput}  and {\f2 HandlesPositiveInput} , that belong to the same test case {\f2 FactorialTest} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Test Fixtures: Using the Same Data Configuration for Multiple Tests} \par}
If you find yourself writing two or more tests that operate on similar data, you can use a {\i test fixture} . It allows you to reuse the same configuration of objects for several different tests.\par
To create a fixture, just:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class from {\f2 {\b testing::Test}}  . Start its body with {\f2 protected:}  or {\f2 public:}  as we'll want to access fixture members from sub-classes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Inside the class, declare any objects you plan to use.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a default constructor or {\f2 SetUp()}  function to prepare the objects for each test. A common mistake is to spell {\f2 SetUp()}  as {\f2 Setup()}  with a small {\f2 u}  - don't let that happen to you.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a destructor or {\f2 TearDown()}  function to release any resources you allocated in {\f2 SetUp()}  . To learn when you should use the constructor/destructor and when you should use {\f2 SetUp()/TearDown()} , read this {\f2 FAQ entry}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If needed, define subroutines for your tests to share.\par}
When using a fixture, use {\f2 {\b TEST_F()}}  instead of {\f2 TEST()}  as it allows you to access objects and subroutines in the test fixture: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
Like {\f2 TEST()} , the first argument is the test case name, but for {\f2 {\b TEST_F()}}  this must be the name of the test fixture class. You've probably guessed: {\f2 _F}  is for fixture.\par
Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error.\par
Also, you must first define a test fixture class before using it in a {\f2 {\b TEST_F()}} , or you'll get the compiler error "`virtual outside class
declaration`".\par
For each test defined with {\f2 {\b TEST_F()}} , Google Test will:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a {\i fresh}  test fixture at runtime\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Immediately initialize it via {\f2 SetUp()}  ,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the test\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Clean up by calling {\f2 TearDown()} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Delete the test fixture. Note that different tests in the same test case have different test fixture objects, and Google Test always deletes a test fixture before it creates the next one. Google Test does not reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.\par}
As an example, let's write tests for a FIFO queue class named {\f2 {\b Queue}} , which has the following interface: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename E> // E is the element type.\par
class Queue \{\par
 public:\par
  Queue();\par
  void Enqueue(const E& element);\par
  E* Dequeue(); // Returns NULL if the queue is empty.\par
  size_t size() const;\par
  ...\par
\};\par
}
\par
First, define a fixture class. By convention, you should give it the name {\f2 {\b FooTest}}  where {\f2 Foo}  is the class being tested. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class QueueTest : public ::testing::Test \{\par
 protected:\par
  virtual void SetUp() \{\par
    q1_.Enqueue(1);\par
    q2_.Enqueue(2);\par
    q2_.Enqueue(3);\par
  \}\par
\par
  // virtual void TearDown() \{\}\par
\par
  Queue<int> q0_;\par
  Queue<int> q1_;\par
  Queue<int> q2_;\par
\};\par
}
\par
In this case, {\f2 TearDown()}  is not needed since we don't have to clean up after each test, other than what's already done by the destructor.\par
Now we'll write tests using {\f2 {\b TEST_F()}}  and this fixture. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(QueueTest, IsEmptyInitially) \{\par
  EXPECT_EQ(0, q0_.size());\par
\}\par
\par
TEST_F(QueueTest, DequeueWorks) \{\par
  int* n = q0_.Dequeue();\par
  EXPECT_EQ(NULL, n);\par
\par
  n = q1_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(1, *n);\par
  EXPECT_EQ(0, q1_.size());\par
  delete n;\par
\par
  n = q2_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(2, *n);\par
  EXPECT_EQ(1, q2_.size());\par
  delete n;\par
\}\par
}
\par
The above uses both {\f2 ASSERT_*}  and {\f2 EXPECT_*}  assertions. The rule of thumb is to use {\f2 EXPECT_*}  when you want the test to continue to reveal more errors after the assertion failure, and use {\f2 ASSERT_*}  when continuing after failure doesn't make sense. For example, the second assertion in the {\f2 Dequeue}  test is {\f2 ASSERT_TRUE(n != NULL)} , as we need to dereference the pointer {\f2 n}  later, which would lead to a segfault when {\f2 n}  is {\f2 NULL} .\par
When these tests run, the following happens:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google Test constructs a {\f2 {\b QueueTest}}  object (let's call it {\f2 t1}  ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.SetUp()}  initializes {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The first test ( {\f2 IsEmptyInitially}  ) runs on {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.TearDown()}  cleans up after the test finishes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1}  is destructed.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The above steps are repeated on another {\f2 {\b QueueTest}}  object, this time running the {\f2 DequeueWorks}  test.\par}
{\i Availability} : Linux, Windows, Mac.\par
{\i Note} : Google Test automatically saves all {\i Google Test}  flags when a test object is constructed, and restores them when it is destructed.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Invoking the Tests} \par}
{\f2 TEST()}  and {\f2 {\b TEST_F()}}  implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.\par
After defining your tests, you can run them with {\f2 RUN_ALL_TESTS()}  , which returns {\f2 0}  if all the tests are successful, or {\f2 1}  otherwise. Note that {\f2 RUN_ALL_TESTS()}  runs {\i all tests}  in your link unit \'96 they can be from different test cases, or even different source files.\par
When invoked, the {\f2 RUN_ALL_TESTS()}  macro:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Saves the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Creates a test fixture object for the first test.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Initializes it via {\f2 SetUp()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Runs the test on the fixture object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Cleans up the fixture via {\f2 TearDown()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Deletes the fixture.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Restores the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeats the above steps for the next test, until all tests have run.\par}
In addition, if the text fixture's constructor generates a fatal failure in step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly, if step 3 generates a fatal failure, step 4 will be skipped.\par
{\i Important} : You must not ignore the return value of {\f2 RUN_ALL_TESTS()} , or {\f2 gcc}  will give you a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your {\f2 main()}  function must return the value of {\f2 RUN_ALL_TESTS()} .\par
Also, you should call {\f2 RUN_ALL_TESTS()}  only {\b once} . Calling it more than once conflicts with some advanced Google Test features (e.g. thread-safe death tests) and thus is not supported.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the main() Function} \par}
You can start from this boilerplate: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "this/package/foo.h"\par
#include "gtest/gtest.h"\par
\par
namespace \{\par
\par
// The fixture for testing class Foo.\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  // You can remove any or all of the following functions if its body\par
  // is empty.\par
\par
  FooTest() \{\par
    // You can do set-up work for each test here.\par
  \}\par
\par
  virtual ~FooTest() \{\par
    // You can do clean-up work that doesn't throw exceptions here.\par
  \}\par
\par
  // If the constructor and destructor are not enough for setting up\par
  // and cleaning up each test, you can define the following methods:\par
\par
  virtual void SetUp() \{\par
    // Code here will be called immediately after the constructor (right\par
    // before each test).\par
  \}\par
\par
  virtual void TearDown() \{\par
    // Code here will be called immediately after each test (right\par
    // before the destructor).\par
  \}\par
\par
  // Objects declared here can be used by all tests in the test case for Foo.\par
\};\par
\par
// Tests that the Foo::Bar() method does Abc.\par
TEST_F(FooTest, MethodBarDoesAbc) \{\par
  const string input_filepath = "this/package/testdata/myinputfile.dat";\par
  const string output_filepath = "this/package/testdata/myoutputfile.dat";\par
  Foo f;\par
  EXPECT_EQ(0, f.Bar(input_filepath, output_filepath));\par
\}\par
\par
// Tests that Foo does Xyz.\par
TEST_F(FooTest, DoesXyz) \{\par
  // Exercises the Xyz feature of Foo.\par
\}\par
\par
\}  // namespace\par
\par
int main(int argc, char **argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
The {\f2 ::testing::InitGoogleTest()}  function parses the command line for Google Test flags, and removes all recognized flags. This allows the user to control a test program's behavior via various flags, which we'll cover in AdvancedGuide. You must call this function before calling {\f2 RUN_ALL_TESTS()} , or the flags won't be properly initialized.\par
On Windows, {\f2 InitGoogleTest()}  also works with wide strings, so it can be used in programs compiled in {\f2 UNICODE}  mode as well.\par
But maybe you think that writing all those main() functions is too much work? We agree with you completely and that's why Google Test provides a basic implementation of main(). If it fits your needs, then just link your test with gtest_main library and you are good to go.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Important note for Visual C++ users} \par}
If you put your tests into a library and your {\f2 main()}  function is in a different library or in your .exe file, those tests will not run. The reason is a {\f2 bug} in Visual C++. When you define your tests, Google Test creates certain static objects to register them. These objects are not referenced from elsewhere but their constructors are still supposed to run. When Visual C++ linker sees that nothing in the library is referenced from other places it throws the library out. You have to reference your library with tests from your main program to keep the linker from discarding it. Here is how to do it. Somewhere in your library code declare a function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid __declspec(dllexport) int PullInMyLibrary() \{ return 0; \}\par
}
 If you put your tests in a static library (not DLL) then {\f2 __declspec(dllexport)}  is not required. Now, in your main program, write a code that invokes that function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int PullInMyLibrary();\par
static int dummy = PullInMyLibrary();\par
}
 This will keep your tests referenced and will make them register themselves at startup.\par
In addition, if you define your tests in a static library, add {\f2 /OPT:NOREF}  to your main program linker options. If you use MSVC++ IDE, go to your .exe project properties/Configuration Properties/Linker/Optimization and set References setting to {\f2 Keep Unreferenced Data (/OPT:NOREF)} . This will keep Visual C++ linker from discarding individual symbols generated by your tests from the final executable.\par
There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you {\i must}  change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
Congratulations! You've learned the Google Test basics. You can start writing and running Google Test tests, read some samples, or continue with AdvancedGuide, which describes many more useful Google Test features.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Known Limitations} \par}
Google Test is designed to be thread-safe. The implementation is thread-safe on systems where the {\f2 pthreads}  library is available. It is currently {\i unsafe}  to use Google Test assertions from two threads concurrently on other systems (e.g. Windows). In most tests this is not an issue as usually the assertions are done in the main thread. If you want to help, you can volunteer to implement the necessary synchronization primitives in {\f2 gtest-port.h}  for your platform. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
PumpManual{\tc \v PumpManual}\par \pard\plain 
{\bkmkstart AAAAAAAENR}
{\bkmkend AAAAAAAENR}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b P} ump is {\b U} seful for {\b M} eta {\b P} rogramming.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 The Problem} \par}
Template and macro libraries often need to define many classes, functions, or macros that vary only (or almost only) in the number of arguments they take. It's a lot of repetitive, mechanical, and error-prone work.\par
Variadic templates and variadic macros can alleviate the problem. However, while both are being considered by the C++ committee, neither is in the standard yet or widely supported by compilers. Thus they are often not a good choice, especially when your code needs to be portable. And their capabilities are still limited.\par
As a result, authors of such libraries often have to write scripts to generate their implementation. However, our experience is that it's tedious to write such scripts, which tend to reflect the structure of the generated code poorly and are often hard to read and edit. For example, a small change needed in the generated code may require some non-intuitive, non-trivial changes in the script. This is especially painful when experimenting with the code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Our Solution} \par}
Pump (for Pump is Useful for Meta Programming, Pretty Useful for Meta Programming, or Practical Utility for Meta Programming, whichever you prefer) is a simple meta-programming tool for C++. The idea is that a programmer writes a {\f2 foo.pump}  file which contains C++ code plus meta code that manipulates the C++ code. The meta code can handle iterations over a range, nested iterations, local meta variable definitions, simple arithmetic, and conditional expressions. You can view it as a small Domain-Specific Language. The meta language is designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode, for example) and concise, making Pump code intuitive and easy to maintain.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Highlights} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The implementation is in a single Python script and thus ultra portable: no build or installation is needed and it works cross platforms.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pump tries to be smart with respect to {\f2 Google's style guide}: it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format is human-readable and more concise than XML.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format works relatively well with Emacs' C++ mode.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Examples} \par}
The following Pump code (where meta keywords start with {\f2 $} , {\f2 [[}  and {\f2 ]]}  are meta brackets, and {\f2 $$}  starts a meta comment that ends with the line):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $var n = 3     $$ Defines a meta variable n.\par
$range i 0..n  $$ Declares the range of meta iterator i (inclusive).\par
$for i [[\par
               $$ Meta loop.\par
// Foo$i does blah for $i-ary predicates.\par
$range j 1..i\par
template <size_t N $for j [[, typename A$j]]>\par
class Foo$i \{\par
$if i == 0 [[\par
  blah a;\par
]] $elif i <= 2 [[\par
  blah b;\par
]] $else [[\par
  blah c;\par
]]\par
\};\par
\par
]]\par
}
\par
will be translated by the Pump compiler to:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Foo0 does blah for 0-ary predicates.\par
template <size_t N>\par
class Foo0 \{\par
  blah a;\par
\};\par
\par
// Foo1 does blah for 1-ary predicates.\par
template <size_t N, typename A1>\par
class Foo1 \{\par
  blah b;\par
\};\par
\par
// Foo2 does blah for 2-ary predicates.\par
template <size_t N, typename A1, typename A2>\par
class Foo2 \{\par
  blah b;\par
\};\par
\par
// Foo3 does blah for 3-ary predicates.\par
template <size_t N, typename A1, typename A2, typename A3>\par
class Foo3 \{\par
  blah c;\par
\};\par
}
\par
In another example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $range i 1..n\par
Func($for i + [[a$i]]);\par
$$ The text between i and [[ is the separator between iterations.\par
}
\par
will generate one of the following lines (without the comments), depending on the value of {\f2 n} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Func();              // If n is 0.\par
Func(a1);            // If n is 1.\par
Func(a1 + a2);       // If n is 2.\par
Func(a1 + a2 + a3);  // If n is 3.\par
// And so on...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Constructs} \par}
We support the following meta programming constructs:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $var id = exp}  \cell }{Defines a named constant value. {\f2 $id}  is valid util the end of the current meta lexical block.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $range id exp..exp}  \cell }{Sets the range of an iteration variable, which can be reused in multiple loops later. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $for id sep [[ code ]]}  \cell }{Iteration. The range of {\f2 id}  must have been defined earlier. {\f2 $id}  is valid in {\f2 code} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $($)}  \cell }{Generates a single {\f2 $}  character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $id}  \cell }{Value of the named constant or iteration variable. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 }  \cell }{Value of the expression. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $if exp [[ code ]] else_branch}  \cell }{Conditional. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 [[ code ]]}  \cell }{Meta lexical block. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 cpp_code}  \cell }{Raw C++ code. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $$ comment}  \cell }{Meta comment. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Note:}  To give the user some freedom in formatting the Pump source code, Pump ignores a new-line character if it's right after {\f2 $for foo}  or next to {\f2 [[}  or {\f2 ]]} . Without this rule you'll often be forced to write very long lines to get the desired output. Therefore sometimes you may need to insert an extra new-line in such places for a new-line to show up in your output.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Grammar} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid code ::= atomic_code*\par
atomic_code ::= $var id = exp\par
    | $var id = [[ code ]]\par
    | $range id exp..exp\par
    | $for id sep [[ code ]]\par
    | $($)\par
    | $id\par
    | $(exp)\par
    | $if exp [[ code ]] else_branch\par
    | [[ code ]]\par
    | cpp_code\par
sep ::= cpp_code | empty_string\par
else_branch ::= $else [[ code ]]\par
    | $elif exp [[ code ]] else_branch\par
    | empty_string\par
exp ::= simple_expression_in_Python_syntax\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Code} \par}
You can find the source code of Pump in {\f2 scripts/pump.py}. It is still very unpolished and lacks automated tests, although it has been successfully used many times. If you find a chance to use it in your project, please let us know what you think! We also welcome help on improving Pump.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Real Examples} \par}
You can find real-world applications of Pump in {\f2 Google Test} and {\f2 Google Mock}. The source file {\f2 foo.h.pump}  generates {\f2 foo.h} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tips} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If a meta variable is followed by a letter or digit, you can separate them using {\f2 [[]]} , which inserts an empty string. For example {\f2 Foo$j[[]]Helper}  generate {\f2 Foo1Helper}  when {\f2 j}  is 1.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting {\f2 [[]]}  followed by a new line. Since any new-line character next to {\f2 [[}  or {\f2 ]]}  is ignored, the generated code won't contain this new line. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Samples{\tc \v Samples}\par \pard\plain 
{\bkmkstart AAAAAAAENS}
{\bkmkend AAAAAAAENS}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you're like us, you'd like to look at some Google Test sample code. The {\f2 samples folder} has a number of well-commented samples showing how to use a variety of Google Test features.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #1} shows the basic steps of using Google Test to test C++ functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #2} shows a more complex unit test for a class with multiple member functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #3} uses a test fixture.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #4} is another basic example of using Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #5} teaches how to reuse a test fixture in multiple test cases by deriving sub-fixtures from it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #6} demonstrates type-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #7} teaches the basics of value-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #8} shows using {\f2 Combine()}  in value-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #9} shows use of the listener API to modify Google Test's console output and the use of its reflection API to inspect test results.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #10} shows use of the listener API to implement a primitive memory leak checker. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_5_AdvancedGuide{\tc \v V1_5_AdvancedGuide}\par \pard\plain 
{\bkmkstart AAAAAAAENT}
{\bkmkend AAAAAAAENT}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Now that you have read Primer and learned how to write tests using Google Test, it's time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 More Assertions} \par}
This section covers some less frequently used, but still significant, assertions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Explicit Success and Failure} \par}
These three assertions do not actually test a value or expression. Instead, they generate a success or failure directly. Like the macros that actually perform a test, you may stream a custom failure message into the them.\par
| {\f2 SUCCEED();}  | |:----------\'97|\par
Generates a success. This does NOT make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.\par
Note: {\f2 SUCCEED()}  is purely documentary and currently doesn't generate any user-visible output. However, we may add {\f2 SUCCEED()}  messages to Google Test's output in the future.\par
| {\f2 FAIL();}  | {\f2 ADD_FAILURE();}  | |:--------\'97|:--------------\'97|\par
{\f2 FAIL*}  generates a fatal failure while {\f2 ADD_FAILURE*}  generates a nonfatal failure. These are useful when control flow, rather than a Boolean expression, deteremines the test's success or failure. For example, you might want to write something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid switch(expression) \{\par
  case 1: ... some checks ...\par
  case 2: ... some other checks\par
  ...\par
  default: FAIL() << "We shouldn't get here.";\par
\}\par
}
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Exception Assertions} \par}
These are for verifying that a piece of code throws (or does not throw) an exception of the given type:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\f2 EXPECT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\i statement}  throws an exception of the given type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  throws an exception of any type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't throw any exception \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THROW(Foo(5), bar_exception);\par
\par
EXPECT_NO_THROW(\{\par
  int n = 5;\par
  Bar(&n);\par
\});\par
}
\par
{\i Availability} : Linux, Windows, Mac; since version 1.1.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Predicate Assertions for Better Error Messages} \par}
Even though Google Test has a rich set of assertions, they can never be complete, as it's impossible (nor a good idea) to anticipate all the scenarios a user might run into. Therefore, sometimes a user has to use {\f2 EXPECT_TRUE()}  to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into {\f2 EXPECT_TRUE()} . However, this is awkward especially when the expression has side-effects or is expensive to evaluate.\par
Google Test gives you three different options to solve this problem:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using an Existing Boolean Function} \par}
If you already have a function or a functor that returns {\f2 bool}  (or a type that can be implicitly converted to {\f2 bool} ), you can use it in a {\i predicate assertion}  to get the function arguments printed for free:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\i pred1(val1)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\f2 EXPECT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\i pred2(val1, val2)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the above, {\i predn}  is an {\i n} -ary predicate function or functor, where {\i val1} , {\i val2} , ..., and {\i valn}  are its arguments. The assertion succeeds if the predicate returns {\f2 true}  when applied to the given arguments, and fails otherwise. When the assertion fails, it prints the value of each argument. In either case, the arguments are evaluated exactly once.\par
Here's an example. Given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns true iff m and n have no common divisors except 1.\par
bool MutuallyPrime(int m, int n) \{ ... \}\par
const int a = 3;\par
const int b = 4;\par
const int c = 10;\par
}
\par
the assertion {\f2 EXPECT_PRED2(MutuallyPrime, a, b);}  will succeed, while the assertion {\f2 EXPECT_PRED2(MutuallyPrime, b, c);}  will fail with the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
!MutuallyPrime(b, c) is false, where\par

b is 4\par

c is 10\par

\par}
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If you see a compiler error "no matching function to call" when using {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*} , please see {\f2 this} for how to resolve it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.\par}
{\i Availability} : Linux, Windows, Mac\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function That Returns an AssertionResult} \par}
While {\f2 EXPECT_PRED*()}  and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The {\f2 {\b testing::AssertionResult}}  class solves this problem.\par
An {\f2 AssertionResult}  object represents the result of an assertion (whether it's a success or a failure, and an associated message). You can create an {\f2 AssertionResult}  using one of these factory functions:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// succeeded.\par
AssertionResult AssertionSuccess();\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// failed.\par
AssertionResult AssertionFailure();\par
\par
\}\par
}
\par
You can then use the {\f2 <<}  operator to stream messages to the {\f2 AssertionResult}  object.\par
To provide more readable messages in Boolean assertions (e.g. {\f2 EXPECT_TRUE()} ), write a predicate function that returns {\f2 AssertionResult}  instead of {\f2 bool} . For example, if you define {\f2 IsEven()}  as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess();\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
instead of:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsEven(int n) \{\par
  return (n % 2) == 0;\par
\}\par
}
\par
the failed assertion {\f2 EXPECT_TRUE(IsEven(Fib(4)))}  will print:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(4))\par

Actual: false (*3 is odd*)\par

Expected: true\par

\par}
instead of a more opaque\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(4))\par

Actual: false\par

Expected: true\par

\par}
If you want informative messages in {\f2 EXPECT_FALSE}  and {\f2 ASSERT_FALSE}  as well, and are fine with making the predicate slower in the success case, you can supply a success message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess() << n << " is even";\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
Then the statement {\f2 EXPECT_FALSE(IsEven(Fib(6)))}  will print\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(6))\par

Actual: true (8 is even)\par

Expected: false\par

\par}
{\i Availability} : Linux, Windows, Mac; since version 1.4.1.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Predicate-Formatter} \par}
If you find the default message generated by {\f2 (ASSERT|EXPECT)_PRED*}  and {\f2 (ASSERT|EXPECT)_(TRUE|FALSE)}  unsatisfactory, or some arguments to your predicate do not support streaming to {\f2 ostream} , you can instead use the following {\i predicate-formatter assertions}  to {\i fully}  customize how the message is formatted:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED_FORMAT1(} _pred_format1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED_FORMAT1(} _pred_format1, val1_{\f2 ); <td align="left"> _pred\\_format1(val1)_ is successful <tr><td align="left">} ASSERT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 <td align="left">} EXPECT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 <td align="left"> _pred\\_format2(val1, val2)_ is successful <tr><td align="left">} ...{\f2 <td align="left">} ...{\f2 <td align="left">} ...` \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The difference between this and the previous two groups of macros is that instead of a predicate, {\f2 (ASSERT|EXPECT)_PRED_FORMAT*}  take a {\i predicate-formatter}  ({\i pred_formatn} ), which is a function or functor with the signature:\par
{\f2 {\b testing::AssertionResult} PredicateFormattern(const char*} _expr1_{\f2 , const char*} _expr2_{\f2 , ... const char*} _exprn_{\f2 , T1} _val1_{\f2 , T2} _val2_{\f2 , ... Tn} _valn_{\f2 );} \par
where {\i val1} , {\i val2} , ..., and {\i valn}  are the values of the predicate arguments, and {\i expr1} , {\i expr2} , ..., and {\i exprn}  are the corresponding expressions as they appear in the source code. The types {\f2 T1} , {\f2 T2} , ..., and {\f2 Tn}  can be either value types or reference types. For example, if an argument has type {\f2 Foo} , you can declare it as either {\f2 Foo}  or {\f2 const Foo&} , whichever is appropriate.\par
A predicate-formatter returns a {\f2 {\b testing::AssertionResult}}  object to indicate whether the assertion has succeeded or not. The only way to create such an object is to call one of these factory functions:\par
As an example, let's improve the failure message in the previous example, which uses {\f2 EXPECT_PRED2()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns the smallest prime common divisor of m and n,\par
// or 1 when m and n are mutually prime.\par
int SmallestPrimeCommonDivisor(int m, int n) \{ ... \}\par
\par
// A predicate-formatter for asserting that two integers are mutually prime.\par
::testing::AssertionResult AssertMutuallyPrime(const char* m_expr,\par
                                               const char* n_expr,\par
                                               int m,\par
                                               int n) \{\par
  if (MutuallyPrime(m, n))\par
    return ::testing::AssertionSuccess();\par
\par
  return ::testing::AssertionFailure()\par
      << m_expr << " and " << n_expr << " (" << m << " and " << n\par
      << ") are not mutually prime, " << "as they have a common divisor "\par
      << SmallestPrimeCommonDivisor(m, n);\par
\}\par
}
\par
With this predicate-formatter, we can use\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);\par
}
\par
to generate the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
b and c (4 and 10) are not mutually prime, as they have a common divisor 2.\par

\par}
As you may have realized, many of the assertions we introduced earlier are special cases of {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} . In fact, most of them are indeed defined using {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Comparison} \par}
Comparing floating-point numbers is tricky. Due to round-off errors, it is very unlikely that two floating-points will match exactly. Therefore, {\f2 ASSERT_EQ}  's naive comparison usually doesn't work. And since floating-points can have a wide value range, no single fixed error bound works. It's better to compare by a fixed relative error bound, except for values close to 0 due to the loss of precision there.\par
In general, for floating-point comparison to make sense, the user needs to carefully choose the error bound. If they don't want or care to, comparing in terms of Units in the Last Place (ULPs) is a good default, and Google Test provides assertions to do this. Full details about ULPs are quite long; if you want to learn more, see {\f2 this article on float comparison}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Macros} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FLOAT_EQ(} _expected, actual_{\f2 );}  \cell }{{\f2 EXPECT_FLOAT_EQ(} _expected, actual_{\f2 );}  \cell }{the two {\f2 float}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DOUBLE_EQ(} _expected, actual_{\f2 );}  \cell }{{\f2 EXPECT_DOUBLE_EQ(} _expected, actual_{\f2 );}  \cell }{the two {\f2 double}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
By "almost equal", we mean the two values are within 4 ULP's from each other.\par
The following assertions allow you to choose the acceptable error bound:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NEAR(} _val1, val2, abs_error_{\f2 );}  \cell }{{\f2 EXPECT_NEAR} _(val1, val2, abs_error_<tt>); \cell }{the difference between {\i val1}  and {\i val2}  doesn't exceed the given absolute error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Predicate-Format Functions} \par}
Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in predicate assertion macros (e.g. {\f2 EXPECT_PRED_FORMAT2} , etc).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(::testing::FloatLE, val1, val2);\par
EXPECT_PRED_FORMAT2(::testing::DoubleLE, val1, val2);\par
}
\par
Verifies that {\i val1}  is less than, or almost equal to, {\i val2} . You can replace {\f2 EXPECT_PRED_FORMAT2}  in the above table with {\f2 ASSERT_PRED_FORMAT2} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Windows HRESULT assertions} \par}
These assertions test for {\f2 HRESULT}  success or failure.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\i expression}  is a success {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\i expression}  is a failure {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The generated output contains the human-readable error message associated with the {\f2 HRESULT}  code returned by {\i expression} .\par
You might use them like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CComPtr shell;\par
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L"Shell.Application"));\par
CComVariant empty;\par
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));\par
}
\par
{\i Availability} : Windows.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Type Assertions} \par}
You can call the function {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::StaticAssertTypeEq<T1, T2>();\par
}
 to assert that types {\f2 T1}  and {\f2 T2}  are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, and the compiler error message will likely (depending on the compiler) show you the actual values of {\f2 T1}  and {\f2 T2} . This is mainly useful inside template code.\par
{\i Caveat:}  When used inside a member function of a class template or a function template, {\f2 StaticAssertTypeEq<T1, T2>()}  is effective {\i only if}  the function is instantiated. For example, given: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T> class Foo \{\par
 public:\par
  void Bar() \{ ::testing::StaticAssertTypeEq<int, T>(); \}\par
\};\par
}
 the code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test1() \{ Foo<bool> foo; \}\par
}
 will {\i not}  generate a compiler error, as {\f2 Foo<bool>::Bar()}  is never actually instantiated. Instead, you need: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test2() \{ Foo<bool> foo; foo.Bar(); \}\par
}
 to cause a compiler error.\par
{\i Availability:}  Linux, Windows, Mac; since version 1.3.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Assertion Placement} \par}
You can use assertions in any C++ function. In particular, it doesn't have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure ({\f2 FAIL*}  and {\f2 ASSERT_*} ) can only be used in void-returning functions. This is a consequence of Google Test not using exceptions. By placing it in a non-void function you'll get a confusing compile error like {\f2 "error: void value not ignored as it ought to be"} .\par
If you need to use assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite {\f2 T2 Foo(T1 x)}  to {\f2 void Foo(T1 x, T2* result)} . You need to make sure that {\f2 *result}  contains some sensible value even when the function returns prematurely. As the function now returns {\f2 void} , you can use any assertion inside of it.\par
If changing the function's type is not an option, you should just use assertions that generate non-fatal failures, such as {\f2 ADD_FAILURE*}  and {\f2 EXPECT_*} .\par
{\i Note} : Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them. You'll get a compilation error if you try. A simple workaround is to transfer the entire body of the constructor or destructor to a private void-returning method. However, you should be aware that a fatal assertion failure in a constructor does not terminate the current test, as your intuition might suggest; it merely returns from the constructor early, possibly leaving your object in a partially-constructed state. Likewise, a fatal assertion failure in a destructor may leave your object in a partially-destructed state. Use assertions carefully in these situations!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Death Tests} \par}
In many applications, there are assertions that can cause application failure if a condition is not met. These sanity checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.\par
Since these precondition checks cause the processes to die, we call such tests {\i death tests} . More generally, any test that checks that a program terminates in an expected fashion is also a death test.\par
If you want to test {\f2 EXPECT_*()/ASSERT_*()}  failures in your test code, see {\f2 Catching Failures}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write a Death Test} \par}
Google Test has the following macros to support death tests:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH(} _statement, regex_{\f2 ); <td align="left">} EXPECT_DEATH({\f2 _statement, regex_} ); \cell }{{\i statement}  crashes with the given error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH_IF_SUPPORTED(} _statement, regex_{\f2 ); <td align="left">} EXPECT_DEATH_IF_SUPPORTED({\f2 _statement, regex_} ); \cell }{if death tests are supported, verifies that {\i statement}  crashes with the given error; otherwise verifies nothing \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EXIT(} _statement, predicate, regex_{\f2 ); <td align="left">} EXPECT_EXIT({\f2 _statement, predicate, regex_} ); \cell }{_statement_ exits with the given error and its exit code matches {\i predicate}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
where {\i statement}  is a statement that is expected to cause the process to die, {\i predicate}  is a function or function object that evaluates an integer exit status, and {\i regex}  is a regular expression that the stderr output of {\i statement}  is expected to match. Note that {\i statement}  can be {\i any valid statement}  (including {\i compound statement} ) and doesn't have to be an expression.\par
As usual, the {\f2 ASSERT}  variants abort the current test function, while the {\f2 EXPECT}  variants do not.\par
{\b Note:}  We use the word "crash" here to mean that the process terminates with a {\i non-zero}  exit status code. There are two possibilities: either the process has called {\f2 exit()}  or {\f2 _exit()}  with a non-zero value, or it may be killed by a signal.\par
This means that if {\i statement}  terminates the process with a 0 exit code, it is {\i not}  considered a crash by {\f2 EXPECT_DEATH} . Use {\f2 EXPECT_EXIT}  instead if this is the case, or if you want to restrict the exit code more precisely.\par
A predicate here must accept an {\f2 int}  and return a {\f2 bool} . The death test succeeds only if the predicate returns {\f2 true} . Google Test defines a few predicates that handle the most common cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::ExitedWithCode(exit_code)\par
}
\par
This expression is {\f2 true}  if the program exited normally with the given exit code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::KilledBySignal(signal_number)  // Not available on Windows.\par
}
\par
This expression is {\f2 true}  if the program was killed by the given signal.\par
The {\f2 *_DEATH}  macros are convenient wrappers for {\f2 *_EXIT}  that use a predicate that verifies the process' exit code is non-zero.\par
Note that a death test only cares about three things:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does {\i statement}  abort or exit the process?\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab (in the case of {\f2 ASSERT_EXIT}  and {\f2 EXPECT_EXIT} ) does the exit status satisfy {\i predicate} ? Or (in the case of {\f2 ASSERT_DEATH}  and {\f2 EXPECT_DEATH} ) is the exit status non-zero? And\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does the stderr output match {\i regex} ?\par}
In particular, if {\i statement}  generates an {\f2 ASSERT_*}  or {\f2 EXPECT_*}  failure, it will {\b not}  cause the death test to fail, as Google Test assertions don't abort the process.\par
To write a death test, simply use one of the above macros inside your test function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(My*DeathTest*, Foo) \{\par
  // This death test uses a compound statement.\par
  ASSERT_DEATH(\{ int n = 5; Foo(&n); \}, "Error on line .* of Foo()");\par
\}\par
TEST(MyDeathTest, NormalExit) \{\par
  EXPECT_EXIT(NormalExit(), ::testing::ExitedWithCode(0), "Success");\par
\}\par
TEST(MyDeathTest, KillMyself) \{\par
  EXPECT_EXIT(KillMyself(), ::testing::KilledBySignal(SIGKILL), "Sending myself unblockable signal");\par
\}\par
}
\par
verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 Foo(5)}  causes the process to die with the given error message,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 NormalExit()}  causes the process to print {\f2 "Success"}  to stderr and exit with exit code 0, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 KillMyself()}  kills the process with signal {\f2 SIGKILL} .\par}
The test function body may contain other assertions and statements as well, if necessary.\par
{\i Important:}  We strongly recommend you to follow the convention of naming your test case (not test) {\f2 *DeathTest}  when it contains a death test, as demonstrated in the above example. The {\f2 Death Tests And Threads}  section below explains why.\par
If a test fixture class is shared by normal tests and death tests, you can use typedef to introduce an alias for the fixture class and avoid duplicating its code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooTest, DoesThis) \{\par
  // normal test\par
\}\par
\par
TEST_F(FooDeathTest, DoesThat) \{\par
  // death test\par
\}\par
}
\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Cygwin, and Mac (the latter three are supported since v1.3.0). {\f2 (ASSERT|EXPECT)_DEATH_IF_SUPPORTED}  are new in v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Regular Expression Syntax} \par}
On POSIX systems (e.g. Linux, Cygwin, and Mac), Google Test uses the {\f2 POSIX extended regular expression} syntax in death tests. To learn about this syntax, you may want to read this {\f2 Wikipedia entry}.\par
On Windows, Google Test uses its own simple regular expression implementation. It lacks many features you can find in POSIX extended regular expressions. For example, we don't support union ({\f2 "x|y"} ), grouping ({\f2 "(xy)"} ), brackets ({\f2 "[xy]"} ), and repetition count ({\f2 "x\{5,7\}"} ), among others. Below is what we do support ({\f2 A}  denotes a literal character, period ({\f2 .} ), or a single {\f2 \\\\}  escape sequence; {\f2 x}  and {\f2 y}  denote regular expressions.):\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 c}  \cell }{matches any literal character {\f2 c}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\d}  \cell }{matches any decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\D}  \cell }{matches any character that's not a decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\f}  \cell }{matches {\f2 \\f}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\n}  \cell }{matches {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\r}  \cell }{matches {\f2 \\r}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\s}  \cell }{matches any ASCII whitespace, including {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\S}  \cell }{matches any character that's not a whitespace \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\t}  \cell }{matches {\f2 \\t}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\v}  \cell }{matches {\f2 \\v}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\w}  \cell }{matches any letter, {\f2 _} , or decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\W}  \cell }{matches any character that {\f2 \\\\w}  doesn't match \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\c}  \cell }{matches any literal character {\f2 c} , which must be a punctuation \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 .}  \cell }{matches any single character except {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A?}  \cell }{matches 0 or 1 occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A*}  \cell }{matches 0 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A+}  \cell }{matches 1 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ^}  \cell }{matches the beginning of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $}  \cell }{matches the end of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 xy}  \cell }{matches {\f2 x}  followed by {\f2 y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
To help you determine which capability is available on your system, Google Test defines macro {\f2 GTEST_USES_POSIX_RE=1}  when it uses POSIX extended regular expressions, or {\f2 GTEST_USES_SIMPLE_RE=1}  when it uses the simple version. If you want your death tests to work in both cases, you can either {\f2 #if}  on these macros or use the more limited syntax only.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How It Works} \par}
Under the hood, {\f2 ASSERT_EXIT()}  spawns a new process and executes the death test statement in that process. The details of of how precisely that happens depend on the platform and the variable {\f2 ::testing::GTEST_FLAG(death_test_style)}  (which is initialized from the command-line flag {\f2 --gtest_death_test_style} ).\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On POSIX systems, {\f2 fork()}  (or {\f2 clone()}  on Linux) is used to spawn the child, after which:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "fast"} , the death test statement is immediately executed.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "threadsafe"} , the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On Windows, the child is spawned using the {\f2 CreateProcess()}  API, and re-executes the binary to cause just the single death test under consideration to be run - much like the {\f2 threadsafe}  mode on POSIX.\par}
Other values for the variable are illegal and will cause the death test to fail. Currently, the flag's default value is {\f2 "fast"} . However, we reserve the right to change it in the future. Therefore, your tests should not depend on this.\par
In either case, the parent process waits for the child process to complete, and checks that\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's exit status satisfies the predicate, and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's stderr matches the regular expression.\par}
If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Tests And Threads} \par}
The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn't feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.\par
Google Test has three features intended to raise awareness of threading issues.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A warning is emitted if multiple threads are running when a death test is encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test cases with a name ending in "DeathTest" are run before all other tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It uses {\f2 clone()}  instead of {\f2 fork()}  to spawn the child process on Linux ({\f2 clone()}  is not available on Cygwin and Mac), as {\f2 fork()}  is more likely to cause the child to hang when the parent process has multiple threads.\par}
It's perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Test Styles} \par}
The "threadsafe" death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety. We suggest using the faster, default "fast" style unless your test has specific problems with it.\par
You can choose a particular style of death tests by setting the flag programmatically:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
}
\par
You can do this in {\f2 main()}  to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyDeathTest, TestOne) \{\par
  ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
  // This test is run in the "threadsafe" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
TEST(MyDeathTest, TestTwo) \{\par
  // This test is run in the "fast" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  ::testing::FLAGS_gtest_death_test_style = "fast";\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Caveats} \par}
The {\i statement}  argument of {\f2 ASSERT_EXIT()}  can be any valid C++ statement except that it can not return from the current function. This means {\i statement}  should not contain {\f2 return}  or a macro that might return (e.g. {\f2 ASSERT_TRUE()}  ). If {\i statement}  returns before it crashes, Google Test will print an error message, and the test will fail.\par
Since {\i statement}  runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will {\i not}  be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab try not to free memory in a death test;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab free the memory again in the parent process; or\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab do not use the heap checker in your program.\par}
Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.\par
Despite the improved thread safety afforded by the "threadsafe" style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with {\f2 pthread_atfork(3)} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Assertions in Sub-routines} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adding Traces to Assertions} \par}
If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the {\f2 SCOPED_TRACE}  macro:\par
| {\f2 SCOPED_TRACE(} _message_{\f2 );}  | |:--------------------------\'97|\par
where {\i message}  can be anything streamable to {\f2 std::ostream} . This macro will cause the current file name, line number, and the given message to be added in every failure message. The effect will be undone when the control leaves the current lexical scope.\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10: void Sub1(int n) \{\par
11:   EXPECT_EQ(1, Bar(n));\par
12:   EXPECT_EQ(2, Bar(n + 1));\par
13: \}\par
14:\par
15: TEST(FooTest, Bar) \{\par
16:   \{\par
17:     SCOPED_TRACE("A");  // This trace point will be included in\par
18:                         // every failure in this scope.\par
19:     Sub1(1);\par
20:   \}\par
21:   // Now it won't.\par
22:   Sub1(9);\par
23: \}\par
}
\par
could result in messages like these:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/foo_test.cc:11: Failure\par
Value of: Bar(n)\par
Expected: 1\par
  Actual: 2\par
   Trace:\par
path/to/foo_test.cc:17: A\par
\par
path/to/foo_test.cc:12: Failure\par
Value of: Bar(n + 1)\par
Expected: 2\par
  Actual: 3\par
}
\par
Without the trace, it would've been difficult to know which invocation of {\f2 Sub1()}  the two failures come from respectively. (You could add an extra message to each assertion in {\f2 Sub1()}  to indicate the value of {\f2 n} , but that's tedious.)\par
Some tips on using {\f2 SCOPED_TRACE} :\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab With a suitable message, it's often enough to use {\f2 SCOPED_TRACE}  at the beginning of a sub-routine, instead of at each call site.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When calling sub-routines inside a loop, make the loop iterator part of the message in {\f2 SCOPED_TRACE}  such that you can know which iteration the failure is from.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for {\f2 SCOPED_TRACE} . You can simply use {\f2 ""} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 SCOPED_TRACE}  in an inner scope when there is one in the outer scope. In this case, all active trace points will be included in the failure messages, in reverse order they are encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!\par}
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Propagating Fatal Failures} \par}
A common pitfall when using {\f2 ASSERT_*}  and {\f2 FAIL*}  is not understanding that when they fail they only abort the {\i current function} , not the entire test. For example, the following test will segfault: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Subroutine() \{\par
  // Generates a fatal failure and aborts the current function.\par
  ASSERT_EQ(1, 2);\par
  // The following won't be executed.\par
  ...\par
\}\par
\par
TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // The intended behavior is for the fatal failure\par
  // in Subroutine() to abort the entire test.\par
  // The actual behavior: the function goes on after Subroutine() returns.\par
  int* p = NULL;\par
  *p = 3; // Segfault!\par
\}\par
}
\par
Since we don't use exceptions, it is technically impossible to implement the intended behavior here. To alleviate this, Google Test provides two solutions. You could use either the {\f2 (ASSERT|EXPECT)_NO_FATAL_FAILURE}  assertions or the {\f2 HasFatalFailure()}  function. They are described in the following two subsections.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Asserting on Subroutines} \par}
As shown above, if your test calls a subroutine that has an {\f2 ASSERT_*}  failure in it, the test will continue after the subroutine returns. This may not be what you want.\par
Often people want fatal failures to propagate like exceptions. For that Google Test offers the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't generate any new fatal failures in the current thread. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If {\i statement}  creates new threads, failures in these threads are ignored.\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_NO_FATAL_FAILURE(Foo());\par
\par
int i;\par
EXPECT_NO_FATAL_FAILURE(\{\par
  i = Bar();\par
\});\par
}
\par
{\i Availability:}  Linux, Windows, Mac. Assertions from multiple threads are currently not supported.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Checking for Failures in the Current Test} \par}
{\f2 HasFatalFailure()}  in the {\f2 {\b testing::Test}}  class returns {\f2 true}  if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Test \{\par
 public:\par
  ...\par
  static bool HasFatalFailure();\par
\};\par
}
\par
The typical usage, which basically simulates the behavior of a thrown exception, is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // Aborts if Subroutine() had a fatal failure.\par
  if (HasFatalFailure())\par
    return;\par
  // The following won't be executed.\par
  ...\par
\}\par
}
\par
If {\f2 HasFatalFailure()}  is used outside of {\f2 TEST()}  , {\f2 {\b TEST_F()}}  , or a test fixture, you must add the {\f2 {\b testing::Test}::}  prefix, as in:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (::testing::Test::HasFatalFailure())\par
  return;\par
}
\par
Similarly, {\f2 HasNonfatalFailure()}  returns {\f2 true}  if the current test has at least one non-fatal failure, and {\f2 HasFailure()}  returns {\f2 true}  if the current test has at least one failure of either kind.\par
{\i Availability:}  Linux, Windows, Mac. {\f2 HasNonfatalFailure()}  and {\f2 HasFailure()}  are available since version 1.4.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Logging Additional Information} \par}
In your test code, you can call {\f2 RecordProperty("key", value)}  to log additional information, where {\f2 value}  can be either a C string or a 32-bit integer. The {\i last}  value recorded for a key will be emitted to the XML output if you specify one. For example, the test\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(WidgetUsageTest, MinAndMaxWidgets) \{\par
  RecordProperty("MaximumWidgets", ComputeMaxUsage());\par
  RecordProperty("MinimumWidgets", ComputeMinUsage());\par
\}\par
}
\par
will output XML like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  <testcase name="MinAndMaxWidgets" status="run" time="6" classname="WidgetUsageTest"\par
            MaximumWidgets="12"\par
            MinimumWidgets="9" />\par
...\par
}
\par
{\i Note} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 RecordProperty()}  is a static member of the {\f2 Test}  class. Therefore it needs to be prefixed with {\f2 {\b testing::Test}::}  if used outside of the {\f2 TEST}  body and the test fixture class.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 key}  must be a valid XML attribute name, and cannot conflict with the ones already used by Google Test ({\f2 name} , {\f2 status} , {\f2 time} , and {\f2 classname} ).\par}
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Sharing Resources Between Tests in the Same Test Case} \par}
Google Test creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.\par
If the tests don't change the resource, there's no harm in them sharing a single resource copy. So, in addition to per-test set-up/tear-down, Google Test also supports per-test-case set-up/tear-down. To use it:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In your test fixture class (say {\f2 {\b FooTest}}  ), define as {\f2 static}  some member variables to hold the shared resources.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the same test fixture class, define a {\f2 static void SetUpTestCase()}  function (remember not to spell it as **{\f2 SetupTestCase} ** with a small {\f2 u} !) to set up the shared resources and a {\f2 static void TearDownTestCase()}  function to tear them down.\par}
That's it! Google Test automatically calls {\f2 SetUpTestCase()}  before running the {\i first test}  in the {\f2 {\b FooTest}}  test case (i.e. before creating the first {\f2 {\b FooTest}}  object), and calls {\f2 TearDownTestCase()}  after running the {\i last test}  in it (i.e. after deleting the last {\f2 {\b FooTest}}  object). In between, the tests can use the shared resources.\par
Remember that the test order is undefined, so your code can't depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.\par
Here's an example of per-test-case set-up and tear-down: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\par
 protected:\par
  // Per-test-case set-up.\par
  // Called before the first test in this test case.\par
  // Can be omitted if not needed.\par
  static void SetUpTestCase() \{\par
    shared_resource_ = new ...;\par
  \}\par
\par
  // Per-test-case tear-down.\par
  // Called after the last test in this test case.\par
  // Can be omitted if not needed.\par
  static void TearDownTestCase() \{\par
    delete shared_resource_;\par
    shared_resource_ = NULL;\par
  \}\par
\par
  // You can define per-test set-up and tear-down logic as usual.\par
  virtual void SetUp() \{ ... \}\par
  virtual void TearDown() \{ ... \}\par
\par
  // Some expensive resource shared by all tests.\par
  static T* shared_resource_;\par
\};\par
\par
T* FooTest::shared_resource_ = NULL;\par
\par
TEST_F(FooTest, Test1) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
TEST_F(FooTest, Test2) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
}
\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Global Set-Up and Tear-Down} \par}
Just as you can do set-up and tear-down at the test level and the test case level, you can also do it at the test program level. Here's how.\par
First, you subclass the {\f2 {\b testing::Environment}}  class to define a test environment, which knows how to set-up and tear-down:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Environment \{\par
 public:\par
  virtual ~Environment() \{\}\par
  // Override this to define how to set up the environment.\par
  virtual void SetUp() \{\}\par
  // Override this to define how to tear down the environment.\par
  virtual void TearDown() \{\}\par
\};\par
}
\par
Then, you register an instance of your environment class with Google Test by calling the {\f2 ::testing::AddGlobalTestEnvironment()}  function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Environment* AddGlobalTestEnvironment(Environment* env);\par
}
\par
Now, when {\f2 RUN_ALL_TESTS()}  is called, it first calls the {\f2 SetUp()}  method of the environment object, then runs the tests if there was no fatal failures, and finally calls {\f2 TearDown()}  of the environment object.\par
It's OK to register multiple environment objects. In this case, their {\f2 SetUp()}  will be called in the order they are registered, and their {\f2 TearDown()}  will be called in the reverse order.\par
Note that Google Test takes ownership of the registered environment objects. Therefore {\b do not delete them}  by yourself.\par
You should call {\f2 AddGlobalTestEnvironment()}  before {\f2 RUN_ALL_TESTS()}  is called, probably in {\f2 main()} . If you use {\f2 gtest_main} , you need to call this before {\f2 main()}  starts for it to take effect. One way to do this is to define a global variable like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::Environment* const foo_env = ::testing::AddGlobalTestEnvironment(new FooEnvironment);\par
}
\par
However, we strongly recommend you to write your own {\f2 main()}  and call {\f2 AddGlobalTestEnvironment()}  there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn't guarantee the order in which global variables from different translation units are initialized).\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Value Parameterized Tests} \par}
{\i Value-parameterized tests}  allow you to test your code with different parameters without writing multiple copies of the same test.\par
Suppose you write a test for your code and then realize that your code is affected by a presence of a Boolean command line flag.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyCodeTest, TestFoo) \{\par
  // A code to test foo().\par
\}\par
}
\par
Usually people factor their test code into a function with a Boolean parameter in such situations. The function sets the flag, then executes the testing code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooHelper(bool flag_value) \{\par
  flag = flag_value;\par
  // A code to test foo().\par
\}\par
\par
TEST(MyCodeTest, TestFooo) \{\par
  TestFooHelper(false);\par
  TestFooHelper(true);\par
\}\par
}
\par
But this setup has serious drawbacks. First, when a test assertion fails in your tests, it becomes unclear what value of the parameter caused it to fail. You can stream a clarifying message into your {\f2 EXPECT} /{\f2 ASSERT}  statements, but it you'll have to do it with all of them. Second, you have to add one such helper function per test. What if you have ten tests? Twenty? A hundred?\par
Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.\par
Here are some other situations when value-parameterized tests come handy:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You wan to test different implementations of an OO interface.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write Value-Parameterized Tests} \par}
To write value-parameterized tests, first you should define a fixture class. It must be derived from {\f2 ::testing::TestWithParam<T>} , where {\f2 T}  is the type of your parameter values. {\f2 TestWithParam<T>}  is itself derived from {\f2 {\b testing::Test}} . {\f2 T}  can be any copyable type. If it's a raw pointer, you are responsible for managing the lifespan of the pointed values.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::TestWithParam<const char*> \{\par
  // You can implement all the usual fixture class members here.\par
  // To access the test parameter, call GetParam() from class\par
  // TestWithParam<T>.\par
\};\par
}
\par
Then, use the {\f2 TEST_P}  macro to define as many test patterns using this fixture as you want. The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, access the test parameter with the GetParam() method\par
  // of the TestWithParam<T> class:\par
  EXPECT_TRUE(foo.Blah(GetParam()));\par
  ...\par
\}\par
\par
TEST_P(FooTest, HasBlahBlah) \{\par
  ...\par
\}\par
}
\par
Finally, you can use {\f2 INSTANTIATE_TEST_CASE_P}  to instantiate the test case with any set of parameters you want. Google Test defines a number of functions for generating test parameters. They return what we call (surprise!) {\i parameter generators} . Here is a summary of them, which are all in the {\f2 testing}  namespace:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Range(begin, end[, step])}  \cell }{Yields values {\f2 \{begin, begin+step, begin+step+step, ...\}} . The values do not include {\f2 end} . {\f2 step}  defaults to 1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Values(v1, v2, ..., vN)}  \cell }{Yields values {\f2 \{v1, v2, ..., vN\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ValuesIn(container)}  and {\f2 ValuesIn(begin, end)}  \cell }{Yields values from a C-style array, an STL-style container, or an iterator range {\f2 [begin, end)} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 {\b Bool()}}  \cell }{Yields sequence {\f2 \{false, true\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Combine(g1, g2, ..., gN)}  \cell }{Yields all combinations (the Cartesian product for the math savvy) of the values generated by the {\f2 N}  generators. This is only available if your system provides the {\f2 <tr1/tuple>}  header. If you are sure your system does, and Google Test disagrees, you can override it by defining {\f2 GTEST_HAS_TR1_TUPLE=1} . See comments in {\f2 include/gtest/internal/gtest-port.h} for more information. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For more details, see the comments at the definitions of these functions in the {\f2 source code}.\par
The following statement will instantiate tests from the {\f2 {\b FooTest}}  test case each with parameter values {\f2 "meeny"} , {\f2 "miny"} , and {\f2 "moe"} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TEST_CASE_P(InstantiationName,\par
                        FooTest,\par
                        ::testing::Values("meeny", "miny", "moe"));\par
}
\par
To distinguish different instances of the pattern (yes, you can instantiate it more than once), the first argument to {\f2 INSTANTIATE_TEST_CASE_P}  is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/2}  for {\f2 "moe"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/2}  for {\f2 "moe"} \par}
You can use these names in {\f2 \'96gtest-filter}.\par
This statement will instantiate all tests from {\f2 {\b FooTest}}  again, each with parameter values {\f2 "cat"}  and {\f2 "dog"} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const char* pets[] = \{"cat", "dog"\};\par
INSTANTIATE_TEST_CASE_P(AnotherInstantiationName, FooTest,\par
                        ::testing::ValuesIn(pets));\par
}
\par
The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/1}  for {\f2 "dog"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "dog"} \par}
Please note that {\f2 INSTANTIATE_TEST_CASE_P}  will instantiate {\i all}  tests in the given test case, whether their definitions come before or {\i after}  the {\f2 INSTANTIATE_TEST_CASE_P}  statement.\par
You can see {\f2 these} {\f2 files} for more examples.\par
{\i Availability} : Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.2.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Creating Value-Parameterized Abstract Tests} \par}
In the above, we define and instantiate {\f2 {\b FooTest}}  in the same source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as {\i abstract tests} . As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, he can instantiate your suite to get all the interface-conformance tests for free.\par
To define abstract tests, you should organize your code like this:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the definition of the parameterized test fixture class (e.g. {\f2 {\b FooTest}} ) in a header file, say {\f2 foo_param_test.h} . Think of this as {\i declaring}  your abstract tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the {\f2 TEST_P}  definitions in {\f2 foo_param_test.cc} , which includes {\f2 foo_param_test.h} . Think of this as {\i implementing}  your abstract tests.\par}
Once they are defined, you can instantiate them by including {\f2 foo_param_test.h} , invoking {\f2 INSTANTIATE_TEST_CASE_P()} , and linking with {\f2 foo_param_test.cc} . You can instantiate the same abstract test case multiple times, possibly in different source files.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Typed Tests} \par}
Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same "concept" and you want to verify it. In both cases, you want the same test logic repeated for different types.\par
While you can write one {\f2 TEST}  or {\f2 TEST_F}  for each type you want to test (and you may even factor the test logic into a function template that you invoke from the {\f2 TEST} ), it's tedious and doesn't scale: if you want {\i m}  tests over {\i n}  types, you'll end up writing {\i m*n}  {\f2 TEST} s.\par
{\i Typed tests}  allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here's how you do it:\par
First, define a fixture class template. It should be parameterized by a type. Remember to derive it from {\f2 {\b testing::Test}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
 public:\par
  ...\par
  typedef std::list<T> List;\par
  static T shared_;\par
  T value_;\par
\};\par
}
\par
Next, associate a list of types with the test case, which will be repeated for each type in the list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
TYPED_TEST_CASE(FooTest, MyTypes);\par
}
\par
The {\f2 typedef}  is necessary for the {\f2 TYPED_TEST_CASE}  macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.\par
Then, use {\f2 TYPED_TEST()}  instead of {\f2 {\b TEST_F()}}  to define a typed test for this test case. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST(FooTest, DoesBlah) \{\par
  // Inside a test, refer to the special name TypeParam to get the type\par
  // parameter.  Since we are inside a derived class template, C++ requires\par
  // us to visit the members of FooTest via 'this'.\par
  TypeParam n = this->value_;\par
\par
  // To visit static members of the fixture, add the 'TestFixture::'\par
  // prefix.\par
  n += TestFixture::shared_;\par
\par
  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\par
  // prefix.  The 'typename' is required to satisfy the compiler.\par
  typename TestFixture::List values;\par
  values.push_back(n);\par
  ...\par
\}\par
\par
TYPED_TEST(FooTest, HasPropertyA) \{ ... \}\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Type-Parameterized Tests} \par}
{\i Type-parameterized tests}  are like typed tests, except that they don't require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.\par
If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with his type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here's an example:\par
First, define a fixture class template, as we did with typed tests:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
  ...\par
\};\par
}
\par
Next, declare that you will define a type-parameterized test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_CASE_P(FooTest);\par
}
\par
The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
Then, use {\f2 TYPED_TEST_P()}  to define a type-parameterized test. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, refer to TypeParam to get the type parameter.\par
  TypeParam n = 0;\par
  ...\par
\}\par
\par
TYPED_TEST_P(FooTest, HasPropertyA) \{ ... \}\par
}
\par
Now the tricky part: you need to register all test patterns using the {\f2 REGISTER_TYPED_TEST_CASE_P}  macro before you can instantiate them. The first argument of the macro is the test case name; the rest are the names of the tests in this test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid REGISTER_TYPED_TEST_CASE_P(FooTest,\par
                           DoesBlah, HasPropertyA);\par
}
\par
Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can {\f2 #include}  it in multiple C++ source files and instantiate it multiple times.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, MyTypes);\par
}
\par
To distinguish different instances of the pattern, the first argument to the {\f2 INSTANTIATE_TYPED_TEST_CASE_P}  macro is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instances.\par
In the special case where the type list contains only one type, you can write that type directly without {\f2 ::testing::Types<...>} , like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, int);\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Testing Private Code} \par}
If you change your software's internal implementation, your tests should not break as long as the change is not observable by users. Therefore, per the {\i black-box testing principle} , most of the time you should test your code through its public interfaces.\par
If you still find yourself needing to test internal implementation code, consider if there's a better design that wouldn't require you to do so. If you absolutely have to test non-public interface code though, you can. There are two cases to consider:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Static functions ({\i not}  the same as static member functions!) or unnamed namespaces, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Private or protected class members\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Static Functions} \par}
Both static functions and definitions/declarations in an unnamed namespace are only visible within the same translation unit. To test them, you can {\f2 #include}  the entire {\f2 .cc}  file being tested in your {\f2 *_test.cc}  file. ({\f2 #include} ing {\f2 .cc}  files is not a good way to reuse code - you should not do this in production code!)\par
However, a better approach is to move the private code into the {\f2 foo::internal}  namespace, where {\f2 foo}  is the namespace your project normally uses, and put the private declarations in a {\f2 *-internal.h}  file. Your production {\f2 .cc}  files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Private Class Members} \par}
Private class members are only accessible from within the class or by friends. To access a class' private members, you can declare your test fixture as a friend to the class and define accessors in your fixture. Tests using the fixture can then access the private members of your production class via the accessors in the fixture. Note that even though your fixture is a friend to your production class, your tests are not automatically friends to it, as they are technically defined in sub-classes of the fixture.\par
Another way to test private members is to refactor them into an implementation class, which is then declared in a {\f2 *-internal.h}  file. Your clients aren't allowed to include this header but your tests can. Such is called the Pimpl (Private Implementation) idiom.\par
Or, you can declare an individual test as a friend of your class by adding this line in the class body:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid FRIEND_TEST(TestCaseName, TestName);\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
#include <gtest/gtest_prod.h>\par
\par
// Defines FRIEND_TEST.\par
class Foo \{\par
  ...\par
 private:\par
  FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\par
  int Bar(void* x);\par
\};\par
\par
// foo_test.cc\par
...\par
TEST(FooTest, BarReturnsZeroOnNull) \{\par
  Foo foo;\par
  EXPECT_EQ(0, foo.Bar(NULL));\par
  // Uses Foo's private member Bar().\par
\}\par
}
\par
Pay special attention when your class is defined in a namespace, as you should define your test fixtures and tests in the same namespace if you want them to be friends of your class. For example, if the code to be tested looks like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
\par
class Foo \{\par
  friend class FooTest;\par
  FRIEND_TEST(FooTest, Bar);\par
  FRIEND_TEST(FooTest, Baz);\par
  ...\par
  definition of the class Foo\par
  ...\par
\};\par
\par
\}  // namespace my_namespace\par
}
\par
Your test code should be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
\};\par
\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
\}  // namespace my_namespace\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Catching Failures} \par}
If you are building a testing utility on top of Google Test, you'll want to test your utility. What framework would you use to test it? Google Test, of course.\par
The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But Google Test doesn't use exceptions, so how do we test that a piece of code generates an expected failure?\par
{\f2 <{\b gtest/gtest-spi.h}>}  contains some constructs to do this. After {\f2 #include} ing this header, you can use\par
| {\f2 EXPECT_FATAL_FAILURE(} _statement, substring_{\f2 );}  | |:-----------------------------------------------\'97|\par
to assert that {\i statement}  generates a fatal (e.g. {\f2 ASSERT_*} ) failure whose message contains the given {\i substring} , or use\par
| {\f2 EXPECT_NONFATAL_FAILURE(} _statement, substring_{\f2 );}  | |:--------------------------------------------------\'97|\par
if you are expecting a non-fatal (e.g. {\f2 EXPECT_*} ) failure.\par
For technical reasons, there are some caveats:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot stream a failure message to either macro.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot reference local non-static variables or non-static members of {\f2 this}  object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot return a value.\par}
{\i Note:}  Google Test is designed with threads in mind. Once the synchronization primitives in {\f2 <{\b gtest/internal/gtest-port.h}>}  have been implemented, Google Test will become thread-safe, meaning that you can then use assertions in multiple threads concurrently. Before\par
that, however, Google Test only supports single-threaded usage. Once thread-safe, {\f2 EXPECT_FATAL_FAILURE()}  and {\f2 EXPECT_NONFATAL_FAILURE()}  will capture failures in the current thread only. If {\i statement}  creates new threads, failures in these threads will be ignored. If you want to capture failures from all threads instead, you should use the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_FATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting the Current Test's Name} \par}
Sometimes a function may need to know the name of the currently running test. For example, you may be using the {\f2 SetUp()}  method of your test fixture to set the golden file name based on which test is running. The {\f2 {\b testing::TestInfo}}  class has this information:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
class TestInfo \{\par
 public:\par
  // Returns the test case name and the test name, respectively.\par
  //\par
  // Do NOT delete or free the return value - it's managed by the\par
  // TestInfo class.\par
  const char* test_case_name() const;\par
  const char* name() const;\par
\};\par
\par
\}  // namespace testing\par
}
\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid To obtain a {\f2 TestInfo}  object for the currently running test, call \par
}{\f2 current_test_info()}  on the {\f2 UnitTest}  singleton object:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Gets information about the currently running test.\par
// Do NOT delete the returned object - it's managed by the UnitTest class.\par
const ::testing::TestInfo* const test_info =\par
  ::testing::UnitTest::GetInstance()->current_test_info();\par
printf("We are in test %s of test case %s.\\n",\par
       test_info->name(), test_info->test_case_name());\par
}
\par
{\f2 current_test_info()}  returns a null pointer if no test is running. In particular, you cannot find the test case name in {\f2 TestCaseSetUp()} , {\f2 TestCaseTearDown()}  (where you know the test case name implicitly), or functions called from them.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google Test by Handling Test Events} \par}
Google Test provides an {\b event listener API}  to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test case, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.\par
{\i Availability:}  Linux, Windows, Mac; since v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Event Listeners} \par}
To define a event listener, you subclass either {\f2 testing::TestEventListener} or {\f2 testing::EmptyTestEventListener}. The former is an (abstract) interface, where {\i each pure virtual method\par
 can be overridden to handle a test event}  (For example, when a test starts, the {\f2 OnTestStart()}  method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.\par
When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 UnitTest} reflects the state of the entire test program,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestCase} has information about a test case, which can contain one or more tests,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestInfo} contains the state of a test, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestPartResult} represents the result of a test assertion.\par}
An event handler function can examine the argument it receives to find out interesting information about the event and the test program's state. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MinimalistPrinter : public ::testing::EmptyTestEventListener \{\par
  // Called before a test starts.\par
  virtual void OnTestStart(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s starting.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\par
  // Called after a failed assertion or a SUCCESS().\par
  virtual void OnTestPartResult(\par
      const ::testing::TestPartResult& test_part_result) \{\par
    printf("%s in %s:%d\\n%s\\n",\par
           test_part_result.failed() ? "*** Failure" : "Success",\par
           test_part_result.file_name(),\par
           test_part_result.line_number(),\par
           test_part_result.summary());\par
  \}\par
\par
  // Called after a test ends.\par
  virtual void OnTestEnd(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s ending.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Event Listeners} \par}
To use the event listener you have defined, add an instance of it to the Google Test event listener list (represented by class {\f2 TestEventListeners}{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
note the "s" at the end of the name) in your {\f2 main()}  function, before calling {\f2 RUN_ALL_TESTS()} : {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  // Gets hold of the event listener list.\par
  ::testing::TestEventListeners& listeners =\par
      ::testing::UnitTest::GetInstance()->listeners();\par
  // Adds a listener to the end.  Google Test takes the ownership.\par
  listeners.Append(new MinimalistPrinter);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par}
There's only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
delete listeners.Release(listeners.default_result_printer());\par
listeners.Append(new MinimalistPrinter);\par
return RUN_ALL_TESTS();\par
}
\par
Now, sit back and enjoy a completely different output from your tests. For more details, you can read this {\f2 sample}.\par
You may append more than one listener to the list. When an {\f2 On*Start()}  or {\f2 OnTestPartResult()}  event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An {\f2 On*End()}  event will be received by the listeners in the {\i reverse}  order. This allows output by listeners added later to be framed by output from listeners added earlier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating Failures in Listeners} \par}
You may use failure-raising macros ({\f2 EXPECT_*()} , {\f2 ASSERT_*()} , {\f2 FAIL()} , etc) when processing an event. There are some restrictions:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot generate any failure in {\f2 OnTestPartResult()}  (otherwise it will cause {\f2 OnTestPartResult()}  to be called recursively).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A listener that handles {\f2 OnTestPartResult()}  is not allowed to generate any failure.\par}
When you add listeners to the listener list, you should put listeners that handle {\f2 OnTestPartResult()}  {\i before}  listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.\par
We have a sample of failure-raising listener {\f2 here}.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Running Test Programs: Advanced Options} \par}
Google Test test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call {\f2 ::testing::InitGoogleTest()}  before calling {\f2 RUN_ALL_TESTS()} .\par
To see a list of supported flags and their usage, please run your test program with the {\f2 --help}  flag. You can also use {\f2 -h} , {\f2 -?} , or {\f2 /?}  for short. This feature is added in version 1.3.0.\par
If an option is specified both by an environment variable and by a flag, the latter takes precedence. Most of the options can also be set/read in code: to access the value of command line flag {\f2 --gtest_foo} , write {\f2 ::testing::GTEST_FLAG(foo)} . A common pattern is to set the value of a flag before calling {\f2 ::testing::InitGoogleTest()}  to change the default value of the flag: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // Disables elapsed time by default.\par
  ::testing::GTEST_FLAG(print_time) = false;\par
\par
  // This allows the user to override the flag on the command line.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Tests} \par}
This section shows various options for choosing which tests to run.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Listing Test Names} \par}
Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag {\f2 --gtest_list_tests}  overrides all other flags and lists tests in the following format: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TestCase1.\par
  TestName1\par
  TestName2\par
TestCase2.\par
  TestName\par
}
\par
None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running a Subset of the Tests} \par}
By default, a Google Test program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the {\f2 GTEST_FILTER}  environment variable or the {\f2 --gtest_filter}  flag to a filter string, Google Test will only run the tests whose full names (in the form of {\f2 TestCaseName.TestName} ) match the filter.\par
The format of a filter is a '{\f2 :} '-separated list of wildcard patterns (called the positive patterns) optionally followed by a '{\f2 -} ' and another '{\f2 :} '-separated pattern list (called the negative patterns). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.\par
A pattern may contain `'*'{\f2 (matches any string) or} '?'{\f2 (matches any single character). For convenience, the filter} '{\i -NegativePatterns'{\f2 can be also written as} '-NegativePatterns'`.} \par
{\i For example:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test}  Has no flag, and thus runs all its tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test --gtest_filter=*}  Also runs everything, due to the single match-everything `{\f2 value. *} ./foo_test \'96gtest_filter={\b FooTest}.*{\f2 Runs everything in test case} {\b FooTest}{\f2 . *} ./foo_test \'96gtest_filter=*Null*:{\i Constructor} {\f2 Runs any test whose full name contains either} "Null"{\f2 or} "Constructor"{\f2 . *} ./foo_test \'96gtest_filter=-*DeathTest.*{\f2 Runs all non-death tests. *} ./foo_test \'96gtest_filter={\b FooTest}.*-FooTest.Bar{\f2 Runs everything in test case} {\b FooTest}{\f2 except} FooTest.Bar`.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Disabling Tests} \par}
} \par
{\i } \par
{\i If you have a broken test that you cannot fix right away, you can add the {\f2 DISABLED_}  prefix to its name. This will exclude it from execution. This is better than commenting out the code or using {\f2 #if 0} , as disabled tests are still compiled (and thus won't rot).} \par
{\i If you need to disable all tests in a test case, you can either add {\f2 DISABLED_}  to the front of the name of each test, or alternatively add it to the front of the test case name.} \par
{\i For example, the following tests won't be run by Google Test, even though they will still be compiled:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests that Foo does Abc.\par
TEST(FooTest, DISABLED_DoesAbc) \{ ... \}\par
\par
class DISABLED_BarTest : public ::testing::Test \{ ... \};\par
\par
// Tests that Bar does Xyz.\par
TEST_F(DISABLED_BarTest, DoesXyz) \{ ... \}\par
}
} \par
{\i {\i Note:}  This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, Google Test will print a banner warning you if a test program contains any disabled tests.} \par
{\i {\i Tip:}  You can easily count the number of disabled tests you have using {\f2 grep} . This number can be used as a metric for improving your test quality.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Enabling Disabled Tests} \par}
} \par
{\i } \par
{\i To include {\f2 disabled tests} in test execution, just invoke the test program with the {\f2 --gtest_also_run_disabled_tests}  flag or set the {\f2 GTEST_ALSO_RUN_DISABLED_TESTS}  environment variable to a value other than {\f2 0} . You can combine this with the {\f2 \'96gtest_filter} flag to further select which disabled tests to run.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Repeating the Tests} \par}
} \par
{\i } \par
{\i Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.} \par
{\i The {\f2 --gtest_repeat}  flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here's how to use it:} \par
{\i \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000}  \cell }{Repeat foo_test 1000 times and don't stop at failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=-1}  \cell }{A negative count means repeating forever. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_break_on_failure}  \cell }{Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_filter=FooBar}  \cell }{Repeat the tests whose name matches the filter 1000 times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
If your test program contains global set-up/tear-down code registered using {\f2 AddGlobalTestEnvironment()} , it will be repeated in each iteration as well, as the flakiness may be in it. You can also specify the repeat count by setting the {\f2 GTEST_REPEAT}  environment variable.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Shuffling the Tests} \par}
} \par
{\i } \par
{\i You can specify the {\f2 --gtest_shuffle}  flag (or set the {\f2 GTEST_SHUFFLE}  environment variable to {\f2 1} ) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.} \par
{\i By default, Google Test uses a random seed calculated from the current time. Therefore you'll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the {\f2 --gtest_random_seed=SEED}  flag (or set the {\f2 GTEST_RANDOM_SEED}  environment variable), where {\f2 SEED}  is an integer between 0 and 99999. The seed value 0 is special: it tells Google Test to do the default behavior of calculating the seed from the current time.} \par
{\i If you combine this with {\f2 --gtest_repeat=N} , Google Test will pick a different random seed and re-shuffle the tests in each iteration.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.4.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling Test Output} \par}
} \par
{\i } \par
{\i This section teaches how to tweak the way test results are reported.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Colored Terminal Output} \par}
} \par
{\i } \par
{\i Google Test can use colors in its terminal output to make it easier to spot the separation between tests, and whether tests passed.} \par
{\i You can set the GTEST_COLOR environment variable or set the {\f2 --gtest_color}  command line flag to {\f2 yes} , {\f2 no} , or {\f2 auto}  (the default) to enable colors, disable colors, or let Google Test decide. When the value is {\f2 auto} , Google Test will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the {\f2 TERM}  environment variable is set to {\f2 xterm}  or {\f2 xterm-color} .} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Suppressing the Elapsed Time} \par}
} \par
{\i } \par
{\i By default, Google Test prints the time it takes to run each test. To suppress that, run the test program with the {\f2 --gtest_print_time=0}  command line flag. Setting the {\f2 GTEST_PRINT_TIME}  environment variable to {\f2 0}  has the same effect.} \par
{\i {\i Availability:}  Linux, Windows, Mac. (In Google Test 1.3.0 and lower, the default behavior is that the elapsed time is {\b not}  printed.)} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating an XML Report} \par}
} \par
{\i } \par
{\i Google Test can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.} \par
{\i To generate the XML report, set the {\f2 GTEST_OUTPUT}  environment variable or the {\f2 --gtest_output}  flag to the string {\f2 "xml:_path_to_output_file_"} , which will create the file at the given location. You can also just use the string {\f2 "xml"} , in which case the output can be found in the {\f2 test_detail.xml}  file in the current directory.} \par
{\i If you specify a directory (for example, {\f2 "xml:output/directory/"}  on Linux or {\f2 "xml:output\\directory\\"}  on Windows), Google Test will create the XML file in that directory, named after the test executable (e.g. {\f2 foo_test.xml}  for test program {\f2 foo_test}  or {\f2 foo_test.exe} ). If the file already exists (perhaps left over from a previous run), Google Test will pick a different name (e.g. {\f2 foo_test_1.xml} ) to avoid overwriting it.} \par
{\i The report uses the format described here. It is based on the {\f2 junitreport}  Ant task and can be parsed by popular continuous build systems like {\f2 Hudson}. Since that format was originally intended for Java, a little interpretation is required to make it apply to Google Test tests, as shown here:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <testsuites name="AllTests" ...>\par
  <testsuite name="test_case_name" ...>\par
    <testcase name="test_name" ...>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The root {\f2 <testsuites>}  element corresponds to the entire test program.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testsuite>}  elements correspond to Google Test test cases.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testcase>}  elements correspond to Google Test test functions.\par}
} \par
{\i For instance, the following program} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MathTest, Addition) \{ ... \}\par
TEST(MathTest, Subtraction) \{ ... \}\par
TEST(LogicTest, NonContradiction) \{ ... \}\par
}
} \par
{\i could generate this report:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <?xml version="1.0" encoding="UTF-8"?>\par
<testsuites tests="3" failures="1" errors="0" time="35" name="AllTests">\par
  <testsuite name="MathTest" tests="2" failures="1"* errors="0" time="15">\par
    <testcase name="Addition" status="run" time="7" classname="">\par
      <failure message="Value of: add(1, 1)&#x0A; Actual: 3&#x0A;Expected: 2" type=""/>\par
      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>\par
    </testcase>\par
    <testcase name="Subtraction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
  <testsuite name="LogicTest" tests="1" failures="0" errors="0" time="5">\par
    <testcase name="NonContradiction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i Things to note:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 tests}  attribute of a {\f2 <testsuites>}  or {\f2 <testsuite>}  element tells how many test functions the Google Test program or test case contains, while the {\f2 failures}  attribute tells how many of them failed.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 time}  attribute expresses the duration of the test, test case, or entire test program in milliseconds.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Each {\f2 <failure>}  element corresponds to a single failed Google Test assertion.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Some JUnit concepts don't apply to Google Test, yet we have to conform to the DTD. Therefore you'll see some dummy elements and attributes in the report. You can safely ignore these parts.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Failures Are Reported} \par}
} \par
{\i } \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Turning Assertion Failures into Break-Points} \par}
} \par
{\i } \par
{\i When running test programs under a debugger, it's very convenient if the debugger can catch an assertion failure and automatically drop into interactive mode. Google Test's {\i break-on-failure}  mode supports this behavior.} \par
{\i To enable it, set the {\f2 GTEST_BREAK_ON_FAILURE}  environment variable to a value other than {\f2 0}  . Alternatively, you can use the {\f2 --gtest_break_on_failure}  command line flag.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Suppressing Pop-ups Caused by Exceptions} \par}
} \par
{\i } \par
{\i On Windows, Google Test may be used with exceptions enabled. Even when exceptions are disabled, an application can still throw structured exceptions (SEH's). If a test throws an exception, by default Google Test doesn't try to catch it. Instead, you'll see a pop-up dialog, at which point you can attach the process to a debugger and easily find out what went wrong.} \par
{\i However, if you don't want to see the pop-ups (for example, if you run the tests in a batch job), set the {\f2 GTEST_CATCH_EXCEPTIONS}  environment variable to a non- {\f2 0}  value, or use the {\f2 --gtest_catch_exceptions}  flag. Google Test now catches all test-thrown exceptions and logs them as failures.} \par
{\i {\i Availability:}  Windows. {\f2 GTEST_CATCH_EXCEPTIONS}  and {\f2 --gtest_catch_exceptions}  have no effect on Google Test's behavior on Linux or Mac, even if exceptions are enabled. It is possible to add support for catching exceptions on these platforms, but it is not implemented yet.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Letting Another Testing Framework Drive} \par}
} \par
{\i } \par
{\i If you work on a project that has already been using another testing framework and is not ready to completely switch to Google Test yet, you can get much of Google Test's benefit by using its assertions in your existing tests. Just change your {\f2 main()}  function to look like:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <gtest/gtest.h>\par
\par
int main(int argc, char** argv) \{\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  // Important: Google Test must be initialized.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  ... whatever your existing testing framework requires ...\par
\}\par
}
} \par
{\i With that, you can use Google Test assertions in addition to the native assertions your testing framework provides, for example:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooDoesBar() \{\par
  Foo foo;\par
  EXPECT_LE(foo.Bar(1), 100);     // A Google Test assertion.\par
  CPPUNIT_ASSERT(foo.IsEmpty());  // A native assertion.\par
\}\par
}
} \par
{\i If a Google Test assertion fails, it will print an error message and throw an exception, which will be treated as a failure by your host testing framework. If you compile your code with exceptions disabled, a failed Google Test assertion will instead exit your program with a non-zero code, which will also signal a test failure to your test runner.} \par
{\i If you don't write {\f2 ::testing::GTEST_FLAG(throw_on_failure) = true;}  in your {\f2 main()} , you can alternatively enable this feature by specifying the {\f2 --gtest_throw_on_failure}  flag on the command-line or setting the {\f2 GTEST_THROW_ON_FAILURE}  environment variable to a non-zero value.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Distributing Test Functions to Multiple Machines} \par}
} \par
{\i } \par
{\i If you have more than one machine you can use to run a test program, you might want to run the test functions in parallel and get the result faster. We call this technique {\i sharding} , where each machine is called a {\i shard} .} \par
{\i Google Test is compatible with test sharding. To take advantage of this feature, your test runner (not part of Google Test) needs to do the following:} \par
{\i {
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allocate a number of machines (shards) to run the tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_TOTAL_SHARDS}  environment variable to the total number of shards. It must be the same for all shards.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_SHARD_INDEX}  environment variable to the index of the shard. Different shards must be assigned different indices, which must be in the range {\f2 [0, GTEST_TOTAL_SHARDS - 1]} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the same test program on all shards. When Google Test sees the above two environment variables, it will select a subset of the test functions to run. Across all shards, each test function in the program will be run exactly once.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for all shards to finish, then collect and report the results.\par}
} \par
{\i Your project may have tests that were written without Google Test and thus don't understand this protocol. In order for your test runner to figure out which test supports sharding, it can set the environment variable {\f2 GTEST_SHARD_STATUS_FILE}  to a non-existent file path. If a test program supports sharding, it will create this file to acknowledge the fact (the actual contents of the file are not important at this time; although we may stick some useful information in it in the future.); otherwise it will not create it.} \par
{\i Here's an example to make it clear. Suppose you have a test program {\f2 foo_test}  that contains the following 5 test functions: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(A, V)\par
TEST(A, W)\par
TEST(B, X)\par
TEST(B, Y)\par
TEST(B, Z)\par
}
 and you have 3 machines at your disposal. To run the test functions in parallel, you would set {\f2 GTEST_TOTAL_SHARDS}  to 3 on all machines, and set {\f2 GTEST_SHARD_INDEX}  to 0, 1, and 2 on the machines respectively. Then you would run the same {\f2 foo_test}  on each machine.} \par
{\i Google Test reserves the right to change how the work is distributed across the shards, but here's one possible scenario:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #0 runs {\f2 A.V}  and {\f2 B.X} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #1 runs {\f2 A.W}  and {\f2 B.Y} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #2 runs {\f2 B.Z} .\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Fusing Google Test Source Files} \par}
} \par
{\i } \par
{\i Google Test's implementation consists of ~30 files (excluding its own tests). Sometimes you may want them to be packaged up in two files (a {\f2 .h}  and a {\f2 .cc} ) instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gtest_files.py}  in the {\f2 scripts/}  directory (since release 1.3.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gtest_files.py OUTPUT_DIR\par
}
} \par
{\i and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}}  and {\f2 gtest/gtest-all.cc}  in it. These files contain everything you need to use Google Test. Just copy them to anywhere you want and you are ready to write tests. You can use the {\f2 scrpts/test/Makefile} file as an example on how to compile your tests against them.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
} \par
{\i } \par
{\i Congratulations! You've now learned more advanced Google Test tools and are ready to tackle more complex testing tasks. If you want to dive even deeper, you can read the FAQ. } \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_5_Documentation{\tc \v V1_5_Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAENU}
{\bkmkend AAAAAAAENU}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all official documentation wiki pages for Google Test {\b 1.5.0}  \'96 {\b if you use a different version of Google Test, make sure to read the documentation for that version instead.} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Primer \'96 start here if you are new to Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Samples \'96 learn from examples.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
AdvancedGuide \'96 learn more about Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
XcodeGuide \'96 how to use Google Test in Xcode on Mac.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Frequently-Asked Questions \'96 check here before asking a question on the mailing list.\par}
To contribute code to Google Test, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
PumpManual \'96 how we generate some of Google Test's source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_5_FAQ{\tc \v V1_5_FAQ}\par \pard\plain 
{\bkmkstart AAAAAAAENV}
{\bkmkend AAAAAAAENV}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you cannot find the answer to your question here, and you have read Primer and AdvancedGuide, send it to {\f2 googletestframework@googlegroups.com}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I use Google Test instead of my favorite C++ testing framework?} \par}
First, let's say clearly that we don't want to get into the debate of which C++ testing framework is {\b the best} . There exist many fine frameworks for writing C++ tests, and we have tremendous respect for the developers and users of them. We don't think there is (or will be) a single best framework - you have to pick the right tool for the particular task you are tackling.\par
We created Google Test because we couldn't find the right combination of features and conveniences in an existing framework to satisfy {\i our}  needs. The following is a list of things that {\i we}  like about Google Test. We don't claim them to be unique to Google Test - rather, the combination of them makes Google Test the choice for us. We hope this list can help you decide whether it is for you too.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test is designed to be portable. It works where many STL types (e.g. {\f2 std::string}  and {\f2 std::vector} ) don't compile. It doesn't require exceptions or RTTI. As a result, it runs on Linux, Mac OS X, Windows and several embedded operating systems.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Nonfatal assertions ({\f2 EXPECT_*} ) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. {\f2 ASSERT_EQ(5, Foo(i)) << " where i = " << i;} . It doesn't require a new set of macros or special functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
No framework can anticipate all your needs, so Google Test provides {\f2 EXPECT_PRED*}  to make it easy to extend your assertion vocabulary. For a nicer syntax, you can define your own assertion macros trivially in terms of {\f2 EXPECT_PRED*} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 SCOPED_TRACE}  helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can decide which tests to run using name patterns. This saves time when you want to quickly reproduce a test failure.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I generate 64-bit binaries on Windows (using Visual Studio 2008)?} \par}
(Answered by Trevor Robinson)\par
Load the supplied Visual Studio solution file, either {\f2 msvc\\gtest-md.sln}  or {\f2 msvc\\gtest.sln} . Go through the migration wizard to migrate the solution and project files to Visual Studio 2008. Select {\f2 Configuration Manager...}  from the {\f2 Build}  menu. Select {\f2 <New...>}  from the {\f2 Active solution platform}  dropdown. Select {\f2 x64}  from the new platform dropdown, leave {\f2 Copy settings from}  set to {\f2 Win32}  and {\f2 Create new project platforms}  checked, then click {\f2 OK} . You now have {\f2 Win32}  and {\f2 x64}  platform configurations, selectable from the {\f2 Standard}  toolbar, which allow you to toggle between building 32-bit or 64-bit binaries (or both at once using Batch Build).\par
In order to prevent build output files from overwriting one another, you'll need to change the {\f2 Intermediate Directory}  settings for the newly created platform configuration across all the projects. To do this, multi-select (e.g. using shift-click) all projects (but not the solution) in the {\f2 Solution Explorer} . Right-click one of them and select {\f2 Properties} . In the left pane, select {\f2 Configuration Properties} , and from the {\f2 Configuration}  dropdown, select {\f2 All Configurations} . Make sure the selected platform is {\f2 x64} . For the {\f2 Intermediate Directory}  setting, change the value from {\f2 \\}  to {\f2 \\} . Click {\f2 OK}  and then build the solution. When the build is complete, the 64-bit binaries will be in the {\f2 msvc\\x64\\Debug}  directory.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I use Google Test on MinGW?} \par}
We haven't tested this ourselves, but Per Abrahamsen reported that he was able to compile and install Google Test successfully when using MinGW from Cygwin. You'll need to configure it with:\par
{\f2 PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"} \par
You should be able to replace the {\f2 -mno-cygwin}  option with direct links to the real MinGW binaries, but we haven't tried that.\par
Caveats:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There are many warnings when compiling.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 make check}  will produce some errors as not all tests for Google Test itself are compatible with MinGW.\par}
We also have reports on successful cross compilation of Google Test MinGW binaries on Linux using {\f2 these instructions} on the WxWidgets site.\par
Please contact {\f2 googletestframework@googlegroups.com}  if you are interested in improving the support for MinGW.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test support EXPECT_EQ(NULL, ptr) and ASSERT_EQ(NULL, ptr) but not EXPECT_NE(NULL, ptr) and ASSERT_NE(NULL, ptr)?} \par}
Due to some peculiarity of C++, it requires some non-trivial template meta programming tricks to support using {\f2 NULL}  as an argument of the {\f2 EXPECT_XX()}  and {\f2 ASSERT_XX()}  macros. Therefore we only do it where it's most needed (otherwise we make the implementation of Google Test harder to maintain and more error-prone than necessary).\par
The {\f2 EXPECT_EQ()}  macro takes the {\i expected}  value as its first argument and the {\i actual}  value as the second. It's reasonable that someone wants to write {\f2 EXPECT_EQ(NULL, some_expression)} , and this indeed was requested several times. Therefore we implemented it.\par
The need for {\f2 EXPECT_NE(NULL, ptr)}  isn't nearly as strong. When the assertion fails, you already know that {\f2 ptr}  must be {\f2 NULL} , so it doesn't add any information to print ptr in this case. That means {\f2 EXPECT_TRUE(ptr ! NULL)}  works just as well.\par
If we were to support {\f2 EXPECT_NE(NULL, ptr)} , for consistency we'll have to support {\f2 EXPECT_NE(ptr, NULL)}  as well, as unlike {\f2 EXPECT_EQ} , we don't have a convention on the order of the two arguments for {\f2 EXPECT_NE} . This means using the template meta programming tricks twice in the implementation, making it even harder to understand and maintain. We believe the benefit doesn't justify the cost.\par
Finally, with the growth of Google {\b Mock}'s {\f2 matcher} library, we are encouraging people to use the unified {\f2 EXPECT_THAT(value, matcher)}  syntax more often in tests. One significant advantage of the matcher approach is that matchers can be easily combined to form new matchers, while the {\f2 EXPECT_NE} , etc, macros cannot be easily combined. Therefore we want to invest more in the matchers than in the {\f2 EXPECT_XX()}  macros.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Does Google Test support running tests in parallel?} \par}
Test runners tend to be tightly coupled with the build/test environment, and Google Test doesn't try to solve the problem of running tests in parallel. Instead, we tried to make Google Test work nicely with test runners. For example, Google Test's XML report contains the time spent on each test, and its {\f2 gtest_list_tests}  and {\f2 gtest_filter}  flags can be used for splitting the execution of test methods into multiple processes. These functionalities can help the test runner run the tests in parallel.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't Google Test run the tests in different threads to speed things up?} \par}
It's difficult to write thread-safe code. Most tests are not written with thread-safety in mind, and thus may not work correctly in a multi-threaded setting.\par
If you think about it, it's already hard to make your code work when you know what other threads are doing. It's much harder, and sometimes even impossible, to make your code work when you don't know what other threads are doing (remember that test methods can be added, deleted, or modified after your test was written). If you want to run the tests in parallel, you'd better run them in different processes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why aren't Google Test assertions implemented using exceptions?} \par}
Our original motivation was to be able to use Google Test in projects that disable exceptions. Later we realized some additional benefits of this approach:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Throwing in a destructor is undefined behavior in C++. Not using exceptions means Google Test's assertions are safe to use in destructors.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 EXPECT_*}  family of macros will continue even after a failure, allowing multiple failures in a {\f2 TEST}  to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If assertions are implemented using exceptions, a test may falsely ignore a failure if it's caught by user code: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid try \{ ... ASSERT_TRUE(...) ... \}\par
catch (...) \{ ... \}\par
}
 The above code will pass even if the {\f2 ASSERT_TRUE}  throws. While it's unlikely for someone to write this in a test, it's possible to run into this pattern when you write assertions in callbacks that are called by the code under test.\par}
The downside of not using exceptions is that {\f2 ASSERT_*}  (implemented using {\f2 return} ) will only abort the current function, not the current {\f2 TEST} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why do we use two different macros for tests with and without fixtures?} \par}
Unfortunately, C++'s macro system doesn't allow us to use the same macro for both cases. One possibility is to provide only one macro for tests with fixtures, and require the user to define an empty fixture sometimes:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\};\par
\par
TEST_F(FooTest, DoesThis) \{ ... \}\par
}
 or {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Test FooTest;\par
\par
TEST_F(FooTest, DoesThat) \{ ... \}\par
}
\par
Yet, many people think this is one line too many. :-) Our goal was to make it really easy to write tests, so we tried to make simple tests trivial to create. That means using a separate macro for such tests.\par
We think neither approach is ideal, yet either of them is reasonable. In the end, it probably doesn't matter much either way.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't we use structs as test fixtures?} \par}
We like to use structs only when representing passive data. This distinction between structs and classes is good for documenting the intent of the code's author. Since test fixtures have logic like {\f2 SetUp()}  and {\f2 TearDown()} , they are better defined as classes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why are death tests implemented as assertions instead of using a test runner?} \par}
Our goal was to make death tests as convenient for a user as C++ possibly allows. In particular:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect. The death test would be written in C++, while the runner spec may or may not be. A user needs to carefully keep the two in sync. {\f2 ASSERT_DEATH(statement, expected_message)}  specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can be mixed with other assertions and other logic at your will. You are not limited to one death test per test method. For example, you can write something like: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (FooCondition()) \{\par
  ASSERT_DEATH(Bar(), "blah");\par
\} else \{\par
  ASSERT_EQ(5, Bar());\par
\}\par
}
 If you prefer one death test per test method, you can write your tests in that style too, but we don't want to impose that on the users. The fewer artificial limitations the better.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can reference local variables in the current function, and you can decide how many death tests you want based on run-time information. For example, {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int count = GetCount();  // Only known at run time.\par
for (int i = 1; i <= count; i++) \{\par
  ASSERT_DEATH(\{\par
    double* buffer = new double[i];\par
    ... initializes buffer ...\par
    Foo(buffer, i)\par
  \}, "blah blah");\par
\}\par
}
 The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.\par}
Another interesting thing about {\f2 ASSERT_DEATH}  is that it calls {\f2 fork()}  to create a child process to run the death test. This is lightening fast, as {\f2 fork()}  uses copy-on-write pages and incurs almost zero overhead, and the child process starts from the user-supplied statement directly, skipping all global and local initialization and any code leading to the given statement. If you launch the child process from scratch, it can take seconds just to load everything and start running if the test links to many libraries dynamically.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test modifies some state, but the change seems lost after the death test finishes. Why?} \par}
Death tests ({\f2 EXPECT_DEATH} , etc) are executed in a sub-process s.t. the expected crash won't kill the test program (i.e. the parent process). As a result, any in-memory side effects they incur are observable in their respective sub-processes, but not in the parent process. You can think of them as running in a parallel universe, more or less.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "undefined references" to some static const member variables, but I did define them in the class body. What's wrong?} \par}
If your class has a static data member:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
  static const int kBar = 100;\par
\};\par
}
\par
You also need to define it {\i outside}  of the class body in {\f2 foo.cc} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int Foo::kBar;  // No initializer here.\par
}
\par
Otherwise your code is **invalid C++**, and may break in unexpected ways. In particular, using it in Google Test comparison assertions ({\f2 EXPECT_EQ} , etc) will generate an "undefined reference" linker error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have an interface that has several implementations. Can I write a set of tests once and repeat them over all the implementations?} \par}
Google Test doesn't yet have good support for this kind of tests, or data-driven tests in general. We hope to be able to make improvements in this area soon.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I derive a test fixture from another?} \par}
Yes.\par
Each test fixture has a corresponding and same named test case. This means only one test case can use a particular fixture. Sometimes, however, multiple test cases may want to use the same or slightly different fixtures. For example, you may want to make sure that all of a GUI library's test cases don't leak important system resources like fonts and brushes.\par
In Google Test, you share a fixture among test cases by putting the shared logic in a base test fixture, then deriving from that base a separate fixture for each test case that wants to use this common logic. You then use {\f2 {\b TEST_F()}}  to write tests using each derived fixture.\par
Typically, your code looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Defines a base test fixture.\par
class BaseTest : public ::testing::Test \{\par
  protected:\par
   ...\par
\};\par
\par
// Derives a fixture FooTest from BaseTest.\par
class FooTest : public BaseTest \{\par
  protected:\par
    virtual void SetUp() \{\par
      BaseTest::SetUp();  // Sets up the base fixture first.\par
      ... additional set-up work ...\par
    \}\par
    virtual void TearDown() \{\par
      ... clean-up work for FooTest ...\par
      BaseTest::TearDown();  // Remember to tear down the base fixture\par
                             // after cleaning up FooTest!\par
    \}\par
    ... functions and variables for FooTest ...\par
\};\par
\par
// Tests that use the fixture FooTest.\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
... additional fixtures derived from BaseTest ...\par
}
\par
If necessary, you can continue to derive test fixtures from a derived fixture. Google Test has no limit on how deep the hierarchy can be.\par
For a complete example using derived test fixtures, see {\f2 samples/sample5_unittest.cc} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains "void value not ignored as it ought to be." What does this mean?} \par}
You're probably using an {\f2 ASSERT_*()}  in a function that doesn't return {\f2 void} . {\f2 ASSERT_*()}  can only be used in {\f2 void}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test hangs (or seg-faults). How do I fix it?} \par}
In Google Test, death tests are run in a child process and the way they work is delicate. To write death tests you really need to understand how they work. Please make sure you have read this.\par
In particular, death tests don't like having multiple threads in the parent process. So the first thing you can try is to eliminate creating threads outside of {\f2 EXPECT_DEATH()} .\par
Sometimes this is impossible as some library you must use may be creating threads before {\f2 main()}  is even reached. In this case, you can try to minimize the chance of conflicts by either moving as many activities as possible inside {\f2 EXPECT_DEATH()}  (in the extreme case, you want to move everything inside), or leaving as few things as possible in it. Also, you can try to set the death test style to {\f2 "threadsafe"} , which is safer but slower, and see if it helps.\par
If you go with thread-safe death tests, remember that they rerun the test program from the beginning in the child process. Therefore make sure your program can run side-by-side with itself and is deterministic.\par
In the end, this boils down to good concurrent programming. You have to make sure that there is no race conditions or dead locks in your program. No silver bullet - sorry!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Should I use the constructor/destructor of the test fixture or the set-up/tear-down function?} \par}
The first thing to remember is that Google Test does not reuse the same test fixture object across multiple tests. For each {\f2 TEST_F} , Google Test will create a fresh test fixture object, {\i immediately}  call {\f2 SetUp()} , run the test, call {\f2 TearDown()} , and then {\i immediately}  delete the test fixture object. Therefore, there is no need to write a {\f2 SetUp()}  or {\f2 TearDown()}  function if the constructor or destructor already does the job.\par
You may still want to use {\f2 SetUp()/TearDown()}  in the following cases:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the tear-down operation could throw an exception, you must use {\f2 TearDown()}  as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer {\f2 TearDown()}  if you want to write portable tests that work with or without exceptions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The Google Test team is considering making the assertion macros throw on platforms where exceptions are enabled (e.g. Windows, Mac OS, and Linux client-side), which will eliminate the need for the user to propagate failures from a subroutine to its caller. Therefore, you shouldn't use Google Test assertions in a destructor if your code could run on such a platform.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use {\f2 SetUp()/TearDown()} .\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains "no matching function to call" when I use ASSERT_PREDn. How do I fix it?} \par}
If the predicate function you use in {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*}  is overloaded or a template, the compiler will have trouble figuring out which overloaded version it should use. {\f2 ASSERT_PRED_FORMAT*}  and {\f2 EXPECT_PRED_FORMAT*}  don't have this problem.\par
If you see this error, you might want to switch to {\f2 (ASSERT|EXPECT)_PRED_FORMAT*} , which will also give you a better failure message. If, however, that is not an option, you can resolve the problem by explicitly telling the compiler which version to pick.\par
For example, suppose you have\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsPositive(int n) \{\par
  return n > 0;\par
\}\par
bool IsPositive(double x) \{\par
  return x > 0;\par
\}\par
}
\par
you will get a compiler error if you write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(IsPositive, 5);\par
}
\par
However, this will work:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(*static_cast<bool (*)(int)>*(IsPositive), 5);\par
}
\par
(The stuff inside the angled brackets for the {\f2 static_cast}  operator is the type of the function pointer for the {\f2 int} -version of {\f2 IsPositive()} .)\par
As another example, when you have a template function\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
bool IsNegative(T x) \{\par
  return x < 0;\par
\}\par
}
\par
you can use it in a predicate assertion like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED1(IsNegative*<int>*, -5);\par
}
\par
Things are more interesting if your template has more than one parameters. The following won't compile:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*GreaterThan<int, int>*, 5, 0);\par
}
\par
as the C++ pre-processor thinks you are giving {\f2 ASSERT_PRED2}  4 arguments, which is one more than expected. The workaround is to wrap the predicate function in parentheses:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*(GreaterThan<int, int>)*, 5, 0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains about "ignoring return value" when I call RUN_ALL_TESTS(). Why?} \par}
Some people had been ignoring the return value of {\f2 RUN_ALL_TESTS()} . That is, instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid return RUN_ALL_TESTS();\par
}
\par
they write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid RUN_ALL_TESTS();\par
}
\par
This is wrong and dangerous. A test runner needs to see the return value of {\f2 RUN_ALL_TESTS()}  in order to determine if a test has passed. If your {\f2 main()}  function ignores it, your test will be considered successful even if it has a Google Test assertion failure. Very bad.\par
To help the users avoid this dangerous bug, the implementation of {\f2 RUN_ALL_TESTS()}  causes gcc to raise this warning, when the return value is ignored. If you see this warning, the fix is simple: just make sure its value is used as the return value of {\f2 main()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains that a constructor (or destructor) cannot return a value. What's going on?} \par}
Due to a peculiarity of C++, in order to support the syntax for streaming messages to an {\f2 ASSERT_*} , e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(1, Foo()) << "blah blah" << foo;\par
}
\par
we had to give up using {\f2 ASSERT*}  and {\f2 FAIL*}  (but not {\f2 EXPECT*}  and {\f2 ADD_FAILURE*} ) in constructors and destructors. The workaround is to move the content of your constructor/destructor to a private void member function, or switch to {\f2 EXPECT_*()}  if that works. This section in the user's guide explains it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My set-up function is not called. Why?} \par}
C++ is case-sensitive. It should be spelled as {\f2 SetUp()} . Did you spell it as {\f2 Setup()} ?\par
Similarly, sometimes people spell {\f2 SetUpTestCase()}  as {\f2 SetupTestCase()}  and wonder why it's never called.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I jump to the line of a failure in Emacs directly?} \par}
Google Test's failure message format is understood by Emacs and many other IDEs, like acme and XCode. If a Google Test message is in a compilation buffer in Emacs, then it's clickable. You can now hit {\f2 enter}  on a message to jump to the corresponding source code, or use {\f2 C-x} ` to jump to the next failure.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have several test cases which share the same test fixture logic, do I have to define a new test fixture class for each of them? This seems pretty tedious.} \par}
You don't have to. Instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public BaseTest \{\};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
class BarTest : public BaseTest \{\};\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
you can simply {\f2 typedef}  the test fixtures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef BaseTest FooTest;\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef BaseTest BarTest;\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Google Test output is buried in a whole bunch of log messages. What do I do?} \par}
The Google Test output is meant to be a concise and human-friendly report. If your test generates textual output itself, it will mix with the Google Test output, making it hard to read. However, there is an easy solution to this problem.\par
Since most log messages go to stderr, we decided to let Google Test output go to stdout. This way, you can easily separate the two using redirection. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ./my_test > googletest_output.txt\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I prefer test fixtures over global variables?} \par}
There are several good reasons:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It's likely your test needs to change the states of its global variables. This makes it difficult to keep side effects from escaping one test and contaminating others, making debugging difficult. By using fixtures, each test has a fresh set of variables that's different (but with the same names). Thus, tests are kept independent of each other.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Global variables pollute the global namespace.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test fixtures can be reused via subclassing, which cannot be done easily with global variables. This is useful if many test cases have something in common.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class members without writing FRIEND_TEST()s?} \par}
You should try to write testable code, which means classes should be easily tested from their public interface. One way to achieve this is the Pimpl idiom: you move all private members of a class into a helper class, and make all members of the helper class public.\par
You have several other options that don't require using {\f2 FRIEND_TEST} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Write the tests as members of the fixture class: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  void Test1() \{...\} // This accesses private members of class Foo.\par
  void Test2() \{...\} // So does this one.\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  Test1();\par
\}\par
\par
TEST_F(FooTest, Test2) \{\par
  Test2();\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In the fixture class, write accessors for the tested class' private members, then use the accessors in your tests: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  T1 get_private_member1(Foo* obj) \{\par
    return obj->private_member1_;\par
  \}\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  ...\par
  get_private_member1(x)\par
  ...\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the methods are declared {\b protected} , you can change their access level in a test-only subclass: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class YourClass \{\par
  ...\par
 protected: // protected access for testability.\par
  int DoSomethingReturningInt();\par
  ...\par
\};\par
\par
// in the your_class_test.cc file:\par
class TestableYourClass : public YourClass \{\par
  ...\par
 public: using YourClass::DoSomethingReturningInt; // changes access rights\par
  ...\par
\};\par
\par
TEST_F(YourClassTest, DoSomethingTest) \{\par
  TestableYourClass obj;\par
  assertEquals(expected_value, obj.DoSomethingReturningInt());\par
\}\par
}
\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class static members without writing FRIEND_TEST()s?} \par}
We find private static methods clutter the header file. They are implementation details and ideally should be kept out of a .h. So often I make them free functions instead.\par
Instead of: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
 private:\par
  static bool Func(int n);\par
\};\par
\par
// foo.cc\par
bool Foo::Func(int n) \{ ... \}\par
\par
// foo_test.cc\par
EXPECT_TRUE(Foo::Func(12345));\par
}
\par
You probably should better write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
\};\par
\par
// foo.cc\par
namespace internal \{\par
  bool Func(int n) \{ ... \}\par
\}\par
\par
// foo_test.cc\par
namespace internal \{\par
  bool Func(int n);\par
\}\par
\par
EXPECT_TRUE(internal::Func(12345));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I would like to run a test several times with different parameters. Do I need to write several similar copies of it?} \par}
No. You can use a feature called {\f2 value-parameterized tests} which lets you repeat your tests with different parameters, without defining it more than once.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test a file that defines main()?} \par}
To test a {\f2 foo.cc}  file, you need to compile and link it into your unit test program. However, when the file contains a definition for the {\f2 main()}  function, it will clash with the {\f2 main()}  of your unit test, and will result in a build error.\par
The right solution is to split it into three files:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.h}  which contains the declarations,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.cc}  which contains the definitions except {\f2 main()} , and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo_main.cc}  which contains nothing but the definition of {\f2 main()} .\par}
Then {\f2 foo.cc}  can be easily tested.\par
If you are adding tests to an existing file and don't want an intrusive change like this, there is a hack: just include the entire {\f2 foo.cc}  file in your unit test. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File foo_unittest.cc\par
\par
// The headers section\par
...\par
\par
// Renames main() in foo.cc to make room for the unit test main()\par
#define main FooMain\par
\par
#include "a/b/foo.cc"\par
\par
// The tests start here.\par
...\par
}
\par
However, please remember this is a hack and should only be used as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What can the statement argument in ASSERT_DEATH() be?} \par}
{\f2 ASSERT_DEATH(_statement_, _regex_)}  (or any death assertion macro) can be used wherever {\f2 _statement_}  is valid. So basically {\f2 _statement_}  can be any C++ statement that makes sense in the current context. In particular, it can reference global and/or local variables, and can be:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a simple function call (often the case),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a complex expression, or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a compound statement.\par}
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Some examples are shown here: \par
}{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A death test can be a simple function call.\par
TEST(MyDeathTest, FunctionCall) \{\par
  ASSERT_DEATH(Xyz(5), "Xyz failed");\par
\}\par
\par
// Or a complex expression that references variables and functions.\par
TEST(MyDeathTest, ComplexExpression) \{\par
  const bool c = Condition();\par
  ASSERT_DEATH((c ? Func1(0) : object2.Method("test")),\par
               "(Func1|Method) failed");\par
\}\par
\par
// Death assertions can be used any where in a function. In\par
// particular, they can be inside a loop.\par
TEST(MyDeathTest, InsideLoop) \{\par
  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\par
  for (int i = 0; i < 5; i++) \{\par
    EXPECT_DEATH_M(Foo(i), "Foo has \\\\d+ errors",\par
                   ::testing::Message() << "where i is " << i);\par
  \}\par
\}\par
\par
// A death assertion can contain a compound statement.\par
TEST(MyDeathTest, CompoundStatement) \{\par
  // Verifies that at lease one of Bar(0), Bar(1), ..., and\par
  // Bar(4) dies.\par
  ASSERT_DEATH(\{\par
    for (int i = 0; i < 5; i++) \{\par
      Bar(i);\par
    \}\par
  \},\par
  "Bar has \\\\d+ errors");\}\par
}
\par
{\f2 googletest_unittest.cc}  contains more examples if you are interested.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What syntax does the regular expression in ASSERT_DEATH use?} \par}
On POSIX systems, Google Test uses the POSIX Extended regular expression syntax ({\f2 http://en.wikipedia.org/wiki/Regular_expression#POSIX_Extended_Regular_Expressions}). On Windows, it uses a limited variant of regular expression syntax. For more details, see the {\f2 regular expression syntax}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a fixture class Foo, but TEST_F(Foo, Bar) gives me error "no matching function for call to Foo::Foo()". Why?} \par}
Google Test needs to be able to create objects of your test fixture class, so it must have a default constructor. Normally the compiler will define one for you. However, there are cases where you have to define your own:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you explicitly declare a non-default constructor for class {\f2 Foo} , then you need to define a default constructor, even if it would be empty.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Foo}  has a const non-static data member, then you have to define the default constructor {\i and}  initialize the const member in the initializer list of the constructor. (Early versions of {\f2 gcc}  doesn't force you to initialize the const member. It's a bug that has been fixed in {\f2 gcc 4} .)\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does ASSERT_DEATH complain about previous threads that were already joined?} \par}
With the Linux pthread library, there is no turning back once you cross the line from single thread to multiple threads. The first time you create a thread, a manager thread is created in addition, so you get 3, not 2, threads. Later when the thread you create joins the main thread, the thread count decrements by 1, but the manager thread will never be killed, so you still have 2 threads, which means you cannot safely run a death test.\par
The new NPTL thread library doesn't suffer from this problem, as it doesn't create a manager thread. However, if you don't control which machine your test runs on, you shouldn't depend on this.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test require the entire test case, instead of individual tests, to be named FOODeathTest when it uses ASSERT_DEATH?} \par}
Google Test does not interleave tests from different test cases. That is, it runs all tests in one test case first, and then runs all tests in the next test case, and so on. Google Test does this because it needs to set up a test case before the first test in it is run, and tear it down afterwords. Splitting up the test case would require multiple set-up and tear-down processes, which is inefficient and makes the semantics unclean.\par
If we were to determine the order of tests based on test name instead of test case name, then we would have a problem with the following situation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(FooTest, AbcDeathTest) \{ ... \}\par
TEST_F(FooTest, Uvw) \{ ... \}\par
\par
TEST_F(BarTest, DefDeathTest) \{ ... \}\par
TEST_F(BarTest, Xyz) \{ ... \}\par
}
\par
Since {\f2 FooTest.AbcDeathTest}  needs to run before {\f2 BarTest.Xyz} , and we don't interleave tests from different test cases, we need to run all tests in the {\f2 {\b FooTest}}  case before running any test in the {\f2 BarTest}  case. This contradicts with the requirement to run {\f2 BarTest.DefDeathTest}  before {\f2 FooTest.Uvw} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do?} \par}
You don't have to, but if you like, you may split up the test case into {\f2 {\b FooTest}}  and {\f2 FooDeathTest} , where the names make it clear that they are related:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooDeathTest, Uvw) \{ ... EXPECT_DEATH(...) ... \}\par
TEST_F(FooDeathTest, Xyz) \{ ... ASSERT_DEATH(...) ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "no match for 'operator<<'" when I use an assertion. What gives?} \par}
If you use a user-defined type {\f2 FooType}  in an assertion, you must make sure there is an {\f2 std::ostream& operator<<(std::ostream&, const FooType&)}  function defined such that we can print a value of {\f2 FooType} .\par
In addition, if {\f2 FooType}  is declared in a name space, the {\f2 <<}  operator also needs to be defined in the {\i same}  name space.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I suppress the memory leak messages on Windows?} \par}
Since the statically initialized Google Test singleton requires allocations on the heap, the Visual C++ memory leak detector will report memory leaks at the end of the program run. The easiest way to avoid this is to use the {\f2 _CrtMemCheckpoint}  and {\f2 _CrtMemDumpAllObjectsSince}  calls to not report any statically initialized heap objects. See MSDN for more details and additional heap check/debug routines.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I am building my project with Google Test in Visual Studio and all I'm getting is a bunch of linker errors (or warnings). Help!} \par}
You may get a number of the following linker error or warnings if you attempt to link your test project with the Google Test library when your project and the are not built using the same compiler settings.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK2005: symbol already defined in object\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4217: locally defined symbol 'symbol' imported in function 'function'\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4049: locally defined symbol 'symbol' imported\par}
The Google Test project (gtest.vcproj) has the Runtime Library option set to /MT (use multi-threaded static libraries, /MTd for debug). If your project uses something else, for example /MD (use multi-threaded DLLs, /MDd for debug), you need to change the setting in the Google Test project to match your project's.\par
To update this setting open the project properties in the Visual Studio IDE then select the branch Configuration Properties | C/C++ | Code Generation and change the option "Runtime Library". You may also try using gtest-md.vcproj instead of gtest.vcproj.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I put my tests in a library and Google Test doesn't run them. What's happening?} \par}
Have you read a {\f2 warning} on the Google Test Primer page?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to use Google Test with Visual Studio but don't know where to start.} \par}
Many people are in your position and one of the posted his solution to our mailing list. Here is his link: {\f2 http://hassanjamilahmad.blogspot.com/2009/07/gtest-starters-help.html}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not covered in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other {\f2 wiki pages},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googletestframework@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the revision number if you check out from SVN directly) of Google Test you use (Google Test is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter.\'EF\'9C\'81 \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Introduction: Why Google C++ Testing Framework?{\tc \v Introduction: Why Google C++ Testing Framework?}\par \pard\plain 
{\bkmkstart AAAAAAAENW}
{\bkmkend AAAAAAAENW}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\i Google C++ Testing Framework}  helps you write better C++ tests.\par
No matter whether you work on Linux, Windows, or a Mac, if you write C++ code, Google Test can help you.\par
So what makes a good test, and how does Google C++ Testing Framework fit in? We believe:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i independent}  and {\i repeatable} . It's a pain to debug a test that succeeds or fails as a result of other tests. Google C++ Testing Framework isolates the tests by running each of them on a different object. When a test fails, Google C++ Testing Framework allows you to run it in isolation for quick debugging.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be well {\i organized}  and reflect the structure of the tested code. Google C++ Testing Framework groups related tests into test cases that can share data and subroutines. This common pattern is easy to recognize and makes tests easy to maintain. Such consistency is especially helpful when people switch projects and start to work on a new code base.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i portable}  and {\i reusable} . The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral. Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations. (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When tests fail, they should provide as much {\i information}  about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The testing framework should liberate test writers from housekeeping chores and let them focus on the test {\i content} . Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i fast} . With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\par}
Since Google C++ Testing Framework is based on the popular xUnit architecture, you'll feel right at home if you've used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let's go!\par
{\i Note:}  We sometimes refer to Google C++ Testing Framework informally as {\i Google Test} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting up a New Test Project} \par}
To write a test program using Google Test, you need to compile Google Test into a library and link your test with it. We provide build files for some popular build systems ({\f2 msvc/}  for Visual Studio, {\f2 xcode/}  for Mac Xcode, {\f2 make/}  for GNU make, {\f2 codegear/}  for Borland C++ Builder, and the autotools script in the Google Test root directory). If your build system is not on this list, you can take a look at {\f2 make/Makefile}  to learn how Google Test should be compiled (basically you want to compile {\f2 src/gtest-all.cc}  with {\f2 GTEST_ROOT}  and {\f2 GTEST_ROOT/include}  in the header search path, where {\f2 GTEST_ROOT}  is the Google Test root directory).\par
Once you are able to compile the Google Test library, you should create a project or build target for your test program. Make sure you have {\f2 GTEST_ROOT/include}  in the header search path so that the compiler can find {\f2 <{\b gtest/gtest.h}>}  when compiling your test. Set up your test project to link with the Google Test library (for example, in Visual Studio, this is done by adding a dependency on {\f2 gtest.vcproj} ).\par
If you still have questions, take a look at how Google Test's own tests are built and use them as examples.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Basic Concepts} \par}
When using Google Test, you start by writing {\i assertions} , which are statements that check whether a condition is true. An assertion's result can be {\i success} , {\i nonfatal failure} , or {\i fatal failure} . If a fatal failure occurs, it aborts the current function; otherwise the program continues normally.\par
{\i Tests}  use assertions to verify the tested code's behavior. If a test crashes or has a failed assertion, then it {\i fails} ; otherwise it {\i succeeds} .\par
A {\i test case}  contains one or many tests. You should group your tests into test cases that reflect the structure of the tested code. When multiple tests in a test case need to share common objects and subroutines, you can put them into a {\i test fixture}  class.\par
A {\i test program}  can contain multiple test cases.\par
We'll now explain how to write a test program, starting at the individual assertion level and building up to tests and test cases.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Assertions} \par}
Google Test assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, Google Test prints the assertion's source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to Google Test's message.\par
The assertions come in pairs that test the same thing but have different effects on the current function. {\f2 ASSERT_*}  versions generate fatal failures when they fail, and {\b abort the current function} . {\f2 EXPECT_*}  versions generate nonfatal failures, which don't abort the current function. Usually {\f2 EXPECT_*}  are preferred, as they allow more than one failures to be reported in a test. However, you should use {\f2 ASSERT_*}  if it doesn't make sense to continue when the assertion in question fails.\par
Since a failed {\f2 ASSERT_*}  returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors.\par
To provide a custom failure message, simply stream it into the macro using the {\f2 <<}  operator, or a sequence of such operators. An example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";\par
\par
for (int i = 0; i < x.size(); ++i) \{\par
  EXPECT_EQ(x[i], y[i]) << "Vectors x and y differ at index " << i;\par
\}\par
}
\par
Anything that can be streamed to an {\f2 ostream}  can be streamed to an assertion macro\'96in particular, C strings and {\f2 string}  objects. If a wide string ({\f2 wchar_t*} , {\f2 TCHAR*}  in {\f2 UNICODE}  mode on Windows, or {\f2 std::wstring} ) is streamed to an assertion, it will be translated to UTF-8 when printed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Basic Assertions} \par}
These assertions do basic true/false condition testing. \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_TRUE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_TRUE(} _condition_{\f2 )} ; \cell }{{\i condition}  is true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FALSE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_FALSE(} _condition_{\f2 )} ; \cell }{{\i condition}  is false \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Remember, when they fail, {\f2 ASSERT_*}  yields a fatal failure and returns from the current function, while {\f2 EXPECT_*}  yields a nonfatal failure, allowing the function to continue running. In either case, an assertion failure means its containing test fails.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Binary Comparison} \par}
This section describes assertions that compare two values.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EQ(} _expected_{\f2 ,} _actual_{\f2 );} \cell }{{\f2 EXPECT_EQ(} _expected_{\f2 ,} _actual_{\f2 );} \cell }{{\i expected}  {\f2 ==}  {\i actual}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_NE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 !=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_LT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 <}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_LE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 <=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_GT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 >}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_GE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 >=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the event of a failure, Google Test prints both {\i val1}  and {\i val2}  . In {\f2 ASSERT_EQ*}  and {\f2 EXPECT_EQ*}  (and all other equality assertions we'll introduce later), you should put the expression you want to test in the position of {\i actual} , and put its expected value in {\i expected} , as Google Test's failure messages are optimized for this convention.\par
Value arguments must be comparable by the assertion's comparison operator or you'll get a compiler error. Values must also support the {\f2 <<}  operator for streaming to an {\f2 ostream} . All built-in types support this.\par
These assertions can work with a user-defined type, but only if you define the corresponding comparison operator (e.g. {\f2 ==} , {\f2 <} , etc). If the corresponding operator is defined, prefer using the {\f2 ASSERT_*()}  macros because they will print out not only the result of the comparison, but the two operands as well.\par
Arguments are always evaluated exactly once. Therefore, it's OK for the arguments to have side effects. However, as with any ordinary C/C++ function, the arguments' evaluation order is undefined (i.e. the compiler is free to choose any order) and your code should not depend on any particular argument evaluation order.\par
{\f2 ASSERT_EQ()}  does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Therefore, if you want to compare C strings (e.g. {\f2 const char*} ) by value, use {\f2 ASSERT_STREQ()}  , which will be described later on. In particular, to assert that a C string is {\f2 NULL} , use {\f2 ASSERT_STREQ(NULL, c_string)}  . However, to compare two {\f2 string}  objects, you should use {\f2 ASSERT_EQ} .\par
Macros in this section work with both narrow and wide string objects ({\f2 string}  and {\f2 wstring} ).\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Comparison} \par}
The assertions in this group compare two {\b C strings} . If you want to compare two {\f2 string}  objects, use {\f2 EXPECT_EQ} , {\f2 EXPECT_NE} , and etc instead.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{{\f2 EXPECT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{the two C strings have the same content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{{\f2 EXPECT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );} \cell }{{\f2 EXPECT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{the two C strings have the same content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );} \cell }{{\f2 EXPECT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that "CASE" in an assertion name means that case is ignored.\par
{\f2 *STREQ*}  and {\f2 *STRNE*}  also accept wide C strings ({\f2 wchar_t*} ). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings.\par
A {\f2 NULL}  pointer and an empty string are considered {\i different} .\par
{\i Availability} : Linux, Windows, Mac.\par
See also: For more string comparison tricks (substring, prefix, suffix, and regular expression matching, for example), see the [AdvancedGuide Advanced Google Test Guide].\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Simple Tests} \par}
To create a test:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use the {\f2 TEST()}  macro to define and name a test function, These are ordinary C++ functions that don't return a value.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In this function, along with any valid C++ statements you want to include, use the various Google Test assertions to check values.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.\par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
{\f2 TEST()}  arguments go from general to specific. The {\i first}  argument is the name of the test case, and the {\i second}  argument is the test's name within the test case. Remember that a test case can contain any number of individual tests. A test's {\i full name}  consists of its containing test case and its individual name. Tests from different test cases can have the same individual name.\par
For example, let's take a simple integer function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int Factorial(int n); // Returns the factorial of n\par
}
\par
A test case for this function might look like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests factorial of 0.\par
TEST(FactorialTest, HandlesZeroInput) \{\par
  EXPECT_EQ(1, Factorial(0));\par
\}\par
\par
// Tests factorial of positive numbers.\par
TEST(FactorialTest, HandlesPositiveInput) \{\par
  EXPECT_EQ(1, Factorial(1));\par
  EXPECT_EQ(2, Factorial(2));\par
  EXPECT_EQ(6, Factorial(3));\par
  EXPECT_EQ(40320, Factorial(8));\par
\}\par
}
\par
Google Test groups the test results by test cases, so logically-related tests should be in the same test case; in other words, the first argument to their {\f2 TEST()}  should be the same. In the above example, we have two tests, {\f2 HandlesZeroInput}  and {\f2 HandlesPositiveInput} , that belong to the same test case {\f2 FactorialTest} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Test Fixtures: Using the Same Data Configuration for Multiple Tests} \par}
If you find yourself writing two or more tests that operate on similar data, you can use a {\i test fixture} . It allows you to reuse the same configuration of objects for several different tests.\par
To create a fixture, just:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class from {\f2 {\b testing::Test}}  . Start its body with {\f2 protected:}  or {\f2 public:}  as we'll want to access fixture members from sub-classes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Inside the class, declare any objects you plan to use.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a default constructor or {\f2 SetUp()}  function to prepare the objects for each test. A common mistake is to spell {\f2 SetUp()}  as {\f2 Setup()}  with a small {\f2 u}  - don't let that happen to you.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a destructor or {\f2 TearDown()}  function to release any resources you allocated in {\f2 SetUp()}  . To learn when you should use the constructor/destructor and when you should use {\f2 SetUp()/TearDown()} , read this {\f2 FAQ entry}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If needed, define subroutines for your tests to share.\par}
When using a fixture, use {\f2 {\b TEST_F()}}  instead of {\f2 TEST()}  as it allows you to access objects and subroutines in the test fixture: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
Like {\f2 TEST()} , the first argument is the test case name, but for {\f2 {\b TEST_F()}}  this must be the name of the test fixture class. You've probably guessed: {\f2 _F}  is for fixture.\par
Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error.\par
Also, you must first define a test fixture class before using it in a {\f2 {\b TEST_F()}} , or you'll get the compiler error "`virtual outside class
declaration`".\par
For each test defined with {\f2 {\b TEST_F()}} , Google Test will:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a {\i fresh}  test fixture at runtime\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Immediately initialize it via {\f2 SetUp()}  ,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the test\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Clean up by calling {\f2 TearDown()} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Delete the test fixture. Note that different tests in the same test case have different test fixture objects, and Google Test always deletes a test fixture before it creates the next one. Google Test does not reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.\par}
As an example, let's write tests for a FIFO queue class named {\f2 {\b Queue}} , which has the following interface: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename E> // E is the element type.\par
class Queue \{\par
 public:\par
  Queue();\par
  void Enqueue(const E& element);\par
  E* Dequeue(); // Returns NULL if the queue is empty.\par
  size_t size() const;\par
  ...\par
\};\par
}
\par
First, define a fixture class. By convention, you should give it the name {\f2 {\b FooTest}}  where {\f2 Foo}  is the class being tested. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class QueueTest : public ::testing::Test \{\par
 protected:\par
  virtual void SetUp() \{\par
    q1_.Enqueue(1);\par
    q2_.Enqueue(2);\par
    q2_.Enqueue(3);\par
  \}\par
\par
  // virtual void TearDown() \{\}\par
\par
  Queue<int> q0_;\par
  Queue<int> q1_;\par
  Queue<int> q2_;\par
\};\par
}
\par
In this case, {\f2 TearDown()}  is not needed since we don't have to clean up after each test, other than what's already done by the destructor.\par
Now we'll write tests using {\f2 {\b TEST_F()}}  and this fixture. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(QueueTest, IsEmptyInitially) \{\par
  EXPECT_EQ(0, q0_.size());\par
\}\par
\par
TEST_F(QueueTest, DequeueWorks) \{\par
  int* n = q0_.Dequeue();\par
  EXPECT_EQ(NULL, n);\par
\par
  n = q1_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(1, *n);\par
  EXPECT_EQ(0, q1_.size());\par
  delete n;\par
\par
  n = q2_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(2, *n);\par
  EXPECT_EQ(1, q2_.size());\par
  delete n;\par
\}\par
}
\par
The above uses both {\f2 ASSERT_*}  and {\f2 EXPECT_*}  assertions. The rule of thumb is to use {\f2 EXPECT_*}  when you want the test to continue to reveal more errors after the assertion failure, and use {\f2 ASSERT_*}  when continuing after failure doesn't make sense. For example, the second assertion in the {\f2 Dequeue}  test is {\f2 ASSERT_TRUE(n != NULL)} , as we need to dereference the pointer {\f2 n}  later, which would lead to a segfault when {\f2 n}  is {\f2 NULL} .\par
When these tests run, the following happens:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google Test constructs a {\f2 {\b QueueTest}}  object (let's call it {\f2 t1}  ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.SetUp()}  initializes {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The first test ( {\f2 IsEmptyInitially}  ) runs on {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.TearDown()}  cleans up after the test finishes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1}  is destructed.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The above steps are repeated on another {\f2 {\b QueueTest}}  object, this time running the {\f2 DequeueWorks}  test.\par}
{\i Availability} : Linux, Windows, Mac.\par
{\i Note} : Google Test automatically saves all {\i Google Test}  flags when a test object is constructed, and restores them when it is destructed.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Invoking the Tests} \par}
{\f2 TEST()}  and {\f2 {\b TEST_F()}}  implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.\par
After defining your tests, you can run them with {\f2 RUN_ALL_TESTS()}  , which returns {\f2 0}  if all the tests are successful, or {\f2 1}  otherwise. Note that {\f2 RUN_ALL_TESTS()}  runs {\i all tests}  in your link unit \'96 they can be from different test cases, or even different source files.\par
When invoked, the {\f2 RUN_ALL_TESTS()}  macro:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Saves the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Creates a test fixture object for the first test.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Initializes it via {\f2 SetUp()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Runs the test on the fixture object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Cleans up the fixture via {\f2 TearDown()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Deletes the fixture.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Restores the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeats the above steps for the next test, until all tests have run.\par}
In addition, if the text fixture's constructor generates a fatal failure in step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly, if step 3 generates a fatal failure, step 4 will be skipped.\par
{\i Important} : You must not ignore the return value of {\f2 RUN_ALL_TESTS()} , or {\f2 gcc}  will give you a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your {\f2 main()}  function must return the value of {\f2 RUN_ALL_TESTS()} .\par
Also, you should call {\f2 RUN_ALL_TESTS()}  only {\b once} . Calling it more than once conflicts with some advanced Google Test features (e.g. thread-safe death tests) and thus is not supported.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the main() Function} \par}
You can start from this boilerplate: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "this/package/foo.h"\par
#include <gtest/gtest.h>\par
\par
namespace \{\par
\par
// The fixture for testing class Foo.\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  // You can remove any or all of the following functions if its body\par
  // is empty.\par
\par
  FooTest() \{\par
    // You can do set-up work for each test here.\par
  \}\par
\par
  virtual ~FooTest() \{\par
    // You can do clean-up work that doesn't throw exceptions here.\par
  \}\par
\par
  // If the constructor and destructor are not enough for setting up\par
  // and cleaning up each test, you can define the following methods:\par
\par
  virtual void SetUp() \{\par
    // Code here will be called immediately after the constructor (right\par
    // before each test).\par
  \}\par
\par
  virtual void TearDown() \{\par
    // Code here will be called immediately after each test (right\par
    // before the destructor).\par
  \}\par
\par
  // Objects declared here can be used by all tests in the test case for Foo.\par
\};\par
\par
// Tests that the Foo::Bar() method does Abc.\par
TEST_F(FooTest, MethodBarDoesAbc) \{\par
  const string input_filepath = "this/package/testdata/myinputfile.dat";\par
  const string output_filepath = "this/package/testdata/myoutputfile.dat";\par
  Foo f;\par
  EXPECT_EQ(0, f.Bar(input_filepath, output_filepath));\par
\}\par
\par
// Tests that Foo does Xyz.\par
TEST_F(FooTest, DoesXyz) \{\par
  // Exercises the Xyz feature of Foo.\par
\}\par
\par
\}  // namespace\par
\par
int main(int argc, char **argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
The {\f2 ::testing::InitGoogleTest()}  function parses the command line for Google Test flags, and removes all recognized flags. This allows the user to control a test program's behavior via various flags, which we'll cover in AdvancedGuide. You must call this function before calling {\f2 RUN_ALL_TESTS()} , or the flags won't be properly initialized.\par
On Windows, {\f2 InitGoogleTest()}  also works with wide strings, so it can be used in programs compiled in {\f2 UNICODE}  mode as well.\par
But maybe you think that writing all those main() functions is too much work? We agree with you completely and that's why Google Test provides a basic implementation of main(). If it fits your needs, then just link your test with gtest_main library and you are good to go.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Important note for Visual C++ users} \par}
If you put your tests into a library and your {\f2 main()}  function is in a different library or in your .exe file, those tests will not run. The reason is a {\f2 bug} in Visual C++. When you define your tests, Google Test creates certain static objects to register them. These objects are not referenced from elsewhere but their constructors are still supposed to run. When Visual C++ linker sees that nothing in the library is referenced from other places it throws the library out. You have to reference your library with tests from your main program to keep the linker from discarding it. Here is how to do it. Somewhere in your library code declare a function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid __declspec(dllexport) int PullInMyLibrary() \{ return 0; \}\par
}
 If you put your tests in a static library (not DLL) then {\f2 __declspec(dllexport)}  is not required. Now, in your main program, write a code that invokes that function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int PullInMyLibrary();\par
static int dummy = PullInMyLibrary();\par
}
 This will keep your tests referenced and will make them register themselves at startup.\par
In addition, if you define your tests in a static library, add {\f2 /OPT:NOREF}  to your main program linker options. If you use MSVC++ IDE, go to your .exe project properties/Configuration Properties/Linker/Optimization and set References setting to {\f2 Keep Unreferenced Data (/OPT:NOREF)} . This will keep Visual C++ linker from discarding individual symbols generated by your tests from the final executable.\par
There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you {\i must}  change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
Congratulations! You've learned the Google Test basics. You can start writing and running Google Test tests, read some samples, or continue with AdvancedGuide, which describes many more useful Google Test features.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Known Limitations} \par}
Google Test is designed to be thread-safe. The implementation is thread-safe on systems where the {\f2 pthreads}  library is available. It is currently {\i unsafe}  to use Google Test assertions from two threads concurrently on other systems (e.g. Windows). In most tests this is not an issue as usually the assertions are done in the main thread. If you want to help, you can volunteer to implement the necessary synchronization primitives in {\f2 gtest-port.h}  for your platform. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_5_PumpManual{\tc \v V1_5_PumpManual}\par \pard\plain 
{\bkmkstart AAAAAAAENX}
{\bkmkend AAAAAAAENX}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b P} ump is {\b U} seful for {\b M} eta {\b P} rogramming.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 The Problem} \par}
Template and macro libraries often need to define many classes, functions, or macros that vary only (or almost only) in the number of arguments they take. It's a lot of repetitive, mechanical, and error-prone work.\par
Variadic templates and variadic macros can alleviate the problem. However, while both are being considered by the C++ committee, neither is in the standard yet or widely supported by compilers. Thus they are often not a good choice, especially when your code needs to be portable. And their capabilities are still limited.\par
As a result, authors of such libraries often have to write scripts to generate their implementation. However, our experience is that it's tedious to write such scripts, which tend to reflect the structure of the generated code poorly and are often hard to read and edit. For example, a small change needed in the generated code may require some non-intuitive, non-trivial changes in the script. This is especially painful when experimenting with the code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Our Solution} \par}
Pump (for Pump is Useful for Meta Programming, Pretty Useful for Meta Programming, or Practical Utility for Meta Programming, whichever you prefer) is a simple meta-programming tool for C++. The idea is that a programmer writes a {\f2 foo.pump}  file which contains C++ code plus meta code that manipulates the C++ code. The meta code can handle iterations over a range, nested iterations, local meta variable definitions, simple arithmetic, and conditional expressions. You can view it as a small Domain-Specific Language. The meta language is designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode, for example) and concise, making Pump code intuitive and easy to maintain.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Highlights} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The implementation is in a single Python script and thus ultra portable: no build or installation is needed and it works cross platforms.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pump tries to be smart with respect to {\f2 Google's style guide}: it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format is human-readable and more concise than XML.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format works relatively well with Emacs' C++ mode.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Examples} \par}
The following Pump code (where meta keywords start with {\f2 $} , {\f2 [[}  and {\f2 ]]}  are meta brackets, and {\f2 $$}  starts a meta comment that ends with the line):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $var n = 3     $$ Defines a meta variable n.\par
$range i 0..n  $$ Declares the range of meta iterator i (inclusive).\par
$for i [[\par
               $$ Meta loop.\par
// Foo$i does blah for $i-ary predicates.\par
$range j 1..i\par
template <size_t N $for j [[, typename A$j]]>\par
class Foo$i \{\par
$if i == 0 [[\par
  blah a;\par
]] $elif i <= 2 [[\par
  blah b;\par
]] $else [[\par
  blah c;\par
]]\par
\};\par
\par
]]\par
}
\par
will be translated by the Pump compiler to:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Foo0 does blah for 0-ary predicates.\par
template <size_t N>\par
class Foo0 \{\par
  blah a;\par
\};\par
\par
// Foo1 does blah for 1-ary predicates.\par
template <size_t N, typename A1>\par
class Foo1 \{\par
  blah b;\par
\};\par
\par
// Foo2 does blah for 2-ary predicates.\par
template <size_t N, typename A1, typename A2>\par
class Foo2 \{\par
  blah b;\par
\};\par
\par
// Foo3 does blah for 3-ary predicates.\par
template <size_t N, typename A1, typename A2, typename A3>\par
class Foo3 \{\par
  blah c;\par
\};\par
}
\par
In another example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $range i 1..n\par
Func($for i + [[a$i]]);\par
$$ The text between i and [[ is the separator between iterations.\par
}
\par
will generate one of the following lines (without the comments), depending on the value of {\f2 n} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Func();              // If n is 0.\par
Func(a1);            // If n is 1.\par
Func(a1 + a2);       // If n is 2.\par
Func(a1 + a2 + a3);  // If n is 3.\par
// And so on...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Constructs} \par}
We support the following meta programming constructs:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $var id = exp}  \cell }{Defines a named constant value. {\f2 $id}  is valid util the end of the current meta lexical block.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{$range id exp..exp \cell }{Sets the range of an iteration variable, which can be reused in multiple loops later. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{$for id sep [.md "code "] \cell }{Iteration. The range of {\f2 id}  must have been defined earlier. {\f2 $id}  is valid in {\f2 code} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $($)}  \cell }{Generates a single {\f2 $}  character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $id}  \cell }{Value of the named constant or iteration variable. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 }  \cell }{Value of the expression. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $if exp [[ code ]] else_branch}  \cell }{Conditional. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 [[ code ]]}  \cell }{Meta lexical block. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 cpp_code}  \cell }{Raw C++ code. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $$ comment}  \cell }{Meta comment. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Note:}  To give the user some freedom in formatting the Pump source code, Pump ignores a new-line character if it's right after {\f2 $for foo}  or next to {\f2 [[}  or {\f2 ]]} . Without this rule you'll often be forced to write very long lines to get the desired output. Therefore sometimes you may need to insert an extra new-line in such places for a new-line to show up in your output.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Grammar} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid code ::= atomic_code*\par
atomic_code ::= $var id = exp\par
    | $var id = [[ code ]]\par
    | $range id exp..exp\par
    | $for id sep [[ code ]]\par
    | $($)\par
    | $id\par
    | $(exp)\par
    | $if exp [[ code ]] else_branch\par
    | [[ code ]]\par
    | cpp_code\par
sep ::= cpp_code | empty_string\par
else_branch ::= $else [[ code ]]\par
    | $elif exp [[ code ]] else_branch\par
    | empty_string\par
exp ::= simple_expression_in_Python_syntax\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Code} \par}
You can find the source code of Pump in {\f2 scripts/pump.py}. It is still very unpolished and lacks automated tests, although it has been successfully used many times. If you find a chance to use it in your project, please let us know what you think! We also welcome help on improving Pump.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Real Examples} \par}
You can find real-world applications of Pump in {\f2 Google Test} and {\f2 Google Mock}. The source file {\f2 foo.h.pump}  generates {\f2 foo.h} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tips} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If a meta variable is followed by a letter or digit, you can separate them using {\f2 [[]]} , which inserts an empty string. For example {\f2 Foo$j[[]]Helper}  generate {\f2 Foo1Helper}  when {\f2 j}  is 1.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting {\f2 [[]]}  followed by a new line. Since any new-line character next to {\f2 [[}  or {\f2 ]]}  is ignored, the generated code won't contain this new line. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_5_XcodeGuide{\tc \v V1_5_XcodeGuide}\par \pard\plain 
{\bkmkstart AAAAAAAENY}
{\bkmkend AAAAAAAENY}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This guide will explain how to use the Google Testing Framework in your Xcode projects on Mac OS X. This tutorial begins by quickly explaining what to do for experienced users. After the quick start, the guide goes provides additional explanation about each step.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Quick Start} \par}
Here is the quick guide for using Google Test in your Xcode project.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Download the source from the {\f2 website} using this command: {\f2 svn checkout {\f2 http://googletest.googlecode.com/svn/trunk/} googletest-read-only} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Open up the {\f2 gtest.xcodeproj}  in the {\f2 googletest-read-only/xcode/}  directory and build the gtest.framework.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a new "Shell Tool" target in your Xcode project called something like "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add the gtest.framework to your project and add it to the "Link Binary with Libraries" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add your unit test source code to the "Compile Sources" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Edit the "UnitTests" executable and add an environment variable named "DYLD\\_FRAMEWORK\\_PATH" with a value equal to the path to the framework containing the gtest.framework relative to the compiled executable.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Build and Go\par}
The following sections further explain each of the steps listed above in depth, describing in more detail how to complete it including some variations.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Get the Source} \par}
Currently, the gtest.framework discussed here isn't available in a tagged release of Google Test, it is only available in the trunk. As explained at the Google Test [site]({\f2 http://code.google.com/p/googletest/source/checkout}">svn), you can get the code from anonymous SVN with this command:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only\par
}
\par
Alternatively, if you are working with Subversion in your own code base, you can add Google Test as an external dependency to your own Subversion repository. By following this approach, everyone that checks out your svn repository will also receive a copy of Google Test (a specific version, if you wish) without having to check it out explicitly. This makes the set up of your project simpler and reduces the copied code in the repository.\par
To use {\f2 svn:externals} , decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like {\f2 third-party/googletest/1.0.1} , is another option. Once the location is established, use {\f2 svn propedit svn:externals _directory_}  to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.\par
The command {\f2 svn propedit}  will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. {\f2 {\f2 http://googletest.googlecode.com/svn/tags/release-1.0.1}} ). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the {\f2 -r_##_}  option (e.g. {\f2 externals/src/googletest -r60 {\f2 http://googletest.googlecode.com/svn/trunk}} ).\par
Here is an example of using the svn:externals properties on a trunk (read via {\f2 svn propget} ) of a project. This value checks out a copy of Google Test into the {\f2 trunk/externals/src/googletest/}  directory.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Computer:svn] user$ svn propget svn:externals trunk\par
externals/src/googletest http://googletest.googlecode.com/svn/trunk\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Add the Framework to Your Project} \par}
The next step is to build and add the gtest.framework to your own project. This guide describes two common ways below.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Make a Test Target} \par}
To start writing tests, make a new "Shell Tool" target. This target template is available under BSD, Cocoa, or Carbon. Add your unit test source code to the "Compile Sources" build phase of the target.\par
Next, you'll want to add gtest.framework in two different ways, depending upon which option you chose above.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Set Up the Executable Run Environment} \par}
Since the unit test executable is a shell tool, it doesn't have a bundle with a {\f2 Contents/Frameworks}  directory, in which to place gtest.framework. Instead, the dynamic linker must be told at runtime to search for the framework in another location. This can be accomplished by setting the "DYLD\\_FRAMEWORK\\_PATH" environment variable in the "Edit Active Executable ..." Arguments tab, under "Variables to be set in the environment:". The path for this value is the path (relative or absolute) of the directory containing the gtest.framework.\par
If you haven't set up the DYLD_FRAMEWORK_PATH, correctly, you might get a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-15 06:23:57 -0600.]\par
  dyld: Library not loaded: @loader_path/../Frameworks/gtest.framework/Versions/A/gtest\par
    Referenced from: /Users/username/Documents/Sandbox/gtestSample/build/Debug/WidgetFrameworkTest\par
    Reason: image not found\par
}
\par
To correct this problem, got to the directory containing the executable named in "Referenced from:" value in the error message above. Then, with the terminal in this location, find the relative path to the directory containing the gtest.framework. That is the value you'll need to set as the DYLD_FRAMEWORK_PATH.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Build and Go} \par}
Now, when you click "Build and Go", the test will be executed. Dumping out something like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-06 06:36:13 -0600.]\par
[==========] Running 2 tests from 1 test case.\par
[----------] Global test environment set-up.\par
[----------] 2 tests from WidgetInitializerTest\par
[ RUN      ] WidgetInitializerTest.TestConstructor\par
[       OK ] WidgetInitializerTest.TestConstructor\par
[ RUN      ] WidgetInitializerTest.TestConversion\par
[       OK ] WidgetInitializerTest.TestConversion\par
[----------] Global test environment tear-down\par
[==========] 2 tests from 1 test case ran.\par
[  PASSED  ] 2 tests.\par
\par
The Debugger has exited with status 0.  \par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Summary} \par}
Unit testing is a valuable way to ensure your data model stays valid even during rapid development or refactoring. The Google Testing Framework is a great unit testing framework for C and C++ which integrates well with an Xcode development environment. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_6_AdvancedGuide{\tc \v V1_6_AdvancedGuide}\par \pard\plain 
{\bkmkstart AAAAAAAENZ}
{\bkmkend AAAAAAAENZ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Now that you have read Primer and learned how to write tests using Google Test, it's time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 More Assertions} \par}
This section covers some less frequently used, but still significant, assertions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Explicit Success and Failure} \par}
These three assertions do not actually test a value or expression. Instead, they generate a success or failure directly. Like the macros that actually perform a test, you may stream a custom failure message into the them.\par
| {\f2 SUCCEED();}  | |:----------\'97|\par
Generates a success. This does NOT make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.\par
Note: {\f2 SUCCEED()}  is purely documentary and currently doesn't generate any user-visible output. However, we may add {\f2 SUCCEED()}  messages to Google Test's output in the future.\par
| {\f2 FAIL();}  | {\f2 ADD_FAILURE();}  | {\f2 ADD_FAILURE_AT("</tt>_file_path_<tt>",} _line_number_{\f2 );}  | |:--------\'97|:--------------\'97|:---------------------------------------------------\'97|\par
{\f2 FAIL()}  generates a fatal failure, while {\f2 ADD_FAILURE()}  and {\f2 ADD_FAILURE_AT()}  generate a nonfatal failure. These are useful when control flow, rather than a Boolean expression, deteremines the test's success or failure. For example, you might want to write something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid switch(expression) \{\par
  case 1: ... some checks ...\par
  case 2: ... some other checks\par
  ...\par
  default: FAIL() << "We shouldn't get here.";\par
\}\par
}
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Exception Assertions} \par}
These are for verifying that a piece of code throws (or does not throw) an exception of the given type:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\f2 EXPECT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\i statement}  throws an exception of the given type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  throws an exception of any type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't throw any exception \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THROW(Foo(5), bar_exception);\par
\par
EXPECT_NO_THROW(\{\par
  int n = 5;\par
  Bar(&n);\par
\});\par
}
\par
{\i Availability} : Linux, Windows, Mac; since version 1.1.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Predicate Assertions for Better Error Messages} \par}
Even though Google Test has a rich set of assertions, they can never be complete, as it's impossible (nor a good idea) to anticipate all the scenarios a user might run into. Therefore, sometimes a user has to use {\f2 EXPECT_TRUE()}  to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into {\f2 EXPECT_TRUE()} . However, this is awkward especially when the expression has side-effects or is expensive to evaluate.\par
Google Test gives you three different options to solve this problem:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using an Existing Boolean Function} \par}
If you already have a function or a functor that returns {\f2 bool}  (or a type that can be implicitly converted to {\f2 bool} ), you can use it in a {\i predicate assertion}  to get the function arguments printed for free:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\i pred1(val1)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\f2 EXPECT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\i pred2(val1, val2)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the above, {\i predn}  is an {\i n} -ary predicate function or functor, where {\i val1} , {\i val2} , ..., and {\i valn}  are its arguments. The assertion succeeds if the predicate returns {\f2 true}  when applied to the given arguments, and fails otherwise. When the assertion fails, it prints the value of each argument. In either case, the arguments are evaluated exactly once.\par
Here's an example. Given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns true iff m and n have no common divisors except 1.\par
bool MutuallyPrime(int m, int n) \{ ... \}\par
const int a = 3;\par
const int b = 4;\par
const int c = 10;\par
}
\par
the assertion {\f2 EXPECT_PRED2(MutuallyPrime, a, b);}  will succeed, while the assertion {\f2 EXPECT_PRED2(MutuallyPrime, b, c);}  will fail with the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
!MutuallyPrime(b, c) is false, where\par

b is 4\par

c is 10\par

\par}
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If you see a compiler error "no matching function to call" when using {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*} , please see {\f2 this} for how to resolve it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.\par}
{\i Availability} : Linux, Windows, Mac\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function That Returns an AssertionResult} \par}
While {\f2 EXPECT_PRED*()}  and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The {\f2 {\b testing::AssertionResult}}  class solves this problem.\par
An {\f2 AssertionResult}  object represents the result of an assertion (whether it's a success or a failure, and an associated message). You can create an {\f2 AssertionResult}  using one of these factory functions:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// succeeded.\par
AssertionResult AssertionSuccess();\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// failed.\par
AssertionResult AssertionFailure();\par
\par
\}\par
}
\par
You can then use the {\f2 <<}  operator to stream messages to the {\f2 AssertionResult}  object.\par
To provide more readable messages in Boolean assertions (e.g. {\f2 EXPECT_TRUE()} ), write a predicate function that returns {\f2 AssertionResult}  instead of {\f2 bool} . For example, if you define {\f2 IsEven()}  as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess();\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
instead of:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsEven(int n) \{\par
  return (n % 2) == 0;\par
\}\par
}
\par
the failed assertion {\f2 EXPECT_TRUE(IsEven(Fib(4)))}  will print:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(4))\par

Actual: false (*3 is odd*)\par

Expected: true\par

\par}
instead of a more opaque\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(4))\par

Actual: false\par

Expected: true\par

\par}
If you want informative messages in {\f2 EXPECT_FALSE}  and {\f2 ASSERT_FALSE}  as well, and are fine with making the predicate slower in the success case, you can supply a success message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess() << n << " is even";\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
Then the statement {\f2 EXPECT_FALSE(IsEven(Fib(6)))}  will print\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: !IsEven(Fib(6))\par

Actual: true (8 is even)\par

Expected: false\par

\par}
{\i Availability} : Linux, Windows, Mac; since version 1.4.1.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Predicate-Formatter} \par}
If you find the default message generated by {\f2 (ASSERT|EXPECT)_PRED*}  and {\f2 (ASSERT|EXPECT)_(TRUE|FALSE)}  unsatisfactory, or some arguments to your predicate do not support streaming to {\f2 ostream} , you can instead use the following {\i predicate-formatter assertions}  to {\i fully}  customize how the message is formatted:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED_FORMAT1(} _pred_format1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED_FORMAT1(} _pred_format1, val1_{\f2 ); <td align="left"> _pred\\_format1(val1)_ is successful <tr><td align="left">} ASSERT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 <td align="left">} EXPECT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 <td align="left"> _pred\\_format2(val1, val2)_ is successful <tr><td align="left">} ...{\f2 <td align="left">} ...{\f2 <td align="left">} ...` \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The difference between this and the previous two groups of macros is that instead of a predicate, {\f2 (ASSERT|EXPECT)_PRED_FORMAT*}  take a {\i predicate-formatter}  ({\i pred_formatn} ), which is a function or functor with the signature:\par
{\f2 {\b testing::AssertionResult} PredicateFormattern(const char*} _expr1_{\f2 , const char*} _expr2_{\f2 , ... const char*} _exprn_{\f2 , T1} _val1_{\f2 , T2} _val2_{\f2 , ... Tn} _valn_{\f2 );} \par
where {\i val1} , {\i val2} , ..., and {\i valn}  are the values of the predicate arguments, and {\i expr1} , {\i expr2} , ..., and {\i exprn}  are the corresponding expressions as they appear in the source code. The types {\f2 T1} , {\f2 T2} , ..., and {\f2 Tn}  can be either value types or reference types. For example, if an argument has type {\f2 Foo} , you can declare it as either {\f2 Foo}  or {\f2 const Foo&} , whichever is appropriate.\par
A predicate-formatter returns a {\f2 {\b testing::AssertionResult}}  object to indicate whether the assertion has succeeded or not. The only way to create such an object is to call one of these factory functions:\par
As an example, let's improve the failure message in the previous example, which uses {\f2 EXPECT_PRED2()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns the smallest prime common divisor of m and n,\par
// or 1 when m and n are mutually prime.\par
int SmallestPrimeCommonDivisor(int m, int n) \{ ... \}\par
\par
// A predicate-formatter for asserting that two integers are mutually prime.\par
::testing::AssertionResult AssertMutuallyPrime(const char* m_expr,\par
                                               const char* n_expr,\par
                                               int m,\par
                                               int n) \{\par
  if (MutuallyPrime(m, n))\par
    return ::testing::AssertionSuccess();\par
\par
  return ::testing::AssertionFailure()\par
      << m_expr << " and " << n_expr << " (" << m << " and " << n\par
      << ") are not mutually prime, " << "as they have a common divisor "\par
      << SmallestPrimeCommonDivisor(m, n);\par
\}\par
}
\par
With this predicate-formatter, we can use\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);\par
}
\par
to generate the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
b and c (4 and 10) are not mutually prime, as they have a common divisor 2.\par

\par}
As you may have realized, many of the assertions we introduced earlier are special cases of {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} . In fact, most of them are indeed defined using {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Comparison} \par}
Comparing floating-point numbers is tricky. Due to round-off errors, it is very unlikely that two floating-points will match exactly. Therefore, {\f2 ASSERT_EQ}  's naive comparison usually doesn't work. And since floating-points can have a wide value range, no single fixed error bound works. It's better to compare by a fixed relative error bound, except for values close to 0 due to the loss of precision there.\par
In general, for floating-point comparison to make sense, the user needs to carefully choose the error bound. If they don't want or care to, comparing in terms of Units in the Last Place (ULPs) is a good default, and Google Test provides assertions to do this. Full details about ULPs are quite long; if you want to learn more, see {\f2 this article on float comparison}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Macros} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FLOAT_EQ(} _expected, actual_{\f2 );}  \cell }{{\f2 EXPECT_FLOAT_EQ(} _expected, actual_{\f2 );}  \cell }{the two {\f2 float}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DOUBLE_EQ(} _expected, actual_{\f2 );}  \cell }{{\f2 EXPECT_DOUBLE_EQ(} _expected, actual_{\f2 );}  \cell }{the two {\f2 double}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
By "almost equal", we mean the two values are within 4 ULP's from each other.\par
The following assertions allow you to choose the acceptable error bound:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NEAR(} _val1, val2, abs_error_{\f2 );}  \cell }{{\f2 EXPECT_NEAR} _(val1, val2, abs_error_<tt>); \cell }{the difference between {\i val1}  and {\i val2}  doesn't exceed the given absolute error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Predicate-Format Functions} \par}
Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in predicate assertion macros (e.g. {\f2 EXPECT_PRED_FORMAT2} , etc).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(::testing::FloatLE, val1, val2);\par
EXPECT_PRED_FORMAT2(::testing::DoubleLE, val1, val2);\par
}
\par
Verifies that {\i val1}  is less than, or almost equal to, {\i val2} . You can replace {\f2 EXPECT_PRED_FORMAT2}  in the above table with {\f2 ASSERT_PRED_FORMAT2} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Windows HRESULT assertions} \par}
These assertions test for {\f2 HRESULT}  success or failure.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\i expression}  is a success {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\i expression}  is a failure {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The generated output contains the human-readable error message associated with the {\f2 HRESULT}  code returned by {\i expression} .\par
You might use them like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CComPtr shell;\par
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L"Shell.Application"));\par
CComVariant empty;\par
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));\par
}
\par
{\i Availability} : Windows.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Type Assertions} \par}
You can call the function {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::StaticAssertTypeEq<T1, T2>();\par
}
 to assert that types {\f2 T1}  and {\f2 T2}  are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, and the compiler error message will likely (depending on the compiler) show you the actual values of {\f2 T1}  and {\f2 T2} . This is mainly useful inside template code.\par
{\i Caveat:}  When used inside a member function of a class template or a function template, {\f2 StaticAssertTypeEq<T1, T2>()}  is effective {\i only if}  the function is instantiated. For example, given: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T> class Foo \{\par
 public:\par
  void Bar() \{ ::testing::StaticAssertTypeEq<int, T>(); \}\par
\};\par
}
 the code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test1() \{ Foo<bool> foo; \}\par
}
 will {\i not}  generate a compiler error, as {\f2 Foo<bool>::Bar()}  is never actually instantiated. Instead, you need: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test2() \{ Foo<bool> foo; foo.Bar(); \}\par
}
 to cause a compiler error.\par
{\i Availability:}  Linux, Windows, Mac; since version 1.3.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Assertion Placement} \par}
You can use assertions in any C++ function. In particular, it doesn't have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure ({\f2 FAIL*}  and {\f2 ASSERT_*} ) can only be used in void-returning functions. This is a consequence of Google Test not using exceptions. By placing it in a non-void function you'll get a confusing compile error like {\f2 "error: void value not ignored as it ought to be"} .\par
If you need to use assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite {\f2 T2 Foo(T1 x)}  to {\f2 void Foo(T1 x, T2* result)} . You need to make sure that {\f2 *result}  contains some sensible value even when the function returns prematurely. As the function now returns {\f2 void} , you can use any assertion inside of it.\par
If changing the function's type is not an option, you should just use assertions that generate non-fatal failures, such as {\f2 ADD_FAILURE*}  and {\f2 EXPECT_*} .\par
{\i Note} : Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them. You'll get a compilation error if you try. A simple workaround is to transfer the entire body of the constructor or destructor to a private void-returning method. However, you should be aware that a fatal assertion failure in a constructor does not terminate the current test, as your intuition might suggest; it merely returns from the constructor early, possibly leaving your object in a partially-constructed state. Likewise, a fatal assertion failure in a destructor may leave your object in a partially-destructed state. Use assertions carefully in these situations!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Teaching Google Test How to Print Your Values} \par}
When a test assertion such as {\f2 EXPECT_EQ}  fails, Google Test prints the argument values to help you debug. It does this using a user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out.\par
As mentioned earlier, the printer is {\i extensible} . That means you can teach it to do a better job at printing your particular type than to dump the bytes. To do that, define {\f2 <<}  for your type:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Bar \{ ... \};  // We want Google Test to be able to print instances of this.\par
\par
// It's important that the << operator is defined in the SAME\par
// namespace that defines Bar.  C++'s look-up rules rely on that.\par
::std::ostream& operator<<(::std::ostream& os, const Bar& bar) \{\par
  return os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
Sometimes, this might not be an option: your team may consider it bad style to have a {\f2 <<}  operator for {\f2 Bar} , or {\f2 Bar}  may already have a {\f2 <<}  operator that doesn't do what you want (and you cannot change it). If so, you can instead define a {\f2 PrintTo()}  function like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Bar \{ ... \};\par
\par
// It's important that PrintTo() is defined in the SAME\par
// namespace that defines Bar.  C++'s look-up rules rely on that.\par
void PrintTo(const Bar& bar, ::std::ostream* os) \{\par
  *os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
If you have defined both {\f2 <<}  and {\f2 PrintTo()} , the latter will be used when Google Test is concerned. This allows you to customize how the value appears in Google Test's output without affecting code that relies on the behavior of its {\f2 <<}  operator.\par
If you want to print a value {\f2 x}  using Google Test's value printer yourself, just call {\f2 ::testing::PrintToString(} _x_{\f2 )} , which returns an {\f2 std::string} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid vector<pair<Bar, int> > bar_ints = GetBarIntVector();\par
\par
EXPECT_TRUE(IsCorrectBarIntVector(bar_ints))\par
    << "bar_ints = " << ::testing::PrintToString(bar_ints);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Death Tests} \par}
In many applications, there are assertions that can cause application failure if a condition is not met. These sanity checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.\par
Since these precondition checks cause the processes to die, we call such tests {\i death tests} . More generally, any test that checks that a program terminates (except by throwing an exception) in an expected fashion is also a death test.\par
Note that if a piece of code throws an exception, we don't consider it "death" for the purpose of death tests, as the caller of the code could catch the exception and avoid the crash. If you want to verify exceptions thrown by your code, see {\f2 Exception Assertions}.\par
If you want to test {\f2 EXPECT_*()/ASSERT_*()}  failures in your test code, see {\f2 Catching Failures}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write a Death Test} \par}
Google Test has the following macros to support death tests:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH(} _statement, regex_{\f2 ); <td align="left">} EXPECT_DEATH({\f2 _statement, regex_} ); \cell }{{\i statement}  crashes with the given error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH_IF_SUPPORTED(} _statement, regex_{\f2 ); <td align="left">} EXPECT_DEATH_IF_SUPPORTED({\f2 _statement, regex_} ); \cell }{if death tests are supported, verifies that {\i statement}  crashes with the given error; otherwise verifies nothing \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EXIT(} _statement, predicate, regex_{\f2 ); <td align="left">} EXPECT_EXIT({\f2 _statement, predicate, regex_} ); \cell }{_statement_ exits with the given error and its exit code matches {\i predicate}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
where {\i statement}  is a statement that is expected to cause the process to die, {\i predicate}  is a function or function object that evaluates an integer exit status, and {\i regex}  is a regular expression that the stderr output of {\i statement}  is expected to match. Note that {\i statement}  can be {\i any valid statement}  (including {\i compound statement} ) and doesn't have to be an expression.\par
As usual, the {\f2 ASSERT}  variants abort the current test function, while the {\f2 EXPECT}  variants do not.\par
{\b Note:}  We use the word "crash" here to mean that the process terminates with a {\i non-zero}  exit status code. There are two possibilities: either the process has called {\f2 exit()}  or {\f2 _exit()}  with a non-zero value, or it may be killed by a signal.\par
This means that if {\i statement}  terminates the process with a 0 exit code, it is {\i not}  considered a crash by {\f2 EXPECT_DEATH} . Use {\f2 EXPECT_EXIT}  instead if this is the case, or if you want to restrict the exit code more precisely.\par
A predicate here must accept an {\f2 int}  and return a {\f2 bool} . The death test succeeds only if the predicate returns {\f2 true} . Google Test defines a few predicates that handle the most common cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::ExitedWithCode(exit_code)\par
}
\par
This expression is {\f2 true}  if the program exited normally with the given exit code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::KilledBySignal(signal_number)  // Not available on Windows.\par
}
\par
This expression is {\f2 true}  if the program was killed by the given signal.\par
The {\f2 *_DEATH}  macros are convenient wrappers for {\f2 *_EXIT}  that use a predicate that verifies the process' exit code is non-zero.\par
Note that a death test only cares about three things:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does {\i statement}  abort or exit the process?\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab (in the case of {\f2 ASSERT_EXIT}  and {\f2 EXPECT_EXIT} ) does the exit status satisfy {\i predicate} ? Or (in the case of {\f2 ASSERT_DEATH}  and {\f2 EXPECT_DEATH} ) is the exit status non-zero? And\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does the stderr output match {\i regex} ?\par}
In particular, if {\i statement}  generates an {\f2 ASSERT_*}  or {\f2 EXPECT_*}  failure, it will {\b not}  cause the death test to fail, as Google Test assertions don't abort the process.\par
To write a death test, simply use one of the above macros inside your test function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(My*DeathTest*, Foo) \{\par
  // This death test uses a compound statement.\par
  ASSERT_DEATH(\{ int n = 5; Foo(&n); \}, "Error on line .* of Foo()");\par
\}\par
TEST(MyDeathTest, NormalExit) \{\par
  EXPECT_EXIT(NormalExit(), ::testing::ExitedWithCode(0), "Success");\par
\}\par
TEST(MyDeathTest, KillMyself) \{\par
  EXPECT_EXIT(KillMyself(), ::testing::KilledBySignal(SIGKILL), "Sending myself unblockable signal");\par
\}\par
}
\par
verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 Foo(5)}  causes the process to die with the given error message,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 NormalExit()}  causes the process to print {\f2 "Success"}  to stderr and exit with exit code 0, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 KillMyself()}  kills the process with signal {\f2 SIGKILL} .\par}
The test function body may contain other assertions and statements as well, if necessary.\par
{\i Important:}  We strongly recommend you to follow the convention of naming your test case (not test) {\f2 *DeathTest}  when it contains a death test, as demonstrated in the above example. The {\f2 Death Tests And Threads}  section below explains why.\par
If a test fixture class is shared by normal tests and death tests, you can use typedef to introduce an alias for the fixture class and avoid duplicating its code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooTest, DoesThis) \{\par
  // normal test\par
\}\par
\par
TEST_F(FooDeathTest, DoesThat) \{\par
  // death test\par
\}\par
}
\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Cygwin, and Mac (the latter three are supported since v1.3.0). {\f2 (ASSERT|EXPECT)_DEATH_IF_SUPPORTED}  are new in v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Regular Expression Syntax} \par}
On POSIX systems (e.g. Linux, Cygwin, and Mac), Google Test uses the {\f2 POSIX extended regular expression} syntax in death tests. To learn about this syntax, you may want to read this {\f2 Wikipedia entry}.\par
On Windows, Google Test uses its own simple regular expression implementation. It lacks many features you can find in POSIX extended regular expressions. For example, we don't support union ({\f2 "x|y"} ), grouping ({\f2 "(xy)"} ), brackets ({\f2 "[xy]"} ), and repetition count ({\f2 "x\{5,7\}"} ), among others. Below is what we do support ({\f2 A}  denotes a literal character, period ({\f2 .} ), or a single {\f2 \\\\}  escape sequence; {\f2 x}  and {\f2 y}  denote regular expressions.):\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 c}  \cell }{matches any literal character {\f2 c}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\d}  \cell }{matches any decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\D}  \cell }{matches any character that's not a decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\f}  \cell }{matches {\f2 \\f}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\n}  \cell }{matches {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\r}  \cell }{matches {\f2 \\r}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\s}  \cell }{matches any ASCII whitespace, including {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\S}  \cell }{matches any character that's not a whitespace \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\t}  \cell }{matches {\f2 \\t}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\v}  \cell }{matches {\f2 \\v}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\w}  \cell }{matches any letter, {\f2 _} , or decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\W}  \cell }{matches any character that {\f2 \\\\w}  doesn't match \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\c}  \cell }{matches any literal character {\f2 c} , which must be a punctuation \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 .}  \cell }{matches any single character except {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A?}  \cell }{matches 0 or 1 occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A*}  \cell }{matches 0 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A+}  \cell }{matches 1 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ^}  \cell }{matches the beginning of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $}  \cell }{matches the end of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 xy}  \cell }{matches {\f2 x}  followed by {\f2 y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
To help you determine which capability is available on your system, Google Test defines macro {\f2 GTEST_USES_POSIX_RE=1}  when it uses POSIX extended regular expressions, or {\f2 GTEST_USES_SIMPLE_RE=1}  when it uses the simple version. If you want your death tests to work in both cases, you can either {\f2 #if}  on these macros or use the more limited syntax only.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How It Works} \par}
Under the hood, {\f2 ASSERT_EXIT()}  spawns a new process and executes the death test statement in that process. The details of of how precisely that happens depend on the platform and the variable {\f2 ::testing::GTEST_FLAG(death_test_style)}  (which is initialized from the command-line flag {\f2 --gtest_death_test_style} ).\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On POSIX systems, {\f2 fork()}  (or {\f2 clone()}  on Linux) is used to spawn the child, after which:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "fast"} , the death test statement is immediately executed.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "threadsafe"} , the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On Windows, the child is spawned using the {\f2 CreateProcess()}  API, and re-executes the binary to cause just the single death test under consideration to be run - much like the {\f2 threadsafe}  mode on POSIX.\par}
Other values for the variable are illegal and will cause the death test to fail. Currently, the flag's default value is {\f2 "fast"} . However, we reserve the right to change it in the future. Therefore, your tests should not depend on this.\par
In either case, the parent process waits for the child process to complete, and checks that\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's exit status satisfies the predicate, and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's stderr matches the regular expression.\par}
If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Tests And Threads} \par}
The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn't feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.\par
Google Test has three features intended to raise awareness of threading issues.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A warning is emitted if multiple threads are running when a death test is encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test cases with a name ending in "DeathTest" are run before all other tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It uses {\f2 clone()}  instead of {\f2 fork()}  to spawn the child process on Linux ({\f2 clone()}  is not available on Cygwin and Mac), as {\f2 fork()}  is more likely to cause the child to hang when the parent process has multiple threads.\par}
It's perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Test Styles} \par}
The "threadsafe" death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety. We suggest using the faster, default "fast" style unless your test has specific problems with it.\par
You can choose a particular style of death tests by setting the flag programmatically:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
}
\par
You can do this in {\f2 main()}  to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyDeathTest, TestOne) \{\par
  ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
  // This test is run in the "threadsafe" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
TEST(MyDeathTest, TestTwo) \{\par
  // This test is run in the "fast" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  ::testing::FLAGS_gtest_death_test_style = "fast";\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Caveats} \par}
The {\i statement}  argument of {\f2 ASSERT_EXIT()}  can be any valid C++ statement. If it leaves the current function via a {\f2 return}  statement or by throwing an exception, the death test is considered to have failed. Some Google Test macros may return from the current function (e.g. {\f2 ASSERT_TRUE()} ), so be sure to avoid them in {\i statement} .\par
Since {\i statement}  runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will {\i not}  be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab try not to free memory in a death test;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab free the memory again in the parent process; or\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab do not use the heap checker in your program.\par}
Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.\par
Despite the improved thread safety afforded by the "threadsafe" style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with {\f2 pthread_atfork(3)} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Assertions in Sub-routines} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adding Traces to Assertions} \par}
If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the {\f2 SCOPED_TRACE}  macro:\par
| {\f2 SCOPED_TRACE(} _message_{\f2 );}  | |:--------------------------\'97|\par
where {\i message}  can be anything streamable to {\f2 std::ostream} . This macro will cause the current file name, line number, and the given message to be added in every failure message. The effect will be undone when the control leaves the current lexical scope.\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10: void Sub1(int n) \{\par
11:   EXPECT_EQ(1, Bar(n));\par
12:   EXPECT_EQ(2, Bar(n + 1));\par
13: \}\par
14:\par
15: TEST(FooTest, Bar) \{\par
16:   \{\par
17:     SCOPED_TRACE("A");  // This trace point will be included in\par
18:                         // every failure in this scope.\par
19:     Sub1(1);\par
20:   \}\par
21:   // Now it won't.\par
22:   Sub1(9);\par
23: \}\par
}
\par
could result in messages like these:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/foo_test.cc:11: Failure\par
Value of: Bar(n)\par
Expected: 1\par
  Actual: 2\par
   Trace:\par
path/to/foo_test.cc:17: A\par
\par
path/to/foo_test.cc:12: Failure\par
Value of: Bar(n + 1)\par
Expected: 2\par
  Actual: 3\par
}
\par
Without the trace, it would've been difficult to know which invocation of {\f2 Sub1()}  the two failures come from respectively. (You could add an extra message to each assertion in {\f2 Sub1()}  to indicate the value of {\f2 n} , but that's tedious.)\par
Some tips on using {\f2 SCOPED_TRACE} :\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab With a suitable message, it's often enough to use {\f2 SCOPED_TRACE}  at the beginning of a sub-routine, instead of at each call site.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When calling sub-routines inside a loop, make the loop iterator part of the message in {\f2 SCOPED_TRACE}  such that you can know which iteration the failure is from.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for {\f2 SCOPED_TRACE} . You can simply use {\f2 ""} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 SCOPED_TRACE}  in an inner scope when there is one in the outer scope. In this case, all active trace points will be included in the failure messages, in reverse order they are encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!\par}
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Propagating Fatal Failures} \par}
A common pitfall when using {\f2 ASSERT_*}  and {\f2 FAIL*}  is not understanding that when they fail they only abort the {\i current function} , not the entire test. For example, the following test will segfault: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Subroutine() \{\par
  // Generates a fatal failure and aborts the current function.\par
  ASSERT_EQ(1, 2);\par
  // The following won't be executed.\par
  ...\par
\}\par
\par
TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // The intended behavior is for the fatal failure\par
  // in Subroutine() to abort the entire test.\par
  // The actual behavior: the function goes on after Subroutine() returns.\par
  int* p = NULL;\par
  *p = 3; // Segfault!\par
\}\par
}
\par
Since we don't use exceptions, it is technically impossible to implement the intended behavior here. To alleviate this, Google Test provides two solutions. You could use either the {\f2 (ASSERT|EXPECT)_NO_FATAL_FAILURE}  assertions or the {\f2 HasFatalFailure()}  function. They are described in the following two subsections.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Asserting on Subroutines} \par}
As shown above, if your test calls a subroutine that has an {\f2 ASSERT_*}  failure in it, the test will continue after the subroutine returns. This may not be what you want.\par
Often people want fatal failures to propagate like exceptions. For that Google Test offers the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't generate any new fatal failures in the current thread. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If {\i statement}  creates new threads, failures in these threads are ignored.\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_NO_FATAL_FAILURE(Foo());\par
\par
int i;\par
EXPECT_NO_FATAL_FAILURE(\{\par
  i = Bar();\par
\});\par
}
\par
{\i Availability:}  Linux, Windows, Mac. Assertions from multiple threads are currently not supported.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Checking for Failures in the Current Test} \par}
{\f2 HasFatalFailure()}  in the {\f2 {\b testing::Test}}  class returns {\f2 true}  if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Test \{\par
 public:\par
  ...\par
  static bool HasFatalFailure();\par
\};\par
}
\par
The typical usage, which basically simulates the behavior of a thrown exception, is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // Aborts if Subroutine() had a fatal failure.\par
  if (HasFatalFailure())\par
    return;\par
  // The following won't be executed.\par
  ...\par
\}\par
}
\par
If {\f2 HasFatalFailure()}  is used outside of {\f2 TEST()}  , {\f2 {\b TEST_F()}}  , or a test fixture, you must add the {\f2 {\b testing::Test}::}  prefix, as in:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (::testing::Test::HasFatalFailure())\par
  return;\par
}
\par
Similarly, {\f2 HasNonfatalFailure()}  returns {\f2 true}  if the current test has at least one non-fatal failure, and {\f2 HasFailure()}  returns {\f2 true}  if the current test has at least one failure of either kind.\par
{\i Availability:}  Linux, Windows, Mac. {\f2 HasNonfatalFailure()}  and {\f2 HasFailure()}  are available since version 1.4.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Logging Additional Information} \par}
In your test code, you can call {\f2 RecordProperty("key", value)}  to log additional information, where {\f2 value}  can be either a C string or a 32-bit integer. The {\i last}  value recorded for a key will be emitted to the XML output if you specify one. For example, the test\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(WidgetUsageTest, MinAndMaxWidgets) \{\par
  RecordProperty("MaximumWidgets", ComputeMaxUsage());\par
  RecordProperty("MinimumWidgets", ComputeMinUsage());\par
\}\par
}
\par
will output XML like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  <testcase name="MinAndMaxWidgets" status="run" time="6" classname="WidgetUsageTest"\par
            MaximumWidgets="12"\par
            MinimumWidgets="9" />\par
...\par
}
\par
{\i Note} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 RecordProperty()}  is a static member of the {\f2 Test}  class. Therefore it needs to be prefixed with {\f2 {\b testing::Test}::}  if used outside of the {\f2 TEST}  body and the test fixture class.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 key}  must be a valid XML attribute name, and cannot conflict with the ones already used by Google Test ({\f2 name} , {\f2 status} , {\f2 time} , and {\f2 classname} ).\par}
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Sharing Resources Between Tests in the Same Test Case} \par}
Google Test creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.\par
If the tests don't change the resource, there's no harm in them sharing a single resource copy. So, in addition to per-test set-up/tear-down, Google Test also supports per-test-case set-up/tear-down. To use it:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In your test fixture class (say {\f2 {\b FooTest}}  ), define as {\f2 static}  some member variables to hold the shared resources.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the same test fixture class, define a {\f2 static void SetUpTestCase()}  function (remember not to spell it as **{\f2 SetupTestCase} ** with a small {\f2 u} !) to set up the shared resources and a {\f2 static void TearDownTestCase()}  function to tear them down.\par}
That's it! Google Test automatically calls {\f2 SetUpTestCase()}  before running the {\i first test}  in the {\f2 {\b FooTest}}  test case (i.e. before creating the first {\f2 {\b FooTest}}  object), and calls {\f2 TearDownTestCase()}  after running the {\i last test}  in it (i.e. after deleting the last {\f2 {\b FooTest}}  object). In between, the tests can use the shared resources.\par
Remember that the test order is undefined, so your code can't depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.\par
Here's an example of per-test-case set-up and tear-down: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\par
 protected:\par
  // Per-test-case set-up.\par
  // Called before the first test in this test case.\par
  // Can be omitted if not needed.\par
  static void SetUpTestCase() \{\par
    shared_resource_ = new ...;\par
  \}\par
\par
  // Per-test-case tear-down.\par
  // Called after the last test in this test case.\par
  // Can be omitted if not needed.\par
  static void TearDownTestCase() \{\par
    delete shared_resource_;\par
    shared_resource_ = NULL;\par
  \}\par
\par
  // You can define per-test set-up and tear-down logic as usual.\par
  virtual void SetUp() \{ ... \}\par
  virtual void TearDown() \{ ... \}\par
\par
  // Some expensive resource shared by all tests.\par
  static T* shared_resource_;\par
\};\par
\par
T* FooTest::shared_resource_ = NULL;\par
\par
TEST_F(FooTest, Test1) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
TEST_F(FooTest, Test2) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
}
\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Global Set-Up and Tear-Down} \par}
Just as you can do set-up and tear-down at the test level and the test case level, you can also do it at the test program level. Here's how.\par
First, you subclass the {\f2 {\b testing::Environment}}  class to define a test environment, which knows how to set-up and tear-down:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Environment \{\par
 public:\par
  virtual ~Environment() \{\}\par
  // Override this to define how to set up the environment.\par
  virtual void SetUp() \{\}\par
  // Override this to define how to tear down the environment.\par
  virtual void TearDown() \{\}\par
\};\par
}
\par
Then, you register an instance of your environment class with Google Test by calling the {\f2 ::testing::AddGlobalTestEnvironment()}  function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Environment* AddGlobalTestEnvironment(Environment* env);\par
}
\par
Now, when {\f2 RUN_ALL_TESTS()}  is called, it first calls the {\f2 SetUp()}  method of the environment object, then runs the tests if there was no fatal failures, and finally calls {\f2 TearDown()}  of the environment object.\par
It's OK to register multiple environment objects. In this case, their {\f2 SetUp()}  will be called in the order they are registered, and their {\f2 TearDown()}  will be called in the reverse order.\par
Note that Google Test takes ownership of the registered environment objects. Therefore {\b do not delete them}  by yourself.\par
You should call {\f2 AddGlobalTestEnvironment()}  before {\f2 RUN_ALL_TESTS()}  is called, probably in {\f2 main()} . If you use {\f2 gtest_main} , you need to call this before {\f2 main()}  starts for it to take effect. One way to do this is to define a global variable like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::Environment* const foo_env = ::testing::AddGlobalTestEnvironment(new FooEnvironment);\par
}
\par
However, we strongly recommend you to write your own {\f2 main()}  and call {\f2 AddGlobalTestEnvironment()}  there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn't guarantee the order in which global variables from different translation units are initialized).\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Value Parameterized Tests} \par}
{\i Value-parameterized tests}  allow you to test your code with different parameters without writing multiple copies of the same test.\par
Suppose you write a test for your code and then realize that your code is affected by a presence of a Boolean command line flag.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyCodeTest, TestFoo) \{\par
  // A code to test foo().\par
\}\par
}
\par
Usually people factor their test code into a function with a Boolean parameter in such situations. The function sets the flag, then executes the testing code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooHelper(bool flag_value) \{\par
  flag = flag_value;\par
  // A code to test foo().\par
\}\par
\par
TEST(MyCodeTest, TestFooo) \{\par
  TestFooHelper(false);\par
  TestFooHelper(true);\par
\}\par
}
\par
But this setup has serious drawbacks. First, when a test assertion fails in your tests, it becomes unclear what value of the parameter caused it to fail. You can stream a clarifying message into your {\f2 EXPECT} /{\f2 ASSERT}  statements, but it you'll have to do it with all of them. Second, you have to add one such helper function per test. What if you have ten tests? Twenty? A hundred?\par
Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.\par
Here are some other situations when value-parameterized tests come handy:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test different implementations of an OO interface.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write Value-Parameterized Tests} \par}
To write value-parameterized tests, first you should define a fixture class. It must be derived from both {\f2 {\b testing::Test}}  and {\f2 ::testing::WithParamInterface<T>}  (the latter is a pure interface), where {\f2 T}  is the type of your parameter values. For convenience, you can just derive the fixture class from {\f2 ::testing::TestWithParam<T>} , which itself is derived from both {\f2 {\b testing::Test}}  and {\f2 ::testing::WithParamInterface<T>} . {\f2 T}  can be any copyable type. If it's a raw pointer, you are responsible for managing the lifespan of the pointed values.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::TestWithParam<const char*> \{\par
  // You can implement all the usual fixture class members here.\par
  // To access the test parameter, call GetParam() from class\par
  // TestWithParam<T>.\par
\};\par
\par
// Or, when you want to add parameters to a pre-existing fixture class:\par
class BaseTest : public ::testing::Test \{\par
  ...\par
\};\par
class BarTest : public BaseTest,\par
                public ::testing::WithParamInterface<const char*> \{\par
  ...\par
\};\par
}
\par
Then, use the {\f2 TEST_P}  macro to define as many test patterns using this fixture as you want. The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, access the test parameter with the GetParam() method\par
  // of the TestWithParam<T> class:\par
  EXPECT_TRUE(foo.Blah(GetParam()));\par
  ...\par
\}\par
\par
TEST_P(FooTest, HasBlahBlah) \{\par
  ...\par
\}\par
}
\par
Finally, you can use {\f2 INSTANTIATE_TEST_CASE_P}  to instantiate the test case with any set of parameters you want. Google Test defines a number of functions for generating test parameters. They return what we call (surprise!) {\i parameter generators} . Here is a summary of them, which are all in the {\f2 testing}  namespace:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Range(begin, end[, step])}  \cell }{Yields values {\f2 \{begin, begin+step, begin+step+step, ...\}} . The values do not include {\f2 end} . {\f2 step}  defaults to 1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Values(v1, v2, ..., vN)}  \cell }{Yields values {\f2 \{v1, v2, ..., vN\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ValuesIn(container)}  and {\f2 ValuesIn(begin, end)}  \cell }{Yields values from a C-style array, an STL-style container, or an iterator range {\f2 [begin, end)} . {\f2 container} , {\f2 begin} , and {\f2 end}  can be expressions whose values are determined at run time. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 {\b Bool()}}  \cell }{Yields sequence {\f2 \{false, true\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Combine(g1, g2, ..., gN)}  \cell }{Yields all combinations (the Cartesian product for the math savvy) of the values generated by the {\f2 N}  generators. This is only available if your system provides the {\f2 <tr1/tuple>}  header. If you are sure your system does, and Google Test disagrees, you can override it by defining {\f2 GTEST_HAS_TR1_TUPLE=1} . See comments in {\f2 include/gtest/internal/gtest-port.h} for more information. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For more details, see the comments at the definitions of these functions in the {\f2 source code}.\par
The following statement will instantiate tests from the {\f2 {\b FooTest}}  test case each with parameter values {\f2 "meeny"} , {\f2 "miny"} , and {\f2 "moe"} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TEST_CASE_P(InstantiationName,\par
                        FooTest,\par
                        ::testing::Values("meeny", "miny", "moe"));\par
}
\par
To distinguish different instances of the pattern (yes, you can instantiate it more than once), the first argument to {\f2 INSTANTIATE_TEST_CASE_P}  is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/2}  for {\f2 "moe"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/2}  for {\f2 "moe"} \par}
You can use these names in {\f2 \'96gtest-filter}.\par
This statement will instantiate all tests from {\f2 {\b FooTest}}  again, each with parameter values {\f2 "cat"}  and {\f2 "dog"} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const char* pets[] = \{"cat", "dog"\};\par
INSTANTIATE_TEST_CASE_P(AnotherInstantiationName, FooTest,\par
                        ::testing::ValuesIn(pets));\par
}
\par
The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/1}  for {\f2 "dog"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "dog"} \par}
Please note that {\f2 INSTANTIATE_TEST_CASE_P}  will instantiate {\i all}  tests in the given test case, whether their definitions come before or {\i after}  the {\f2 INSTANTIATE_TEST_CASE_P}  statement.\par
You can see {\f2 these} {\f2 files} for more examples.\par
{\i Availability} : Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.2.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Creating Value-Parameterized Abstract Tests} \par}
In the above, we define and instantiate {\f2 {\b FooTest}}  in the same source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as {\i abstract tests} . As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, he can instantiate your suite to get all the interface-conformance tests for free.\par
To define abstract tests, you should organize your code like this:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the definition of the parameterized test fixture class (e.g. {\f2 {\b FooTest}} ) in a header file, say {\f2 foo_param_test.h} . Think of this as {\i declaring}  your abstract tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the {\f2 TEST_P}  definitions in {\f2 foo_param_test.cc} , which includes {\f2 foo_param_test.h} . Think of this as {\i implementing}  your abstract tests.\par}
Once they are defined, you can instantiate them by including {\f2 foo_param_test.h} , invoking {\f2 INSTANTIATE_TEST_CASE_P()} , and linking with {\f2 foo_param_test.cc} . You can instantiate the same abstract test case multiple times, possibly in different source files.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Typed Tests} \par}
Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same "concept" and you want to verify it. In both cases, you want the same test logic repeated for different types.\par
While you can write one {\f2 TEST}  or {\f2 TEST_F}  for each type you want to test (and you may even factor the test logic into a function template that you invoke from the {\f2 TEST} ), it's tedious and doesn't scale: if you want {\i m}  tests over {\i n}  types, you'll end up writing {\i m*n}  {\f2 TEST} s.\par
{\i Typed tests}  allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here's how you do it:\par
First, define a fixture class template. It should be parameterized by a type. Remember to derive it from {\f2 {\b testing::Test}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
 public:\par
  ...\par
  typedef std::list<T> List;\par
  static T shared_;\par
  T value_;\par
\};\par
}
\par
Next, associate a list of types with the test case, which will be repeated for each type in the list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
TYPED_TEST_CASE(FooTest, MyTypes);\par
}
\par
The {\f2 typedef}  is necessary for the {\f2 TYPED_TEST_CASE}  macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.\par
Then, use {\f2 TYPED_TEST()}  instead of {\f2 {\b TEST_F()}}  to define a typed test for this test case. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST(FooTest, DoesBlah) \{\par
  // Inside a test, refer to the special name TypeParam to get the type\par
  // parameter.  Since we are inside a derived class template, C++ requires\par
  // us to visit the members of FooTest via 'this'.\par
  TypeParam n = this->value_;\par
\par
  // To visit static members of the fixture, add the 'TestFixture::'\par
  // prefix.\par
  n += TestFixture::shared_;\par
\par
  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\par
  // prefix.  The 'typename' is required to satisfy the compiler.\par
  typename TestFixture::List values;\par
  values.push_back(n);\par
  ...\par
\}\par
\par
TYPED_TEST(FooTest, HasPropertyA) \{ ... \}\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Type-Parameterized Tests} \par}
{\i Type-parameterized tests}  are like typed tests, except that they don't require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.\par
If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with his type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here's an example:\par
First, define a fixture class template, as we did with typed tests:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
  ...\par
\};\par
}
\par
Next, declare that you will define a type-parameterized test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_CASE_P(FooTest);\par
}
\par
The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
Then, use {\f2 TYPED_TEST_P()}  to define a type-parameterized test. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, refer to TypeParam to get the type parameter.\par
  TypeParam n = 0;\par
  ...\par
\}\par
\par
TYPED_TEST_P(FooTest, HasPropertyA) \{ ... \}\par
}
\par
Now the tricky part: you need to register all test patterns using the {\f2 REGISTER_TYPED_TEST_CASE_P}  macro before you can instantiate them. The first argument of the macro is the test case name; the rest are the names of the tests in this test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid REGISTER_TYPED_TEST_CASE_P(FooTest,\par
                           DoesBlah, HasPropertyA);\par
}
\par
Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can {\f2 #include}  it in multiple C++ source files and instantiate it multiple times.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, MyTypes);\par
}
\par
To distinguish different instances of the pattern, the first argument to the {\f2 INSTANTIATE_TYPED_TEST_CASE_P}  macro is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instances.\par
In the special case where the type list contains only one type, you can write that type directly without {\f2 ::testing::Types<...>} , like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, int);\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Testing Private Code} \par}
If you change your software's internal implementation, your tests should not break as long as the change is not observable by users. Therefore, per the {\i black-box testing principle} , most of the time you should test your code through its public interfaces.\par
If you still find yourself needing to test internal implementation code, consider if there's a better design that wouldn't require you to do so. If you absolutely have to test non-public interface code though, you can. There are two cases to consider:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Static functions ({\i not}  the same as static member functions!) or unnamed namespaces, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Private or protected class members\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Static Functions} \par}
Both static functions and definitions/declarations in an unnamed namespace are only visible within the same translation unit. To test them, you can {\f2 #include}  the entire {\f2 .cc}  file being tested in your {\f2 *_test.cc}  file. ({\f2 #include} ing {\f2 .cc}  files is not a good way to reuse code - you should not do this in production code!)\par
However, a better approach is to move the private code into the {\f2 foo::internal}  namespace, where {\f2 foo}  is the namespace your project normally uses, and put the private declarations in a {\f2 *-internal.h}  file. Your production {\f2 .cc}  files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Private Class Members} \par}
Private class members are only accessible from within the class or by friends. To access a class' private members, you can declare your test fixture as a friend to the class and define accessors in your fixture. Tests using the fixture can then access the private members of your production class via the accessors in the fixture. Note that even though your fixture is a friend to your production class, your tests are not automatically friends to it, as they are technically defined in sub-classes of the fixture.\par
Another way to test private members is to refactor them into an implementation class, which is then declared in a {\f2 *-internal.h}  file. Your clients aren't allowed to include this header but your tests can. Such is called the Pimpl (Private Implementation) idiom.\par
Or, you can declare an individual test as a friend of your class by adding this line in the class body:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid FRIEND_TEST(TestCaseName, TestName);\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
#include "gtest/gtest_prod.h"\par
\par
// Defines FRIEND_TEST.\par
class Foo \{\par
  ...\par
 private:\par
  FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\par
  int Bar(void* x);\par
\};\par
\par
// foo_test.cc\par
...\par
TEST(FooTest, BarReturnsZeroOnNull) \{\par
  Foo foo;\par
  EXPECT_EQ(0, foo.Bar(NULL));\par
  // Uses Foo's private member Bar().\par
\}\par
}
\par
Pay special attention when your class is defined in a namespace, as you should define your test fixtures and tests in the same namespace if you want them to be friends of your class. For example, if the code to be tested looks like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
\par
class Foo \{\par
  friend class FooTest;\par
  FRIEND_TEST(FooTest, Bar);\par
  FRIEND_TEST(FooTest, Baz);\par
  ...\par
  definition of the class Foo\par
  ...\par
\};\par
\par
\}  // namespace my_namespace\par
}
\par
Your test code should be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
\};\par
\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
\}  // namespace my_namespace\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Catching Failures} \par}
If you are building a testing utility on top of Google Test, you'll want to test your utility. What framework would you use to test it? Google Test, of course.\par
The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But Google Test doesn't use exceptions, so how do we test that a piece of code generates an expected failure?\par
{\f2 "gtest/gtest-spi.h"}  contains some constructs to do this. After {\f2 #include} ing this header, you can use\par
| {\f2 EXPECT_FATAL_FAILURE(} _statement, substring_{\f2 );}  | |:-----------------------------------------------\'97|\par
to assert that {\i statement}  generates a fatal (e.g. {\f2 ASSERT_*} ) failure whose message contains the given {\i substring} , or use\par
| {\f2 EXPECT_NONFATAL_FAILURE(} _statement, substring_{\f2 );}  | |:--------------------------------------------------\'97|\par
if you are expecting a non-fatal (e.g. {\f2 EXPECT_*} ) failure.\par
For technical reasons, there are some caveats:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot stream a failure message to either macro.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot reference local non-static variables or non-static members of {\f2 this}  object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot return a value.\par}
{\i Note:}  Google Test is designed with threads in mind. Once the synchronization primitives in {\f2 "gtest/internal/gtest-port.h"}  have been implemented, Google Test will become thread-safe, meaning that you can then use assertions in multiple threads concurrently. Before\par
that, however, Google Test only supports single-threaded usage. Once thread-safe, {\f2 EXPECT_FATAL_FAILURE()}  and {\f2 EXPECT_NONFATAL_FAILURE()}  will capture failures in the current thread only. If {\i statement}  creates new threads, failures in these threads will be ignored. If you want to capture failures from all threads instead, you should use the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_FATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting the Current Test's Name} \par}
Sometimes a function may need to know the name of the currently running test. For example, you may be using the {\f2 SetUp()}  method of your test fixture to set the golden file name based on which test is running. The {\f2 {\b testing::TestInfo}}  class has this information:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
class TestInfo \{\par
 public:\par
  // Returns the test case name and the test name, respectively.\par
  //\par
  // Do NOT delete or free the return value - it's managed by the\par
  // TestInfo class.\par
  const char* test_case_name() const;\par
  const char* name() const;\par
\};\par
\par
\}  // namespace testing\par
}
\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid To obtain a {\f2 TestInfo}  object for the currently running test, call \par
}{\f2 current_test_info()}  on the {\f2 UnitTest}  singleton object:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Gets information about the currently running test.\par
// Do NOT delete the returned object - it's managed by the UnitTest class.\par
const ::testing::TestInfo* const test_info =\par
  ::testing::UnitTest::GetInstance()->current_test_info();\par
printf("We are in test %s of test case %s.\\n",\par
       test_info->name(), test_info->test_case_name());\par
}
\par
{\f2 current_test_info()}  returns a null pointer if no test is running. In particular, you cannot find the test case name in {\f2 TestCaseSetUp()} , {\f2 TestCaseTearDown()}  (where you know the test case name implicitly), or functions called from them.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google Test by Handling Test Events} \par}
Google Test provides an {\b event listener API}  to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test case, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.\par
{\i Availability:}  Linux, Windows, Mac; since v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Event Listeners} \par}
To define a event listener, you subclass either {\f2 testing::TestEventListener} or {\f2 testing::EmptyTestEventListener}. The former is an (abstract) interface, where {\i each pure virtual method\par
 can be overridden to handle a test event}  (For example, when a test starts, the {\f2 OnTestStart()}  method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.\par
When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 UnitTest} reflects the state of the entire test program,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestCase} has information about a test case, which can contain one or more tests,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestInfo} contains the state of a test, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestPartResult} represents the result of a test assertion.\par}
An event handler function can examine the argument it receives to find out interesting information about the event and the test program's state. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MinimalistPrinter : public ::testing::EmptyTestEventListener \{\par
  // Called before a test starts.\par
  virtual void OnTestStart(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s starting.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\par
  // Called after a failed assertion or a SUCCEED() invocation.\par
  virtual void OnTestPartResult(\par
      const ::testing::TestPartResult& test_part_result) \{\par
    printf("%s in %s:%d\\n%s\\n",\par
           test_part_result.failed() ? "*** Failure" : "Success",\par
           test_part_result.file_name(),\par
           test_part_result.line_number(),\par
           test_part_result.summary());\par
  \}\par
\par
  // Called after a test ends.\par
  virtual void OnTestEnd(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s ending.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Event Listeners} \par}
To use the event listener you have defined, add an instance of it to the Google Test event listener list (represented by class {\f2 TestEventListeners}{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
note the "s" at the end of the name) in your {\f2 main()}  function, before calling {\f2 RUN_ALL_TESTS()} : {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  // Gets hold of the event listener list.\par
  ::testing::TestEventListeners& listeners =\par
      ::testing::UnitTest::GetInstance()->listeners();\par
  // Adds a listener to the end.  Google Test takes the ownership.\par
  listeners.Append(new MinimalistPrinter);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par}
There's only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
delete listeners.Release(listeners.default_result_printer());\par
listeners.Append(new MinimalistPrinter);\par
return RUN_ALL_TESTS();\par
}
\par
Now, sit back and enjoy a completely different output from your tests. For more details, you can read this {\f2 sample}.\par
You may append more than one listener to the list. When an {\f2 On*Start()}  or {\f2 OnTestPartResult()}  event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An {\f2 On*End()}  event will be received by the listeners in the {\i reverse}  order. This allows output by listeners added later to be framed by output from listeners added earlier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating Failures in Listeners} \par}
You may use failure-raising macros ({\f2 EXPECT_*()} , {\f2 ASSERT_*()} , {\f2 FAIL()} , etc) when processing an event. There are some restrictions:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot generate any failure in {\f2 OnTestPartResult()}  (otherwise it will cause {\f2 OnTestPartResult()}  to be called recursively).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A listener that handles {\f2 OnTestPartResult()}  is not allowed to generate any failure.\par}
When you add listeners to the listener list, you should put listeners that handle {\f2 OnTestPartResult()}  {\i before}  listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.\par
We have a sample of failure-raising listener {\f2 here}.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Running Test Programs: Advanced Options} \par}
Google Test test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call {\f2 ::testing::InitGoogleTest()}  before calling {\f2 RUN_ALL_TESTS()} .\par
To see a list of supported flags and their usage, please run your test program with the {\f2 --help}  flag. You can also use {\f2 -h} , {\f2 -?} , or {\f2 /?}  for short. This feature is added in version 1.3.0.\par
If an option is specified both by an environment variable and by a flag, the latter takes precedence. Most of the options can also be set/read in code: to access the value of command line flag {\f2 --gtest_foo} , write {\f2 ::testing::GTEST_FLAG(foo)} . A common pattern is to set the value of a flag before calling {\f2 ::testing::InitGoogleTest()}  to change the default value of the flag: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // Disables elapsed time by default.\par
  ::testing::GTEST_FLAG(print_time) = false;\par
\par
  // This allows the user to override the flag on the command line.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Tests} \par}
This section shows various options for choosing which tests to run.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Listing Test Names} \par}
Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag {\f2 --gtest_list_tests}  overrides all other flags and lists tests in the following format: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TestCase1.\par
  TestName1\par
  TestName2\par
TestCase2.\par
  TestName\par
}
\par
None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running a Subset of the Tests} \par}
By default, a Google Test program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the {\f2 GTEST_FILTER}  environment variable or the {\f2 --gtest_filter}  flag to a filter string, Google Test will only run the tests whose full names (in the form of {\f2 TestCaseName.TestName} ) match the filter.\par
The format of a filter is a '{\f2 :} '-separated list of wildcard patterns (called the positive patterns) optionally followed by a '{\f2 -} ' and another '{\f2 :} '-separated pattern list (called the negative patterns). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.\par
A pattern may contain `'*'{\f2 (matches any string) or} '?'{\f2 (matches any single character). For convenience, the filter} '{\i -NegativePatterns'{\f2 can be also written as} '-NegativePatterns'`.} \par
{\i For example:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test}  Has no flag, and thus runs all its tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test --gtest_filter=*}  Also runs everything, due to the single match-everything `{\f2 value. *} ./foo_test \'96gtest_filter={\b FooTest}.*{\f2 Runs everything in test case} {\b FooTest}{\f2 . *} ./foo_test \'96gtest_filter=*Null*:{\i Constructor} {\f2 Runs any test whose full name contains either} "Null"{\f2 or} "Constructor"{\f2 . *} ./foo_test \'96gtest_filter=-*DeathTest.*{\f2 Runs all non-death tests. *} ./foo_test \'96gtest_filter={\b FooTest}.*-FooTest.Bar{\f2 Runs everything in test case} {\b FooTest}{\f2 except} FooTest.Bar`.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Disabling Tests} \par}
} \par
{\i } \par
{\i If you have a broken test that you cannot fix right away, you can add the {\f2 DISABLED_}  prefix to its name. This will exclude it from execution. This is better than commenting out the code or using {\f2 #if 0} , as disabled tests are still compiled (and thus won't rot).} \par
{\i If you need to disable all tests in a test case, you can either add {\f2 DISABLED_}  to the front of the name of each test, or alternatively add it to the front of the test case name.} \par
{\i For example, the following tests won't be run by Google Test, even though they will still be compiled:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests that Foo does Abc.\par
TEST(FooTest, DISABLED_DoesAbc) \{ ... \}\par
\par
class DISABLED_BarTest : public ::testing::Test \{ ... \};\par
\par
// Tests that Bar does Xyz.\par
TEST_F(DISABLED_BarTest, DoesXyz) \{ ... \}\par
}
} \par
{\i {\i Note:}  This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, Google Test will print a banner warning you if a test program contains any disabled tests.} \par
{\i {\i Tip:}  You can easily count the number of disabled tests you have using {\f2 grep} . This number can be used as a metric for improving your test quality.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Enabling Disabled Tests} \par}
} \par
{\i } \par
{\i To include {\f2 disabled tests} in test execution, just invoke the test program with the {\f2 --gtest_also_run_disabled_tests}  flag or set the {\f2 GTEST_ALSO_RUN_DISABLED_TESTS}  environment variable to a value other than {\f2 0} . You can combine this with the {\f2 \'96gtest-filter} flag to further select which disabled tests to run.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Repeating the Tests} \par}
} \par
{\i } \par
{\i Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.} \par
{\i The {\f2 --gtest_repeat}  flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here's how to use it:} \par
{\i \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000}  \cell }{Repeat foo_test 1000 times and don't stop at failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=-1}  \cell }{A negative count means repeating forever. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_break_on_failure}  \cell }{Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_filter=FooBar}  \cell }{Repeat the tests whose name matches the filter 1000 times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
If your test program contains global set-up/tear-down code registered using {\f2 AddGlobalTestEnvironment()} , it will be repeated in each iteration as well, as the flakiness may be in it. You can also specify the repeat count by setting the {\f2 GTEST_REPEAT}  environment variable.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Shuffling the Tests} \par}
} \par
{\i } \par
{\i You can specify the {\f2 --gtest_shuffle}  flag (or set the {\f2 GTEST_SHUFFLE}  environment variable to {\f2 1} ) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.} \par
{\i By default, Google Test uses a random seed calculated from the current time. Therefore you'll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the {\f2 --gtest_random_seed=SEED}  flag (or set the {\f2 GTEST_RANDOM_SEED}  environment variable), where {\f2 SEED}  is an integer between 0 and 99999. The seed value 0 is special: it tells Google Test to do the default behavior of calculating the seed from the current time.} \par
{\i If you combine this with {\f2 --gtest_repeat=N} , Google Test will pick a different random seed and re-shuffle the tests in each iteration.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.4.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling Test Output} \par}
} \par
{\i } \par
{\i This section teaches how to tweak the way test results are reported.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Colored Terminal Output} \par}
} \par
{\i } \par
{\i Google Test can use colors in its terminal output to make it easier to spot the separation between tests, and whether tests passed.} \par
{\i You can set the GTEST_COLOR environment variable or set the {\f2 --gtest_color}  command line flag to {\f2 yes} , {\f2 no} , or {\f2 auto}  (the default) to enable colors, disable colors, or let Google Test decide. When the value is {\f2 auto} , Google Test will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the {\f2 TERM}  environment variable is set to {\f2 xterm}  or {\f2 xterm-color} .} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Suppressing the Elapsed Time} \par}
} \par
{\i } \par
{\i By default, Google Test prints the time it takes to run each test. To suppress that, run the test program with the {\f2 --gtest_print_time=0}  command line flag. Setting the {\f2 GTEST_PRINT_TIME}  environment variable to {\f2 0}  has the same effect.} \par
{\i {\i Availability:}  Linux, Windows, Mac. (In Google Test 1.3.0 and lower, the default behavior is that the elapsed time is {\b not}  printed.)} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating an XML Report} \par}
} \par
{\i } \par
{\i Google Test can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.} \par
{\i To generate the XML report, set the {\f2 GTEST_OUTPUT}  environment variable or the {\f2 --gtest_output}  flag to the string {\f2 "xml:_path_to_output_file_"} , which will create the file at the given location. You can also just use the string {\f2 "xml"} , in which case the output can be found in the {\f2 test_detail.xml}  file in the current directory.} \par
{\i If you specify a directory (for example, {\f2 "xml:output/directory/"}  on Linux or {\f2 "xml:output\\directory\\"}  on Windows), Google Test will create the XML file in that directory, named after the test executable (e.g. {\f2 foo_test.xml}  for test program {\f2 foo_test}  or {\f2 foo_test.exe} ). If the file already exists (perhaps left over from a previous run), Google Test will pick a different name (e.g. {\f2 foo_test_1.xml} ) to avoid overwriting it.} \par
{\i The report uses the format described here. It is based on the {\f2 junitreport}  Ant task and can be parsed by popular continuous build systems like {\f2 Hudson}. Since that format was originally intended for Java, a little interpretation is required to make it apply to Google Test tests, as shown here:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <testsuites name="AllTests" ...>\par
  <testsuite name="test_case_name" ...>\par
    <testcase name="test_name" ...>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The root {\f2 <testsuites>}  element corresponds to the entire test program.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testsuite>}  elements correspond to Google Test test cases.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testcase>}  elements correspond to Google Test test functions.\par}
} \par
{\i For instance, the following program} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MathTest, Addition) \{ ... \}\par
TEST(MathTest, Subtraction) \{ ... \}\par
TEST(LogicTest, NonContradiction) \{ ... \}\par
}
} \par
{\i could generate this report:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <?xml version="1.0" encoding="UTF-8"?>\par
<testsuites tests="3" failures="1" errors="0" time="35" name="AllTests">\par
  <testsuite name="MathTest" tests="2" failures="1" errors="0" time="15">\par
    <testcase name="Addition" status="run" time="7" classname="">\par
      <failure message="Value of: add(1, 1)&#x0A; Actual: 3&#x0A;Expected: 2" type=""/>\par
      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>\par
    </testcase>\par
    <testcase name="Subtraction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
  <testsuite name="LogicTest" tests="1" failures="0" errors="0" time="5">\par
    <testcase name="NonContradiction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i Things to note:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 tests}  attribute of a {\f2 <testsuites>}  or {\f2 <testsuite>}  element tells how many test functions the Google Test program or test case contains, while the {\f2 failures}  attribute tells how many of them failed.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 time}  attribute expresses the duration of the test, test case, or entire test program in milliseconds.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Each {\f2 <failure>}  element corresponds to a single failed Google Test assertion.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Some JUnit concepts don't apply to Google Test, yet we have to conform to the DTD. Therefore you'll see some dummy elements and attributes in the report. You can safely ignore these parts.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Failures Are Reported} \par}
} \par
{\i } \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Turning Assertion Failures into Break-Points} \par}
} \par
{\i } \par
{\i When running test programs under a debugger, it's very convenient if the debugger can catch an assertion failure and automatically drop into interactive mode. Google Test's {\i break-on-failure}  mode supports this behavior.} \par
{\i To enable it, set the {\f2 GTEST_BREAK_ON_FAILURE}  environment variable to a value other than {\f2 0}  . Alternatively, you can use the {\f2 --gtest_break_on_failure}  command line flag.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Disabling Catching Test-Thrown Exceptions} \par}
} \par
{\i } \par
{\i Google Test can be used either with or without exceptions enabled. If a test throws a C++ exception or (on Windows) a structured exception (SEH), by default Google Test catches it, reports it as a test failure, and continues with the next test method. This maximizes the coverage of a test run. Also, on Windows an uncaught exception will cause a pop-up window, so catching the exceptions allows you to run the tests automatically.} \par
{\i When debugging the test failures, however, you may instead want the exceptions to be handled by the debugger, such that you can examine the call stack when an exception is thrown. To achieve that, set the {\f2 GTEST_CATCH_EXCEPTIONS}  environment variable to {\f2 0} , or use the {\f2 --gtest_catch_exceptions=0}  flag when running the tests.} \par
{\i {\b Availability} : Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Letting Another Testing Framework Drive} \par}
} \par
{\i } \par
{\i If you work on a project that has already been using another testing framework and is not ready to completely switch to Google Test yet, you can get much of Google Test's benefit by using its assertions in your existing tests. Just change your {\f2 main()}  function to look like:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gtest/gtest.h"\par
\par
int main(int argc, char** argv) \{\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  // Important: Google Test must be initialized.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  ... whatever your existing testing framework requires ...\par
\}\par
}
} \par
{\i With that, you can use Google Test assertions in addition to the native assertions your testing framework provides, for example:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooDoesBar() \{\par
  Foo foo;\par
  EXPECT_LE(foo.Bar(1), 100);     // A Google Test assertion.\par
  CPPUNIT_ASSERT(foo.IsEmpty());  // A native assertion.\par
\}\par
}
} \par
{\i If a Google Test assertion fails, it will print an error message and throw an exception, which will be treated as a failure by your host testing framework. If you compile your code with exceptions disabled, a failed Google Test assertion will instead exit your program with a non-zero code, which will also signal a test failure to your test runner.} \par
{\i If you don't write {\f2 ::testing::GTEST_FLAG(throw_on_failure) = true;}  in your {\f2 main()} , you can alternatively enable this feature by specifying the {\f2 --gtest_throw_on_failure}  flag on the command-line or setting the {\f2 GTEST_THROW_ON_FAILURE}  environment variable to a non-zero value.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Distributing Test Functions to Multiple Machines} \par}
} \par
{\i } \par
{\i If you have more than one machine you can use to run a test program, you might want to run the test functions in parallel and get the result faster. We call this technique {\i sharding} , where each machine is called a {\i shard} .} \par
{\i Google Test is compatible with test sharding. To take advantage of this feature, your test runner (not part of Google Test) needs to do the following:} \par
{\i {
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allocate a number of machines (shards) to run the tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_TOTAL_SHARDS}  environment variable to the total number of shards. It must be the same for all shards.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_SHARD_INDEX}  environment variable to the index of the shard. Different shards must be assigned different indices, which must be in the range {\f2 [0, GTEST_TOTAL_SHARDS - 1]} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the same test program on all shards. When Google Test sees the above two environment variables, it will select a subset of the test functions to run. Across all shards, each test function in the program will be run exactly once.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for all shards to finish, then collect and report the results.\par}
} \par
{\i Your project may have tests that were written without Google Test and thus don't understand this protocol. In order for your test runner to figure out which test supports sharding, it can set the environment variable {\f2 GTEST_SHARD_STATUS_FILE}  to a non-existent file path. If a test program supports sharding, it will create this file to acknowledge the fact (the actual contents of the file are not important at this time; although we may stick some useful information in it in the future.); otherwise it will not create it.} \par
{\i Here's an example to make it clear. Suppose you have a test program {\f2 foo_test}  that contains the following 5 test functions: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(A, V)\par
TEST(A, W)\par
TEST(B, X)\par
TEST(B, Y)\par
TEST(B, Z)\par
}
 and you have 3 machines at your disposal. To run the test functions in parallel, you would set {\f2 GTEST_TOTAL_SHARDS}  to 3 on all machines, and set {\f2 GTEST_SHARD_INDEX}  to 0, 1, and 2 on the machines respectively. Then you would run the same {\f2 foo_test}  on each machine.} \par
{\i Google Test reserves the right to change how the work is distributed across the shards, but here's one possible scenario:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #0 runs {\f2 A.V}  and {\f2 B.X} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #1 runs {\f2 A.W}  and {\f2 B.Y} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #2 runs {\f2 B.Z} .\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Fusing Google Test Source Files} \par}
} \par
{\i } \par
{\i Google Test's implementation consists of ~30 files (excluding its own tests). Sometimes you may want them to be packaged up in two files (a {\f2 .h}  and a {\f2 .cc} ) instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gtest_files.py}  in the {\f2 scripts/}  directory (since release 1.3.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gtest_files.py OUTPUT_DIR\par
}
} \par
{\i and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}}  and {\f2 gtest/gtest-all.cc}  in it. These files contain everything you need to use Google Test. Just copy them to anywhere you want and you are ready to write tests. You can use the {\f2 scripts/test/Makefile} file as an example on how to compile your tests against them.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
} \par
{\i } \par
{\i Congratulations! You've now learned more advanced Google Test tools and are ready to tackle more complex testing tasks. If you want to dive even deeper, you can read the Frequently-Asked Questions. } \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_6_Documentation{\tc \v V1_6_Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAEOA}
{\bkmkend AAAAAAAEOA}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all documentation wiki pages for Google Test {\b 1.6}  \'96 {\b if you use a released version of Google Test, please read the documentation for that specific version instead.} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Primer \'96 start here if you are new to Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Samples \'96 learn from examples.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
AdvancedGuide \'96 learn more about Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
XcodeGuide \'96 how to use Google Test in Xcode on Mac.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Frequently-Asked Questions \'96 check here before asking a question on the mailing list.\par}
To contribute code to Google Test, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
PumpManual \'96 how we generate some of Google Test's source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_6_FAQ{\tc \v V1_6_FAQ}\par \pard\plain 
{\bkmkstart AAAAAAAEOB}
{\bkmkend AAAAAAAEOB}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you cannot find the answer to your question here, and you have read Primer and AdvancedGuide, send it to {\f2 googletestframework@googlegroups.com}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I use Google Test instead of my favorite C++ testing framework?} \par}
First, let us say clearly that we don't want to get into the debate of which C++ testing framework is {\b the best} . There exist many fine frameworks for writing C++ tests, and we have tremendous respect for the developers and users of them. We don't think there is (or will be) a single best framework - you have to pick the right tool for the particular task you are tackling.\par
We created Google Test because we couldn't find the right combination of features and conveniences in an existing framework to satisfy {\i our}  needs. The following is a list of things that {\i we}  like about Google Test. We don't claim them to be unique to Google Test - rather, the combination of them makes Google Test the choice for us. We hope this list can help you decide whether it is for you too.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test is designed to be portable: it doesn't require exceptions or RTTI; it works around various bugs in various compilers and environments; etc. As a result, it works on Linux, Mac OS X, Windows and several embedded operating systems.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Nonfatal assertions ({\f2 EXPECT_*} ) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. {\f2 ASSERT_EQ(5, Foo(i)) << " where i = " << i;} . It doesn't require a new set of macros or special functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 SCOPED_TRACE}  helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can decide which tests to run using name patterns. This saves time when you want to quickly reproduce a test failure.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test can generate XML test result reports that can be parsed by popular continuous build system like Hudson.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Simple things are easy in Google Test, while hard things are possible: in addition to advanced features like {\f2 global test environments} and tests parameterized by {\f2 values} or {\f2 types}, Google Test supports various ways for the user to extend the framework \'96 if Google Test doesn't do something out of the box, chances are that a user can implement the feature using Google Test's public API, without changing Google Test itself. In particular, you can:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
expand your testing vocabulary by defining {\f2 custom predicates},\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
teach Google Test how to {\f2 print your types},\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
define your own testing macros or utilities and verify them using Google Test's {\f2 Service Provider Interface}, and\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
reflect on the test cases or change the test output format by intercepting the {\f2 test events}.\par}
\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I'm getting warnings when compiling Google Test. Would you fix them?} \par}
We strive to minimize compiler warnings Google Test generates. Before releasing a new version, we test to make sure that it doesn't generate warnings when compiled using its CMake script on Windows, Linux, and Mac OS.\par
Unfortunately, this doesn't mean you are guaranteed to see no warnings when compiling Google Test in your environment:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You may be using a different compiler as we use, or a different version of the same compiler. We cannot possibly test for all compilers.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You may be compiling on a different platform as we do.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your project may be using different compiler flags as we do.\par}
It is not always possible to make Google Test warning-free for everyone. Or, it may not be desirable if the warning is rarely enabled and fixing the violations makes the code more complex.\par
If you see warnings when compiling Google Test, we suggest that you use the {\f2 -isystem}  flag (assuming your are using GCC) to mark Google Test headers as system headers. That'll suppress warnings from Google Test headers.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should not test case names and test names contain underscore?} \par}
Underscore ({\f2 _} ) is special, as C++ reserves the following to be used by the compiler and the standard library:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab any identifier that starts with an {\f2 _}  followed by an upper-case letter, and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab any identifier that containers two consecutive underscores (i.e. {\f2 __} ) {\i anywhere}  in its name.\par}
User code is {\i prohibited}  from using such identifiers.\par
Now let's look at what this means for {\f2 TEST}  and {\f2 TEST_F} .\par
Currently {\f2 TEST(TestCaseName, TestName)}  generates a class named {\f2 TestCaseName_TestName_Test} . What happens if {\f2 TestCaseName}  or {\f2 TestName}  contains {\f2 _} ?\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestCaseName}  starts with an {\f2 _}  followed by an upper-case letter (say, {\f2 _Foo} ), we end up with {\f2 _Foo_TestName_Test} , which is reserved and thus invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestCaseName}  ends with an {\f2 _}  (say, {\f2 Foo_} ), we get {\f2 Foo__TestName_Test} , which is invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestName}  starts with an {\f2 _}  (say, {\f2 _Bar} ), we get {\f2 TestCaseName__Bar_Test} , which is invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestName}  ends with an {\f2 _}  (say, {\f2 Bar_} ), we get {\f2 TestCaseName_Bar__Test} , which is invalid.\par}
So clearly {\f2 TestCaseName}  and {\f2 TestName}  cannot start or end with {\f2 _}  (Actually, {\f2 TestCaseName}  can start with {\f2 _}  \'96 as long as the {\f2 _}  isn't followed by an upper-case letter. But that's getting complicated. So for simplicity we just say that it cannot start with {\f2 _} .).\par
It may seem fine for {\f2 TestCaseName}  and {\f2 TestName}  to contain {\f2 _}  in the middle. However, consider this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(Time, Flies_Like_An_Arrow) \{ ... \}\par
TEST(Time_Flies, Like_An_Arrow) \{ ... \}\par
}
\par
Now, the two {\f2 TEST} s will both generate the same class ({\f2 Time_Files_Like_An_Arrow_Test} ). That's not good.\par
So for simplicity, we just ask the users to avoid {\f2 _}  in {\f2 TestCaseName}  and {\f2 TestName} . The rule is more constraining than necessary, but it's simple and easy to remember. It also gives Google Test some wiggle room in case its implementation needs to change in the future.\par
If you violate the rule, there may not be immediately consequences, but your test may (just may) break with a new compiler (or a new version of the compiler you are using) or with a new version of Google Test. Therefore it's best to follow the rule.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why is it not recommended to install a pre-compiled copy of Google Test (for example, into /usr/local)?} \par}
In the early days, we said that you could install compiled Google Test libraries on {\f2 *} nix systems using {\f2 make install} . Then every user of your machine can write tests without recompiling Google Test.\par
This seemed like a good idea, but it has a got-cha: every user needs to compile his tests using the {\i same}  compiler flags used to compile the installed Google Test libraries; otherwise he may run into undefined behaviors (i.e. the tests can behave strangely and may even crash for no obvious reasons).\par
Why? Because C++ has this thing called the One-Definition Rule: if two C++ source files contain different definitions of the same class/function/variable, and you link them together, you violate the rule. The linker may or may not catch the error (in many cases it's not required by the C++ standard to catch the violation). If it doesn't, you get strange run-time behaviors that are unexpected and hard to debug.\par
If you compile Google Test and your test code using different compiler flags, they may see different definitions of the same class/function/variable (e.g. due to the use of {\f2 #if}  in Google Test). Therefore, for your sanity, we recommend to avoid installing pre-compiled Google Test libraries. Instead, each project should compile Google Test itself such that it can be sure that the same flags are used for both Google Test and the tests.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I generate 64-bit binaries on Windows (using Visual Studio 2008)?} \par}
(Answered by Trevor Robinson)\par
Load the supplied Visual Studio solution file, either {\f2 msvc\\gtest-md.sln}  or {\f2 msvc\\gtest.sln} . Go through the migration wizard to migrate the solution and project files to Visual Studio 2008. Select {\f2 Configuration Manager...}  from the {\f2 Build}  menu. Select {\f2 <New...>}  from the {\f2 Active solution platform}  dropdown. Select {\f2 x64}  from the new platform dropdown, leave {\f2 Copy settings from}  set to {\f2 Win32}  and {\f2 Create new project platforms}  checked, then click {\f2 OK} . You now have {\f2 Win32}  and {\f2 x64}  platform configurations, selectable from the {\f2 Standard}  toolbar, which allow you to toggle between building 32-bit or 64-bit binaries (or both at once using Batch Build).\par
In order to prevent build output files from overwriting one another, you'll need to change the {\f2 Intermediate Directory}  settings for the newly created platform configuration across all the projects. To do this, multi-select (e.g. using shift-click) all projects (but not the solution) in the {\f2 Solution Explorer} . Right-click one of them and select {\f2 Properties} . In the left pane, select {\f2 Configuration Properties} , and from the {\f2 Configuration}  dropdown, select {\f2 All Configurations} . Make sure the selected platform is {\f2 x64} . For the {\f2 Intermediate Directory}  setting, change the value from {\f2 \\}  to {\f2 \\} . Click {\f2 OK}  and then build the solution. When the build is complete, the 64-bit binaries will be in the {\f2 msvc\\x64\\Debug}  directory.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I use Google Test on MinGW?} \par}
We haven't tested this ourselves, but Per Abrahamsen reported that he was able to compile and install Google Test successfully when using MinGW from Cygwin. You'll need to configure it with:\par
{\f2 PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"} \par
You should be able to replace the {\f2 -mno-cygwin}  option with direct links to the real MinGW binaries, but we haven't tried that.\par
Caveats:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There are many warnings when compiling.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 make check}  will produce some errors as not all tests for Google Test itself are compatible with MinGW.\par}
We also have reports on successful cross compilation of Google Test MinGW binaries on Linux using {\f2 these instructions} on the WxWidgets site.\par
Please contact {\f2 googletestframework@googlegroups.com}  if you are interested in improving the support for MinGW.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test support EXPECT_EQ(NULL, ptr) and ASSERT_EQ(NULL, ptr) but not EXPECT_NE(NULL, ptr) and ASSERT_NE(NULL, ptr)?} \par}
Due to some peculiarity of C++, it requires some non-trivial template meta programming tricks to support using {\f2 NULL}  as an argument of the {\f2 EXPECT_XX()}  and {\f2 ASSERT_XX()}  macros. Therefore we only do it where it's most needed (otherwise we make the implementation of Google Test harder to maintain and more error-prone than necessary).\par
The {\f2 EXPECT_EQ()}  macro takes the {\i expected}  value as its first argument and the {\i actual}  value as the second. It's reasonable that someone wants to write {\f2 EXPECT_EQ(NULL, some_expression)} , and this indeed was requested several times. Therefore we implemented it.\par
The need for {\f2 EXPECT_NE(NULL, ptr)}  isn't nearly as strong. When the assertion fails, you already know that {\f2 ptr}  must be {\f2 NULL} , so it doesn't add any information to print ptr in this case. That means {\f2 EXPECT_TRUE(ptr ! NULL)}  works just as well.\par
If we were to support {\f2 EXPECT_NE(NULL, ptr)} , for consistency we'll have to support {\f2 EXPECT_NE(ptr, NULL)}  as well, as unlike {\f2 EXPECT_EQ} , we don't have a convention on the order of the two arguments for {\f2 EXPECT_NE} . This means using the template meta programming tricks twice in the implementation, making it even harder to understand and maintain. We believe the benefit doesn't justify the cost.\par
Finally, with the growth of Google {\b Mock}'s {\f2 matcher} library, we are encouraging people to use the unified {\f2 EXPECT_THAT(value, matcher)}  syntax more often in tests. One significant advantage of the matcher approach is that matchers can be easily combined to form new matchers, while the {\f2 EXPECT_NE} , etc, macros cannot be easily combined. Therefore we want to invest more in the matchers than in the {\f2 EXPECT_XX()}  macros.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Does Google Test support running tests in parallel?} \par}
Test runners tend to be tightly coupled with the build/test environment, and Google Test doesn't try to solve the problem of running tests in parallel. Instead, we tried to make Google Test work nicely with test runners. For example, Google Test's XML report contains the time spent on each test, and its {\f2 gtest_list_tests}  and {\f2 gtest_filter}  flags can be used for splitting the execution of test methods into multiple processes. These functionalities can help the test runner run the tests in parallel.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't Google Test run the tests in different threads to speed things up?} \par}
It's difficult to write thread-safe code. Most tests are not written with thread-safety in mind, and thus may not work correctly in a multi-threaded setting.\par
If you think about it, it's already hard to make your code work when you know what other threads are doing. It's much harder, and sometimes even impossible, to make your code work when you don't know what other threads are doing (remember that test methods can be added, deleted, or modified after your test was written). If you want to run the tests in parallel, you'd better run them in different processes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why aren't Google Test assertions implemented using exceptions?} \par}
Our original motivation was to be able to use Google Test in projects that disable exceptions. Later we realized some additional benefits of this approach:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Throwing in a destructor is undefined behavior in C++. Not using exceptions means Google Test's assertions are safe to use in destructors.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 EXPECT_*}  family of macros will continue even after a failure, allowing multiple failures in a {\f2 TEST}  to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If assertions are implemented using exceptions, a test may falsely ignore a failure if it's caught by user code: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid try \{ ... ASSERT_TRUE(...) ... \}\par
catch (...) \{ ... \}\par
}
 The above code will pass even if the {\f2 ASSERT_TRUE}  throws. While it's unlikely for someone to write this in a test, it's possible to run into this pattern when you write assertions in callbacks that are called by the code under test.\par}
The downside of not using exceptions is that {\f2 ASSERT_*}  (implemented using {\f2 return} ) will only abort the current function, not the current {\f2 TEST} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why do we use two different macros for tests with and without fixtures?} \par}
Unfortunately, C++'s macro system doesn't allow us to use the same macro for both cases. One possibility is to provide only one macro for tests with fixtures, and require the user to define an empty fixture sometimes:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\};\par
\par
TEST_F(FooTest, DoesThis) \{ ... \}\par
}
 or {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Test FooTest;\par
\par
TEST_F(FooTest, DoesThat) \{ ... \}\par
}
\par
Yet, many people think this is one line too many. :-) Our goal was to make it really easy to write tests, so we tried to make simple tests trivial to create. That means using a separate macro for such tests.\par
We think neither approach is ideal, yet either of them is reasonable. In the end, it probably doesn't matter much either way.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't we use structs as test fixtures?} \par}
We like to use structs only when representing passive data. This distinction between structs and classes is good for documenting the intent of the code's author. Since test fixtures have logic like {\f2 SetUp()}  and {\f2 TearDown()} , they are better defined as classes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why are death tests implemented as assertions instead of using a test runner?} \par}
Our goal was to make death tests as convenient for a user as C++ possibly allows. In particular:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect. The death test would be written in C++, while the runner spec may or may not be. A user needs to carefully keep the two in sync. {\f2 ASSERT_DEATH(statement, expected_message)}  specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can be mixed with other assertions and other logic at your will. You are not limited to one death test per test method. For example, you can write something like: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (FooCondition()) \{\par
  ASSERT_DEATH(Bar(), "blah");\par
\} else \{\par
  ASSERT_EQ(5, Bar());\par
\}\par
}
 If you prefer one death test per test method, you can write your tests in that style too, but we don't want to impose that on the users. The fewer artificial limitations the better.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can reference local variables in the current function, and you can decide how many death tests you want based on run-time information. For example, {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int count = GetCount();  // Only known at run time.\par
for (int i = 1; i <= count; i++) \{\par
  ASSERT_DEATH(\{\par
    double* buffer = new double[i];\par
    ... initializes buffer ...\par
    Foo(buffer, i)\par
  \}, "blah blah");\par
\}\par
}
 The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.\par}
Another interesting thing about {\f2 ASSERT_DEATH}  is that it calls {\f2 fork()}  to create a child process to run the death test. This is lightening fast, as {\f2 fork()}  uses copy-on-write pages and incurs almost zero overhead, and the child process starts from the user-supplied statement directly, skipping all global and local initialization and any code leading to the given statement. If you launch the child process from scratch, it can take seconds just to load everything and start running if the test links to many libraries dynamically.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test modifies some state, but the change seems lost after the death test finishes. Why?} \par}
Death tests ({\f2 EXPECT_DEATH} , etc) are executed in a sub-process s.t. the expected crash won't kill the test program (i.e. the parent process). As a result, any in-memory side effects they incur are observable in their respective sub-processes, but not in the parent process. You can think of them as running in a parallel universe, more or less.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "undefined references" to some static const member variables, but I did define them in the class body. What's wrong?} \par}
If your class has a static data member:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
  static const int kBar = 100;\par
\};\par
}
\par
You also need to define it {\i outside}  of the class body in {\f2 foo.cc} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int Foo::kBar;  // No initializer here.\par
}
\par
Otherwise your code is **invalid C++**, and may break in unexpected ways. In particular, using it in Google Test comparison assertions ({\f2 EXPECT_EQ} , etc) will generate an "undefined reference" linker error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have an interface that has several implementations. Can I write a set of tests once and repeat them over all the implementations?} \par}
Google Test doesn't yet have good support for this kind of tests, or data-driven tests in general. We hope to be able to make improvements in this area soon.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I derive a test fixture from another?} \par}
Yes.\par
Each test fixture has a corresponding and same named test case. This means only one test case can use a particular fixture. Sometimes, however, multiple test cases may want to use the same or slightly different fixtures. For example, you may want to make sure that all of a GUI library's test cases don't leak important system resources like fonts and brushes.\par
In Google Test, you share a fixture among test cases by putting the shared logic in a base test fixture, then deriving from that base a separate fixture for each test case that wants to use this common logic. You then use {\f2 {\b TEST_F()}}  to write tests using each derived fixture.\par
Typically, your code looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Defines a base test fixture.\par
class BaseTest : public ::testing::Test \{\par
  protected:\par
   ...\par
\};\par
\par
// Derives a fixture FooTest from BaseTest.\par
class FooTest : public BaseTest \{\par
  protected:\par
    virtual void SetUp() \{\par
      BaseTest::SetUp();  // Sets up the base fixture first.\par
      ... additional set-up work ...\par
    \}\par
    virtual void TearDown() \{\par
      ... clean-up work for FooTest ...\par
      BaseTest::TearDown();  // Remember to tear down the base fixture\par
                             // after cleaning up FooTest!\par
    \}\par
    ... functions and variables for FooTest ...\par
\};\par
\par
// Tests that use the fixture FooTest.\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
... additional fixtures derived from BaseTest ...\par
}
\par
If necessary, you can continue to derive test fixtures from a derived fixture. Google Test has no limit on how deep the hierarchy can be.\par
For a complete example using derived test fixtures, see {\f2 sample5}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains "void value not ignored as it ought to be." What does this mean?} \par}
You're probably using an {\f2 ASSERT_*()}  in a function that doesn't return {\f2 void} . {\f2 ASSERT_*()}  can only be used in {\f2 void}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test hangs (or seg-faults). How do I fix it?} \par}
In Google Test, death tests are run in a child process and the way they work is delicate. To write death tests you really need to understand how they work. Please make sure you have read this.\par
In particular, death tests don't like having multiple threads in the parent process. So the first thing you can try is to eliminate creating threads outside of {\f2 EXPECT_DEATH()} .\par
Sometimes this is impossible as some library you must use may be creating threads before {\f2 main()}  is even reached. In this case, you can try to minimize the chance of conflicts by either moving as many activities as possible inside {\f2 EXPECT_DEATH()}  (in the extreme case, you want to move everything inside), or leaving as few things as possible in it. Also, you can try to set the death test style to {\f2 "threadsafe"} , which is safer but slower, and see if it helps.\par
If you go with thread-safe death tests, remember that they rerun the test program from the beginning in the child process. Therefore make sure your program can run side-by-side with itself and is deterministic.\par
In the end, this boils down to good concurrent programming. You have to make sure that there is no race conditions or dead locks in your program. No silver bullet - sorry!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Should I use the constructor/destructor of the test fixture or the set-up/tear-down function?} \par}
The first thing to remember is that Google Test does not reuse the same test fixture object across multiple tests. For each {\f2 TEST_F} , Google Test will create a fresh test fixture object, {\i immediately}  call {\f2 SetUp()} , run the test, call {\f2 TearDown()} , and then {\i immediately}  delete the test fixture object. Therefore, there is no need to write a {\f2 SetUp()}  or {\f2 TearDown()}  function if the constructor or destructor already does the job.\par
You may still want to use {\f2 SetUp()/TearDown()}  in the following cases:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the tear-down operation could throw an exception, you must use {\f2 TearDown()}  as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer {\f2 TearDown()}  if you want to write portable tests that work with or without exceptions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The Google Test team is considering making the assertion macros throw on platforms where exceptions are enabled (e.g. Windows, Mac OS, and Linux client-side), which will eliminate the need for the user to propagate failures from a subroutine to its caller. Therefore, you shouldn't use Google Test assertions in a destructor if your code could run on such a platform.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use {\f2 SetUp()/TearDown()} .\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains "no matching function to call" when I use ASSERT_PREDn. How do I fix it?} \par}
If the predicate function you use in {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*}  is overloaded or a template, the compiler will have trouble figuring out which overloaded version it should use. {\f2 ASSERT_PRED_FORMAT*}  and {\f2 EXPECT_PRED_FORMAT*}  don't have this problem.\par
If you see this error, you might want to switch to {\f2 (ASSERT|EXPECT)_PRED_FORMAT*} , which will also give you a better failure message. If, however, that is not an option, you can resolve the problem by explicitly telling the compiler which version to pick.\par
For example, suppose you have\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsPositive(int n) \{\par
  return n > 0;\par
\}\par
bool IsPositive(double x) \{\par
  return x > 0;\par
\}\par
}
\par
you will get a compiler error if you write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(IsPositive, 5);\par
}
\par
However, this will work:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(*static_cast<bool (*)(int)>*(IsPositive), 5);\par
}
\par
(The stuff inside the angled brackets for the {\f2 static_cast}  operator is the type of the function pointer for the {\f2 int} -version of {\f2 IsPositive()} .)\par
As another example, when you have a template function\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
bool IsNegative(T x) \{\par
  return x < 0;\par
\}\par
}
\par
you can use it in a predicate assertion like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED1(IsNegative*<int>*, -5);\par
}
\par
Things are more interesting if your template has more than one parameters. The following won't compile:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*GreaterThan<int, int>*, 5, 0);\par
}
\par
as the C++ pre-processor thinks you are giving {\f2 ASSERT_PRED2}  4 arguments, which is one more than expected. The workaround is to wrap the predicate function in parentheses:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*(GreaterThan<int, int>)*, 5, 0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains about "ignoring return value" when I call RUN_ALL_TESTS(). Why?} \par}
Some people had been ignoring the return value of {\f2 RUN_ALL_TESTS()} . That is, instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid return RUN_ALL_TESTS();\par
}
\par
they write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid RUN_ALL_TESTS();\par
}
\par
This is wrong and dangerous. A test runner needs to see the return value of {\f2 RUN_ALL_TESTS()}  in order to determine if a test has passed. If your {\f2 main()}  function ignores it, your test will be considered successful even if it has a Google Test assertion failure. Very bad.\par
To help the users avoid this dangerous bug, the implementation of {\f2 RUN_ALL_TESTS()}  causes gcc to raise this warning, when the return value is ignored. If you see this warning, the fix is simple: just make sure its value is used as the return value of {\f2 main()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains that a constructor (or destructor) cannot return a value. What's going on?} \par}
Due to a peculiarity of C++, in order to support the syntax for streaming messages to an {\f2 ASSERT_*} , e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(1, Foo()) << "blah blah" << foo;\par
}
\par
we had to give up using {\f2 ASSERT*}  and {\f2 FAIL*}  (but not {\f2 EXPECT*}  and {\f2 ADD_FAILURE*} ) in constructors and destructors. The workaround is to move the content of your constructor/destructor to a private void member function, or switch to {\f2 EXPECT_*()}  if that works. This section in the user's guide explains it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My set-up function is not called. Why?} \par}
C++ is case-sensitive. It should be spelled as {\f2 SetUp()} . Did you spell it as {\f2 Setup()} ?\par
Similarly, sometimes people spell {\f2 SetUpTestCase()}  as {\f2 SetupTestCase()}  and wonder why it's never called.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I jump to the line of a failure in Emacs directly?} \par}
Google Test's failure message format is understood by Emacs and many other IDEs, like acme and XCode. If a Google Test message is in a compilation buffer in Emacs, then it's clickable. You can now hit {\f2 enter}  on a message to jump to the corresponding source code, or use {\f2 C-x} ` to jump to the next failure.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have several test cases which share the same test fixture logic, do I have to define a new test fixture class for each of them? This seems pretty tedious.} \par}
You don't have to. Instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public BaseTest \{\};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
class BarTest : public BaseTest \{\};\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
you can simply {\f2 typedef}  the test fixtures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef BaseTest FooTest;\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef BaseTest BarTest;\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Google Test output is buried in a whole bunch of log messages. What do I do?} \par}
The Google Test output is meant to be a concise and human-friendly report. If your test generates textual output itself, it will mix with the Google Test output, making it hard to read. However, there is an easy solution to this problem.\par
Since most log messages go to stderr, we decided to let Google Test output go to stdout. This way, you can easily separate the two using redirection. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ./my_test > googletest_output.txt\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I prefer test fixtures over global variables?} \par}
There are several good reasons:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It's likely your test needs to change the states of its global variables. This makes it difficult to keep side effects from escaping one test and contaminating others, making debugging difficult. By using fixtures, each test has a fresh set of variables that's different (but with the same names). Thus, tests are kept independent of each other.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Global variables pollute the global namespace.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test fixtures can be reused via subclassing, which cannot be done easily with global variables. This is useful if many test cases have something in common.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class members without writing FRIEND_TEST()s?} \par}
You should try to write testable code, which means classes should be easily tested from their public interface. One way to achieve this is the Pimpl idiom: you move all private members of a class into a helper class, and make all members of the helper class public.\par
You have several other options that don't require using {\f2 FRIEND_TEST} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Write the tests as members of the fixture class: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  void Test1() \{...\} // This accesses private members of class Foo.\par
  void Test2() \{...\} // So does this one.\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  Test1();\par
\}\par
\par
TEST_F(FooTest, Test2) \{\par
  Test2();\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In the fixture class, write accessors for the tested class' private members, then use the accessors in your tests: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  T1 get_private_member1(Foo* obj) \{\par
    return obj->private_member1_;\par
  \}\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  ...\par
  get_private_member1(x)\par
  ...\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the methods are declared {\b protected} , you can change their access level in a test-only subclass: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class YourClass \{\par
  ...\par
 protected: // protected access for testability.\par
  int DoSomethingReturningInt();\par
  ...\par
\};\par
\par
// in the your_class_test.cc file:\par
class TestableYourClass : public YourClass \{\par
  ...\par
 public: using YourClass::DoSomethingReturningInt; // changes access rights\par
  ...\par
\};\par
\par
TEST_F(YourClassTest, DoSomethingTest) \{\par
  TestableYourClass obj;\par
  assertEquals(expected_value, obj.DoSomethingReturningInt());\par
\}\par
}
\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class static members without writing FRIEND_TEST()s?} \par}
We find private static methods clutter the header file. They are implementation details and ideally should be kept out of a .h. So often I make them free functions instead.\par
Instead of: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
 private:\par
  static bool Func(int n);\par
\};\par
\par
// foo.cc\par
bool Foo::Func(int n) \{ ... \}\par
\par
// foo_test.cc\par
EXPECT_TRUE(Foo::Func(12345));\par
}
\par
You probably should better write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
\};\par
\par
// foo.cc\par
namespace internal \{\par
  bool Func(int n) \{ ... \}\par
\}\par
\par
// foo_test.cc\par
namespace internal \{\par
  bool Func(int n);\par
\}\par
\par
EXPECT_TRUE(internal::Func(12345));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I would like to run a test several times with different parameters. Do I need to write several similar copies of it?} \par}
No. You can use a feature called {\f2 value-parameterized tests} which lets you repeat your tests with different parameters, without defining it more than once.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test a file that defines main()?} \par}
To test a {\f2 foo.cc}  file, you need to compile and link it into your unit test program. However, when the file contains a definition for the {\f2 main()}  function, it will clash with the {\f2 main()}  of your unit test, and will result in a build error.\par
The right solution is to split it into three files:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.h}  which contains the declarations,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.cc}  which contains the definitions except {\f2 main()} , and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo_main.cc}  which contains nothing but the definition of {\f2 main()} .\par}
Then {\f2 foo.cc}  can be easily tested.\par
If you are adding tests to an existing file and don't want an intrusive change like this, there is a hack: just include the entire {\f2 foo.cc}  file in your unit test. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File foo_unittest.cc\par
\par
// The headers section\par
...\par
\par
// Renames main() in foo.cc to make room for the unit test main()\par
#define main FooMain\par
\par
#include "a/b/foo.cc"\par
\par
// The tests start here.\par
...\par
}
\par
However, please remember this is a hack and should only be used as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What can the statement argument in ASSERT_DEATH() be?} \par}
{\f2 ASSERT_DEATH(_statement_, _regex_)}  (or any death assertion macro) can be used wherever {\f2 _statement_}  is valid. So basically {\f2 _statement_}  can be any C++ statement that makes sense in the current context. In particular, it can reference global and/or local variables, and can be:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a simple function call (often the case),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a complex expression, or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a compound statement.\par}
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Some examples are shown here: \par
}{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A death test can be a simple function call.\par
TEST(MyDeathTest, FunctionCall) \{\par
  ASSERT_DEATH(Xyz(5), "Xyz failed");\par
\}\par
\par
// Or a complex expression that references variables and functions.\par
TEST(MyDeathTest, ComplexExpression) \{\par
  const bool c = Condition();\par
  ASSERT_DEATH((c ? Func1(0) : object2.Method("test")),\par
               "(Func1|Method) failed");\par
\}\par
\par
// Death assertions can be used any where in a function. In\par
// particular, they can be inside a loop.\par
TEST(MyDeathTest, InsideLoop) \{\par
  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\par
  for (int i = 0; i < 5; i++) \{\par
    EXPECT_DEATH_M(Foo(i), "Foo has \\\\d+ errors",\par
                   ::testing::Message() << "where i is " << i);\par
  \}\par
\}\par
\par
// A death assertion can contain a compound statement.\par
TEST(MyDeathTest, CompoundStatement) \{\par
  // Verifies that at lease one of Bar(0), Bar(1), ..., and\par
  // Bar(4) dies.\par
  ASSERT_DEATH(\{\par
    for (int i = 0; i < 5; i++) \{\par
      Bar(i);\par
    \}\par
  \},\par
  "Bar has \\\\d+ errors");\}\par
}
\par
{\f2 googletest_unittest.cc}  contains more examples if you are interested.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What syntax does the regular expression in ASSERT_DEATH use?} \par}
On POSIX systems, Google Test uses the POSIX Extended regular expression syntax ({\f2 http://en.wikipedia.org/wiki/Regular_expression#POSIX_Extended_Regular_Expressions}). On Windows, it uses a limited variant of regular expression syntax. For more details, see the {\f2 regular expression syntax}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a fixture class Foo, but TEST_F(Foo, Bar) gives me error "no matching function for call to Foo::Foo()". Why?} \par}
Google Test needs to be able to create objects of your test fixture class, so it must have a default constructor. Normally the compiler will define one for you. However, there are cases where you have to define your own:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you explicitly declare a non-default constructor for class {\f2 Foo} , then you need to define a default constructor, even if it would be empty.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Foo}  has a const non-static data member, then you have to define the default constructor {\i and}  initialize the const member in the initializer list of the constructor. (Early versions of {\f2 gcc}  doesn't force you to initialize the const member. It's a bug that has been fixed in {\f2 gcc 4} .)\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does ASSERT_DEATH complain about previous threads that were already joined?} \par}
With the Linux pthread library, there is no turning back once you cross the line from single thread to multiple threads. The first time you create a thread, a manager thread is created in addition, so you get 3, not 2, threads. Later when the thread you create joins the main thread, the thread count decrements by 1, but the manager thread will never be killed, so you still have 2 threads, which means you cannot safely run a death test.\par
The new NPTL thread library doesn't suffer from this problem, as it doesn't create a manager thread. However, if you don't control which machine your test runs on, you shouldn't depend on this.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test require the entire test case, instead of individual tests, to be named FOODeathTest when it uses ASSERT_DEATH?} \par}
Google Test does not interleave tests from different test cases. That is, it runs all tests in one test case first, and then runs all tests in the next test case, and so on. Google Test does this because it needs to set up a test case before the first test in it is run, and tear it down afterwords. Splitting up the test case would require multiple set-up and tear-down processes, which is inefficient and makes the semantics unclean.\par
If we were to determine the order of tests based on test name instead of test case name, then we would have a problem with the following situation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(FooTest, AbcDeathTest) \{ ... \}\par
TEST_F(FooTest, Uvw) \{ ... \}\par
\par
TEST_F(BarTest, DefDeathTest) \{ ... \}\par
TEST_F(BarTest, Xyz) \{ ... \}\par
}
\par
Since {\f2 FooTest.AbcDeathTest}  needs to run before {\f2 BarTest.Xyz} , and we don't interleave tests from different test cases, we need to run all tests in the {\f2 {\b FooTest}}  case before running any test in the {\f2 BarTest}  case. This contradicts with the requirement to run {\f2 BarTest.DefDeathTest}  before {\f2 FooTest.Uvw} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do?} \par}
You don't have to, but if you like, you may split up the test case into {\f2 {\b FooTest}}  and {\f2 FooDeathTest} , where the names make it clear that they are related:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooDeathTest, Uvw) \{ ... EXPECT_DEATH(...) ... \}\par
TEST_F(FooDeathTest, Xyz) \{ ... ASSERT_DEATH(...) ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "no match for 'operator<<'" when I use an assertion. What gives?} \par}
If you use a user-defined type {\f2 FooType}  in an assertion, you must make sure there is an {\f2 std::ostream& operator<<(std::ostream&, const FooType&)}  function defined such that we can print a value of {\f2 FooType} .\par
In addition, if {\f2 FooType}  is declared in a name space, the {\f2 <<}  operator also needs to be defined in the {\i same}  name space.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I suppress the memory leak messages on Windows?} \par}
Since the statically initialized Google Test singleton requires allocations on the heap, the Visual C++ memory leak detector will report memory leaks at the end of the program run. The easiest way to avoid this is to use the {\f2 _CrtMemCheckpoint}  and {\f2 _CrtMemDumpAllObjectsSince}  calls to not report any statically initialized heap objects. See MSDN for more details and additional heap check/debug routines.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I am building my project with Google Test in Visual Studio and all I'm getting is a bunch of linker errors (or warnings). Help!} \par}
You may get a number of the following linker error or warnings if you attempt to link your test project with the Google Test library when your project and the are not built using the same compiler settings.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK2005: symbol already defined in object\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4217: locally defined symbol 'symbol' imported in function 'function'\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4049: locally defined symbol 'symbol' imported\par}
The Google Test project (gtest.vcproj) has the Runtime Library option set to /MT (use multi-threaded static libraries, /MTd for debug). If your project uses something else, for example /MD (use multi-threaded DLLs, /MDd for debug), you need to change the setting in the Google Test project to match your project's.\par
To update this setting open the project properties in the Visual Studio IDE then select the branch Configuration Properties | C/C++ | Code Generation and change the option "Runtime Library". You may also try using gtest-md.vcproj instead of gtest.vcproj.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I put my tests in a library and Google Test doesn't run them. What's happening?} \par}
Have you read a {\f2 warning} on the Google Test Primer page?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to use Google Test with Visual Studio but don't know where to start.} \par}
Many people are in your position and one of the posted his solution to our mailing list. Here is his link: {\f2 http://hassanjamilahmad.blogspot.com/2009/07/gtest-starters-help.html}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I am seeing compile errors mentioning std::type_traits when I try to use Google Test on Solaris.} \par}
Google Test uses parts of the standard C++ library that SunStudio does not support. Our users reported success using alternative implementations. Try running the build after runing this commad:\par
`export CC=cc CXX=CC CXXFLAGS='-library=stlport4'`\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can my code detect if it is running in a test?} \par}
If you write code that sniffs whether it's running in a test and does different things accordingly, you are leaking test-only logic into production code and there is no easy way to ensure that the test-only code paths aren't run by mistake in production. Such cleverness also leads to {\f2 Heisenbugs}. Therefore we strongly advise against the practice, and Google Test doesn't provide a way to do it.\par
In general, the recommended way to cause the code to behave differently under test is {\f2 dependency injection}. You can inject different functionality from the test and from the production code. Since your production code doesn't link in the for-test logic at all, there is no danger in accidentally running it.\par
However, if you {\i really} , {\i really} , {\i really}  have no choice, and if you follow the rule of ending your test program names with {\f2 _test} , you can use the {\i horrible}  hack of sniffing your executable name ({\f2 argv[0]}  in {\f2 main()} ) to know whether the code is under test.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google Test defines a macro that clashes with one defined by another library. How do I deal with that?} \par}
In C++, macros don't obey namespaces. Therefore two libraries that both define a macro of the same name will clash if you {\f2 #include}  both definitions. In case a Google Test macro clashes with another library, you can force Google Test to rename its macro to avoid the conflict.\par
Specifically, if both Google Test and some other code define macro {\f2 FOO} , you can add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_DONT_DEFINE_FOO=1\par
}
 to the compiler flags to tell Google Test to change the macro's name from {\f2 FOO}  to {\f2 GTEST_FOO} . For example, with {\f2 -DGTEST_DONT_DEFINE_TEST=1} , you'll need to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid GTEST_TEST(SomeTest, DoesThis) \{ ... \}\par
}
 instead of {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(SomeTest, DoesThis) \{ ... \}\par
}
 in order to define a test.\par
Currently, the following {\f2 TEST} , {\f2 FAIL} , {\f2 SUCCEED} , and the basic comparison assertion macros can have alternative names. You can see the full list of covered macros {\f2 here}. More information can be found in the "Avoiding Macro Name Clashes" section of the README file.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not covered in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other {\f2 wiki pages},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googletestframework@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the revision number if you check out from SVN directly) of Google Test you use (Google Test is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Introduction: Why Google C++ Testing Framework?{\tc \v Introduction: Why Google C++ Testing Framework?}\par \pard\plain 
{\bkmkstart AAAAAAAEOC}
{\bkmkend AAAAAAAEOC}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\i Google C++ Testing Framework}  helps you write better C++ tests.\par
No matter whether you work on Linux, Windows, or a Mac, if you write C++ code, Google Test can help you.\par
So what makes a good test, and how does Google C++ Testing Framework fit in? We believe:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i independent}  and {\i repeatable} . It's a pain to debug a test that succeeds or fails as a result of other tests. Google C++ Testing Framework isolates the tests by running each of them on a different object. When a test fails, Google C++ Testing Framework allows you to run it in isolation for quick debugging.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be well {\i organized}  and reflect the structure of the tested code. Google C++ Testing Framework groups related tests into test cases that can share data and subroutines. This common pattern is easy to recognize and makes tests easy to maintain. Such consistency is especially helpful when people switch projects and start to work on a new code base.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i portable}  and {\i reusable} . The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral. Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations. (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When tests fail, they should provide as much {\i information}  about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The testing framework should liberate test writers from housekeeping chores and let them focus on the test {\i content} . Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i fast} . With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\par}
Since Google C++ Testing Framework is based on the popular xUnit architecture, you'll feel right at home if you've used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let's go!\par
{\i Note:}  We sometimes refer to Google C++ Testing Framework informally as {\i Google Test} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting up a New Test Project} \par}
To write a test program using Google Test, you need to compile Google Test into a library and link your test with it. We provide build files for some popular build systems: {\f2 msvc/}  for Visual Studio, {\f2 xcode/}  for Mac Xcode, {\f2 make/}  for GNU make, {\f2 codegear/}  for Borland C++ Builder, and the autotools script (deprecated) and {\f2 CMakeLists.txt}  for CMake (recommended) in the Google Test root directory. If your build system is not on this list, you can take a look at {\f2 make/Makefile}  to learn how Google Test should be compiled (basically you want to compile {\f2 src/gtest-all.cc}  with {\f2 GTEST_ROOT}  and {\f2 GTEST_ROOT/include}  in the header search path, where {\f2 GTEST_ROOT}  is the Google Test root directory).\par
Once you are able to compile the Google Test library, you should create a project or build target for your test program. Make sure you have {\f2 GTEST_ROOT/include}  in the header search path so that the compiler can find {\f2 "gtest/gtest.h"}  when compiling your test. Set up your test project to link with the Google Test library (for example, in Visual Studio, this is done by adding a dependency on {\f2 gtest.vcproj} ).\par
If you still have questions, take a look at how Google Test's own tests are built and use them as examples.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Basic Concepts} \par}
When using Google Test, you start by writing {\i assertions} , which are statements that check whether a condition is true. An assertion's result can be {\i success} , {\i nonfatal failure} , or {\i fatal failure} . If a fatal failure occurs, it aborts the current function; otherwise the program continues normally.\par
{\i Tests}  use assertions to verify the tested code's behavior. If a test crashes or has a failed assertion, then it {\i fails} ; otherwise it {\i succeeds} .\par
A {\i test case}  contains one or many tests. You should group your tests into test cases that reflect the structure of the tested code. When multiple tests in a test case need to share common objects and subroutines, you can put them into a {\i test fixture}  class.\par
A {\i test program}  can contain multiple test cases.\par
We'll now explain how to write a test program, starting at the individual assertion level and building up to tests and test cases.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Assertions} \par}
Google Test assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, Google Test prints the assertion's source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to Google Test's message.\par
The assertions come in pairs that test the same thing but have different effects on the current function. {\f2 ASSERT_*}  versions generate fatal failures when they fail, and {\b abort the current function} . {\f2 EXPECT_*}  versions generate nonfatal failures, which don't abort the current function. Usually {\f2 EXPECT_*}  are preferred, as they allow more than one failures to be reported in a test. However, you should use {\f2 ASSERT_*}  if it doesn't make sense to continue when the assertion in question fails.\par
Since a failed {\f2 ASSERT_*}  returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors.\par
To provide a custom failure message, simply stream it into the macro using the {\f2 <<}  operator, or a sequence of such operators. An example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";\par
\par
for (int i = 0; i < x.size(); ++i) \{\par
  EXPECT_EQ(x[i], y[i]) << "Vectors x and y differ at index " << i;\par
\}\par
}
\par
Anything that can be streamed to an {\f2 ostream}  can be streamed to an assertion macro\'96in particular, C strings and {\f2 string}  objects. If a wide string ({\f2 wchar_t*} , {\f2 TCHAR*}  in {\f2 UNICODE}  mode on Windows, or {\f2 std::wstring} ) is streamed to an assertion, it will be translated to UTF-8 when printed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Basic Assertions} \par}
These assertions do basic true/false condition testing. \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_TRUE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_TRUE(} _condition_{\f2 )} ; \cell }{{\i condition}  is true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FALSE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_FALSE(} _condition_{\f2 )} ; \cell }{{\i condition}  is false \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Remember, when they fail, {\f2 ASSERT_*}  yields a fatal failure and returns from the current function, while {\f2 EXPECT_*}  yields a nonfatal failure, allowing the function to continue running. In either case, an assertion failure means its containing test fails.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Binary Comparison} \par}
This section describes assertions that compare two values.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EQ(} _expected_{\f2 ,} _actual_{\f2 );} \cell }{{\f2 EXPECT_EQ(} _expected_{\f2 ,} _actual_{\f2 );} \cell }{{\i expected}  {\f2 ==}  {\i actual}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_NE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 !=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_LT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 <}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_LE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 <=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_GT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 >}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_GE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 >=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the event of a failure, Google Test prints both {\i val1}  and {\i val2}  . In {\f2 ASSERT_EQ*}  and {\f2 EXPECT_EQ*}  (and all other equality assertions we'll introduce later), you should put the expression you want to test in the position of {\i actual} , and put its expected value in {\i expected} , as Google Test's failure messages are optimized for this convention.\par
Value arguments must be comparable by the assertion's comparison operator or you'll get a compiler error. We used to require the arguments to support the {\f2 <<}  operator for streaming to an {\f2 ostream} , but it's no longer necessary since v1.6.0 (if {\f2 <<}  is supported, it will be called to print the arguments when the assertion fails; otherwise Google Test will attempt to print them in the best way it can. For more details and how to customize the printing of the arguments, see this Google {\b Mock} {\f2 recipe}.).\par
These assertions can work with a user-defined type, but only if you define the corresponding comparison operator (e.g. {\f2 ==} , {\f2 <} , etc). If the corresponding operator is defined, prefer using the {\f2 ASSERT_*()}  macros because they will print out not only the result of the comparison, but the two operands as well.\par
Arguments are always evaluated exactly once. Therefore, it's OK for the arguments to have side effects. However, as with any ordinary C/C++ function, the arguments' evaluation order is undefined (i.e. the compiler is free to choose any order) and your code should not depend on any particular argument evaluation order.\par
{\f2 ASSERT_EQ()}  does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Therefore, if you want to compare C strings (e.g. {\f2 const char*} ) by value, use {\f2 ASSERT_STREQ()}  , which will be described later on. In particular, to assert that a C string is {\f2 NULL} , use {\f2 ASSERT_STREQ(NULL, c_string)}  . However, to compare two {\f2 string}  objects, you should use {\f2 ASSERT_EQ} .\par
Macros in this section work with both narrow and wide string objects ({\f2 string}  and {\f2 wstring} ).\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Comparison} \par}
The assertions in this group compare two {\b C strings} . If you want to compare two {\f2 string}  objects, use {\f2 EXPECT_EQ} , {\f2 EXPECT_NE} , and etc instead.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{{\f2 EXPECT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{the two C strings have the same content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{{\f2 EXPECT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );} \cell }{{\f2 EXPECT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{the two C strings have the same content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );} \cell }{{\f2 EXPECT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that "CASE" in an assertion name means that case is ignored.\par
{\f2 *STREQ*}  and {\f2 *STRNE*}  also accept wide C strings ({\f2 wchar_t*} ). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings.\par
A {\f2 NULL}  pointer and an empty string are considered {\i different} .\par
{\i Availability} : Linux, Windows, Mac.\par
See also: For more string comparison tricks (substring, prefix, suffix, and regular expression matching, for example), see the Advanced Google Test Guide.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Simple Tests} \par}
To create a test:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use the {\f2 TEST()}  macro to define and name a test function, These are ordinary C++ functions that don't return a value.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In this function, along with any valid C++ statements you want to include, use the various Google Test assertions to check values.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.\par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
{\f2 TEST()}  arguments go from general to specific. The {\i first}  argument is the name of the test case, and the {\i second}  argument is the test's name within the test case. Both names must be valid C++ identifiers, and they should not contain underscore ({\f2 _} ). A test's {\i full name}  consists of its containing test case and its individual name. Tests from different test cases can have the same individual name.\par
For example, let's take a simple integer function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int Factorial(int n); // Returns the factorial of n\par
}
\par
A test case for this function might look like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests factorial of 0.\par
TEST(FactorialTest, HandlesZeroInput) \{\par
  EXPECT_EQ(1, Factorial(0));\par
\}\par
\par
// Tests factorial of positive numbers.\par
TEST(FactorialTest, HandlesPositiveInput) \{\par
  EXPECT_EQ(1, Factorial(1));\par
  EXPECT_EQ(2, Factorial(2));\par
  EXPECT_EQ(6, Factorial(3));\par
  EXPECT_EQ(40320, Factorial(8));\par
\}\par
}
\par
Google Test groups the test results by test cases, so logically-related tests should be in the same test case; in other words, the first argument to their {\f2 TEST()}  should be the same. In the above example, we have two tests, {\f2 HandlesZeroInput}  and {\f2 HandlesPositiveInput} , that belong to the same test case {\f2 FactorialTest} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Test Fixtures: Using the Same Data Configuration for Multiple Tests} \par}
If you find yourself writing two or more tests that operate on similar data, you can use a {\i test fixture} . It allows you to reuse the same configuration of objects for several different tests.\par
To create a fixture, just:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class from {\f2 {\b testing::Test}}  . Start its body with {\f2 protected:}  or {\f2 public:}  as we'll want to access fixture members from sub-classes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Inside the class, declare any objects you plan to use.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a default constructor or {\f2 SetUp()}  function to prepare the objects for each test. A common mistake is to spell {\f2 SetUp()}  as {\f2 Setup()}  with a small {\f2 u}  - don't let that happen to you.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a destructor or {\f2 TearDown()}  function to release any resources you allocated in {\f2 SetUp()}  . To learn when you should use the constructor/destructor and when you should use {\f2 SetUp()/TearDown()} , read this {\f2 FAQ entry}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If needed, define subroutines for your tests to share.\par}
When using a fixture, use {\f2 {\b TEST_F()}}  instead of {\f2 TEST()}  as it allows you to access objects and subroutines in the test fixture: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
Like {\f2 TEST()} , the first argument is the test case name, but for {\f2 {\b TEST_F()}}  this must be the name of the test fixture class. You've probably guessed: {\f2 _F}  is for fixture.\par
Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error.\par
Also, you must first define a test fixture class before using it in a {\f2 {\b TEST_F()}} , or you'll get the compiler error "`virtual outside class
declaration`".\par
For each test defined with {\f2 {\b TEST_F()}} , Google Test will:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a {\i fresh}  test fixture at runtime\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Immediately initialize it via {\f2 SetUp()}  ,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the test\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Clean up by calling {\f2 TearDown()} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Delete the test fixture. Note that different tests in the same test case have different test fixture objects, and Google Test always deletes a test fixture before it creates the next one. Google Test does not reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.\par}
As an example, let's write tests for a FIFO queue class named {\f2 {\b Queue}} , which has the following interface: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename E> // E is the element type.\par
class Queue \{\par
 public:\par
  Queue();\par
  void Enqueue(const E& element);\par
  E* Dequeue(); // Returns NULL if the queue is empty.\par
  size_t size() const;\par
  ...\par
\};\par
}
\par
First, define a fixture class. By convention, you should give it the name {\f2 {\b FooTest}}  where {\f2 Foo}  is the class being tested. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class QueueTest : public ::testing::Test \{\par
 protected:\par
  virtual void SetUp() \{\par
    q1_.Enqueue(1);\par
    q2_.Enqueue(2);\par
    q2_.Enqueue(3);\par
  \}\par
\par
  // virtual void TearDown() \{\}\par
\par
  Queue<int> q0_;\par
  Queue<int> q1_;\par
  Queue<int> q2_;\par
\};\par
}
\par
In this case, {\f2 TearDown()}  is not needed since we don't have to clean up after each test, other than what's already done by the destructor.\par
Now we'll write tests using {\f2 {\b TEST_F()}}  and this fixture. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(QueueTest, IsEmptyInitially) \{\par
  EXPECT_EQ(0, q0_.size());\par
\}\par
\par
TEST_F(QueueTest, DequeueWorks) \{\par
  int* n = q0_.Dequeue();\par
  EXPECT_EQ(NULL, n);\par
\par
  n = q1_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(1, *n);\par
  EXPECT_EQ(0, q1_.size());\par
  delete n;\par
\par
  n = q2_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(2, *n);\par
  EXPECT_EQ(1, q2_.size());\par
  delete n;\par
\}\par
}
\par
The above uses both {\f2 ASSERT_*}  and {\f2 EXPECT_*}  assertions. The rule of thumb is to use {\f2 EXPECT_*}  when you want the test to continue to reveal more errors after the assertion failure, and use {\f2 ASSERT_*}  when continuing after failure doesn't make sense. For example, the second assertion in the {\f2 Dequeue}  test is {\f2 ASSERT_TRUE(n != NULL)} , as we need to dereference the pointer {\f2 n}  later, which would lead to a segfault when {\f2 n}  is {\f2 NULL} .\par
When these tests run, the following happens:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google Test constructs a {\f2 {\b QueueTest}}  object (let's call it {\f2 t1}  ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.SetUp()}  initializes {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The first test ( {\f2 IsEmptyInitially}  ) runs on {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.TearDown()}  cleans up after the test finishes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1}  is destructed.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The above steps are repeated on another {\f2 {\b QueueTest}}  object, this time running the {\f2 DequeueWorks}  test.\par}
{\i Availability} : Linux, Windows, Mac.\par
{\i Note} : Google Test automatically saves all {\i Google Test}  flags when a test object is constructed, and restores them when it is destructed.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Invoking the Tests} \par}
{\f2 TEST()}  and {\f2 {\b TEST_F()}}  implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.\par
After defining your tests, you can run them with {\f2 RUN_ALL_TESTS()}  , which returns {\f2 0}  if all the tests are successful, or {\f2 1}  otherwise. Note that {\f2 RUN_ALL_TESTS()}  runs {\i all tests}  in your link unit \'96 they can be from different test cases, or even different source files.\par
When invoked, the {\f2 RUN_ALL_TESTS()}  macro:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Saves the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Creates a test fixture object for the first test.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Initializes it via {\f2 SetUp()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Runs the test on the fixture object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Cleans up the fixture via {\f2 TearDown()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Deletes the fixture.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Restores the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeats the above steps for the next test, until all tests have run.\par}
In addition, if the text fixture's constructor generates a fatal failure in step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly, if step 3 generates a fatal failure, step 4 will be skipped.\par
{\i Important} : You must not ignore the return value of {\f2 RUN_ALL_TESTS()} , or {\f2 gcc}  will give you a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your {\f2 main()}  function must return the value of {\f2 RUN_ALL_TESTS()} .\par
Also, you should call {\f2 RUN_ALL_TESTS()}  only {\b once} . Calling it more than once conflicts with some advanced Google Test features (e.g. thread-safe death tests) and thus is not supported.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the main() Function} \par}
You can start from this boilerplate: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "this/package/foo.h"\par
#include "gtest/gtest.h"\par
\par
namespace \{\par
\par
// The fixture for testing class Foo.\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  // You can remove any or all of the following functions if its body\par
  // is empty.\par
\par
  FooTest() \{\par
    // You can do set-up work for each test here.\par
  \}\par
\par
  virtual ~FooTest() \{\par
    // You can do clean-up work that doesn't throw exceptions here.\par
  \}\par
\par
  // If the constructor and destructor are not enough for setting up\par
  // and cleaning up each test, you can define the following methods:\par
\par
  virtual void SetUp() \{\par
    // Code here will be called immediately after the constructor (right\par
    // before each test).\par
  \}\par
\par
  virtual void TearDown() \{\par
    // Code here will be called immediately after each test (right\par
    // before the destructor).\par
  \}\par
\par
  // Objects declared here can be used by all tests in the test case for Foo.\par
\};\par
\par
// Tests that the Foo::Bar() method does Abc.\par
TEST_F(FooTest, MethodBarDoesAbc) \{\par
  const string input_filepath = "this/package/testdata/myinputfile.dat";\par
  const string output_filepath = "this/package/testdata/myoutputfile.dat";\par
  Foo f;\par
  EXPECT_EQ(0, f.Bar(input_filepath, output_filepath));\par
\}\par
\par
// Tests that Foo does Xyz.\par
TEST_F(FooTest, DoesXyz) \{\par
  // Exercises the Xyz feature of Foo.\par
\}\par
\par
\}  // namespace\par
\par
int main(int argc, char **argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
The {\f2 ::testing::InitGoogleTest()}  function parses the command line for Google Test flags, and removes all recognized flags. This allows the user to control a test program's behavior via various flags, which we'll cover in AdvancedGuide. You must call this function before calling {\f2 RUN_ALL_TESTS()} , or the flags won't be properly initialized.\par
On Windows, {\f2 InitGoogleTest()}  also works with wide strings, so it can be used in programs compiled in {\f2 UNICODE}  mode as well.\par
But maybe you think that writing all those main() functions is too much work? We agree with you completely and that's why Google Test provides a basic implementation of main(). If it fits your needs, then just link your test with gtest_main library and you are good to go.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Important note for Visual C++ users} \par}
If you put your tests into a library and your {\f2 main()}  function is in a different library or in your .exe file, those tests will not run. The reason is a {\f2 bug} in Visual C++. When you define your tests, Google Test creates certain static objects to register them. These objects are not referenced from elsewhere but their constructors are still supposed to run. When Visual C++ linker sees that nothing in the library is referenced from other places it throws the library out. You have to reference your library with tests from your main program to keep the linker from discarding it. Here is how to do it. Somewhere in your library code declare a function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid __declspec(dllexport) int PullInMyLibrary() \{ return 0; \}\par
}
 If you put your tests in a static library (not DLL) then {\f2 __declspec(dllexport)}  is not required. Now, in your main program, write a code that invokes that function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int PullInMyLibrary();\par
static int dummy = PullInMyLibrary();\par
}
 This will keep your tests referenced and will make them register themselves at startup.\par
In addition, if you define your tests in a static library, add {\f2 /OPT:NOREF}  to your main program linker options. If you use MSVC++ IDE, go to your .exe project properties/Configuration Properties/Linker/Optimization and set References setting to {\f2 Keep Unreferenced Data (/OPT:NOREF)} . This will keep Visual C++ linker from discarding individual symbols generated by your tests from the final executable.\par
There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you {\i must}  change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
Congratulations! You've learned the Google Test basics. You can start writing and running Google Test tests, read some samples, or continue with AdvancedGuide, which describes many more useful Google Test features.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Known Limitations} \par}
Google Test is designed to be thread-safe. The implementation is thread-safe on systems where the {\f2 pthreads}  library is available. It is currently {\i unsafe}  to use Google Test assertions from two threads concurrently on other systems (e.g. Windows). In most tests this is not an issue as usually the assertions are done in the main thread. If you want to help, you can volunteer to implement the necessary synchronization primitives in {\f2 gtest-port.h}  for your platform. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_6_PumpManual{\tc \v V1_6_PumpManual}\par \pard\plain 
{\bkmkstart AAAAAAAEOD}
{\bkmkend AAAAAAAEOD}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b P} ump is {\b U} seful for {\b M} eta {\b P} rogramming.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 The Problem} \par}
Template and macro libraries often need to define many classes, functions, or macros that vary only (or almost only) in the number of arguments they take. It's a lot of repetitive, mechanical, and error-prone work.\par
Variadic templates and variadic macros can alleviate the problem. However, while both are being considered by the C++ committee, neither is in the standard yet or widely supported by compilers. Thus they are often not a good choice, especially when your code needs to be portable. And their capabilities are still limited.\par
As a result, authors of such libraries often have to write scripts to generate their implementation. However, our experience is that it's tedious to write such scripts, which tend to reflect the structure of the generated code poorly and are often hard to read and edit. For example, a small change needed in the generated code may require some non-intuitive, non-trivial changes in the script. This is especially painful when experimenting with the code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Our Solution} \par}
Pump (for Pump is Useful for Meta Programming, Pretty Useful for Meta Programming, or Practical Utility for Meta Programming, whichever you prefer) is a simple meta-programming tool for C++. The idea is that a programmer writes a {\f2 foo.pump}  file which contains C++ code plus meta code that manipulates the C++ code. The meta code can handle iterations over a range, nested iterations, local meta variable definitions, simple arithmetic, and conditional expressions. You can view it as a small Domain-Specific Language. The meta language is designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode, for example) and concise, making Pump code intuitive and easy to maintain.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Highlights} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The implementation is in a single Python script and thus ultra portable: no build or installation is needed and it works cross platforms.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pump tries to be smart with respect to {\f2 Google's style guide}: it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format is human-readable and more concise than XML.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format works relatively well with Emacs' C++ mode.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Examples} \par}
The following Pump code (where meta keywords start with {\f2 $} , {\f2 [[}  and {\f2 ]]}  are meta brackets, and {\f2 $$}  starts a meta comment that ends with the line):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $var n = 3     $$ Defines a meta variable n.\par
$range i 0..n  $$ Declares the range of meta iterator i (inclusive).\par
$for i [[\par
               $$ Meta loop.\par
// Foo$i does blah for $i-ary predicates.\par
$range j 1..i\par
template <size_t N $for j [[, typename A$j]]>\par
class Foo$i \{\par
$if i == 0 [[\par
  blah a;\par
]] $elif i <= 2 [[\par
  blah b;\par
]] $else [[\par
  blah c;\par
]]\par
\};\par
\par
]]\par
}
\par
will be translated by the Pump compiler to:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Foo0 does blah for 0-ary predicates.\par
template <size_t N>\par
class Foo0 \{\par
  blah a;\par
\};\par
\par
// Foo1 does blah for 1-ary predicates.\par
template <size_t N, typename A1>\par
class Foo1 \{\par
  blah b;\par
\};\par
\par
// Foo2 does blah for 2-ary predicates.\par
template <size_t N, typename A1, typename A2>\par
class Foo2 \{\par
  blah b;\par
\};\par
\par
// Foo3 does blah for 3-ary predicates.\par
template <size_t N, typename A1, typename A2, typename A3>\par
class Foo3 \{\par
  blah c;\par
\};\par
}
\par
In another example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $range i 1..n\par
Func($for i + [[a$i]]);\par
$$ The text between i and [[ is the separator between iterations.\par
}
\par
will generate one of the following lines (without the comments), depending on the value of {\f2 n} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Func();              // If n is 0.\par
Func(a1);            // If n is 1.\par
Func(a1 + a2);       // If n is 2.\par
Func(a1 + a2 + a3);  // If n is 3.\par
// And so on...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Constructs} \par}
We support the following meta programming constructs:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $var id = exp}  \cell }{Defines a named constant value. {\f2 $id}  is valid util the end of the current meta lexical block.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $range id exp..exp}  \cell }{Sets the range of an iteration variable, which can be reused in multiple loops later. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $for id sep [[ code ]]}  \cell }{Iteration. The range of {\f2 id}  must have been defined earlier. {\f2 $id}  is valid in {\f2 code} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $($)}  \cell }{Generates a single {\f2 $}  character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $id}  \cell }{Value of the named constant or iteration variable. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 }  \cell }{Value of the expression. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $if exp [[ code ]] else_branch}  \cell }{Conditional. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 [[ code ]]}  \cell }{Meta lexical block. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 cpp_code}  \cell }{Raw C++ code. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $$ comment}  \cell }{Meta comment. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Note:}  To give the user some freedom in formatting the Pump source code, Pump ignores a new-line character if it's right after {\f2 $for foo}  or next to {\f2 [[}  or {\f2 ]]} . Without this rule you'll often be forced to write very long lines to get the desired output. Therefore sometimes you may need to insert an extra new-line in such places for a new-line to show up in your output.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Grammar} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid code ::= atomic_code*\par
atomic_code ::= $var id = exp\par
    | $var id = [[ code ]]\par
    | $range id exp..exp\par
    | $for id sep [[ code ]]\par
    | $($)\par
    | $id\par
    | $(exp)\par
    | $if exp [[ code ]] else_branch\par
    | [[ code ]]\par
    | cpp_code\par
sep ::= cpp_code | empty_string\par
else_branch ::= $else [[ code ]]\par
    | $elif exp [[ code ]] else_branch\par
    | empty_string\par
exp ::= simple_expression_in_Python_syntax\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Code} \par}
You can find the source code of Pump in {\f2 scripts/pump.py}. It is still very unpolished and lacks automated tests, although it has been successfully used many times. If you find a chance to use it in your project, please let us know what you think! We also welcome help on improving Pump.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Real Examples} \par}
You can find real-world applications of Pump in {\f2 Google Test} and {\f2 Google Mock}. The source file {\f2 foo.h.pump}  generates {\f2 foo.h} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tips} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If a meta variable is followed by a letter or digit, you can separate them using {\f2 [[]]} , which inserts an empty string. For example {\f2 Foo$j[[]]Helper}  generate {\f2 Foo1Helper}  when {\f2 j}  is 1.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting {\f2 [[]]}  followed by a new line. Since any new-line character next to {\f2 [[}  or {\f2 ]]}  is ignored, the generated code won't contain this new line. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_6_Samples{\tc \v V1_6_Samples}\par \pard\plain 
{\bkmkstart AAAAAAAEOE}
{\bkmkend AAAAAAAEOE}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you're like us, you'd like to look at some Google Test sample code. The {\f2 samples folder} has a number of well-commented samples showing how to use a variety of Google Test features.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #1} shows the basic steps of using Google Test to test C++ functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #2} shows a more complex unit test for a class with multiple member functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #3} uses a test fixture.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #4} is another basic example of using Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #5} teaches how to reuse a test fixture in multiple test cases by deriving sub-fixtures from it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #6} demonstrates type-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #7} teaches the basics of value-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #8} shows using {\f2 Combine()}  in value-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #9} shows use of the listener API to modify Google Test's console output and the use of its reflection API to inspect test results.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #10} shows use of the listener API to implement a primitive memory leak checker. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_6_XcodeGuide{\tc \v V1_6_XcodeGuide}\par \pard\plain 
{\bkmkstart AAAAAAAEOF}
{\bkmkend AAAAAAAEOF}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This guide will explain how to use the Google Testing Framework in your Xcode projects on Mac OS X. This tutorial begins by quickly explaining what to do for experienced users. After the quick start, the guide goes provides additional explanation about each step.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Quick Start} \par}
Here is the quick guide for using Google Test in your Xcode project.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Download the source from the {\f2 website} using this command: {\f2 svn checkout {\f2 http://googletest.googlecode.com/svn/trunk/} googletest-read-only} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Open up the {\f2 gtest.xcodeproj}  in the {\f2 googletest-read-only/xcode/}  directory and build the gtest.framework.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a new "Shell Tool" target in your Xcode project called something like "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add the gtest.framework to your project and add it to the "Link Binary with Libraries" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add your unit test source code to the "Compile Sources" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Edit the "UnitTests" executable and add an environment variable named "DYLD\\_FRAMEWORK\\_PATH" with a value equal to the path to the framework containing the gtest.framework relative to the compiled executable.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Build and Go\par}
The following sections further explain each of the steps listed above in depth, describing in more detail how to complete it including some variations.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Get the Source} \par}
Currently, the gtest.framework discussed here isn't available in a tagged release of Google Test, it is only available in the trunk. As explained at the Google Test [site]({\f2 http://code.google.com/p/googletest/source/checkout}">svn), you can get the code from anonymous SVN with this command:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only\par
}
\par
Alternatively, if you are working with Subversion in your own code base, you can add Google Test as an external dependency to your own Subversion repository. By following this approach, everyone that checks out your svn repository will also receive a copy of Google Test (a specific version, if you wish) without having to check it out explicitly. This makes the set up of your project simpler and reduces the copied code in the repository.\par
To use {\f2 svn:externals} , decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like {\f2 third-party/googletest/1.0.1} , is another option. Once the location is established, use {\f2 svn propedit svn:externals _directory_}  to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.\par
The command {\f2 svn propedit}  will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. {\f2 {\f2 http://googletest.googlecode.com/svn/tags/release-1.0.1}} ). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the {\f2 -r_##_}  option (e.g. {\f2 externals/src/googletest -r60 {\f2 http://googletest.googlecode.com/svn/trunk}} ).\par
Here is an example of using the svn:externals properties on a trunk (read via {\f2 svn propget} ) of a project. This value checks out a copy of Google Test into the {\f2 trunk/externals/src/googletest/}  directory.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Computer:svn] user$ svn propget svn:externals trunk\par
externals/src/googletest http://googletest.googlecode.com/svn/trunk\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Add the Framework to Your Project} \par}
The next step is to build and add the gtest.framework to your own project. This guide describes two common ways below.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Make a Test Target} \par}
To start writing tests, make a new "Shell Tool" target. This target template is available under BSD, Cocoa, or Carbon. Add your unit test source code to the "Compile Sources" build phase of the target.\par
Next, you'll want to add gtest.framework in two different ways, depending upon which option you chose above.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Set Up the Executable Run Environment} \par}
Since the unit test executable is a shell tool, it doesn't have a bundle with a {\f2 Contents/Frameworks}  directory, in which to place gtest.framework. Instead, the dynamic linker must be told at runtime to search for the framework in another location. This can be accomplished by setting the "DYLD\\_FRAMEWORK\\_PATH" environment variable in the "Edit Active Executable ..." Arguments tab, under "Variables to be set in the environment:". The path for this value is the path (relative or absolute) of the directory containing the gtest.framework.\par
If you haven't set up the DYLD_FRAMEWORK_PATH, correctly, you might get a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-15 06:23:57 -0600.]\par
  dyld: Library not loaded: @loader_path/../Frameworks/gtest.framework/Versions/A/gtest\par
    Referenced from: /Users/username/Documents/Sandbox/gtestSample/build/Debug/WidgetFrameworkTest\par
    Reason: image not found\par
}
\par
To correct this problem, got to the directory containing the executable named in "Referenced from:" value in the error message above. Then, with the terminal in this location, find the relative path to the directory containing the gtest.framework. That is the value you'll need to set as the DYLD_FRAMEWORK_PATH.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Build and Go} \par}
Now, when you click "Build and Go", the test will be executed. Dumping out something like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-06 06:36:13 -0600.]\par
[==========] Running 2 tests from 1 test case.\par
[----------] Global test environment set-up.\par
[----------] 2 tests from WidgetInitializerTest\par
[ RUN      ] WidgetInitializerTest.TestConstructor\par
[       OK ] WidgetInitializerTest.TestConstructor\par
[ RUN      ] WidgetInitializerTest.TestConversion\par
[       OK ] WidgetInitializerTest.TestConversion\par
[----------] Global test environment tear-down\par
[==========] 2 tests from 1 test case ran.\par
[  PASSED  ] 2 tests.\par
\par
The Debugger has exited with status 0.  \par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Summary} \par}
Unit testing is a valuable way to ensure your data model stays valid even during rapid development or refactoring. The Google Testing Framework is a great unit testing framework for C and C++ which integrates well with an Xcode development environment. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_7_AdvancedGuide{\tc \v V1_7_AdvancedGuide}\par \pard\plain 
{\bkmkstart AAAAAAAEOG}
{\bkmkend AAAAAAAEOG}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Now that you have read Primer and learned how to write tests using Google Test, it's time to learn some new tricks. This document will show you more assertions as well as how to construct complex failure messages, propagate fatal failures, reuse and speed up your test fixtures, and use various flags with your tests.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 More Assertions} \par}
This section covers some less frequently used, but still significant, assertions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Explicit Success and Failure} \par}
These three assertions do not actually test a value or expression. Instead, they generate a success or failure directly. Like the macros that actually perform a test, you may stream a custom failure message into the them.\par
| {\f2 SUCCEED();}  | |:----------\'97|\par
Generates a success. This does NOT make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.\par
Note: {\f2 SUCCEED()}  is purely documentary and currently doesn't generate any user-visible output. However, we may add {\f2 SUCCEED()}  messages to Google Test's output in the future.\par
| {\f2 FAIL();}  | {\f2 ADD_FAILURE();}  | {\f2 ADD_FAILURE_AT("</tt>_file_path_<tt>",} _line_number_{\f2 );}  | |:--------\'97|:--------------\'97|:---------------------------------------------------\'97|\par
{\f2 FAIL()}  generates a fatal failure, while {\f2 ADD_FAILURE()}  and {\f2 ADD_FAILURE_AT()}  generate a nonfatal failure. These are useful when control flow, rather than a Boolean expression, deteremines the test's success or failure. For example, you might want to write something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid switch(expression) \{\par
  case 1: ... some checks ...\par
  case 2: ... some other checks\par
  ...\par
  default: FAIL() << "We shouldn't get here.";\par
\}\par
}
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Exception Assertions} \par}
These are for verifying that a piece of code throws (or does not throw) an exception of the given type:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\f2 EXPECT_THROW(} _statement_, {\i exception_type} {\f2 );}  \cell }{{\i statement}  throws an exception of the given type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_ANY_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  throws an exception of any type \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_THROW(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_THROW(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't throw any exception \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_THROW(Foo(5), bar_exception);\par
\par
EXPECT_NO_THROW(\{\par
  int n = 5;\par
  Bar(&n);\par
\});\par
}
\par
{\i Availability} : Linux, Windows, Mac; since version 1.1.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Predicate Assertions for Better Error Messages} \par}
Even though Google Test has a rich set of assertions, they can never be complete, as it's impossible (nor a good idea) to anticipate all the scenarios a user might run into. Therefore, sometimes a user has to use {\f2 EXPECT_TRUE()}  to check a complex expression, for lack of a better macro. This has the problem of not showing you the values of the parts of the expression, making it hard to understand what went wrong. As a workaround, some users choose to construct the failure message by themselves, streaming it into {\f2 EXPECT_TRUE()} . However, this is awkward especially when the expression has side-effects or is expensive to evaluate.\par
Google Test gives you three different options to solve this problem:\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using an Existing Boolean Function} \par}
If you already have a function or a functor that returns {\f2 bool}  (or a type that can be implicitly converted to {\f2 bool} ), you can use it in a {\i predicate assertion}  to get the function arguments printed for free:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED1(} _pred1, val1_{\f2 );}  \cell }{{\i pred1(val1)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\f2 EXPECT_PRED2(} _pred2, val1, val2_{\f2 );}  \cell }{{\i pred2(val1, val2)}  returns true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{... \cell }{... \cell }{... \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the above, {\i predn}  is an {\i n} -ary predicate function or functor, where {\i val1} , {\i val2} , ..., and {\i valn}  are its arguments. The assertion succeeds if the predicate returns {\f2 true}  when applied to the given arguments, and fails otherwise. When the assertion fails, it prints the value of each argument. In either case, the arguments are evaluated exactly once.\par
Here's an example. Given\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns true iff m and n have no common divisors except 1.\par
bool MutuallyPrime(int m, int n) \{ ... \}\par
const int a = 3;\par
const int b = 4;\par
const int c = 10;\par
}
\par
the assertion {\f2 EXPECT_PRED2(MutuallyPrime, a, b);}  will succeed, while the assertion {\f2 EXPECT_PRED2(MutuallyPrime, b, c);}  will fail with the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
!MutuallyPrime(b, c) is false, where\par

b is 4\par

c is 10\par

\par}
{\b Notes:} \par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If you see a compiler error "no matching function to call" when using {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*} , please see {\f2 this} for how to resolve it.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.\par}
{\i Availability} : Linux, Windows, Mac\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Function That Returns an AssertionResult} \par}
While {\f2 EXPECT_PRED*()}  and friends are handy for a quick job, the syntax is not satisfactory: you have to use different macros for different arities, and it feels more like Lisp than C++. The {\f2 {\b testing::AssertionResult}}  class solves this problem.\par
An {\f2 AssertionResult}  object represents the result of an assertion (whether it's a success or a failure, and an associated message). You can create an {\f2 AssertionResult}  using one of these factory functions:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// succeeded.\par
AssertionResult AssertionSuccess();\par
\par
// Returns an AssertionResult object to indicate that an assertion has\par
// failed.\par
AssertionResult AssertionFailure();\par
\par
\}\par
}
\par
You can then use the {\f2 <<}  operator to stream messages to the {\f2 AssertionResult}  object.\par
To provide more readable messages in Boolean assertions (e.g. {\f2 EXPECT_TRUE()} ), write a predicate function that returns {\f2 AssertionResult}  instead of {\f2 bool} . For example, if you define {\f2 IsEven()}  as:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess();\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
instead of:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsEven(int n) \{\par
  return (n % 2) == 0;\par
\}\par
}
\par
the failed assertion {\f2 EXPECT_TRUE(IsEven(Fib(4)))}  will print:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: IsEven(Fib(4))\par

Actual: false (*3 is odd*)\par

Expected: true\par

\par}
instead of a more opaque\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: IsEven(Fib(4))\par

Actual: false\par

Expected: true\par

\par}
If you want informative messages in {\f2 EXPECT_FALSE}  and {\f2 ASSERT_FALSE}  as well, and are fine with making the predicate slower in the success case, you can supply a success message:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::AssertionResult IsEven(int n) \{\par
  if ((n % 2) == 0)\par
    return ::testing::AssertionSuccess() << n << " is even";\par
  else\par
    return ::testing::AssertionFailure() << n << " is odd";\par
\}\par
}
\par
Then the statement {\f2 EXPECT_FALSE(IsEven(Fib(6)))}  will print\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
Value of: IsEven(Fib(6))\par

Actual: true (8 is even)\par

Expected: false\par

\par}
{\i Availability} : Linux, Windows, Mac; since version 1.4.1.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using a Predicate-Formatter} \par}
If you find the default message generated by {\f2 (ASSERT|EXPECT)_PRED*}  and {\f2 (ASSERT|EXPECT)_(TRUE|FALSE)}  unsatisfactory, or some arguments to your predicate do not support streaming to {\f2 ostream} , you can instead use the following {\i predicate-formatter assertions}  to {\i fully}  customize how the message is formatted:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_PRED_FORMAT1(} _pred_format1, val1_{\f2 );}  \cell }{{\f2 EXPECT_PRED_FORMAT1(} _pred_format1, val1_{\f2 ); <td align="left"> _pred\\_format1(val1)_ is successful <tr><td align="left">} ASSERT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 <td align="left">} EXPECT_PRED_FORMAT2({\f2 _pred\\_format2, val1, val2_} );{\f2 <td align="left"> _pred\\_format2(val1, val2)_ is successful <tr><td align="left">} ...{\f2 <td align="left">} ...{\f2 <td align="left">} ...` \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The difference between this and the previous two groups of macros is that instead of a predicate, {\f2 (ASSERT|EXPECT)_PRED_FORMAT*}  take a {\i predicate-formatter}  ({\i pred_formatn} ), which is a function or functor with the signature:\par
{\f2 {\b testing::AssertionResult} PredicateFormattern(const char*} _expr1_{\f2 , const char*} _expr2_{\f2 , ... const char*} _exprn_{\f2 , T1} _val1_{\f2 , T2} _val2_{\f2 , ... Tn} _valn_{\f2 );} \par
where {\i val1} , {\i val2} , ..., and {\i valn}  are the values of the predicate arguments, and {\i expr1} , {\i expr2} , ..., and {\i exprn}  are the corresponding expressions as they appear in the source code. The types {\f2 T1} , {\f2 T2} , ..., and {\f2 Tn}  can be either value types or reference types. For example, if an argument has type {\f2 Foo} , you can declare it as either {\f2 Foo}  or {\f2 const Foo&} , whichever is appropriate.\par
A predicate-formatter returns a {\f2 {\b testing::AssertionResult}}  object to indicate whether the assertion has succeeded or not. The only way to create such an object is to call one of these factory functions:\par
As an example, let's improve the failure message in the previous example, which uses {\f2 EXPECT_PRED2()} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Returns the smallest prime common divisor of m and n,\par
// or 1 when m and n are mutually prime.\par
int SmallestPrimeCommonDivisor(int m, int n) \{ ... \}\par
\par
// A predicate-formatter for asserting that two integers are mutually prime.\par
::testing::AssertionResult AssertMutuallyPrime(const char* m_expr,\par
                                               const char* n_expr,\par
                                               int m,\par
                                               int n) \{\par
  if (MutuallyPrime(m, n))\par
    return ::testing::AssertionSuccess();\par
\par
  return ::testing::AssertionFailure()\par
      << m_expr << " and " << n_expr << " (" << m << " and " << n\par
      << ") are not mutually prime, " << "as they have a common divisor "\par
      << SmallestPrimeCommonDivisor(m, n);\par
\}\par
}
\par
With this predicate-formatter, we can use\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);\par
}
\par
to generate the message\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 
b and c (4 and 10) are not mutually prime, as they have a common divisor 2.\par

\par}
As you may have realized, many of the assertions we introduced earlier are special cases of {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} . In fact, most of them are indeed defined using {\f2 (EXPECT|ASSERT)_PRED_FORMAT*} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Comparison} \par}
Comparing floating-point numbers is tricky. Due to round-off errors, it is very unlikely that two floating-points will match exactly. Therefore, {\f2 ASSERT_EQ}  's naive comparison usually doesn't work. And since floating-points can have a wide value range, no single fixed error bound works. It's better to compare by a fixed relative error bound, except for values close to 0 due to the loss of precision there.\par
In general, for floating-point comparison to make sense, the user needs to carefully choose the error bound. If they don't want or care to, comparing in terms of Units in the Last Place (ULPs) is a good default, and Google Test provides assertions to do this. Full details about ULPs are quite long; if you want to learn more, see {\f2 this article on float comparison}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Macros} \par}
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FLOAT_EQ(} _expected, actual_{\f2 );}  \cell }{{\f2 EXPECT_FLOAT_EQ(} _expected, actual_{\f2 );}  \cell }{the two {\f2 float}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DOUBLE_EQ(} _expected, actual_{\f2 );}  \cell }{{\f2 EXPECT_DOUBLE_EQ(} _expected, actual_{\f2 );}  \cell }{the two {\f2 double}  values are almost equal \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
By "almost equal", we mean the two values are within 4 ULP's from each other.\par
The following assertions allow you to choose the acceptable error bound:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NEAR(} _val1, val2, abs_error_{\f2 );}  \cell }{{\f2 EXPECT_NEAR} _(val1, val2, abs_error_<tt>); \cell }{the difference between {\i val1}  and {\i val2}  doesn't exceed the given absolute error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Floating-Point Predicate-Format Functions} \par}
Some floating-point operations are useful, but not that often used. In order to avoid an explosion of new macros, we provide them as predicate-format functions that can be used in predicate assertion macros (e.g. {\f2 EXPECT_PRED_FORMAT2} , etc).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED_FORMAT2(::testing::FloatLE, val1, val2);\par
EXPECT_PRED_FORMAT2(::testing::DoubleLE, val1, val2);\par
}
\par
Verifies that {\i val1}  is less than, or almost equal to, {\i val2} . You can replace {\f2 EXPECT_PRED_FORMAT2}  in the above table with {\f2 ASSERT_PRED_FORMAT2} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Windows HRESULT assertions} \par}
These assertions test for {\f2 HRESULT}  success or failure.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_SUCCEEDED(} _expression_{\f2 );}  \cell }{{\i expression}  is a success {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\f2 EXPECT_HRESULT_FAILED(} _expression_{\f2 );}  \cell }{{\i expression}  is a failure {\f2 HRESULT}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
The generated output contains the human-readable error message associated with the {\f2 HRESULT}  code returned by {\i expression} .\par
You might use them like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid CComPtr shell;\par
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L"Shell.Application"));\par
CComVariant empty;\par
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));\par
}
\par
{\i Availability} : Windows.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Type Assertions} \par}
You can call the function {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::StaticAssertTypeEq<T1, T2>();\par
}
 to assert that types {\f2 T1}  and {\f2 T2}  are the same. The function does nothing if the assertion is satisfied. If the types are different, the function call will fail to compile, and the compiler error message will likely (depending on the compiler) show you the actual values of {\f2 T1}  and {\f2 T2} . This is mainly useful inside template code.\par
{\i Caveat:}  When used inside a member function of a class template or a function template, {\f2 StaticAssertTypeEq<T1, T2>()}  is effective {\i only if}  the function is instantiated. For example, given: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T> class Foo \{\par
 public:\par
  void Bar() \{ ::testing::StaticAssertTypeEq<int, T>(); \}\par
\};\par
}
 the code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test1() \{ Foo<bool> foo; \}\par
}
 will {\i not}  generate a compiler error, as {\f2 Foo<bool>::Bar()}  is never actually instantiated. Instead, you need: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Test2() \{ Foo<bool> foo; foo.Bar(); \}\par
}
 to cause a compiler error.\par
{\i Availability:}  Linux, Windows, Mac; since version 1.3.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Assertion Placement} \par}
You can use assertions in any C++ function. In particular, it doesn't have to be a method of the test fixture class. The one constraint is that assertions that generate a fatal failure ({\f2 FAIL*}  and {\f2 ASSERT_*} ) can only be used in void-returning functions. This is a consequence of Google Test not using exceptions. By placing it in a non-void function you'll get a confusing compile error like {\f2 "error: void value not ignored as it ought to be"} .\par
If you need to use assertions in a function that returns non-void, one option is to make the function return the value in an out parameter instead. For example, you can rewrite {\f2 T2 Foo(T1 x)}  to {\f2 void Foo(T1 x, T2* result)} . You need to make sure that {\f2 *result}  contains some sensible value even when the function returns prematurely. As the function now returns {\f2 void} , you can use any assertion inside of it.\par
If changing the function's type is not an option, you should just use assertions that generate non-fatal failures, such as {\f2 ADD_FAILURE*}  and {\f2 EXPECT_*} .\par
{\i Note} : Constructors and destructors are not considered void-returning functions, according to the C++ language specification, and so you may not use fatal assertions in them. You'll get a compilation error if you try. A simple workaround is to transfer the entire body of the constructor or destructor to a private void-returning method. However, you should be aware that a fatal assertion failure in a constructor does not terminate the current test, as your intuition might suggest; it merely returns from the constructor early, possibly leaving your object in a partially-constructed state. Likewise, a fatal assertion failure in a destructor may leave your object in a partially-destructed state. Use assertions carefully in these situations!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Teaching Google Test How to Print Your Values} \par}
When a test assertion such as {\f2 EXPECT_EQ}  fails, Google Test prints the argument values to help you debug. It does this using a user-extensible value printer.\par
This printer knows how to print built-in C++ types, native arrays, STL containers, and any type that supports the {\f2 <<}  operator. For other types, it prints the raw bytes in the value and hopes that you the user can figure it out.\par
As mentioned earlier, the printer is {\i extensible} . That means you can teach it to do a better job at printing your particular type than to dump the bytes. To do that, define {\f2 <<}  for your type:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Bar \{ ... \};  // We want Google Test to be able to print instances of this.\par
\par
// It's important that the << operator is defined in the SAME\par
// namespace that defines Bar.  C++'s look-up rules rely on that.\par
::std::ostream& operator<<(::std::ostream& os, const Bar& bar) \{\par
  return os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
Sometimes, this might not be an option: your team may consider it bad style to have a {\f2 <<}  operator for {\f2 Bar} , or {\f2 Bar}  may already have a {\f2 <<}  operator that doesn't do what you want (and you cannot change it). If so, you can instead define a {\f2 PrintTo()}  function like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include <iostream>\par
\par
namespace foo \{\par
\par
class Bar \{ ... \};\par
\par
// It's important that PrintTo() is defined in the SAME\par
// namespace that defines Bar.  C++'s look-up rules rely on that.\par
void PrintTo(const Bar& bar, ::std::ostream* os) \{\par
  *os << bar.DebugString();  // whatever needed to print bar to os\par
\}\par
\par
\}  // namespace foo\par
}
\par
If you have defined both {\f2 <<}  and {\f2 PrintTo()} , the latter will be used when Google Test is concerned. This allows you to customize how the value appears in Google Test's output without affecting code that relies on the behavior of its {\f2 <<}  operator.\par
If you want to print a value {\f2 x}  using Google Test's value printer yourself, just call {\f2 ::testing::PrintToString(} _x_{\f2 )} , which returns an {\f2 std::string} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid vector<pair<Bar, int> > bar_ints = GetBarIntVector();\par
\par
EXPECT_TRUE(IsCorrectBarIntVector(bar_ints))\par
    << "bar_ints = " << ::testing::PrintToString(bar_ints);\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Death Tests} \par}
In many applications, there are assertions that can cause application failure if a condition is not met. These sanity checks, which ensure that the program is in a known good state, are there to fail at the earliest possible time after some program state is corrupted. If the assertion checks the wrong condition, then the program may proceed in an erroneous state, which could lead to memory corruption, security holes, or worse. Hence it is vitally important to test that such assertion statements work as expected.\par
Since these precondition checks cause the processes to die, we call such tests {\i death tests} . More generally, any test that checks that a program terminates (except by throwing an exception) in an expected fashion is also a death test.\par
Note that if a piece of code throws an exception, we don't consider it "death" for the purpose of death tests, as the caller of the code could catch the exception and avoid the crash. If you want to verify exceptions thrown by your code, see {\f2 Exception Assertions}.\par
If you want to test {\f2 EXPECT_*()/ASSERT_*()}  failures in your test code, see {\f2 Catching Failures}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write a Death Test} \par}
Google Test has the following macros to support death tests:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH(} _statement, regex_{\f2 ); <td align="left">} EXPECT_DEATH({\f2 _statement, regex_} ); \cell }{{\i statement}  crashes with the given error \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_DEATH_IF_SUPPORTED(} _statement, regex_{\f2 ); <td align="left">} EXPECT_DEATH_IF_SUPPORTED({\f2 _statement, regex_} ); \cell }{if death tests are supported, verifies that {\i statement}  crashes with the given error; otherwise verifies nothing \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EXIT(} _statement, predicate, regex_{\f2 ); <td align="left">} EXPECT_EXIT({\f2 _statement, predicate, regex_} ); \cell }{_statement_ exits with the given error and its exit code matches {\i predicate}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
where {\i statement}  is a statement that is expected to cause the process to die, {\i predicate}  is a function or function object that evaluates an integer exit status, and {\i regex}  is a regular expression that the stderr output of {\i statement}  is expected to match. Note that {\i statement}  can be {\i any valid statement}  (including {\i compound statement} ) and doesn't have to be an expression.\par
As usual, the {\f2 ASSERT}  variants abort the current test function, while the {\f2 EXPECT}  variants do not.\par
{\b Note:}  We use the word "crash" here to mean that the process terminates with a {\i non-zero}  exit status code. There are two possibilities: either the process has called {\f2 exit()}  or {\f2 _exit()}  with a non-zero value, or it may be killed by a signal.\par
This means that if {\i statement}  terminates the process with a 0 exit code, it is {\i not}  considered a crash by {\f2 EXPECT_DEATH} . Use {\f2 EXPECT_EXIT}  instead if this is the case, or if you want to restrict the exit code more precisely.\par
A predicate here must accept an {\f2 int}  and return a {\f2 bool} . The death test succeeds only if the predicate returns {\f2 true} . Google Test defines a few predicates that handle the most common cases:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::ExitedWithCode(exit_code)\par
}
\par
This expression is {\f2 true}  if the program exited normally with the given exit code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::KilledBySignal(signal_number)  // Not available on Windows.\par
}
\par
This expression is {\f2 true}  if the program was killed by the given signal.\par
The {\f2 *_DEATH}  macros are convenient wrappers for {\f2 *_EXIT}  that use a predicate that verifies the process' exit code is non-zero.\par
Note that a death test only cares about three things:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does {\i statement}  abort or exit the process?\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab (in the case of {\f2 ASSERT_EXIT}  and {\f2 EXPECT_EXIT} ) does the exit status satisfy {\i predicate} ? Or (in the case of {\f2 ASSERT_DEATH}  and {\f2 EXPECT_DEATH} ) is the exit status non-zero? And\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab does the stderr output match {\i regex} ?\par}
In particular, if {\i statement}  generates an {\f2 ASSERT_*}  or {\f2 EXPECT_*}  failure, it will {\b not}  cause the death test to fail, as Google Test assertions don't abort the process.\par
To write a death test, simply use one of the above macros inside your test function. For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyDeathTest, Foo) \{\par
  // This death test uses a compound statement.\par
  ASSERT_DEATH(\{ int n = 5; Foo(&n); \}, "Error on line .* of Foo()");\par
\}\par
TEST(MyDeathTest, NormalExit) \{\par
  EXPECT_EXIT(NormalExit(), ::testing::ExitedWithCode(0), "Success");\par
\}\par
TEST(MyDeathTest, KillMyself) \{\par
  EXPECT_EXIT(KillMyself(), ::testing::KilledBySignal(SIGKILL), "Sending myself unblockable signal");\par
\}\par
}
\par
verifies that:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 Foo(5)}  causes the process to die with the given error message,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 NormalExit()}  causes the process to print {\f2 "Success"}  to stderr and exit with exit code 0, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
calling {\f2 KillMyself()}  kills the process with signal {\f2 SIGKILL} .\par}
The test function body may contain other assertions and statements as well, if necessary.\par
{\i Important:}  We strongly recommend you to follow the convention of naming your test case (not test) {\f2 *DeathTest}  when it contains a death test, as demonstrated in the above example. The {\f2 Death Tests And Threads}  section below explains why.\par
If a test fixture class is shared by normal tests and death tests, you can use typedef to introduce an alias for the fixture class and avoid duplicating its code: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooTest, DoesThis) \{\par
  // normal test\par
\}\par
\par
TEST_F(FooDeathTest, DoesThat) \{\par
  // death test\par
\}\par
}
\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Cygwin, and Mac (the latter three are supported since v1.3.0). {\f2 (ASSERT|EXPECT)_DEATH_IF_SUPPORTED}  are new in v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Regular Expression Syntax} \par}
On POSIX systems (e.g. Linux, Cygwin, and Mac), Google Test uses the {\f2 POSIX extended regular expression} syntax in death tests. To learn about this syntax, you may want to read this {\f2 Wikipedia entry}.\par
On Windows, Google Test uses its own simple regular expression implementation. It lacks many features you can find in POSIX extended regular expressions. For example, we don't support union ({\f2 "x|y"} ), grouping ({\f2 "(xy)"} ), brackets ({\f2 "[xy]"} ), and repetition count ({\f2 "x\{5,7\}"} ), among others. Below is what we do support (Letter {\f2 A}  denotes a literal character, period ({\f2 .} ), or a single {\f2 \\\\}  escape sequence; {\f2 x}  and {\f2 y}  denote regular expressions.):\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 c}  \cell }{matches any literal character {\f2 c}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\d}  \cell }{matches any decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\D}  \cell }{matches any character that's not a decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\f}  \cell }{matches {\f2 \\f}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\n}  \cell }{matches {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\r}  \cell }{matches {\f2 \\r}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\s}  \cell }{matches any ASCII whitespace, including {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\S}  \cell }{matches any character that's not a whitespace \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\t}  \cell }{matches {\f2 \\t}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\v}  \cell }{matches {\f2 \\v}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\w}  \cell }{matches any letter, {\f2 _} , or decimal digit \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\W}  \cell }{matches any character that {\f2 \\\\w}  doesn't match \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\c}  \cell }{matches any literal character {\f2 c} , which must be a punctuation \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 \\\\.}  \cell }{matches the {\f2 .}  character \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 .}  \cell }{matches any single character except {\f2 \\n}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A?}  \cell }{matches 0 or 1 occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A*}  \cell }{matches 0 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 A+}  \cell }{matches 1 or many occurrences of {\f2 A}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ^}  \cell }{matches the beginning of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $}  \cell }{matches the end of a string (not that of each line) \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 xy}  \cell }{matches {\f2 x}  followed by {\f2 y}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
To help you determine which capability is available on your system, Google Test defines macro {\f2 GTEST_USES_POSIX_RE=1}  when it uses POSIX extended regular expressions, or {\f2 GTEST_USES_SIMPLE_RE=1}  when it uses the simple version. If you want your death tests to work in both cases, you can either {\f2 #if}  on these macros or use the more limited syntax only.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How It Works} \par}
Under the hood, {\f2 ASSERT_EXIT()}  spawns a new process and executes the death test statement in that process. The details of of how precisely that happens depend on the platform and the variable {\f2 ::testing::GTEST_FLAG(death_test_style)}  (which is initialized from the command-line flag {\f2 --gtest_death_test_style} ).\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On POSIX systems, {\f2 fork()}  (or {\f2 clone()}  on Linux) is used to spawn the child, after which:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "fast"} , the death test statement is immediately executed.\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
If the variable's value is {\f2 "threadsafe"} , the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.\par}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
On Windows, the child is spawned using the {\f2 CreateProcess()}  API, and re-executes the binary to cause just the single death test under consideration to be run - much like the {\f2 threadsafe}  mode on POSIX.\par}
Other values for the variable are illegal and will cause the death test to fail. Currently, the flag's default value is {\f2 "fast"} . However, we reserve the right to change it in the future. Therefore, your tests should not depend on this.\par
In either case, the parent process waits for the child process to complete, and checks that\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's exit status satisfies the predicate, and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab the child's stderr matches the regular expression.\par}
If the death test statement runs to completion without dying, the child process will nonetheless terminate, and the assertion fails.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Tests And Threads} \par}
The reason for the two death test styles has to do with thread safety. Due to well-known problems with forking in the presence of threads, death tests should be run in a single-threaded context. Sometimes, however, it isn't feasible to arrange that kind of environment. For example, statically-initialized modules may start threads before main is ever reached. Once threads have been created, it may be difficult or impossible to clean them up.\par
Google Test has three features intended to raise awareness of threading issues.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A warning is emitted if multiple threads are running when a death test is encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test cases with a name ending in "DeathTest" are run before all other tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It uses {\f2 clone()}  instead of {\f2 fork()}  to spawn the child process on Linux ({\f2 clone()}  is not available on Cygwin and Mac), as {\f2 fork()}  is more likely to cause the child to hang when the parent process has multiple threads.\par}
It's perfectly fine to create threads inside a death test statement; they are executed in a separate process and cannot affect the parent.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Death Test Styles} \par}
The "threadsafe" death test style was introduced in order to help mitigate the risks of testing in a possibly multithreaded environment. It trades increased test execution time (potentially dramatically so) for improved thread safety. We suggest using the faster, default "fast" style unless your test has specific problems with it.\par
You can choose a particular style of death tests by setting the flag programmatically:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
}
\par
You can do this in {\f2 main()}  to set the style for all death tests in the binary, or in individual tests. Recall that flags are saved before running each test and restored afterwards, so you need not do that yourself. For example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyDeathTest, TestOne) \{\par
  ::testing::FLAGS_gtest_death_test_style = "threadsafe";\par
  // This test is run in the "threadsafe" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
TEST(MyDeathTest, TestTwo) \{\par
  // This test is run in the "fast" style:\par
  ASSERT_DEATH(ThisShouldDie(), "");\par
\}\par
\par
int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  ::testing::FLAGS_gtest_death_test_style = "fast";\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Caveats} \par}
The {\i statement}  argument of {\f2 ASSERT_EXIT()}  can be any valid C++ statement. If it leaves the current function via a {\f2 return}  statement or by throwing an exception, the death test is considered to have failed. Some Google Test macros may return from the current function (e.g. {\f2 ASSERT_TRUE()} ), so be sure to avoid them in {\i statement} .\par
Since {\i statement}  runs in the child process, any in-memory side effect (e.g. modifying a variable, releasing memory, etc) it causes will {\i not}  be observable in the parent process. In particular, if you release memory in a death test, your program will fail the heap check as the parent process will never see the memory reclaimed. To solve this problem, you can\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab try not to free memory in a death test;\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab free the memory again in the parent process; or\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab do not use the heap checker in your program.\par}
Due to an implementation detail, you cannot place multiple death test assertions on the same line; otherwise, compilation will fail with an unobvious error message.\par
Despite the improved thread safety afforded by the "threadsafe" style of death test, thread problems such as deadlock are still possible in the presence of handlers registered with {\f2 pthread_atfork(3)} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Using Assertions in Sub-routines} \par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Adding Traces to Assertions} \par}
If a test sub-routine is called from several places, when an assertion inside it fails, it can be hard to tell which invocation of the sub-routine the failure is from. You can alleviate this problem using extra logging or custom failure messages, but that usually clutters up your tests. A better solution is to use the {\f2 SCOPED_TRACE}  macro:\par
| {\f2 SCOPED_TRACE(} _message_{\f2 );}  | |:--------------------------\'97|\par
where {\i message}  can be anything streamable to {\f2 std::ostream} . This macro will cause the current file name, line number, and the given message to be added in every failure message. The effect will be undone when the control leaves the current lexical scope.\par
For example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 10: void Sub1(int n) \{\par
11:   EXPECT_EQ(1, Bar(n));\par
12:   EXPECT_EQ(2, Bar(n + 1));\par
13: \}\par
14:\par
15: TEST(FooTest, Bar) \{\par
16:   \{\par
17:     SCOPED_TRACE("A");  // This trace point will be included in\par
18:                         // every failure in this scope.\par
19:     Sub1(1);\par
20:   \}\par
21:   // Now it won't.\par
22:   Sub1(9);\par
23: \}\par
}
\par
could result in messages like these:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid path/to/foo_test.cc:11: Failure\par
Value of: Bar(n)\par
Expected: 1\par
  Actual: 2\par
   Trace:\par
path/to/foo_test.cc:17: A\par
\par
path/to/foo_test.cc:12: Failure\par
Value of: Bar(n + 1)\par
Expected: 2\par
  Actual: 3\par
}
\par
Without the trace, it would've been difficult to know which invocation of {\f2 Sub1()}  the two failures come from respectively. (You could add an extra message to each assertion in {\f2 Sub1()}  to indicate the value of {\f2 n} , but that's tedious.)\par
Some tips on using {\f2 SCOPED_TRACE} :\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab With a suitable message, it's often enough to use {\f2 SCOPED_TRACE}  at the beginning of a sub-routine, instead of at each call site.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When calling sub-routines inside a loop, make the loop iterator part of the message in {\f2 SCOPED_TRACE}  such that you can know which iteration the failure is from.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for {\f2 SCOPED_TRACE} . You can simply use {\f2 ""} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You can use {\f2 SCOPED_TRACE}  in an inner scope when there is one in the outer scope. In this case, all active trace points will be included in the failure messages, in reverse order they are encountered.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!\par}
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Propagating Fatal Failures} \par}
A common pitfall when using {\f2 ASSERT_*}  and {\f2 FAIL*}  is not understanding that when they fail they only abort the {\i current function} , not the entire test. For example, the following test will segfault: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void Subroutine() \{\par
  // Generates a fatal failure and aborts the current function.\par
  ASSERT_EQ(1, 2);\par
  // The following won't be executed.\par
  ...\par
\}\par
\par
TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // The intended behavior is for the fatal failure\par
  // in Subroutine() to abort the entire test.\par
  // The actual behavior: the function goes on after Subroutine() returns.\par
  int* p = NULL;\par
  *p = 3; // Segfault!\par
\}\par
}
\par
Since we don't use exceptions, it is technically impossible to implement the intended behavior here. To alleviate this, Google Test provides two solutions. You could use either the {\f2 (ASSERT|EXPECT)_NO_FATAL_FAILURE}  assertions or the {\f2 HasFatalFailure()}  function. They are described in the following two subsections.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Asserting on Subroutines} \par}
As shown above, if your test calls a subroutine that has an {\f2 ASSERT_*}  failure in it, the test will continue after the subroutine returns. This may not be what you want.\par
Often people want fatal failures to propagate like exceptions. For that Google Test offers the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\f2 EXPECT_NO_FATAL_FAILURE(} _statement_{\f2 );}  \cell }{{\i statement}  doesn't generate any new fatal failures in the current thread. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Only failures in the thread that executes the assertion are checked to determine the result of this type of assertions. If {\i statement}  creates new threads, failures in these threads are ignored.\par
Examples:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_NO_FATAL_FAILURE(Foo());\par
\par
int i;\par
EXPECT_NO_FATAL_FAILURE(\{\par
  i = Bar();\par
\});\par
}
\par
{\i Availability:}  Linux, Windows, Mac. Assertions from multiple threads are currently not supported.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Checking for Failures in the Current Test} \par}
{\f2 HasFatalFailure()}  in the {\f2 {\b testing::Test}}  class returns {\f2 true}  if an assertion in the current test has suffered a fatal failure. This allows functions to catch fatal failures in a sub-routine and return early.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Test \{\par
 public:\par
  ...\par
  static bool HasFatalFailure();\par
\};\par
}
\par
The typical usage, which basically simulates the behavior of a thrown exception, is:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(FooTest, Bar) \{\par
  Subroutine();\par
  // Aborts if Subroutine() had a fatal failure.\par
  if (HasFatalFailure())\par
    return;\par
  // The following won't be executed.\par
  ...\par
\}\par
}
\par
If {\f2 HasFatalFailure()}  is used outside of {\f2 TEST()}  , {\f2 {\b TEST_F()}}  , or a test fixture, you must add the {\f2 {\b testing::Test}::}  prefix, as in:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (::testing::Test::HasFatalFailure())\par
  return;\par
}
\par
Similarly, {\f2 HasNonfatalFailure()}  returns {\f2 true}  if the current test has at least one non-fatal failure, and {\f2 HasFailure()}  returns {\f2 true}  if the current test has at least one failure of either kind.\par
{\i Availability:}  Linux, Windows, Mac. {\f2 HasNonfatalFailure()}  and {\f2 HasFailure()}  are available since version 1.4.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Logging Additional Information} \par}
In your test code, you can call {\f2 RecordProperty("key", value)}  to log additional information, where {\f2 value}  can be either a string or an {\f2 int} . The {\i last}  value recorded for a key will be emitted to the XML output if you specify one. For example, the test\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(WidgetUsageTest, MinAndMaxWidgets) \{\par
  RecordProperty("MaximumWidgets", ComputeMaxUsage());\par
  RecordProperty("MinimumWidgets", ComputeMinUsage());\par
\}\par
}
\par
will output XML like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
  <testcase name="MinAndMaxWidgets" status="run" time="6" classname="WidgetUsageTest"\par
            MaximumWidgets="12"\par
            MinimumWidgets="9" />\par
...\par
}
\par
{\i Note} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 RecordProperty()}  is a static member of the {\f2 Test}  class. Therefore it needs to be prefixed with {\f2 {\b testing::Test}::}  if used outside of the {\f2 TEST}  body and the test fixture class.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 key}  must be a valid XML attribute name, and cannot conflict with the ones already used by Google Test ({\f2 name} , {\f2 status} , {\f2 time} , {\f2 classname} , {\f2 type_param} , and {\f2 value_param} ).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Calling {\f2 RecordProperty()}  outside of the lifespan of a test is allowed. If it's called outside of a test but between a test case's {\f2 SetUpTestCase()}  and {\f2 TearDownTestCase()}  methods, it will be attributed to the XML element for the test case. If it's called outside of all test cases (e.g. in a test environment), it will be attributed to the top-level XML element.\par}
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Sharing Resources Between Tests in the Same Test Case} \par}
Google Test creates a new test fixture object for each test in order to make tests independent and easier to debug. However, sometimes tests use resources that are expensive to set up, making the one-copy-per-test model prohibitively expensive.\par
If the tests don't change the resource, there's no harm in them sharing a single resource copy. So, in addition to per-test set-up/tear-down, Google Test also supports per-test-case set-up/tear-down. To use it:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In your test fixture class (say {\f2 {\b FooTest}}  ), define as {\f2 static}  some member variables to hold the shared resources.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In the same test fixture class, define a {\f2 static void SetUpTestCase()}  function (remember not to spell it as **{\f2 SetupTestCase} ** with a small {\f2 u} !) to set up the shared resources and a {\f2 static void TearDownTestCase()}  function to tear them down.\par}
That's it! Google Test automatically calls {\f2 SetUpTestCase()}  before running the {\i first test}  in the {\f2 {\b FooTest}}  test case (i.e. before creating the first {\f2 {\b FooTest}}  object), and calls {\f2 TearDownTestCase()}  after running the {\i last test}  in it (i.e. after deleting the last {\f2 {\b FooTest}}  object). In between, the tests can use the shared resources.\par
Remember that the test order is undefined, so your code can't depend on a test preceding or following another. Also, the tests must either not modify the state of any shared resource, or, if they do modify the state, they must restore the state to its original value before passing control to the next test.\par
Here's an example of per-test-case set-up and tear-down: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\par
 protected:\par
  // Per-test-case set-up.\par
  // Called before the first test in this test case.\par
  // Can be omitted if not needed.\par
  static void SetUpTestCase() \{\par
    shared_resource_ = new ...;\par
  \}\par
\par
  // Per-test-case tear-down.\par
  // Called after the last test in this test case.\par
  // Can be omitted if not needed.\par
  static void TearDownTestCase() \{\par
    delete shared_resource_;\par
    shared_resource_ = NULL;\par
  \}\par
\par
  // You can define per-test set-up and tear-down logic as usual.\par
  virtual void SetUp() \{ ... \}\par
  virtual void TearDown() \{ ... \}\par
\par
  // Some expensive resource shared by all tests.\par
  static T* shared_resource_;\par
\};\par
\par
T* FooTest::shared_resource_ = NULL;\par
\par
TEST_F(FooTest, Test1) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
TEST_F(FooTest, Test2) \{\par
  ... you can refer to shared_resource here ...\par
\}\par
}
\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Global Set-Up and Tear-Down} \par}
Just as you can do set-up and tear-down at the test level and the test case level, you can also do it at the test program level. Here's how.\par
First, you subclass the {\f2 {\b testing::Environment}}  class to define a test environment, which knows how to set-up and tear-down:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Environment \{\par
 public:\par
  virtual ~Environment() \{\}\par
  // Override this to define how to set up the environment.\par
  virtual void SetUp() \{\}\par
  // Override this to define how to tear down the environment.\par
  virtual void TearDown() \{\}\par
\};\par
}
\par
Then, you register an instance of your environment class with Google Test by calling the {\f2 ::testing::AddGlobalTestEnvironment()}  function:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Environment* AddGlobalTestEnvironment(Environment* env);\par
}
\par
Now, when {\f2 RUN_ALL_TESTS()}  is called, it first calls the {\f2 SetUp()}  method of the environment object, then runs the tests if there was no fatal failures, and finally calls {\f2 TearDown()}  of the environment object.\par
It's OK to register multiple environment objects. In this case, their {\f2 SetUp()}  will be called in the order they are registered, and their {\f2 TearDown()}  will be called in the reverse order.\par
Note that Google Test takes ownership of the registered environment objects. Therefore {\b do not delete them}  by yourself.\par
You should call {\f2 AddGlobalTestEnvironment()}  before {\f2 RUN_ALL_TESTS()}  is called, probably in {\f2 main()} . If you use {\f2 gtest_main} , you need to call this before {\f2 main()}  starts for it to take effect. One way to do this is to define a global variable like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ::testing::Environment* const foo_env = ::testing::AddGlobalTestEnvironment(new FooEnvironment);\par
}
\par
However, we strongly recommend you to write your own {\f2 main()}  and call {\f2 AddGlobalTestEnvironment()}  there, as relying on initialization of global variables makes the code harder to read and may cause problems when you register multiple environments from different translation units and the environments have dependencies among them (remember that the compiler doesn't guarantee the order in which global variables from different translation units are initialized).\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Value Parameterized Tests} \par}
{\i Value-parameterized tests}  allow you to test your code with different parameters without writing multiple copies of the same test.\par
Suppose you write a test for your code and then realize that your code is affected by a presence of a Boolean command line flag.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MyCodeTest, TestFoo) \{\par
  // A code to test foo().\par
\}\par
}
\par
Usually people factor their test code into a function with a Boolean parameter in such situations. The function sets the flag, then executes the testing code.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooHelper(bool flag_value) \{\par
  flag = flag_value;\par
  // A code to test foo().\par
\}\par
\par
TEST(MyCodeTest, TestFoo) \{\par
  TestFooHelper(false);\par
  TestFooHelper(true);\par
\}\par
}
\par
But this setup has serious drawbacks. First, when a test assertion fails in your tests, it becomes unclear what value of the parameter caused it to fail. You can stream a clarifying message into your {\f2 EXPECT} /{\f2 ASSERT}  statements, but it you'll have to do it with all of them. Second, you have to add one such helper function per test. What if you have ten tests? Twenty? A hundred?\par
Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.\par
Here are some other situations when value-parameterized tests come handy:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test different implementations of an OO interface.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How to Write Value-Parameterized Tests} \par}
To write value-parameterized tests, first you should define a fixture class. It must be derived from both {\f2 {\b testing::Test}}  and {\f2 ::testing::WithParamInterface<T>}  (the latter is a pure interface), where {\f2 T}  is the type of your parameter values. For convenience, you can just derive the fixture class from {\f2 ::testing::TestWithParam<T>} , which itself is derived from both {\f2 {\b testing::Test}}  and {\f2 ::testing::WithParamInterface<T>} . {\f2 T}  can be any copyable type. If it's a raw pointer, you are responsible for managing the lifespan of the pointed values.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::TestWithParam<const char*> \{\par
  // You can implement all the usual fixture class members here.\par
  // To access the test parameter, call GetParam() from class\par
  // TestWithParam<T>.\par
\};\par
\par
// Or, when you want to add parameters to a pre-existing fixture class:\par
class BaseTest : public ::testing::Test \{\par
  ...\par
\};\par
class BarTest : public BaseTest,\par
                public ::testing::WithParamInterface<const char*> \{\par
  ...\par
\};\par
}
\par
Then, use the {\f2 TEST_P}  macro to define as many test patterns using this fixture as you want. The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, access the test parameter with the GetParam() method\par
  // of the TestWithParam<T> class:\par
  EXPECT_TRUE(foo.Blah(GetParam()));\par
  ...\par
\}\par
\par
TEST_P(FooTest, HasBlahBlah) \{\par
  ...\par
\}\par
}
\par
Finally, you can use {\f2 INSTANTIATE_TEST_CASE_P}  to instantiate the test case with any set of parameters you want. Google Test defines a number of functions for generating test parameters. They return what we call (surprise!) {\i parameter generators} . Here is a summary of them, which are all in the {\f2 testing}  namespace:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Range(begin, end[, step])}  \cell }{Yields values {\f2 \{begin, begin+step, begin+step+step, ...\}} . The values do not include {\f2 end} . {\f2 step}  defaults to 1.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Values(v1, v2, ..., vN)}  \cell }{Yields values {\f2 \{v1, v2, ..., vN\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ValuesIn(container)}  and {\f2 ValuesIn(begin, end)}  \cell }{Yields values from a C-style array, an STL-style container, or an iterator range {\f2 [begin, end)} . {\f2 container} , {\f2 begin} , and {\f2 end}  can be expressions whose values are determined at run time. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 {\b Bool()}}  \cell }{Yields sequence {\f2 \{false, true\}} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 Combine(g1, g2, ..., gN)}  \cell }{Yields all combinations (the Cartesian product for the math savvy) of the values generated by the {\f2 N}  generators. This is only available if your system provides the {\f2 <tr1/tuple>}  header. If you are sure your system does, and Google Test disagrees, you can override it by defining {\f2 GTEST_HAS_TR1_TUPLE=1} . See comments in {\f2 include/gtest/internal/gtest-port.h} for more information. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
For more details, see the comments at the definitions of these functions in the {\f2 source code}.\par
The following statement will instantiate tests from the {\f2 {\b FooTest}}  test case each with parameter values {\f2 "meeny"} , {\f2 "miny"} , and {\f2 "moe"} .\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TEST_CASE_P(InstantiationName,\par
                        FooTest,\par
                        ::testing::Values("meeny", "miny", "moe"));\par
}
\par
To distinguish different instances of the pattern (yes, you can instantiate it more than once), the first argument to {\f2 INSTANTIATE_TEST_CASE_P}  is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instantiations. The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.DoesBlah/2}  for {\f2 "moe"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "meeny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "miny"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 InstantiationName/FooTest.HasBlahBlah/2}  for {\f2 "moe"} \par}
You can use these names in {\f2 \'96gtest_filter}.\par
This statement will instantiate all tests from {\f2 {\b FooTest}}  again, each with parameter values {\f2 "cat"}  and {\f2 "dog"} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const char* pets[] = \{"cat", "dog"\};\par
INSTANTIATE_TEST_CASE_P(AnotherInstantiationName, FooTest,\par
                        ::testing::ValuesIn(pets));\par
}
\par
The tests from the instantiation above will have these names:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.DoesBlah/1}  for {\f2 "dog"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/0}  for {\f2 "cat"} \par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 AnotherInstantiationName/FooTest.HasBlahBlah/1}  for {\f2 "dog"} \par}
Please note that {\f2 INSTANTIATE_TEST_CASE_P}  will instantiate {\i all}  tests in the given test case, whether their definitions come before or {\i after}  the {\f2 INSTANTIATE_TEST_CASE_P}  statement.\par
You can see {\f2 these} {\f2 files} for more examples.\par
{\i Availability} : Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.2.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Creating Value-Parameterized Abstract Tests} \par}
In the above, we define and instantiate {\f2 {\b FooTest}}  in the same source file. Sometimes you may want to define value-parameterized tests in a library and let other people instantiate them later. This pattern is known as {\i abstract tests} . As an example of its application, when you are designing an interface you can write a standard suite of abstract tests (perhaps using a factory function as the test parameter) that all implementations of the interface are expected to pass. When someone implements the interface, he can instantiate your suite to get all the interface-conformance tests for free.\par
To define abstract tests, you should organize your code like this:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the definition of the parameterized test fixture class (e.g. {\f2 {\b FooTest}} ) in a header file, say {\f2 foo_param_test.h} . Think of this as {\i declaring}  your abstract tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Put the {\f2 TEST_P}  definitions in {\f2 foo_param_test.cc} , which includes {\f2 foo_param_test.h} . Think of this as {\i implementing}  your abstract tests.\par}
Once they are defined, you can instantiate them by including {\f2 foo_param_test.h} , invoking {\f2 INSTANTIATE_TEST_CASE_P()} , and linking with {\f2 foo_param_test.cc} . You can instantiate the same abstract test case multiple times, possibly in different source files.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Typed Tests} \par}
Suppose you have multiple implementations of the same interface and want to make sure that all of them satisfy some common requirements. Or, you may have defined several types that are supposed to conform to the same "concept" and you want to verify it. In both cases, you want the same test logic repeated for different types.\par
While you can write one {\f2 TEST}  or {\f2 TEST_F}  for each type you want to test (and you may even factor the test logic into a function template that you invoke from the {\f2 TEST} ), it's tedious and doesn't scale: if you want {\i m}  tests over {\i n}  types, you'll end up writing {\i m*n}  {\f2 TEST} s.\par
{\i Typed tests}  allow you to repeat the same test logic over a list of types. You only need to write the test logic once, although you must know the type list when writing typed tests. Here's how you do it:\par
First, define a fixture class template. It should be parameterized by a type. Remember to derive it from {\f2 {\b testing::Test}} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
 public:\par
  ...\par
  typedef std::list<T> List;\par
  static T shared_;\par
  T value_;\par
\};\par
}
\par
Next, associate a list of types with the test case, which will be repeated for each type in the list:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
TYPED_TEST_CASE(FooTest, MyTypes);\par
}
\par
The {\f2 typedef}  is necessary for the {\f2 TYPED_TEST_CASE}  macro to parse correctly. Otherwise the compiler will think that each comma in the type list introduces a new macro argument.\par
Then, use {\f2 TYPED_TEST()}  instead of {\f2 {\b TEST_F()}}  to define a typed test for this test case. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST(FooTest, DoesBlah) \{\par
  // Inside a test, refer to the special name TypeParam to get the type\par
  // parameter.  Since we are inside a derived class template, C++ requires\par
  // us to visit the members of FooTest via 'this'.\par
  TypeParam n = this->value_;\par
\par
  // To visit static members of the fixture, add the 'TestFixture::'\par
  // prefix.\par
  n += TestFixture::shared_;\par
\par
  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\par
  // prefix.  The 'typename' is required to satisfy the compiler.\par
  typename TestFixture::List values;\par
  values.push_back(n);\par
  ...\par
\}\par
\par
TYPED_TEST(FooTest, HasPropertyA) \{ ... \}\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Type-Parameterized Tests} \par}
{\i Type-parameterized tests}  are like typed tests, except that they don't require you to know the list of types ahead of time. Instead, you can define the test logic first and instantiate it with different type lists later. You can even instantiate it more than once in the same program.\par
If you are designing an interface or concept, you can define a suite of type-parameterized tests to verify properties that any valid implementation of the interface/concept should have. Then, the author of each implementation can just instantiate the test suite with his type to verify that it conforms to the requirements, without having to write similar tests repeatedly. Here's an example:\par
First, define a fixture class template, as we did with typed tests:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
class FooTest : public ::testing::Test \{\par
  ...\par
\};\par
}
\par
Next, declare that you will define a type-parameterized test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_CASE_P(FooTest);\par
}
\par
The {\f2 _P}  suffix is for "parameterized" or "pattern", whichever you prefer to think.\par
Then, use {\f2 TYPED_TEST_P()}  to define a type-parameterized test. You can repeat this as many times as you want:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TYPED_TEST_P(FooTest, DoesBlah) \{\par
  // Inside a test, refer to TypeParam to get the type parameter.\par
  TypeParam n = 0;\par
  ...\par
\}\par
\par
TYPED_TEST_P(FooTest, HasPropertyA) \{ ... \}\par
}
\par
Now the tricky part: you need to register all test patterns using the {\f2 REGISTER_TYPED_TEST_CASE_P}  macro before you can instantiate them. The first argument of the macro is the test case name; the rest are the names of the tests in this test case:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid REGISTER_TYPED_TEST_CASE_P(FooTest,\par
                           DoesBlah, HasPropertyA);\par
}
\par
Finally, you are free to instantiate the pattern with the types you want. If you put the above code in a header file, you can {\f2 #include}  it in multiple C++ source files and instantiate it multiple times.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Types<char, int, unsigned int> MyTypes;\par
INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, MyTypes);\par
}
\par
To distinguish different instances of the pattern, the first argument to the {\f2 INSTANTIATE_TYPED_TEST_CASE_P}  macro is a prefix that will be added to the actual test case name. Remember to pick unique prefixes for different instances.\par
In the special case where the type list contains only one type, you can write that type directly without {\f2 ::testing::Types<...>} , like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid INSTANTIATE_TYPED_TEST_CASE_P(My, FooTest, int);\par
}
\par
You can see {\f2 samples/sample6_unittest.cc}  for a complete example.\par
{\i Availability:}  Linux, Windows (requires MSVC 8.0 or above), Mac; since version 1.1.0.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Testing Private Code} \par}
If you change your software's internal implementation, your tests should not break as long as the change is not observable by users. Therefore, per the {\i black-box testing principle} , most of the time you should test your code through its public interfaces.\par
If you still find yourself needing to test internal implementation code, consider if there's a better design that wouldn't require you to do so. If you absolutely have to test non-public interface code though, you can. There are two cases to consider:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Static functions ({\i not}  the same as static member functions!) or unnamed namespaces, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Private or protected class members\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Static Functions} \par}
Both static functions and definitions/declarations in an unnamed namespace are only visible within the same translation unit. To test them, you can {\f2 #include}  the entire {\f2 .cc}  file being tested in your {\f2 *_test.cc}  file. ({\f2 #include} ing {\f2 .cc}  files is not a good way to reuse code - you should not do this in production code!)\par
However, a better approach is to move the private code into the {\f2 foo::internal}  namespace, where {\f2 foo}  is the namespace your project normally uses, and put the private declarations in a {\f2 *-internal.h}  file. Your production {\f2 .cc}  files and your tests are allowed to include this internal header, but your clients are not. This way, you can fully test your internal implementation without leaking it to your clients.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Private Class Members} \par}
Private class members are only accessible from within the class or by friends. To access a class' private members, you can declare your test fixture as a friend to the class and define accessors in your fixture. Tests using the fixture can then access the private members of your production class via the accessors in the fixture. Note that even though your fixture is a friend to your production class, your tests are not automatically friends to it, as they are technically defined in sub-classes of the fixture.\par
Another way to test private members is to refactor them into an implementation class, which is then declared in a {\f2 *-internal.h}  file. Your clients aren't allowed to include this header but your tests can. Such is called the Pimpl (Private Implementation) idiom.\par
Or, you can declare an individual test as a friend of your class by adding this line in the class body:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid FRIEND_TEST(TestCaseName, TestName);\par
}
\par
For example, {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
#include "gtest/gtest_prod.h"\par
\par
// Defines FRIEND_TEST.\par
class Foo \{\par
  ...\par
 private:\par
  FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\par
  int Bar(void* x);\par
\};\par
\par
// foo_test.cc\par
...\par
TEST(FooTest, BarReturnsZeroOnNull) \{\par
  Foo foo;\par
  EXPECT_EQ(0, foo.Bar(NULL));\par
  // Uses Foo's private member Bar().\par
\}\par
}
\par
Pay special attention when your class is defined in a namespace, as you should define your test fixtures and tests in the same namespace if you want them to be friends of your class. For example, if the code to be tested looks like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
\par
class Foo \{\par
  friend class FooTest;\par
  FRIEND_TEST(FooTest, Bar);\par
  FRIEND_TEST(FooTest, Baz);\par
  ...\par
  definition of the class Foo\par
  ...\par
\};\par
\par
\}  // namespace my_namespace\par
}
\par
Your test code should be something like:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace my_namespace \{\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
\};\par
\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
\}  // namespace my_namespace\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Catching Failures} \par}
If you are building a testing utility on top of Google Test, you'll want to test your utility. What framework would you use to test it? Google Test, of course.\par
The challenge is to verify that your testing utility reports failures correctly. In frameworks that report a failure by throwing an exception, you could catch the exception and assert on it. But Google Test doesn't use exceptions, so how do we test that a piece of code generates an expected failure?\par
{\f2 "gtest/gtest-spi.h"}  contains some constructs to do this. After {\f2 #include} ing this header, you can use\par
| {\f2 EXPECT_FATAL_FAILURE(} _statement, substring_{\f2 );}  | |:-----------------------------------------------\'97|\par
to assert that {\i statement}  generates a fatal (e.g. {\f2 ASSERT_*} ) failure whose message contains the given {\i substring} , or use\par
| {\f2 EXPECT_NONFATAL_FAILURE(} _statement, substring_{\f2 );}  | |:--------------------------------------------------\'97|\par
if you are expecting a non-fatal (e.g. {\f2 EXPECT_*} ) failure.\par
For technical reasons, there are some caveats:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot stream a failure message to either macro.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot reference local non-static variables or non-static members of {\f2 this}  object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\i statement}  in {\f2 EXPECT_FATAL_FAILURE()}  cannot return a value.\par}
{\i Note:}  Google Test is designed with threads in mind. Once the synchronization primitives in {\f2 "gtest/internal/gtest-port.h"}  have been implemented, Google Test will become thread-safe, meaning that you can then use assertions in multiple threads concurrently. Before\par
that, however, Google Test only supports single-threaded usage. Once thread-safe, {\f2 EXPECT_FATAL_FAILURE()}  and {\f2 EXPECT_NONFATAL_FAILURE()}  will capture failures in the current thread only. If {\i statement}  creates new threads, failures in these threads will be ignored. If you want to capture failures from all threads instead, you should use the following macros:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_FATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(} _statement, substring_{\f2 );}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Getting the Current Test's Name} \par}
Sometimes a function may need to know the name of the currently running test. For example, you may be using the {\f2 SetUp()}  method of your test fixture to set the golden file name based on which test is running. The {\f2 {\b testing::TestInfo}}  class has this information:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace testing \{\par
\par
class TestInfo \{\par
 public:\par
  // Returns the test case name and the test name, respectively.\par
  //\par
  // Do NOT delete or free the return value - it's managed by the\par
  // TestInfo class.\par
  const char* test_case_name() const;\par
  const char* name() const;\par
\};\par
\par
\}  // namespace testing\par
}
\par
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid To obtain a {\f2 TestInfo}  object for the currently running test, call \par
}{\f2 current_test_info()}  on the {\f2 UnitTest}  singleton object:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Gets information about the currently running test.\par
// Do NOT delete the returned object - it's managed by the UnitTest class.\par
const ::testing::TestInfo* const test_info =\par
  ::testing::UnitTest::GetInstance()->current_test_info();\par
printf("We are in test %s of test case %s.\\n",\par
       test_info->name(), test_info->test_case_name());\par
}
\par
{\f2 current_test_info()}  returns a null pointer if no test is running. In particular, you cannot find the test case name in {\f2 TestCaseSetUp()} , {\f2 TestCaseTearDown()}  (where you know the test case name implicitly), or functions called from them.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Extending Google Test by Handling Test Events} \par}
Google Test provides an {\b event listener API}  to let you receive notifications about the progress of a test program and test failures. The events you can listen to include the start and end of the test program, a test case, or a test method, among others. You may use this API to augment or replace the standard console output, replace the XML output, or provide a completely different form of output, such as a GUI or a database. You can also use test events as checkpoints to implement a resource leak checker, for example.\par
{\i Availability:}  Linux, Windows, Mac; since v1.4.0.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Defining Event Listeners} \par}
To define a event listener, you subclass either {\f2 testing::TestEventListener} or {\f2 testing::EmptyTestEventListener}. The former is an (abstract) interface, where {\i each pure virtual method\par
 can be overridden to handle a test event}  (For example, when a test starts, the {\f2 OnTestStart()}  method will be called.). The latter provides an empty implementation of all methods in the interface, such that a subclass only needs to override the methods it cares about.\par
When an event is fired, its context is passed to the handler function as an argument. The following argument types are used:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 UnitTest} reflects the state of the entire test program,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestCase} has information about a test case, which can contain one or more tests,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestInfo} contains the state of a test, and\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 TestPartResult} represents the result of a test assertion.\par}
An event handler function can examine the argument it receives to find out interesting information about the event and the test program's state. Here's an example:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class MinimalistPrinter : public ::testing::EmptyTestEventListener \{\par
  // Called before a test starts.\par
  virtual void OnTestStart(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s starting.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\par
  // Called after a failed assertion or a SUCCEED() invocation.\par
  virtual void OnTestPartResult(\par
      const ::testing::TestPartResult& test_part_result) \{\par
    printf("%s in %s:%d\\n%s\\n",\par
           test_part_result.failed() ? "*** Failure" : "Success",\par
           test_part_result.file_name(),\par
           test_part_result.line_number(),\par
           test_part_result.summary());\par
  \}\par
\par
  // Called after a test ends.\par
  virtual void OnTestEnd(const ::testing::TestInfo& test_info) \{\par
    printf("*** Test %s.%s ending.\\n",\par
           test_info.test_case_name(), test_info.name());\par
  \}\par
\};\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using Event Listeners} \par}
To use the event listener you have defined, add an instance of it to the Google Test event listener list (represented by class {\f2 TestEventListeners}{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
note the "s" at the end of the name) in your {\f2 main()}  function, before calling {\f2 RUN_ALL_TESTS()} : {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  // Gets hold of the event listener list.\par
  ::testing::TestEventListeners& listeners =\par
      ::testing::UnitTest::GetInstance()->listeners();\par
  // Adds a listener to the end.  Google Test takes the ownership.\par
  listeners.Append(new MinimalistPrinter);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par}
There's only one problem: the default test result printer is still in effect, so its output will mingle with the output from your minimalist printer. To suppress the default printer, just release it from the event listener list and delete it. You can do so by adding one line: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ...\par
delete listeners.Release(listeners.default_result_printer());\par
listeners.Append(new MinimalistPrinter);\par
return RUN_ALL_TESTS();\par
}
\par
Now, sit back and enjoy a completely different output from your tests. For more details, you can read this {\f2 sample}.\par
You may append more than one listener to the list. When an {\f2 On*Start()}  or {\f2 OnTestPartResult()}  event is fired, the listeners will receive it in the order they appear in the list (since new listeners are added to the end of the list, the default text printer and the default XML generator will receive the event first). An {\f2 On*End()}  event will be received by the listeners in the {\i reverse}  order. This allows output by listeners added later to be framed by output from listeners added earlier.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating Failures in Listeners} \par}
You may use failure-raising macros ({\f2 EXPECT_*()} , {\f2 ASSERT_*()} , {\f2 FAIL()} , etc) when processing an event. There are some restrictions:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab You cannot generate any failure in {\f2 OnTestPartResult()}  (otherwise it will cause {\f2 OnTestPartResult()}  to be called recursively).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab A listener that handles {\f2 OnTestPartResult()}  is not allowed to generate any failure.\par}
When you add listeners to the listener list, you should put listeners that handle {\f2 OnTestPartResult()}  {\i before}  listeners that can generate failures. This ensures that failures generated by the latter are attributed to the right test by the former.\par
We have a sample of failure-raising listener {\f2 here}.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Running Test Programs: Advanced Options} \par}
Google Test test programs are ordinary executables. Once built, you can run them directly and affect their behavior via the following environment variables and/or command line flags. For the flags to work, your programs must call {\f2 ::testing::InitGoogleTest()}  before calling {\f2 RUN_ALL_TESTS()} .\par
To see a list of supported flags and their usage, please run your test program with the {\f2 --help}  flag. You can also use {\f2 -h} , {\f2 -?} , or {\f2 /?}  for short. This feature is added in version 1.3.0.\par
If an option is specified both by an environment variable and by a flag, the latter takes precedence. Most of the options can also be set/read in code: to access the value of command line flag {\f2 --gtest_foo} , write {\f2 ::testing::GTEST_FLAG(foo)} . A common pattern is to set the value of a flag before calling {\f2 ::testing::InitGoogleTest()}  to change the default value of the flag: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int main(int argc, char** argv) \{\par
  // Disables elapsed time by default.\par
  ::testing::GTEST_FLAG(print_time) = false;\par
\par
  // This allows the user to override the flag on the command line.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Selecting Tests} \par}
This section shows various options for choosing which tests to run.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Listing Test Names} \par}
Sometimes it is necessary to list the available tests in a program before running them so that a filter may be applied if needed. Including the flag {\f2 --gtest_list_tests}  overrides all other flags and lists tests in the following format: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TestCase1.\par
  TestName1\par
  TestName2\par
TestCase2.\par
  TestName\par
}
\par
None of the tests listed are actually run if the flag is provided. There is no corresponding environment variable for this flag.\par
{\i Availability:}  Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Running a Subset of the Tests} \par}
By default, a Google Test program runs all tests the user has defined. Sometimes, you want to run only a subset of the tests (e.g. for debugging or quickly verifying a change). If you set the {\f2 GTEST_FILTER}  environment variable or the {\f2 --gtest_filter}  flag to a filter string, Google Test will only run the tests whose full names (in the form of {\f2 TestCaseName.TestName} ) match the filter.\par
The format of a filter is a '{\f2 :} '-separated list of wildcard patterns (called the positive patterns) optionally followed by a '{\f2 -} ' and another '{\f2 :} '-separated pattern list (called the negative patterns). A test matches the filter if and only if it matches any of the positive patterns but does not match any of the negative patterns.\par
A pattern may contain `'*'{\f2 (matches any string) or} '?'{\f2 (matches any single character). For convenience, the filter} '{\i -NegativePatterns'{\f2 can be also written as} '-NegativePatterns'`.} \par
{\i For example:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test}  Has no flag, and thus runs all its tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ./foo_test --gtest_filter=*}  Also runs everything, due to the single match-everything `{\f2 value. *} ./foo_test \'96gtest_filter={\b FooTest}.*{\f2 Runs everything in test case} {\b FooTest}{\f2 . *} ./foo_test \'96gtest_filter=*Null*:{\i Constructor} {\f2 Runs any test whose full name contains either} "Null"{\f2 or} "Constructor"{\f2 . *} ./foo_test \'96gtest_filter=-*DeathTest.*{\f2 Runs all non-death tests. *} ./foo_test \'96gtest_filter={\b FooTest}.*-FooTest.Bar{\f2 Runs everything in test case} {\b FooTest}{\f2 except} FooTest.Bar`.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Disabling Tests} \par}
} \par
{\i } \par
{\i If you have a broken test that you cannot fix right away, you can add the {\f2 DISABLED_}  prefix to its name. This will exclude it from execution. This is better than commenting out the code or using {\f2 #if 0} , as disabled tests are still compiled (and thus won't rot).} \par
{\i If you need to disable all tests in a test case, you can either add {\f2 DISABLED_}  to the front of the name of each test, or alternatively add it to the front of the test case name.} \par
{\i For example, the following tests won't be run by Google Test, even though they will still be compiled:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests that Foo does Abc.\par
TEST(FooTest, DISABLED_DoesAbc) \{ ... \}\par
\par
class DISABLED_BarTest : public ::testing::Test \{ ... \};\par
\par
// Tests that Bar does Xyz.\par
TEST_F(DISABLED_BarTest, DoesXyz) \{ ... \}\par
}
} \par
{\i {\i Note:}  This feature should only be used for temporary pain-relief. You still have to fix the disabled tests at a later date. As a reminder, Google Test will print a banner warning you if a test program contains any disabled tests.} \par
{\i {\i Tip:}  You can easily count the number of disabled tests you have using {\f2 grep} . This number can be used as a metric for improving your test quality.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Temporarily Enabling Disabled Tests} \par}
} \par
{\i } \par
{\i To include {\f2 disabled tests} in test execution, just invoke the test program with the {\f2 --gtest_also_run_disabled_tests}  flag or set the {\f2 GTEST_ALSO_RUN_DISABLED_TESTS}  environment variable to a value other than {\f2 0} . You can combine this with the {\f2 \'96gtest_filter} flag to further select which disabled tests to run.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Repeating the Tests} \par}
} \par
{\i } \par
{\i Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it will fail only 1% of the time, making it rather hard to reproduce the bug under a debugger. This can be a major source of frustration.} \par
{\i The {\f2 --gtest_repeat}  flag allows you to repeat all (or selected) test methods in a program many times. Hopefully, a flaky test will eventually fail and give you a chance to debug. Here's how to use it:} \par
{\i \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000}  \cell }{Repeat foo_test 1000 times and don't stop at failures.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=-1}  \cell }{A negative count means repeating forever. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_break_on_failure}  \cell }{Repeat foo_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $ foo_test --gtest_repeat=1000 --gtest_filter=FooBar}  \cell }{Repeat the tests whose name matches the filter 1000 times. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
If your test program contains global set-up/tear-down code registered using {\f2 AddGlobalTestEnvironment()} , it will be repeated in each iteration as well, as the flakiness may be in it. You can also specify the repeat count by setting the {\f2 GTEST_REPEAT}  environment variable.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Shuffling the Tests} \par}
} \par
{\i } \par
{\i You can specify the {\f2 --gtest_shuffle}  flag (or set the {\f2 GTEST_SHUFFLE}  environment variable to {\f2 1} ) to run the tests in a program in a random order. This helps to reveal bad dependencies between tests.} \par
{\i By default, Google Test uses a random seed calculated from the current time. Therefore you'll get a different order every time. The console output includes the random seed value, such that you can reproduce an order-related test failure later. To specify the random seed explicitly, use the {\f2 --gtest_random_seed=SEED}  flag (or set the {\f2 GTEST_RANDOM_SEED}  environment variable), where {\f2 SEED}  is an integer between 0 and 99999. The seed value 0 is special: it tells Google Test to do the default behavior of calculating the seed from the current time.} \par
{\i If you combine this with {\f2 --gtest_repeat=N} , Google Test will pick a different random seed and re-shuffle the tests in each iteration.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.4.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling Test Output} \par}
} \par
{\i } \par
{\i This section teaches how to tweak the way test results are reported.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Colored Terminal Output} \par}
} \par
{\i } \par
{\i Google Test can use colors in its terminal output to make it easier to spot the separation between tests, and whether tests passed.} \par
{\i You can set the GTEST_COLOR environment variable or set the {\f2 --gtest_color}  command line flag to {\f2 yes} , {\f2 no} , or {\f2 auto}  (the default) to enable colors, disable colors, or let Google Test decide. When the value is {\f2 auto} , Google Test will use colors if and only if the output goes to a terminal and (on non-Windows platforms) the {\f2 TERM}  environment variable is set to {\f2 xterm}  or {\f2 xterm-color} .} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Suppressing the Elapsed Time} \par}
} \par
{\i } \par
{\i By default, Google Test prints the time it takes to run each test. To suppress that, run the test program with the {\f2 --gtest_print_time=0}  command line flag. Setting the {\f2 GTEST_PRINT_TIME}  environment variable to {\f2 0}  has the same effect.} \par
{\i {\i Availability:}  Linux, Windows, Mac. (In Google Test 1.3.0 and lower, the default behavior is that the elapsed time is {\b not}  printed.)} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Generating an XML Report} \par}
} \par
{\i } \par
{\i Google Test can emit a detailed XML report to a file in addition to its normal textual output. The report contains the duration of each test, and thus can help you identify slow tests.} \par
{\i To generate the XML report, set the {\f2 GTEST_OUTPUT}  environment variable or the {\f2 --gtest_output}  flag to the string {\f2 "xml:_path_to_output_file_"} , which will create the file at the given location. You can also just use the string {\f2 "xml"} , in which case the output can be found in the {\f2 test_detail.xml}  file in the current directory.} \par
{\i If you specify a directory (for example, {\f2 "xml:output/directory/"}  on Linux or {\f2 "xml:output\\directory\\"}  on Windows), Google Test will create the XML file in that directory, named after the test executable (e.g. {\f2 foo_test.xml}  for test program {\f2 foo_test}  or {\f2 foo_test.exe} ). If the file already exists (perhaps left over from a previous run), Google Test will pick a different name (e.g. {\f2 foo_test_1.xml} ) to avoid overwriting it.} \par
{\i The report uses the format described here. It is based on the {\f2 junitreport}  Ant task and can be parsed by popular continuous build systems like {\f2 Jenkins}. Since that format was originally intended for Java, a little interpretation is required to make it apply to Google Test tests, as shown here:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <testsuites name="AllTests" ...>\par
  <testsuite name="test_case_name" ...>\par
    <testcase name="test_name" ...>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
      <failure message="..."/>\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The root {\f2 <testsuites>}  element corresponds to the entire test program.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testsuite>}  elements correspond to Google Test test cases.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 <testcase>}  elements correspond to Google Test test functions.\par}
} \par
{\i For instance, the following program} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(MathTest, Addition) \{ ... \}\par
TEST(MathTest, Subtraction) \{ ... \}\par
TEST(LogicTest, NonContradiction) \{ ... \}\par
}
} \par
{\i could generate this report:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid <?xml version="1.0" encoding="UTF-8"?>\par
<testsuites tests="3" failures="1" errors="0" time="35" name="AllTests">\par
  <testsuite name="MathTest" tests="2" failures="1" errors="0" time="15">\par
    <testcase name="Addition" status="run" time="7" classname="">\par
      <failure message="Value of: add(1, 1)&#x0A; Actual: 3&#x0A;Expected: 2" type=""/>\par
      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>\par
    </testcase>\par
    <testcase name="Subtraction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
  <testsuite name="LogicTest" tests="1" failures="0" errors="0" time="5">\par
    <testcase name="NonContradiction" status="run" time="5" classname="">\par
    </testcase>\par
  </testsuite>\par
</testsuites>\par
}
} \par
{\i Things to note:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 tests}  attribute of a {\f2 <testsuites>}  or {\f2 <testsuite>}  element tells how many test functions the Google Test program or test case contains, while the {\f2 failures}  attribute tells how many of them failed.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 time}  attribute expresses the duration of the test, test case, or entire test program in milliseconds.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Each {\f2 <failure>}  element corresponds to a single failed Google Test assertion.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Some JUnit concepts don't apply to Google Test, yet we have to conform to the DTD. Therefore you'll see some dummy elements and attributes in the report. You can safely ignore these parts.\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Controlling How Failures Are Reported} \par}
} \par
{\i } \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Turning Assertion Failures into Break-Points} \par}
} \par
{\i } \par
{\i When running test programs under a debugger, it's very convenient if the debugger can catch an assertion failure and automatically drop into interactive mode. Google Test's {\i break-on-failure}  mode supports this behavior.} \par
{\i To enable it, set the {\f2 GTEST_BREAK_ON_FAILURE}  environment variable to a value other than {\f2 0}  . Alternatively, you can use the {\f2 --gtest_break_on_failure}  command line flag.} \par
{\i {\i Availability:}  Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Disabling Catching Test-Thrown Exceptions} \par}
} \par
{\i } \par
{\i Google Test can be used either with or without exceptions enabled. If a test throws a C++ exception or (on Windows) a structured exception (SEH), by default Google Test catches it, reports it as a test failure, and continues with the next test method. This maximizes the coverage of a test run. Also, on Windows an uncaught exception will cause a pop-up window, so catching the exceptions allows you to run the tests automatically.} \par
{\i When debugging the test failures, however, you may instead want the exceptions to be handled by the debugger, such that you can examine the call stack when an exception is thrown. To achieve that, set the {\f2 GTEST_CATCH_EXCEPTIONS}  environment variable to {\f2 0} , or use the {\f2 --gtest_catch_exceptions=0}  flag when running the tests.} \par
{\i {\b Availability} : Linux, Windows, Mac.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Letting Another Testing Framework Drive} \par}
} \par
{\i } \par
{\i If you work on a project that has already been using another testing framework and is not ready to completely switch to Google Test yet, you can get much of Google Test's benefit by using its assertions in your existing tests. Just change your {\f2 main()}  function to look like:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "gtest/gtest.h"\par
\par
int main(int argc, char** argv) \{\par
  ::testing::GTEST_FLAG(throw_on_failure) = true;\par
  // Important: Google Test must be initialized.\par
  ::testing::InitGoogleTest(&argc, argv);\par
\par
  ... whatever your existing testing framework requires ...\par
\}\par
}
} \par
{\i With that, you can use Google Test assertions in addition to the native assertions your testing framework provides, for example:} \par
{\i {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid void TestFooDoesBar() \{\par
  Foo foo;\par
  EXPECT_LE(foo.Bar(1), 100);     // A Google Test assertion.\par
  CPPUNIT_ASSERT(foo.IsEmpty());  // A native assertion.\par
\}\par
}
} \par
{\i If a Google Test assertion fails, it will print an error message and throw an exception, which will be treated as a failure by your host testing framework. If you compile your code with exceptions disabled, a failed Google Test assertion will instead exit your program with a non-zero code, which will also signal a test failure to your test runner.} \par
{\i If you don't write {\f2 ::testing::GTEST_FLAG(throw_on_failure) = true;}  in your {\f2 main()} , you can alternatively enable this feature by specifying the {\f2 --gtest_throw_on_failure}  flag on the command-line or setting the {\f2 GTEST_THROW_ON_FAILURE}  environment variable to a non-zero value.} \par
{\i Death tests are {\i not}  supported when other test framework is used to organize tests.} \par
{\i {\i Availability:}  Linux, Windows, Mac; since v1.3.0.} \par
{\i {\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Distributing Test Functions to Multiple Machines} \par}
} \par
{\i } \par
{\i If you have more than one machine you can use to run a test program, you might want to run the test functions in parallel and get the result faster. We call this technique {\i sharding} , where each machine is called a {\i shard} .} \par
{\i Google Test is compatible with test sharding. To take advantage of this feature, your test runner (not part of Google Test) needs to do the following:} \par
{\i {
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Allocate a number of machines (shards) to run the tests.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_TOTAL_SHARDS}  environment variable to the total number of shards. It must be the same for all shards.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab On each shard, set the {\f2 GTEST_SHARD_INDEX}  environment variable to the index of the shard. Different shards must be assigned different indices, which must be in the range {\f2 [0, GTEST_TOTAL_SHARDS - 1]} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the same test program on all shards. When Google Test sees the above two environment variables, it will select a subset of the test functions to run. Across all shards, each test function in the program will be run exactly once.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Wait for all shards to finish, then collect and report the results.\par}
} \par
{\i Your project may have tests that were written without Google Test and thus don't understand this protocol. In order for your test runner to figure out which test supports sharding, it can set the environment variable {\f2 GTEST_SHARD_STATUS_FILE}  to a non-existent file path. If a test program supports sharding, it will create this file to acknowledge the fact (the actual contents of the file are not important at this time; although we may stick some useful information in it in the future.); otherwise it will not create it.} \par
{\i Here's an example to make it clear. Suppose you have a test program {\f2 foo_test}  that contains the following 5 test functions: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(A, V)\par
TEST(A, W)\par
TEST(B, X)\par
TEST(B, Y)\par
TEST(B, Z)\par
}
 and you have 3 machines at your disposal. To run the test functions in parallel, you would set {\f2 GTEST_TOTAL_SHARDS}  to 3 on all machines, and set {\f2 GTEST_SHARD_INDEX}  to 0, 1, and 2 on the machines respectively. Then you would run the same {\f2 foo_test}  on each machine.} \par
{\i Google Test reserves the right to change how the work is distributed across the shards, but here's one possible scenario:} \par
{\i {
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #0 runs {\f2 A.V}  and {\f2 B.X} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #1 runs {\f2 A.W}  and {\f2 B.Y} .\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Machine #2 runs {\f2 B.Z} .\par}
} \par
{\i {\i Availability:}  Linux, Windows, Mac; since version 1.3.0.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Fusing Google Test Source Files} \par}
} \par
{\i } \par
{\i Google Test's implementation consists of ~30 files (excluding its own tests). Sometimes you may want them to be packaged up in two files (a {\f2 .h}  and a {\f2 .cc} ) instead, such that you can easily copy them to a new machine and start hacking there. For this we provide an experimental Python script {\f2 fuse_gtest_files.py}  in the {\f2 scripts/}  directory (since release 1.3.0). Assuming you have Python 2.4 or above installed on your machine, just go to that directory and run {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid python fuse_gtest_files.py OUTPUT_DIR\par
}
} \par
{\i and you should see an {\f2 OUTPUT_DIR}  directory being created with files {\f2 {\b gtest/gtest.h}}  and {\f2 gtest/gtest-all.cc}  in it. These files contain everything you need to use Google Test. Just copy them to anywhere you want and you are ready to write tests. You can use the {\f2 scripts/test/Makefile} file as an example on how to compile your tests against them.} \par
{\i {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
} \par
{\i } \par
{\i Congratulations! You've now learned more advanced Google Test tools and are ready to tackle more complex testing tasks. If you want to dive even deeper, you can read the Frequently-Asked Questions. } \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_7_Documentation{\tc \v V1_7_Documentation}\par \pard\plain 
{\bkmkstart AAAAAAAEOH}
{\bkmkend AAAAAAAEOH}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This page lists all documentation wiki pages for Google Test **(the SVN trunk version)** \'96 {\b if you use a released version of Google Test, please read the documentation for that specific version instead.} \par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Primer \'96 start here if you are new to Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Samples \'96 learn from examples.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
AdvancedGuide \'96 learn more about Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
XcodeGuide \'96 how to use Google Test in Xcode on Mac.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Frequently-Asked Questions \'96 check here before asking a question on the mailing list.\par}
To contribute code to Google Test, read:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
DevGuide \'96 read this {\i before}  writing your first patch.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
PumpManual \'96 how we generate some of Google Test's source files. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_7_FAQ{\tc \v V1_7_FAQ}\par \pard\plain 
{\bkmkstart AAAAAAAEOI}
{\bkmkend AAAAAAAEOI}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you cannot find the answer to your question here, and you have read Primer and AdvancedGuide, send it to {\f2 googletestframework@googlegroups.com}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I use Google Test instead of my favorite C++ testing framework?} \par}
First, let us say clearly that we don't want to get into the debate of which C++ testing framework is {\b the best} . There exist many fine frameworks for writing C++ tests, and we have tremendous respect for the developers and users of them. We don't think there is (or will be) a single best framework - you have to pick the right tool for the particular task you are tackling.\par
We created Google Test because we couldn't find the right combination of features and conveniences in an existing framework to satisfy {\i our}  needs. The following is a list of things that {\i we}  like about Google Test. We don't claim them to be unique to Google Test - rather, the combination of them makes Google Test the choice for us. We hope this list can help you decide whether it is for you too.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test is designed to be portable: it doesn't require exceptions or RTTI; it works around various bugs in various compilers and environments; etc. As a result, it works on Linux, Mac OS X, Windows and several embedded operating systems.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Nonfatal assertions ({\f2 EXPECT_*} ) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
It's easy to write assertions that generate informative messages: you just use the stream syntax to append any additional information, e.g. {\f2 ASSERT_EQ(5, Foo(i)) << " where i = " << i;} . It doesn't require a new set of macros or special functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test automatically detects your tests and doesn't require you to enumerate them in order to run them.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Death tests are pretty handy for ensuring that your asserts in production code are triggered by the right conditions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 SCOPED_TRACE}  helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You can decide which tests to run using name patterns. This saves time when you want to quickly reproduce a test failure.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Google Test can generate XML test result reports that can be parsed by popular continuous build system like Hudson.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Simple things are easy in Google Test, while hard things are possible: in addition to advanced features like {\f2 global test environments} and tests parameterized by {\f2 values} or {\f2 types}, Google Test supports various ways for the user to extend the framework \'96 if Google Test doesn't do something out of the box, chances are that a user can implement the feature using Google Test's public API, without changing Google Test itself. In particular, you can:{
\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
expand your testing vocabulary by defining {\f2 custom predicates},\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
teach Google Test how to {\f2 print your types},\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
define your own testing macros or utilities and verify them using Google Test's {\f2 Service Provider Interface}, and\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
reflect on the test cases or change the test output format by intercepting the {\f2 test events}.\par}
\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I'm getting warnings when compiling Google Test. Would you fix them?} \par}
We strive to minimize compiler warnings Google Test generates. Before releasing a new version, we test to make sure that it doesn't generate warnings when compiled using its CMake script on Windows, Linux, and Mac OS.\par
Unfortunately, this doesn't mean you are guaranteed to see no warnings when compiling Google Test in your environment:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You may be using a different compiler as we use, or a different version of the same compiler. We cannot possibly test for all compilers.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
You may be compiling on a different platform as we do.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Your project may be using different compiler flags as we do.\par}
It is not always possible to make Google Test warning-free for everyone. Or, it may not be desirable if the warning is rarely enabled and fixing the violations makes the code more complex.\par
If you see warnings when compiling Google Test, we suggest that you use the {\f2 -isystem}  flag (assuming your are using GCC) to mark Google Test headers as system headers. That'll suppress warnings from Google Test headers.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should not test case names and test names contain underscore?} \par}
Underscore ({\f2 _} ) is special, as C++ reserves the following to be used by the compiler and the standard library:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab any identifier that starts with an {\f2 _}  followed by an upper-case letter, and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab any identifier that containers two consecutive underscores (i.e. {\f2 __} ) {\i anywhere}  in its name.\par}
User code is {\i prohibited}  from using such identifiers.\par
Now let's look at what this means for {\f2 TEST}  and {\f2 TEST_F} .\par
Currently {\f2 TEST(TestCaseName, TestName)}  generates a class named {\f2 TestCaseName_TestName_Test} . What happens if {\f2 TestCaseName}  or {\f2 TestName}  contains {\f2 _} ?\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestCaseName}  starts with an {\f2 _}  followed by an upper-case letter (say, {\f2 _Foo} ), we end up with {\f2 _Foo_TestName_Test} , which is reserved and thus invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestCaseName}  ends with an {\f2 _}  (say, {\f2 Foo_} ), we get {\f2 Foo__TestName_Test} , which is invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestName}  starts with an {\f2 _}  (say, {\f2 _Bar} ), we get {\f2 TestCaseName__Bar_Test} , which is invalid.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If {\f2 TestName}  ends with an {\f2 _}  (say, {\f2 Bar_} ), we get {\f2 TestCaseName_Bar__Test} , which is invalid.\par}
So clearly {\f2 TestCaseName}  and {\f2 TestName}  cannot start or end with {\f2 _}  (Actually, {\f2 TestCaseName}  can start with {\f2 _}  \'96 as long as the {\f2 _}  isn't followed by an upper-case letter. But that's getting complicated. So for simplicity we just say that it cannot start with {\f2 _} .).\par
It may seem fine for {\f2 TestCaseName}  and {\f2 TestName}  to contain {\f2 _}  in the middle. However, consider this: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(Time, Flies_Like_An_Arrow) \{ ... \}\par
TEST(Time_Flies, Like_An_Arrow) \{ ... \}\par
}
\par
Now, the two {\f2 TEST} s will both generate the same class ({\f2 Time_Files_Like_An_Arrow_Test} ). That's not good.\par
So for simplicity, we just ask the users to avoid {\f2 _}  in {\f2 TestCaseName}  and {\f2 TestName} . The rule is more constraining than necessary, but it's simple and easy to remember. It also gives Google Test some wiggle room in case its implementation needs to change in the future.\par
If you violate the rule, there may not be immediately consequences, but your test may (just may) break with a new compiler (or a new version of the compiler you are using) or with a new version of Google Test. Therefore it's best to follow the rule.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why is it not recommended to install a pre-compiled copy of Google Test (for example, into /usr/local)?} \par}
In the early days, we said that you could install compiled Google Test libraries on {\f2 *} nix systems using {\f2 make install} . Then every user of your machine can write tests without recompiling Google Test.\par
This seemed like a good idea, but it has a got-cha: every user needs to compile his tests using the {\i same}  compiler flags used to compile the installed Google Test libraries; otherwise he may run into undefined behaviors (i.e. the tests can behave strangely and may even crash for no obvious reasons).\par
Why? Because C++ has this thing called the One-Definition Rule: if two C++ source files contain different definitions of the same class/function/variable, and you link them together, you violate the rule. The linker may or may not catch the error (in many cases it's not required by the C++ standard to catch the violation). If it doesn't, you get strange run-time behaviors that are unexpected and hard to debug.\par
If you compile Google Test and your test code using different compiler flags, they may see different definitions of the same class/function/variable (e.g. due to the use of {\f2 #if}  in Google Test). Therefore, for your sanity, we recommend to avoid installing pre-compiled Google Test libraries. Instead, each project should compile Google Test itself such that it can be sure that the same flags are used for both Google Test and the tests.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I generate 64-bit binaries on Windows (using Visual Studio 2008)?} \par}
(Answered by Trevor Robinson)\par
Load the supplied Visual Studio solution file, either {\f2 msvc\\gtest-md.sln}  or {\f2 msvc\\gtest.sln} . Go through the migration wizard to migrate the solution and project files to Visual Studio 2008. Select {\f2 Configuration Manager...}  from the {\f2 Build}  menu. Select {\f2 <New...>}  from the {\f2 Active solution platform}  dropdown. Select {\f2 x64}  from the new platform dropdown, leave {\f2 Copy settings from}  set to {\f2 Win32}  and {\f2 Create new project platforms}  checked, then click {\f2 OK} . You now have {\f2 Win32}  and {\f2 x64}  platform configurations, selectable from the {\f2 Standard}  toolbar, which allow you to toggle between building 32-bit or 64-bit binaries (or both at once using Batch Build).\par
In order to prevent build output files from overwriting one another, you'll need to change the {\f2 Intermediate Directory}  settings for the newly created platform configuration across all the projects. To do this, multi-select (e.g. using shift-click) all projects (but not the solution) in the {\f2 Solution Explorer} . Right-click one of them and select {\f2 Properties} . In the left pane, select {\f2 Configuration Properties} , and from the {\f2 Configuration}  dropdown, select {\f2 All Configurations} . Make sure the selected platform is {\f2 x64} . For the {\f2 Intermediate Directory}  setting, change the value from {\f2 \\}  to {\f2 \\} . Click {\f2 OK}  and then build the solution. When the build is complete, the 64-bit binaries will be in the {\f2 msvc\\x64\\Debug}  directory.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I use Google Test on MinGW?} \par}
We haven't tested this ourselves, but Per Abrahamsen reported that he was able to compile and install Google Test successfully when using MinGW from Cygwin. You'll need to configure it with:\par
{\f2 PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"} \par
You should be able to replace the {\f2 -mno-cygwin}  option with direct links to the real MinGW binaries, but we haven't tried that.\par
Caveats:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
There are many warnings when compiling.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 make check}  will produce some errors as not all tests for Google Test itself are compatible with MinGW.\par}
We also have reports on successful cross compilation of Google Test MinGW binaries on Linux using {\f2 these instructions} on the WxWidgets site.\par
Please contact {\f2 googletestframework@googlegroups.com}  if you are interested in improving the support for MinGW.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test support EXPECT_EQ(NULL, ptr) and ASSERT_EQ(NULL, ptr) but not EXPECT_NE(NULL, ptr) and ASSERT_NE(NULL, ptr)?} \par}
Due to some peculiarity of C++, it requires some non-trivial template meta programming tricks to support using {\f2 NULL}  as an argument of the {\f2 EXPECT_XX()}  and {\f2 ASSERT_XX()}  macros. Therefore we only do it where it's most needed (otherwise we make the implementation of Google Test harder to maintain and more error-prone than necessary).\par
The {\f2 EXPECT_EQ()}  macro takes the {\i expected}  value as its first argument and the {\i actual}  value as the second. It's reasonable that someone wants to write {\f2 EXPECT_EQ(NULL, some_expression)} , and this indeed was requested several times. Therefore we implemented it.\par
The need for {\f2 EXPECT_NE(NULL, ptr)}  isn't nearly as strong. When the assertion fails, you already know that {\f2 ptr}  must be {\f2 NULL} , so it doesn't add any information to print ptr in this case. That means {\f2 EXPECT_TRUE(ptr != NULL)}  works just as well.\par
If we were to support {\f2 EXPECT_NE(NULL, ptr)} , for consistency we'll have to support {\f2 EXPECT_NE(ptr, NULL)}  as well, as unlike {\f2 EXPECT_EQ} , we don't have a convention on the order of the two arguments for {\f2 EXPECT_NE} . This means using the template meta programming tricks twice in the implementation, making it even harder to understand and maintain. We believe the benefit doesn't justify the cost.\par
Finally, with the growth of Google {\b Mock}'s {\f2 matcher} library, we are encouraging people to use the unified {\f2 EXPECT_THAT(value, matcher)}  syntax more often in tests. One significant advantage of the matcher approach is that matchers can be easily combined to form new matchers, while the {\f2 EXPECT_NE} , etc, macros cannot be easily combined. Therefore we want to invest more in the matchers than in the {\f2 EXPECT_XX()}  macros.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Does Google Test support running tests in parallel?} \par}
Test runners tend to be tightly coupled with the build/test environment, and Google Test doesn't try to solve the problem of running tests in parallel. Instead, we tried to make Google Test work nicely with test runners. For example, Google Test's XML report contains the time spent on each test, and its {\f2 gtest_list_tests}  and {\f2 gtest_filter}  flags can be used for splitting the execution of test methods into multiple processes. These functionalities can help the test runner run the tests in parallel.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't Google Test run the tests in different threads to speed things up?} \par}
It's difficult to write thread-safe code. Most tests are not written with thread-safety in mind, and thus may not work correctly in a multi-threaded setting.\par
If you think about it, it's already hard to make your code work when you know what other threads are doing. It's much harder, and sometimes even impossible, to make your code work when you don't know what other threads are doing (remember that test methods can be added, deleted, or modified after your test was written). If you want to run the tests in parallel, you'd better run them in different processes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why aren't Google Test assertions implemented using exceptions?} \par}
Our original motivation was to be able to use Google Test in projects that disable exceptions. Later we realized some additional benefits of this approach:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Throwing in a destructor is undefined behavior in C++. Not using exceptions means Google Test's assertions are safe to use in destructors.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The {\f2 EXPECT_*}  family of macros will continue even after a failure, allowing multiple failures in a {\f2 TEST}  to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If assertions are implemented using exceptions, a test may falsely ignore a failure if it's caught by user code: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid try \{ ... ASSERT_TRUE(...) ... \}\par
catch (...) \{ ... \}\par
}
 The above code will pass even if the {\f2 ASSERT_TRUE}  throws. While it's unlikely for someone to write this in a test, it's possible to run into this pattern when you write assertions in callbacks that are called by the code under test.\par}
The downside of not using exceptions is that {\f2 ASSERT_*}  (implemented using {\f2 return} ) will only abort the current function, not the current {\f2 TEST} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why do we use two different macros for tests with and without fixtures?} \par}
Unfortunately, C++'s macro system doesn't allow us to use the same macro for both cases. One possibility is to provide only one macro for tests with fixtures, and require the user to define an empty fixture sometimes:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{\};\par
\par
TEST_F(FooTest, DoesThis) \{ ... \}\par
}
 or {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef ::testing::Test FooTest;\par
\par
TEST_F(FooTest, DoesThat) \{ ... \}\par
}
\par
Yet, many people think this is one line too many. :-) Our goal was to make it really easy to write tests, so we tried to make simple tests trivial to create. That means using a separate macro for such tests.\par
We think neither approach is ideal, yet either of them is reasonable. In the end, it probably doesn't matter much either way.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why don't we use structs as test fixtures?} \par}
We like to use structs only when representing passive data. This distinction between structs and classes is good for documenting the intent of the code's author. Since test fixtures have logic like {\f2 SetUp()}  and {\f2 TearDown()} , they are better defined as classes.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why are death tests implemented as assertions instead of using a test runner?} \par}
Our goal was to make death tests as convenient for a user as C++ possibly allows. In particular:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect. The death test would be written in C++, while the runner spec may or may not be. A user needs to carefully keep the two in sync. {\f2 ASSERT_DEATH(statement, expected_message)}  specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can be mixed with other assertions and other logic at your will. You are not limited to one death test per test method. For example, you can write something like: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if (FooCondition()) \{\par
  ASSERT_DEATH(Bar(), "blah");\par
\} else \{\par
  ASSERT_EQ(5, Bar());\par
\}\par
}
 If you prefer one death test per test method, you can write your tests in that style too, but we don't want to impose that on the users. The fewer artificial limitations the better.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 ASSERT_DEATH}  can reference local variables in the current function, and you can decide how many death tests you want based on run-time information. For example, {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int count = GetCount();  // Only known at run time.\par
for (int i = 1; i <= count; i++) \{\par
  ASSERT_DEATH(\{\par
    double* buffer = new double[i];\par
    ... initializes buffer ...\par
    Foo(buffer, i)\par
  \}, "blah blah");\par
\}\par
}
 The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.\par}
Another interesting thing about {\f2 ASSERT_DEATH}  is that it calls {\f2 fork()}  to create a child process to run the death test. This is lightening fast, as {\f2 fork()}  uses copy-on-write pages and incurs almost zero overhead, and the child process starts from the user-supplied statement directly, skipping all global and local initialization and any code leading to the given statement. If you launch the child process from scratch, it can take seconds just to load everything and start running if the test links to many libraries dynamically.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test modifies some state, but the change seems lost after the death test finishes. Why?} \par}
Death tests ({\f2 EXPECT_DEATH} , etc) are executed in a sub-process s.t. the expected crash won't kill the test program (i.e. the parent process). As a result, any in-memory side effects they incur are observable in their respective sub-processes, but not in the parent process. You can think of them as running in a parallel universe, more or less.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "undefined references" to some static const member variables, but I did define them in the class body. What's wrong?} \par}
If your class has a static data member:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
  static const int kBar = 100;\par
\};\par
}
\par
You also need to define it {\i outside}  of the class body in {\f2 foo.cc} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid const int Foo::kBar;  // No initializer here.\par
}
\par
Otherwise your code is **invalid C++**, and may break in unexpected ways. In particular, using it in Google Test comparison assertions ({\f2 EXPECT_EQ} , etc) will generate an "undefined reference" linker error.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have an interface that has several implementations. Can I write a set of tests once and repeat them over all the implementations?} \par}
Google Test doesn't yet have good support for this kind of tests, or data-driven tests in general. We hope to be able to make improvements in this area soon.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Can I derive a test fixture from another?} \par}
Yes.\par
Each test fixture has a corresponding and same named test case. This means only one test case can use a particular fixture. Sometimes, however, multiple test cases may want to use the same or slightly different fixtures. For example, you may want to make sure that all of a GUI library's test cases don't leak important system resources like fonts and brushes.\par
In Google Test, you share a fixture among test cases by putting the shared logic in a base test fixture, then deriving from that base a separate fixture for each test case that wants to use this common logic. You then use {\f2 {\b TEST_F()}}  to write tests using each derived fixture.\par
Typically, your code looks like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Defines a base test fixture.\par
class BaseTest : public ::testing::Test \{\par
  protected:\par
   ...\par
\};\par
\par
// Derives a fixture FooTest from BaseTest.\par
class FooTest : public BaseTest \{\par
  protected:\par
    virtual void SetUp() \{\par
      BaseTest::SetUp();  // Sets up the base fixture first.\par
      ... additional set-up work ...\par
    \}\par
    virtual void TearDown() \{\par
      ... clean-up work for FooTest ...\par
      BaseTest::TearDown();  // Remember to tear down the base fixture\par
                             // after cleaning up FooTest!\par
    \}\par
    ... functions and variables for FooTest ...\par
\};\par
\par
// Tests that use the fixture FooTest.\par
TEST_F(FooTest, Bar) \{ ... \}\par
TEST_F(FooTest, Baz) \{ ... \}\par
\par
... additional fixtures derived from BaseTest ...\par
}
\par
If necessary, you can continue to derive test fixtures from a derived fixture. Google Test has no limit on how deep the hierarchy can be.\par
For a complete example using derived test fixtures, see {\f2 sample5}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains "void value not ignored as it ought to be." What does this mean?} \par}
You're probably using an {\f2 ASSERT_*()}  in a function that doesn't return {\f2 void} . {\f2 ASSERT_*()}  can only be used in {\f2 void}  functions.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My death test hangs (or seg-faults). How do I fix it?} \par}
In Google Test, death tests are run in a child process and the way they work is delicate. To write death tests you really need to understand how they work. Please make sure you have read this.\par
In particular, death tests don't like having multiple threads in the parent process. So the first thing you can try is to eliminate creating threads outside of {\f2 EXPECT_DEATH()} .\par
Sometimes this is impossible as some library you must use may be creating threads before {\f2 main()}  is even reached. In this case, you can try to minimize the chance of conflicts by either moving as many activities as possible inside {\f2 EXPECT_DEATH()}  (in the extreme case, you want to move everything inside), or leaving as few things as possible in it. Also, you can try to set the death test style to {\f2 "threadsafe"} , which is safer but slower, and see if it helps.\par
If you go with thread-safe death tests, remember that they rerun the test program from the beginning in the child process. Therefore make sure your program can run side-by-side with itself and is deterministic.\par
In the end, this boils down to good concurrent programming. You have to make sure that there is no race conditions or dead locks in your program. No silver bullet - sorry!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Should I use the constructor/destructor of the test fixture or the set-up/tear-down function?} \par}
The first thing to remember is that Google Test does not reuse the same test fixture object across multiple tests. For each {\f2 TEST_F} , Google Test will create a fresh test fixture object, {\i immediately}  call {\f2 SetUp()} , run the test, call {\f2 TearDown()} , and then {\i immediately}  delete the test fixture object. Therefore, there is no need to write a {\f2 SetUp()}  or {\f2 TearDown()}  function if the constructor or destructor already does the job.\par
You may still want to use {\f2 SetUp()/TearDown()}  in the following cases:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the tear-down operation could throw an exception, you must use {\f2 TearDown()}  as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer {\f2 TearDown()}  if you want to write portable tests that work with or without exceptions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The assertion macros throw an exception when flag {\f2 --gtest_throw_on_failure}  is specified. Therefore, you shouldn't use Google Test assertions in a destructor if you plan to run your tests with this flag.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In a constructor or destructor, you cannot make a virtual function call on this object. (You can call a method declared as virtual, but it will be statically bound.) Therefore, if you need to call a method that will be overriden in a derived class, you have to use {\f2 SetUp()/TearDown()} .\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains "no matching function to call" when I use ASSERT_PREDn. How do I fix it?} \par}
If the predicate function you use in {\f2 ASSERT_PRED*}  or {\f2 EXPECT_PRED*}  is overloaded or a template, the compiler will have trouble figuring out which overloaded version it should use. {\f2 ASSERT_PRED_FORMAT*}  and {\f2 EXPECT_PRED_FORMAT*}  don't have this problem.\par
If you see this error, you might want to switch to {\f2 (ASSERT|EXPECT)_PRED_FORMAT*} , which will also give you a better failure message. If, however, that is not an option, you can resolve the problem by explicitly telling the compiler which version to pick.\par
For example, suppose you have\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid bool IsPositive(int n) \{\par
  return n > 0;\par
\}\par
bool IsPositive(double x) \{\par
  return x > 0;\par
\}\par
}
\par
you will get a compiler error if you write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(IsPositive, 5);\par
}
\par
However, this will work:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid EXPECT_PRED1(*static_cast<bool (*)(int)>*(IsPositive), 5);\par
}
\par
(The stuff inside the angled brackets for the {\f2 static_cast}  operator is the type of the function pointer for the {\f2 int} -version of {\f2 IsPositive()} .)\par
As another example, when you have a template function\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename T>\par
bool IsNegative(T x) \{\par
  return x < 0;\par
\}\par
}
\par
you can use it in a predicate assertion like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED1(IsNegative*<int>*, -5);\par
}
\par
Things are more interesting if your template has more than one parameters. The following won't compile:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*GreaterThan<int, int>*, 5, 0);\par
}
\par
as the C++ pre-processor thinks you are giving {\f2 ASSERT_PRED2}  4 arguments, which is one more than expected. The workaround is to wrap the predicate function in parentheses:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_PRED2(*(GreaterThan<int, int>)*, 5, 0);\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains about "ignoring return value" when I call RUN_ALL_TESTS(). Why?} \par}
Some people had been ignoring the return value of {\f2 RUN_ALL_TESTS()} . That is, instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid return RUN_ALL_TESTS();\par
}
\par
they write\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid RUN_ALL_TESTS();\par
}
\par
This is wrong and dangerous. A test runner needs to see the return value of {\f2 RUN_ALL_TESTS()}  in order to determine if a test has passed. If your {\f2 main()}  function ignores it, your test will be considered successful even if it has a Google Test assertion failure. Very bad.\par
To help the users avoid this dangerous bug, the implementation of {\f2 RUN_ALL_TESTS()}  causes gcc to raise this warning, when the return value is ignored. If you see this warning, the fix is simple: just make sure its value is used as the return value of {\f2 main()} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My compiler complains that a constructor (or destructor) cannot return a value. What's going on?} \par}
Due to a peculiarity of C++, in order to support the syntax for streaming messages to an {\f2 ASSERT_*} , e.g.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(1, Foo()) << "blah blah" << foo;\par
}
\par
we had to give up using {\f2 ASSERT*}  and {\f2 FAIL*}  (but not {\f2 EXPECT*}  and {\f2 ADD_FAILURE*} ) in constructors and destructors. The workaround is to move the content of your constructor/destructor to a private void member function, or switch to {\f2 EXPECT_*()}  if that works. This section in the user's guide explains it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My set-up function is not called. Why?} \par}
C++ is case-sensitive. It should be spelled as {\f2 SetUp()} . Did you spell it as {\f2 Setup()} ?\par
Similarly, sometimes people spell {\f2 SetUpTestCase()}  as {\f2 SetupTestCase()}  and wonder why it's never called.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I jump to the line of a failure in Emacs directly?} \par}
Google Test's failure message format is understood by Emacs and many other IDEs, like acme and XCode. If a Google Test message is in a compilation buffer in Emacs, then it's clickable. You can now hit {\f2 enter}  on a message to jump to the corresponding source code, or use {\f2 C-x} ` to jump to the next failure.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have several test cases which share the same test fixture logic, do I have to define a new test fixture class for each of them? This seems pretty tedious.} \par}
You don't have to. Instead of\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public BaseTest \{\};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
class BarTest : public BaseTest \{\};\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
you can simply {\f2 typedef}  the test fixtures: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid typedef BaseTest FooTest;\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef BaseTest BarTest;\par
\par
TEST_F(BarTest, Abc) \{ ... \}\par
TEST_F(BarTest, Def) \{ ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The Google Test output is buried in a whole bunch of log messages. What do I do?} \par}
The Google Test output is meant to be a concise and human-friendly report. If your test generates textual output itself, it will mix with the Google Test output, making it hard to read. However, there is an easy solution to this problem.\par
Since most log messages go to stderr, we decided to let Google Test output go to stdout. This way, you can easily separate the two using redirection. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ./my_test > googletest_output.txt\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why should I prefer test fixtures over global variables?} \par}
There are several good reasons:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab It's likely your test needs to change the states of its global variables. This makes it difficult to keep side effects from escaping one test and contaminating others, making debugging difficult. By using fixtures, each test has a fresh set of variables that's different (but with the same names). Thus, tests are kept independent of each other.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Global variables pollute the global namespace.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Test fixtures can be reused via subclassing, which cannot be done easily with global variables. This is useful if many test cases have something in common.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class members without writing FRIEND_TEST()s?} \par}
You should try to write testable code, which means classes should be easily tested from their public interface. One way to achieve this is the Pimpl idiom: you move all private members of a class into a helper class, and make all members of the helper class public.\par
You have several other options that don't require using {\f2 FRIEND_TEST} :{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Write the tests as members of the fixture class: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  void Test1() \{...\} // This accesses private members of class Foo.\par
  void Test2() \{...\} // So does this one.\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  Test1();\par
\}\par
\par
TEST_F(FooTest, Test2) \{\par
  Test2();\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
In the fixture class, write accessors for the tested class' private members, then use the accessors in your tests: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class Foo \{\par
  friend class FooTest;\par
  ...\par
\};\par
\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  ...\par
  T1 get_private_member1(Foo* obj) \{\par
    return obj->private_member1_;\par
  \}\par
\};\par
\par
TEST_F(FooTest, Test1) \{\par
  ...\par
  get_private_member1(x)\par
  ...\par
\}\par
}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If the methods are declared {\b protected} , you can change their access level in a test-only subclass: {
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class YourClass \{\par
  ...\par
 protected: // protected access for testability.\par
  int DoSomethingReturningInt();\par
  ...\par
\};\par
\par
// in the your_class_test.cc file:\par
class TestableYourClass : public YourClass \{\par
  ...\par
 public: using YourClass::DoSomethingReturningInt; // changes access rights\par
  ...\par
\};\par
\par
TEST_F(YourClassTest, DoSomethingTest) \{\par
  TestableYourClass obj;\par
  assertEquals(expected_value, obj.DoSomethingReturningInt());\par
\}\par
}
\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test private class static members without writing FRIEND_TEST()s?} \par}
We find private static methods clutter the header file. They are implementation details and ideally should be kept out of a .h. So often I make them free functions instead.\par
Instead of: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
 private:\par
  static bool Func(int n);\par
\};\par
\par
// foo.cc\par
bool Foo::Func(int n) \{ ... \}\par
\par
// foo_test.cc\par
EXPECT_TRUE(Foo::Func(12345));\par
}
\par
You probably should better write: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // foo.h\par
class Foo \{\par
  ...\par
\};\par
\par
// foo.cc\par
namespace internal \{\par
  bool Func(int n) \{ ... \}\par
\}\par
\par
// foo_test.cc\par
namespace internal \{\par
  bool Func(int n);\par
\}\par
\par
EXPECT_TRUE(internal::Func(12345));\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I would like to run a test several times with different parameters. Do I need to write several similar copies of it?} \par}
No. You can use a feature called {\f2 value-parameterized tests} which lets you repeat your tests with different parameters, without defining it more than once.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I test a file that defines main()?} \par}
To test a {\f2 foo.cc}  file, you need to compile and link it into your unit test program. However, when the file contains a definition for the {\f2 main()}  function, it will clash with the {\f2 main()}  of your unit test, and will result in a build error.\par
The right solution is to split it into three files:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.h}  which contains the declarations,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo.cc}  which contains the definitions except {\f2 main()} , and\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 foo_main.cc}  which contains nothing but the definition of {\f2 main()} .\par}
Then {\f2 foo.cc}  can be easily tested.\par
If you are adding tests to an existing file and don't want an intrusive change like this, there is a hack: just include the entire {\f2 foo.cc}  file in your unit test. For example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // File foo_unittest.cc\par
\par
// The headers section\par
...\par
\par
// Renames main() in foo.cc to make room for the unit test main()\par
#define main FooMain\par
\par
#include "a/b/foo.cc"\par
\par
// The tests start here.\par
...\par
}
\par
However, please remember this is a hack and should only be used as the last resort.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What can the statement argument in ASSERT_DEATH() be?} \par}
{\f2 ASSERT_DEATH(_statement_, _regex_)}  (or any death assertion macro) can be used wherever {\f2 _statement_}  is valid. So basically {\f2 _statement_}  can be any C++ statement that makes sense in the current context. In particular, it can reference global and/or local variables, and can be:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a simple function call (often the case),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a complex expression, or\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
a compound statement.\par}
{\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Some examples are shown here: \par
}{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // A death test can be a simple function call.\par
TEST(MyDeathTest, FunctionCall) \{\par
  ASSERT_DEATH(Xyz(5), "Xyz failed");\par
\}\par
\par
// Or a complex expression that references variables and functions.\par
TEST(MyDeathTest, ComplexExpression) \{\par
  const bool c = Condition();\par
  ASSERT_DEATH((c ? Func1(0) : object2.Method("test")),\par
               "(Func1|Method) failed");\par
\}\par
\par
// Death assertions can be used any where in a function. In\par
// particular, they can be inside a loop.\par
TEST(MyDeathTest, InsideLoop) \{\par
  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\par
  for (int i = 0; i < 5; i++) \{\par
    EXPECT_DEATH_M(Foo(i), "Foo has \\\\d+ errors",\par
                   ::testing::Message() << "where i is " << i);\par
  \}\par
\}\par
\par
// A death assertion can contain a compound statement.\par
TEST(MyDeathTest, CompoundStatement) \{\par
  // Verifies that at lease one of Bar(0), Bar(1), ..., and\par
  // Bar(4) dies.\par
  ASSERT_DEATH(\{\par
    for (int i = 0; i < 5; i++) \{\par
      Bar(i);\par
    \}\par
  \},\par
  "Bar has \\\\d+ errors");\}\par
}
\par
{\f2 googletest_unittest.cc}  contains more examples if you are interested.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 What syntax does the regular expression in ASSERT_DEATH use?} \par}
On POSIX systems, Google Test uses the POSIX Extended regular expression syntax ({\f2 http://en.wikipedia.org/wiki/Regular_expression#POSIX_Extended_Regular_Expressions}). On Windows, it uses a limited variant of regular expression syntax. For more details, see the {\f2 regular expression syntax}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I have a fixture class Foo, but TEST_F(Foo, Bar) gives me error "no matching function for call to Foo::Foo()". Why?} \par}
Google Test needs to be able to create objects of your test fixture class, so it must have a default constructor. Normally the compiler will define one for you. However, there are cases where you have to define your own:{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If you explicitly declare a non-default constructor for class {\f2 Foo} , then you need to define a default constructor, even if it would be empty.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If {\f2 Foo}  has a const non-static data member, then you have to define the default constructor {\i and}  initialize the const member in the initializer list of the constructor. (Early versions of {\f2 gcc}  doesn't force you to initialize the const member. It's a bug that has been fixed in {\f2 gcc 4} .)\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does ASSERT_DEATH complain about previous threads that were already joined?} \par}
With the Linux pthread library, there is no turning back once you cross the line from single thread to multiple threads. The first time you create a thread, a manager thread is created in addition, so you get 3, not 2, threads. Later when the thread you create joins the main thread, the thread count decrements by 1, but the manager thread will never be killed, so you still have 2 threads, which means you cannot safely run a death test.\par
The new NPTL thread library doesn't suffer from this problem, as it doesn't create a manager thread. However, if you don't control which machine your test runs on, you shouldn't depend on this.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Why does Google Test require the entire test case, instead of individual tests, to be named FOODeathTest when it uses ASSERT_DEATH?} \par}
Google Test does not interleave tests from different test cases. That is, it runs all tests in one test case first, and then runs all tests in the next test case, and so on. Google Test does this because it needs to set up a test case before the first test in it is run, and tear it down afterwords. Splitting up the test case would require multiple set-up and tear-down processes, which is inefficient and makes the semantics unclean.\par
If we were to determine the order of tests based on test name instead of test case name, then we would have a problem with the following situation:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(FooTest, AbcDeathTest) \{ ... \}\par
TEST_F(FooTest, Uvw) \{ ... \}\par
\par
TEST_F(BarTest, DefDeathTest) \{ ... \}\par
TEST_F(BarTest, Xyz) \{ ... \}\par
}
\par
Since {\f2 FooTest.AbcDeathTest}  needs to run before {\f2 BarTest.Xyz} , and we don't interleave tests from different test cases, we need to run all tests in the {\f2 {\b FooTest}}  case before running any test in the {\f2 BarTest}  case. This contradicts with the requirement to run {\f2 BarTest.DefDeathTest}  before {\f2 FooTest.Uvw} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do?} \par}
You don't have to, but if you like, you may split up the test case into {\f2 {\b FooTest}}  and {\f2 FooDeathTest} , where the names make it clear that they are related:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class FooTest : public ::testing::Test \{ ... \};\par
\par
TEST_F(FooTest, Abc) \{ ... \}\par
TEST_F(FooTest, Def) \{ ... \}\par
\par
typedef FooTest FooDeathTest;\par
\par
TEST_F(FooDeathTest, Uvw) \{ ... EXPECT_DEATH(...) ... \}\par
TEST_F(FooDeathTest, Xyz) \{ ... ASSERT_DEATH(...) ... \}\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 The compiler complains about "no match for 'operator<<'" when I use an assertion. What gives?} \par}
If you use a user-defined type {\f2 FooType}  in an assertion, you must make sure there is an {\f2 std::ostream& operator<<(std::ostream&, const FooType&)}  function defined such that we can print a value of {\f2 FooType} .\par
In addition, if {\f2 FooType}  is declared in a name space, the {\f2 <<}  operator also needs to be defined in the {\i same}  name space.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I suppress the memory leak messages on Windows?} \par}
Since the statically initialized Google Test singleton requires allocations on the heap, the Visual C++ memory leak detector will report memory leaks at the end of the program run. The easiest way to avoid this is to use the {\f2 _CrtMemCheckpoint}  and {\f2 _CrtMemDumpAllObjectsSince}  calls to not report any statically initialized heap objects. See MSDN for more details and additional heap check/debug routines.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I am building my project with Google Test in Visual Studio and all I'm getting is a bunch of linker errors (or warnings). Help!} \par}
You may get a number of the following linker error or warnings if you attempt to link your test project with the Google Test library when your project and the are not built using the same compiler settings.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK2005: symbol already defined in object\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4217: locally defined symbol 'symbol' imported in function 'function'\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
LNK4049: locally defined symbol 'symbol' imported\par}
The Google Test project (gtest.vcproj) has the Runtime Library option set to /MT (use multi-threaded static libraries, /MTd for debug). If your project uses something else, for example /MD (use multi-threaded DLLs, /MDd for debug), you need to change the setting in the Google Test project to match your project's.\par
To update this setting open the project properties in the Visual Studio IDE then select the branch Configuration Properties | C/C++ | Code Generation and change the option "Runtime Library". You may also try using gtest-md.vcproj instead of gtest.vcproj.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I put my tests in a library and Google Test doesn't run them. What's happening?} \par}
Have you read a {\f2 warning} on the Google Test Primer page?\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I want to use Google Test with Visual Studio but don't know where to start.} \par}
Many people are in your position and one of the posted his solution to our mailing list. Here is his link: {\f2 http://hassanjamilahmad.blogspot.com/2009/07/gtest-starters-help.html}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 I am seeing compile errors mentioning std::type_traits when I try to use Google Test on Solaris.} \par}
Google Test uses parts of the standard C++ library that SunStudio does not support. Our users reported success using alternative implementations. Try running the build after runing this commad:\par
`export CC=cc CXX=CC CXXFLAGS='-library=stlport4'`\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How can my code detect if it is running in a test?} \par}
If you write code that sniffs whether it's running in a test and does different things accordingly, you are leaking test-only logic into production code and there is no easy way to ensure that the test-only code paths aren't run by mistake in production. Such cleverness also leads to {\f2 Heisenbugs}. Therefore we strongly advise against the practice, and Google Test doesn't provide a way to do it.\par
In general, the recommended way to cause the code to behave differently under test is {\f2 dependency injection}. You can inject different functionality from the test and from the production code. Since your production code doesn't link in the for-test logic at all, there is no danger in accidentally running it.\par
However, if you {\i really} , {\i really} , {\i really}  have no choice, and if you follow the rule of ending your test program names with {\f2 _test} , you can use the {\i horrible}  hack of sniffing your executable name ({\f2 argv[0]}  in {\f2 main()} ) to know whether the code is under test.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Google Test defines a macro that clashes with one defined by another library. How do I deal with that?} \par}
In C++, macros don't obey namespaces. Therefore two libraries that both define a macro of the same name will clash if you {\f2 #include}  both definitions. In case a Google Test macro clashes with another library, you can force Google Test to rename its macro to avoid the conflict.\par
Specifically, if both Google Test and some other code define macro {\f2 FOO} , you can add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_DONT_DEFINE_FOO=1\par
}
 to the compiler flags to tell Google Test to change the macro's name from {\f2 FOO}  to {\f2 GTEST_FOO} . For example, with {\f2 -DGTEST_DONT_DEFINE_TEST=1} , you'll need to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid GTEST_TEST(SomeTest, DoesThis) \{ ... \}\par
}
 instead of {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(SomeTest, DoesThis) \{ ... \}\par
}
 in order to define a test.\par
Currently, the following {\f2 TEST} , {\f2 FAIL} , {\f2 SUCCEED} , and the basic comparison assertion macros can have alternative names. You can see the full list of covered macros {\f2 here}. More information can be found in the "Avoiding Macro Name Clashes" section of the README file.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Is it OK if I have two separate {\f2 TEST(Foo, Bar)}  test methods defined in different namespaces?} \par}
Yes.\par
The rule is {\b all test methods in the same test case must use the same fixture class} . This means that the following is {\b allowed}  because both tests use the same fixture class ({\f2 {\b testing::Test}} ).\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace foo \{\par
TEST(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
\par
namespace bar \{\par
TEST(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
}
\par
However, the following code is {\b not allowed}  and will produce a runtime error from Google Test because the test methods are using different test fixture classes with the same test case name.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid namespace foo \{\par
class CoolTest : public ::testing::Test \{\};  // Fixture foo::CoolTest\par
TEST_F(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
\par
namespace bar \{\par
class CoolTest : public ::testing::Test \{\};  // Fixture: bar::CoolTest\par
TEST_F(CoolTest, DoSomething) \{\par
  SUCCEED();\par
\}\par
\}  // namespace foo\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 How do I build Google Testing Framework with Xcode 4?} \par}
If you try to build Google Test's Xcode project with Xcode 4.0 or later, you may encounter an error message that looks like "Missing SDK in target gtest\\_framework: /Developer/SDKs/MacOSX10.4u.sdk". That means that Xcode does not support the SDK the project is targeting. See the Xcode section in the ../../README.MD "README" file on how to resolve this.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 My question is not covered in your FAQ!} \par}
If you cannot find the answer to your question in this FAQ, there are some other resources you can use:\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab read other {\f2 wiki pages},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab search the mailing list {\f2 archive},\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab ask it on {\f2 googletestframework@googlegroups.com} and someone will answer it (to prevent spam, we require you to join the {\f2 discussion group} before you can post.).\par}
Please note that creating an issue in the {\f2 issue tracker} is {\i not}  a good way to get your answer, as it is monitored infrequently by a very small number of people.\par
When asking a question, it's helpful to provide as much of the following information as possible (people cannot help you if there's not enough information in your question):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the version (or the revision number if you check out from SVN directly) of Google Test you use (Google Test is under active development, so it's possible that your problem has been solved in a later version),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
your operating system,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the name and version of your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete command line flags you give to your compiler,\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the complete compiler error messages (if the question is about compilation),\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
the {\i actual}  code (ideally, a minimal but complete program) that has the problem you encounter. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Introduction: Why Google C++ Testing Framework?{\tc \v Introduction: Why Google C++ Testing Framework?}\par \pard\plain 
{\bkmkstart AAAAAAAEOJ}
{\bkmkend AAAAAAAEOJ}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\i Google C++ Testing Framework}  helps you write better C++ tests.\par
No matter whether you work on Linux, Windows, or a Mac, if you write C++ code, Google Test can help you.\par
So what makes a good test, and how does Google C++ Testing Framework fit in? We believe:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i independent}  and {\i repeatable} . It's a pain to debug a test that succeeds or fails as a result of other tests. Google C++ Testing Framework isolates the tests by running each of them on a different object. When a test fails, Google C++ Testing Framework allows you to run it in isolation for quick debugging.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be well {\i organized}  and reflect the structure of the tested code. Google C++ Testing Framework groups related tests into test cases that can share data and subroutines. This common pattern is easy to recognize and makes tests easy to maintain. Such consistency is especially helpful when people switch projects and start to work on a new code base.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i portable}  and {\i reusable} . The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral. Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations. (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab When tests fail, they should provide as much {\i information}  about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The testing framework should liberate test writers from housekeeping chores and let them focus on the test {\i content} . Google C++ Testing Framework automatically keeps track of all tests defined, and doesn't require the user to enumerate them in order to run them.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Tests should be {\i fast} . With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.\par}
Since Google C++ Testing Framework is based on the popular xUnit architecture, you'll feel right at home if you've used JUnit or PyUnit before. If not, it will take you about 10 minutes to learn the basics and get started. So let's go!\par
{\i Note:}  We sometimes refer to Google C++ Testing Framework informally as {\i Google Test} .\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Setting up a New Test Project} \par}
To write a test program using Google Test, you need to compile Google Test into a library and link your test with it. We provide build files for some popular build systems: {\f2 msvc/}  for Visual Studio, {\f2 xcode/}  for Mac Xcode, {\f2 make/}  for GNU make, {\f2 codegear/}  for Borland C++ Builder, and the autotools script (deprecated) and {\f2 CMakeLists.txt}  for CMake (recommended) in the Google Test root directory. If your build system is not on this list, you can take a look at {\f2 make/Makefile}  to learn how Google Test should be compiled (basically you want to compile {\f2 src/gtest-all.cc}  with {\f2 GTEST_ROOT}  and {\f2 GTEST_ROOT/include}  in the header search path, where {\f2 GTEST_ROOT}  is the Google Test root directory).\par
Once you are able to compile the Google Test library, you should create a project or build target for your test program. Make sure you have {\f2 GTEST_ROOT/include}  in the header search path so that the compiler can find {\f2 "gtest/gtest.h"}  when compiling your test. Set up your test project to link with the Google Test library (for example, in Visual Studio, this is done by adding a dependency on {\f2 gtest.vcproj} ).\par
If you still have questions, take a look at how Google Test's own tests are built and use them as examples.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Basic Concepts} \par}
When using Google Test, you start by writing {\i assertions} , which are statements that check whether a condition is true. An assertion's result can be {\i success} , {\i nonfatal failure} , or {\i fatal failure} . If a fatal failure occurs, it aborts the current function; otherwise the program continues normally.\par
{\i Tests}  use assertions to verify the tested code's behavior. If a test crashes or has a failed assertion, then it {\i fails} ; otherwise it {\i succeeds} .\par
A {\i test case}  contains one or many tests. You should group your tests into test cases that reflect the structure of the tested code. When multiple tests in a test case need to share common objects and subroutines, you can put them into a {\i test fixture}  class.\par
A {\i test program}  can contain multiple test cases.\par
We'll now explain how to write a test program, starting at the individual assertion level and building up to tests and test cases.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Assertions} \par}
Google Test assertions are macros that resemble function calls. You test a class or function by making assertions about its behavior. When an assertion fails, Google Test prints the assertion's source file and line number location, along with a failure message. You may also supply a custom failure message which will be appended to Google Test's message.\par
The assertions come in pairs that test the same thing but have different effects on the current function. {\f2 ASSERT_*}  versions generate fatal failures when they fail, and {\b abort the current function} . {\f2 EXPECT_*}  versions generate nonfatal failures, which don't abort the current function. Usually {\f2 EXPECT_*}  are preferred, as they allow more than one failures to be reported in a test. However, you should use {\f2 ASSERT_*}  if it doesn't make sense to continue when the assertion in question fails.\par
Since a failed {\f2 ASSERT_*}  returns from the current function immediately, possibly skipping clean-up code that comes after it, it may cause a space leak. Depending on the nature of the leak, it may or may not be worth fixing - so keep this in mind if you get a heap checker error in addition to assertion errors.\par
To provide a custom failure message, simply stream it into the macro using the {\f2 <<}  operator, or a sequence of such operators. An example: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";\par
\par
for (int i = 0; i < x.size(); ++i) \{\par
  EXPECT_EQ(x[i], y[i]) << "Vectors x and y differ at index " << i;\par
\}\par
}
\par
Anything that can be streamed to an {\f2 ostream}  can be streamed to an assertion macro\'96in particular, C strings and {\f2 string}  objects. If a wide string ({\f2 wchar_t*} , {\f2 TCHAR*}  in {\f2 UNICODE}  mode on Windows, or {\f2 std::wstring} ) is streamed to an assertion, it will be translated to UTF-8 when printed.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Basic Assertions} \par}
These assertions do basic true/false condition testing. \par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_TRUE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_TRUE(} _condition_{\f2 )} ; \cell }{{\i condition}  is true \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_FALSE(} _condition_{\f2 )} ; \cell }{{\f2 EXPECT_FALSE(} _condition_{\f2 )} ; \cell }{{\i condition}  is false \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Remember, when they fail, {\f2 ASSERT_*}  yields a fatal failure and returns from the current function, while {\f2 EXPECT_*}  yields a nonfatal failure, allowing the function to continue running. In either case, an assertion failure means its containing test fails.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Binary Comparison} \par}
This section describes assertions that compare two values.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_EQ(} _expected_{\f2 ,} _actual_{\f2 );} \cell }{{\f2 EXPECT_EQ(} _expected_{\f2 ,} _actual_{\f2 );} \cell }{{\i expected}  {\f2 ==}  {\i actual}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_NE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_NE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 !=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_LT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 <}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_LE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_LE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 <=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_GT(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 >}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_GE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\f2 EXPECT_GE(} _val1_{\f2 ,} _val2_{\f2 );}  \cell }{{\i val1}  {\f2 >=}  {\i val2}  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
In the event of a failure, Google Test prints both {\i val1}  and {\i val2}  . In {\f2 ASSERT_EQ*}  and {\f2 EXPECT_EQ*}  (and all other equality assertions we'll introduce later), you should put the expression you want to test in the position of {\i actual} , and put its expected value in {\i expected} , as Google Test's failure messages are optimized for this convention.\par
Value arguments must be comparable by the assertion's comparison operator or you'll get a compiler error. We used to require the arguments to support the {\f2 <<}  operator for streaming to an {\f2 ostream} , but it's no longer necessary since v1.6.0 (if {\f2 <<}  is supported, it will be called to print the arguments when the assertion fails; otherwise Google Test will attempt to print them in the best way it can. For more details and how to customize the printing of the arguments, see this Google {\b Mock} {\f2 recipe}.).\par
These assertions can work with a user-defined type, but only if you define the corresponding comparison operator (e.g. {\f2 ==} , {\f2 <} , etc). If the corresponding operator is defined, prefer using the {\f2 ASSERT_*()}  macros because they will print out not only the result of the comparison, but the two operands as well.\par
Arguments are always evaluated exactly once. Therefore, it's OK for the arguments to have side effects. However, as with any ordinary C/C++ function, the arguments' evaluation order is undefined (i.e. the compiler is free to choose any order) and your code should not depend on any particular argument evaluation order.\par
{\f2 ASSERT_EQ()}  does pointer equality on pointers. If used on two C strings, it tests if they are in the same memory location, not if they have the same value. Therefore, if you want to compare C strings (e.g. {\f2 const char*} ) by value, use {\f2 ASSERT_STREQ()}  , which will be described later on. In particular, to assert that a C string is {\f2 NULL} , use {\f2 ASSERT_STREQ(NULL, c_string)}  . However, to compare two {\f2 string}  objects, you should use {\f2 ASSERT_EQ} .\par
Macros in this section work with both narrow and wide string objects ({\f2 string}  and {\f2 wstring} ).\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 String Comparison} \par}
The assertions in this group compare two {\b C strings} . If you want to compare two {\f2 string}  objects, use {\f2 EXPECT_EQ} , {\f2 EXPECT_NE} , and etc instead.\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\b Fatal assertion}  \cell }{{\b Nonfatal assertion}  \cell }{{\b Verifies}   \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{{\f2 EXPECT_STREQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{the two C strings have the same content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{{\f2 EXPECT_STRNE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );} \cell }{{\f2 EXPECT_STRCASEEQ(} _expected_str_{\f2 ,} _actual_str_{\f2 );}  \cell }{the two C strings have the same content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx2916
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx5832
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 ASSERT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );} \cell }{{\f2 EXPECT_STRCASENE(} _str1_{\f2 ,} _str2_{\f2 );}  \cell }{the two C strings have different content, ignoring case \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
Note that "CASE" in an assertion name means that case is ignored.\par
{\f2 *STREQ*}  and {\f2 *STRNE*}  also accept wide C strings ({\f2 wchar_t*} ). If a comparison of two wide strings fails, their values will be printed as UTF-8 narrow strings.\par
A {\f2 NULL}  pointer and an empty string are considered {\i different} .\par
{\i Availability} : Linux, Windows, Mac.\par
See also: For more string comparison tricks (substring, prefix, suffix, and regular expression matching, for example), see the Advanced Google Test Guide.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Simple Tests} \par}
To create a test:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Use the {\f2 TEST()}  macro to define and name a test function, These are ordinary C++ functions that don't return a value.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab In this function, along with any valid C++ statements you want to include, use the various Google Test assertions to check values.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.\par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
{\f2 TEST()}  arguments go from general to specific. The {\i first}  argument is the name of the test case, and the {\i second}  argument is the test's name within the test case. Both names must be valid C++ identifiers, and they should not contain underscore ({\f2 _} ). A test's {\i full name}  consists of its containing test case and its individual name. Tests from different test cases can have the same individual name.\par
For example, let's take a simple integer function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int Factorial(int n); // Returns the factorial of n\par
}
\par
A test case for this function might look like: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Tests factorial of 0.\par
TEST(FactorialTest, HandlesZeroInput) \{\par
  EXPECT_EQ(1, Factorial(0));\par
\}\par
\par
// Tests factorial of positive numbers.\par
TEST(FactorialTest, HandlesPositiveInput) \{\par
  EXPECT_EQ(1, Factorial(1));\par
  EXPECT_EQ(2, Factorial(2));\par
  EXPECT_EQ(6, Factorial(3));\par
  EXPECT_EQ(40320, Factorial(8));\par
\}\par
}
\par
Google Test groups the test results by test cases, so logically-related tests should be in the same test case; in other words, the first argument to their {\f2 TEST()}  should be the same. In the above example, we have two tests, {\f2 HandlesZeroInput}  and {\f2 HandlesPositiveInput} , that belong to the same test case {\f2 FactorialTest} .\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Test Fixtures: Using the Same Data Configuration for Multiple Tests} \par}
If you find yourself writing two or more tests that operate on similar data, you can use a {\i test fixture} . It allows you to reuse the same configuration of objects for several different tests.\par
To create a fixture, just:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Derive a class from {\f2 {\b testing::Test}}  . Start its body with {\f2 protected:}  or {\f2 public:}  as we'll want to access fixture members from sub-classes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Inside the class, declare any objects you plan to use.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a default constructor or {\f2 SetUp()}  function to prepare the objects for each test. A common mistake is to spell {\f2 SetUp()}  as {\f2 Setup()}  with a small {\f2 u}  - don't let that happen to you.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If necessary, write a destructor or {\f2 TearDown()}  function to release any resources you allocated in {\f2 SetUp()}  . To learn when you should use the constructor/destructor and when you should use {\f2 SetUp()/TearDown()} , read this {\f2 FAQ entry}.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab If needed, define subroutines for your tests to share.\par}
When using a fixture, use {\f2 {\b TEST_F()}}  instead of {\f2 TEST()}  as it allows you to access objects and subroutines in the test fixture: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(test_case_name, test_name) \{\par
 ... test body ...\par
\}\par
}
\par
Like {\f2 TEST()} , the first argument is the test case name, but for {\f2 {\b TEST_F()}}  this must be the name of the test fixture class. You've probably guessed: {\f2 _F}  is for fixture.\par
Unfortunately, the C++ macro system does not allow us to create a single macro that can handle both types of tests. Using the wrong macro causes a compiler error.\par
Also, you must first define a test fixture class before using it in a {\f2 {\b TEST_F()}} , or you'll get the compiler error "`virtual outside class
declaration`".\par
For each test defined with {\f2 {\b TEST_F()}} , Google Test will:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a {\i fresh}  test fixture at runtime\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Immediately initialize it via {\f2 SetUp()}  ,\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Run the test\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Clean up by calling {\f2 TearDown()} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Delete the test fixture. Note that different tests in the same test case have different test fixture objects, and Google Test always deletes a test fixture before it creates the next one. Google Test does not reuse the same test fixture for multiple tests. Any changes one test makes to the fixture do not affect other tests.\par}
As an example, let's write tests for a FIFO queue class named {\f2 {\b Queue}} , which has the following interface: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid template <typename E> // E is the element type.\par
class Queue \{\par
 public:\par
  Queue();\par
  void Enqueue(const E& element);\par
  E* Dequeue(); // Returns NULL if the queue is empty.\par
  size_t size() const;\par
  ...\par
\};\par
}
\par
First, define a fixture class. By convention, you should give it the name {\f2 {\b FooTest}}  where {\f2 Foo}  is the class being tested. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid class QueueTest : public ::testing::Test \{\par
 protected:\par
  virtual void SetUp() \{\par
    q1_.Enqueue(1);\par
    q2_.Enqueue(2);\par
    q2_.Enqueue(3);\par
  \}\par
\par
  // virtual void TearDown() \{\}\par
\par
  Queue<int> q0_;\par
  Queue<int> q1_;\par
  Queue<int> q2_;\par
\};\par
}
\par
In this case, {\f2 TearDown()}  is not needed since we don't have to clean up after each test, other than what's already done by the destructor.\par
Now we'll write tests using {\f2 {\b TEST_F()}}  and this fixture. {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST_F(QueueTest, IsEmptyInitially) \{\par
  EXPECT_EQ(0, q0_.size());\par
\}\par
\par
TEST_F(QueueTest, DequeueWorks) \{\par
  int* n = q0_.Dequeue();\par
  EXPECT_EQ(NULL, n);\par
\par
  n = q1_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(1, *n);\par
  EXPECT_EQ(0, q1_.size());\par
  delete n;\par
\par
  n = q2_.Dequeue();\par
  ASSERT_TRUE(n != NULL);\par
  EXPECT_EQ(2, *n);\par
  EXPECT_EQ(1, q2_.size());\par
  delete n;\par
\}\par
}
\par
The above uses both {\f2 ASSERT_*}  and {\f2 EXPECT_*}  assertions. The rule of thumb is to use {\f2 EXPECT_*}  when you want the test to continue to reveal more errors after the assertion failure, and use {\f2 ASSERT_*}  when continuing after failure doesn't make sense. For example, the second assertion in the {\f2 Dequeue}  test is {\f2 ASSERT_TRUE(n != NULL)} , as we need to dereference the pointer {\f2 n}  later, which would lead to a segfault when {\f2 n}  is {\f2 NULL} .\par
When these tests run, the following happens:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Google Test constructs a {\f2 {\b QueueTest}}  object (let's call it {\f2 t1}  ).\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.SetUp()}  initializes {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The first test ( {\f2 IsEmptyInitially}  ) runs on {\f2 t1}  .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1.TearDown()}  cleans up after the test finishes.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab {\f2 t1}  is destructed.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab The above steps are repeated on another {\f2 {\b QueueTest}}  object, this time running the {\f2 DequeueWorks}  test.\par}
{\i Availability} : Linux, Windows, Mac.\par
{\i Note} : Google Test automatically saves all {\i Google Test}  flags when a test object is constructed, and restores them when it is destructed.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Invoking the Tests} \par}
{\f2 TEST()}  and {\f2 {\b TEST_F()}}  implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.\par
After defining your tests, you can run them with {\f2 RUN_ALL_TESTS()}  , which returns {\f2 0}  if all the tests are successful, or {\f2 1}  otherwise. Note that {\f2 RUN_ALL_TESTS()}  runs {\i all tests}  in your link unit \'96 they can be from different test cases, or even different source files.\par
When invoked, the {\f2 RUN_ALL_TESTS()}  macro:{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Saves the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Creates a test fixture object for the first test.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Initializes it via {\f2 SetUp()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Runs the test on the fixture object.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Cleans up the fixture via {\f2 TearDown()} .\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Deletes the fixture.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Restores the state of all Google Test flags.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Repeats the above steps for the next test, until all tests have run.\par}
In addition, if the text fixture's constructor generates a fatal failure in step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly, if step 3 generates a fatal failure, step 4 will be skipped.\par
{\i Important} : You must not ignore the return value of {\f2 RUN_ALL_TESTS()} , or {\f2 gcc}  will give you a compiler error. The rationale for this design is that the automated testing service determines whether a test has passed based on its exit code, not on its stdout/stderr output; thus your {\f2 main()}  function must return the value of {\f2 RUN_ALL_TESTS()} .\par
Also, you should call {\f2 RUN_ALL_TESTS()}  only {\b once} . Calling it more than once conflicts with some advanced Google Test features (e.g. thread-safe death tests) and thus is not supported.\par
{\i Availability} : Linux, Windows, Mac.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Writing the main() Function} \par}
You can start from this boilerplate: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid #include "this/package/foo.h"\par
#include "gtest/gtest.h"\par
\par
namespace \{\par
\par
// The fixture for testing class Foo.\par
class FooTest : public ::testing::Test \{\par
 protected:\par
  // You can remove any or all of the following functions if its body\par
  // is empty.\par
\par
  FooTest() \{\par
    // You can do set-up work for each test here.\par
  \}\par
\par
  virtual ~FooTest() \{\par
    // You can do clean-up work that doesn't throw exceptions here.\par
  \}\par
\par
  // If the constructor and destructor are not enough for setting up\par
  // and cleaning up each test, you can define the following methods:\par
\par
  virtual void SetUp() \{\par
    // Code here will be called immediately after the constructor (right\par
    // before each test).\par
  \}\par
\par
  virtual void TearDown() \{\par
    // Code here will be called immediately after each test (right\par
    // before the destructor).\par
  \}\par
\par
  // Objects declared here can be used by all tests in the test case for Foo.\par
\};\par
\par
// Tests that the Foo::Bar() method does Abc.\par
TEST_F(FooTest, MethodBarDoesAbc) \{\par
  const string input_filepath = "this/package/testdata/myinputfile.dat";\par
  const string output_filepath = "this/package/testdata/myoutputfile.dat";\par
  Foo f;\par
  EXPECT_EQ(0, f.Bar(input_filepath, output_filepath));\par
\}\par
\par
// Tests that Foo does Xyz.\par
TEST_F(FooTest, DoesXyz) \{\par
  // Exercises the Xyz feature of Foo.\par
\}\par
\par
\}  // namespace\par
\par
int main(int argc, char **argv) \{\par
  ::testing::InitGoogleTest(&argc, argv);\par
  return RUN_ALL_TESTS();\par
\}\par
}
\par
The {\f2 ::testing::InitGoogleTest()}  function parses the command line for Google Test flags, and removes all recognized flags. This allows the user to control a test program's behavior via various flags, which we'll cover in AdvancedGuide. You must call this function before calling {\f2 RUN_ALL_TESTS()} , or the flags won't be properly initialized.\par
On Windows, {\f2 InitGoogleTest()}  also works with wide strings, so it can be used in programs compiled in {\f2 UNICODE}  mode as well.\par
But maybe you think that writing all those main() functions is too much work? We agree with you completely and that's why Google Test provides a basic implementation of main(). If it fits your needs, then just link your test with gtest_main library and you are good to go.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Important note for Visual C++ users} \par}
If you put your tests into a library and your {\f2 main()}  function is in a different library or in your .exe file, those tests will not run. The reason is a {\f2 bug} in Visual C++. When you define your tests, Google Test creates certain static objects to register them. These objects are not referenced from elsewhere but their constructors are still supposed to run. When Visual C++ linker sees that nothing in the library is referenced from other places it throws the library out. You have to reference your library with tests from your main program to keep the linker from discarding it. Here is how to do it. Somewhere in your library code declare a function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid __declspec(dllexport) int PullInMyLibrary() \{ return 0; \}\par
}
 If you put your tests in a static library (not DLL) then {\f2 __declspec(dllexport)}  is not required. Now, in your main program, write a code that invokes that function: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid int PullInMyLibrary();\par
static int dummy = PullInMyLibrary();\par
}
 This will keep your tests referenced and will make them register themselves at startup.\par
In addition, if you define your tests in a static library, add {\f2 /OPT:NOREF}  to your main program linker options. If you use MSVC++ IDE, go to your .exe project properties/Configuration Properties/Linker/Optimization and set References setting to {\f2 Keep Unreferenced Data (/OPT:NOREF)} . This will keep Visual C++ linker from discarding individual symbols generated by your tests from the final executable.\par
There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you {\i must}  change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Where to Go from Here} \par}
Congratulations! You've learned the Google Test basics. You can start writing and running Google Test tests, read some samples, or continue with AdvancedGuide, which describes many more useful Google Test features.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Known Limitations} \par}
Google Test is designed to be thread-safe. The implementation is thread-safe on systems where the {\f2 pthreads}  library is available. It is currently {\i unsafe}  to use Google Test assertions from two threads concurrently on other systems (e.g. Windows). In most tests this is not an issue as usually the assertions are done in the main thread. If you want to help, you can volunteer to implement the necessary synchronization primitives in {\f2 gtest-port.h}  for your platform. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_7_PumpManual{\tc \v V1_7_PumpManual}\par \pard\plain 
{\bkmkstart AAAAAAAEOK}
{\bkmkend AAAAAAAEOK}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\b P} ump is {\b U} seful for {\b M} eta {\b P} rogramming.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 The Problem} \par}
Template and macro libraries often need to define many classes, functions, or macros that vary only (or almost only) in the number of arguments they take. It's a lot of repetitive, mechanical, and error-prone work.\par
Variadic templates and variadic macros can alleviate the problem. However, while both are being considered by the C++ committee, neither is in the standard yet or widely supported by compilers. Thus they are often not a good choice, especially when your code needs to be portable. And their capabilities are still limited.\par
As a result, authors of such libraries often have to write scripts to generate their implementation. However, our experience is that it's tedious to write such scripts, which tend to reflect the structure of the generated code poorly and are often hard to read and edit. For example, a small change needed in the generated code may require some non-intuitive, non-trivial changes in the script. This is especially painful when experimenting with the code.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Our Solution} \par}
Pump (for Pump is Useful for Meta Programming, Pretty Useful for Meta Programming, or Practical Utility for Meta Programming, whichever you prefer) is a simple meta-programming tool for C++. The idea is that a programmer writes a {\f2 foo.pump}  file which contains C++ code plus meta code that manipulates the C++ code. The meta code can handle iterations over a range, nested iterations, local meta variable definitions, simple arithmetic, and conditional expressions. You can view it as a small Domain-Specific Language. The meta language is designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode, for example) and concise, making Pump code intuitive and easy to maintain.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Highlights} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The implementation is in a single Python script and thus ultra portable: no build or installation is needed and it works cross platforms.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Pump tries to be smart with respect to {\f2 Google's style guide}: it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format is human-readable and more concise than XML.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The format works relatively well with Emacs' C++ mode.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Examples} \par}
The following Pump code (where meta keywords start with {\f2 $} , {\f2 [[}  and {\f2 ]]}  are meta brackets, and {\f2 $$}  starts a meta comment that ends with the line):\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $var n = 3     $$ Defines a meta variable n.\par
$range i 0..n  $$ Declares the range of meta iterator i (inclusive).\par
$for i [[\par
               $$ Meta loop.\par
// Foo$i does blah for $i-ary predicates.\par
$range j 1..i\par
template <size_t N $for j [[, typename A$j]]>\par
class Foo$i \{\par
$if i == 0 [[\par
  blah a;\par
]] $elif i <= 2 [[\par
  blah b;\par
]] $else [[\par
  blah c;\par
]]\par
\};\par
\par
]]\par
}
\par
will be translated by the Pump compiler to:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid // Foo0 does blah for 0-ary predicates.\par
template <size_t N>\par
class Foo0 \{\par
  blah a;\par
\};\par
\par
// Foo1 does blah for 1-ary predicates.\par
template <size_t N, typename A1>\par
class Foo1 \{\par
  blah b;\par
\};\par
\par
// Foo2 does blah for 2-ary predicates.\par
template <size_t N, typename A1, typename A2>\par
class Foo2 \{\par
  blah b;\par
\};\par
\par
// Foo3 does blah for 3-ary predicates.\par
template <size_t N, typename A1, typename A2, typename A3>\par
class Foo3 \{\par
  blah c;\par
\};\par
}
\par
In another example,\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $range i 1..n\par
Func($for i + [[a$i]]);\par
$$ The text between i and [[ is the separator between iterations.\par
}
\par
will generate one of the following lines (without the comments), depending on the value of {\f2 n} :\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Func();              // If n is 0.\par
Func(a1);            // If n is 1.\par
Func(a1 + a2);       // If n is 2.\par
Func(a1 + a2 + a3);  // If n is 3.\par
// And so on...\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Constructs} \par}
We support the following meta programming constructs:\par
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clcbpat16\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $var id = exp}  \cell }{Defines a named constant value. {\f2 $id}  is valid util the end of the current meta lexical block.  \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $range id exp..exp}  \cell }{Sets the range of an iteration variable, which can be reused in multiple loops later. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $for id sep [[ code ]]}  \cell }{Iteration. The range of {\f2 id}  must have been defined earlier. {\f2 $id}  is valid in {\f2 code} . \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $($)}  \cell }{Generates a single {\f2 $}  character. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $id}  \cell }{Value of the named constant or iteration variable. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 }  \cell }{Value of the expression. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $if exp [[ code ]] else_branch}  \cell }{Conditional. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 [[ code ]]}  \cell }{Meta lexical block. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 cpp_code}  \cell }{Raw C++ code. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\trowd \trgaph108\trleft-108\trbrdrt\brdrs\brdrw10 \trbrdrl\brdrs\brdrw10 \trbrdrb\brdrs\brdrw10 \trbrdrr\brdrs\brdrw10 \trbrdrh\brdrs\brdrw10 \trbrdrv\brdrs\brdrw10 
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx4374
\clvertalt\clbrdrt\brdrs\brdrw10 \clbrdrl\brdrs\brdrw10 \clbrdrb\brdrs\brdrw10 \clbrdrr \brdrs\brdrw10 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\f2 $$ comment}  \cell }{Meta comment. \cell }
\pard \widctlpar\intbl\adjustright
{\row }
\pard\plain
\par
{\b Note:}  To give the user some freedom in formatting the Pump source code, Pump ignores a new-line character if it's right after {\f2 $for foo}  or next to {\f2 [[}  or {\f2 ]]} . Without this rule you'll often be forced to write very long lines to get the desired output. Therefore sometimes you may need to insert an extra new-line in such places for a new-line to show up in your output.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Grammar} \par}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid code ::= atomic_code*\par
atomic_code ::= $var id = exp\par
    | $var id = [[ code ]]\par
    | $range id exp..exp\par
    | $for id sep [[ code ]]\par
    | $($)\par
    | $id\par
    | $(exp)\par
    | $if exp [[ code ]] else_branch\par
    | [[ code ]]\par
    | cpp_code\par
sep ::= cpp_code | empty_string\par
else_branch ::= $else [[ code ]]\par
    | $elif exp [[ code ]] else_branch\par
    | empty_string\par
exp ::= simple_expression_in_Python_syntax\par
}
\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Code} \par}
You can find the source code of Pump in {\f2 scripts/pump.py}. It is still very unpolished and lacks automated tests, although it has been successfully used many times. If you find a chance to use it in your project, please let us know what you think! We also welcome help on improving Pump.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Real Examples} \par}
You can find real-world applications of Pump in {\f2 Google Test} and {\f2 Google Mock}. The source file {\f2 foo.h.pump}  generates {\f2 foo.h} .\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tips} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
If a meta variable is followed by a letter or digit, you can separate them using {\f2 [[]]} , which inserts an empty string. For example {\f2 Foo$j[[]]Helper}  generate {\f2 Foo1Helper}  when {\f2 j}  is 1.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting {\f2 [[]]}  followed by a new line. Since any new-line character next to {\f2 [[}  or {\f2 ]]}  is ignored, the generated code won't contain this new line. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_7_Samples{\tc \v V1_7_Samples}\par \pard\plain 
{\bkmkstart AAAAAAAEOL}
{\bkmkend AAAAAAAEOL}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
If you're like us, you'd like to look at some Google Test sample code. The {\f2 samples folder} has a number of well-commented samples showing how to use a variety of Google Test features.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #1} shows the basic steps of using Google Test to test C++ functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #2} shows a more complex unit test for a class with multiple member functions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #3} uses a test fixture.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #4} is another basic example of using Google Test.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #5} teaches how to reuse a test fixture in multiple test cases by deriving sub-fixtures from it.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #6} demonstrates type-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #7} teaches the basics of value-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #8} shows using {\f2 Combine()}  in value-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #9} shows use of the listener API to modify Google Test's console output and the use of its reflection API to inspect test results.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Sample #10} shows use of the listener API to implement a primitive memory leak checker. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
V1_7_XcodeGuide{\tc \v V1_7_XcodeGuide}\par \pard\plain 
{\bkmkstart AAAAAAAEOM}
{\bkmkend AAAAAAAEOM}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This guide will explain how to use the Google Testing Framework in your Xcode projects on Mac OS X. This tutorial begins by quickly explaining what to do for experienced users. After the quick start, the guide goes provides additional explanation about each step.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Quick Start} \par}
Here is the quick guide for using Google Test in your Xcode project.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Download the source from the {\f2 website} using this command: {\f2 svn checkout {\f2 http://googletest.googlecode.com/svn/trunk/} googletest-read-only} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Open up the {\f2 gtest.xcodeproj}  in the {\f2 googletest-read-only/xcode/}  directory and build the gtest.framework.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a new "Shell Tool" target in your Xcode project called something like "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add the gtest.framework to your project and add it to the "Link Binary with Libraries" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add your unit test source code to the "Compile Sources" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Edit the "UnitTests" executable and add an environment variable named "DYLD\\_FRAMEWORK\\_PATH" with a value equal to the path to the framework containing the gtest.framework relative to the compiled executable.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Build and Go\par}
The following sections further explain each of the steps listed above in depth, describing in more detail how to complete it including some variations.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Get the Source} \par}
Currently, the gtest.framework discussed here isn't available in a tagged release of Google Test, it is only available in the trunk. As explained at the Google Test [site]({\f2 http://code.google.com/p/googletest/source/checkout}">svn), you can get the code from anonymous SVN with this command:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only\par
}
\par
Alternatively, if you are working with Subversion in your own code base, you can add Google Test as an external dependency to your own Subversion repository. By following this approach, everyone that checks out your svn repository will also receive a copy of Google Test (a specific version, if you wish) without having to check it out explicitly. This makes the set up of your project simpler and reduces the copied code in the repository.\par
To use {\f2 svn:externals} , decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like {\f2 third-party/googletest/1.0.1} , is another option. Once the location is established, use {\f2 svn propedit svn:externals _directory_}  to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.\par
The command {\f2 svn propedit}  will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. {\f2 {\f2 http://googletest.googlecode.com/svn/tags/release-1.0.1}} ). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the {\f2 -r_##_}  option (e.g. {\f2 externals/src/googletest -r60 {\f2 http://googletest.googlecode.com/svn/trunk}} ).\par
Here is an example of using the svn:externals properties on a trunk (read via {\f2 svn propget} ) of a project. This value checks out a copy of Google Test into the {\f2 trunk/externals/src/googletest/}  directory.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Computer:svn] user$ svn propget svn:externals trunk\par
externals/src/googletest http://googletest.googlecode.com/svn/trunk\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Add the Framework to Your Project} \par}
The next step is to build and add the gtest.framework to your own project. This guide describes two common ways below.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Make a Test Target} \par}
To start writing tests, make a new "Shell Tool" target. This target template is available under BSD, Cocoa, or Carbon. Add your unit test source code to the "Compile Sources" build phase of the target.\par
Next, you'll want to add gtest.framework in two different ways, depending upon which option you chose above.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Set Up the Executable Run Environment} \par}
Since the unit test executable is a shell tool, it doesn't have a bundle with a {\f2 Contents/Frameworks}  directory, in which to place gtest.framework. Instead, the dynamic linker must be told at runtime to search for the framework in another location. This can be accomplished by setting the "DYLD\\_FRAMEWORK\\_PATH" environment variable in the "Edit Active Executable ..." Arguments tab, under "Variables to be set in the environment:". The path for this value is the path (relative or absolute) of the directory containing the gtest.framework.\par
If you haven't set up the DYLD_FRAMEWORK_PATH, correctly, you might get a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-15 06:23:57 -0600.]\par
  dyld: Library not loaded: @loader_path/../Frameworks/gtest.framework/Versions/A/gtest\par
    Referenced from: /Users/username/Documents/Sandbox/gtestSample/build/Debug/WidgetFrameworkTest\par
    Reason: image not found\par
}
\par
To correct this problem, got to the directory containing the executable named in "Referenced from:" value in the error message above. Then, with the terminal in this location, find the relative path to the directory containing the gtest.framework. That is the value you'll need to set as the DYLD_FRAMEWORK_PATH.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Build and Go} \par}
Now, when you click "Build and Go", the test will be executed. Dumping out something like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-06 06:36:13 -0600.]\par
[==========] Running 2 tests from 1 test case.\par
[----------] Global test environment set-up.\par
[----------] 2 tests from WidgetInitializerTest\par
[ RUN      ] WidgetInitializerTest.TestConstructor\par
[       OK ] WidgetInitializerTest.TestConstructor\par
[ RUN      ] WidgetInitializerTest.TestConversion\par
[       OK ] WidgetInitializerTest.TestConversion\par
[----------] Global test environment tear-down\par
[==========] 2 tests from 1 test case ran.\par
[  PASSED  ] 2 tests.\par
\par
The Debugger has exited with status 0.  \par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Summary} \par}
Unit testing is a valuable way to ensure your data model stays valid even during rapid development or refactoring. The Google Testing Framework is a great unit testing framework for C and C++ which integrates well with an Xcode development environment. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
XcodeGuide{\tc \v XcodeGuide}\par \pard\plain 
{\bkmkstart AAAAAAAEON}
{\bkmkend AAAAAAAEON}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
This guide will explain how to use the Google Testing Framework in your Xcode projects on Mac OS X. This tutorial begins by quickly explaining what to do for experienced users. After the quick start, the guide goes provides additional explanation about each step.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Quick Start} \par}
Here is the quick guide for using Google Test in your Xcode project.\par
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Download the source from the {\f2 website} using this command: {\f2 svn checkout {\f2 http://googletest.googlecode.com/svn/trunk/} googletest-read-only} \par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Open up the {\f2 gtest.xcodeproj}  in the {\f2 googletest-read-only/xcode/}  directory and build the gtest.framework.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Create a new "Shell Tool" target in your Xcode project called something like "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add the gtest.framework to your project and add it to the "Link Binary with Libraries" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Add your unit test source code to the "Compile Sources" build phase of "UnitTests"\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Edit the "UnitTests" executable and add an environment variable named "DYLD\\_FRAMEWORK\\_PATH" with a value equal to the path to the framework containing the gtest.framework relative to the compiled executable.\par}
{
\par
\pard\plain \s90\fi-360\li360\widctlpar\fs20\cgrid 
1.\tab Build and Go\par}
The following sections further explain each of the steps listed above in depth, describing in more detail how to complete it including some variations.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Get the Source} \par}
Currently, the gtest.framework discussed here isn't available in a tagged release of Google Test, it is only available in the trunk. As explained at the Google Test [site]({\f2 http://code.google.com/p/googletest/source/checkout}">svn), you can get the code from anonymous SVN with this command:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only\par
}
\par
Alternatively, if you are working with Subversion in your own code base, you can add Google Test as an external dependency to your own Subversion repository. By following this approach, everyone that checks out your svn repository will also receive a copy of Google Test (a specific version, if you wish) without having to check it out explicitly. This makes the set up of your project simpler and reduces the copied code in the repository.\par
To use {\f2 svn:externals} , decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like {\f2 third-party/googletest/1.0.1} , is another option. Once the location is established, use {\f2 svn propedit svn:externals _directory_}  to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.\par
The command {\f2 svn propedit}  will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. {\f2 {\f2 http://googletest.googlecode.com/svn/tags/release-1.0.1}} ). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the {\f2 -r_##_}  option (e.g. {\f2 externals/src/googletest -r60 {\f2 http://googletest.googlecode.com/svn/trunk}} ).\par
Here is an example of using the svn:externals properties on a trunk (read via {\f2 svn propget} ) of a project. This value checks out a copy of Google Test into the {\f2 trunk/externals/src/googletest/}  directory.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Computer:svn] user$ svn propget svn:externals trunk\par
externals/src/googletest http://googletest.googlecode.com/svn/trunk\par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Add the Framework to Your Project} \par}
The next step is to build and add the gtest.framework to your own project. This guide describes two common ways below.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Make a Test Target} \par}
To start writing tests, make a new "Shell Tool" target. This target template is available under BSD, Cocoa, or Carbon. Add your unit test source code to the "Compile Sources" build phase of the target.\par
Next, you'll want to add gtest.framework in two different ways, depending upon which option you chose above.\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 1}  \'97 During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Option 2}  \'97 If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.\par}
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Set Up the Executable Run Environment} \par}
Since the unit test executable is a shell tool, it doesn't have a bundle with a {\f2 Contents/Frameworks}  directory, in which to place gtest.framework. Instead, the dynamic linker must be told at runtime to search for the framework in another location. This can be accomplished by setting the "DYLD\\_FRAMEWORK\\_PATH" environment variable in the "Edit Active Executable ..." Arguments tab, under "Variables to be set in the environment:". The path for this value is the path (relative or absolute) of the directory containing the gtest.framework.\par
If you haven't set up the DYLD_FRAMEWORK_PATH, correctly, you might get a message like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-15 06:23:57 -0600.]\par
  dyld: Library not loaded: @loader_path/../Frameworks/gtest.framework/Versions/A/gtest\par
    Referenced from: /Users/username/Documents/Sandbox/gtestSample/build/Debug/WidgetFrameworkTest\par
    Reason: image not found\par
}
\par
To correct this problem, got to the directory containing the executable named in "Referenced from:" value in the error message above. Then, with the terminal in this location, find the relative path to the directory containing the gtest.framework. That is the value you'll need to set as the DYLD_FRAMEWORK_PATH.\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Build and Go} \par}
Now, when you click "Build and Go", the test will be executed. Dumping out something like this:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid [Session started at 2008-08-06 06:36:13 -0600.]\par
[==========] Running 2 tests from 1 test case.\par
[----------] Global test environment set-up.\par
[----------] 2 tests from WidgetInitializerTest\par
[ RUN      ] WidgetInitializerTest.TestConstructor\par
[       OK ] WidgetInitializerTest.TestConstructor\par
[ RUN      ] WidgetInitializerTest.TestConversion\par
[       OK ] WidgetInitializerTest.TestConversion\par
[----------] Global test environment tear-down\par
[==========] 2 tests from 1 test case ran.\par
[  PASSED  ] 2 tests.\par
\par
The Debugger has exited with status 0.  \par
}
\par
{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Summary} \par}
Unit testing is a valuable way to ensure your data model stays valid even during rapid development or refactoring. The Google Testing Framework is a great unit testing framework for C and C++ which integrates well with an Xcode development environment. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Generic Build Instructions{\tc \v Generic Build Instructions}\par \pard\plain 
{\bkmkstart AAAAAAAEOO}
{\bkmkend AAAAAAAEOO}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Setup} \par}
To build Google Test and your tests that use it, you need to tell your build system where to find its headers and source files. The exact way to do it depends on which build system you use, and is usually straightforward.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Build} \par}
Suppose you put Google Test in directory {\f2 $\{GTEST_DIR\}} . To build it, create a library build target (or a project as called by Visual Studio and Xcode) to compile {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid $\{GTEST_DIR\}/src/gtest-all.cc\par
}
\par
with {\f2 $\{GTEST_DIR\}/include}  in the system header search path and {\f2 $\{GTEST_DIR\}}  in the normal header search path. Assuming a Linux-like system and gcc, something like the following will do: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid g++ -isystem $\{GTEST_DIR\}/include -I$\{GTEST_DIR\} \\\par
    -pthread -c $\{GTEST_DIR\}/src/gtest-all.cc\par
ar -rv libgtest.a gtest-all.o\par
}
\par
(We need {\f2 -pthread}  as Google Test uses threads.)\par
Next, you should compile your test source file with {\f2 $\{GTEST_DIR\}/include}  in the system header search path, and link it with gtest and any other necessary libraries: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid g++ -isystem $\{GTEST_DIR\}/include -pthread path/to/your_test.cc libgtest.a \\\par
    -o your_test\par
}
\par
As an example, the make/ directory contains a Makefile that you can use to build Google Test on systems where GNU make is available (e.g. Linux, Mac OS X, and Cygwin). It doesn't try to build Google Test's own tests. Instead, it just builds the Google Test library and a sample test. You can use it as a starting point for your own build script.\par
If the default settings are correct for your environment, the following commands should succeed: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cd $\{GTEST_DIR\}/make\par
make\par
./sample1_unittest\par
}
\par
If you see errors, try to tweak the contents of {\f2 make/Makefile}  to make them go away. There are instructions in {\f2 make/Makefile}  on how to do it.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Using CMake} \par}
Google Test comes with a CMake build script ( {\f2 CMakeLists.txt}) that can be used on a wide range of platforms ("C" stands for cross-platform.). If you don't have CMake installed already, you can download it for free from {\f2 http://www.cmake.org/}.\par
CMake works by generating native makefiles or build projects that can be used in the compiler environment of your choice. The typical workflow starts with: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mkdir mybuild       # Create a directory to hold the build output.\par
cd mybuild\par
cmake $\{GTEST_DIR\}  # Generate native build scripts.\par
}
\par
If you want to build Google Test's samples, you should replace the last command with {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake -Dgtest_build_samples=ON $\{GTEST_DIR\}\par
}
\par
If you are on a *nix system, you should now see a Makefile in the current directory. Just type 'make' to build gtest.\par
If you use Windows and have Visual Studio installed, a {\f2 gtest.sln}  file and several {\f2 .vcproj}  files will be created. You can then build them using Visual Studio.\par
On Mac OS X with Xcode installed, a {\f2 .xcodeproj}  file will be generated.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Legacy Build Scripts} \par}
Before settling on CMake, we have been providing hand-maintained build projects/scripts for Visual Studio, Xcode, and Autotools. While we continue to provide them for convenience, they are not actively maintained any more. We highly recommend that you follow the instructions in the previous two sections to integrate Google Test with your existing build system.\par
If you still need to use the legacy build scripts, here's how:\par
The msvc\\ folder contains two solutions with Visual C++ projects. Open the {\f2 gtest.sln}  or {\f2 gtest-md.sln}  file using Visual Studio, and you are ready to build Google Test the same way you build any Visual Studio project. Files that have names ending with -md use DLL versions of Microsoft runtime libraries (the /MD or the /MDd compiler option). Files without that suffix use static versions of the runtime libraries (the /MT or the /MTd option). Please note that one must use the same option to compile both gtest and the test code. If you use Visual Studio 2005 or above, we recommend the -md version as /MD is the default for new projects in these versions of Visual Studio.\par
On Mac OS X, open the {\f2 gtest.xcodeproj}  in the {\f2 xcode/}  folder using Xcode. Build the "gtest" target. The universal binary framework will end up in your selected build directory (selected in the Xcode "Preferences..." -> "Building" pane and defaults to xcode/build). Alternatively, at the command line, enter: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid xcodebuild\par
}
\par
This will build the "Release" configuration of gtest.framework in your default build location. See the "xcodebuild" man page for more information about building different configurations and building in different locations.\par
If you wish to use the Google Test Xcode project with Xcode 4.x and above, you need to either:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
update the SDK configuration options in xcode/Config/General.xconfig. Comment options {\f2 SDKROOT} , {\f2 MACOS_DEPLOYMENT_TARGET} , and {\f2 GCC_VERSION} . If you choose this route you lose the ability to target earlier versions of MacOS X.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Install an SDK for an earlier version. This doesn't appear to be supported by Apple, but has been reported to work ({\f2 http://stackoverflow.com/questions/5378518}).\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Tweaking Google Test} \par}
Google Test can be used in diverse environments. The default configuration may not work (or may not work well) out of the box in some environments. However, you can easily tweak Google Test by defining control macros on the compiler command line. Generally, these macros are named like {\f2 GTEST_XYZ}  and you define them to either 1 or 0 to enable or disable a certain feature.\par
We list the most frequently used macros below. For a complete list, see file {\f2 include/gtest/internal/gtest-port.h}.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Choosing a TR1 Tuple Library} \par}
Some Google Test features require the C++ Technical Report 1 (TR1) tuple library, which is not yet available with all compilers. The good news is that Google Test implements a subset of TR1 tuple that's enough for its own need, and will automatically use this when the compiler doesn't provide TR1 tuple.\par
Usually you don't need to care about which tuple library Google Test uses. However, if your project already uses TR1 tuple, you need to tell Google Test to use the same TR1 tuple library the rest of your project uses, or the two tuple implementations will clash. To do that, add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_USE_OWN_TR1_TUPLE=0\par
}
\par
to the compiler flags while compiling Google Test and your tests. If you want to force Google Test to use its own tuple library, just add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_USE_OWN_TR1_TUPLE=1\par
}
\par
to the compiler flags instead.\par
If you don't want Google Test to use tuple at all, add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_HAS_TR1_TUPLE=0\par
}
\par
and all features using tuple will be disabled.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Multi-threaded Tests} \par}
Google Test is thread-safe where the pthread library is available. After {\f2 #include "gtest/gtest.h"} , you can check the {\f2 GTEST_IS_THREADSAFE}  macro to see whether this is the case (yes if the macro is {\f2 #defined}  to 1, no if it's undefined.).\par
If Google Test doesn't correctly detect whether pthread is available in your environment, you can force it with {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_HAS_PTHREAD=1\par
}
\par
or {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_HAS_PTHREAD=0\par
}
\par
When Google Test uses pthread, you may need to add flags to your compiler and/or linker to select the pthread library, or you'll get link errors. If you use the CMake script or the deprecated Autotools script, this is taken care of for you. If you use your own build script, you'll need to read your compiler and linker's manual to figure out what flags to add.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 As a Shared Library (DLL)} \par}
Google Test is compact, so most users can build and link it as a static library for the simplicity. You can choose to use Google Test as a shared library (known as a DLL on Windows) if you prefer.\par
To compile {\i gtest}  as a shared library, add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_CREATE_SHARED_LIBRARY=1\par
}
\par
to the compiler flags. You'll also need to tell the linker to produce a shared library instead - consult your linker's manual for how to do it.\par
To compile your {\i tests}  that use the gtest shared library, add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_LINKED_AS_SHARED_LIBRARY=1\par
}
\par
to the compiler flags.\par
Note: while the above steps aren't technically necessary today when using some compilers (e.g. GCC), they may become necessary in the future, if we decide to improve the speed of loading the library (see {\f2 http://gcc.gnu.org/wiki/Visibility} for details). Therefore you are recommended to always add the above flags when using Google Test as a shared library. Otherwise a future release of Google Test may break your build script.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Avoiding Macro Name Clashes} \par}
In C++, macros don't obey namespaces. Therefore two libraries that both define a macro of the same name will clash if you {\f2 #include}  both definitions. In case a Google Test macro clashes with another library, you can force Google Test to rename its macro to avoid the conflict.\par
Specifically, if both Google Test and some other code define macro FOO, you can add {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid -DGTEST_DONT_DEFINE_FOO=1\par
}
\par
to the compiler flags to tell Google Test to change the macro's name from {\f2 FOO}  to {\f2 GTEST_FOO} . Currently {\f2 FOO}  can be {\f2 FAIL} , {\f2 SUCCEED} , or {\f2 TEST} . For example, with {\f2 -DGTEST_DONT_DEFINE_TEST=1} , you'll need to write {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid GTEST_TEST(SomeTest, DoesThis) \{ ... \}\par
}
\par
instead of {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid TEST(SomeTest, DoesThis) \{ ... \}\par
}
\par
in order to define a test.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Developing Google Test} \par}
This section discusses how to make your own changes to Google Test.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Testing Google Test Itself} \par}
To make sure your changes work as intended and don't break existing functionality, you'll want to compile and run Google Test's own tests. For that you can use CMake: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid mkdir mybuild\par
cd mybuild\par
cmake -Dgtest_build_tests=ON $\{GTEST_DIR\}\par
}
\par
Make sure you have Python installed, as some of Google Test's tests are written in Python. If the cmake command complains about not being able to find Python ({\f2 Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE)} ), try telling it explicitly where your Python executable can be found: {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid cmake -DPYTHON_EXECUTABLE=path/to/python -Dgtest_build_tests=ON $\{GTEST_DIR\}\par
}
\par
Next, you can build Google Test and all of its own tests. On *nix, this is usually done by 'make'. To run the tests, do {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make test\par
}
\par
All tests should pass.\par
Normally you don't need to worry about regenerating the source files, unless you need to modify them. In that case, you should modify the corresponding .pump files instead and run the pump.py Python script to regenerate them. You can find pump.py in the {\f2 scripts/} directory. Read the Pump manual for how to use it. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Google Test{\tc \v Google Test}\par \pard\plain 
{\bkmkstart AAAAAAAEOP}
{\bkmkend AAAAAAAEOP}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\f2 } {\f2 }\par
Welcome to {\b Google Test} , Google's C++ test framework!\par
This repository is a merger of the formerly separate GoogleTest and GoogleMock projects. These were so closely related that it makes sense to maintain and release them together.\par
Please see the project page above for more information as well as the mailing list for questions, discussions, and development. There is also an IRC channel on OFTC (irc.oftc.net) #gtest available. Please join us!\par
Getting started information for {\b Google Test}  is available in the Google Test Primer documentation.\par
{\b Google {\b Mock}}  is an extension to Google Test for writing and using C++ mock classes. See the separate Google Mock documentation.\par
More detailed documentation for googletest (including build instructions) are in its interior googletest/README.md file.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Features} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
An {\f2 XUnit} test framework.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Test discovery.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A rich set of assertions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
User-defined assertions.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Death tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Fatal and non-fatal failures.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Value-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Type-parameterized tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Various options for running the tests.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
XML test report generation.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Platforms} \par}
Google test has been used on a variety of platforms:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Linux\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Mac OS X\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Windows\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Cygwin\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
MinGW\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Windows Mobile\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Symbian\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Who Is Using Google Test?} \par}
In addition to many internal projects at Google, Google Test is also used by the following notable projects:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 Chromium projects} (behind the Chrome browser and Chrome OS).\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 LLVM} compiler.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Protocol Buffers}, Google's data interchange format.\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The {\f2 OpenCV} computer vision library.\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Related Open Source Projects} \par}
{\f2 Google Test UI} is test runner that runs your test binary, allows you to track its progress via a progress bar, and displays a list of test failures. Clicking on one shows failure text. Google Test UI is written in C#.\par
{\f2 GTest TAP Listener} is an event listener for Google Test that implements the {\f2 TAP protocol} for test result output. If your test runner understands TAP, you may find it useful.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Requirements} \par}
Google Test is designed to have fairly minimal requirements to build and use with your projects, but there are some. Currently, we support Linux, Windows, Mac OS X, and Cygwin. We will also make our best effort to support other platforms (e.g. Solaris, AIX, and z/OS). However, since core members of the Google Test project have no access to these platforms, Google Test may have outstanding issues there. If you notice any problems on your platform, please notify {\f2 googletestframework@googlegroups.com}. Patches for fixing them are even more welcome!\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Linux Requirements} \par}
These are the base requirements to build and use Google Test from a source package (as described below):\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
GNU-compatible Make or gmake\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
POSIX-standard shell\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
POSIX(-2) Regular Expressions (regex.h)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A C++98-standard-compliant compiler\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Windows Requirements} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Microsoft Visual C++ v7.1 or newer\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Cygwin Requirements} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Cygwin v1.5.25-14 or newer\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Mac OS X Requirements} \par}
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Mac OS X v10.4 Tiger or newer\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Xcode Developer Tools\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Requirements for Contributors} \par}
We welcome patches. If you plan to contribute a patch, you need to build Google Test and its own tests from a git checkout (described below), which has further requirements:\par
{
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 Python} v2.3 or newer (for running some of the tests and re-generating certain source files from templates)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\f2 CMake} v2.6.4 or newer\par}
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Regenerating Source Files} \par}
Some of Google Test's source files are generated from templates (not in the C++ sense) using a script. For example, the file include/gtest/internal/gtest-type-util.h.pump is used to generate {\b gtest-type-util.h} in the same directory.\par
You don't need to worry about regenerating the source files unless you need to modify them. You would then modify the corresponding {\f2 .pump}  files and run the '{\f2 pump.py}' generator script. See the Pump Manual.\par
{\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {\tc\tcl4 Contributing Code} \par}
We welcome patches. Please read the Developer's Guide for how you can contribute. In particular, make sure you have signed the Contributor License Agreement, or we won't be able to accept the patch.\par
Happy testing! \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented namespaces with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b ENPM808X} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for monocular multiple object tracking for a mobile robot })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Hierarchical Index\par \pard\plain 
{\tc \v Hierarchical Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class Hierarchy\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This inheritance list is sorted roughly, but not completely, alphabetically:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::AClass\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZX \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::DerivedClass\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::Action< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Action< InnerFunctionType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Action< OriginalFunction >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Action< VoidResult >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ActionHelper< Result, Impl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ActionInterface< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_generated_actions_test::SubstractAction\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::ActionInterface< F1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ActionAdaptor< F1, F2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::ActionInterface< F2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ActionInterface< InnerFunctionType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ActionInterface< int(int, int)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ActionInterface< OriginalFunction >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ActionInterface< VoidResult >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::AddRef< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::AddRef< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AddReference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AddReference< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::invoke_argument::AdlTag\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::AllArgsHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult1< M1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACII \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult2< M1, M2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult3< M1, M2, M3 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult4< M1, M2, M3, M4 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult5< M1, M2, M3, M4, M5 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult6< M1, M2, M3, M4, M5, M6 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult7< M1, M2, M3, M4, M5, M6, M7 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AllOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::AllowsGenericStreaming\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyEq\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyGe\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyGt\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyLe\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyLt\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyNe\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult1< M1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult2< M1, M2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult3< M1, M2, M3 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult4< M1, M2, M3, M4 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult5< M1, M2, M3, M4, M5 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult6< M1, M2, M3, M4, M5, M6 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult7< M1, M2, M3, M4, M5, M6, M7 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnythingMatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ArgsMatcher< InnerMatcher, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AssertHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
my_namespace::testing::AssertionResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::AssertionResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AssignAction< T1, T2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::AStruct\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAF \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::DerivedStruct\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::Base\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Base\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::Base\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::Derived\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::OtherDerived\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::Big\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
BiggestIntConvertible\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Bool\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::bool_constant< bool_value >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::is_pointer< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::is_pointer< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::is_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::is_reference< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kFromKind, From, kToKind, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kBool, bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kFloatingPoint, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kInteger, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kBool, bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kInteger, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kBool, bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kFloatingPoint, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::type_equals< T1, T2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::type_equals< T, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::bool_constant< ImplicitlyConvertible< const T *, const ::ProtocolMessage *>::value||ImplicitlyConvertible< const T *, const ::proto2::Message *>::value >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::IsAProtocolMessage< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::bool_constant<((sizeof(From)< sizeof(To)) &&(!GMOCK_IS_SIGNED_(From)||GMOCK_IS_SIGNED_(To)))||((sizeof(From)==sizeof(To)) &&(GMOCK_IS_SIGNED_(From)==GMOCK_IS_SIGNED_(To)))>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kInteger, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::BooleanConstant< kValue >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::BoolResetter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BothOfMatcher< Matcher1, Matcher2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BoundSecondMatcher< Tuple2Matcher, Second >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACME \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValue< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValue< const T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValue< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BuiltInDefaultValueGetter< T, false >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ByMoveWrapper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::ByRef< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::ByRef< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CallableTraits< Functor >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CallableTraits< Callable >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CallableTraits< ResType(*)(ArgType)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACND \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Cardinality\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CardinalityInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Castable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CastAndAppendTransform< Target >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CodeLocation\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.CodeNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ComparisonBase< D, Rhs, Op >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ComparisonBase< EqMatcher< Rhs >, Rhs, AnyEq >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::EqMatcher< Rhs >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ComparisonBase< GeMatcher< Rhs >, Rhs, AnyGe >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::GeMatcher< Rhs >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ComparisonBase< GtMatcher< Rhs >, Rhs, AnyGt >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::GtMatcher< Rhs >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ComparisonBase< LeMatcher< Rhs >, Rhs, AnyLe >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::LeMatcher< Rhs >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ComparisonBase< LtMatcher< Rhs >, Rhs, AnyLt >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::LtMatcher< Rhs >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ComparisonBase< NeMatcher< Rhs >, Rhs, AnyNe >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::NeMatcher< Rhs >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::CompileAssert< bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CompileAssertTypesEqual< T1, T2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::CompileAssertTypesEqual< T, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::const_iterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstAndNonConstCastable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstCastable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ConstCharPtr\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::ConstPropagatingPtr< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ContainerEqMatcher< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ContainsMatcher< M >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConversionHelperBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
ConversionHelperDerived\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gmock_matchers_test::ConvertibleFromAny\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ConvertibleToAssertionResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::ConvertibleToBool\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Counter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.Cursor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DecayArray< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DecayArray< T[]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DecayArray< T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::DefaultValue< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::DefaultValue< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::DefaultValue< void >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::DeletionTester\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Derived\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::DivisibleByImpl\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoBothAction< Action1, Action2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DoDefaultAction\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EachMatcher< M >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EitherOfMatcher< Matcher1, Matcher2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ElementsAreArrayMatcher< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ElementsAreMatcher< MatcherTuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.ElseNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EnableIf< bool >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EnableIf< true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EndsWithMatcher< StringType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.Env\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Environment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKF \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
BarEnvironment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FooEnvironment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EnvironmentInvocationCatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FinalSuccessChecker\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::EqHelper< lhs_is_null_literal >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EqHelper< true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ExcessiveArg\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Expectation\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ExpectationBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::TypedExpectation< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::ExpectationSet\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ExpectationTester\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.ExpNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FailureReporterInterface
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::GoogleTestFailureReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
FieldHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FieldMatcher< Class, FieldType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FilePath\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Flags\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FloatingEqMatcher< FloatType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FloatingPoint< RawType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::Foo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::Foo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::Foo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_nice_strict_test::MockFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gmock_generated_function_mockers_test::FooInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_generated_function_mockers_test::MockFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FormatForComparison< ToPrint, OtherOperand >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FormatForComparison< ToPrint[N], OtherOperand >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.ForNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R() >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R()>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXB \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Function< R(A1)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Function< R(A1, A2)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXN \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Function< R(A1, A2, A3)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Function< R(A1, A2, A3, A4)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXZ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Function< R(A1, A2, A3, A4, A5)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYF \\*MERGEFORMAT}{\fldrslt pagenum}}
testing::internal::Function< R(A1, A2, A3, A4, A5, A6)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYL \\*MERGEFORMAT}{\fldrslt pagenum}}
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYR \\*MERGEFORMAT}{\fldrslt pagenum}}
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYX \\*MERGEFORMAT}{\fldrslt pagenum}}
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZD \\*MERGEFORMAT}{\fldrslt pagenum}}
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par
\par
\par
\par
\par
}\par
}\par
}\par
}\par
}\par
testing::internal::Function< R(A1) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3, A4) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3, A4, A5) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3, A4, A5, A6) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMocker< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< k >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 0 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 3 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 4 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 5 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 6 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 7 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 8 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::Get< 9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GTestFlagSaver\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GTestLog\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::GTestMutexLock\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::HasSubstrMatcher< StringType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
HTTPError
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
upload.ClientLoginError\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.ClientLoginError\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
pump.IfNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IgnoredValue\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IgnoreResultAction< A >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ImplicitlyConvertible< From, To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::InSequence\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Interface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACN \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Mock\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gmock_matchers_test::IntReferenceWrapper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::IntValue\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeAction< FunctionImpl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< Result, ArgumentTuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
InvokeHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADES \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeHelper< R, ::testing::tuple<> >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeMethodAction< Class, MethodPtr >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::InvokeWithoutArgsAction< FunctionImpl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::IsGreaterThan\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::IsHalfOfMatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IsNullMatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gtest_printers_test::iterator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IteratorTraits< Iterator >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IteratorTraits< const T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::IteratorTraits< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::KeyMatcher< M >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::KindOf< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LessByName< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LessComparator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< const testing::CardinalityInterface >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< const testing::internal::RE >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< const testing::MatcherInterface< const internal::string &> >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< const testing::MatcherInterface< internal::string > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< const testing::MatcherInterface< T > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< Proto >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< R >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< testing::ActionInterface< F > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< testing::ActionInterface< F2 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< testing::ActionInterface< InnerFunctionType > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< testing::ActionInterface< OriginalFunction > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< testing::ActionInterface< VoidResult > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< testing::Expectation >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr< testing::internal::ExpectationBase >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::linked_ptr_internal\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::LinkedPtrLessThan< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.LiteralDollarNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherAsPredicate< M >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherBase< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::Matcher< const ::std::vector< LhsValue > &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const ArgTuple &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const ArgumentTuple &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const Element &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const FieldType &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const FirstType &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const KeyType &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const Pointee &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< const SecondType &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< DistanceType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< InnerMatcherArg >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< RefToConstProperty >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< ResultType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< SizeType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< testing::internal::To &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< U >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Matcher< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::MatcherBase< const internal::string &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::Matcher< const internal::string &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::MatcherBase< internal::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::Matcher< internal::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::MatcherCastImpl< T, M >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherCastImpl< T, Matcher< T > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherCastImpl< T, Matcher< U > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherDescriberInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMX \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::MatcherInterface< ArgsTuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ArgsMatcherImpl< ArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::MatcherInterface< const internal::string &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherInterface< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >::Impl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ElementsAreMatcherImpl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::QuantifierMatcherImpl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ContainsMatcherImpl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EachMatcherImpl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::SizeIsMatcher< SizeMatcher >::Impl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnorderedElementsAreMatcherImpl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::MatcherInterface< int >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherInterface< internal::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherInterface< Lhs >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherInterface< LhsContainer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >::Impl< LhsContainer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >::Impl< LhsContainer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::MatcherInterface< PairType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::KeyMatcherImpl< PairType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PairMatcherImpl< PairType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::MatcherInterface< Pointer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherInterface< Super &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherInterface< Tuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatcherInterface< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::EvenMatcherImpl\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::GreaterThanMatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::NewEvenMatcherImpl\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::AnyMatcherImpl< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::BothOfMatcherImpl< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::EitherOfMatcherImpl< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FloatingEqMatcher< FloatType >::Impl< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NotMatcherImpl< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
testing::internal::MatcherTuple< Tuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatcherTuple< ::testing::tuple<> >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatchesRegexMatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MatchMatrix\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MatchResultListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::DummyMatchResultListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StreamMatchResultListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::StringMatchResultListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::MaxBipartiteMatchState\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
my_namespace::testing::Message\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Message\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Mock\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_function_mockers_test::MockB\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_nice_strict_test::MockBar\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MockFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R()>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2, A3)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2, A3, A4)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2, A3, A4, A5)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_function_mockers_test::MockOverloadedOnArgNumber\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_function_mockers_test::MockOverloadedOnConstness\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R() >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3, A4) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3, A4, A5) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3, A4, A5, A6) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3, A4, A5, A6, A7) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3, A4, A5, A6, A7, A8) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3, A4, A5, A6, A7, A8, A9) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::MockSpec< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Mutex\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MyArray< T, kSize >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MyString\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
MyType\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
namespace1::MyTypeInNameSpace1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
namespace2::MyTypeInNameSpace2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::NaggyMock< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::NaggyMock< MockFoo >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NativeArray< Element >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::NiceMock< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NoDefaultContructor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonContainer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::NotCopyable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NotMatcher< InnerMatcher >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::NotNullMatcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::NullaryConstructorClass\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::NullaryFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::NullaryFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
object
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.ast._NullDict\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.AstBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Node\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPN \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.ast._GenericDeclaration\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.ast._NestedType\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.ast.Enum\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Union\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
cpp.ast.Class\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANQ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.ast.Struct\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
cpp.ast.Function\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOP \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.ast.Method\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
cpp.ast.Type\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Typedef\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.VariableDeclaration\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
cpp.ast.Define\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Expr\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.ast.Delete\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Friend\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Return\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
cpp.ast.Goto\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Include\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Parameter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.ast.Using\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
cpp.ast.TypeConverter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.tokenize.Token\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
release_docs.WikiBrancher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.AbstractRpcServer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJD \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
upload.HttpRpcServer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.HttpRpcServer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
upload.AbstractRpcServer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.VersionControlSystem\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKV \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
upload.GitVCS\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.GitVCS\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.MercurialVCS\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.MercurialVCS\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.SubversionVCS\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
upload.SubversionVCS\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
upload.VersionControlSystem\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
ENPM808X::ObjectTracker\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::OsStackTraceGetterInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMW \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::OsStackTraceGetter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
pump.Output\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PairMatchBase< D, Op >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PairMatchBase< Eq2Matcher, AnyEq >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Eq2Matcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::PairMatchBase< Ge2Matcher, AnyGe >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Ge2Matcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::PairMatchBase< Gt2Matcher, AnyGt >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Gt2Matcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::PairMatchBase< Le2Matcher, AnyLe >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Le2Matcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::PairMatchBase< Lt2Matcher, AnyLt >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Lt2Matcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADII \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::PairMatchBase< Ne2Matcher, AnyNe >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::Ne2Matcher\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::PairMatcher< FirstMatcher, SecondMatcher >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADND \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PointeeMatcher< InnerMatcher >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PointeeOf< Pointer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PointeeOf< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::PointerPrintable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::PolymorphicAction< Impl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::PolymorphicFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::PolymorphicIsEvenImpl\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::PolymorphicMatcher< Impl >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::Streamlike< T >::ConstIter::PostIncrProxy\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor3\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor4\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFormatFunctor5\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor1\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor2\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor3\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor4\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PredFunctor5\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PredicateFormatterFromMatcher< M >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PrimeTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHF \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
OnTheFlyPrimeTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PreCalculatedPrimeTable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
foo::PrintableViaPrintTo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::PrintableViaPrintToTemplate< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PrivateCode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ENPM808X::ProfileResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PropertyMatcher< Class, PropertyType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Queue< E >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Queue< int >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QueueNode< E >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QueueNode< int >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::Random\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.RangeNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.RawCodeNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RE\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReferenceOrValueWrapper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReferenceOrValueWrapper< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReferenceWrapper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::ReferencingFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RefMatcher< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RefMatcher< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RelationToSourceCopy\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RelationToSourceReference\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::remove_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::remove_reference< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveConst< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveConst< const T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveConst< const T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveConstFromKey< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveConstFromKey< std::pair< const K, V > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveReference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::RemoveReference< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ResultOfMatcher< Callable >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnAction< R >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnNullAction\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnRefAction< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnRefOfCopyAction< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ReturnVoidAction\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::SafeMatcherCastImpl< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::SameSizeTuplePrefixComparator< kSize1, kSize2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::SameSizeTuplePrefixComparator< 0, 0 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::SameSizeTuplePrefixComparator< k, k >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::scoped_ptr< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::scoped_ptr< ::std::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::scoped_ptr< ::std::stringstream >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::scoped_ptr< const ::std::string >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::scoped_ptr< GTEST_FLAG_SAVER_ >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ScopedPrematureExitFile\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ScopedTrace\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADST \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, -1, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Sequence\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SetArgumentPointeeAction< N, A, kIsProto >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SetArgumentPointeeAction< N, Proto, true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SetErrnoAndReturnAction< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SingleFailureChecker\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::SizeIsMatcher< SizeMatcher >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_function_mockers_test::StackInterface< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZS \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_generated_function_mockers_test::MockStack< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::StartsWithMatcher< StringType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StaticAssertTypeEqHelper< T1, T2 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StaticAssertTypeEqHelper< T, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
StaticAssertTypeEqTestHelper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StlContainerView< RawContainer >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StlContainerView< ::testing::tuple< ElementPointer, Size > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StlContainerView< Element[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
StreamableInGlobal\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::StreamableTemplateInFoo< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::Streamlike< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::StrEqualityMatcher< StringType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::StrictMock< MockClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::String\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_test_utils.Subprocess\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::SumOf5Functor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::SumOf5Functor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::SumOf6Functor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::SumOf6Functor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::TenArgConstructorClass\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
my_namespace::testing::Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
bar::MixedUpTestCaseTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
bar::MixedUpTestCaseWithSameTestNameTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
CommonTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ExpectFailureTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FatalFailureInFixtureConstructorTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FatalFailureInSetUpTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::MixedUpTestCaseTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::MixedUpTestCaseWithSameTestNameTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FooTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FooTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
GMockOutputTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonFatalFailureInFixtureConstructorTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
NonFatalFailureInSetUpTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ObjectTrackerTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate1Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate2Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate3Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate4Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Predicate5Test\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PrimeTableTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PropertyOne\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PropertyTwo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ProtectedFixtureMethodsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QueueTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QuickTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIW \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
IntegerFunctionTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QueueTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
TEST_before_TEST_F_in_same_test_case\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TEST_F_before_TEST_in_same_test_case\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTESTF\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTYPEDTEST< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTYPEDTESTP< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CurrentTestInfoTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_function_mockers_test::FunctionMockerTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::BacktrackingBPMTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::FloatingPointTest< RawType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBY \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::FloatingPointNearTest< RawType >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gmock_matchers_test::UnorderedElementsAreTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::InitGoogleTestTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ListenerTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestRecordPropertyTestHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::SetUpTestCaseTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestInfoTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypedTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TypeParamTest< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Test
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
DisabledTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
FailedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
PropertyRecordingTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
SuccessfulTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestCase
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_catch_exceptions_test.CatchCxxExceptionsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_catch_exceptions_test.CatchSehExceptionsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_color_test.GTestColorTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_env_var_test.GTestEnvVarTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_filter_unittest.GTestFilterUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_help_test.GTestHelpTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_list_tests_unittest.GTestListTestsUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_output_test.GTestOutputTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_shuffle_test.GTestShuffleUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_throw_on_failure_test.ThrowOnFailureTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_uninitialized_test.GTestUninitializedTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_xml_test_utils.GTestXMLTestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZI \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
gtest_xml_outfiles_test.GTestXMLOutFilesTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gtest_xml_output_unittest.GTestXMLOutputUnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
TestCase
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.gmock_class_test.TestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASY \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
cpp.gmock_class_test.GenerateMethodsTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAART \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
cpp.gmock_class_test.GenerateMocksTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}\par
TestCase
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
gmock_leak_test.GMockLeakTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
gmock_output_test.GMockOutputTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::TestCaseNameIs\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestEventListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSI \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::EmptyTestEventListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
SequenceTestingListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::XmlUnitTestResultPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::EventRecordingListener\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::PrettyUnitTestResultPrinter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestEventRepeater\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestEventListeners\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestEventListenersAccessor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestFactoryBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::TestFactoryImpl< TestClass >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestInfo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestPartResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestPartResultArray\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestPartResultReporterInterface\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUP \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::DefaultGlobalTestPartResultReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::DefaultPerThreadTestPartResultReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::HasNewFatalFailureHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::ScopedFakeTestPartResultReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::TestProperty\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestPropertyKeyIs\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::TestResult\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TestResultAccessor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
TestWithParam
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
FailingParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::CodeLocationForTESTP\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::BipartiteNonSquareTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::BipartiteRandomTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::BipartiteTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ValueParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ValueParamTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::ThreadLocal< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ThreadLocal< std::vector< testing::internal::TraceInfo > >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ThreadLocal< testing::TestPartResultReporterInterface *>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ENPM808X::Timer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::To\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
pump.Token\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TraceInfo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TransformTupleValuesHelper< Tuple, Func, OutIter >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TrulyMatcher< Predicate >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple<>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple<>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_element< k, Tuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< Tuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_0_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_1_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_2_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_3_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_4_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_5_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_6_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_7_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_8_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::tuple_size< GTEST_9_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABER \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< kIndexValid, kIndex, Tuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 0, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 1, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 2, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 3, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 4, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 5, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 6, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 7, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 8, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::tr1::gtest_internal::TupleElement< true, 9, GTEST_10_TUPLE_(T) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TuplePolicy< TupleT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TuplePrefix< N >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TuplePrefix< 0 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::Type< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeIdHelper< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEBW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal2::TypeWithoutFormatter< T, kTypeKind >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal2::TypeWithoutFormatter< T, kConvertibleToInteger >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal2::TypeWithoutFormatter< T, kProtobuf >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< size >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEBY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< 4 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< 8 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::TypeWithSize< sizeof(RawType)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEBY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
unary_function
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::gmock_matchers_test::Functor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gmock_generated_actions_test::UnaryConstructorClass\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::UnaryFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_generated_actions_test::UnaryFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_matchers_test::Uncopyable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::UnitTest\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestHelper\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestImpl\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnitTestOptions\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEEN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalPrinter< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalPrinter< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalPrinter< T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< char * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< const char * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UniversalTersePrinter< wchar_t * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnorderedElementsAreArrayMatcher< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnorderedElementsAreMatcher< MatcherTuple >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UnorderedElementsAreMatcherImplBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGF \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::UnorderedElementsAreMatcherImpl< Container >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::gmock_matchers_test::Unprintable\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
foo::UnprintableInFoo\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
UnprintableTemplateInGlobal< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::UntypedActionResultHolderBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::ActionResultHolder< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::ActionResultHolder< void >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::UntypedFunctionMockerBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGO \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMockerBase< R() >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R()>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R()>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7, A8) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7, A8)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7, A8, A9) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::FunctionMockerBase< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::FunctionMockerBase< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::UntypedOnCallSpecBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHI \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::OnCallSpec< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
pump.VarNode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
vector
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
TestingVector\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::gmock_more_actions_test::VoidNullaryFunctor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::WhenDynamicCastToMatcherBase< To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHY \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::WhenDynamicCastToMatcher< To >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::WhenDynamicCastToMatcherBase< To &>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHY \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
testing::internal::WhenDynamicCastToMatcher< To & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Widget\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
testing::internal::WithArgsAction< InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Index\par \pard\plain 
{\tc \v Class Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Class List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here are the classes, structs, unions and interfaces with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b cpp.ast._GenericDeclaration} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast._NestedType} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast._NullDict} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b upload.AbstractRpcServer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::AClass} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Action< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ActionAdaptor< F1, F2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ActionHelper< Result, Impl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::ActionInterface< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ActionResultHolder< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ActionResultHolder< void >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::AddRef< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::AddRef< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AddReference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AddReference< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::invoke_argument::AdlTag} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::AllArgsHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult1< M1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACII \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult2< M1, M2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult3< M1, M2, M3 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult4< M1, M2, M3, M4 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult5< M1, M2, M3, M4, M5 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult6< M1, M2, M3, M4, M5, M6 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult7< M1, M2, M3, M4, M5, M6, M7 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACIY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AllOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::AllowsGenericStreaming} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyEq} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyGe} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyGt} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyLe} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyLt} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyMatcherImpl< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyNe} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult1< M1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult2< M1, M2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult3< M1, M2, M3 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACJY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult4< M1, M2, M3, M4 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult5< M1, M2, M3, M4, M5 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult6< M1, M2, M3, M4, M5, M6 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult7< M1, M2, M3, M4, M5, M6, M7 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnyOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AnythingMatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ArgsMatcher< InnerMatcher, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ArgsMatcherImpl< ArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AssertHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACKZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b my_namespace::testing::AssertionResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::AssertionResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::AssignAction< T1, T2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.AstBuilder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::AStruct} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::BacktrackingBPMTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BarEnvironment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Base} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Base} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Base} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::Big} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BiggestIntConvertible} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::BipartiteNonSquareTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::BipartiteRandomTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::BipartiteTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Bool} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::bool_constant< bool_value >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BooleanConstant< kValue >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::BoolResetter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BothOfMatcher< Matcher1, Matcher2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BothOfMatcherImpl< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BoundSecondMatcher< Tuple2Matcher, Second >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACME \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValue< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValue< const T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValue< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BuiltInDefaultValueGetter< T, false >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ByMoveWrapper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::ByRef< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::ByRef< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CallableTraits< Functor >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACMY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CallableTraits< ResType(*)(ArgType)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACND \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Cardinality} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CardinalityInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Castable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CastAndAppendTransform< Target >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_catch_exceptions_test.CatchCxxExceptionsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_catch_exceptions_test.CatchSehExceptionsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Class} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAANQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b upload.ClientLoginError} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CodeLocation} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTESTF} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTESTP} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTYPEDTEST< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CodeLocationForTYPEDTESTP< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.CodeNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CommonTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ComparisonBase< D, Rhs, Op >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CompileAssert< bool >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CompileAssertTypesEqual< T1, T2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::CompileAssertTypesEqual< T, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::const_iterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstAndNonConstCastable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACNX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstCastable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ConstCharPtr} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::ConstPropagatingPtr< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ContainerEqMatcher< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ContainsMatcher< M >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ContainsMatcherImpl< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConversionHelperBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConversionHelperDerived} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::ConvertibleFromAny} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ConvertibleToAssertionResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::ConvertibleToBool} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Counter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::CurrentTestInfoTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABIX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.Cursor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DecayArray< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DecayArray< T[]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DecayArray< T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DefaultGlobalTestPartResultReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DefaultPerThreadTestPartResultReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::DefaultValue< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::DefaultValue< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::DefaultValue< void >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Define} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Delete} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::DeletionTester} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Derived} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Derived} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::DerivedClass} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::DerivedStruct} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b DisabledTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::DivisibleByImpl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoBothAction< Action1, Action2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DoDefaultAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::DummyMatchResultListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EachMatcher< M >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EachMatcherImpl< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACPV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EitherOfMatcher< Matcher1, Matcher2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EitherOfMatcherImpl< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ElementsAreArrayMatcher< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ElementsAreMatcher< MatcherTuple >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ElementsAreMatcherImpl< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.ElseNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::EmptyTestEventListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EnableIf< bool >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EnableIf< true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EndsWithMatcher< StringType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Enum} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.Env} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Environment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EnvironmentInvocationCatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Eq2Matcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EqHelper< lhs_is_null_literal >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EqHelper< true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EqMatcher< Rhs >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::EvenMatcherImpl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::EventRecordingListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACRW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ExcessiveArg} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Expectation} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ExpectationBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACSM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::ExpectationSet} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ExpectationTester} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ExpectFailureTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.ExpNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Expr} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FailedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FailingParamTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FatalFailureInFixtureConstructorTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FatalFailureInSetUpTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FieldHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FieldMatcher< Class, FieldType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FilePath} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACUR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FinalSuccessChecker} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Flags} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FloatingEqMatcher< FloatType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FloatingPoint< RawType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::FloatingPointNearTest< RawType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::FloatingPointTest< RawType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::Foo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::Foo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::Foo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FooEnvironment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::FooInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b FooTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FormatForComparison< ToPrint, OtherOperand >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FormatForComparison< ToPrint[N], OtherOperand >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACWY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.ForNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Friend} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Function} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAOP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R()>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3, A4)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACXZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3, A4, A5)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3, A4, A5, A6)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACYX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R()>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACZV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3, A4)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FunctionMockerBase< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADBT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::FunctionMockerTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Functor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Ge2Matcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GeMatcher< Rhs >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.gmock_class_test.GenerateMethodsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAART \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.gmock_class_test.GenerateMocksTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< k >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 0 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 3 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 4 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 5 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 6 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 7 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 8 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::Get< 9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b upload.GitVCS} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gmock_leak_test.GMockLeakTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gmock_output_test.GMockOutputTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b GMockOutputTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GoogleTestFailureReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Goto} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::GreaterThanMatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Gt2Matcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_color_test.GTestColorTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_env_var_test.GTestEnvVarTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_filter_unittest.GTestFilterUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAVX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GTestFlagSaver} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_help_test.GTestHelpTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAWY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_list_tests_unittest.GTestListTestsUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GTestLog} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GTestMutexLock} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_output_test.GTestOutputTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_shuffle_test.GTestShuffleUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAXS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_uninitialized_test.GTestUninitializedTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_xml_outfiles_test.GTestXMLOutFilesTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_xml_output_unittest.GTestXMLOutputUnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_xml_test_utils.GTestXMLTestCase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::GtMatcher< Rhs >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADCZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::HasNewFatalFailureHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::HasSubstrMatcher< StringType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b upload.HttpRpcServer} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Elif e.code >= 500 and e.code < 600: {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Server Error - try again.} \par}
})} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.IfNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IgnoredValue} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IgnoreResultAction< A >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >::Impl< LhsContainer >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::FloatingEqMatcher< FloatType >::Impl< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SizeIsMatcher< SizeMatcher >::Impl< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >::Impl< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACLL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >::Impl< LhsContainer >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ImplicitlyConvertible< From, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Include} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::InitGoogleTestTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::InSequence} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b IntegerFunctionTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Interface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::IntReferenceWrapper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::IntValue} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeAction< FunctionImpl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< Result, ArgumentTuple >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b InvokeHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADDX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADES \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeHelper< R, ::testing::tuple<> >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeMethodAction< Class, MethodPtr >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::InvokeWithoutArgsAction< FunctionImpl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_pointer< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_pointer< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_reference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::is_reference< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsAProtocolMessage< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::IsGreaterThan} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::IsHalfOfMatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IsNullMatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gtest_printers_test::iterator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACHB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IteratorTraits< Iterator >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IteratorTraits< const T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::IteratorTraits< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::KeyMatcher< M >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::KeyMatcherImpl< PairType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::KindOf< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Le2Matcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LeMatcher< Rhs >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LessByName< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LessComparator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::linked_ptr< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::linked_ptr_internal} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LinkedPtrLessThan< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ListenerTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.LiteralDollarNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kFromKind, From, kToKind, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADHZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kBool, bool >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kFloatingPoint, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kInteger, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kBool, bool >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADID \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kInteger, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kBool, bool >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kFloatingPoint, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kInteger, To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Lt2Matcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADII \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::LtMatcher< Rhs >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Matcher< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Matcher< const internal::string &>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Matcher< internal::string >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherAsPredicate< M >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherBase< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherCastImpl< T, M >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADIZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherCastImpl< T, Matcher< T > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherCastImpl< T, Matcher< U > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MatcherDescriberInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABMX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MatcherInterface< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< Tuple >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADJY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatcherTuple< ::testing::tuple<> >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatchesRegexMatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MatchMatrix} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MatchResultListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MaxBipartiteMatchState} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b upload.MercurialVCS} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b my_namespace::testing::Message} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Message} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Method} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::MixedUpTestCaseTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b bar::MixedUpTestCaseTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b bar::MixedUpTestCaseWithSameTestNameTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAKB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::MixedUpTestCaseWithSameTestNameTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Mock} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Mock} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::MockB} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::MockBar} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::MockFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_nice_strict_test::MockFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MockFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R()>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2, A3)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2, A3, A4)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2, A3, A4, A5)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::MockOverloadedOnArgNumber} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::MockOverloadedOnConstness} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::MockSpec< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADKU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::MockStack< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Mutex} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MyArray< T, kSize >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MyString} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b MyType} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b namespace1::MyTypeInNameSpace1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b namespace2::MyTypeInNameSpace2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::NaggyMock< MockClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NativeArray< Element >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Ne2Matcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NeMatcher< Rhs >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::NewEvenMatcherImpl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::NiceMock< MockClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Node} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NoDefaultContructor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonContainer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonFatalFailureInFixtureConstructorTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b NonFatalFailureInSetUpTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::NotCopyable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NotMatcher< InnerMatcher >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADLZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NotMatcherImpl< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::NotNullMatcher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::NullaryConstructorClass} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::NullaryFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::NullaryFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ENPM808X::ObjectTracker} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ObjectTrackerTest} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test fixture for ObjectTracker class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::OnCallSpec< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADML \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b OnTheFlyPrimeTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::OsStackTraceGetter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::OsStackTraceGetterInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADMW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::OtherDerived} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.Output} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PairMatchBase< D, Op >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PairMatcher< FirstMatcher, SecondMatcher >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADND \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PairMatcherImpl< PairType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Parameter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PointeeMatcher< InnerMatcher >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PointeeOf< Pointer >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PointeeOf< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PointerPrintable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADNV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::PolymorphicAction< Impl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::PolymorphicFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::PolymorphicIsEvenImpl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::PolymorphicMatcher< Impl >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Streamlike< T >::ConstIter::PostIncrProxy} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PreCalculatedPrimeTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor3} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor4} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFormatFunctor5} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor1} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor2} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor3} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor4} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PredFunctor5} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate1Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate2Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAFX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate3Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate4Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Predicate5Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PredicateFormatterFromMatcher< M >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PrettyUnitTestResultPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADOO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PrimeTable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PrimeTableTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PrintableViaPrintTo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::PrintableViaPrintToTemplate< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PrivateCode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ENPM808X::ProfileResult} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Data structure for holding a profiling result })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::PropertyMatcher< Class, PropertyType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PropertyOne} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PropertyRecordingTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b PropertyTwo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ProtectedFixtureMethodsTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::QuantifierMatcherImpl< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Queue< E >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b QueueNode< E >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b QueueTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b QuickTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::Random} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.RangeNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABBV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.RawCodeNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RE} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReferenceOrValueWrapper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReferenceOrValueWrapper< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReferenceWrapper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::ReferencingFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RefMatcher< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RefMatcher< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RelationToSourceCopy} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RelationToSourceReference} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::remove_reference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::remove_reference< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveConst< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveConst< const T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveConst< const T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveConstFromKey< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveConstFromKey< std::pair< const K, V > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveReference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::RemoveReference< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ResultOfMatcher< Callable >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Return} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnAction< R >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnNullAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADRY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnRefAction< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnRefOfCopyAction< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ReturnVoidAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::SafeMatcherCastImpl< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::SameSizeTuplePrefixComparator< kSize1, kSize2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::SameSizeTuplePrefixComparator< 0, 0 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::SameSizeTuplePrefixComparator< k, k >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::scoped_ptr< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::ScopedFakeTestPartResultReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ScopedPrematureExitFile} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ScopedTrace} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADST \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADSZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, -1, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADTX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Sequence} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SequenceTestingListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SetArgumentPointeeAction< N, A, kIsProto >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SetArgumentPointeeAction< N, Proto, true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SetErrnoAndReturnAction< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::SetUpTestCaseTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SingleFailureChecker} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::SizeIsMatcher< SizeMatcher >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADUY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_function_mockers_test::StackInterface< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StartsWithMatcher< StringType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StaticAssertTypeEqHelper< T1, T2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StaticAssertTypeEqHelper< T, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StaticAssertTypeEqTestHelper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StlContainerView< RawContainer >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StlContainerView< ::testing::tuple< ElementPointer, Size > >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADVW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StlContainerView< Element[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b StreamableInGlobal} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::StreamableTemplateInFoo< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Streamlike< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StreamMatchResultListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::StrEqualityMatcher< StringType >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::StrictMock< MockClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::String} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADWQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::StringMatchResultListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Struct} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_test_utils.Subprocess} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::SubstractAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b upload.SubversionVCS} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b SuccessfulTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::SumOf5Functor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::SumOf5Functor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::SumOf6Functor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::SumOf6Functor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::TenArgConstructorClass} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b my_namespace::testing::Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAZO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::Test} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TEST_before_TEST_F_in_same_test_case} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TEST_F_before_TEST_in_same_test_case} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestCase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.gmock_class_test.TestCase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAASY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestCaseNameIs} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestEventListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestEventListeners} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABSW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestEventListenersAccessor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestEventRepeater} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADXK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestFactoryBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestFactoryImpl< TestClass >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestInfo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestInfoTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TestingVector} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TestListener} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestPartResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestPartResultArray} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestPartResultReporterInterface} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestProperty} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestPropertyKeyIs} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::TestResult} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TestResultAccessor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::ThreadLocal< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b gtest_throw_on_failure_test.ThrowOnFailureTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAYM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ENPM808X::Timer} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for timing a scope (Stopwatch) })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::To} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.Token} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.tokenize.Token} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAATB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TraceInfo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TransformTupleValuesHelper< Tuple, Func, OutIter >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADYZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TrulyMatcher< Predicate >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple<>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple<>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_element< k, Tuple >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< Tuple >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_0_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABDZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_1_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_2_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_3_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_4_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_5_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_6_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_7_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_8_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::tuple_size< GTEST_9_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABER \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< kIndexValid, kIndex, Tuple >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 0, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 1, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 2, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 3, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 4, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 5, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 6, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 7, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 8, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tr1::gtest_internal::TupleElement< true, 9, GTEST_10_TUPLE_(T) >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAADZY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TuplePolicy< TupleT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TuplePrefix< N >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TuplePrefix< 0 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Type} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Type< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::type_equals< T1, T2 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::type_equals< T, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.TypeConverter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Typedef} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypedExpectation< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypedTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeIdHelper< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEBW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b TypeParamTest< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal2::TypeWithoutFormatter< T, kTypeKind >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal2::TypeWithoutFormatter< T, kConvertibleToInteger >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal2::TypeWithoutFormatter< T, kProtobuf >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEJA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeWithSize< size >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEBY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeWithSize< 4 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::TypeWithSize< 8 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::UnaryConstructorClass} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::UnaryFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_generated_actions_test::UnaryFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Uncopyable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Union} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::UnitTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestImpl} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAECK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestOptions} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEEN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnitTestRecordPropertyTestHelper} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEET \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEEY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalPrinter< T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< char * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< const char * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UniversalTersePrinter< wchar_t * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnorderedElementsAreArrayMatcher< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnorderedElementsAreMatcher< MatcherTuple >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnorderedElementsAreMatcherImpl< Container >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEFU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UnorderedElementsAreMatcherImplBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::UnorderedElementsAreTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_matchers_test::Unprintable} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACFC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b foo::UnprintableInFoo} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAUH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b UnprintableTemplateInGlobal< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UntypedActionResultHolderBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UntypedFunctionMockerBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEGO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::UntypedOnCallSpecBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.Using} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ValueParamTest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cpp.ast.VariableDeclaration} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAARM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b pump.VarNode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b upload.VersionControlSystem} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEKV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::gmock_more_actions_test::VoidNullaryFunctor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACGA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WhenDynamicCastToMatcher< To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WhenDynamicCastToMatcher< To & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WhenDynamicCastToMatcherBase< To >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEHY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Widget} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b release_docs.WikiBrancher} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABCP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::WithArgsAction< InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b testing::internal::XmlUnitTestResultPrinter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEIT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all documented files with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b app/{\b profiler.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Profiler class specification })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b app/{\b tracker.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ObjectTracker class implementation })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b include/{\b config.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
System configuration })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b include/{\b profiler.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Profiler class specification })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b include/{\b tracker.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ObjectTracker class specification })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b test/{\b test_tracker.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test Suite for ObjectTracker class methods })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-actions.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-cardinalities.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-generated-actions.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-generated-function-mockers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-generated-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-generated-nice-strict.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-more-actions.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-more-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock-spec-builders.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEOZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/{\b gmock.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/internal/{\b gmock-generated-internal-utils.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/internal/{\b gmock-internal-utils.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/internal/{\b gmock-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/internal/custom/{\b gmock-generated-actions.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/internal/custom/{\b gmock-matchers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/include/gmock/internal/custom/{\b gmock-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googlemock/test/{\b gmock_link_test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest-death-test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest-message.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest-param-test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest-printers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest-spi.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest-test-part.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest-typed-test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest_pred_impl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/{\b gtest_prod.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-death-test-internal.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-filepath.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-internal.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-linked_ptr.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-param-util-generated.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-param-util.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-port-arch.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEPZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-string.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-tuple.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/{\b gtest-type-util.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/custom/{\b gtest-port.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/custom/{\b gtest-printers.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/include/gtest/internal/custom/{\b gtest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/samples/{\b prime_tables.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/samples/{\b sample1.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/samples/{\b sample2.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/samples/{\b sample3-inl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/samples/{\b sample4.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/src/{\b gtest-internal-inl.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/test/{\b gtest-param-test_test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/test/{\b gtest-typed-test_test.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/test/{\b production.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b vendor/googletest/googletest/xcode/Samples/FrameworkSample/{\b widget.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAEQP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ENPM808X Namespace Reference\par \pard\plain 
{\tc\tcl2 \v ENPM808X}
{\xe \v ENPM808X}
{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for monocular multiple object tracking for a mobile robot. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ObjectTracker}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ProfileResult}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Data structure for holding a profiling result. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Timer}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for timing a scope (Stopwatch) }}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for monocular multiple object tracking for a mobile robot. \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Class Documentation{\tc \v Class Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast._GenericDeclaration Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast._GenericDeclaration}
{\xe \v cpp.ast._GenericDeclaration}
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
Inheritance diagram for cpp.ast._GenericDeclaration:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1___generic_declaration__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast._GenericDeclaration:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1___generic_declaration__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, namespace){\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b FullName} (self){\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b name}{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b namespace}{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast._NestedType Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast._NestedType}
{\xe \v cpp.ast._NestedType}
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
Inheritance diagram for cpp.ast._NestedType:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1___nested_type__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast._NestedType:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1___nested_type__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, fields, namespace){\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDefinition} (self){\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsExportable} (self){\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b fields}{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast._NullDict Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast._NullDict}
{\xe \v cpp.ast._NullDict}
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
Inheritance diagram for cpp.ast._NullDict:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1___null_dict__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast._NullDict:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1___null_dict__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b keys} = lambda self: (){\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
upload.AbstractRpcServer Class Reference\par \pard\plain 
{\tc\tcl2 \v upload.AbstractRpcServer}
{\xe \v upload.AbstractRpcServer}
{\bkmkstart AAAAAAAEJD}
{\bkmkend AAAAAAAEJD}
Inheritance diagram for upload.AbstractRpcServer:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_abstract_rpc_server__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for upload.AbstractRpcServer:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_abstract_rpc_server__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b __init__} (self, host, auth_function, host_override=None, extra_headers=\{\}, save_cookies=False)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b Send} (self, request_path, payload=None, content_type="application/octet-stream", timeout=None, kwargs)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b __init__} (self, host, auth_function, host_override=None, extra_headers=\{\}, save_cookies=False)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b Send} (self, request_path, payload=None, content_type="application/octet-stream", timeout=None, kwargs)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b host}{\bkmkstart AAAAAAAEJE}
{\bkmkend AAAAAAAEJE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b host_override}{\bkmkstart AAAAAAAEJF}
{\bkmkend AAAAAAAEJF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b auth_function}{\bkmkstart AAAAAAAEJG}
{\bkmkend AAAAAAAEJG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b authenticated}{\bkmkstart AAAAAAAEJH}
{\bkmkend AAAAAAAEJH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b extra_headers}{\bkmkstart AAAAAAAEJI}
{\bkmkend AAAAAAAEJI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b save_cookies}{\bkmkstart AAAAAAAEJJ}
{\bkmkend AAAAAAAEJJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b opener}{\bkmkstart AAAAAAAEJK}
{\bkmkend AAAAAAAEJK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Provides a common interface for a simple RPC server.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:upload::AbstractRpcServer}
{\xe \v upload::AbstractRpcServer\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.AbstractRpcServer.__init__ (  {\i self},   {\i host},   {\i auth_function},   {\i host_override} = {\f2 None},   {\i extra_headers} = {\f2 \{\}},   {\i save_cookies} = {\f2 False})}}
\par
{\bkmkstart AAAAAAAEJL}
{\bkmkend AAAAAAAEJL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates a new HttpRpcServer.\par
\par
Args:\par
  host: The host to send requests to.\par
  auth_function: A function that takes no arguments and returns an\par
(email, password) tuple when called. Will be called if authentication\par
is required.\par
  host_override: The host header to send to the server (defaults to host).\par
  extra_headers: A dict of extra headers to append to every request.\par
  save_cookies: If True, save the authentication cookies to local disk.\par
If False, use an in-memory cookiejar instead.  Subclasses must\par
implement this functionality.  Defaults to False.\par
}
 \par
}}
{\xe \v __init__\:upload::AbstractRpcServer}
{\xe \v upload::AbstractRpcServer\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.AbstractRpcServer.__init__ (  {\i self},   {\i host},   {\i auth_function},   {\i host_override} = {\f2 None},   {\i extra_headers} = {\f2 \{\}},   {\i save_cookies} = {\f2 False})}}
\par
{\bkmkstart AAAAAAAEJL}
{\bkmkend AAAAAAAEJL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Creates a new HttpRpcServer.\par
\par
Args:\par
  host: The host to send requests to.\par
  auth_function: A function that takes no arguments and returns an\par
(email, password) tuple when called. Will be called if authentication\par
is required.\par
  host_override: The host header to send to the server (defaults to host).\par
  extra_headers: A dict of extra headers to append to every request.\par
  save_cookies: If True, save the authentication cookies to local disk.\par
If False, use an in-memory cookiejar instead.  Subclasses must\par
implement this functionality.  Defaults to False.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Send\:upload::AbstractRpcServer}
{\xe \v upload::AbstractRpcServer\:Send}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.AbstractRpcServer.Send (  {\i self},   {\i request_path},   {\i payload} = {\f2 None},   {\i content_type} = {\f2 "application/octet-stream"},   {\i timeout} = {\f2 None},   {\i kwargs})}}
\par
{\bkmkstart AAAAAAAEJM}
{\bkmkend AAAAAAAEJM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Sends an RPC and returns the response.\par
\par
Args:\par
  request_path: The path to send the request to, eg /api/appversion/create.\par
  payload: The body of the request, or None to send an empty request.\par
  content_type: The Content-Type header to use.\par
  timeout: timeout in seconds; default None i.e. no timeout.\par
(Note: for large requests on OS X, the timeout doesn't work right.)\par
  kwargs: Any keyword arguments are converted into query string parameters.\par
\par
Returns:\par
  The response body, as a string.\par
}
 \par
}}
{\xe \v Send\:upload::AbstractRpcServer}
{\xe \v upload::AbstractRpcServer\:Send}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.AbstractRpcServer.Send (  {\i self},   {\i request_path},   {\i payload} = {\f2 None},   {\i content_type} = {\f2 "application/octet-stream"},   {\i timeout} = {\f2 None},   {\i kwargs})}}
\par
{\bkmkstart AAAAAAAEJM}
{\bkmkend AAAAAAAEJM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Sends an RPC and returns the response.\par
\par
Args:\par
  request_path: The path to send the request to, eg /api/appversion/create.\par
  payload: The body of the request, or None to send an empty request.\par
  content_type: The Content-Type header to use.\par
  timeout: timeout in seconds; default None i.e. no timeout.\par
(Note: for large requests on OS X, the timeout doesn't work right.)\par
  kwargs: Any keyword arguments are converted into query string parameters.\par
\par
Returns:\par
  The response body, as a string.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/upload.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::AClass Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::AClass}
{\xe \v testing::gmock_matchers_test::AClass}
{\bkmkstart AAAAAAABZX}
{\bkmkend AAAAAAABZX}
Inheritance diagram for testing::gmock_matchers_test::AClass:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_a_class__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b n} () const{\bkmkstart AAAAAAABZY}
{\bkmkend AAAAAAABZY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_n} (int new_n){\bkmkstart AAAAAAABZZ}
{\bkmkend AAAAAAABZZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const string & {\b s} () const{\bkmkstart AAAAAAACAA}
{\bkmkend AAAAAAACAA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_s} (const string &new_s){\bkmkstart AAAAAAACAB}
{\bkmkend AAAAAAACAB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

double & {\b x} () const{\bkmkstart AAAAAAACAC}
{\bkmkend AAAAAAACAC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Action< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::Action< F >}
{\xe \v testing::Action< F >}
{\bkmkstart AAAAAAABHG}
{\bkmkend AAAAAAABHG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::Result {\b Result}{\bkmkstart AAAAAAABHH}
{\bkmkend AAAAAAABHH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAABHI}
{\bkmkend AAAAAAABHI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Action} ({\b ActionInterface}< F > *impl){\bkmkstart AAAAAAABHJ}
{\bkmkend AAAAAAABHJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Action} (const {\b Action} &action){\bkmkstart AAAAAAABHK}
{\bkmkend AAAAAAABHK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Func > {\b Action} (const {\b Action}< Func > &action){\bkmkstart AAAAAAABHL}
{\bkmkend AAAAAAABHL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsDoDefault} () const{\bkmkstart AAAAAAABHM}
{\bkmkend AAAAAAABHM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Result {\b Perform} (const ArgumentTuple &args) const{\bkmkstart AAAAAAABHN}
{\bkmkend AAAAAAABHN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename From > {\b Action} (const {\b Action}< From > &from){\bkmkstart AAAAAAABHO}
{\bkmkend AAAAAAABHO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F1 , typename F2 > class {\b internal::ActionAdaptor}{\bkmkstart AAAAAAABHP}
{\bkmkend AAAAAAABHP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ActionAdaptor< F1, F2 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ActionAdaptor< F1, F2 >}
{\xe \v testing::internal::ActionAdaptor< F1, F2 >}
{\bkmkstart AAAAAAACHD}
{\bkmkend AAAAAAACHD}
Inheritance diagram for testing::internal::ActionAdaptor< F1, F2 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_action_adaptor__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ActionAdaptor< F1, F2 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_action_adaptor__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F1 >::Result {\b Result}{\bkmkstart AAAAAAACHE}
{\bkmkend AAAAAAACHE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F1 >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAACHF}
{\bkmkend AAAAAAACHF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ActionAdaptor} (const {\b Action}< F2 > &from){\bkmkstart AAAAAAACHG}
{\bkmkend AAAAAAACHG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual Result {\b Perform} (const ArgumentTuple &args){\bkmkstart AAAAAAACHH}
{\bkmkend AAAAAAACHH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ActionHelper< Result, Impl > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ActionHelper< Result, Impl >}
{\xe \v testing::internal::ActionHelper< Result, Impl >}
{\bkmkstart AAAAAAACHI}
{\bkmkend AAAAAAACHI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static Result {\b Perform} (Impl *impl, const ::testing::tuple<> &args){\bkmkstart AAAAAAACHJ}
{\bkmkend AAAAAAACHJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0 > &args){\bkmkstart AAAAAAACHK}
{\bkmkend AAAAAAACHK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1 > &args){\bkmkstart AAAAAAACHL}
{\bkmkend AAAAAAACHL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2 > &args){\bkmkstart AAAAAAACHM}
{\bkmkend AAAAAAACHM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 , typename A3 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2, A3 > &args){\bkmkstart AAAAAAACHN}
{\bkmkend AAAAAAACHN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2, A3, A4 > &args){\bkmkstart AAAAAAACHO}
{\bkmkend AAAAAAACHO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2, A3, A4, A5 > &args){\bkmkstart AAAAAAACHP}
{\bkmkend AAAAAAACHP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2, A3, A4, A5, A6 > &args){\bkmkstart AAAAAAACHQ}
{\bkmkend AAAAAAACHQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2, A3, A4, A5, A6, A7 > &args){\bkmkstart AAAAAAACHR}
{\bkmkend AAAAAAACHR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2, A3, A4, A5, A6, A7, A8 > &args){\bkmkstart AAAAAAACHS}
{\bkmkend AAAAAAACHS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > static Result {\b Perform} (Impl *impl, const ::testing::tuple< A0, A1, A2, A3, A4, A5, A6, A7, A8, A9 > &args){\bkmkstart AAAAAAACHT}
{\bkmkend AAAAAAACHT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::ActionInterface< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::ActionInterface< F >}
{\xe \v testing::ActionInterface< F >}
{\bkmkstart AAAAAAABHQ}
{\bkmkend AAAAAAABHQ}
Inheritance diagram for testing::ActionInterface< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_action_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::Result {\b Result}{\bkmkstart AAAAAAABHR}
{\bkmkend AAAAAAABHR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAABHS}
{\bkmkend AAAAAAABHS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual Result {\b Perform} (const ArgumentTuple &args)=0{\bkmkstart AAAAAAABHT}
{\bkmkend AAAAAAABHT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ActionResultHolder< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ActionResultHolder< T >}
{\xe \v testing::internal::ActionResultHolder< T >}
{\bkmkstart AAAAAAACHU}
{\bkmkend AAAAAAACHU}
Inheritance diagram for testing::internal::ActionResultHolder< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_action_result_holder__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ActionResultHolder< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_action_result_holder__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b Unwrap} (){\bkmkstart AAAAAAACHV}
{\bkmkend AAAAAAACHV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b PrintAsActionResult} (::std::ostream *os) const{\bkmkstart AAAAAAACHW}
{\bkmkend AAAAAAACHW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > static {\b ActionResultHolder} * {\b PerformDefaultAction} (const {\b FunctionMockerBase}< F > *func_mocker, const typename {\b Function}< F >::ArgumentTuple &args, const string &call_description){\bkmkstart AAAAAAACHX}
{\bkmkend AAAAAAACHX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > static {\b ActionResultHolder} * {\b PerformAction} (const {\b Action}< F > &action, const typename {\b Function}< F >::ArgumentTuple &args){\bkmkstart AAAAAAACHY}
{\bkmkend AAAAAAACHY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ActionResultHolder< void > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ActionResultHolder< void >}
{\xe \v testing::internal::ActionResultHolder< void >}
{\bkmkstart AAAAAAACHZ}
{\bkmkend AAAAAAACHZ}
Inheritance diagram for testing::internal::ActionResultHolder< void >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_action_result_holder_3_01void_01_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ActionResultHolder< void >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_action_result_holder_3_01void_01_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Unwrap} (){\bkmkstart AAAAAAACIA}
{\bkmkend AAAAAAACIA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b PrintAsActionResult} (::std::ostream *) const{\bkmkstart AAAAAAACIB}
{\bkmkend AAAAAAACIB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > static {\b ActionResultHolder} * {\b PerformDefaultAction} (const {\b FunctionMockerBase}< F > *func_mocker, const typename {\b Function}< F >::ArgumentTuple &args, const string &call_description){\bkmkstart AAAAAAACIC}
{\bkmkend AAAAAAACIC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > static {\b ActionResultHolder} * {\b PerformAction} (const {\b Action}< F > &action, const typename {\b Function}< F >::ArgumentTuple &args){\bkmkstart AAAAAAACID}
{\bkmkend AAAAAAACID}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::AddRef< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::AddRef< T >}
{\xe \v std::tr1::gtest_internal::AddRef< T >}
{\bkmkstart AAAAAAABET}
{\bkmkend AAAAAAABET}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T & {\b type}{\bkmkstart AAAAAAABEU}
{\bkmkend AAAAAAABEU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::AddRef< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::AddRef< T & >}
{\xe \v std::tr1::gtest_internal::AddRef< T & >}
{\bkmkstart AAAAAAABEV}
{\bkmkend AAAAAAABEV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T & {\b type}{\bkmkstart AAAAAAABEW}
{\bkmkend AAAAAAABEW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AddReference< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AddReference< T >}
{\xe \v testing::internal::AddReference< T >}
{\bkmkstart AAAAAAACIE}
{\bkmkend AAAAAAACIE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T & {\b type}{\bkmkstart AAAAAAACIF}
{\bkmkend AAAAAAACIF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AddReference< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AddReference< T & >}
{\xe \v testing::internal::AddReference< T & >}
{\bkmkstart AAAAAAACIG}
{\bkmkend AAAAAAACIG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T & {\b type}{\bkmkstart AAAAAAACIH}
{\bkmkend AAAAAAACIH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::invoke_argument::AdlTag Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::invoke_argument::AdlTag}
{\xe \v testing::internal::invoke_argument::AdlTag}
{\bkmkstart AAAAAAAEJC}
{\bkmkend AAAAAAAEJC}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::AllArgsHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::AllArgsHelper}
{\xe \v testing::gmock_matchers_test::AllArgsHelper}
{\bkmkstart AAAAAAACAD}
{\bkmkend AAAAAAACAD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (Helper, int(char x, int y)){\bkmkstart AAAAAAACAE}
{\bkmkend AAAAAAACAE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult1< M1 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult1< M1 >}
{\xe \v testing::internal::AllOfResult1< M1 >}
{\bkmkstart AAAAAAACII}
{\bkmkend AAAAAAACII}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef M1 {\b type}{\bkmkstart AAAAAAACIJ}
{\bkmkend AAAAAAACIJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >}
{\xe \v testing::internal::AllOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >}
{\bkmkstart AAAAAAACIK}
{\bkmkend AAAAAAACIK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult5}< M1, M2, M3, M4, M5 >::{\b type}, typename {\b AllOfResult5}< M6, M7, M8, M9, M10 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIL}
{\bkmkend AAAAAAACIL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult2< M1, M2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult2< M1, M2 >}
{\xe \v testing::internal::AllOfResult2< M1, M2 >}
{\bkmkstart AAAAAAACIM}
{\bkmkend AAAAAAACIM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult1}< M1 >::{\b type}, typename {\b AllOfResult1}< M2 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIN}
{\bkmkend AAAAAAACIN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult3< M1, M2, M3 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult3< M1, M2, M3 >}
{\xe \v testing::internal::AllOfResult3< M1, M2, M3 >}
{\bkmkstart AAAAAAACIO}
{\bkmkend AAAAAAACIO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult1}< M1 >::{\b type}, typename {\b AllOfResult2}< M2, M3 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIP}
{\bkmkend AAAAAAACIP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult4< M1, M2, M3, M4 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult4< M1, M2, M3, M4 >}
{\xe \v testing::internal::AllOfResult4< M1, M2, M3, M4 >}
{\bkmkstart AAAAAAACIQ}
{\bkmkend AAAAAAACIQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult2}< M1, M2 >::{\b type}, typename {\b AllOfResult2}< M3, M4 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIR}
{\bkmkend AAAAAAACIR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult5< M1, M2, M3, M4, M5 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult5< M1, M2, M3, M4, M5 >}
{\xe \v testing::internal::AllOfResult5< M1, M2, M3, M4, M5 >}
{\bkmkstart AAAAAAACIS}
{\bkmkend AAAAAAACIS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult2}< M1, M2 >::{\b type}, typename {\b AllOfResult3}< M3, M4, M5 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIT}
{\bkmkend AAAAAAACIT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult6< M1, M2, M3, M4, M5, M6 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult6< M1, M2, M3, M4, M5, M6 >}
{\xe \v testing::internal::AllOfResult6< M1, M2, M3, M4, M5, M6 >}
{\bkmkstart AAAAAAACIU}
{\bkmkend AAAAAAACIU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult3}< M1, M2, M3 >::{\b type}, typename {\b AllOfResult3}< M4, M5, M6 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIV}
{\bkmkend AAAAAAACIV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult7< M1, M2, M3, M4, M5, M6, M7 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult7< M1, M2, M3, M4, M5, M6, M7 >}
{\xe \v testing::internal::AllOfResult7< M1, M2, M3, M4, M5, M6, M7 >}
{\bkmkstart AAAAAAACIW}
{\bkmkend AAAAAAACIW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult3}< M1, M2, M3 >::{\b type}, typename {\b AllOfResult4}< M4, M5, M6, M7 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIX}
{\bkmkend AAAAAAACIX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >}
{\xe \v testing::internal::AllOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >}
{\bkmkstart AAAAAAACIY}
{\bkmkend AAAAAAACIY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult4}< M1, M2, M3, M4 >::{\b type}, typename {\b AllOfResult4}< M5, M6, M7, M8 >::{\b type} > {\b type}{\bkmkstart AAAAAAACIZ}
{\bkmkend AAAAAAACIZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AllOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AllOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >}
{\xe \v testing::internal::AllOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >}
{\bkmkstart AAAAAAACJA}
{\bkmkend AAAAAAACJA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b BothOfMatcher}< typename {\b AllOfResult4}< M1, M2, M3, M4 >::{\b type}, typename {\b AllOfResult5}< M5, M6, M7, M8, M9 >::{\b type} > {\b type}{\bkmkstart AAAAAAACJB}
{\bkmkend AAAAAAACJB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::AllowsGenericStreaming Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::AllowsGenericStreaming}
{\xe \v testing::gtest_printers_test::AllowsGenericStreaming}
{\bkmkstart AAAAAAACGP}
{\bkmkend AAAAAAACGP}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >}
{\xe \v testing::gtest_printers_test::AllowsGenericStreamingAndImplicitConversionTemplate< T >}
{\bkmkstart AAAAAAACGQ}
{\bkmkend AAAAAAACGQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator bool} () const{\bkmkstart AAAAAAACGR}
{\bkmkend AAAAAAACGR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::AllowsGenericStreamingTemplate< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >}
{\xe \v testing::gtest_printers_test::AllowsGenericStreamingTemplate< T >}
{\bkmkstart AAAAAAACGS}
{\bkmkend AAAAAAACGS}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyEq Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyEq}
{\xe \v testing::internal::AnyEq}
{\bkmkstart AAAAAAACJC}
{\bkmkend AAAAAAACJC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A , typename B > bool {\b operator()} (const A &a, const B &b) const{\bkmkstart AAAAAAACJD}
{\bkmkend AAAAAAACJD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyGe Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyGe}
{\xe \v testing::internal::AnyGe}
{\bkmkstart AAAAAAACJE}
{\bkmkend AAAAAAACJE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A , typename B > bool {\b operator()} (const A &a, const B &b) const{\bkmkstart AAAAAAACJF}
{\bkmkend AAAAAAACJF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyGt Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyGt}
{\xe \v testing::internal::AnyGt}
{\bkmkstart AAAAAAACJG}
{\bkmkend AAAAAAACJG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A , typename B > bool {\b operator()} (const A &a, const B &b) const{\bkmkstart AAAAAAACJH}
{\bkmkend AAAAAAACJH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyLe Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyLe}
{\xe \v testing::internal::AnyLe}
{\bkmkstart AAAAAAACJI}
{\bkmkend AAAAAAACJI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A , typename B > bool {\b operator()} (const A &a, const B &b) const{\bkmkstart AAAAAAACJJ}
{\bkmkend AAAAAAACJJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyLt Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyLt}
{\xe \v testing::internal::AnyLt}
{\bkmkstart AAAAAAACJK}
{\bkmkend AAAAAAACJK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A , typename B > bool {\b operator()} (const A &a, const B &b) const{\bkmkstart AAAAAAACJL}
{\bkmkend AAAAAAACJL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyMatcherImpl< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyMatcherImpl< T >}
{\xe \v testing::internal::AnyMatcherImpl< T >}
{\bkmkstart AAAAAAACJM}
{\bkmkend AAAAAAACJM}
Inheritance diagram for testing::internal::AnyMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_any_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::AnyMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_any_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (T, {\b MatchResultListener} *) const{\bkmkstart AAAAAAACJN}
{\bkmkend AAAAAAACJN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACJO}
{\bkmkend AAAAAAACJO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACJP}
{\bkmkend AAAAAAACJP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyNe Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyNe}
{\xe \v testing::internal::AnyNe}
{\bkmkstart AAAAAAACJQ}
{\bkmkend AAAAAAACJQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A , typename B > bool {\b operator()} (const A &a, const B &b) const{\bkmkstart AAAAAAACJR}
{\bkmkend AAAAAAACJR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult1< M1 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult1< M1 >}
{\xe \v testing::internal::AnyOfResult1< M1 >}
{\bkmkstart AAAAAAACJS}
{\bkmkend AAAAAAACJS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef M1 {\b type}{\bkmkstart AAAAAAACJT}
{\bkmkend AAAAAAACJT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >}
{\xe \v testing::internal::AnyOfResult10< M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 >}
{\bkmkstart AAAAAAACJU}
{\bkmkend AAAAAAACJU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult5}< M1, M2, M3, M4, M5 >::{\b type}, typename {\b AnyOfResult5}< M6, M7, M8, M9, M10 >::{\b type} > {\b type}{\bkmkstart AAAAAAACJV}
{\bkmkend AAAAAAACJV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult2< M1, M2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult2< M1, M2 >}
{\xe \v testing::internal::AnyOfResult2< M1, M2 >}
{\bkmkstart AAAAAAACJW}
{\bkmkend AAAAAAACJW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult1}< M1 >::{\b type}, typename {\b AnyOfResult1}< M2 >::{\b type} > {\b type}{\bkmkstart AAAAAAACJX}
{\bkmkend AAAAAAACJX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult3< M1, M2, M3 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult3< M1, M2, M3 >}
{\xe \v testing::internal::AnyOfResult3< M1, M2, M3 >}
{\bkmkstart AAAAAAACJY}
{\bkmkend AAAAAAACJY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult1}< M1 >::{\b type}, typename {\b AnyOfResult2}< M2, M3 >::{\b type} > {\b type}{\bkmkstart AAAAAAACJZ}
{\bkmkend AAAAAAACJZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult4< M1, M2, M3, M4 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult4< M1, M2, M3, M4 >}
{\xe \v testing::internal::AnyOfResult4< M1, M2, M3, M4 >}
{\bkmkstart AAAAAAACKA}
{\bkmkend AAAAAAACKA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult2}< M1, M2 >::{\b type}, typename {\b AnyOfResult2}< M3, M4 >::{\b type} > {\b type}{\bkmkstart AAAAAAACKB}
{\bkmkend AAAAAAACKB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult5< M1, M2, M3, M4, M5 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult5< M1, M2, M3, M4, M5 >}
{\xe \v testing::internal::AnyOfResult5< M1, M2, M3, M4, M5 >}
{\bkmkstart AAAAAAACKC}
{\bkmkend AAAAAAACKC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult2}< M1, M2 >::{\b type}, typename {\b AnyOfResult3}< M3, M4, M5 >::{\b type} > {\b type}{\bkmkstart AAAAAAACKD}
{\bkmkend AAAAAAACKD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult6< M1, M2, M3, M4, M5, M6 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult6< M1, M2, M3, M4, M5, M6 >}
{\xe \v testing::internal::AnyOfResult6< M1, M2, M3, M4, M5, M6 >}
{\bkmkstart AAAAAAACKE}
{\bkmkend AAAAAAACKE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult3}< M1, M2, M3 >::{\b type}, typename {\b AnyOfResult3}< M4, M5, M6 >::{\b type} > {\b type}{\bkmkstart AAAAAAACKF}
{\bkmkend AAAAAAACKF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult7< M1, M2, M3, M4, M5, M6, M7 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult7< M1, M2, M3, M4, M5, M6, M7 >}
{\xe \v testing::internal::AnyOfResult7< M1, M2, M3, M4, M5, M6, M7 >}
{\bkmkstart AAAAAAACKG}
{\bkmkend AAAAAAACKG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult3}< M1, M2, M3 >::{\b type}, typename {\b AnyOfResult4}< M4, M5, M6, M7 >::{\b type} > {\b type}{\bkmkstart AAAAAAACKH}
{\bkmkend AAAAAAACKH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >}
{\xe \v testing::internal::AnyOfResult8< M1, M2, M3, M4, M5, M6, M7, M8 >}
{\bkmkstart AAAAAAACKI}
{\bkmkend AAAAAAACKI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult4}< M1, M2, M3, M4 >::{\b type}, typename {\b AnyOfResult4}< M5, M6, M7, M8 >::{\b type} > {\b type}{\bkmkstart AAAAAAACKJ}
{\bkmkend AAAAAAACKJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnyOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnyOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >}
{\xe \v testing::internal::AnyOfResult9< M1, M2, M3, M4, M5, M6, M7, M8, M9 >}
{\bkmkstart AAAAAAACKK}
{\bkmkend AAAAAAACKK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b EitherOfMatcher}< typename {\b AnyOfResult4}< M1, M2, M3, M4 >::{\b type}, typename {\b AnyOfResult5}< M5, M6, M7, M8, M9 >::{\b type} > {\b type}{\bkmkstart AAAAAAACKL}
{\bkmkend AAAAAAACKL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AnythingMatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AnythingMatcher}
{\xe \v testing::internal::AnythingMatcher}
{\bkmkstart AAAAAAACKM}
{\bkmkend AAAAAAACKM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator Matcher< T >} () const{\bkmkstart AAAAAAACKN}
{\bkmkend AAAAAAACKN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ArgsMatcher< InnerMatcher, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ArgsMatcher< InnerMatcher, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >}
{\xe \v testing::internal::ArgsMatcher< InnerMatcher, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >}
{\bkmkstart AAAAAAACKO}
{\bkmkend AAAAAAACKO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ArgsMatcher} (const InnerMatcher &inner_matcher){\bkmkstart AAAAAAACKP}
{\bkmkend AAAAAAACKP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename ArgsTuple > {\b operator Matcher< ArgsTuple >} () const{\bkmkstart AAAAAAACKQ}
{\bkmkend AAAAAAACKQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ArgsMatcherImpl< ArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ArgsMatcherImpl< ArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >}
{\xe \v testing::internal::ArgsMatcherImpl< ArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >}
{\bkmkstart AAAAAAACKR}
{\bkmkend AAAAAAACKR}
Inheritance diagram for testing::internal::ArgsMatcherImpl< ArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_args_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ArgsMatcherImpl< ArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_args_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::TupleFields}< RawArgsTuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >::type {\b SelectedArgs}{\bkmkstart AAAAAAACKS}
{\bkmkend AAAAAAACKS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Matcher}< const SelectedArgs & > {\b MonomorphicInnerMatcher}{\bkmkstart AAAAAAACKT}
{\bkmkend AAAAAAACKT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_REFERENCE_AND_CONST_} (ArgsTuple) RawArgsTuple{\bkmkstart AAAAAAACKU}
{\bkmkend AAAAAAACKU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InnerMatcher > {\b ArgsMatcherImpl} (const InnerMatcher &inner_matcher){\bkmkstart AAAAAAACKV}
{\bkmkend AAAAAAACKV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (ArgsTuple args, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACKW}
{\bkmkend AAAAAAACKW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACKX}
{\bkmkend AAAAAAACKX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACKY}
{\bkmkend AAAAAAACKY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AssertHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AssertHelper}
{\xe \v testing::internal::AssertHelper}
{\bkmkstart AAAAAAACKZ}
{\bkmkend AAAAAAACKZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssertHelper} (TestPartResult::Type type, const char *file, int line, const char *message){\bkmkstart AAAAAAACLA}
{\bkmkend AAAAAAACLA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b operator=} (const {\b Message} &message) const{\bkmkstart AAAAAAACLB}
{\bkmkend AAAAAAACLB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
my_namespace::testing::AssertionResult Class Reference\par \pard\plain 
{\tc\tcl2 \v my_namespace::testing::AssertionResult}
{\xe \v my_namespace::testing::AssertionResult}
{\bkmkstart AAAAAAAAZM}
{\bkmkend AAAAAAAAZM}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::AssertionResult Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::AssertionResult}
{\xe \v testing::AssertionResult}
{\bkmkstart AAAAAAABHU}
{\bkmkend AAAAAAABHU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssertionResult} (const {\b AssertionResult} &other){\bkmkstart AAAAAAABHV}
{\bkmkend AAAAAAABHV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b AssertionResult} (const T &success, typename {\b internal::EnableIf}< !{\b internal::ImplicitlyConvertible}< T, {\b AssertionResult} >::value >::type *=NULL){\bkmkstart AAAAAAABHW}
{\bkmkend AAAAAAABHW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssertionResult} & {\b operator=} ({\b AssertionResult} other){\bkmkstart AAAAAAABHX}
{\bkmkend AAAAAAABHX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator bool} () const{\bkmkstart AAAAAAABHY}
{\bkmkend AAAAAAABHY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssertionResult} {\b operator!} () const{\bkmkstart AAAAAAABHZ}
{\bkmkend AAAAAAABHZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b message} () const{\bkmkstart AAAAAAABIA}
{\bkmkend AAAAAAABIA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b failure_message} () const{\bkmkstart AAAAAAABIB}
{\bkmkend AAAAAAABIB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b AssertionResult} & {\b operator<<} (const T &value){\bkmkstart AAAAAAABIC}
{\bkmkend AAAAAAABIC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssertionResult} & {\b operator<<} (::std::ostream &(*basic_manipulator)(::std::ostream &stream)){\bkmkstart AAAAAAABID}
{\bkmkend AAAAAAABID}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::AssignAction< T1, T2 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::AssignAction< T1, T2 >}
{\xe \v testing::internal::AssignAction< T1, T2 >}
{\bkmkstart AAAAAAACLC}
{\bkmkend AAAAAAACLC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AssignAction} (T1 *ptr, T2 value){\bkmkstart AAAAAAACLD}
{\bkmkend AAAAAAACLD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > void {\b Perform} (const ArgumentTuple &) const{\bkmkstart AAAAAAACLE}
{\bkmkend AAAAAAACLE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.AstBuilder Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.AstBuilder}
{\xe \v cpp.ast.AstBuilder}
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
Inheritance diagram for cpp.ast.AstBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_ast_builder__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.AstBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_ast_builder__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, token_stream, filename, in_class='', visibility=None, namespace_stack=[]){\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b HandleError} (self, msg, token){\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Generate} (self){\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetScope} (self){\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetName} (self, seq=None)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetMethod} (self, modifiers, templated_types){\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_bool} (self){\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_char} (self){\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_int} (self){\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_long} (self){\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_short} (self){\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_double} (self){\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_float} (self){\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_void} (self){\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_wchar_t} (self){\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_unsigned} (self){\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_signed} (self){\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_struct} (self){\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_union} (self){\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_enum} (self){\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_auto} (self){\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_register} (self){\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_const} (self){\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_inline} (self){\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_extern} (self){\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_static} (self){\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_virtual} (self){\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_volatile} (self){\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_mutable} (self){\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_public} (self){\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_protected} (self){\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_private} (self){\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_friend} (self){\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_static_cast} (self){\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_const_cast} (self){\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_dynamic_cast} (self){\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_reinterpret_cast} (self){\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_new} (self){\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_delete} (self){\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_typedef} (self){\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_typeid} (self){\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_typename} (self){\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_template} (self){\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_true} (self){\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_false} (self){\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_asm} (self){\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_class} (self){\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_namespace} (self){\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_using} (self){\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_explicit} (self){\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_this} (self){\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_operator} (self){\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_sizeof} (self){\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_case} (self){\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_switch} (self){\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_default} (self){\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_if} (self){\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_else} (self){\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_return} (self){\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_goto} (self){\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_try} (self){\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_catch} (self){\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_throw} (self){\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_while} (self){\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_do} (self){\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_for} (self){\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_break} (self){\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b handle_continue} (self){\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b tokens}{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b filename}{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b token_queue}{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b namespace_stack}{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b in_class}{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b in_class_name_only}{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b visibility}{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b in_function}{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b current_token}{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b converter}{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetName\:cpp::ast::AstBuilder}
{\xe \v cpp::ast::AstBuilder\:GetName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.AstBuilder.GetName (  {\i self},   {\i seq} = {\f2 None})}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns ([tokens], next_token_info).}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::AStruct Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::AStruct}
{\xe \v testing::gmock_matchers_test::AStruct}
{\bkmkstart AAAAAAACAF}
{\bkmkend AAAAAAACAF}
Inheritance diagram for testing::gmock_matchers_test::AStruct:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1gmock__matchers__test_1_1_a_struct__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::AStruct:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1gmock__matchers__test_1_1_a_struct__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b AStruct} (const {\b AStruct} &rhs){\bkmkstart AAAAAAACAG}
{\bkmkend AAAAAAACAG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b x}{\bkmkstart AAAAAAACAH}
{\bkmkend AAAAAAACAH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const double {\b y}{\bkmkstart AAAAAAACAI}
{\bkmkend AAAAAAACAI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Uncopyable} {\b z}{\bkmkstart AAAAAAACAJ}
{\bkmkend AAAAAAACAJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b p}{\bkmkstart AAAAAAACAK}
{\bkmkend AAAAAAACAK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::BacktrackingBPMTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::BacktrackingBPMTest}
{\xe \v testing::gmock_matchers_test::BacktrackingBPMTest}
{\bkmkstart AAAAAAACAL}
{\bkmkend AAAAAAACAL}
Inheritance diagram for testing::gmock_matchers_test::BacktrackingBPMTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_backtracking_b_p_m_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::BacktrackingBPMTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_backtracking_b_p_m_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BarEnvironment Class Reference\par \pard\plain 
{\tc\tcl2 \v BarEnvironment}
{\xe \v BarEnvironment}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Inheritance diagram for BarEnvironment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_bar_environment__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for BarEnvironment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_bar_environment__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Base Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Base}
{\xe \v testing::internal::Base}
{\bkmkstart AAAAAAACLF}
{\bkmkend AAAAAAACLF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Base} (int n){\bkmkstart AAAAAAACLG}
{\bkmkend AAAAAAACLG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b member} (){\bkmkstart AAAAAAACLH}
{\bkmkend AAAAAAACLH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-port_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Base Class Reference\par \pard\plain 
{\tc\tcl2 \v Base}
{\xe \v Base}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Base} (int an_x){\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b x} () const{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Base Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Base}
{\xe \v testing::gmock_matchers_test::Base}
{\bkmkstart AAAAAAACAM}
{\bkmkend AAAAAAACAM}
Inheritance diagram for testing::gmock_matchers_test::Base:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >}
{\xe \v testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >}
{\bkmkstart AAAAAAACLI}
{\bkmkend AAAAAAACLI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Impl}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b BeginEndDistanceIsMatcher} (const DistanceMatcher &distance_matcher){\bkmkstart AAAAAAACLJ}
{\bkmkend AAAAAAACLJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAACLK}
{\bkmkend AAAAAAACLK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::Big Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::Big}
{\xe \v testing::gtest_printers_test::Big}
{\bkmkstart AAAAAAACGT}
{\bkmkend AAAAAAACGT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char {\b array} [257]{\bkmkstart AAAAAAACGU}
{\bkmkend AAAAAAACGU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BiggestIntConvertible Class Reference\par \pard\plain 
{\tc\tcl2 \v BiggestIntConvertible}
{\xe \v BiggestIntConvertible}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator::testing::internal::BiggestInt} () const{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::BipartiteNonSquareTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::BipartiteNonSquareTest}
{\xe \v testing::gmock_matchers_test::BipartiteNonSquareTest}
{\bkmkstart AAAAAAACAN}
{\bkmkend AAAAAAACAN}
Inheritance diagram for testing::gmock_matchers_test::BipartiteNonSquareTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::BipartiteNonSquareTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_bipartite_non_square_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::BipartiteRandomTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::BipartiteRandomTest}
{\xe \v testing::gmock_matchers_test::BipartiteRandomTest}
{\bkmkstart AAAAAAACAO}
{\bkmkend AAAAAAACAO}
Inheritance diagram for testing::gmock_matchers_test::BipartiteRandomTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::BipartiteRandomTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_bipartite_random_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::BipartiteTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::BipartiteTest}
{\xe \v testing::gmock_matchers_test::BipartiteTest}
{\bkmkstart AAAAAAACAP}
{\bkmkend AAAAAAACAP}
Inheritance diagram for testing::gmock_matchers_test::BipartiteTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_bipartite_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::BipartiteTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_bipartite_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Bool Struct Reference\par \pard\plain 
{\tc\tcl2 \v Bool}
{\xe \v Bool}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Bool} (int val){\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator>} (int n) const{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Bool} {\b operator+} (const {\b Bool} &rhs) const{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b Bool} &rhs) const{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b value}{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::bool_constant< bool_value > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::bool_constant< bool_value >}
{\xe \v testing::internal::bool_constant< bool_value >}
{\bkmkstart AAAAAAACLS}
{\bkmkend AAAAAAACLS}
Inheritance diagram for testing::internal::bool_constant< bool_value >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1bool__constant__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b bool_constant}< bool_value > {\b type}{\bkmkstart AAAAAAACLT}
{\bkmkend AAAAAAACLT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const bool {\b value} = bool_value{\bkmkstart AAAAAAACLU}
{\bkmkend AAAAAAACLU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BooleanConstant< kValue > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BooleanConstant< kValue >}
{\xe \v testing::internal::BooleanConstant< kValue >}
{\bkmkstart AAAAAAACLV}
{\bkmkend AAAAAAACLV}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::BoolResetter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::BoolResetter}
{\xe \v testing::gmock_generated_actions_test::BoolResetter}
{\bkmkstart AAAAAAABWV}
{\bkmkend AAAAAAABWV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b BoolResetter} (bool *value){\bkmkstart AAAAAAABWW}
{\bkmkend AAAAAAABWW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BothOfMatcher< Matcher1, Matcher2 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BothOfMatcher< Matcher1, Matcher2 >}
{\xe \v testing::internal::BothOfMatcher< Matcher1, Matcher2 >}
{\bkmkstart AAAAAAACLW}
{\bkmkend AAAAAAACLW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b BothOfMatcher} (Matcher1 matcher1, Matcher2 matcher2){\bkmkstart AAAAAAACLX}
{\bkmkend AAAAAAACLX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator Matcher< T >} () const{\bkmkstart AAAAAAACLY}
{\bkmkend AAAAAAACLY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BothOfMatcherImpl< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BothOfMatcherImpl< T >}
{\xe \v testing::internal::BothOfMatcherImpl< T >}
{\bkmkstart AAAAAAACLZ}
{\bkmkend AAAAAAACLZ}
Inheritance diagram for testing::internal::BothOfMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_both_of_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::BothOfMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_both_of_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b BothOfMatcherImpl} (const {\b Matcher}< T > &matcher1, const {\b Matcher}< T > &matcher2){\bkmkstart AAAAAAACMA}
{\bkmkend AAAAAAACMA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACMB}
{\bkmkend AAAAAAACMB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACMC}
{\bkmkend AAAAAAACMC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (T x, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACMD}
{\bkmkend AAAAAAACMD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BoundSecondMatcher< Tuple2Matcher, Second > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BoundSecondMatcher< Tuple2Matcher, Second >}
{\xe \v testing::internal::BoundSecondMatcher< Tuple2Matcher, Second >}
{\bkmkstart AAAAAAACME}
{\bkmkend AAAAAAACME}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b BoundSecondMatcher} (const Tuple2Matcher &tm, const Second &second){\bkmkstart AAAAAAACMF}
{\bkmkend AAAAAAACMF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator Matcher< T >} () const{\bkmkstart AAAAAAACMG}
{\bkmkend AAAAAAACMG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b operator=} (const {\b BoundSecondMatcher} &){\bkmkstart AAAAAAACMH}
{\bkmkend AAAAAAACMH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValue< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValue< T >}
{\xe \v testing::internal::BuiltInDefaultValue< T >}
{\bkmkstart AAAAAAACMI}
{\bkmkend AAAAAAACMI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACMJ}
{\bkmkend AAAAAAACMJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACMK}
{\bkmkend AAAAAAACMK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValue< const T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValue< const T >}
{\xe \v testing::internal::BuiltInDefaultValue< const T >}
{\bkmkstart AAAAAAACML}
{\bkmkend AAAAAAACML}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACMM}
{\bkmkend AAAAAAACMM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACMN}
{\bkmkend AAAAAAACMN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValue< T * > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValue< T * >}
{\xe \v testing::internal::BuiltInDefaultValue< T * >}
{\bkmkstart AAAAAAACMO}
{\bkmkend AAAAAAACMO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAACMP}
{\bkmkend AAAAAAACMP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T * {\b Get} (){\bkmkstart AAAAAAACMQ}
{\bkmkend AAAAAAACMQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >}
{\xe \v testing::internal::BuiltInDefaultValueGetter< T, kDefaultConstructible >}
{\bkmkstart AAAAAAACMR}
{\bkmkend AAAAAAACMR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACMS}
{\bkmkend AAAAAAACMS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BuiltInDefaultValueGetter< T, false > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BuiltInDefaultValueGetter< T, false >}
{\xe \v testing::internal::BuiltInDefaultValueGetter< T, false >}
{\bkmkstart AAAAAAACMT}
{\bkmkend AAAAAAACMT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAACMU}
{\bkmkend AAAAAAACMU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ByMoveWrapper< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ByMoveWrapper< T >}
{\xe \v testing::internal::ByMoveWrapper< T >}
{\bkmkstart AAAAAAACMV}
{\bkmkend AAAAAAACMV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ByMoveWrapper} (T value){\bkmkstart AAAAAAACMW}
{\bkmkend AAAAAAACMW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b payload}{\bkmkstart AAAAAAACMX}
{\bkmkend AAAAAAACMX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::ByRef< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::ByRef< T >}
{\xe \v std::tr1::gtest_internal::ByRef< T >}
{\bkmkstart AAAAAAABEX}
{\bkmkend AAAAAAABEX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const T & {\b type}{\bkmkstart AAAAAAABEY}
{\bkmkend AAAAAAABEY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::ByRef< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::ByRef< T & >}
{\xe \v std::tr1::gtest_internal::ByRef< T & >}
{\bkmkstart AAAAAAABEZ}
{\bkmkend AAAAAAABEZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T & {\b type}{\bkmkstart AAAAAAABFA}
{\bkmkend AAAAAAABFA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CallableTraits< Functor > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CallableTraits< Functor >}
{\xe \v testing::internal::CallableTraits< Functor >}
{\bkmkstart AAAAAAACMY}
{\bkmkend AAAAAAACMY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Functor::result_type {\b ResultType}{\bkmkstart AAAAAAACMZ}
{\bkmkend AAAAAAACMZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Functor {\b StorageType}{\bkmkstart AAAAAAACNA}
{\bkmkend AAAAAAACNA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b CheckIsValid} (Functor){\bkmkstart AAAAAAACNB}
{\bkmkend AAAAAAACNB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static ResultType {\b Invoke} (Functor f, T arg){\bkmkstart AAAAAAACNC}
{\bkmkend AAAAAAACNC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CallableTraits< ResType(*)(ArgType)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CallableTraits< ResType(*)(ArgType)>}
{\xe \v testing::internal::CallableTraits< ResType(*)(ArgType)>}
{\bkmkstart AAAAAAACND}
{\bkmkend AAAAAAACND}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ResType {\b ResultType}{\bkmkstart AAAAAAACNE}
{\bkmkend AAAAAAACNE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ResType(* {\b StorageType}) (ArgType){\bkmkstart AAAAAAACNF}
{\bkmkend AAAAAAACNF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b CheckIsValid} (ResType(*f)(ArgType)){\bkmkstart AAAAAAACNG}
{\bkmkend AAAAAAACNG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static ResType {\b Invoke} (ResType(*f)(ArgType), T arg){\bkmkstart AAAAAAACNH}
{\bkmkend AAAAAAACNH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Cardinality Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Cardinality}
{\xe \v testing::Cardinality}
{\bkmkstart AAAAAAABIE}
{\bkmkend AAAAAAABIE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Cardinality} (const {\b CardinalityInterface} *impl){\bkmkstart AAAAAAABIF}
{\bkmkend AAAAAAABIF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b ConservativeLowerBound} () const{\bkmkstart AAAAAAABIG}
{\bkmkend AAAAAAABIG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b ConservativeUpperBound} () const{\bkmkstart AAAAAAABIH}
{\bkmkend AAAAAAABIH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsSatisfiedByCallCount} (int call_count) const{\bkmkstart AAAAAAABII}
{\bkmkend AAAAAAABII}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsSaturatedByCallCount} (int call_count) const{\bkmkstart AAAAAAABIJ}
{\bkmkend AAAAAAABIJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsOverSaturatedByCallCount} (int call_count) const{\bkmkstart AAAAAAABIK}
{\bkmkend AAAAAAABIK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAABIL}
{\bkmkend AAAAAAABIL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b DescribeActualCallCountTo} (int actual_call_count, ::std::ostream *os){\bkmkstart AAAAAAABIM}
{\bkmkend AAAAAAABIM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-cardinalities.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CardinalityInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::CardinalityInterface}
{\xe \v testing::CardinalityInterface}
{\bkmkstart AAAAAAABIN}
{\bkmkend AAAAAAABIN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b ConservativeLowerBound} () const{\bkmkstart AAAAAAABIO}
{\bkmkend AAAAAAABIO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b ConservativeUpperBound} () const{\bkmkstart AAAAAAABIP}
{\bkmkend AAAAAAABIP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b IsSatisfiedByCallCount} (int call_count) const =0{\bkmkstart AAAAAAABIQ}
{\bkmkend AAAAAAABIQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b IsSaturatedByCallCount} (int call_count) const =0{\bkmkstart AAAAAAABIR}
{\bkmkend AAAAAAABIR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const =0{\bkmkstart AAAAAAABIS}
{\bkmkend AAAAAAABIS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Castable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Castable}
{\xe \v testing::internal::Castable}
{\bkmkstart AAAAAAACNI}
{\bkmkend AAAAAAACNI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Castable} (bool *converted){\bkmkstart AAAAAAACNJ}
{\bkmkend AAAAAAACNJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} (){\bkmkstart AAAAAAACNK}
{\bkmkend AAAAAAACNK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-port_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CastAndAppendTransform< Target > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CastAndAppendTransform< Target >}
{\xe \v testing::internal::CastAndAppendTransform< Target >}
{\bkmkstart AAAAAAACNL}
{\bkmkend AAAAAAACNL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Arg > {\b Matcher}< Target > {\b operator()} (const Arg &a) const{\bkmkstart AAAAAAACNM}
{\bkmkend AAAAAAACNM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_catch_exceptions_test.CatchCxxExceptionsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_catch_exceptions_test.CatchCxxExceptionsTest}
{\xe \v gtest_catch_exceptions_test.CatchCxxExceptionsTest}
{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
Inheritance diagram for gtest_catch_exceptions_test.CatchCxxExceptionsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__catch__exceptions__test_1_1_catch_cxx_exceptions_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_catch_exceptions_test.CatchCxxExceptionsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__catch__exceptions__test_1_1_catch_cxx_exceptions_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInFixtureConstructor} (self){\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInFixtureDestructor} (self){\bkmkstart AAAAAAAAVB}
{\bkmkend AAAAAAAAVB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInSetUpTestCase} (self){\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInTearDownTestCase} (self){\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInSetUp} (self){\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInTearDown} (self){\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesCxxExceptionsInTestBody} (self){\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesNonStdCxxExceptions} (self){\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testUnhandledCxxExceptionsAbortTheProgram} (self){\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests C++ exception-catching behavior.\par
\par
   Tests in this test case verify that:\par
   * C++ exceptions are caught and logged as C++ (not SEH) exceptions\par
   * Exception thrown affect the remainder of the test work flow in the\par
     expected manner.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_catch_exceptions_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_catch_exceptions_test.CatchSehExceptionsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_catch_exceptions_test.CatchSehExceptionsTest}
{\xe \v gtest_catch_exceptions_test.CatchSehExceptionsTest}
{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
Inheritance diagram for gtest_catch_exceptions_test.CatchSehExceptionsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__catch__exceptions__test_1_1_catch_seh_exceptions_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_catch_exceptions_test.CatchSehExceptionsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__catch__exceptions__test_1_1_catch_seh_exceptions_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b TestSehExceptions} (self, test_output){\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesSehExceptionsWithCxxExceptionsEnabled} (self){\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesSehExceptionsWithCxxExceptionsDisabled} (self){\bkmkstart AAAAAAAAVM}
{\bkmkend AAAAAAAAVM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests exception-catching behavior.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_catch_exceptions_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Class Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Class}
{\xe \v cpp.ast.Class}
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
Inheritance diagram for cpp.ast.Class:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_class__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Class:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_class__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, bases, templated_types, body, namespace){\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDeclaration} (self){\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDefinition} (self){\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsExportable} (self){\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Requires} (self, node){\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b bases}{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b body}{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b templated_types}{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
upload.ClientLoginError Class Reference\par \pard\plain 
{\tc\tcl2 \v upload.ClientLoginError}
{\xe \v upload.ClientLoginError}
{\bkmkstart AAAAAAAEJN}
{\bkmkend AAAAAAAEJN}
Inheritance diagram for upload.ClientLoginError:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_client_login_error__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for upload.ClientLoginError:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_client_login_error__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, url, code, msg, headers, args){\bkmkstart AAAAAAAEJO}
{\bkmkend AAAAAAAEJO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, url, code, msg, headers, args){\bkmkstart AAAAAAAEJO}
{\bkmkend AAAAAAAEJO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b args}{\bkmkstart AAAAAAAEJP}
{\bkmkend AAAAAAAEJP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b reason}{\bkmkstart AAAAAAAEJQ}
{\bkmkend AAAAAAAEJQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Raised to indicate there was an error authenticating with ClientLogin.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/upload.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CodeLocation Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CodeLocation}
{\xe \v testing::internal::CodeLocation}
{\bkmkstart AAAAAAACNN}
{\bkmkend AAAAAAACNN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b CodeLocation} (const string &a_file, int a_line){\bkmkstart AAAAAAACNO}
{\bkmkend AAAAAAACNO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

string {\b file}{\bkmkstart AAAAAAACNP}
{\bkmkend AAAAAAACNP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line}{\bkmkstart AAAAAAACNQ}
{\bkmkend AAAAAAACNQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTESTF Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTESTF}
{\xe \v testing::CodeLocationForTESTF}
{\bkmkstart AAAAAAABIT}
{\bkmkend AAAAAAABIT}
Inheritance diagram for testing::CodeLocationForTESTF:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_e_s_t_f__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::CodeLocationForTESTF:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_e_s_t_f__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTESTP Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTESTP}
{\xe \v testing::CodeLocationForTESTP}
{\bkmkstart AAAAAAABIU}
{\bkmkend AAAAAAABIU}
Inheritance diagram for testing::CodeLocationForTESTP:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_e_s_t_p__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::CodeLocationForTESTP:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_e_s_t_p__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTYPEDTEST< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTYPEDTEST< T >}
{\xe \v testing::CodeLocationForTYPEDTEST< T >}
{\bkmkstart AAAAAAABIV}
{\bkmkend AAAAAAABIV}
Inheritance diagram for testing::CodeLocationForTYPEDTEST< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::CodeLocationForTYPEDTEST< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CodeLocationForTYPEDTESTP< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::CodeLocationForTYPEDTESTP< T >}
{\xe \v testing::CodeLocationForTYPEDTESTP< T >}
{\bkmkstart AAAAAAABIW}
{\bkmkend AAAAAAABIW}
Inheritance diagram for testing::CodeLocationForTYPEDTESTP< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::CodeLocationForTYPEDTESTP< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.CodeNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.CodeNode}
{\xe \v pump.CodeNode}
{\bkmkstart AAAAAAAAZT}
{\bkmkend AAAAAAAAZT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, atomic_code_list=None){\bkmkstart AAAAAAAAZU}
{\bkmkend AAAAAAAAZU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b atomic_code}{\bkmkstart AAAAAAAAZV}
{\bkmkend AAAAAAAAZV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CommonTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v CommonTest< T >}
{\xe \v CommonTest< T >}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
Inheritance diagram for CommonTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_common_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for CommonTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_common_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::vector< T > {\b Vector}{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::set< int > {\b IntSet}{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b value_}{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T * {\b shared_} = NULL{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-typed-test_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ComparisonBase< D, Rhs, Op > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ComparisonBase< D, Rhs, Op >}
{\xe \v testing::internal::ComparisonBase< D, Rhs, Op >}
{\bkmkstart AAAAAAACNR}
{\bkmkend AAAAAAACNR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ComparisonBase} (const Rhs &rhs){\bkmkstart AAAAAAACNS}
{\bkmkend AAAAAAACNS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Lhs > {\b operator Matcher< Lhs >} () const{\bkmkstart AAAAAAACNT}
{\bkmkend AAAAAAACNT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CompileAssert< bool > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CompileAssert< bool >}
{\xe \v testing::internal::CompileAssert< bool >}
{\bkmkstart AAAAAAACNU}
{\bkmkend AAAAAAACNU}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CompileAssertTypesEqual< T1, T2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CompileAssertTypesEqual< T1, T2 >}
{\xe \v testing::internal::CompileAssertTypesEqual< T1, T2 >}
{\bkmkstart AAAAAAACNV}
{\bkmkend AAAAAAACNV}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::CompileAssertTypesEqual< T, T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::CompileAssertTypesEqual< T, T >}
{\xe \v testing::internal::CompileAssertTypesEqual< T, T >}
{\bkmkstart AAAAAAACNW}
{\bkmkend AAAAAAACNW}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::const_iterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::const_iterator}
{\xe \v testing::gtest_printers_test::const_iterator}
{\bkmkstart AAAAAAACGV}
{\bkmkend AAAAAAACGV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char {\b x}{\bkmkstart AAAAAAACGW}
{\bkmkend AAAAAAACGW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstAndNonConstCastable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstAndNonConstCastable}
{\xe \v testing::internal::ConstAndNonConstCastable}
{\bkmkstart AAAAAAACNX}
{\bkmkend AAAAAAACNX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstAndNonConstCastable} (bool *converted, bool *const_converted){\bkmkstart AAAAAAACNY}
{\bkmkend AAAAAAACNY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} (){\bkmkstart AAAAAAACNZ}
{\bkmkend AAAAAAACNZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} () const{\bkmkstart AAAAAAACOA}
{\bkmkend AAAAAAACOA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-port_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstCastable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstCastable}
{\xe \v testing::internal::ConstCastable}
{\bkmkstart AAAAAAACOB}
{\bkmkend AAAAAAACOB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstCastable} (bool *converted){\bkmkstart AAAAAAACOC}
{\bkmkend AAAAAAACOC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Base} () const{\bkmkstart AAAAAAACOD}
{\bkmkend AAAAAAACOD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-port_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ConstCharPtr Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ConstCharPtr}
{\xe \v testing::internal::ConstCharPtr}
{\bkmkstart AAAAAAACOE}
{\bkmkend AAAAAAACOE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstCharPtr} (const char *str){\bkmkstart AAAAAAACOF}
{\bkmkend AAAAAAACOF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator bool} () const{\bkmkstart AAAAAAACOG}
{\bkmkend AAAAAAACOG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b value}{\bkmkstart AAAAAAACOH}
{\bkmkend AAAAAAACOH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::ConstPropagatingPtr< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::ConstPropagatingPtr< T >}
{\xe \v testing::gmock_matchers_test::ConstPropagatingPtr< T >}
{\bkmkstart AAAAAAACAQ}
{\bkmkend AAAAAAACAQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b element_type}{\bkmkstart AAAAAAACAR}
{\bkmkend AAAAAAACAR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstPropagatingPtr} (T *t){\bkmkstart AAAAAAACAS}
{\bkmkend AAAAAAACAS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConstPropagatingPtr} (const {\b ConstPropagatingPtr} &other){\bkmkstart AAAAAAACAT}
{\bkmkend AAAAAAACAT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b get} (){\bkmkstart AAAAAAACAU}
{\bkmkend AAAAAAACAU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T & {\b operator*} (){\bkmkstart AAAAAAACAV}
{\bkmkend AAAAAAACAV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T * {\b get} () const{\bkmkstart AAAAAAACAW}
{\bkmkend AAAAAAACAW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b operator*} () const{\bkmkstart AAAAAAACAX}
{\bkmkend AAAAAAACAX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ContainerEqMatcher< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ContainerEqMatcher< Container >}
{\xe \v testing::internal::ContainerEqMatcher< Container >}
{\bkmkstart AAAAAAACOI}
{\bkmkend AAAAAAACOI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< Container > {\b View}{\bkmkstart AAAAAAACOJ}
{\bkmkend AAAAAAACOJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::type {\b StlContainer}{\bkmkstart AAAAAAACOK}
{\bkmkend AAAAAAACOK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::const_reference {\b StlContainerReference}{\bkmkstart AAAAAAACOL}
{\bkmkend AAAAAAACOL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ContainerEqMatcher} (const Container &expected){\bkmkstart AAAAAAACOM}
{\bkmkend AAAAAAACOM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACON}
{\bkmkend AAAAAAACON}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACOO}
{\bkmkend AAAAAAACOO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename LhsContainer > bool {\b MatchAndExplain} (const LhsContainer &lhs, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACOP}
{\bkmkend AAAAAAACOP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ContainsMatcher< M > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ContainsMatcher< M >}
{\xe \v testing::internal::ContainsMatcher< M >}
{\bkmkstart AAAAAAACOQ}
{\bkmkend AAAAAAACOQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ContainsMatcher} (M m){\bkmkstart AAAAAAACOR}
{\bkmkend AAAAAAACOR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAACOS}
{\bkmkend AAAAAAACOS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ContainsMatcherImpl< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ContainsMatcherImpl< Container >}
{\xe \v testing::internal::ContainsMatcherImpl< Container >}
{\bkmkstart AAAAAAACOT}
{\bkmkend AAAAAAACOT}
Inheritance diagram for testing::internal::ContainsMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_contains_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ContainsMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_contains_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InnerMatcher > {\b ContainsMatcherImpl} (InnerMatcher inner_matcher){\bkmkstart AAAAAAACOU}
{\bkmkend AAAAAAACOU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACOV}
{\bkmkend AAAAAAACOV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACOW}
{\bkmkend AAAAAAACOW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (Container container, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACOX}
{\bkmkend AAAAAAACOX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConversionHelperBase Class Reference\par \pard\plain 
{\tc\tcl2 \v ConversionHelperBase}
{\xe \v ConversionHelperBase}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
Inheritance diagram for ConversionHelperBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_conversion_helper_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConversionHelperDerived Class Reference\par \pard\plain 
{\tc\tcl2 \v ConversionHelperDerived}
{\xe \v ConversionHelperDerived}
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
Inheritance diagram for ConversionHelperDerived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_conversion_helper_derived__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ConversionHelperDerived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_conversion_helper_derived__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::ConvertibleFromAny Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::ConvertibleFromAny}
{\xe \v testing::gmock_matchers_test::ConvertibleFromAny}
{\bkmkstart AAAAAAACAY}
{\bkmkend AAAAAAACAY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConvertibleFromAny} (int a_value){\bkmkstart AAAAAAACAZ}
{\bkmkend AAAAAAACAZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b ConvertibleFromAny} (const T &){\bkmkstart AAAAAAACBA}
{\bkmkend AAAAAAACBA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value}{\bkmkstart AAAAAAACBB}
{\bkmkend AAAAAAACBB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ConvertibleToAssertionResult Struct Reference\par \pard\plain 
{\tc\tcl2 \v ConvertibleToAssertionResult}
{\xe \v ConvertibleToAssertionResult}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator AssertionResult} () const{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::ConvertibleToBool Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::ConvertibleToBool}
{\xe \v testing::gmock_matchers_test::ConvertibleToBool}
{\bkmkstart AAAAAAACBC}
{\bkmkend AAAAAAACBC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ConvertibleToBool} (int number){\bkmkstart AAAAAAACBD}
{\bkmkend AAAAAAACBD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator bool} () const{\bkmkstart AAAAAAACBE}
{\bkmkend AAAAAAACBE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Counter Class Reference\par \pard\plain 
{\tc\tcl2 \v Counter}
{\xe \v Counter}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Increment} (){\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Print} () const{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample4.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample4.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::CurrentTestInfoTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::CurrentTestInfoTest}
{\xe \v testing::CurrentTestInfoTest}
{\bkmkstart AAAAAAABIX}
{\bkmkend AAAAAAABIX}
Inheritance diagram for testing::CurrentTestInfoTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_current_test_info_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::CurrentTestInfoTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_current_test_info_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAABIY}
{\bkmkend AAAAAAABIY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAABIZ}
{\bkmkend AAAAAAABIZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.Cursor Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.Cursor}
{\xe \v pump.Cursor}
{\bkmkstart AAAAAAAAZW}
{\bkmkend AAAAAAAAZW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, line=-1, column=-1){\bkmkstart AAAAAAAAZX}
{\bkmkend AAAAAAAAZX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __eq__} (self, rhs){\bkmkstart AAAAAAAAZY}
{\bkmkend AAAAAAAAZY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __ne__} (self, rhs){\bkmkstart AAAAAAAAZZ}
{\bkmkend AAAAAAAAZZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __lt__} (self, rhs){\bkmkstart AAAAAAABAA}
{\bkmkend AAAAAAABAA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __le__} (self, rhs){\bkmkstart AAAAAAABAB}
{\bkmkend AAAAAAABAB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __gt__} (self, rhs){\bkmkstart AAAAAAABAC}
{\bkmkend AAAAAAABAC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __ge__} (self, rhs){\bkmkstart AAAAAAABAD}
{\bkmkend AAAAAAABAD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __add__} (self, offset){\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __sub__} (self, offset){\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b Clone} (self)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b line}{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b column}{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Represents a position (line and column) in a text file.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Clone\:pump::Cursor}
{\xe \v pump::Cursor\:Clone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def pump.Cursor.Clone (  {\i self})}}
\par
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns a copy of self.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DecayArray< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DecayArray< T >}
{\xe \v testing::internal::DecayArray< T >}
{\bkmkstart AAAAAAACOY}
{\bkmkend AAAAAAACOY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAACOZ}
{\bkmkend AAAAAAACOZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DecayArray< T[]> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DecayArray< T[]>}
{\xe \v testing::internal::DecayArray< T[]>}
{\bkmkstart AAAAAAACPA}
{\bkmkend AAAAAAACPA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const T * {\b type}{\bkmkstart AAAAAAACPB}
{\bkmkend AAAAAAACPB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DecayArray< T[N]> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DecayArray< T[N]>}
{\xe \v testing::internal::DecayArray< T[N]>}
{\bkmkstart AAAAAAACPC}
{\bkmkend AAAAAAACPC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const T * {\b type}{\bkmkstart AAAAAAACPD}
{\bkmkend AAAAAAACPD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DefaultGlobalTestPartResultReporter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DefaultGlobalTestPartResultReporter}
{\xe \v testing::internal::DefaultGlobalTestPartResultReporter}
{\bkmkstart AAAAAAACPE}
{\bkmkend AAAAAAACPE}
Inheritance diagram for testing::internal::DefaultGlobalTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_default_global_test_part_result_reporter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::DefaultGlobalTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_default_global_test_part_result_reporter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DefaultGlobalTestPartResultReporter} ({\b UnitTestImpl} *unit_test){\bkmkstart AAAAAAACPF}
{\bkmkend AAAAAAACPF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ReportTestPartResult} (const {\b TestPartResult} &result){\bkmkstart AAAAAAACPG}
{\bkmkend AAAAAAACPG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DefaultPerThreadTestPartResultReporter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DefaultPerThreadTestPartResultReporter}
{\xe \v testing::internal::DefaultPerThreadTestPartResultReporter}
{\bkmkstart AAAAAAACPH}
{\bkmkend AAAAAAACPH}
Inheritance diagram for testing::internal::DefaultPerThreadTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::DefaultPerThreadTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_default_per_thread_test_part_result_reporter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DefaultPerThreadTestPartResultReporter} ({\b UnitTestImpl} *unit_test){\bkmkstart AAAAAAACPI}
{\bkmkend AAAAAAACPI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ReportTestPartResult} (const {\b TestPartResult} &result){\bkmkstart AAAAAAACPJ}
{\bkmkend AAAAAAACPJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::DefaultValue< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::DefaultValue< T >}
{\xe \v testing::DefaultValue< T >}
{\bkmkstart AAAAAAABJA}
{\bkmkend AAAAAAABJA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T(* {\b FactoryFunction}) (){\bkmkstart AAAAAAABJB}
{\bkmkend AAAAAAABJB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Set} (T x){\bkmkstart AAAAAAABJC}
{\bkmkend AAAAAAABJC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetFactory} (FactoryFunction factory){\bkmkstart AAAAAAABJD}
{\bkmkend AAAAAAABJD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Clear} (){\bkmkstart AAAAAAABJE}
{\bkmkend AAAAAAABJE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b IsSet} (){\bkmkstart AAAAAAABJF}
{\bkmkend AAAAAAABJF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAABJG}
{\bkmkend AAAAAAABJG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T {\b Get} (){\bkmkstart AAAAAAABJH}
{\bkmkend AAAAAAABJH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::DefaultValue< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::DefaultValue< T & >}
{\xe \v testing::DefaultValue< T & >}
{\bkmkstart AAAAAAABJI}
{\bkmkend AAAAAAABJI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Set} (T &x){\bkmkstart AAAAAAABJJ}
{\bkmkend AAAAAAABJJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Clear} (){\bkmkstart AAAAAAABJK}
{\bkmkend AAAAAAABJK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b IsSet} (){\bkmkstart AAAAAAABJL}
{\bkmkend AAAAAAABJL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAABJM}
{\bkmkend AAAAAAABJM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static T & {\b Get} (){\bkmkstart AAAAAAABJN}
{\bkmkend AAAAAAABJN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::DefaultValue< void > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::DefaultValue< void >}
{\xe \v testing::DefaultValue< void >}
{\bkmkstart AAAAAAABJO}
{\bkmkend AAAAAAABJO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b Exists} (){\bkmkstart AAAAAAABJP}
{\bkmkend AAAAAAABJP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Get} (){\bkmkstart AAAAAAABJQ}
{\bkmkend AAAAAAABJQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Define Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Define}
{\xe \v cpp.ast.Define}
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
Inheritance diagram for cpp.ast.Define:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_define__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Define:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_define__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, definition){\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b name}{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b definition}{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Delete Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Delete}
{\xe \v cpp.ast.Delete}
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
Inheritance diagram for cpp.ast.Delete:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_delete__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Delete:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_delete__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::DeletionTester Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::DeletionTester}
{\xe \v testing::gmock_more_actions_test::DeletionTester}
{\bkmkstart AAAAAAACFD}
{\bkmkend AAAAAAACFD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DeletionTester} (bool *is_deleted){\bkmkstart AAAAAAACFE}
{\bkmkend AAAAAAACFE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Derived Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Derived}
{\xe \v testing::internal::Derived}
{\bkmkstart AAAAAAACPK}
{\bkmkend AAAAAAACPK}
Inheritance diagram for testing::internal::Derived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_derived__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Derived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_derived__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Derived} (int n){\bkmkstart AAAAAAACPL}
{\bkmkend AAAAAAACPL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-port_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Derived Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Derived}
{\xe \v testing::gmock_matchers_test::Derived}
{\bkmkstart AAAAAAACBF}
{\bkmkend AAAAAAACBF}
Inheritance diagram for testing::gmock_matchers_test::Derived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_derived__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::Derived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_derived__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b i}{\bkmkstart AAAAAAACBG}
{\bkmkend AAAAAAACBG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::DerivedClass Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::DerivedClass}
{\xe \v testing::gmock_matchers_test::DerivedClass}
{\bkmkstart AAAAAAACBH}
{\bkmkend AAAAAAACBH}
Inheritance diagram for testing::gmock_matchers_test::DerivedClass:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_derived_class__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::DerivedClass:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_derived_class__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b k} () const{\bkmkstart AAAAAAACBI}
{\bkmkend AAAAAAACBI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::DerivedStruct Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::DerivedStruct}
{\xe \v testing::gmock_matchers_test::DerivedStruct}
{\bkmkstart AAAAAAACBJ}
{\bkmkend AAAAAAACBJ}
Inheritance diagram for testing::gmock_matchers_test::DerivedStruct:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1gmock__matchers__test_1_1_derived_struct__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::DerivedStruct:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1gmock__matchers__test_1_1_derived_struct__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char {\b ch}{\bkmkstart AAAAAAACBK}
{\bkmkend AAAAAAACBK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
DisabledTest Class Reference\par \pard\plain 
{\tc\tcl2 \v DisabledTest}
{\xe \v DisabledTest}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
Inheritance diagram for DisabledTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_disabled_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for DisabledTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_disabled_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::DivisibleByImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::DivisibleByImpl}
{\xe \v testing::gmock_matchers_test::DivisibleByImpl}
{\bkmkstart AAAAAAACBL}
{\bkmkend AAAAAAACBL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DivisibleByImpl} (int a_divider){\bkmkstart AAAAAAACBM}
{\bkmkend AAAAAAACBM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > bool {\b MatchAndExplain} (const T &n, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACBN}
{\bkmkend AAAAAAACBN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACBO}
{\bkmkend AAAAAAACBO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (ostream *os) const{\bkmkstart AAAAAAACBP}
{\bkmkend AAAAAAACBP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_divider} (int a_divider){\bkmkstart AAAAAAACBQ}
{\bkmkend AAAAAAACBQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b divider} () const{\bkmkstart AAAAAAACBR}
{\bkmkend AAAAAAACBR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoBothAction< Action1, Action2 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoBothAction< Action1, Action2 >}
{\xe \v testing::internal::DoBothAction< Action1, Action2 >}
{\bkmkstart AAAAAAACPM}
{\bkmkend AAAAAAACPM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b DoBothAction} (Action1 action1, Action2 action2){\bkmkstart AAAAAAACPN}
{\bkmkend AAAAAAACPN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAACPO}
{\bkmkend AAAAAAACPO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DoDefaultAction Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DoDefaultAction}
{\xe \v testing::internal::DoDefaultAction}
{\bkmkstart AAAAAAACPP}
{\bkmkend AAAAAAACPP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAACPQ}
{\bkmkend AAAAAAACPQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::DummyMatchResultListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::DummyMatchResultListener}
{\xe \v testing::internal::DummyMatchResultListener}
{\bkmkstart AAAAAAACPR}
{\bkmkend AAAAAAACPR}
Inheritance diagram for testing::internal::DummyMatchResultListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_dummy_match_result_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::DummyMatchResultListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_dummy_match_result_listener__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EachMatcher< M > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EachMatcher< M >}
{\xe \v testing::internal::EachMatcher< M >}
{\bkmkstart AAAAAAACPS}
{\bkmkend AAAAAAACPS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EachMatcher} (M m){\bkmkstart AAAAAAACPT}
{\bkmkend AAAAAAACPT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAACPU}
{\bkmkend AAAAAAACPU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EachMatcherImpl< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EachMatcherImpl< Container >}
{\xe \v testing::internal::EachMatcherImpl< Container >}
{\bkmkstart AAAAAAACPV}
{\bkmkend AAAAAAACPV}
Inheritance diagram for testing::internal::EachMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_each_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::EachMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_each_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InnerMatcher > {\b EachMatcherImpl} (InnerMatcher inner_matcher){\bkmkstart AAAAAAACPW}
{\bkmkend AAAAAAACPW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACPX}
{\bkmkend AAAAAAACPX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACPY}
{\bkmkend AAAAAAACPY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (Container container, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACPZ}
{\bkmkend AAAAAAACPZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EitherOfMatcher< Matcher1, Matcher2 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EitherOfMatcher< Matcher1, Matcher2 >}
{\xe \v testing::internal::EitherOfMatcher< Matcher1, Matcher2 >}
{\bkmkstart AAAAAAACQA}
{\bkmkend AAAAAAACQA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EitherOfMatcher} (Matcher1 matcher1, Matcher2 matcher2){\bkmkstart AAAAAAACQB}
{\bkmkend AAAAAAACQB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator Matcher< T >} () const{\bkmkstart AAAAAAACQC}
{\bkmkend AAAAAAACQC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EitherOfMatcherImpl< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EitherOfMatcherImpl< T >}
{\xe \v testing::internal::EitherOfMatcherImpl< T >}
{\bkmkstart AAAAAAACQD}
{\bkmkend AAAAAAACQD}
Inheritance diagram for testing::internal::EitherOfMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_either_of_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::EitherOfMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_either_of_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EitherOfMatcherImpl} (const {\b Matcher}< T > &matcher1, const {\b Matcher}< T > &matcher2){\bkmkstart AAAAAAACQE}
{\bkmkend AAAAAAACQE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACQF}
{\bkmkend AAAAAAACQF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACQG}
{\bkmkend AAAAAAACQG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (T x, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACQH}
{\bkmkend AAAAAAACQH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ElementsAreArrayMatcher< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ElementsAreArrayMatcher< T >}
{\xe \v testing::internal::ElementsAreArrayMatcher< T >}
{\bkmkstart AAAAAAACQI}
{\bkmkend AAAAAAACQI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Iter > {\b ElementsAreArrayMatcher} (Iter first, Iter last){\bkmkstart AAAAAAACQJ}
{\bkmkend AAAAAAACQJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAACQK}
{\bkmkend AAAAAAACQK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ElementsAreMatcher< MatcherTuple > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ElementsAreMatcher< MatcherTuple >}
{\xe \v testing::internal::ElementsAreMatcher< MatcherTuple >}
{\bkmkstart AAAAAAACQL}
{\bkmkend AAAAAAACQL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ElementsAreMatcher} (const {\b MatcherTuple} &args){\bkmkstart AAAAAAACQM}
{\bkmkend AAAAAAACQM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAACQN}
{\bkmkend AAAAAAACQN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ElementsAreMatcherImpl< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ElementsAreMatcherImpl< Container >}
{\xe \v testing::internal::ElementsAreMatcherImpl< Container >}
{\bkmkstart AAAAAAACQO}
{\bkmkend AAAAAAACQO}
Inheritance diagram for testing::internal::ElementsAreMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_elements_are_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ElementsAreMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_elements_are_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< RawContainer > {\b View}{\bkmkstart AAAAAAACQP}
{\bkmkend AAAAAAACQP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::type {\b StlContainer}{\bkmkstart AAAAAAACQQ}
{\bkmkend AAAAAAACQQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::const_reference {\b StlContainerReference}{\bkmkstart AAAAAAACQR}
{\bkmkend AAAAAAACQR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef StlContainer::value_type {\b Element}{\bkmkstart AAAAAAACQS}
{\bkmkend AAAAAAACQS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_REFERENCE_AND_CONST_} (Container) RawContainer{\bkmkstart AAAAAAACQT}
{\bkmkend AAAAAAACQT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InputIter > {\b ElementsAreMatcherImpl} (InputIter first, InputIter last){\bkmkstart AAAAAAACQU}
{\bkmkend AAAAAAACQU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACQV}
{\bkmkend AAAAAAACQV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACQW}
{\bkmkend AAAAAAACQW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (Container container, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACQX}
{\bkmkend AAAAAAACQX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.ElseNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.ElseNode}
{\xe \v pump.ElseNode}
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, else_branch=None){\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b else_branch}{\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::EmptyTestEventListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::EmptyTestEventListener}
{\xe \v testing::EmptyTestEventListener}
{\bkmkstart AAAAAAABJR}
{\bkmkend AAAAAAABJR}
Inheritance diagram for testing::EmptyTestEventListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_empty_test_event_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::EmptyTestEventListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_empty_test_event_listener__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &){\bkmkstart AAAAAAABJS}
{\bkmkend AAAAAAABJS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationStart} (const {\b UnitTest} &, int){\bkmkstart AAAAAAABJT}
{\bkmkend AAAAAAABJT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &){\bkmkstart AAAAAAABJU}
{\bkmkend AAAAAAABJU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAABJV}
{\bkmkend AAAAAAABJV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseStart} (const {\b TestCase} &){\bkmkstart AAAAAAABJW}
{\bkmkend AAAAAAABJW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestStart} (const {\b TestInfo} &){\bkmkstart AAAAAAABJX}
{\bkmkend AAAAAAABJX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestPartResult} (const {\b TestPartResult} &){\bkmkstart AAAAAAABJY}
{\bkmkend AAAAAAABJY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestEnd} (const {\b TestInfo} &){\bkmkstart AAAAAAABJZ}
{\bkmkend AAAAAAABJZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseEnd} (const {\b TestCase} &){\bkmkstart AAAAAAABKA}
{\bkmkend AAAAAAABKA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &){\bkmkstart AAAAAAABKB}
{\bkmkend AAAAAAABKB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAABKC}
{\bkmkend AAAAAAABKC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &, int){\bkmkstart AAAAAAABKD}
{\bkmkend AAAAAAABKD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAABKE}
{\bkmkend AAAAAAABKE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EnableIf< bool > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EnableIf< bool >}
{\xe \v testing::internal::EnableIf< bool >}
{\bkmkstart AAAAAAACQY}
{\bkmkend AAAAAAACQY}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EnableIf< true > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EnableIf< true >}
{\xe \v testing::internal::EnableIf< true >}
{\bkmkstart AAAAAAACQZ}
{\bkmkend AAAAAAACQZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b type}{\bkmkstart AAAAAAACRA}
{\bkmkend AAAAAAACRA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EndsWithMatcher< StringType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EndsWithMatcher< StringType >}
{\xe \v testing::internal::EndsWithMatcher< StringType >}
{\bkmkstart AAAAAAACRB}
{\bkmkend AAAAAAACRB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EndsWithMatcher} (const StringType &suffix){\bkmkstart AAAAAAACRC}
{\bkmkend AAAAAAACRC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > bool {\b MatchAndExplain} (CharType *s, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACRD}
{\bkmkend AAAAAAACRD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcheeStringType > bool {\b MatchAndExplain} (const MatcheeStringType &s, {\b MatchResultListener} *) const{\bkmkstart AAAAAAACRE}
{\bkmkend AAAAAAACRE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACRF}
{\bkmkend AAAAAAACRF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACRG}
{\bkmkend AAAAAAACRG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Enum Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Enum}
{\xe \v cpp.ast.Enum}
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
Inheritance diagram for cpp.ast.Enum:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_enum__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Enum:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_enum__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.Env Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.Env}
{\xe \v pump.Env}
{\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self){\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Clone} (self){\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b PushVariable} (self, var, value){\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b PopVariable} (self){\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b PushRange} (self, var, lower, upper){\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b PopRange} (self){\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetValue} (self, identifier){\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b EvalExp} (self, exp){\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetRange} (self, identifier){\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b variables}{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ranges}{\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Environment Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Environment}
{\xe \v testing::Environment}
{\bkmkstart AAAAAAABKF}
{\bkmkend AAAAAAABKF}
Inheritance diagram for testing::Environment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_environment__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAABKG}
{\bkmkend AAAAAAABKG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAABKH}
{\bkmkend AAAAAAABKH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EnvironmentInvocationCatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EnvironmentInvocationCatcher}
{\xe \v testing::internal::EnvironmentInvocationCatcher}
{\bkmkstart AAAAAAACRH}
{\bkmkend AAAAAAACRH}
Inheritance diagram for testing::internal::EnvironmentInvocationCatcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_environment_invocation_catcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::EnvironmentInvocationCatcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_environment_invocation_catcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAACRI}
{\bkmkend AAAAAAACRI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAACRJ}
{\bkmkend AAAAAAACRJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-listener_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Eq2Matcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Eq2Matcher}
{\xe \v testing::internal::Eq2Matcher}
{\bkmkstart AAAAAAACRK}
{\bkmkend AAAAAAACRK}
Inheritance diagram for testing::internal::Eq2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_eq2_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Eq2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_eq2_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAACRL}
{\bkmkend AAAAAAACRL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EqHelper< lhs_is_null_literal > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EqHelper< lhs_is_null_literal >}
{\xe \v testing::internal::EqHelper< lhs_is_null_literal >}
{\bkmkstart AAAAAAACRM}
{\bkmkend AAAAAAACRM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > static {\b AssertionResult} {\b Compare} (const char *lhs_expression, const char *rhs_expression, const T1 &lhs, const T2 &rhs){\bkmkstart AAAAAAACRN}
{\bkmkend AAAAAAACRN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b AssertionResult} {\b Compare} (const char *lhs_expression, const char *rhs_expression, BiggestInt lhs, BiggestInt rhs){\bkmkstart AAAAAAACRO}
{\bkmkend AAAAAAACRO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EqHelper< true > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EqHelper< true >}
{\xe \v testing::internal::EqHelper< true >}
{\bkmkstart AAAAAAACRP}
{\bkmkend AAAAAAACRP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > static {\b AssertionResult} {\b Compare} (const char *lhs_expression, const char *rhs_expression, const T1 &lhs, const T2 &rhs, typename {\b EnableIf}<!{\b is_pointer}< T2 >::value >::type *=0){\bkmkstart AAAAAAACRQ}
{\bkmkend AAAAAAACRQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > static {\b AssertionResult} {\b Compare} (const char *lhs_expression, const char *rhs_expression, Secret *, T *rhs){\bkmkstart AAAAAAACRR}
{\bkmkend AAAAAAACRR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EqMatcher< Rhs > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EqMatcher< Rhs >}
{\xe \v testing::internal::EqMatcher< Rhs >}
{\bkmkstart AAAAAAACRS}
{\bkmkend AAAAAAACRS}
Inheritance diagram for testing::internal::EqMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_eq_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::EqMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_eq_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EqMatcher} (const Rhs &rhs){\bkmkstart AAAAAAACRT}
{\bkmkend AAAAAAACRT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAACRU}
{\bkmkend AAAAAAACRU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b NegatedDesc} (){\bkmkstart AAAAAAACRV}
{\bkmkend AAAAAAACRV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::EvenMatcherImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::EvenMatcherImpl}
{\xe \v testing::gmock_matchers_test::EvenMatcherImpl}
{\bkmkstart AAAAAAACBS}
{\bkmkend AAAAAAACBS}
Inheritance diagram for testing::gmock_matchers_test::EvenMatcherImpl:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::EvenMatcherImpl:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_even_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (int x, {\b MatchResultListener} *) const{\bkmkstart AAAAAAACBT}
{\bkmkend AAAAAAACBT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACBU}
{\bkmkend AAAAAAACBU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::EventRecordingListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::EventRecordingListener}
{\xe \v testing::internal::EventRecordingListener}
{\bkmkstart AAAAAAACRW}
{\bkmkend AAAAAAACRW}
Inheritance diagram for testing::internal::EventRecordingListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_event_recording_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::EventRecordingListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_event_recording_listener__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b EventRecordingListener} (const char *name){\bkmkstart AAAAAAACRX}
{\bkmkend AAAAAAACRX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &){\bkmkstart AAAAAAACRY}
{\bkmkend AAAAAAACRY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationStart} (const {\b UnitTest} &, int iteration){\bkmkstart AAAAAAACRZ}
{\bkmkend AAAAAAACRZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &){\bkmkstart AAAAAAACSA}
{\bkmkend AAAAAAACSA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAACSB}
{\bkmkend AAAAAAACSB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseStart} (const {\b TestCase} &){\bkmkstart AAAAAAACSC}
{\bkmkend AAAAAAACSC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestStart} (const {\b TestInfo} &){\bkmkstart AAAAAAACSD}
{\bkmkend AAAAAAACSD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestPartResult} (const {\b TestPartResult} &){\bkmkstart AAAAAAACSE}
{\bkmkend AAAAAAACSE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestEnd} (const {\b TestInfo} &){\bkmkstart AAAAAAACSF}
{\bkmkend AAAAAAACSF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseEnd} (const {\b TestCase} &){\bkmkstart AAAAAAACSG}
{\bkmkend AAAAAAACSG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &){\bkmkstart AAAAAAACSH}
{\bkmkend AAAAAAACSH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAACSI}
{\bkmkend AAAAAAACSI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &, int iteration){\bkmkstart AAAAAAACSJ}
{\bkmkend AAAAAAACSJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAACSK}
{\bkmkend AAAAAAACSK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-listener_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ExcessiveArg Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ExcessiveArg}
{\xe \v testing::internal::ExcessiveArg}
{\bkmkstart AAAAAAACSL}
{\bkmkend AAAAAAACSL}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Expectation Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Expectation}
{\xe \v testing::Expectation}
{\bkmkstart AAAAAAABKI}
{\bkmkend AAAAAAABKI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Expectation} ({\b internal::ExpectationBase} &exp){\bkmkstart AAAAAAABKJ}
{\bkmkend AAAAAAABKJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b Expectation} &rhs) const{\bkmkstart AAAAAAABKK}
{\bkmkend AAAAAAABKK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator!=} (const {\b Expectation} &rhs) const{\bkmkstart AAAAAAABKL}
{\bkmkend AAAAAAABKL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ExpectationSet}{\bkmkstart AAAAAAABKM}
{\bkmkend AAAAAAABKM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Sequence}{\bkmkstart AAAAAAABKN}
{\bkmkend AAAAAAABKN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ::testing::internal::ExpectationBase}{\bkmkstart AAAAAAABKO}
{\bkmkend AAAAAAABKO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ::testing::internal::UntypedFunctionMockerBase}{\bkmkstart AAAAAAABKP}
{\bkmkend AAAAAAABKP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > class {\b ::testing::internal::FunctionMockerBase}{\bkmkstart AAAAAAABKQ}
{\bkmkend AAAAAAABKQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > class {\b ::testing::internal::TypedExpectation}{\bkmkstart AAAAAAABKR}
{\bkmkend AAAAAAABKR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-spec-builders.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ExpectationBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ExpectationBase}
{\xe \v testing::internal::ExpectationBase}
{\bkmkstart AAAAAAACSM}
{\bkmkend AAAAAAACSM}
Inheritance diagram for testing::internal::ExpectationBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_expectation_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ExpectationBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_expectation_base__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ExpectationBase} (const char *file, int line, const string &source_text){\bkmkstart AAAAAAACSN}
{\bkmkend AAAAAAACSN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file} () const{\bkmkstart AAAAAAACSO}
{\bkmkend AAAAAAACSO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line} () const{\bkmkstart AAAAAAACSP}
{\bkmkend AAAAAAACSP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b source_text} () const{\bkmkstart AAAAAAACSQ}
{\bkmkend AAAAAAACSQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b Cardinality} & {\b cardinality} () const{\bkmkstart AAAAAAACSR}
{\bkmkend AAAAAAACSR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeLocationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACSS}
{\bkmkend AAAAAAACSS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeCallCountTo} (::std::ostream *os) const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACST}
{\bkmkend AAAAAAACST}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b MaybeDescribeExtraMatcherTo} (::std::ostream *os)=0{\bkmkstart AAAAAAACSU}
{\bkmkend AAAAAAACSU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Clause} \{ {\b kNone}, 
{\b kWith}, 
{\b kTimes}, 
{\b kInSequence}, 
{\b kAfter}, 
{\b kWillOnce}, 
{\b kWillRepeatedly}, 
{\b kRetiresOnSaturation}
 \}{\bkmkstart AAAAAAACSV}
{\bkmkend AAAAAAACSV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::vector< const void * > {\b UntypedActions}{\bkmkstart AAAAAAACSW}
{\bkmkend AAAAAAACSW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b Expectation} {\b GetHandle} ()=0{\bkmkstart AAAAAAACSX}
{\bkmkend AAAAAAACSX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AssertSpecProperty} (bool property, const string &failure_message) const{\bkmkstart AAAAAAACSY}
{\bkmkend AAAAAAACSY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ExpectSpecProperty} (bool property, const string &failure_message) const{\bkmkstart AAAAAAACSZ}
{\bkmkend AAAAAAACSZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SpecifyCardinality} (const {\b Cardinality} &cardinality){\bkmkstart AAAAAAACTA}
{\bkmkend AAAAAAACTA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b cardinality_specified} () const{\bkmkstart AAAAAAACTB}
{\bkmkend AAAAAAACTB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_cardinality} (const {\b Cardinality} &a_cardinality){\bkmkstart AAAAAAACTC}
{\bkmkend AAAAAAACTC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RetireAllPreRequisites} () GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTD}
{\bkmkend AAAAAAACTD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b is_retired} () const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTE}
{\bkmkend AAAAAAACTE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Retire} () GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTF}
{\bkmkend AAAAAAACTF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsSatisfied} () const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTG}
{\bkmkend AAAAAAACTG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsSaturated} () const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTH}
{\bkmkend AAAAAAACTH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsOverSaturated} () const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTI}
{\bkmkend AAAAAAACTI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b AllPrerequisitesAreSatisfied} () const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTJ}
{\bkmkend AAAAAAACTJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b FindUnsatisfiedPrerequisites} ({\b ExpectationSet} *result) const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTK}
{\bkmkend AAAAAAACTK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b call_count} () const GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTL}
{\bkmkend AAAAAAACTL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b IncrementCallCount} () GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAACTM}
{\bkmkend AAAAAAACTM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b CheckActionCountIfNotDone} () const GTEST_LOCK_EXCLUDED_(mutex_){\bkmkstart AAAAAAACTN}
{\bkmkend AAAAAAACTN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b UntypedTimes} (const {\b Cardinality} &a_cardinality){\bkmkstart AAAAAAACTO}
{\bkmkend AAAAAAACTO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTEST_DISALLOW_ASSIGN_} ({\b ExpectationBase}){\bkmkstart AAAAAAACTP}
{\bkmkend AAAAAAACTP}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file_}{\bkmkstart AAAAAAACTQ}
{\bkmkend AAAAAAACTQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line_}{\bkmkstart AAAAAAACTR}
{\bkmkend AAAAAAACTR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const string {\b source_text_}{\bkmkstart AAAAAAACTS}
{\bkmkend AAAAAAACTS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b cardinality_specified_}{\bkmkstart AAAAAAACTT}
{\bkmkend AAAAAAACTT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Cardinality} {\b cardinality_}{\bkmkstart AAAAAAACTU}
{\bkmkend AAAAAAACTU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ExpectationSet} {\b immediate_prerequisites_}{\bkmkstart AAAAAAACTV}
{\bkmkend AAAAAAACTV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b call_count_}{\bkmkstart AAAAAAACTW}
{\bkmkend AAAAAAACTW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b retired_}{\bkmkstart AAAAAAACTX}
{\bkmkend AAAAAAACTX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

UntypedActions {\b untyped_actions_}{\bkmkstart AAAAAAACTY}
{\bkmkend AAAAAAACTY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b extra_matcher_specified_}{\bkmkstart AAAAAAACTZ}
{\bkmkend AAAAAAACTZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b repeated_action_specified_}{\bkmkstart AAAAAAACUA}
{\bkmkend AAAAAAACUA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b retires_on_saturation_}{\bkmkstart AAAAAAACUB}
{\bkmkend AAAAAAACUB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Clause {\b last_clause_}{\bkmkstart AAAAAAACUC}
{\bkmkend AAAAAAACUC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b action_count_checked_}{\bkmkstart AAAAAAACUD}
{\bkmkend AAAAAAACUD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Mutex} {\b mutex_}{\bkmkstart AAAAAAACUE}
{\bkmkend AAAAAAACUE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ::testing::Expectation}{\bkmkstart AAAAAAACUF}
{\bkmkend AAAAAAACUF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b UntypedFunctionMockerBase}{\bkmkstart AAAAAAACUG}
{\bkmkend AAAAAAACUG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ::testing::Sequence}{\bkmkstart AAAAAAACUH}
{\bkmkend AAAAAAACUH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ::testing::internal::ExpectationTester}{\bkmkstart AAAAAAACUI}
{\bkmkend AAAAAAACUI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > class {\b TypedExpectation}{\bkmkstart AAAAAAACUJ}
{\bkmkend AAAAAAACUJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-spec-builders.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::ExpectationSet Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::ExpectationSet}
{\xe \v testing::ExpectationSet}
{\bkmkstart AAAAAAABKS}
{\bkmkend AAAAAAABKS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Expectation::Set::const_iterator {\b const_iterator}{\bkmkstart AAAAAAABKT}
{\bkmkend AAAAAAABKT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Expectation::Set::value_type {\b value_type}{\bkmkstart AAAAAAABKU}
{\bkmkend AAAAAAABKU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ExpectationSet} ({\b internal::ExpectationBase} &exp){\bkmkstart AAAAAAABKV}
{\bkmkend AAAAAAABKV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ExpectationSet} (const {\b Expectation} &e){\bkmkstart AAAAAAABKW}
{\bkmkend AAAAAAABKW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b ExpectationSet} &rhs) const{\bkmkstart AAAAAAABKX}
{\bkmkend AAAAAAABKX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator!=} (const {\b ExpectationSet} &rhs) const{\bkmkstart AAAAAAABKY}
{\bkmkend AAAAAAABKY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ExpectationSet} & {\b operator+=} (const {\b Expectation} &e){\bkmkstart AAAAAAABKZ}
{\bkmkend AAAAAAABKZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b size} () const{\bkmkstart AAAAAAABLA}
{\bkmkend AAAAAAABLA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b begin} () const{\bkmkstart AAAAAAABLB}
{\bkmkend AAAAAAABLB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b end} () const{\bkmkstart AAAAAAABLC}
{\bkmkend AAAAAAABLC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ExpectationTester Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ExpectationTester}
{\xe \v testing::internal::ExpectationTester}
{\bkmkstart AAAAAAACUK}
{\bkmkend AAAAAAACUK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetCallCount} (int n, {\b ExpectationBase} *exp){\bkmkstart AAAAAAACUL}
{\bkmkend AAAAAAACUL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-spec-builders_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ExpectFailureTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ExpectFailureTest}
{\xe \v ExpectFailureTest}
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
Inheritance diagram for ExpectFailureTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_expect_failure_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ExpectFailureTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_expect_failure_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b FailureMode} \{ {\b FATAL_FAILURE}, 
{\b NONFATAL_FAILURE}
 \}{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b AddFailure} (FailureMode failure){\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.ExpNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.ExpNode}
{\xe \v pump.ExpNode}
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, token, python_exp){\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b token}{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b python_exp}{\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Expr Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Expr}
{\xe \v cpp.ast.Expr}
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
Inheritance diagram for cpp.ast.Expr:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_expr__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Expr:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_expr__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, expr){\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Requires} (self, node){\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b expr}{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FailedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FailedTest}
{\xe \v FailedTest}
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
Inheritance diagram for FailedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_failed_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for FailedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_failed_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FailingParamTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FailingParamTest}
{\xe \v FailingParamTest}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
Inheritance diagram for FailingParamTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_failing_param_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for FailingParamTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_failing_param_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FatalFailureInFixtureConstructorTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FatalFailureInFixtureConstructorTest}
{\xe \v FatalFailureInFixtureConstructorTest}
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
Inheritance diagram for FatalFailureInFixtureConstructorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fatal_failure_in_fixture_constructor_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for FatalFailureInFixtureConstructorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fatal_failure_in_fixture_constructor_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FatalFailureInSetUpTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FatalFailureInSetUpTest}
{\xe \v FatalFailureInSetUpTest}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
Inheritance diagram for FatalFailureInSetUpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fatal_failure_in_set_up_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for FatalFailureInSetUpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fatal_failure_in_set_up_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FieldHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v FieldHelper}
{\xe \v FieldHelper}
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FieldHelper} (int a_field){\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b field} () const{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b field_}{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FieldMatcher< Class, FieldType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FieldMatcher< Class, FieldType >}
{\xe \v testing::internal::FieldMatcher< Class, FieldType >}
{\bkmkstart AAAAAAACUM}
{\bkmkend AAAAAAACUM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FieldMatcher} (FieldType Class::*field, const {\b Matcher}< const FieldType &> &matcher){\bkmkstart AAAAAAACUN}
{\bkmkend AAAAAAACUN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACUO}
{\bkmkend AAAAAAACUO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACUP}
{\bkmkend AAAAAAACUP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > bool {\b MatchAndExplain} (const T &value, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACUQ}
{\bkmkend AAAAAAACUQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FilePath Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FilePath}
{\xe \v testing::internal::FilePath}
{\bkmkstart AAAAAAACUR}
{\bkmkend AAAAAAACUR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FilePath} (const {\b FilePath} &rhs){\bkmkstart AAAAAAACUS}
{\bkmkend AAAAAAACUS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FilePath} (const std::string &pathname){\bkmkstart AAAAAAACUT}
{\bkmkend AAAAAAACUT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FilePath} & {\b operator=} (const {\b FilePath} &rhs){\bkmkstart AAAAAAACUU}
{\bkmkend AAAAAAACUU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Set} (const {\b FilePath} &rhs){\bkmkstart AAAAAAACUV}
{\bkmkend AAAAAAACUV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::string & {\b string} () const{\bkmkstart AAAAAAACUW}
{\bkmkend AAAAAAACUW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b c_str} () const{\bkmkstart AAAAAAACUX}
{\bkmkend AAAAAAACUX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsEmpty} () const{\bkmkstart AAAAAAACUY}
{\bkmkend AAAAAAACUY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FilePath} {\b RemoveTrailingPathSeparator} () const{\bkmkstart AAAAAAACUZ}
{\bkmkend AAAAAAACUZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FilePath} {\b RemoveDirectoryName} () const{\bkmkstart AAAAAAACVA}
{\bkmkend AAAAAAACVA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FilePath} {\b RemoveFileName} () const{\bkmkstart AAAAAAACVB}
{\bkmkend AAAAAAACVB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FilePath} {\b RemoveExtension} (const char *extension) const{\bkmkstart AAAAAAACVC}
{\bkmkend AAAAAAACVC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b CreateDirectoriesRecursively} () const{\bkmkstart AAAAAAACVD}
{\bkmkend AAAAAAACVD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b CreateFolder} () const{\bkmkstart AAAAAAACVE}
{\bkmkend AAAAAAACVE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b FileOrDirectoryExists} () const{\bkmkstart AAAAAAACVF}
{\bkmkend AAAAAAACVF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b DirectoryExists} () const{\bkmkstart AAAAAAACVG}
{\bkmkend AAAAAAACVG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsDirectory} () const{\bkmkstart AAAAAAACVH}
{\bkmkend AAAAAAACVH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsRootDirectory} () const{\bkmkstart AAAAAAACVI}
{\bkmkend AAAAAAACVI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsAbsolutePath} () const{\bkmkstart AAAAAAACVJ}
{\bkmkend AAAAAAACVJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b FilePath} {\b GetCurrentDir} (){\bkmkstart AAAAAAACVK}
{\bkmkend AAAAAAACVK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b FilePath} {\b MakeFileName} (const {\b FilePath} &directory, const {\b FilePath} &base_name, int number, const char *extension){\bkmkstart AAAAAAACVL}
{\bkmkend AAAAAAACVL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b FilePath} {\b ConcatPaths} (const {\b FilePath} &directory, const {\b FilePath} &relative_path){\bkmkstart AAAAAAACVM}
{\bkmkend AAAAAAACVM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b FilePath} {\b GenerateUniqueFileName} (const {\b FilePath} &directory, const {\b FilePath} &base_name, const char *extension){\bkmkstart AAAAAAACVN}
{\bkmkend AAAAAAACVN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-filepath.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-filepath.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FinalSuccessChecker Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FinalSuccessChecker}
{\xe \v testing::internal::FinalSuccessChecker}
{\bkmkstart AAAAAAACVO}
{\bkmkend AAAAAAACVO}
Inheritance diagram for testing::internal::FinalSuccessChecker:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_final_success_checker__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FinalSuccessChecker:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_final_success_checker__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAACVP}
{\bkmkend AAAAAAACVP}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-unittest-api_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Flags Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::Flags}
{\xe \v testing::Flags}
{\bkmkstart AAAAAAABLD}
{\bkmkend AAAAAAABLD}
Collaboration diagram for testing::Flags:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1_flags__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b AlsoRunDisabledTests} (bool also_run_disabled_tests){\bkmkstart AAAAAAABLE}
{\bkmkend AAAAAAABLE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b BreakOnFailure} (bool break_on_failure){\bkmkstart AAAAAAABLF}
{\bkmkend AAAAAAABLF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b CatchExceptions} (bool catch_exceptions){\bkmkstart AAAAAAABLG}
{\bkmkend AAAAAAABLG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b DeathTestUseFork} (bool death_test_use_fork){\bkmkstart AAAAAAABLH}
{\bkmkend AAAAAAABLH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Filter} (const char *filter){\bkmkstart AAAAAAABLI}
{\bkmkend AAAAAAABLI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b ListTests} (bool list_tests){\bkmkstart AAAAAAABLJ}
{\bkmkend AAAAAAABLJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Output} (const char *output){\bkmkstart AAAAAAABLK}
{\bkmkend AAAAAAABLK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b PrintTime} (bool print_time){\bkmkstart AAAAAAABLL}
{\bkmkend AAAAAAABLL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b RandomSeed} (Int32 random_seed){\bkmkstart AAAAAAABLM}
{\bkmkend AAAAAAABLM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Repeat} (Int32 repeat){\bkmkstart AAAAAAABLN}
{\bkmkend AAAAAAABLN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b Shuffle} (bool shuffle){\bkmkstart AAAAAAABLO}
{\bkmkend AAAAAAABLO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b StackTraceDepth} (Int32 stack_trace_depth){\bkmkstart AAAAAAABLP}
{\bkmkend AAAAAAABLP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b StreamResultTo} (const char *stream_result_to){\bkmkstart AAAAAAABLQ}
{\bkmkend AAAAAAABLQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Flags} {\b ThrowOnFailure} (bool throw_on_failure){\bkmkstart AAAAAAABLR}
{\bkmkend AAAAAAABLR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b also_run_disabled_tests}{\bkmkstart AAAAAAABLS}
{\bkmkend AAAAAAABLS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b break_on_failure}{\bkmkstart AAAAAAABLT}
{\bkmkend AAAAAAABLT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b catch_exceptions}{\bkmkstart AAAAAAABLU}
{\bkmkend AAAAAAABLU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b death_test_use_fork}{\bkmkstart AAAAAAABLV}
{\bkmkend AAAAAAABLV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b filter}{\bkmkstart AAAAAAABLW}
{\bkmkend AAAAAAABLW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b list_tests}{\bkmkstart AAAAAAABLX}
{\bkmkend AAAAAAABLX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b output}{\bkmkstart AAAAAAABLY}
{\bkmkend AAAAAAABLY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b print_time}{\bkmkstart AAAAAAABLZ}
{\bkmkend AAAAAAABLZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Int32 {\b random_seed}{\bkmkstart AAAAAAABMA}
{\bkmkend AAAAAAABMA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Int32 {\b repeat}{\bkmkstart AAAAAAABMB}
{\bkmkend AAAAAAABMB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b shuffle}{\bkmkstart AAAAAAABMC}
{\bkmkend AAAAAAABMC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Int32 {\b stack_trace_depth}{\bkmkstart AAAAAAABMD}
{\bkmkend AAAAAAABMD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b stream_result_to}{\bkmkstart AAAAAAABME}
{\bkmkend AAAAAAABME}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b throw_on_failure}{\bkmkstart AAAAAAABMF}
{\bkmkend AAAAAAABMF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FloatingEqMatcher< FloatType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FloatingEqMatcher< FloatType >}
{\xe \v testing::internal::FloatingEqMatcher< FloatType >}
{\bkmkstart AAAAAAACVQ}
{\bkmkend AAAAAAACVQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Impl}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FloatingEqMatcher} (FloatType expected, bool nan_eq_nan){\bkmkstart AAAAAAACVR}
{\bkmkend AAAAAAACVR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FloatingEqMatcher} (FloatType expected, bool nan_eq_nan, FloatType max_abs_error){\bkmkstart AAAAAAACVS}
{\bkmkend AAAAAAACVS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Matcher< FloatType >} () const{\bkmkstart AAAAAAACVT}
{\bkmkend AAAAAAACVT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Matcher< const FloatType & >} () const{\bkmkstart AAAAAAACVU}
{\bkmkend AAAAAAACVU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator Matcher< FloatType & >} () const{\bkmkstart AAAAAAACVV}
{\bkmkend AAAAAAACVV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FloatingPoint< RawType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FloatingPoint< RawType >}
{\xe \v testing::internal::FloatingPoint< RawType >}
{\bkmkstart AAAAAAACWB}
{\bkmkend AAAAAAACWB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b TypeWithSize}< sizeof(RawType)>::UInt {\b Bits}{\bkmkstart AAAAAAACWC}
{\bkmkend AAAAAAACWC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FloatingPoint} (const RawType &x){\bkmkstart AAAAAAACWD}
{\bkmkend AAAAAAACWD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const Bits & {\b bits} () const{\bkmkstart AAAAAAACWE}
{\bkmkend AAAAAAACWE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Bits {\b exponent_bits} () const{\bkmkstart AAAAAAACWF}
{\bkmkend AAAAAAACWF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Bits {\b fraction_bits} () const{\bkmkstart AAAAAAACWG}
{\bkmkend AAAAAAACWG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Bits {\b sign_bit} () const{\bkmkstart AAAAAAACWH}
{\bkmkend AAAAAAACWH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b is_nan} () const{\bkmkstart AAAAAAACWI}
{\bkmkend AAAAAAACWI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b AlmostEquals} (const {\b FloatingPoint} &rhs) const{\bkmkstart AAAAAAACWJ}
{\bkmkend AAAAAAACWJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<> float {\b Max} (){\bkmkstart AAAAAAACWK}
{\bkmkend AAAAAAACWK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<> double {\b Max} (){\bkmkstart AAAAAAACWL}
{\bkmkend AAAAAAACWL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static RawType {\b ReinterpretBits} (const Bits bits){\bkmkstart AAAAAAACWM}
{\bkmkend AAAAAAACWM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static RawType {\b Infinity} (){\bkmkstart AAAAAAACWN}
{\bkmkend AAAAAAACWN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static RawType {\b Max} (){\bkmkstart AAAAAAACWO}
{\bkmkend AAAAAAACWO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const size_t {\b kBitCount} = 8*sizeof(RawType){\bkmkstart AAAAAAACWP}
{\bkmkend AAAAAAACWP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const size_t {\b kFractionBitCount}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const size_t {\b kExponentBitCount} = kBitCount - 1 - kFractionBitCount{\bkmkstart AAAAAAACWQ}
{\bkmkend AAAAAAACWQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const Bits {\b kSignBitMask} = static_cast<Bits>(1) << (kBitCount - 1){\bkmkstart AAAAAAACWR}
{\bkmkend AAAAAAACWR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const Bits {\b kFractionBitMask}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const Bits {\b kExponentBitMask} = ~(kSignBitMask | kFractionBitMask){\bkmkstart AAAAAAACWS}
{\bkmkend AAAAAAACWS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const size_t {\b kMaxUlps} = 4{\bkmkstart AAAAAAACWT}
{\bkmkend AAAAAAACWT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v kFractionBitCount\:testing::internal::FloatingPoint}
{\xe \v testing::internal::FloatingPoint\:kFractionBitCount}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename RawType> const size_t {\b testing::internal::FloatingPoint}< RawType >::kFractionBitCount{\f2 [static]}}}
\par
{\bkmkstart AAAAAAACWU}
{\bkmkend AAAAAAACWU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
    std::numeric_limits<RawType>::digits - 1\par
}
}
{\xe \v kFractionBitMask\:testing::internal::FloatingPoint}
{\xe \v testing::internal::FloatingPoint\:kFractionBitMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename RawType> const Bits {\b testing::internal::FloatingPoint}< RawType >::kFractionBitMask{\f2 [static]}}}
\par
{\bkmkstart AAAAAAACWV}
{\bkmkend AAAAAAACWV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
    ~static_cast<Bits>(0) >> (kExponentBitCount + 1)\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::FloatingPointNearTest< RawType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::FloatingPointNearTest< RawType >}
{\xe \v testing::gmock_matchers_test::FloatingPointNearTest< RawType >}
{\bkmkstart AAAAAAACBV}
{\bkmkend AAAAAAACBV}
Inheritance diagram for testing::gmock_matchers_test::FloatingPointNearTest< RawType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::FloatingPointNearTest< RawType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_floating_point_near_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b FloatingPointTest}< RawType > {\b ParentType}{\bkmkstart AAAAAAACBW}
{\bkmkend AAAAAAACBW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b TestNearMatches} ({\b testing::internal::FloatingEqMatcher}< RawType >(*matcher_maker)(RawType, RawType)){\bkmkstart AAAAAAACBX}
{\bkmkend AAAAAAACBX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::FloatingPointTest< RawType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::FloatingPointTest< RawType >}
{\xe \v testing::gmock_matchers_test::FloatingPointTest< RawType >}
{\bkmkstart AAAAAAACBY}
{\bkmkend AAAAAAACBY}
Inheritance diagram for testing::gmock_matchers_test::FloatingPointTest< RawType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_floating_point_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::FloatingPointTest< RawType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_floating_point_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b testing::internal::FloatingPoint}< RawType > {\b Floating}{\bkmkstart AAAAAAACBZ}
{\bkmkend AAAAAAACBZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Floating::Bits {\b Bits}{\bkmkstart AAAAAAACCA}
{\bkmkend AAAAAAACCA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b TestSize} (){\bkmkstart AAAAAAACCB}
{\bkmkend AAAAAAACCB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b TestMatches} ({\b testing::internal::FloatingEqMatcher}< RawType >(*matcher_maker)(RawType)){\bkmkstart AAAAAAACCC}
{\bkmkend AAAAAAACCC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const size_t {\b max_ulps_}{\bkmkstart AAAAAAACCD}
{\bkmkend AAAAAAACCD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const Bits {\b zero_bits_}{\bkmkstart AAAAAAACCE}
{\bkmkend AAAAAAACCE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const Bits {\b one_bits_}{\bkmkstart AAAAAAACCF}
{\bkmkend AAAAAAACCF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const Bits {\b infinity_bits_}{\bkmkstart AAAAAAACCG}
{\bkmkend AAAAAAACCG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b close_to_positive_zero_}{\bkmkstart AAAAAAACCH}
{\bkmkend AAAAAAACCH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b close_to_negative_zero_}{\bkmkstart AAAAAAACCI}
{\bkmkend AAAAAAACCI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b further_from_negative_zero_}{\bkmkstart AAAAAAACCJ}
{\bkmkend AAAAAAACCJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b close_to_one_}{\bkmkstart AAAAAAACCK}
{\bkmkend AAAAAAACCK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b further_from_one_}{\bkmkstart AAAAAAACCL}
{\bkmkend AAAAAAACCL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b infinity_}{\bkmkstart AAAAAAACCM}
{\bkmkend AAAAAAACCM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b close_to_infinity_}{\bkmkstart AAAAAAACCN}
{\bkmkend AAAAAAACCN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b further_from_infinity_}{\bkmkstart AAAAAAACCO}
{\bkmkend AAAAAAACCO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b max_}{\bkmkstart AAAAAAACCP}
{\bkmkend AAAAAAACCP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b nan1_}{\bkmkstart AAAAAAACCQ}
{\bkmkend AAAAAAACCQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const RawType {\b nan2_}{\bkmkstart AAAAAAACCR}
{\bkmkend AAAAAAACCR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::Foo Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::Foo}
{\xe \v testing::gtest_printers_test::Foo}
{\bkmkstart AAAAAAACGX}
{\bkmkend AAAAAAACGX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b MyMethod} (char x){\bkmkstart AAAAAAACGY}
{\bkmkend AAAAAAACGY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char {\b MyVirtualMethod} (int){\bkmkstart AAAAAAACGZ}
{\bkmkend AAAAAAACGZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value}{\bkmkstart AAAAAAACHA}
{\bkmkend AAAAAAACHA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::Foo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::Foo}
{\xe \v testing::gmock_more_actions_test::Foo}
{\bkmkstart AAAAAAACFF}
{\bkmkend AAAAAAACFF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Nullary} () const{\bkmkstart AAAAAAACFG}
{\bkmkend AAAAAAACFG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

short {\b Unary} (long x){\bkmkstart AAAAAAACFH}
{\bkmkend AAAAAAACFH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

string {\b Binary} (const string &str, char c) const{\bkmkstart AAAAAAACFI}
{\bkmkend AAAAAAACFI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Ternary} (int x, bool y, char z){\bkmkstart AAAAAAACFJ}
{\bkmkend AAAAAAACFJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOf4} (int a, int b, int c, int d) const{\bkmkstart AAAAAAACFK}
{\bkmkend AAAAAAACFK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOfLast2} ({\b Unused}, {\b Unused}, int a, int b) const{\bkmkstart AAAAAAACFL}
{\bkmkend AAAAAAACFL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOf5} (int a, int b, int c, int d, int e){\bkmkstart AAAAAAACFM}
{\bkmkend AAAAAAACFM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b SumOf6} (int a, int b, int c, int d, int e, int f){\bkmkstart AAAAAAACFN}
{\bkmkend AAAAAAACFN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

string {\b Concat7} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7){\bkmkstart AAAAAAACFO}
{\bkmkend AAAAAAACFO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

string {\b Concat8} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7, const char *s8){\bkmkstart AAAAAAACFP}
{\bkmkend AAAAAAACFP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

string {\b Concat9} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7, const char *s8, const char *s9){\bkmkstart AAAAAAACFQ}
{\bkmkend AAAAAAACFQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

string {\b Concat10} (const char *s1, const char *s2, const char *s3, const char *s4, const char *s5, const char *s6, const char *s7, const char *s8, const char *s9, const char *s10){\bkmkstart AAAAAAACFR}
{\bkmkend AAAAAAACFR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::Foo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::Foo}
{\xe \v testing::gmock_nice_strict_test::Foo}
{\bkmkstart AAAAAAACGC}
{\bkmkend AAAAAAACGC}
Inheritance diagram for testing::gmock_nice_strict_test::Foo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__nice__strict__test_1_1_foo__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DoThis} ()=0{\bkmkstart AAAAAAACGD}
{\bkmkend AAAAAAACGD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b DoThat} (bool flag)=0{\bkmkstart AAAAAAACGE}
{\bkmkend AAAAAAACGE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FooEnvironment Class Reference\par \pard\plain 
{\tc\tcl2 \v FooEnvironment}
{\xe \v FooEnvironment}
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
Inheritance diagram for FooEnvironment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_foo_environment__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for FooEnvironment:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_foo_environment__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::FooInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::FooInterface}
{\xe \v testing::gmock_generated_function_mockers_test::FooInterface}
{\bkmkstart AAAAAAABXS}
{\bkmkend AAAAAAABXS}
Inheritance diagram for testing::gmock_generated_function_mockers_test::FooInterface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_foo_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidReturning} (int x)=0{\bkmkstart AAAAAAABXT}
{\bkmkend AAAAAAABXT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b Nullary} ()=0{\bkmkstart AAAAAAABXU}
{\bkmkend AAAAAAABXU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b Unary} (int x)=0{\bkmkstart AAAAAAABXV}
{\bkmkend AAAAAAABXV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual long {\b Binary} (short x, int y)=0{\bkmkstart AAAAAAABXW}
{\bkmkend AAAAAAABXW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b Decimal} (bool b, char c, short d, int e, long f, float g, double h, unsigned i, char *j, const string &k)=0{\bkmkstart AAAAAAABXX}
{\bkmkend AAAAAAABXX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b TakesNonConstReference} (int &n)=0{\bkmkstart AAAAAAABXY}
{\bkmkend AAAAAAABXY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual string {\b TakesConstReference} (const int &n)=0{\bkmkstart AAAAAAABXZ}
{\bkmkend AAAAAAABXZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b TakesConst} (const int x)=0{\bkmkstart AAAAAAABYA}
{\bkmkend AAAAAAABYA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnArgumentNumber} ()=0{\bkmkstart AAAAAAABYB}
{\bkmkend AAAAAAABYB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnArgumentNumber} (int n)=0{\bkmkstart AAAAAAABYC}
{\bkmkend AAAAAAABYC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnArgumentType} (int n)=0{\bkmkstart AAAAAAABYD}
{\bkmkend AAAAAAABYD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char {\b OverloadedOnArgumentType} (char c)=0{\bkmkstart AAAAAAABYE}
{\bkmkend AAAAAAABYE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b OverloadedOnConstness} ()=0{\bkmkstart AAAAAAABYF}
{\bkmkend AAAAAAABYF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char {\b OverloadedOnConstness} () const =0{\bkmkstart AAAAAAABYG}
{\bkmkend AAAAAAABYG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b TypeWithHole} (int(*func)())=0{\bkmkstart AAAAAAABYH}
{\bkmkend AAAAAAABYH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b TypeWithComma} (const std::map< int, string > &a_map)=0{\bkmkstart AAAAAAABYI}
{\bkmkend AAAAAAABYI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FooTest Class Reference\par \pard\plain 
{\tc\tcl2 \v FooTest}
{\xe \v FooTest}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
Inheritance diagram for FooTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_foo_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for FooTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_foo_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FormatForComparison< ToPrint, OtherOperand > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FormatForComparison< ToPrint, OtherOperand >}
{\xe \v testing::internal::FormatForComparison< ToPrint, OtherOperand >}
{\bkmkstart AAAAAAACWW}
{\bkmkend AAAAAAACWW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

::std::string {\b Format} (const ToPrint &value){\bkmkstart AAAAAAACWX}
{\bkmkend AAAAAAACWX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FormatForComparison< ToPrint[N], OtherOperand > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FormatForComparison< ToPrint[N], OtherOperand >}
{\xe \v testing::internal::FormatForComparison< ToPrint[N], OtherOperand >}
{\bkmkstart AAAAAAACWY}
{\bkmkend AAAAAAACWY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

::std::string {\b Format} (const ToPrint *value){\bkmkstart AAAAAAACWZ}
{\bkmkend AAAAAAACWZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.ForNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.ForNode}
{\xe \v pump.ForNode}
{\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, identifier=None, sep=None, code=None){\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b identifier}{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b sep}{\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b code}{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Friend Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Friend}
{\xe \v cpp.ast.Friend}
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
Inheritance diagram for cpp.ast.Friend:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_friend__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Friend:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_friend__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, expr, namespace){\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b namespace}{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< F > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< F >}
{\xe \v testing::internal::Function< F >}
{\bkmkstart AAAAAAACXA}
{\bkmkend AAAAAAACXA}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Function Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Function}
{\xe \v cpp.ast.Function}
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
Inheritance diagram for cpp.ast.Function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_function__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_function__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, return_type, parameters, modifiers, templated_types, body, namespace){\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDeclaration} (self){\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDefinition} (self){\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsExportable} (self){\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Requires} (self, node){\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b return_type}{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b parameters}{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b modifiers}{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b body}{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b templated_types}{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R()> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R()>}
{\xe \v testing::internal::Function< R()>}
{\bkmkstart AAAAAAACXB}
{\bkmkend AAAAAAACXB}
Inheritance diagram for testing::internal::Function< R()>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b Result}{\bkmkstart AAAAAAACXC}
{\bkmkend AAAAAAACXC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple {\b ArgumentTuple}{\bkmkstart AAAAAAACXD}
{\bkmkend AAAAAAACXD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACXE}
{\bkmkend AAAAAAACXE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(){\bkmkstart AAAAAAACXF}
{\bkmkend AAAAAAACXF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(){\bkmkstart AAAAAAACXG}
{\bkmkend AAAAAAACXG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1)>}
{\xe \v testing::internal::Function< R(A1)>}
{\bkmkstart AAAAAAACXH}
{\bkmkend AAAAAAACXH}
Inheritance diagram for testing::internal::Function< R(A1)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A1 {\b Argument1}{\bkmkstart AAAAAAACXI}
{\bkmkend AAAAAAACXI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1 > {\b ArgumentTuple}{\bkmkstart AAAAAAACXJ}
{\bkmkend AAAAAAACXJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACXK}
{\bkmkend AAAAAAACXK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1){\bkmkstart AAAAAAACXL}
{\bkmkend AAAAAAACXL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1){\bkmkstart AAAAAAACXM}
{\bkmkend AAAAAAACXM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2)>}
{\xe \v testing::internal::Function< R(A1, A2)>}
{\bkmkstart AAAAAAACXN}
{\bkmkend AAAAAAACXN}
Inheritance diagram for testing::internal::Function< R(A1, A2)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A2 {\b Argument2}{\bkmkstart AAAAAAACXO}
{\bkmkend AAAAAAACXO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2 > {\b ArgumentTuple}{\bkmkstart AAAAAAACXP}
{\bkmkend AAAAAAACXP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACXQ}
{\bkmkend AAAAAAACXQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2){\bkmkstart AAAAAAACXR}
{\bkmkend AAAAAAACXR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2){\bkmkstart AAAAAAACXS}
{\bkmkend AAAAAAACXS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3)>}
{\xe \v testing::internal::Function< R(A1, A2, A3)>}
{\bkmkstart AAAAAAACXT}
{\bkmkend AAAAAAACXT}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A3 {\b Argument3}{\bkmkstart AAAAAAACXU}
{\bkmkend AAAAAAACXU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3 > {\b ArgumentTuple}{\bkmkstart AAAAAAACXV}
{\bkmkend AAAAAAACXV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACXW}
{\bkmkend AAAAAAACXW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3){\bkmkstart AAAAAAACXX}
{\bkmkend AAAAAAACXX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3){\bkmkstart AAAAAAACXY}
{\bkmkend AAAAAAACXY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3, A4)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3, A4)>}
{\xe \v testing::internal::Function< R(A1, A2, A3, A4)>}
{\bkmkstart AAAAAAACXZ}
{\bkmkend AAAAAAACXZ}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3, A4)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3, A4)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A4 {\b Argument4}{\bkmkstart AAAAAAACYA}
{\bkmkend AAAAAAACYA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3, A4 > {\b ArgumentTuple}{\bkmkstart AAAAAAACYB}
{\bkmkend AAAAAAACYB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACYC}
{\bkmkend AAAAAAACYC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3, A4){\bkmkstart AAAAAAACYD}
{\bkmkend AAAAAAACYD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3, A4){\bkmkstart AAAAAAACYE}
{\bkmkend AAAAAAACYE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3, A4, A5)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3, A4, A5)>}
{\xe \v testing::internal::Function< R(A1, A2, A3, A4, A5)>}
{\bkmkstart AAAAAAACYF}
{\bkmkend AAAAAAACYF}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3, A4, A5)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3, A4, A5)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A5 {\b Argument5}{\bkmkstart AAAAAAACYG}
{\bkmkend AAAAAAACYG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3, A4, A5 > {\b ArgumentTuple}{\bkmkstart AAAAAAACYH}
{\bkmkend AAAAAAACYH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACYI}
{\bkmkend AAAAAAACYI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3, A4, A5){\bkmkstart AAAAAAACYJ}
{\bkmkend AAAAAAACYJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3, A4, A5){\bkmkstart AAAAAAACYK}
{\bkmkend AAAAAAACYK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3, A4, A5, A6)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6)>}
{\xe \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6)>}
{\bkmkstart AAAAAAACYL}
{\bkmkend AAAAAAACYL}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A6 {\b Argument6}{\bkmkstart AAAAAAACYM}
{\bkmkend AAAAAAACYM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3, A4, A5, A6 > {\b ArgumentTuple}{\bkmkstart AAAAAAACYN}
{\bkmkend AAAAAAACYN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACYO}
{\bkmkend AAAAAAACYO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3, A4, A5, A6){\bkmkstart AAAAAAACYP}
{\bkmkend AAAAAAACYP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3, A4, A5, A6){\bkmkstart AAAAAAACYQ}
{\bkmkend AAAAAAACYQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7)>}
{\xe \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7)>}
{\bkmkstart AAAAAAACYR}
{\bkmkend AAAAAAACYR}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A7 {\b Argument7}{\bkmkstart AAAAAAACYS}
{\bkmkend AAAAAAACYS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > {\b ArgumentTuple}{\bkmkstart AAAAAAACYT}
{\bkmkend AAAAAAACYT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACYU}
{\bkmkend AAAAAAACYU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3, A4, A5, A6, A7){\bkmkstart AAAAAAACYV}
{\bkmkend AAAAAAACYV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3, A4, A5, A6, A7){\bkmkstart AAAAAAACYW}
{\bkmkend AAAAAAACYW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8)>}
{\xe \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8)>}
{\bkmkstart AAAAAAACYX}
{\bkmkend AAAAAAACYX}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6c3bb749d78131e93f2cc79eb9006ea10.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6ed3643eeb5b72b3cb6de354859b8a0b3.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A8 {\b Argument8}{\bkmkstart AAAAAAACYY}
{\bkmkend AAAAAAACYY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > {\b ArgumentTuple}{\bkmkstart AAAAAAACYZ}
{\bkmkend AAAAAAACYZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACZA}
{\bkmkend AAAAAAACZA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3, A4, A5, A6, A7, A8){\bkmkstart AAAAAAACZB}
{\bkmkend AAAAAAACZB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3, A4, A5, A6, A7, A8){\bkmkstart AAAAAAACZC}
{\bkmkend AAAAAAACZC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>}
{\xe \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>}
{\bkmkstart AAAAAAACZD}
{\bkmkend AAAAAAACZD}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6749e44d1d7eef29b18db9c7c0ebfb438.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6280997655a43cdb8e9026ca030f678bd.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A9 {\b Argument9}{\bkmkstart AAAAAAACZE}
{\bkmkend AAAAAAACZE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > {\b ArgumentTuple}{\bkmkstart AAAAAAACZF}
{\bkmkend AAAAAAACZF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACZG}
{\bkmkend AAAAAAACZG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3, A4, A5, A6, A7, A8, A9){\bkmkstart AAAAAAACZH}
{\bkmkend AAAAAAACZH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3, A4, A5, A6, A7, A8, A9){\bkmkstart AAAAAAACZI}
{\bkmkend AAAAAAACZI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>}
{\xe \v testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>}
{\bkmkstart AAAAAAACZJ}
{\bkmkend AAAAAAACZJ}
Inheritance diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a697aa8fe85a89666d749983fe56b1a994.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Function< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_function_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a69dda6c3370932e2c0a4fbe8e2e777dca.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef A10 {\b Argument10}{\bkmkstart AAAAAAACZK}
{\bkmkend AAAAAAACZK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > {\b ArgumentTuple}{\bkmkstart AAAAAAACZL}
{\bkmkend AAAAAAACZL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b MatcherTuple}< ArgumentTuple >::type {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAACZM}
{\bkmkend AAAAAAACZM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b MakeResultVoid}(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10){\bkmkstart AAAAAAACZN}
{\bkmkend AAAAAAACZN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b IgnoredValue} {\b MakeResultIgnoredValue}(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10){\bkmkstart AAAAAAACZO}
{\bkmkend AAAAAAACZO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< F >}
{\xe \v testing::internal::FunctionMocker< F >}
{\bkmkstart AAAAAAACZP}
{\bkmkend AAAAAAACZP}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R()> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R()>}
{\xe \v testing::internal::FunctionMocker< R()>}
{\bkmkstart AAAAAAACZQ}
{\bkmkend AAAAAAACZQ}
Inheritance diagram for testing::internal::FunctionMocker< R()>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R()>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(){\bkmkstart AAAAAAACZR}
{\bkmkend AAAAAAACZR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAACZS}
{\bkmkend AAAAAAACZS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (){\bkmkstart AAAAAAACZT}
{\bkmkend AAAAAAACZT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (){\bkmkstart AAAAAAACZU}
{\bkmkend AAAAAAACZU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1)>}
{\xe \v testing::internal::FunctionMocker< R(A1)>}
{\bkmkstart AAAAAAACZV}
{\bkmkend AAAAAAACZV}
Inheritance diagram for testing::internal::FunctionMocker< R(A1)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1){\bkmkstart AAAAAAACZW}
{\bkmkend AAAAAAACZW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAACZX}
{\bkmkend AAAAAAACZX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1){\bkmkstart AAAAAAACZY}
{\bkmkend AAAAAAACZY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1){\bkmkstart AAAAAAACZZ}
{\bkmkend AAAAAAACZZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2)>}
{\bkmkstart AAAAAAADAA}
{\bkmkend AAAAAAADAA}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2){\bkmkstart AAAAAAADAB}
{\bkmkend AAAAAAADAB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADAC}
{\bkmkend AAAAAAADAC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2){\bkmkstart AAAAAAADAD}
{\bkmkend AAAAAAADAD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2){\bkmkstart AAAAAAADAE}
{\bkmkend AAAAAAADAE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3)>}
{\bkmkstart AAAAAAADAF}
{\bkmkend AAAAAAADAF}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3){\bkmkstart AAAAAAADAG}
{\bkmkend AAAAAAADAG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADAH}
{\bkmkend AAAAAAADAH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3){\bkmkstart AAAAAAADAI}
{\bkmkend AAAAAAADAI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3){\bkmkstart AAAAAAADAJ}
{\bkmkend AAAAAAADAJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3, A4)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3, A4)>}
{\bkmkstart AAAAAAADAK}
{\bkmkend AAAAAAADAK}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3, A4){\bkmkstart AAAAAAADAL}
{\bkmkend AAAAAAADAL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADAM}
{\bkmkend AAAAAAADAM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3, const {\b Matcher}< A4 > &m4){\bkmkstart AAAAAAADAN}
{\bkmkend AAAAAAADAN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3, A4 a4){\bkmkstart AAAAAAADAO}
{\bkmkend AAAAAAADAO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5)>}
{\bkmkstart AAAAAAADAP}
{\bkmkend AAAAAAADAP}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3, A4, A5){\bkmkstart AAAAAAADAQ}
{\bkmkend AAAAAAADAQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADAR}
{\bkmkend AAAAAAADAR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3, const {\b Matcher}< A4 > &m4, const {\b Matcher}< A5 > &m5){\bkmkstart AAAAAAADAS}
{\bkmkend AAAAAAADAS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5){\bkmkstart AAAAAAADAT}
{\bkmkend AAAAAAADAT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6)>}
{\bkmkstart AAAAAAADAU}
{\bkmkend AAAAAAADAU}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_08_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_08_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3, A4, A5, A6){\bkmkstart AAAAAAADAV}
{\bkmkend AAAAAAADAV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADAW}
{\bkmkend AAAAAAADAW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3, const {\b Matcher}< A4 > &m4, const {\b Matcher}< A5 > &m5, const {\b Matcher}< A6 > &m6){\bkmkstart AAAAAAADAX}
{\bkmkend AAAAAAADAX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6){\bkmkstart AAAAAAADAY}
{\bkmkend AAAAAAADAY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7)>}
{\bkmkstart AAAAAAADAZ}
{\bkmkend AAAAAAADAZ}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_008d5372eb9fbc6c0c339fc18cce8f7265.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00fe189f2cfc9654b435b5d92469ab8c0d.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3, A4, A5, A6, A7){\bkmkstart AAAAAAADBA}
{\bkmkend AAAAAAADBA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADBB}
{\bkmkend AAAAAAADBB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3, const {\b Matcher}< A4 > &m4, const {\b Matcher}< A5 > &m5, const {\b Matcher}< A6 > &m6, const {\b Matcher}< A7 > &m7){\bkmkstart AAAAAAADBC}
{\bkmkend AAAAAAADBC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7){\bkmkstart AAAAAAADBD}
{\bkmkend AAAAAAADBD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8)>}
{\bkmkstart AAAAAAADBE}
{\bkmkend AAAAAAADBE}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00a9bff4bc76fdceacc66985a6fa95ea14.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_0050347b4d73117fb12b6b1f47f62cd269.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3, A4, A5, A6, A7, A8){\bkmkstart AAAAAAADBF}
{\bkmkend AAAAAAADBF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADBG}
{\bkmkend AAAAAAADBG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3, const {\b Matcher}< A4 > &m4, const {\b Matcher}< A5 > &m5, const {\b Matcher}< A6 > &m6, const {\b Matcher}< A7 > &m7, const {\b Matcher}< A8 > &m8){\bkmkstart AAAAAAADBH}
{\bkmkend AAAAAAADBH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8){\bkmkstart AAAAAAADBI}
{\bkmkend AAAAAAADBI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>}
{\bkmkstart AAAAAAADBJ}
{\bkmkend AAAAAAADBJ}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_0029f950d8777630c8cf6cf0ec015bde6a.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_006554bcc6caf9ba7e0080f5b68369e0fd.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3, A4, A5, A6, A7, A8, A9){\bkmkstart AAAAAAADBK}
{\bkmkend AAAAAAADBK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADBL}
{\bkmkend AAAAAAADBL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3, const {\b Matcher}< A4 > &m4, const {\b Matcher}< A5 > &m5, const {\b Matcher}< A6 > &m6, const {\b Matcher}< A7 > &m7, const {\b Matcher}< A8 > &m8, const {\b Matcher}< A9 > &m9){\bkmkstart AAAAAAADBM}
{\bkmkend AAAAAAADBM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9){\bkmkstart AAAAAAADBN}
{\bkmkend AAAAAAADBN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>}
{\xe \v testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>}
{\bkmkstart AAAAAAADBO}
{\bkmkend AAAAAAADBO}
Inheritance diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_0032b6254217e4edd37bb70083da847c93.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMocker< R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_3_01_r_07_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_0067619023e5faa879d3453d1bd5bba987.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef R {\b F}(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10){\bkmkstart AAAAAAADBP}
{\bkmkend AAAAAAADBP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADBQ}
{\bkmkend AAAAAAADBQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b With} (const {\b Matcher}< A1 > &m1, const {\b Matcher}< A2 > &m2, const {\b Matcher}< A3 > &m3, const {\b Matcher}< A4 > &m4, const {\b Matcher}< A5 > &m5, const {\b Matcher}< A6 > &m6, const {\b Matcher}< A7 > &m7, const {\b Matcher}< A8 > &m8, const {\b Matcher}< A9 > &m9, const {\b Matcher}< A10 > &m10){\bkmkstart AAAAAAADBR}
{\bkmkend AAAAAAADBR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

R {\b Invoke} (A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10){\bkmkstart AAAAAAADBS}
{\bkmkend AAAAAAADBS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FunctionMockerBase< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FunctionMockerBase< F >}
{\xe \v testing::internal::FunctionMockerBase< F >}
{\bkmkstart AAAAAAADBT}
{\bkmkend AAAAAAADBT}
Inheritance diagram for testing::internal::FunctionMockerBase< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FunctionMockerBase< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_function_mocker_base__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::Result {\b Result}{\bkmkstart AAAAAAADBU}
{\bkmkend AAAAAAADBU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADBV}
{\bkmkend AAAAAAADBV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::ArgumentMatcherTuple {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAADBW}
{\bkmkend AAAAAAADBW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b OnCallSpec}< F > * {\b FindOnCallSpec} (const ArgumentTuple &args) const{\bkmkstart AAAAAAADBX}
{\bkmkend AAAAAAADBX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Result {\b PerformDefaultAction} (const ArgumentTuple &args, const string &call_description) const{\bkmkstart AAAAAAADBY}
{\bkmkend AAAAAAADBY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b UntypedActionResultHolderBase} * {\b UntypedPerformDefaultAction} (const void *untyped_args, const string &call_description) const{\bkmkstart AAAAAAADBZ}
{\bkmkend AAAAAAADBZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b UntypedActionResultHolderBase} * {\b UntypedPerformAction} (const void *untyped_action, const void *untyped_args) const{\bkmkstart AAAAAAADCA}
{\bkmkend AAAAAAADCA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ClearDefaultActionsLocked} () GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAADCB}
{\bkmkend AAAAAAADCB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b ActionResultHolder}< Result > {\b ResultHolder}{\bkmkstart AAAAAAADCC}
{\bkmkend AAAAAAADCC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Result {\b InvokeWith} (const ArgumentTuple &args) GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAADCD}
{\bkmkend AAAAAAADCD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OnCallSpec}< F > & {\b AddNewOnCallSpec} (const char *file, int line, const ArgumentMatcherTuple &m) GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAADCE}
{\bkmkend AAAAAAADCE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation}< F > & {\b AddNewExpectation} (const char *file, int line, const string &source_text, const ArgumentMatcherTuple &m) GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAADCF}
{\bkmkend AAAAAAADCF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec}< F > & {\b current_spec} (){\bkmkstart AAAAAAADCG}
{\bkmkend AAAAAAADCG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > class {\b MockSpec}{\bkmkstart AAAAAAADCH}
{\bkmkend AAAAAAADCH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Func > class {\b TypedExpectation}{\bkmkstart AAAAAAADCI}
{\bkmkend AAAAAAADCI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::FunctionMockerTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::FunctionMockerTest}
{\xe \v testing::gmock_generated_function_mockers_test::FunctionMockerTest}
{\bkmkstart AAAAAAABYJ}
{\bkmkend AAAAAAABYJ}
Inheritance diagram for testing::gmock_generated_function_mockers_test::FunctionMockerTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_generated_function_mockers_test::FunctionMockerTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_function_mocker_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FooInterface} *const {\b foo_}{\bkmkstart AAAAAAABYK}
{\bkmkend AAAAAAABYK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockFoo} {\b mock_foo_}{\bkmkstart AAAAAAABYL}
{\bkmkend AAAAAAABYL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Functor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Functor}
{\xe \v testing::gmock_matchers_test::Functor}
{\bkmkstart AAAAAAACCS}
{\bkmkend AAAAAAACCS}
Inheritance diagram for testing::gmock_matchers_test::Functor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1gmock__matchers__test_1_1_functor__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::Functor:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1gmock__matchers__test_1_1_functor__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

result_type {\b operator()} (argument_type input) const{\bkmkstart AAAAAAACCT}
{\bkmkend AAAAAAACCT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Ge2Matcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Ge2Matcher}
{\xe \v testing::internal::Ge2Matcher}
{\bkmkstart AAAAAAADCJ}
{\bkmkend AAAAAAADCJ}
Inheritance diagram for testing::internal::Ge2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ge2_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Ge2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ge2_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADCK}
{\bkmkend AAAAAAADCK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GeMatcher< Rhs > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GeMatcher< Rhs >}
{\xe \v testing::internal::GeMatcher< Rhs >}
{\bkmkstart AAAAAAADCL}
{\bkmkend AAAAAAADCL}
Inheritance diagram for testing::internal::GeMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ge_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::GeMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ge_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GeMatcher} (const Rhs &rhs){\bkmkstart AAAAAAADCM}
{\bkmkend AAAAAAADCM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADCN}
{\bkmkend AAAAAAADCN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b NegatedDesc} (){\bkmkstart AAAAAAADCO}
{\bkmkend AAAAAAADCO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.gmock_class_test.GenerateMethodsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.gmock_class_test.GenerateMethodsTest}
{\xe \v cpp.gmock_class_test.GenerateMethodsTest}
{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
Inheritance diagram for cpp.gmock_class_test.GenerateMethodsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1gmock__class__test_1_1_generate_methods_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.gmock_class_test.GenerateMethodsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1gmock__class__test_1_1_generate_methods_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GenerateMethodSource} (self, cpp_source)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSimpleMethod} (self){\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSimpleConstructorsAndDestructor} (self){\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testVirtualDestructor} (self){\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testExplicitlyDefaultedConstructorsAndDestructor} (self){\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testExplicitlyDeletedConstructorsAndDestructor} (self){\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSimpleOverrideMethod} (self){\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSimpleConstMethod} (self){\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testExplicitVoid} (self){\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testStrangeNewlineInParameter} (self){\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testDefaultParameters} (self){\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testMultipleDefaultParameters} (self){\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testRemovesCommentsWhenDefaultsArePresent} (self){\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testDoubleSlashCommentsInParameterListAreRemoved} (self){\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCStyleCommentsInParameterListAreNotRemoved} (self){\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testArgsOfTemplateTypes} (self){\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testReturnTypeWithOneTemplateArg} (self){\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testReturnTypeWithManyTemplateArgs} (self){\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testSimpleMethodInTemplatedClass} (self){\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPointerArgWithoutNames} (self){\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testReferenceArgWithoutNames} (self){\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testArrayArgWithoutNames} (self){\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GenerateMethodSource\:cpp::gmock_class_test::GenerateMethodsTest}
{\xe \v cpp::gmock_class_test::GenerateMethodsTest\:GenerateMethodSource}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.gmock_class_test.GenerateMethodsTest.GenerateMethodSource (  {\i self},   {\i cpp_source})}}
\par
{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Convert C++ source to Google Mock output source lines.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/gmock_class_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.gmock_class_test.GenerateMocksTest Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.gmock_class_test.GenerateMocksTest}
{\xe \v cpp.gmock_class_test.GenerateMocksTest}
{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
Inheritance diagram for cpp.gmock_class_test.GenerateMocksTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1gmock__class__test_1_1_generate_mocks_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.gmock_class_test.GenerateMocksTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1gmock__class__test_1_1_generate_mocks_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GenerateMocks} (self, cpp_source)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testNamespaces} (self){\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testClassWithStorageSpecifierMacro} (self){\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testTemplatedForwardDeclaration} (self){\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testTemplatedClass} (self){\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testTemplateInATemplateTypedef} (self){\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testTemplateInATemplateTypedefWithComma} (self){\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GenerateMocks\:cpp::gmock_class_test::GenerateMocksTest}
{\xe \v cpp::gmock_class_test::GenerateMocksTest\:GenerateMocks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.gmock_class_test.GenerateMocksTest.GenerateMocks (  {\i self},   {\i cpp_source})}}
\par
{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Convert C++ source to complete Google Mock output source.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/gmock_class_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< k > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< k >}
{\xe \v std::tr1::gtest_internal::Get< k >}
{\bkmkstart AAAAAAABFB}
{\bkmkend AAAAAAABFB}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 0 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 0 >}
{\xe \v std::tr1::gtest_internal::Get< 0 >}
{\bkmkstart AAAAAAABFC}
{\bkmkend AAAAAAABFC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(0, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFD}
{\bkmkend AAAAAAABFD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(0, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFE}
{\bkmkend AAAAAAABFE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 1 >}
{\xe \v std::tr1::gtest_internal::Get< 1 >}
{\bkmkstart AAAAAAABFF}
{\bkmkend AAAAAAABFF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(1, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFG}
{\bkmkend AAAAAAABFG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(1, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFH}
{\bkmkend AAAAAAABFH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 2 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 2 >}
{\xe \v std::tr1::gtest_internal::Get< 2 >}
{\bkmkstart AAAAAAABFI}
{\bkmkend AAAAAAABFI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(2, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFJ}
{\bkmkend AAAAAAABFJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(2, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFK}
{\bkmkend AAAAAAABFK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 3 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 3 >}
{\xe \v std::tr1::gtest_internal::Get< 3 >}
{\bkmkstart AAAAAAABFL}
{\bkmkend AAAAAAABFL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(3, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFM}
{\bkmkend AAAAAAABFM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(3, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFN}
{\bkmkend AAAAAAABFN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 4 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 4 >}
{\xe \v std::tr1::gtest_internal::Get< 4 >}
{\bkmkstart AAAAAAABFO}
{\bkmkend AAAAAAABFO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(4, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFP}
{\bkmkend AAAAAAABFP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(4, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFQ}
{\bkmkend AAAAAAABFQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 5 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 5 >}
{\xe \v std::tr1::gtest_internal::Get< 5 >}
{\bkmkstart AAAAAAABFR}
{\bkmkend AAAAAAABFR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(5, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFS}
{\bkmkend AAAAAAABFS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(5, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFT}
{\bkmkend AAAAAAABFT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 6 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 6 >}
{\xe \v std::tr1::gtest_internal::Get< 6 >}
{\bkmkstart AAAAAAABFU}
{\bkmkend AAAAAAABFU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(6, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFV}
{\bkmkend AAAAAAABFV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(6, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFW}
{\bkmkend AAAAAAABFW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 7 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 7 >}
{\xe \v std::tr1::gtest_internal::Get< 7 >}
{\bkmkstart AAAAAAABFX}
{\bkmkend AAAAAAABFX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(7, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABFY}
{\bkmkend AAAAAAABFY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(7, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABFZ}
{\bkmkend AAAAAAABFZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 8 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 8 >}
{\xe \v std::tr1::gtest_internal::Get< 8 >}
{\bkmkstart AAAAAAABGA}
{\bkmkend AAAAAAABGA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(8, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABGB}
{\bkmkend AAAAAAABGB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(8, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABGC}
{\bkmkend AAAAAAABGC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::Get< 9 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::Get< 9 >}
{\xe \v std::tr1::gtest_internal::Get< 9 >}
{\bkmkstart AAAAAAABGD}
{\bkmkend AAAAAAABGD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_ADD_REF_} (GTEST_TUPLE_ELEMENT_(9, Tuple)) Field(Tuple &t){\bkmkstart AAAAAAABGE}
{\bkmkend AAAAAAABGE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple > static {\b GTEST_BY_REF_} (GTEST_TUPLE_ELEMENT_(9, Tuple)) ConstField(const Tuple &t){\bkmkstart AAAAAAABGF}
{\bkmkend AAAAAAABGF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >}
{\xe \v testing::gmock_generated_actions_test::GiantTemplate< T1, T2, T3, k4, k5, k6, T7, T8, T9 >}
{\bkmkstart AAAAAAABWX}
{\bkmkend AAAAAAABWX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GiantTemplate} (int a_value){\bkmkstart AAAAAAABWY}
{\bkmkend AAAAAAABWY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value}{\bkmkstart AAAAAAABWZ}
{\bkmkend AAAAAAABWZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
upload.GitVCS Class Reference\par \pard\plain 
{\tc\tcl2 \v upload.GitVCS}
{\xe \v upload.GitVCS}
{\bkmkstart AAAAAAAEJR}
{\bkmkend AAAAAAAEJR}
Inheritance diagram for upload.GitVCS:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_git_v_c_s__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for upload.GitVCS:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_git_v_c_s__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, options){\bkmkstart AAAAAAAEJS}
{\bkmkend AAAAAAAEJS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GenerateDiff} (self, extra_args){\bkmkstart AAAAAAAEJT}
{\bkmkend AAAAAAAEJT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetUnknownFiles} (self){\bkmkstart AAAAAAAEJU}
{\bkmkend AAAAAAAEJU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetBaseFile} (self, filename){\bkmkstart AAAAAAAEJV}
{\bkmkend AAAAAAAEJV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, options){\bkmkstart AAAAAAAEJS}
{\bkmkend AAAAAAAEJS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GenerateDiff} (self, extra_args){\bkmkstart AAAAAAAEJT}
{\bkmkend AAAAAAAEJT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetUnknownFiles} (self){\bkmkstart AAAAAAAEJU}
{\bkmkend AAAAAAAEJU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetBaseFile} (self, filename){\bkmkstart AAAAAAAEJV}
{\bkmkend AAAAAAAEJV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b base_hashes}{\bkmkstart AAAAAAAEJW}
{\bkmkend AAAAAAAEJW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Implementation of the VersionControlSystem interface for Git.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/upload.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock_leak_test.GMockLeakTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gmock_leak_test.GMockLeakTest}
{\xe \v gmock_leak_test.GMockLeakTest}
{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
Inheritance diagram for gmock_leak_test.GMockLeakTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgmock__leak__test_1_1_g_mock_leak_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gmock_leak_test.GMockLeakTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgmock__leak__test_1_1_g_mock_leak_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesLeakedMockByDefault} (self){\bkmkstart AAAAAAAAUK}
{\bkmkend AAAAAAAAUK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testDoesNotCatchLeakedMockWhenDisabled} (self){\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesLeakedMockWhenEnabled} (self){\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesLeakedMockWhenEnabledWithExplictFlagValue} (self){\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testCatchesMultipleLeakedMocks} (self){\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_leak_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gmock_output_test.GMockOutputTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gmock_output_test.GMockOutputTest}
{\xe \v gmock_output_test.GMockOutputTest}
{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
Inheritance diagram for gmock_output_test.GMockOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgmock__output__test_1_1_g_mock_output_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gmock_output_test.GMockOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgmock__output__test_1_1_g_mock_output_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutput} (self){\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_output_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
GMockOutputTest Class Reference\par \pard\plain 
{\tc\tcl2 \v GMockOutputTest}
{\xe \v GMockOutputTest}
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
Inheritance diagram for GMockOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_mock_output_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for GMockOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_g_mock_output_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NaggyMock}< {\b MockFoo} > {\b foo_}{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GoogleTestFailureReporter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GoogleTestFailureReporter}
{\xe \v testing::internal::GoogleTestFailureReporter}
{\bkmkstart AAAAAAADCP}
{\bkmkend AAAAAAADCP}
Inheritance diagram for testing::internal::GoogleTestFailureReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_google_test_failure_reporter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::GoogleTestFailureReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_google_test_failure_reporter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ReportFailure} (FailureType type, const char *file, int line, const string &message){\bkmkstart AAAAAAADCQ}
{\bkmkend AAAAAAADCQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-internal-utils.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Goto Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Goto}
{\xe \v cpp.ast.Goto}
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
Inheritance diagram for cpp.ast.Goto:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_goto__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Goto:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_goto__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, label){\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b label}{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::GreaterThanMatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::GreaterThanMatcher}
{\xe \v testing::gmock_matchers_test::GreaterThanMatcher}
{\bkmkstart AAAAAAACCU}
{\bkmkend AAAAAAACCU}
Inheritance diagram for testing::gmock_matchers_test::GreaterThanMatcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::GreaterThanMatcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_greater_than_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GreaterThanMatcher} (int rhs){\bkmkstart AAAAAAACCV}
{\bkmkend AAAAAAACCV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACCW}
{\bkmkend AAAAAAACCW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (int lhs, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACCX}
{\bkmkend AAAAAAACCX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Gt2Matcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Gt2Matcher}
{\xe \v testing::internal::Gt2Matcher}
{\bkmkstart AAAAAAADCR}
{\bkmkend AAAAAAADCR}
Inheritance diagram for testing::internal::Gt2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_gt2_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Gt2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_gt2_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADCS}
{\bkmkend AAAAAAADCS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest}
{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
Inheritance diagram for gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__break__on__failure__unittest_1_1_g_test_break_on_failure_unit_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__break__on__failure__unittest_1_1_g_test_break_on_failure_unit_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, env_var_value, flag_value, expect_seg_fault)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVar} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlagOverridesEnvVar} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testBreakOnFailureOverridesThrowOnFailure} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testCatchExceptionsDoesNotInterfere} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the GTEST_BREAK_ON_FAILURE environment variable or\par
the --gtest_break_on_failure flag to turn assertion failures into\par
segmentation faults.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v RunAndVerify\:gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest.RunAndVerify (  {\i self},   {\i env_var_value},   {\i flag_value},   {\i expect_seg_fault})}}
\par
{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs gtest_break_on_failure_unittest_ and verifies that it does\par
(or does not) have a seg-fault.\par
\par
Args:\par
  env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\par
                variable; None if the variable should be unset.\par
  flag_value:       value of the --gtest_break_on_failure flag;\par
                None if the flag should not be present.\par
  expect_seg_fault: 1 if the program is expected to generate a seg-fault;\par
                0 otherwise.\par
}
 \par
}}
{\xe \v testBreakOnFailureOverridesThrowOnFailure\:gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest\:testBreakOnFailureOverridesThrowOnFailure}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest.testBreakOnFailureOverridesThrowOnFailure (  {\i self})}}
\par
{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that gtest_break_on_failure overrides gtest_throw_on_failure.}
 \par
}}
{\xe \v testCatchExceptionsDoesNotInterfere\:gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest\:testCatchExceptionsDoesNotInterfere}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest.testCatchExceptionsDoesNotInterfere (  {\i self})}}
\par
{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that gtest_catch_exceptions doesn't interfere.}
 \par
}}
{\xe \v testDefaultBehavior\:gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of the default mode.}
 \par
}}
{\xe \v testEnvVar\:gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest\:testEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest.testEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the GTEST_BREAK_ON_FAILURE environment variable.}
 \par
}}
{\xe \v testFlag\:gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest\:testFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest.testFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_break_on_failure flag.}
 \par
}}
{\xe \v testFlagOverridesEnvVar\:gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest}
{\xe \v gtest_break_on_failure_unittest::GTestBreakOnFailureUnitTest\:testFlagOverridesEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_break_on_failure_unittest.GTestBreakOnFailureUnitTest.testFlagOverridesEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the flag overrides the environment variable.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_break_on_failure_unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_color_test.GTestColorTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_color_test.GTestColorTest}
{\xe \v gtest_color_test.GTestColorTest}
{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
Inheritance diagram for gtest_color_test.GTestColorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__color__test_1_1_g_test_color_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_color_test.GTestColorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__color__test_1_1_g_test_color_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testNoEnvVarNoFlag} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlagOnly} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVarOnly} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVarAndFlag} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testAliasesOfYesAndNo} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testAliasesOfYesAndNo\:gtest_color_test::GTestColorTest}
{\xe \v gtest_color_test::GTestColorTest\:testAliasesOfYesAndNo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_color_test.GTestColorTest.testAliasesOfYesAndNo (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using aliases in specifying --gtest_color.}
 \par
}}
{\xe \v testEnvVarAndFlag\:gtest_color_test::GTestColorTest}
{\xe \v gtest_color_test::GTestColorTest\:testEnvVarAndFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_color_test.GTestColorTest.testEnvVarAndFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there are both GTEST_COLOR and --gtest_color.}
 \par
}}
{\xe \v testEnvVarOnly\:gtest_color_test::GTestColorTest}
{\xe \v gtest_color_test::GTestColorTest\:testEnvVarOnly}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_color_test.GTestColorTest.testEnvVarOnly (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there's GTEST_COLOR but not --gtest_color.}
 \par
}}
{\xe \v testFlagOnly\:gtest_color_test::GTestColorTest}
{\xe \v gtest_color_test::GTestColorTest\:testFlagOnly}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_color_test.GTestColorTest.testFlagOnly (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there's --gtest_color but not GTEST_COLOR.}
 \par
}}
{\xe \v testNoEnvVarNoFlag\:gtest_color_test::GTestColorTest}
{\xe \v gtest_color_test::GTestColorTest\:testNoEnvVarNoFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_color_test.GTestColorTest.testNoEnvVarNoFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the case when there's neither GTEST_COLOR nor --gtest_color.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_color_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_env_var_test.GTestEnvVarTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_env_var_test.GTestEnvVarTest}
{\xe \v gtest_env_var_test.GTestEnvVarTest}
{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
Inheritance diagram for gtest_env_var_test.GTestEnvVarTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__env__var__test_1_1_g_test_env_var_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_env_var_test.GTestEnvVarTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__env__var__test_1_1_g_test_env_var_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEnvVarAffectsFlag} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testXmlOutputFile} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testXmlOutputFileOverride} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testEnvVarAffectsFlag\:gtest_env_var_test::GTestEnvVarTest}
{\xe \v gtest_env_var_test::GTestEnvVarTest\:testEnvVarAffectsFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_env_var_test.GTestEnvVarTest.testEnvVarAffectsFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that environment variable should affect the corresponding flag.}
 \par
}}
{\xe \v testXmlOutputFile\:gtest_env_var_test::GTestEnvVarTest}
{\xe \v gtest_env_var_test::GTestEnvVarTest\:testXmlOutputFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_env_var_test.GTestEnvVarTest.testXmlOutputFile (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that $XML_OUTPUT_FILE affects the output flag.}
 \par
}}
{\xe \v testXmlOutputFileOverride\:gtest_env_var_test::GTestEnvVarTest}
{\xe \v gtest_env_var_test::GTestEnvVarTest\:testXmlOutputFileOverride}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_env_var_test.GTestEnvVarTest.testXmlOutputFileOverride (  {\i self})}}
\par
{\bkmkstart AAAAAAAAVW}
{\bkmkend AAAAAAAAVW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that $XML_OUTPUT_FILE is overridden by $GTEST_OUTPUT}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_env_var_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_filter_unittest.GTestFilterUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_filter_unittest.GTestFilterUnitTest}
{\xe \v gtest_filter_unittest.GTestFilterUnitTest}
{\bkmkstart AAAAAAAAVX}
{\bkmkend AAAAAAAAVX}
Inheritance diagram for gtest_filter_unittest.GTestFilterUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__filter__unittest_1_1_g_test_filter_unit_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_filter_unittest.GTestFilterUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__filter__unittest_1_1_g_test_filter_unit_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AssertSetEqual} (self, lhs, rhs)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AssertPartitionIsValid} (self, set_var, list_of_sets)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AdjustForParameterizedTests} (self, tests_to_run)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, gtest_filter, tests_to_run)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerifyWithSharding} (self, gtest_filter, total_shards, tests_to_run, args=None, check_exit_0=False)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerifyAllowingDisabled} (self, gtest_filter, tests_to_run)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b setUp} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehaviorWithShards} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEmptyFilter} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testBadFilter} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFullName} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testUniversalFilters} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterByTestCase} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterByTest} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterDisabledTests} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testWildcardInTestCaseName} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testWildcardInTestName} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilterWithoutDot} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testTwoPatterns} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThreePatterns} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testNegativeFilters} (self){\bkmkstart AAAAAAAAVY}
{\bkmkend AAAAAAAAVY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlagOverridesEnvVar} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testShardStatusFileIsCreated} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testShardStatusFileIsCreatedWithListTests} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testShardingWorksWithDeathTests} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the env variable or the command line flag to filter tests.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v AdjustForParameterizedTests\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:AdjustForParameterizedTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.AdjustForParameterizedTests (  {\i self},   {\i tests_to_run})}}
\par
{\bkmkstart AAAAAAAAVZ}
{\bkmkend AAAAAAAAVZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Adjust tests_to_run in case value parameterized tests are disabled.}
 \par
}}
{\xe \v AssertPartitionIsValid\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:AssertPartitionIsValid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.AssertPartitionIsValid (  {\i self},   {\i set_var},   {\i list_of_sets})}}
\par
{\bkmkstart AAAAAAAAWA}
{\bkmkend AAAAAAAAWA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Asserts that list_of_sets is a valid partition of set_var.}
 \par
}}
{\xe \v AssertSetEqual\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:AssertSetEqual}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.AssertSetEqual (  {\i self},   {\i lhs},   {\i rhs})}}
\par
{\bkmkstart AAAAAAAAWB}
{\bkmkend AAAAAAAAWB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Asserts that two sets are equal.}
 \par
}}
{\xe \v RunAndVerify\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.RunAndVerify (  {\i self},   {\i gtest_filter},   {\i tests_to_run})}}
\par
{\bkmkstart AAAAAAAAWC}
{\bkmkend AAAAAAAAWC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks that the binary runs correct set of tests for a given filter.}
 \par
}}
{\xe \v RunAndVerifyAllowingDisabled\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:RunAndVerifyAllowingDisabled}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.RunAndVerifyAllowingDisabled (  {\i self},   {\i gtest_filter},   {\i tests_to_run})}}
\par
{\bkmkstart AAAAAAAAWD}
{\bkmkend AAAAAAAAWD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks that the binary runs correct set of tests for the given filter.\par
\par
Runs gtest_filter_unittest_ with the given filter, and enables\par
disabled tests. Verifies that the right set of tests were run.\par
\par
Args:\par
  gtest_filter: A filter to apply to the tests.\par
  tests_to_run: A set of tests expected to run.\par
}
 \par
}}
{\xe \v RunAndVerifyWithSharding\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:RunAndVerifyWithSharding}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.RunAndVerifyWithSharding (  {\i self},   {\i gtest_filter},   {\i total_shards},   {\i tests_to_run},   {\i args} = {\f2 None},   {\i check_exit_0} = {\f2 False})}}
\par
{\bkmkstart AAAAAAAAWE}
{\bkmkend AAAAAAAAWE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks that binary runs correct tests for the given filter and shard.\par
\par
Runs all shards of gtest_filter_unittest_ with the given filter, and\par
verifies that the right set of tests were run. The union of tests run\par
on each shard should be identical to tests_to_run, without duplicates.\par
\par
Args:\par
  gtest_filter: A filter to apply to the tests.\par
  total_shards: A total number of shards to split test run into.\par
  tests_to_run: A set of tests expected to run.\par
  args   :      Arguments to pass to the to the test binary.\par
  check_exit_0: When set to a true value, make sure that all shards\par
            return 0.\par
}
 \par
}}
{\xe \v setUp\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:setUp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.setUp (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWF}
{\bkmkend AAAAAAAAWF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Sets up test case.\par
\par
Determines whether value-parameterized tests are enabled in the binary and\par
sets the flags accordingly.\par
}
 \par
}}
{\xe \v testBadFilter\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testBadFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testBadFilter (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWG}
{\bkmkend AAAAAAAAWG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests a filter that matches nothing.}
 \par
}}
{\xe \v testDefaultBehavior\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWH}
{\bkmkend AAAAAAAAWH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of not specifying the filter.}
 \par
}}
{\xe \v testDefaultBehaviorWithShards\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testDefaultBehaviorWithShards}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testDefaultBehaviorWithShards (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWI}
{\bkmkend AAAAAAAAWI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior without the filter, with sharding enabled.}
 \par
}}
{\xe \v testEmptyFilter\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testEmptyFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testEmptyFilter (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWJ}
{\bkmkend AAAAAAAAWJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests an empty filter.}
 \par
}}
{\xe \v testFilterByTest\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testFilterByTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testFilterByTest (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWK}
{\bkmkend AAAAAAAAWK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filtering by test name.}
 \par
}}
{\xe \v testFilterByTestCase\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testFilterByTestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testFilterByTestCase (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWL}
{\bkmkend AAAAAAAAWL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filtering by test case name.}
 \par
}}
{\xe \v testFilterDisabledTests\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testFilterDisabledTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testFilterDisabledTests (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWM}
{\bkmkend AAAAAAAAWM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Select only the disabled tests to run.}
 \par
}}
{\xe \v testFilterWithoutDot\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testFilterWithoutDot}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testFilterWithoutDot (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests a filter that has no '.' in it.}
 \par
}}
{\xe \v testFlagOverridesEnvVar\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testFlagOverridesEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testFlagOverridesEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWO}
{\bkmkend AAAAAAAAWO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the filter flag overrides the filtering env. variable.}
 \par
}}
{\xe \v testFullName\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testFullName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testFullName (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWP}
{\bkmkend AAAAAAAAWP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filtering by full name.}
 \par
}}
{\xe \v testShardingWorksWithDeathTests\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testShardingWorksWithDeathTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testShardingWorksWithDeathTests (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWQ}
{\bkmkend AAAAAAAAWQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests integration with death tests and sharding.}
 \par
}}
{\xe \v testShardStatusFileIsCreated\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testShardStatusFileIsCreated}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testShardStatusFileIsCreated (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWR}
{\bkmkend AAAAAAAAWR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the shard file is created if specified in the environment.}
 \par
}}
{\xe \v testShardStatusFileIsCreatedWithListTests\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testShardStatusFileIsCreatedWithListTests}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testShardStatusFileIsCreatedWithListTests (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWS}
{\bkmkend AAAAAAAAWS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that the shard file is created with the "list_tests" flag.}
 \par
}}
{\xe \v testThreePatterns\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testThreePatterns}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testThreePatterns (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWT}
{\bkmkend AAAAAAAAWT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filters that consist of three patterns.}
 \par
}}
{\xe \v testTwoPatterns\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testTwoPatterns}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testTwoPatterns (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWU}
{\bkmkend AAAAAAAAWU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filters that consist of two patterns.}
 \par
}}
{\xe \v testUniversalFilters\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testUniversalFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testUniversalFilters (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWV}
{\bkmkend AAAAAAAAWV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests filters that match everything.}
 \par
}}
{\xe \v testWildcardInTestCaseName\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testWildcardInTestCaseName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testWildcardInTestCaseName (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWW}
{\bkmkend AAAAAAAAWW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using wildcard in the test case name.}
 \par
}}
{\xe \v testWildcardInTestName\:gtest_filter_unittest::GTestFilterUnitTest}
{\xe \v gtest_filter_unittest::GTestFilterUnitTest\:testWildcardInTestName}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_filter_unittest.GTestFilterUnitTest.testWildcardInTestName (  {\i self})}}
\par
{\bkmkstart AAAAAAAAWX}
{\bkmkend AAAAAAAAWX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using wildcard in the test name.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_filter_unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GTestFlagSaver Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GTestFlagSaver}
{\xe \v testing::internal::GTestFlagSaver}
{\bkmkstart AAAAAAADCT}
{\bkmkend AAAAAAADCT}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_help_test.GTestHelpTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_help_test.GTestHelpTest}
{\xe \v gtest_help_test.GTestHelpTest}
{\bkmkstart AAAAAAAAWY}
{\bkmkend AAAAAAAAWY}
Inheritance diagram for gtest_help_test.GTestHelpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__help__test_1_1_g_test_help_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_help_test.GTestHelpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__help__test_1_1_g_test_help_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b TestHelpFlag} (self, flag)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b TestNonHelpFlag} (self, flag)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithFullFlag} (self){\bkmkstart AAAAAAAAWZ}
{\bkmkend AAAAAAAAWZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithShortFlag} (self){\bkmkstart AAAAAAAAXA}
{\bkmkend AAAAAAAAXA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithQuestionFlag} (self){\bkmkstart AAAAAAAAXB}
{\bkmkend AAAAAAAAXB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithWindowsStyleQuestionFlag} (self){\bkmkstart AAAAAAAAXC}
{\bkmkend AAAAAAAAXC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithUnrecognizedGoogleTestFlag} (self){\bkmkstart AAAAAAAAXD}
{\bkmkend AAAAAAAAXD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testPrintsHelpWithIncorrectFlagStyle} (self){\bkmkstart AAAAAAAAXE}
{\bkmkend AAAAAAAAXE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testRunsTestsWithoutHelpFlag} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testRunsTestsWithGtestInternalFlag} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the --help flag and its equivalent forms.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v TestHelpFlag\:gtest_help_test::GTestHelpTest}
{\xe \v gtest_help_test::GTestHelpTest\:TestHelpFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.TestHelpFlag (  {\i self},   {\i flag})}}
\par
{\bkmkstart AAAAAAAAXF}
{\bkmkend AAAAAAAAXF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies correct behavior when help flag is specified.\par
\par
The right message must be printed and the tests must\par
skipped when the given flag is specified.\par
\par
Args:\par
  flag:  A flag to pass to the binary or None.\par
}
 \par
}}
{\xe \v TestNonHelpFlag\:gtest_help_test::GTestHelpTest}
{\xe \v gtest_help_test::GTestHelpTest\:TestNonHelpFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.TestNonHelpFlag (  {\i self},   {\i flag})}}
\par
{\bkmkstart AAAAAAAAXG}
{\bkmkend AAAAAAAAXG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies correct behavior when no help flag is specified.\par
\par
Verifies that when no help flag is specified, the tests are run\par
and the help message is not printed.\par
\par
Args:\par
  flag:  A flag to pass to the binary or None.\par
}
 \par
}}
{\xe \v testRunsTestsWithGtestInternalFlag\:gtest_help_test::GTestHelpTest}
{\xe \v gtest_help_test::GTestHelpTest\:testRunsTestsWithGtestInternalFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.testRunsTestsWithGtestInternalFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAXH}
{\bkmkend AAAAAAAAXH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies that the tests are run and no help message is printed when\par
a flag starting with Google Test prefix and 'internal_' is supplied.}
 \par
}}
{\xe \v testRunsTestsWithoutHelpFlag\:gtest_help_test::GTestHelpTest}
{\xe \v gtest_help_test::GTestHelpTest\:testRunsTestsWithoutHelpFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_help_test.GTestHelpTest.testRunsTestsWithoutHelpFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAXI}
{\bkmkend AAAAAAAAXI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies that when no help flag is specified, the tests are run\par
and the help message is not printed.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_help_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_list_tests_unittest.GTestListTestsUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_list_tests_unittest.GTestListTestsUnitTest}
{\xe \v gtest_list_tests_unittest.GTestListTestsUnitTest}
{\bkmkstart AAAAAAAAXJ}
{\bkmkend AAAAAAAAXJ}
Inheritance diagram for gtest_list_tests_unittest.GTestListTestsUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__list__tests__unittest_1_1_g_test_list_tests_unit_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_list_tests_unittest.GTestListTestsUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__list__tests__unittest_1_1_g_test_list_tests_unit_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, flag_value, expected_output_re, other_flag)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFlag} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testOverrideNonFilterFlags} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testWithFilterFlags} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_list_tests flag to list all tests.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v RunAndVerify\:gtest_list_tests_unittest::GTestListTestsUnitTest}
{\xe \v gtest_list_tests_unittest::GTestListTestsUnitTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_list_tests_unittest.GTestListTestsUnitTest.RunAndVerify (  {\i self},   {\i flag_value},   {\i expected_output_re},   {\i other_flag})}}
\par
{\bkmkstart AAAAAAAAXK}
{\bkmkend AAAAAAAAXK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs gtest_list_tests_unittest_ and verifies that it prints\par
the correct tests.\par
\par
Args:\par
  flag_value:         value of the --gtest_list_tests flag;\par
                  None if the flag should not be present.\par
  expected_output_re: regular expression that matches the expected\par
                  output after running command;\par
  other_flag:         a different flag to be passed to command\par
                  along with gtest_list_tests;\par
                  None if the flag should not be present.\par
}
 \par
}}
{\xe \v testDefaultBehavior\:gtest_list_tests_unittest::GTestListTestsUnitTest}
{\xe \v gtest_list_tests_unittest::GTestListTestsUnitTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_list_tests_unittest.GTestListTestsUnitTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAAAXL}
{\bkmkend AAAAAAAAXL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of the default mode.}
 \par
}}
{\xe \v testFlag\:gtest_list_tests_unittest::GTestListTestsUnitTest}
{\xe \v gtest_list_tests_unittest::GTestListTestsUnitTest\:testFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_list_tests_unittest.GTestListTestsUnitTest.testFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAXM}
{\bkmkend AAAAAAAAXM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_list_tests flag.}
 \par
}}
{\xe \v testOverrideNonFilterFlags\:gtest_list_tests_unittest::GTestListTestsUnitTest}
{\xe \v gtest_list_tests_unittest::GTestListTestsUnitTest\:testOverrideNonFilterFlags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_list_tests_unittest.GTestListTestsUnitTest.testOverrideNonFilterFlags (  {\i self})}}
\par
{\bkmkstart AAAAAAAAXN}
{\bkmkend AAAAAAAAXN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that --gtest_list_tests overrides the non-filter flags.}
 \par
}}
{\xe \v testWithFilterFlags\:gtest_list_tests_unittest::GTestListTestsUnitTest}
{\xe \v gtest_list_tests_unittest::GTestListTestsUnitTest\:testWithFilterFlags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_list_tests_unittest.GTestListTestsUnitTest.testWithFilterFlags (  {\i self})}}
\par
{\bkmkstart AAAAAAAAXO}
{\bkmkend AAAAAAAAXO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that --gtest_list_tests takes into account the\par
--gtest_filter flag.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GTestLog Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GTestLog}
{\xe \v testing::internal::GTestLog}
{\bkmkstart AAAAAAADCU}
{\bkmkend AAAAAAADCU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTestLog} (GTestLogSeverity severity, const char *file, int line){\bkmkstart AAAAAAADCV}
{\bkmkend AAAAAAADCV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

::std::ostream & {\b GetStream} (){\bkmkstart AAAAAAADCW}
{\bkmkend AAAAAAADCW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-port.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GTestMutexLock Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GTestMutexLock}
{\xe \v testing::internal::GTestMutexLock}
{\bkmkstart AAAAAAADCX}
{\bkmkend AAAAAAADCX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTestMutexLock} ({\b Mutex} *){\bkmkstart AAAAAAADCY}
{\bkmkend AAAAAAADCY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_output_test.GTestOutputTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_output_test.GTestOutputTest}
{\xe \v gtest_output_test.GTestOutputTest}
{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
Inheritance diagram for gtest_output_test.GTestOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__output__test_1_1_g_test_output_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_output_test.GTestOutputTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__output__test_1_1_g_test_output_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b RemoveUnsupportedTests} (self, test_output){\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutput} (self){\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_shuffle_test.GTestShuffleUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_shuffle_test.GTestShuffleUnitTest}
{\xe \v gtest_shuffle_test.GTestShuffleUnitTest}
{\bkmkstart AAAAAAAAXS}
{\bkmkend AAAAAAAAXS}
Inheritance diagram for gtest_shuffle_test.GTestShuffleUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__shuffle__test_1_1_g_test_shuffle_unit_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_shuffle_test.GTestShuffleUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__shuffle__test_1_1_g_test_shuffle_unit_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b setUp} (self){\bkmkstart AAAAAAAAXT}
{\bkmkend AAAAAAAAXT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShufflePreservesNumberOfTests} (self){\bkmkstart AAAAAAAAXU}
{\bkmkend AAAAAAAAXU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleChangesTestOrder} (self){\bkmkstart AAAAAAAAXV}
{\bkmkend AAAAAAAAXV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleChangesTestCaseOrder} (self){\bkmkstart AAAAAAAAXW}
{\bkmkend AAAAAAAAXW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleDoesNotRepeatTest} (self){\bkmkstart AAAAAAAAXX}
{\bkmkend AAAAAAAAXX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleDoesNotCreateNewTest} (self){\bkmkstart AAAAAAAAXY}
{\bkmkend AAAAAAAAXY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleIncludesAllTests} (self){\bkmkstart AAAAAAAAXZ}
{\bkmkend AAAAAAAAXZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleLeavesDeathTestsAtFront} (self){\bkmkstart AAAAAAAAYA}
{\bkmkend AAAAAAAAYA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleDoesNotInterleaveTestCases} (self){\bkmkstart AAAAAAAAYB}
{\bkmkend AAAAAAAAYB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleRestoresOrderAfterEachIteration} (self){\bkmkstart AAAAAAAAYC}
{\bkmkend AAAAAAAAYC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleGeneratesNewOrderInEachIteration} (self){\bkmkstart AAAAAAAAYD}
{\bkmkend AAAAAAAAYD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testShuffleShardedTestsPreservesPartition} (self){\bkmkstart AAAAAAAAYE}
{\bkmkend AAAAAAAAYE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests test shuffling.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_shuffle_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_uninitialized_test.GTestUninitializedTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_uninitialized_test.GTestUninitializedTest}
{\xe \v gtest_uninitialized_test.GTestUninitializedTest}
{\bkmkstart AAAAAAAAYS}
{\bkmkend AAAAAAAAYS}
Inheritance diagram for gtest_uninitialized_test.GTestUninitializedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__uninitialized__test_1_1_g_test_uninitialized_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_uninitialized_test.GTestUninitializedTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__uninitialized__test_1_1_g_test_uninitialized_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testExitCodeAndOutput} (self){\bkmkstart AAAAAAAAYT}
{\bkmkend AAAAAAAAYT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_uninitialized_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_xml_outfiles_test.GTestXMLOutFilesTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_xml_outfiles_test.GTestXMLOutFilesTest}
{\xe \v gtest_xml_outfiles_test.GTestXMLOutFilesTest}
{\bkmkstart AAAAAAAAYU}
{\bkmkend AAAAAAAAYU}
Inheritance diagram for gtest_xml_outfiles_test.GTestXMLOutFilesTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__outfiles__test_1_1_g_test_x_m_l_out_files_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_xml_outfiles_test.GTestXMLOutFilesTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__outfiles__test_1_1_g_test_x_m_l_out_files_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b setUp} (self){\bkmkstart AAAAAAAAYV}
{\bkmkend AAAAAAAAYV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b tearDown} (self){\bkmkstart AAAAAAAAYW}
{\bkmkend AAAAAAAAYW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b DeleteFilesAndDir} (self){\bkmkstart AAAAAAAAYX}
{\bkmkend AAAAAAAAYX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutfile1} (self){\bkmkstart AAAAAAAAYY}
{\bkmkend AAAAAAAAYY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b testOutfile2} (self){\bkmkstart AAAAAAAAYZ}
{\bkmkend AAAAAAAAYZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b output_dir_}{\bkmkstart AAAAAAAAZA}
{\bkmkend AAAAAAAAZA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Unit test for Google Test's XML output functionality.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_outfiles_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_xml_output_unittest.GTestXMLOutputUnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest.GTestXMLOutputUnitTest}
{\bkmkstart AAAAAAAAZB}
{\bkmkend AAAAAAAAZB}
Inheritance diagram for gtest_xml_output_unittest.GTestXMLOutputUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__output__unittest_1_1_g_test_x_m_l_output_unit_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_xml_output_unittest.GTestXMLOutputUnitTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__output__unittest_1_1_g_test_x_m_l_output_unit_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testNonEmptyXmlOutput} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testEmptyXmlOutput} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testTimestampValue} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultOutputFile} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testSuppressedXmlOutput} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testFilteredTestXmlOutput} (self)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Unit test for Google Test's XML output functionality.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v testDefaultOutputFile\:gtest_xml_output_unittest::GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest::GTestXMLOutputUnitTest\:testDefaultOutputFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testDefaultOutputFile (  {\i self})}}
\par
{\bkmkstart AAAAAAAAZC}
{\bkmkend AAAAAAAAZC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Confirms that Google Test produces an XML output file with the expected\par
default name if no name is explicitly specified.\par
}
 \par
}}
{\xe \v testEmptyXmlOutput\:gtest_xml_output_unittest::GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest::GTestXMLOutputUnitTest\:testEmptyXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testEmptyXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAAAZD}
{\bkmkend AAAAAAAAZD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies XML output for a Google Test binary without actual tests.\par
\par
Runs a test program that generates an empty XML output, and\par
tests that the XML output is expected.\par
}
 \par
}}
{\xe \v testFilteredTestXmlOutput\:gtest_xml_output_unittest::GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest::GTestXMLOutputUnitTest\:testFilteredTestXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testFilteredTestXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAAAZE}
{\bkmkend AAAAAAAAZE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Verifies XML output when a filter is applied.\par
\par
Runs a test program that executes only some tests and verifies that\par
non-selected tests do not show up in the XML output.\par
}
 \par
}}
{\xe \v testNonEmptyXmlOutput\:gtest_xml_output_unittest::GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest::GTestXMLOutputUnitTest\:testNonEmptyXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testNonEmptyXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAAAZF}
{\bkmkend AAAAAAAAZF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs a test program that generates a non-empty XML output, and\par
tests that the XML output is expected.\par
}
 \par
}}
{\xe \v testSuppressedXmlOutput\:gtest_xml_output_unittest::GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest::GTestXMLOutputUnitTest\:testSuppressedXmlOutput}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testSuppressedXmlOutput (  {\i self})}}
\par
{\bkmkstart AAAAAAAAZG}
{\bkmkend AAAAAAAAZG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that no XML file is generated if the default XML listener is\par
shut down before RUN_ALL_TESTS is invoked.\par
}
 \par
}}
{\xe \v testTimestampValue\:gtest_xml_output_unittest::GTestXMLOutputUnitTest}
{\xe \v gtest_xml_output_unittest::GTestXMLOutputUnitTest\:testTimestampValue}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_output_unittest.GTestXMLOutputUnitTest.testTimestampValue (  {\i self})}}
\par
{\bkmkstart AAAAAAAAZH}
{\bkmkend AAAAAAAAZH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Checks whether the timestamp attribute in the XML output is valid.\par
\par
Runs a test program that generates an empty XML output, and checks if\par
the timestamp attribute in the testsuites tag is valid.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_output_unittest.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_xml_test_utils.GTestXMLTestCase Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_xml_test_utils.GTestXMLTestCase}
{\xe \v gtest_xml_test_utils.GTestXMLTestCase}
{\bkmkstart AAAAAAAAZI}
{\bkmkend AAAAAAAAZI}
Inheritance diagram for gtest_xml_test_utils.GTestXMLTestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__test__utils_1_1_g_test_x_m_l_test_case__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_xml_test_utils.GTestXMLTestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__xml__test__utils_1_1_g_test_x_m_l_test_case__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b AssertEquivalentNodes} (self, expected_node, actual_node)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b NormalizeXml} (self, element)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b identifying_attribute}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Base class for tests of Google Test's XML output functionality.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v AssertEquivalentNodes\:gtest_xml_test_utils::GTestXMLTestCase}
{\xe \v gtest_xml_test_utils::GTestXMLTestCase\:AssertEquivalentNodes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_test_utils.GTestXMLTestCase.AssertEquivalentNodes (  {\i self},   {\i expected_node},   {\i actual_node})}}
\par
{\bkmkstart AAAAAAAAZJ}
{\bkmkend AAAAAAAAZJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Asserts that actual_node (a DOM node object) is equivalent to\par
expected_node (another DOM node object), in that either both of\par
them are CDATA nodes and have the same value, or both are DOM\par
elements and actual_node meets all of the following conditions:\par
\par
*  It has the same tag name as expected_node.\par
*  It has the same set of attributes as expected_node, each with\par
   the same value as the corresponding attribute of expected_node.\par
   Exceptions are any attribute named "time", which needs only be\par
   convertible to a floating-point number and any attribute named\par
   "type_param" which only has to be non-empty.\par
*  It has an equivalent set of child nodes (including elements and\par
   CDATA sections) as expected_node.  Note that we ignore the\par
   order of the children as they are not guaranteed to be in any\par
   particular order.\par
}
 \par
}}
{\xe \v NormalizeXml\:gtest_xml_test_utils::GTestXMLTestCase}
{\xe \v gtest_xml_test_utils::GTestXMLTestCase\:NormalizeXml}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_xml_test_utils.GTestXMLTestCase.NormalizeXml (  {\i self},   {\i element})}}
\par
{\bkmkstart AAAAAAAAZK}
{\bkmkend AAAAAAAAZK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Normalizes Google Test's XML output to eliminate references to transient\par
information that may change from run to run.\par
\par
*  The "time" attribute of <testsuites>, <testsuite> and <testcase>\par
   elements is replaced with a single asterisk, if it contains\par
   only digit characters.\par
*  The "timestamp" attribute of <testsuites> elements is replaced with a\par
   single asterisk, if it contains a valid ISO8601 datetime value.\par
*  The "type_param" attribute of <testcase> elements is replaced with a\par
   single asterisk (if it sn non-empty) as it is the type name returned\par
   by the compiler and is platform dependent.\par
*  The line info reported in the first line of the "message"\par
   attribute and CDATA section of <failure> elements is replaced with the\par
   file's basename and a single asterisk for the line number.\par
*  The directory names in file paths are removed.\par
*  The stack traces are removed.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v identifying_attribute\:gtest_xml_test_utils::GTestXMLTestCase}
{\xe \v gtest_xml_test_utils::GTestXMLTestCase\:identifying_attribute}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dictionary gtest_xml_test_utils.GTestXMLTestCase.identifying_attribute{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAZL}
{\bkmkend AAAAAAAAZL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =  \{\par
    'testsuites': 'name',\par
    'testsuite': 'name',\par
    'testcase':  'name',\par
    'failure':   'message',\par
    \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_test_utils.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::GtMatcher< Rhs > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::GtMatcher< Rhs >}
{\xe \v testing::internal::GtMatcher< Rhs >}
{\bkmkstart AAAAAAADCZ}
{\bkmkend AAAAAAADCZ}
Inheritance diagram for testing::internal::GtMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_gt_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::GtMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_gt_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GtMatcher} (const Rhs &rhs){\bkmkstart AAAAAAADDA}
{\bkmkend AAAAAAADDA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADDB}
{\bkmkend AAAAAAADDB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b NegatedDesc} (){\bkmkstart AAAAAAADDC}
{\bkmkend AAAAAAADDC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::HasNewFatalFailureHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::HasNewFatalFailureHelper}
{\xe \v testing::internal::HasNewFatalFailureHelper}
{\bkmkstart AAAAAAADDD}
{\bkmkend AAAAAAADDD}
Inheritance diagram for testing::internal::HasNewFatalFailureHelper:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_has_new_fatal_failure_helper__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::HasNewFatalFailureHelper:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_has_new_fatal_failure_helper__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ReportTestPartResult} (const {\b TestPartResult} &result){\bkmkstart AAAAAAADDE}
{\bkmkend AAAAAAADDE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b has_new_fatal_failure} () const{\bkmkstart AAAAAAADDF}
{\bkmkend AAAAAAADDF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-test-part.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-test-part.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::HasSubstrMatcher< StringType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::HasSubstrMatcher< StringType >}
{\xe \v testing::internal::HasSubstrMatcher< StringType >}
{\bkmkstart AAAAAAADDG}
{\bkmkend AAAAAAADDG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b HasSubstrMatcher} (const StringType &substring){\bkmkstart AAAAAAADDH}
{\bkmkend AAAAAAADDH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > bool {\b MatchAndExplain} (CharType *s, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADDI}
{\bkmkend AAAAAAADDI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcheeStringType > bool {\b MatchAndExplain} (const MatcheeStringType &s, {\b MatchResultListener} *) const{\bkmkstart AAAAAAADDJ}
{\bkmkend AAAAAAADDJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADDK}
{\bkmkend AAAAAAADDK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADDL}
{\bkmkend AAAAAAADDL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
upload.HttpRpcServer Class Reference\par \pard\plain 
{\tc\tcl2 \v upload.HttpRpcServer}
{\xe \v upload.HttpRpcServer}
{\bkmkstart AAAAAAAEJX}
{\bkmkend AAAAAAAEJX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
elif e.code >= 500 and e.code < 600: {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Server Error - try again.} \par}
}}\par
Inheritance diagram for upload.HttpRpcServer:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_http_rpc_server__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for upload.HttpRpcServer:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_http_rpc_server__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b cookie_file}{\bkmkstart AAAAAAAEJY}
{\bkmkend AAAAAAAEJY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b cookie_jar}{\bkmkstart AAAAAAAEJZ}
{\bkmkend AAAAAAAEJZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b authenticated}{\bkmkstart AAAAAAAEKA}
{\bkmkend AAAAAAAEKA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
elif e.code >= 500 and e.code < 600: {\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid {\tc\tcl3 Server Error - try again.} \par}
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
continue {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Provides a simplified RPC-style interface for HTTP requests.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/upload.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.IfNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.IfNode}
{\xe \v pump.IfNode}
{\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, exp=None, then_branch=None, else_branch=None){\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b exp}{\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b then_branch}{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b else_branch}{\bkmkstart AAAAAAABBM}
{\bkmkend AAAAAAABBM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IgnoredValue Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IgnoredValue}
{\xe \v testing::internal::IgnoredValue}
{\bkmkstart AAAAAAADDM}
{\bkmkend AAAAAAADDM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b IgnoredValue} (const T &){\bkmkstart AAAAAAADDN}
{\bkmkend AAAAAAADDN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IgnoreResultAction< A > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IgnoreResultAction< A >}
{\xe \v testing::internal::IgnoreResultAction< A >}
{\bkmkstart AAAAAAADDO}
{\bkmkend AAAAAAADDO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IgnoreResultAction} (const A &action){\bkmkstart AAAAAAADDP}
{\bkmkend AAAAAAADDP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAADDQ}
{\bkmkend AAAAAAADDQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >::Impl< LhsContainer > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >::Impl< LhsContainer >}
{\xe \v testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >::Impl< LhsContainer >}
{\bkmkstart AAAAAAAEIH}
{\bkmkend AAAAAAAEIH}
Inheritance diagram for testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >::Impl< LhsContainer >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_sorted_by_matcher_1_1_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >::Impl< LhsContainer >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_sorted_by_matcher_1_1_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< GTEST_REMOVE_REFERENCE_AND_CONST_(LhsContainer)> {\b LhsView}{\bkmkstart AAAAAAAEII}
{\bkmkend AAAAAAAEII}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef LhsView::type {\b LhsStlContainer}{\bkmkstart AAAAAAAEIJ}
{\bkmkend AAAAAAAEIJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef LhsView::const_reference {\b LhsStlContainerReference}{\bkmkstart AAAAAAAEIK}
{\bkmkend AAAAAAAEIK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b RemoveConstFromKey}< typename LhsStlContainer::value_type >::type {\b LhsValue}{\bkmkstart AAAAAAAEIL}
{\bkmkend AAAAAAAEIL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Impl} (const Comparator &comparator, const ContainerMatcher &matcher){\bkmkstart AAAAAAAEIM}
{\bkmkend AAAAAAAEIM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAAEIN}
{\bkmkend AAAAAAAEIN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAAEIO}
{\bkmkend AAAAAAAEIO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (LhsContainer lhs, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAAEIP}
{\bkmkend AAAAAAAEIP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::FloatingEqMatcher< FloatType >::Impl< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::FloatingEqMatcher< FloatType >::Impl< T >}
{\xe \v testing::internal::FloatingEqMatcher< FloatType >::Impl< T >}
{\bkmkstart AAAAAAACVW}
{\bkmkend AAAAAAACVW}
Inheritance diagram for testing::internal::FloatingEqMatcher< FloatType >::Impl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_floating_eq_matcher_1_1_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::FloatingEqMatcher< FloatType >::Impl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_floating_eq_matcher_1_1_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Impl} (FloatType expected, bool nan_eq_nan, FloatType max_abs_error){\bkmkstart AAAAAAACVX}
{\bkmkend AAAAAAACVX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (T value, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACVY}
{\bkmkend AAAAAAACVY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACVZ}
{\bkmkend AAAAAAACVZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACWA}
{\bkmkend AAAAAAACWA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SizeIsMatcher< SizeMatcher >::Impl< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SizeIsMatcher< SizeMatcher >::Impl< Container >}
{\xe \v testing::internal::SizeIsMatcher< SizeMatcher >::Impl< Container >}
{\bkmkstart AAAAAAADVB}
{\bkmkend AAAAAAADVB}
Inheritance diagram for testing::internal::SizeIsMatcher< SizeMatcher >::Impl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_size_is_matcher_1_1_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::SizeIsMatcher< SizeMatcher >::Impl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_size_is_matcher_1_1_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< GTEST_REMOVE_REFERENCE_AND_CONST_(Container)> {\b ContainerView}{\bkmkstart AAAAAAADVC}
{\bkmkend AAAAAAADVC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ContainerView::type::size_type {\b SizeType}{\bkmkstart AAAAAAADVD}
{\bkmkend AAAAAAADVD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Impl} (const SizeMatcher &size_matcher){\bkmkstart AAAAAAADVE}
{\bkmkend AAAAAAADVE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADVF}
{\bkmkend AAAAAAADVF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADVG}
{\bkmkend AAAAAAADVG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (Container container, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADVH}
{\bkmkend AAAAAAADVH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >::Impl< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >::Impl< Container >}
{\xe \v testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >::Impl< Container >}
{\bkmkstart AAAAAAACLL}
{\bkmkend AAAAAAACLL}
Inheritance diagram for testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >::Impl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_begin_end_distance_is_matcher_1_1_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::BeginEndDistanceIsMatcher< DistanceMatcher >::Impl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_begin_end_distance_is_matcher_1_1_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< GTEST_REMOVE_REFERENCE_AND_CONST_(Container)> {\b ContainerView}{\bkmkstart AAAAAAACLM}
{\bkmkend AAAAAAACLM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::iterator_traits< typename ContainerView::type::const_iterator >::difference_type {\b DistanceType}{\bkmkstart AAAAAAACLN}
{\bkmkend AAAAAAACLN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Impl} (const DistanceMatcher &distance_matcher){\bkmkstart AAAAAAACLO}
{\bkmkend AAAAAAACLO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAACLP}
{\bkmkend AAAAAAACLP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAACLQ}
{\bkmkend AAAAAAACLQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (Container container, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACLR}
{\bkmkend AAAAAAACLR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >::Impl< LhsContainer > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >::Impl< LhsContainer >}
{\xe \v testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >::Impl< LhsContainer >}
{\bkmkstart AAAAAAADOB}
{\bkmkend AAAAAAADOB}
Inheritance diagram for testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >::Impl< LhsContainer >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_pointwise_matcher_1_1_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >::Impl< LhsContainer >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_pointwise_matcher_1_1_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< GTEST_REMOVE_REFERENCE_AND_CONST_(LhsContainer)> {\b LhsView}{\bkmkstart AAAAAAADOC}
{\bkmkend AAAAAAADOC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef LhsView::type {\b LhsStlContainer}{\bkmkstart AAAAAAADOD}
{\bkmkend AAAAAAADOD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef LhsView::const_reference {\b LhsStlContainerReference}{\bkmkstart AAAAAAADOE}
{\bkmkend AAAAAAADOE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef LhsStlContainer::value_type {\b LhsValue}{\bkmkstart AAAAAAADOF}
{\bkmkend AAAAAAADOF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< const LhsValue &, const RhsValue & > {\b InnerMatcherArg}{\bkmkstart AAAAAAADOG}
{\bkmkend AAAAAAADOG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Impl} (const TupleMatcher &tuple_matcher, const RhsStlContainer &rhs){\bkmkstart AAAAAAADOH}
{\bkmkend AAAAAAADOH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADOI}
{\bkmkend AAAAAAADOI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADOJ}
{\bkmkend AAAAAAADOJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (LhsContainer lhs, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADOK}
{\bkmkend AAAAAAADOK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ImplicitlyConvertible< From, To > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ImplicitlyConvertible< From, To >}
{\xe \v testing::internal::ImplicitlyConvertible< From, To >}
{\bkmkstart AAAAAAADDR}
{\bkmkend AAAAAAADDR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const bool {\b value}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v value\:testing::internal::ImplicitlyConvertible}
{\xe \v testing::internal::ImplicitlyConvertible\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename From , typename To > const bool {\b testing::internal::ImplicitlyConvertible}< From, {\b To} >::value{\f2 [static]}}}
\par
{\bkmkstart AAAAAAADDS}
{\bkmkend AAAAAAADDS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
      sizeof(Helper(ImplicitlyConvertible::MakeFrom())) == 1\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Include Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Include}
{\xe \v cpp.ast.Include}
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
Inheritance diagram for cpp.ast.Include:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_include__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Include:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_include__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, filename, system){\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b filename}{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b system}{\bkmkstart AAAAAAAAPJ}
{\bkmkend AAAAAAAAPJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::InitGoogleTestTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::InitGoogleTestTest}
{\xe \v testing::InitGoogleTestTest}
{\bkmkstart AAAAAAABMG}
{\bkmkend AAAAAAABMG}
Inheritance diagram for testing::InitGoogleTestTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_init_google_test_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::InitGoogleTestTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_init_google_test_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAABMH}
{\bkmkend AAAAAAABMH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > static void {\b AssertStringArrayEq} (size_t size1, CharType **array1, size_t size2, CharType **array2){\bkmkstart AAAAAAABMI}
{\bkmkend AAAAAAABMI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b CheckFlags} (const {\b Flags} &expected){\bkmkstart AAAAAAABMJ}
{\bkmkend AAAAAAABMJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > static void {\b TestParsingFlags} (int argc1, const CharType **argv1, int argc2, const CharType **argv2, const {\b Flags} &expected, bool should_print_help){\bkmkstart AAAAAAABMK}
{\bkmkend AAAAAAABMK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::InSequence Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::InSequence}
{\xe \v testing::InSequence}
{\bkmkstart AAAAAAABML}
{\bkmkend AAAAAAABML}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-spec-builders.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
IntegerFunctionTest Class Reference\par \pard\plain 
{\tc\tcl2 \v IntegerFunctionTest}
{\xe \v IntegerFunctionTest}
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
Inheritance diagram for IntegerFunctionTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_integer_function_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for IntegerFunctionTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_integer_function_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample5_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Interface Class Reference\par \pard\plain 
{\tc\tcl2 \v Interface}
{\xe \v Interface}
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
Inheritance diagram for Interface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromString} (char *str)=0{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual char * {\b StringFromString} (char *str)=0{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b IntFromString} (char *str)=0{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int & {\b IntRefFromString} (char *str)=0{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromFunc} (void(*func)(char *str))=0{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromIntRef} (int &n)=0{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromFloat} (float n)=0{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromDouble} (double n)=0{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b VoidFromVector} (const std::vector< int > &v)=0{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::IntReferenceWrapper Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::IntReferenceWrapper}
{\xe \v testing::gmock_matchers_test::IntReferenceWrapper}
{\bkmkstart AAAAAAACCY}
{\bkmkend AAAAAAACCY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IntReferenceWrapper} (const int &a_value){\bkmkstart AAAAAAACCZ}
{\bkmkend AAAAAAACCZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const int * {\b value}{\bkmkstart AAAAAAACDA}
{\bkmkend AAAAAAACDA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::IntValue Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::IntValue}
{\xe \v testing::gmock_matchers_test::IntValue}
{\bkmkstart AAAAAAACDB}
{\bkmkend AAAAAAACDB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IntValue} (int a_value){\bkmkstart AAAAAAACDC}
{\bkmkend AAAAAAACDC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value} () const{\bkmkstart AAAAAAACDD}
{\bkmkend AAAAAAACDD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeAction< FunctionImpl > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeAction< FunctionImpl >}
{\xe \v testing::internal::InvokeAction< FunctionImpl >}
{\bkmkstart AAAAAAADDT}
{\bkmkend AAAAAAADDT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b InvokeAction} (FunctionImpl function_impl){\bkmkstart AAAAAAADDU}
{\bkmkend AAAAAAADDU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > Result {\b Perform} (const ArgumentTuple &args){\bkmkstart AAAAAAADDV}
{\bkmkend AAAAAAADDV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-more-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< Result, ArgumentTuple > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< Result, ArgumentTuple >}
{\xe \v testing::internal::InvokeHelper< Result, ArgumentTuple >}
{\bkmkstart AAAAAAADDW}
{\bkmkend AAAAAAADDW}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
InvokeHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v InvokeHelper}
{\xe \v InvokeHelper}
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b VoidFromVoid} (){\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b VoidFromString} (char *){\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b StaticVoidFromVoid} (){\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b StaticVoidFromString} (char *){\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b StaticIntFromString} (char *){\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b StaticBoolFromString} (const char *){\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1 > >}
{\bkmkstart AAAAAAADDX}
{\bkmkend AAAAAAADDX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1 > &args){\bkmkstart AAAAAAADDY}
{\bkmkend AAAAAAADDY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1 > &args){\bkmkstart AAAAAAADDZ}
{\bkmkend AAAAAAADDZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2 > >}
{\bkmkstart AAAAAAADEA}
{\bkmkend AAAAAAADEA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2 > &args){\bkmkstart AAAAAAADEB}
{\bkmkend AAAAAAADEB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2 > &args){\bkmkstart AAAAAAADEC}
{\bkmkend AAAAAAADEC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3 > >}
{\bkmkstart AAAAAAADED}
{\bkmkend AAAAAAADED}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3 > &args){\bkmkstart AAAAAAADEE}
{\bkmkend AAAAAAADEE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3 > &args){\bkmkstart AAAAAAADEF}
{\bkmkend AAAAAAADEF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4 > >}
{\bkmkstart AAAAAAADEG}
{\bkmkend AAAAAAADEG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3, A4 > &args){\bkmkstart AAAAAAADEH}
{\bkmkend AAAAAAADEH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3, A4 > &args){\bkmkstart AAAAAAADEI}
{\bkmkend AAAAAAADEI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5 > >}
{\bkmkstart AAAAAAADEJ}
{\bkmkend AAAAAAADEJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3, A4, A5 > &args){\bkmkstart AAAAAAADEK}
{\bkmkend AAAAAAADEK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3, A4, A5 > &args){\bkmkstart AAAAAAADEL}
{\bkmkend AAAAAAADEL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6 > >}
{\bkmkstart AAAAAAADEM}
{\bkmkend AAAAAAADEM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3, A4, A5, A6 > &args){\bkmkstart AAAAAAADEN}
{\bkmkend AAAAAAADEN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3, A4, A5, A6 > &args){\bkmkstart AAAAAAADEO}
{\bkmkend AAAAAAADEO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >}
{\bkmkstart AAAAAAADEP}
{\bkmkend AAAAAAADEP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > &args){\bkmkstart AAAAAAADEQ}
{\bkmkend AAAAAAADEQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > &args){\bkmkstart AAAAAAADER}
{\bkmkend AAAAAAADER}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >}
{\bkmkstart AAAAAAADES}
{\bkmkend AAAAAAADES}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > &args){\bkmkstart AAAAAAADET}
{\bkmkend AAAAAAADET}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > &args){\bkmkstart AAAAAAADEU}
{\bkmkend AAAAAAADEU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >}
{\bkmkstart AAAAAAADEV}
{\bkmkend AAAAAAADEV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > &args){\bkmkstart AAAAAAADEW}
{\bkmkend AAAAAAADEW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > &args){\bkmkstart AAAAAAADEX}
{\bkmkend AAAAAAADEX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >}
{\bkmkstart AAAAAAADEY}
{\bkmkend AAAAAAADEY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > &args){\bkmkstart AAAAAAADEZ}
{\bkmkend AAAAAAADEZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > &args){\bkmkstart AAAAAAADFA}
{\bkmkend AAAAAAADFA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeHelper< R, ::testing::tuple<> > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeHelper< R, ::testing::tuple<> >}
{\xe \v testing::internal::InvokeHelper< R, ::testing::tuple<> >}
{\bkmkstart AAAAAAADFB}
{\bkmkend AAAAAAADFB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > static R {\b Invoke} ({\b Function} function, const ::testing::tuple<> &){\bkmkstart AAAAAAADFC}
{\bkmkend AAAAAAADFC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Class , typename MethodPtr > static R {\b InvokeMethod} (Class *obj_ptr, MethodPtr method_ptr, const ::testing::tuple<> &){\bkmkstart AAAAAAADFD}
{\bkmkend AAAAAAADFD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeMethodAction< Class, MethodPtr > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeMethodAction< Class, MethodPtr >}
{\xe \v testing::internal::InvokeMethodAction< Class, MethodPtr >}
{\bkmkstart AAAAAAADFE}
{\bkmkend AAAAAAADFE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b InvokeMethodAction} (Class *obj_ptr, MethodPtr method_ptr){\bkmkstart AAAAAAADFF}
{\bkmkend AAAAAAADFF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > Result {\b Perform} (const ArgumentTuple &args) const{\bkmkstart AAAAAAADFG}
{\bkmkend AAAAAAADFG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-more-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >}
{\xe \v testing::internal::InvokeMethodWithoutArgsAction< Class, MethodPtr >}
{\bkmkstart AAAAAAADFH}
{\bkmkend AAAAAAADFH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b InvokeMethodWithoutArgsAction} (Class *obj_ptr, MethodPtr method_ptr){\bkmkstart AAAAAAADFI}
{\bkmkend AAAAAAADFI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > Result {\b Perform} (const ArgumentTuple &) const{\bkmkstart AAAAAAADFJ}
{\bkmkend AAAAAAADFJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::InvokeWithoutArgsAction< FunctionImpl > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::InvokeWithoutArgsAction< FunctionImpl >}
{\xe \v testing::internal::InvokeWithoutArgsAction< FunctionImpl >}
{\bkmkstart AAAAAAADFK}
{\bkmkend AAAAAAADFK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b InvokeWithoutArgsAction} (FunctionImpl function_impl){\bkmkstart AAAAAAADFL}
{\bkmkend AAAAAAADFL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > Result {\b Perform} (const ArgumentTuple &){\bkmkstart AAAAAAADFM}
{\bkmkend AAAAAAADFM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_pointer< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_pointer< T >}
{\xe \v testing::internal::is_pointer< T >}
{\bkmkstart AAAAAAADFN}
{\bkmkend AAAAAAADFN}
Inheritance diagram for testing::internal::is_pointer< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__pointer__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::is_pointer< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__pointer__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_pointer< T * > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_pointer< T * >}
{\xe \v testing::internal::is_pointer< T * >}
{\bkmkstart AAAAAAADFO}
{\bkmkend AAAAAAADFO}
Inheritance diagram for testing::internal::is_pointer< T * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__pointer_3_01_t_01_5_01_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::is_pointer< T * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__pointer_3_01_t_01_5_01_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_reference< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_reference< T >}
{\xe \v testing::internal::is_reference< T >}
{\bkmkstart AAAAAAADFP}
{\bkmkend AAAAAAADFP}
Inheritance diagram for testing::internal::is_reference< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__reference__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::is_reference< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__reference__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::is_reference< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::is_reference< T & >}
{\xe \v testing::internal::is_reference< T & >}
{\bkmkstart AAAAAAADFQ}
{\bkmkend AAAAAAADFQ}
Inheritance diagram for testing::internal::is_reference< T & >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__reference_3_01_t_01_6_01_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::is_reference< T & >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1is__reference_3_01_t_01_6_01_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsAProtocolMessage< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsAProtocolMessage< T >}
{\xe \v testing::internal::IsAProtocolMessage< T >}
{\bkmkstart AAAAAAADFR}
{\bkmkend AAAAAAADFR}
Inheritance diagram for testing::internal::IsAProtocolMessage< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_is_a_protocol_message__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::IsAProtocolMessage< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_is_a_protocol_message__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::IsGreaterThan Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::IsGreaterThan}
{\xe \v testing::gmock_matchers_test::IsGreaterThan}
{\bkmkstart AAAAAAACDE}
{\bkmkend AAAAAAACDE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b IsGreaterThan} (int threshold){\bkmkstart AAAAAAACDF}
{\bkmkend AAAAAAACDF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (int n) const{\bkmkstart AAAAAAACDG}
{\bkmkend AAAAAAACDG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::IsHalfOfMatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::IsHalfOfMatcher}
{\xe \v testing::gmock_matchers_test::IsHalfOfMatcher}
{\bkmkstart AAAAAAACDH}
{\bkmkend AAAAAAACDH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > bool {\b MatchAndExplain} (const tuple< T1, T2 > &a_pair, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACDI}
{\bkmkend AAAAAAACDI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACDJ}
{\bkmkend AAAAAAACDJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (ostream *os) const{\bkmkstart AAAAAAACDK}
{\bkmkend AAAAAAACDK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IsNullMatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IsNullMatcher}
{\xe \v testing::internal::IsNullMatcher}
{\bkmkstart AAAAAAADFS}
{\bkmkend AAAAAAADFS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Pointer > bool {\b MatchAndExplain} (const Pointer &p, {\b MatchResultListener} *) const{\bkmkstart AAAAAAADFT}
{\bkmkend AAAAAAADFT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADFU}
{\bkmkend AAAAAAADFU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADFV}
{\bkmkend AAAAAAADFV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gtest_printers_test::iterator Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gtest_printers_test::iterator}
{\xe \v testing::gtest_printers_test::iterator}
{\bkmkstart AAAAAAACHB}
{\bkmkend AAAAAAACHB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

char {\b x}{\bkmkstart AAAAAAACHC}
{\bkmkend AAAAAAACHC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IteratorTraits< Iterator > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IteratorTraits< Iterator >}
{\xe \v testing::internal::IteratorTraits< Iterator >}
{\bkmkstart AAAAAAADFW}
{\bkmkend AAAAAAADFW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Iterator::value_type {\b value_type}{\bkmkstart AAAAAAADFX}
{\bkmkend AAAAAAADFX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IteratorTraits< const T * > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IteratorTraits< const T * >}
{\xe \v testing::internal::IteratorTraits< const T * >}
{\bkmkstart AAAAAAADFY}
{\bkmkend AAAAAAADFY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b value_type}{\bkmkstart AAAAAAADFZ}
{\bkmkend AAAAAAADFZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::IteratorTraits< T * > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::IteratorTraits< T * >}
{\xe \v testing::internal::IteratorTraits< T * >}
{\bkmkstart AAAAAAADGA}
{\bkmkend AAAAAAADGA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b value_type}{\bkmkstart AAAAAAADGB}
{\bkmkend AAAAAAADGB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::KeyMatcher< M > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::KeyMatcher< M >}
{\xe \v testing::internal::KeyMatcher< M >}
{\bkmkstart AAAAAAADGC}
{\bkmkend AAAAAAADGC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b KeyMatcher} (M m){\bkmkstart AAAAAAADGD}
{\bkmkend AAAAAAADGD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename PairType > {\b operator Matcher< PairType >} () const{\bkmkstart AAAAAAADGE}
{\bkmkend AAAAAAADGE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::KeyMatcherImpl< PairType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::KeyMatcherImpl< PairType >}
{\xe \v testing::internal::KeyMatcherImpl< PairType >}
{\bkmkstart AAAAAAADGF}
{\bkmkend AAAAAAADGF}
Inheritance diagram for testing::internal::KeyMatcherImpl< PairType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_key_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::KeyMatcherImpl< PairType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_key_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef RawPairType::first_type {\b KeyType}{\bkmkstart AAAAAAADGG}
{\bkmkend AAAAAAADGG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_REFERENCE_AND_CONST_} (PairType) RawPairType{\bkmkstart AAAAAAADGH}
{\bkmkend AAAAAAADGH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InnerMatcher > {\b KeyMatcherImpl} (InnerMatcher inner_matcher){\bkmkstart AAAAAAADGI}
{\bkmkend AAAAAAADGI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (PairType key_value, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADGJ}
{\bkmkend AAAAAAADGJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADGK}
{\bkmkend AAAAAAADGK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADGL}
{\bkmkend AAAAAAADGL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::KindOf< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::KindOf< T >}
{\xe \v testing::internal::KindOf< T >}
{\bkmkstart AAAAAAADGM}
{\bkmkend AAAAAAADGM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum \{ {\b value} = kOther
 \}{\bkmkstart AAAAAAADGN}
{\bkmkend AAAAAAADGN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Le2Matcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Le2Matcher}
{\xe \v testing::internal::Le2Matcher}
{\bkmkstart AAAAAAADGO}
{\bkmkend AAAAAAADGO}
Inheritance diagram for testing::internal::Le2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_le2_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Le2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_le2_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADGP}
{\bkmkend AAAAAAADGP}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LeMatcher< Rhs > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LeMatcher< Rhs >}
{\xe \v testing::internal::LeMatcher< Rhs >}
{\bkmkstart AAAAAAADGQ}
{\bkmkend AAAAAAADGQ}
Inheritance diagram for testing::internal::LeMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_le_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LeMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_le_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b LeMatcher} (const Rhs &rhs){\bkmkstart AAAAAAADGR}
{\bkmkend AAAAAAADGR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADGS}
{\bkmkend AAAAAAADGS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b NegatedDesc} (){\bkmkstart AAAAAAADGT}
{\bkmkend AAAAAAADGT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LessByName< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LessByName< T >}
{\xe \v testing::internal::LessByName< T >}
{\bkmkstart AAAAAAADGU}
{\bkmkend AAAAAAADGU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (const T *a, const T *b){\bkmkstart AAAAAAADGV}
{\bkmkend AAAAAAADGV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-unittest-api_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LessComparator Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LessComparator}
{\xe \v testing::internal::LessComparator}
{\bkmkstart AAAAAAADGW}
{\bkmkend AAAAAAADGW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T , typename U > bool {\b operator()} (const T &lhs, const U &rhs) const{\bkmkstart AAAAAAADGX}
{\bkmkend AAAAAAADGX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::linked_ptr< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::linked_ptr< T >}
{\xe \v testing::internal::linked_ptr< T >}
{\bkmkstart AAAAAAADGY}
{\bkmkend AAAAAAADGY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b element_type}{\bkmkstart AAAAAAADGZ}
{\bkmkend AAAAAAADGZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b linked_ptr} (T *ptr=NULL){\bkmkstart AAAAAAADHA}
{\bkmkend AAAAAAADHA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U > {\b linked_ptr} ({\b linked_ptr}< U > const &ptr){\bkmkstart AAAAAAADHB}
{\bkmkend AAAAAAADHB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b linked_ptr} ({\b linked_ptr} const &ptr){\bkmkstart AAAAAAADHC}
{\bkmkend AAAAAAADHC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U > {\b linked_ptr} & {\b operator=} ({\b linked_ptr}< U > const &ptr){\bkmkstart AAAAAAADHD}
{\bkmkend AAAAAAADHD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b linked_ptr} & {\b operator=} ({\b linked_ptr} const &ptr){\bkmkstart AAAAAAADHE}
{\bkmkend AAAAAAADHE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b reset} (T *ptr=NULL){\bkmkstart AAAAAAADHF}
{\bkmkend AAAAAAADHF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b get} () const{\bkmkstart AAAAAAADHG}
{\bkmkend AAAAAAADHG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b operator->} () const{\bkmkstart AAAAAAADHH}
{\bkmkend AAAAAAADHH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T & {\b operator*} () const{\bkmkstart AAAAAAADHI}
{\bkmkend AAAAAAADHI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (T *p) const{\bkmkstart AAAAAAADHJ}
{\bkmkend AAAAAAADHJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator!=} (T *p) const{\bkmkstart AAAAAAADHK}
{\bkmkend AAAAAAADHK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U > bool {\b operator==} ({\b linked_ptr}< U > const &ptr) const{\bkmkstart AAAAAAADHL}
{\bkmkend AAAAAAADHL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U > bool {\b operator!=} ({\b linked_ptr}< U > const &ptr) const{\bkmkstart AAAAAAADHM}
{\bkmkend AAAAAAADHM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U > class {\b linked_ptr}{\bkmkstart AAAAAAADHN}
{\bkmkend AAAAAAADHN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::linked_ptr_internal Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::linked_ptr_internal}
{\xe \v testing::internal::linked_ptr_internal}
{\bkmkstart AAAAAAADHO}
{\bkmkend AAAAAAADHO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b join_new} (){\bkmkstart AAAAAAADHP}
{\bkmkend AAAAAAADHP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b join} ({\b linked_ptr_internal} const *ptr) GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex){\bkmkstart AAAAAAADHQ}
{\bkmkend AAAAAAADHQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b depart} () GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex){\bkmkstart AAAAAAADHR}
{\bkmkend AAAAAAADHR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-linked_ptr.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LinkedPtrLessThan< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LinkedPtrLessThan< T >}
{\xe \v testing::internal::LinkedPtrLessThan< T >}
{\bkmkstart AAAAAAADHS}
{\bkmkend AAAAAAADHS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (const ::{\b testing::internal::linked_ptr}< T > &lhs, const ::{\b testing::internal::linked_ptr}< T > &rhs) const{\bkmkstart AAAAAAADHT}
{\bkmkend AAAAAAADHT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ListenerTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ListenerTest}
{\xe \v testing::internal::ListenerTest}
{\bkmkstart AAAAAAADHU}
{\bkmkend AAAAAAADHU}
Inheritance diagram for testing::internal::ListenerTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_listener_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::ListenerTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_listener_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAADHV}
{\bkmkend AAAAAAADHV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAADHW}
{\bkmkend AAAAAAADHW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAADHX}
{\bkmkend AAAAAAADHX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAADHY}
{\bkmkend AAAAAAADHY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-listener_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.LiteralDollarNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.LiteralDollarNode}
{\xe \v pump.LiteralDollarNode}
{\bkmkstart AAAAAAABBN}
{\bkmkend AAAAAAABBN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, token){\bkmkstart AAAAAAABBO}
{\bkmkend AAAAAAABBO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b token}{\bkmkstart AAAAAAABBP}
{\bkmkend AAAAAAABBP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kFromKind, From, kToKind, To > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kFromKind, From, kToKind, To >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kFromKind, From, kToKind, To >}
{\bkmkstart AAAAAAADHZ}
{\bkmkend AAAAAAADHZ}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kFromKind, From, kToKind, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kFromKind, From, kToKind, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kBool, bool > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kBool, bool >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kBool, bool >}
{\bkmkstart AAAAAAADIA}
{\bkmkend AAAAAAADIA}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kBool, bool >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_bd476390bd99f079822ee608db095098b.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kBool, bool >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_bool_00_01bool_01_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kFloatingPoint, To > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kFloatingPoint, To >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kFloatingPoint, To >}
{\bkmkstart AAAAAAADIB}
{\bkmkend AAAAAAADIB}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kFloatingPoint, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_fe2644d499788ba99de559cd470f71f8f.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kFloatingPoint, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_fbe85bd9146e6cffe5ea653cc631a74aa.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kInteger, To > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kInteger, To >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kInteger, To >}
{\bkmkstart AAAAAAADIC}
{\bkmkend AAAAAAADIC}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kInteger, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_i2d24e2857a6ff23b74ee32585a3bd97d.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kBool, bool, kInteger, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_bool_00_01bool_00_01k_ia6456a854c219a023364441a78b69b99.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kBool, bool > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kBool, bool >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kBool, bool >}
{\bkmkstart AAAAAAADID}
{\bkmkend AAAAAAADID}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kBool, bool >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_frabc93aec973695c0baf479d10c040990.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kBool, bool >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_fr47e600a9a6a1d0efa429d0f6c92fd5b2.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kInteger, To > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kInteger, To >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kInteger, To >}
{\bkmkstart AAAAAAADIE}
{\bkmkend AAAAAAADIE}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kInteger, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_fr9f99dcae710569022654472098efd690.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kFloatingPoint, From, kInteger, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_floating_point_00_01_frdb81938a6eea903cc3ea19f69cbddf0d.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kBool, bool > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kBool, bool >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kBool, bool >}
{\bkmkstart AAAAAAADIF}
{\bkmkend AAAAAAADIF}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kBool, bool >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_070f96f9e8d2e93b0fcef730f9754fc28.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kBool, bool >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_002b51d63c6fbfdf6f974bde55a0b38db.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kFloatingPoint, To > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kFloatingPoint, To >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kFloatingPoint, To >}
{\bkmkstart AAAAAAADIG}
{\bkmkend AAAAAAADIG}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kFloatingPoint, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_06d9ce66e506577c5cac86f092102e7fa.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kFloatingPoint, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_0ce0fe9edf40204219c5560047460cede.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kInteger, To > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kInteger, To >}
{\xe \v testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kInteger, To >}
{\bkmkstart AAAAAAADIH}
{\bkmkend AAAAAAADIH}
Inheritance diagram for testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kInteger, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_01a7912276df46b68a7f14881c492b660.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LosslessArithmeticConvertibleImpl< kInteger, From, kInteger, To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1_lossless_arithmetic_convertible_impl_3_01k_integer_00_01_from_00_08df5adb547fa346e1a208b1cc08ffd20.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Lt2Matcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Lt2Matcher}
{\xe \v testing::internal::Lt2Matcher}
{\bkmkstart AAAAAAADII}
{\bkmkend AAAAAAADII}
Inheritance diagram for testing::internal::Lt2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_lt2_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Lt2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_lt2_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADIJ}
{\bkmkend AAAAAAADIJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::LtMatcher< Rhs > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::LtMatcher< Rhs >}
{\xe \v testing::internal::LtMatcher< Rhs >}
{\bkmkstart AAAAAAADIK}
{\bkmkend AAAAAAADIK}
Inheritance diagram for testing::internal::LtMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_lt_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::LtMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_lt_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b LtMatcher} (const Rhs &rhs){\bkmkstart AAAAAAADIL}
{\bkmkend AAAAAAADIL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADIM}
{\bkmkend AAAAAAADIM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b NegatedDesc} (){\bkmkstart AAAAAAADIN}
{\bkmkend AAAAAAADIN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Matcher< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::Matcher< T >}
{\xe \v testing::Matcher< T >}
{\bkmkstart AAAAAAABMM}
{\bkmkend AAAAAAABMM}
Inheritance diagram for testing::Matcher< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::Matcher< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (const {\b MatcherInterface}< T > *impl){\bkmkstart AAAAAAABMN}
{\bkmkend AAAAAAABMN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (T value){\bkmkstart AAAAAAABMO}
{\bkmkend AAAAAAABMO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Matcher< const internal::string &> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::Matcher< const internal::string &>}
{\xe \v testing::Matcher< const internal::string &>}
{\bkmkstart AAAAAAABMP}
{\bkmkend AAAAAAABMP}
Inheritance diagram for testing::Matcher< const internal::string &>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher_3_01const_01internal_1_1string_01_6_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::Matcher< const internal::string &>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher_3_01const_01internal_1_1string_01_6_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (const {\b MatcherInterface}< const internal::string &> *impl){\bkmkstart AAAAAAABMQ}
{\bkmkend AAAAAAABMQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (const internal::string &s){\bkmkstart AAAAAAABMR}
{\bkmkend AAAAAAABMR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (const char *s){\bkmkstart AAAAAAABMS}
{\bkmkend AAAAAAABMS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-matchers.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Matcher< internal::string > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::Matcher< internal::string >}
{\xe \v testing::Matcher< internal::string >}
{\bkmkstart AAAAAAABMT}
{\bkmkend AAAAAAABMT}
Inheritance diagram for testing::Matcher< internal::string >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher_3_01internal_1_1string_01_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::Matcher< internal::string >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher_3_01internal_1_1string_01_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (const {\b MatcherInterface}< internal::string > *impl){\bkmkstart AAAAAAABMU}
{\bkmkend AAAAAAABMU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (const internal::string &s){\bkmkstart AAAAAAABMV}
{\bkmkend AAAAAAABMV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Matcher} (const char *s){\bkmkstart AAAAAAABMW}
{\bkmkend AAAAAAABMW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-matchers.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherAsPredicate< M > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherAsPredicate< M >}
{\xe \v testing::internal::MatcherAsPredicate< M >}
{\bkmkstart AAAAAAADIO}
{\bkmkend AAAAAAADIO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MatcherAsPredicate} (M matcher){\bkmkstart AAAAAAADIP}
{\bkmkend AAAAAAADIP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > bool {\b operator()} (const T &x) const{\bkmkstart AAAAAAADIQ}
{\bkmkend AAAAAAADIQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherBase< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherBase< T >}
{\xe \v testing::internal::MatcherBase< T >}
{\bkmkstart AAAAAAADIR}
{\bkmkend AAAAAAADIR}
Inheritance diagram for testing::internal::MatcherBase< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_matcher_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b MatchAndExplain} (T x, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADIS}
{\bkmkend AAAAAAADIS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Matches} (T x) const{\bkmkstart AAAAAAADIT}
{\bkmkend AAAAAAADIT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADIU}
{\bkmkend AAAAAAADIU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADIV}
{\bkmkend AAAAAAADIV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ExplainMatchResultTo} (T x, ::std::ostream *os) const{\bkmkstart AAAAAAADIW}
{\bkmkend AAAAAAADIW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b MatcherDescriberInterface} * {\b GetDescriber} () const{\bkmkstart AAAAAAADIX}
{\bkmkend AAAAAAADIX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MatcherBase} (const {\b MatcherInterface}< T > *impl){\bkmkstart AAAAAAADIY}
{\bkmkend AAAAAAADIY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherCastImpl< T, M > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherCastImpl< T, M >}
{\xe \v testing::internal::MatcherCastImpl< T, M >}
{\bkmkstart AAAAAAADIZ}
{\bkmkend AAAAAAADIZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Matcher}< T > {\b Cast} (const M &polymorphic_matcher_or_value){\bkmkstart AAAAAAADJA}
{\bkmkend AAAAAAADJA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherCastImpl< T, Matcher< T > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherCastImpl< T, Matcher< T > >}
{\xe \v testing::internal::MatcherCastImpl< T, Matcher< T > >}
{\bkmkstart AAAAAAADJB}
{\bkmkend AAAAAAADJB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Matcher}< T > {\b Cast} (const {\b Matcher}< T > &matcher){\bkmkstart AAAAAAADJC}
{\bkmkend AAAAAAADJC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherCastImpl< T, Matcher< U > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherCastImpl< T, Matcher< U > >}
{\xe \v testing::internal::MatcherCastImpl< T, Matcher< U > >}
{\bkmkstart AAAAAAADJD}
{\bkmkend AAAAAAADJD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Matcher}< T > {\b Cast} (const {\b Matcher}< U > &source_matcher){\bkmkstart AAAAAAADJE}
{\bkmkend AAAAAAADJE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MatcherDescriberInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::MatcherDescriberInterface}
{\xe \v testing::MatcherDescriberInterface}
{\bkmkstart AAAAAAABMX}
{\bkmkend AAAAAAABMX}
Inheritance diagram for testing::MatcherDescriberInterface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher_describer_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const =0{\bkmkstart AAAAAAABMY}
{\bkmkend AAAAAAABMY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAABMZ}
{\bkmkend AAAAAAABMZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MatcherInterface< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MatcherInterface< T >}
{\xe \v testing::MatcherInterface< T >}
{\bkmkstart AAAAAAABNA}
{\bkmkend AAAAAAABNA}
Inheritance diagram for testing::MatcherInterface< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::MatcherInterface< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_matcher_interface__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (T x, {\b MatchResultListener} *listener) const =0{\bkmkstart AAAAAAABNB}
{\bkmkend AAAAAAABNB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< Tuple > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< Tuple >}
{\xe \v testing::internal::MatcherTuple< Tuple >}
{\bkmkstart AAAAAAADJF}
{\bkmkend AAAAAAADJF}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1 > >}
{\bkmkstart AAAAAAADJG}
{\bkmkend AAAAAAADJG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 > > {\b type}{\bkmkstart AAAAAAADJH}
{\bkmkend AAAAAAADJH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2 > >}
{\bkmkstart AAAAAAADJI}
{\bkmkend AAAAAAADJI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 > > {\b type}{\bkmkstart AAAAAAADJJ}
{\bkmkend AAAAAAADJJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3 > >}
{\bkmkstart AAAAAAADJK}
{\bkmkend AAAAAAADJK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 > > {\b type}{\bkmkstart AAAAAAADJL}
{\bkmkend AAAAAAADJL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4 > >}
{\bkmkstart AAAAAAADJM}
{\bkmkend AAAAAAADJM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 >, {\b Matcher}< A4 > > {\b type}{\bkmkstart AAAAAAADJN}
{\bkmkend AAAAAAADJN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5 > >}
{\bkmkstart AAAAAAADJO}
{\bkmkend AAAAAAADJO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 >, {\b Matcher}< A4 >, {\b Matcher}< A5 > > {\b type}{\bkmkstart AAAAAAADJP}
{\bkmkend AAAAAAADJP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6 > >}
{\bkmkstart AAAAAAADJQ}
{\bkmkend AAAAAAADJQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 >, {\b Matcher}< A4 >, {\b Matcher}< A5 >, {\b Matcher}< A6 > > {\b type}{\bkmkstart AAAAAAADJR}
{\bkmkend AAAAAAADJR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7 > >}
{\bkmkstart AAAAAAADJS}
{\bkmkend AAAAAAADJS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 >, {\b Matcher}< A4 >, {\b Matcher}< A5 >, {\b Matcher}< A6 >, {\b Matcher}< A7 > > {\b type}{\bkmkstart AAAAAAADJT}
{\bkmkend AAAAAAADJT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8 > >}
{\bkmkstart AAAAAAADJU}
{\bkmkend AAAAAAADJU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 >, {\b Matcher}< A4 >, {\b Matcher}< A5 >, {\b Matcher}< A6 >, {\b Matcher}< A7 >, {\b Matcher}< A8 > > {\b type}{\bkmkstart AAAAAAADJV}
{\bkmkend AAAAAAADJV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9 > >}
{\bkmkstart AAAAAAADJW}
{\bkmkend AAAAAAADJW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 >, {\b Matcher}< A4 >, {\b Matcher}< A5 >, {\b Matcher}< A6 >, {\b Matcher}< A7 >, {\b Matcher}< A8 >, {\b Matcher}< A9 > > {\b type}{\bkmkstart AAAAAAADJX}
{\bkmkend AAAAAAADJX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple< A1, A2, A3, A4, A5, A6, A7, A8, A9, A10 > >}
{\bkmkstart AAAAAAADJY}
{\bkmkend AAAAAAADJY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< {\b Matcher}< A1 >, {\b Matcher}< A2 >, {\b Matcher}< A3 >, {\b Matcher}< A4 >, {\b Matcher}< A5 >, {\b Matcher}< A6 >, {\b Matcher}< A7 >, {\b Matcher}< A8 >, {\b Matcher}< A9 >, {\b Matcher}< A10 > > {\b type}{\bkmkstart AAAAAAADJZ}
{\bkmkend AAAAAAADJZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatcherTuple< ::testing::tuple<> > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatcherTuple< ::testing::tuple<> >}
{\xe \v testing::internal::MatcherTuple< ::testing::tuple<> >}
{\bkmkstart AAAAAAADKA}
{\bkmkend AAAAAAADKA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< > {\b type}{\bkmkstart AAAAAAADKB}
{\bkmkend AAAAAAADKB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-generated-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatchesRegexMatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatchesRegexMatcher}
{\xe \v testing::internal::MatchesRegexMatcher}
{\bkmkstart AAAAAAADKC}
{\bkmkend AAAAAAADKC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MatchesRegexMatcher} (const {\b RE} *regex, bool full_match){\bkmkstart AAAAAAADKD}
{\bkmkend AAAAAAADKD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > bool {\b MatchAndExplain} (CharType *s, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADKE}
{\bkmkend AAAAAAADKE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class MatcheeStringType > bool {\b MatchAndExplain} (const MatcheeStringType &s, {\b MatchResultListener} *) const{\bkmkstart AAAAAAADKF}
{\bkmkend AAAAAAADKF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADKG}
{\bkmkend AAAAAAADKG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADKH}
{\bkmkend AAAAAAADKH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MatchMatrix Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MatchMatrix}
{\xe \v testing::internal::MatchMatrix}
{\bkmkstart AAAAAAADKI}
{\bkmkend AAAAAAADKI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MatchMatrix} (size_t num_elements, size_t num_matchers){\bkmkstart AAAAAAADKJ}
{\bkmkend AAAAAAADKJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b LhsSize} () const{\bkmkstart AAAAAAADKK}
{\bkmkend AAAAAAADKK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b RhsSize} () const{\bkmkstart AAAAAAADKL}
{\bkmkend AAAAAAADKL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b HasEdge} (size_t ilhs, size_t irhs) const{\bkmkstart AAAAAAADKM}
{\bkmkend AAAAAAADKM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetEdge} (size_t ilhs, size_t irhs, bool b){\bkmkstart AAAAAAADKN}
{\bkmkend AAAAAAADKN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b NextGraph} (){\bkmkstart AAAAAAADKO}
{\bkmkend AAAAAAADKO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Randomize} (){\bkmkstart AAAAAAADKP}
{\bkmkend AAAAAAADKP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

string {\b DebugString} () const{\bkmkstart AAAAAAADKQ}
{\bkmkend AAAAAAADKQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-matchers.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MatchResultListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::MatchResultListener}
{\xe \v testing::MatchResultListener}
{\bkmkstart AAAAAAABNC}
{\bkmkend AAAAAAABNC}
Inheritance diagram for testing::MatchResultListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_match_result_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MatchResultListener} (::std::ostream *os){\bkmkstart AAAAAAABND}
{\bkmkend AAAAAAABND}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b MatchResultListener} & {\b operator<<} (const T &x){\bkmkstart AAAAAAABNE}
{\bkmkend AAAAAAABNE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

::std::ostream * {\b stream} (){\bkmkstart AAAAAAABNF}
{\bkmkend AAAAAAABNF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b IsInterested} () const{\bkmkstart AAAAAAABNG}
{\bkmkend AAAAAAABNG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MaxBipartiteMatchState Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MaxBipartiteMatchState}
{\xe \v testing::internal::MaxBipartiteMatchState}
{\bkmkstart AAAAAAADKR}
{\bkmkend AAAAAAADKR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MaxBipartiteMatchState} (const {\b MatchMatrix} &graph){\bkmkstart AAAAAAADKS}
{\bkmkend AAAAAAADKS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

ElementMatcherPairs {\b Compute} (){\bkmkstart AAAAAAADKT}
{\bkmkend AAAAAAADKT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-matchers.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
upload.MercurialVCS Class Reference\par \pard\plain 
{\tc\tcl2 \v upload.MercurialVCS}
{\xe \v upload.MercurialVCS}
{\bkmkstart AAAAAAAEKB}
{\bkmkend AAAAAAAEKB}
Inheritance diagram for upload.MercurialVCS:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_mercurial_v_c_s__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for upload.MercurialVCS:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_mercurial_v_c_s__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, options, repo_dir){\bkmkstart AAAAAAAEKC}
{\bkmkend AAAAAAAEKC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GenerateDiff} (self, extra_args){\bkmkstart AAAAAAAEKD}
{\bkmkend AAAAAAAEKD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetUnknownFiles} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetBaseFile} (self, filename){\bkmkstart AAAAAAAEKE}
{\bkmkend AAAAAAAEKE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, options, repo_dir){\bkmkstart AAAAAAAEKC}
{\bkmkend AAAAAAAEKC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GenerateDiff} (self, extra_args){\bkmkstart AAAAAAAEKD}
{\bkmkend AAAAAAAEKD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetUnknownFiles} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetBaseFile} (self, filename){\bkmkstart AAAAAAAEKE}
{\bkmkend AAAAAAAEKE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b repo_dir}{\bkmkstart AAAAAAAEKF}
{\bkmkend AAAAAAAEKF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b subdir}{\bkmkstart AAAAAAAEKG}
{\bkmkend AAAAAAAEKG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b base_rev}{\bkmkstart AAAAAAAEKH}
{\bkmkend AAAAAAAEKH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Implementation of the VersionControlSystem interface for Mercurial.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetUnknownFiles\:upload::MercurialVCS}
{\xe \v upload::MercurialVCS\:GetUnknownFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.MercurialVCS.GetUnknownFiles (  {\i self})}}
\par
{\bkmkstart AAAAAAAEKI}
{\bkmkend AAAAAAAEKI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Return a list of files unknown to the VCS.}
 \par
}}
{\xe \v GetUnknownFiles\:upload::MercurialVCS}
{\xe \v upload::MercurialVCS\:GetUnknownFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.MercurialVCS.GetUnknownFiles (  {\i self})}}
\par
{\bkmkstart AAAAAAAEKI}
{\bkmkend AAAAAAAEKI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Return a list of files unknown to the VCS.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/upload.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
my_namespace::testing::Message Class Reference\par \pard\plain 
{\tc\tcl2 \v my_namespace::testing::Message}
{\xe \v my_namespace::testing::Message}
{\bkmkstart AAAAAAAAZN}
{\bkmkend AAAAAAAAZN}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Message Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Message}
{\xe \v testing::Message}
{\bkmkstart AAAAAAABNH}
{\bkmkend AAAAAAABNH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} (const {\b Message} &msg){\bkmkstart AAAAAAABNI}
{\bkmkend AAAAAAABNI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} (const char *str){\bkmkstart AAAAAAABNJ}
{\bkmkend AAAAAAABNJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b Message} & {\b operator<<} (const T &val){\bkmkstart AAAAAAABNK}
{\bkmkend AAAAAAABNK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b Message} & {\b operator<<} (T *const &pointer){\bkmkstart AAAAAAABNL}
{\bkmkend AAAAAAABNL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (BasicNarrowIoManip val){\bkmkstart AAAAAAABNM}
{\bkmkend AAAAAAABNM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (bool b){\bkmkstart AAAAAAABNN}
{\bkmkend AAAAAAABNN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (const wchar_t *wide_c_str){\bkmkstart AAAAAAABNO}
{\bkmkend AAAAAAABNO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Message} & {\b operator<<} (wchar_t *wide_c_str){\bkmkstart AAAAAAABNP}
{\bkmkend AAAAAAABNP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b GetString} () const{\bkmkstart AAAAAAABNQ}
{\bkmkend AAAAAAABNQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-message.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Method Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Method}
{\xe \v cpp.ast.Method}
{\bkmkstart AAAAAAAAPK}
{\bkmkend AAAAAAAAPK}
Inheritance diagram for cpp.ast.Method:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_method__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Method:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_method__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, in_class, return_type, parameters, modifiers, templated_types, body, namespace){\bkmkstart AAAAAAAAPL}
{\bkmkend AAAAAAAAPL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b in_class}{\bkmkstart AAAAAAAAPM}
{\bkmkend AAAAAAAAPM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::MixedUpTestCaseTest Class Reference\par \pard\plain 
{\tc\tcl2 \v foo::MixedUpTestCaseTest}
{\xe \v foo::MixedUpTestCaseTest}
{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
Inheritance diagram for foo::MixedUpTestCaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classfoo_1_1_mixed_up_test_case_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for foo::MixedUpTestCaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classfoo_1_1_mixed_up_test_case_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bar::MixedUpTestCaseTest Class Reference\par \pard\plain 
{\tc\tcl2 \v bar::MixedUpTestCaseTest}
{\xe \v bar::MixedUpTestCaseTest}
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
Inheritance diagram for bar::MixedUpTestCaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classbar_1_1_mixed_up_test_case_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for bar::MixedUpTestCaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classbar_1_1_mixed_up_test_case_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
bar::MixedUpTestCaseWithSameTestNameTest Class Reference\par \pard\plain 
{\tc\tcl2 \v bar::MixedUpTestCaseWithSameTestNameTest}
{\xe \v bar::MixedUpTestCaseWithSameTestNameTest}
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
Inheritance diagram for bar::MixedUpTestCaseWithSameTestNameTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classbar_1_1_mixed_up_test_case_with_same_test_name_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for bar::MixedUpTestCaseWithSameTestNameTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classbar_1_1_mixed_up_test_case_with_same_test_name_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::MixedUpTestCaseWithSameTestNameTest Class Reference\par \pard\plain 
{\tc\tcl2 \v foo::MixedUpTestCaseWithSameTestNameTest}
{\xe \v foo::MixedUpTestCaseWithSameTestNameTest}
{\bkmkstart AAAAAAAATY}
{\bkmkend AAAAAAAATY}
Inheritance diagram for foo::MixedUpTestCaseWithSameTestNameTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classfoo_1_1_mixed_up_test_case_with_same_test_name_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for foo::MixedUpTestCaseWithSameTestNameTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classfoo_1_1_mixed_up_test_case_with_same_test_name_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Mock Class Reference\par \pard\plain 
{\tc\tcl2 \v Mock}
{\xe \v Mock}
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
Inheritance diagram for Mock:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mock__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Mock:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mock__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (DoThis, void()){\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromString, void(char *str)){\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (StringFromString, char *(char *str)){\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (IntFromString, int(char *str)){\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (IntRefFromString, int &(char *str)){\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromFunc, void(void(*func)(char *str))){\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromIntRef, void(int &n)){\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromFloat, void(float n)){\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromDouble, void(double n)){\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidFromVector, void(const std::vector< int > &v)){\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-nice-strict_test.cc\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_link_test.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Mock Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Mock}
{\xe \v testing::Mock}
{\bkmkstart AAAAAAABNR}
{\bkmkend AAAAAAABNR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UntypedFunctionMockerBase}{\bkmkstart AAAAAAABNS}
{\bkmkend AAAAAAABNS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > class {\b internal::FunctionMockerBase}{\bkmkstart AAAAAAABNT}
{\bkmkend AAAAAAABNT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename M > class {\b NiceMock}{\bkmkstart AAAAAAABNU}
{\bkmkend AAAAAAABNU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename M > class {\b NaggyMock}{\bkmkstart AAAAAAABNV}
{\bkmkend AAAAAAABNV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename M > class {\b StrictMock}{\bkmkstart AAAAAAABNW}
{\bkmkend AAAAAAABNW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::MockB Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::MockB}
{\xe \v testing::gmock_generated_function_mockers_test::MockB}
{\bkmkstart AAAAAAABYM}
{\bkmkend AAAAAAABYM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (DoB, void()){\bkmkstart AAAAAAABYN}
{\bkmkend AAAAAAABYN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::MockBar Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::MockBar}
{\xe \v testing::gmock_nice_strict_test::MockBar}
{\bkmkstart AAAAAAACGF}
{\bkmkend AAAAAAACGF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockBar} (const string &s){\bkmkstart AAAAAAACGG}
{\bkmkend AAAAAAACGG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockBar} (char a1, char a2, string a3, string a4, int a5, int a6, const string &a7, const string &a8, bool a9, bool a10){\bkmkstart AAAAAAACGH}
{\bkmkend AAAAAAACGH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const string & {\b str} () const{\bkmkstart AAAAAAACGI}
{\bkmkend AAAAAAACGI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (This, int()){\bkmkstart AAAAAAACGJ}
{\bkmkend AAAAAAACGJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (That, string(int, bool)){\bkmkstart AAAAAAACGK}
{\bkmkend AAAAAAACGK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::MockFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::MockFoo}
{\xe \v testing::gmock_generated_function_mockers_test::MockFoo}
{\bkmkstart AAAAAAABYO}
{\bkmkend AAAAAAABYO}
Inheritance diagram for testing::gmock_generated_function_mockers_test::MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_generated_function_mockers_test::MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_foo__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (VoidReturning, void(int n)){\bkmkstart AAAAAAABYP}
{\bkmkend AAAAAAABYP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (Nullary, int()){\bkmkstart AAAAAAABYQ}
{\bkmkend AAAAAAABYQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (Unary, bool(int)){\bkmkstart AAAAAAABYR}
{\bkmkend AAAAAAABYR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (Binary, long(short, int)){\bkmkstart AAAAAAABYS}
{\bkmkend AAAAAAABYS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD10} (Decimal, int(bool, char, short, int, long, float, double, unsigned, char *, const string &str)){\bkmkstart AAAAAAABYT}
{\bkmkend AAAAAAABYT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TakesNonConstReference, bool(int &)){\bkmkstart AAAAAAABYU}
{\bkmkend AAAAAAABYU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TakesConstReference, string(const int &)){\bkmkstart AAAAAAABYV}
{\bkmkend AAAAAAABYV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TakesConst, bool(const int)){\bkmkstart AAAAAAABYW}
{\bkmkend AAAAAAABYW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (ReturnTypeWithComma, std::map< int, string >()){\bkmkstart AAAAAAABYX}
{\bkmkend AAAAAAABYX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD1} (ReturnTypeWithComma, std::map< int, string >(int)){\bkmkstart AAAAAAABYY}
{\bkmkend AAAAAAABYY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (OverloadedOnArgumentNumber, int()){\bkmkstart AAAAAAABYZ}
{\bkmkend AAAAAAABYZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (OverloadedOnArgumentNumber, int(int)){\bkmkstart AAAAAAABZA}
{\bkmkend AAAAAAABZA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (OverloadedOnArgumentType, int(int)){\bkmkstart AAAAAAABZB}
{\bkmkend AAAAAAABZB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (OverloadedOnArgumentType, char(char)){\bkmkstart AAAAAAABZC}
{\bkmkend AAAAAAABZC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (OverloadedOnConstness, int()){\bkmkstart AAAAAAABZD}
{\bkmkend AAAAAAABZD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD0} (OverloadedOnConstness, char()){\bkmkstart AAAAAAABZE}
{\bkmkend AAAAAAABZE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TypeWithHole, int(int(*)())){\bkmkstart AAAAAAABZF}
{\bkmkend AAAAAAABZF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (TypeWithComma, int(const std::map< int, string > &)){\bkmkstart AAAAAAABZG}
{\bkmkend AAAAAAABZG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_nice_strict_test::MockFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_nice_strict_test::MockFoo}
{\xe \v testing::gmock_nice_strict_test::MockFoo}
{\bkmkstart AAAAAAACGL}
{\bkmkend AAAAAAACGL}
Inheritance diagram for testing::gmock_nice_strict_test::MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__nice__strict__test_1_1_mock_foo__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_nice_strict_test::MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__nice__strict__test_1_1_mock_foo__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Delete} (){\bkmkstart AAAAAAACGM}
{\bkmkend AAAAAAACGM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0} (DoThis, void()){\bkmkstart AAAAAAACGN}
{\bkmkend AAAAAAACGN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1} (DoThat, int(bool flag)){\bkmkstart AAAAAAACGO}
{\bkmkend AAAAAAACGO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-nice-strict_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MockFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v MockFoo}
{\xe \v MockFoo}
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
Inheritance diagram for MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mock_foo__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for MockFoo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_mock_foo__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD3} (Bar, char(const std::string &s, int i, double x)){\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (Bar2, bool(int x, int y)){\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2} (Bar3, void(int x, int y)){\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< F >}
{\xe \v testing::MockFunction< F >}
{\bkmkstart AAAAAAABNX}
{\bkmkend AAAAAAABNX}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R()> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R()>}
{\xe \v testing::MockFunction< R()>}
{\bkmkstart AAAAAAABNY}
{\bkmkend AAAAAAABNY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0_T} (Call, R()){\bkmkstart AAAAAAABNZ}
{\bkmkend AAAAAAABNZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0)>}
{\xe \v testing::MockFunction< R(A0)>}
{\bkmkstart AAAAAAABOA}
{\bkmkend AAAAAAABOA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1_T} (Call, R(A0)){\bkmkstart AAAAAAABOB}
{\bkmkend AAAAAAABOB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1)>}
{\xe \v testing::MockFunction< R(A0, A1)>}
{\bkmkstart AAAAAAABOC}
{\bkmkend AAAAAAABOC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD2_T} (Call, R(A0, A1)){\bkmkstart AAAAAAABOD}
{\bkmkend AAAAAAABOD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2)>}
{\xe \v testing::MockFunction< R(A0, A1, A2)>}
{\bkmkstart AAAAAAABOE}
{\bkmkend AAAAAAABOE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD3_T} (Call, R(A0, A1, A2)){\bkmkstart AAAAAAABOF}
{\bkmkend AAAAAAABOF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2, A3)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2, A3)>}
{\xe \v testing::MockFunction< R(A0, A1, A2, A3)>}
{\bkmkstart AAAAAAABOG}
{\bkmkend AAAAAAABOG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD4_T} (Call, R(A0, A1, A2, A3)){\bkmkstart AAAAAAABOH}
{\bkmkend AAAAAAABOH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2, A3, A4)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2, A3, A4)>}
{\xe \v testing::MockFunction< R(A0, A1, A2, A3, A4)>}
{\bkmkstart AAAAAAABOI}
{\bkmkend AAAAAAABOI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD5_T} (Call, R(A0, A1, A2, A3, A4)){\bkmkstart AAAAAAABOJ}
{\bkmkend AAAAAAABOJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2, A3, A4, A5)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5)>}
{\xe \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5)>}
{\bkmkstart AAAAAAABOK}
{\bkmkend AAAAAAABOK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD6_T} (Call, R(A0, A1, A2, A3, A4, A5)){\bkmkstart AAAAAAABOL}
{\bkmkend AAAAAAABOL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6)>}
{\xe \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6)>}
{\bkmkstart AAAAAAABOM}
{\bkmkend AAAAAAABOM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD7_T} (Call, R(A0, A1, A2, A3, A4, A5, A6)){\bkmkstart AAAAAAABON}
{\bkmkend AAAAAAABON}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7)>}
{\xe \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7)>}
{\bkmkstart AAAAAAABOO}
{\bkmkend AAAAAAABOO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD8_T} (Call, R(A0, A1, A2, A3, A4, A5, A6, A7)){\bkmkstart AAAAAAABOP}
{\bkmkend AAAAAAABOP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8)>}
{\xe \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8)>}
{\bkmkstart AAAAAAABOQ}
{\bkmkend AAAAAAABOQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD9_T} (Call, R(A0, A1, A2, A3, A4, A5, A6, A7, A8)){\bkmkstart AAAAAAABOR}
{\bkmkend AAAAAAABOR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)>}
{\xe \v testing::MockFunction< R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)>}
{\bkmkstart AAAAAAABOS}
{\bkmkend AAAAAAABOS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD10_T} (Call, R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)){\bkmkstart AAAAAAABOT}
{\bkmkend AAAAAAABOT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::MockOverloadedOnArgNumber Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::MockOverloadedOnArgNumber}
{\xe \v testing::gmock_generated_function_mockers_test::MockOverloadedOnArgNumber}
{\bkmkstart AAAAAAABZH}
{\bkmkend AAAAAAABZH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MY_MOCK_METHODS1_}{\bkmkstart AAAAAAABZI}
{\bkmkend AAAAAAABZI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::MockOverloadedOnConstness Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::MockOverloadedOnConstness}
{\xe \v testing::gmock_generated_function_mockers_test::MockOverloadedOnConstness}
{\bkmkstart AAAAAAABZJ}
{\bkmkend AAAAAAABZJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MY_MOCK_METHODS2_}{\bkmkstart AAAAAAABZK}
{\bkmkend AAAAAAABZK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::MockSpec< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::MockSpec< F >}
{\xe \v testing::internal::MockSpec< F >}
{\bkmkstart AAAAAAADKU}
{\bkmkend AAAAAAADKU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADKV}
{\bkmkend AAAAAAADKV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::Function}< F >::ArgumentMatcherTuple {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAADKW}
{\bkmkend AAAAAAADKW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MockSpec} ({\b internal::FunctionMockerBase}< F > *function_mocker){\bkmkstart AAAAAAADKX}
{\bkmkend AAAAAAADKX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::OnCallSpec}< F > & {\b InternalDefaultActionSetAt} (const char *file, int line, const char *obj, const char *call){\bkmkstart AAAAAAADKY}
{\bkmkend AAAAAAADKY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::TypedExpectation}< F > & {\b InternalExpectedAt} (const char *file, int line, const char *obj, const char *call){\bkmkstart AAAAAAADKZ}
{\bkmkend AAAAAAADKZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > class {\b internal::FunctionMocker}{\bkmkstart AAAAAAADLA}
{\bkmkend AAAAAAADLA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::MockStack< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::MockStack< T >}
{\xe \v testing::gmock_generated_function_mockers_test::MockStack< T >}
{\bkmkstart AAAAAAABZL}
{\bkmkend AAAAAAABZL}
Inheritance diagram for testing::gmock_generated_function_mockers_test::MockStack< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_generated_function_mockers_test::MockStack< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_mock_stack__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD1_T} (Push, void(const T &elem)){\bkmkstart AAAAAAABZM}
{\bkmkend AAAAAAABZM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0_T} (Pop, void()){\bkmkstart AAAAAAABZN}
{\bkmkend AAAAAAABZN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD0_T} (GetSize, int()){\bkmkstart AAAAAAABZO}
{\bkmkend AAAAAAABZO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD0_T} (GetTop, const T &()){\bkmkstart AAAAAAABZP}
{\bkmkend AAAAAAABZP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_METHOD0_T} (ReturnTypeWithComma, std::map< int, int >()){\bkmkstart AAAAAAABZQ}
{\bkmkend AAAAAAABZQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MOCK_CONST_METHOD1_T} (ReturnTypeWithComma, std::map< int, int >(int)){\bkmkstart AAAAAAABZR}
{\bkmkend AAAAAAABZR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Mutex Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Mutex}
{\xe \v testing::internal::Mutex}
{\bkmkstart AAAAAAADLB}
{\bkmkend AAAAAAADLB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Lock} (){\bkmkstart AAAAAAADLC}
{\bkmkend AAAAAAADLC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Unlock} (){\bkmkstart AAAAAAADLD}
{\bkmkend AAAAAAADLD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AssertHeld} () const{\bkmkstart AAAAAAADLE}
{\bkmkend AAAAAAADLE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MyArray< T, kSize > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v MyArray< T, kSize >}
{\xe \v MyArray< T, kSize >}
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MyString Class Reference\par \pard\plain 
{\tc\tcl2 \v MyString}
{\xe \v MyString}
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyString} (const char *a_c_string){\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyString} (const {\b MyString} &string){\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b c_string} () const{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b Length} () const{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Set} (const char *c_string){\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b CloneCString} (const char *a_c_string){\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample2.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample2.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
MyType Class Reference\par \pard\plain 
{\tc\tcl2 \v MyType}
{\xe \v MyType}
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyType} (const std::string &a_value){\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::string & {\b value} () const{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
namespace1::MyTypeInNameSpace1 Class Reference\par \pard\plain 
{\tc\tcl2 \v namespace1::MyTypeInNameSpace1}
{\xe \v namespace1::MyTypeInNameSpace1}
{\bkmkstart AAAAAAAAZP}
{\bkmkend AAAAAAAAZP}
Inheritance diagram for namespace1::MyTypeInNameSpace1:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classnamespace1_1_1_my_type_in_name_space1__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for namespace1::MyTypeInNameSpace1:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classnamespace1_1_1_my_type_in_name_space1__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyTypeInNameSpace1} (int an_x){\bkmkstart AAAAAAAAZQ}
{\bkmkend AAAAAAAAZQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
namespace2::MyTypeInNameSpace2 Class Reference\par \pard\plain 
{\tc\tcl2 \v namespace2::MyTypeInNameSpace2}
{\xe \v namespace2::MyTypeInNameSpace2}
{\bkmkstart AAAAAAAAZR}
{\bkmkend AAAAAAAAZR}
Inheritance diagram for namespace2::MyTypeInNameSpace2:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classnamespace2_1_1_my_type_in_name_space2__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for namespace2::MyTypeInNameSpace2:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classnamespace2_1_1_my_type_in_name_space2__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b MyTypeInNameSpace2} (int an_x){\bkmkstart AAAAAAAAZS}
{\bkmkend AAAAAAAAZS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::NaggyMock< MockClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::NaggyMock< MockClass >}
{\xe \v testing::NaggyMock< MockClass >}
{\bkmkstart AAAAAAABOU}
{\bkmkend AAAAAAABOU}
Inheritance diagram for testing::NaggyMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_naggy_mock__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::NaggyMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_naggy_mock__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 > {\b NaggyMock} (const A1 &a1){\bkmkstart AAAAAAABOV}
{\bkmkend AAAAAAABOV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 > {\b NaggyMock} (const A1 &a1, const A2 &a2){\bkmkstart AAAAAAABOW}
{\bkmkend AAAAAAABOW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3){\bkmkstart AAAAAAABOX}
{\bkmkend AAAAAAABOX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4){\bkmkstart AAAAAAABOY}
{\bkmkend AAAAAAABOY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5){\bkmkstart AAAAAAABOZ}
{\bkmkend AAAAAAABOZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6){\bkmkstart AAAAAAABPA}
{\bkmkend AAAAAAABPA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7){\bkmkstart AAAAAAABPB}
{\bkmkend AAAAAAABPB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8){\bkmkstart AAAAAAABPC}
{\bkmkend AAAAAAABPC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9){\bkmkstart AAAAAAABPD}
{\bkmkend AAAAAAABPD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > {\b NaggyMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9, const A10 &a10){\bkmkstart AAAAAAABPE}
{\bkmkend AAAAAAABPE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NativeArray< Element > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NativeArray< Element >}
{\xe \v testing::internal::NativeArray< Element >}
{\bkmkstart AAAAAAADLF}
{\bkmkend AAAAAAADLF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Element {\b value_type}{\bkmkstart AAAAAAADLG}
{\bkmkend AAAAAAADLG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Element * {\b iterator}{\bkmkstart AAAAAAADLH}
{\bkmkend AAAAAAADLH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const Element * {\b const_iterator}{\bkmkstart AAAAAAADLI}
{\bkmkend AAAAAAADLI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NativeArray} (const Element *array, size_t count, {\b RelationToSourceReference}){\bkmkstart AAAAAAADLJ}
{\bkmkend AAAAAAADLJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NativeArray} (const Element *array, size_t count, {\b RelationToSourceCopy}){\bkmkstart AAAAAAADLK}
{\bkmkend AAAAAAADLK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NativeArray} (const {\b NativeArray} &rhs){\bkmkstart AAAAAAADLL}
{\bkmkend AAAAAAADLL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b size} () const{\bkmkstart AAAAAAADLM}
{\bkmkend AAAAAAADLM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b begin} () const{\bkmkstart AAAAAAADLN}
{\bkmkend AAAAAAADLN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b end} () const{\bkmkstart AAAAAAADLO}
{\bkmkend AAAAAAADLO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b NativeArray} &rhs) const{\bkmkstart AAAAAAADLP}
{\bkmkend AAAAAAADLP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Ne2Matcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Ne2Matcher}
{\xe \v testing::internal::Ne2Matcher}
{\bkmkstart AAAAAAADLQ}
{\bkmkend AAAAAAADLQ}
Inheritance diagram for testing::internal::Ne2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ne2_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::Ne2Matcher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ne2_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADLR}
{\bkmkend AAAAAAADLR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NeMatcher< Rhs > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NeMatcher< Rhs >}
{\xe \v testing::internal::NeMatcher< Rhs >}
{\bkmkstart AAAAAAADLS}
{\bkmkend AAAAAAADLS}
Inheritance diagram for testing::internal::NeMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ne_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::NeMatcher< Rhs >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_ne_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NeMatcher} (const Rhs &rhs){\bkmkstart AAAAAAADLT}
{\bkmkend AAAAAAADLT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b Desc} (){\bkmkstart AAAAAAADLU}
{\bkmkend AAAAAAADLU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b NegatedDesc} (){\bkmkstart AAAAAAADLV}
{\bkmkend AAAAAAADLV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::NewEvenMatcherImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::NewEvenMatcherImpl}
{\xe \v testing::gmock_matchers_test::NewEvenMatcherImpl}
{\bkmkstart AAAAAAACDL}
{\bkmkend AAAAAAACDL}
Inheritance diagram for testing::gmock_matchers_test::NewEvenMatcherImpl:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_new_even_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::NewEvenMatcherImpl:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_new_even_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (int x, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACDM}
{\bkmkend AAAAAAACDM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACDN}
{\bkmkend AAAAAAACDN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::NiceMock< MockClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::NiceMock< MockClass >}
{\xe \v testing::NiceMock< MockClass >}
{\bkmkstart AAAAAAABPF}
{\bkmkend AAAAAAABPF}
Inheritance diagram for testing::NiceMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_nice_mock__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::NiceMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_nice_mock__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 > {\b NiceMock} (const A1 &a1){\bkmkstart AAAAAAABPG}
{\bkmkend AAAAAAABPG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 > {\b NiceMock} (const A1 &a1, const A2 &a2){\bkmkstart AAAAAAABPH}
{\bkmkend AAAAAAABPH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3){\bkmkstart AAAAAAABPI}
{\bkmkend AAAAAAABPI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4){\bkmkstart AAAAAAABPJ}
{\bkmkend AAAAAAABPJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5){\bkmkstart AAAAAAABPK}
{\bkmkend AAAAAAABPK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6){\bkmkstart AAAAAAABPL}
{\bkmkend AAAAAAABPL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7){\bkmkstart AAAAAAABPM}
{\bkmkend AAAAAAABPM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8){\bkmkstart AAAAAAABPN}
{\bkmkend AAAAAAABPN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9){\bkmkstart AAAAAAABPO}
{\bkmkend AAAAAAABPO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > {\b NiceMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9, const A10 &a10){\bkmkstart AAAAAAABPP}
{\bkmkend AAAAAAABPP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Node Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Node}
{\xe \v cpp.ast.Node}
{\bkmkstart AAAAAAAAPN}
{\bkmkend AAAAAAAAPN}
Inheritance diagram for cpp.ast.Node:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_node__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Node:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_node__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end){\bkmkstart AAAAAAAAPO}
{\bkmkend AAAAAAAAPO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b IsDeclaration} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b IsDefinition} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b IsExportable} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b Requires} (self, node)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b XXX__str__} (self){\bkmkstart AAAAAAAAPP}
{\bkmkend AAAAAAAAPP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __repr__} (self){\bkmkstart AAAAAAAAPQ}
{\bkmkend AAAAAAAAPQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b start}{\bkmkstart AAAAAAAAPR}
{\bkmkend AAAAAAAAPR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b end}{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Base AST node.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v IsDeclaration\:cpp::ast::Node}
{\xe \v cpp::ast::Node\:IsDeclaration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.Node.IsDeclaration (  {\i self})}}
\par
{\bkmkstart AAAAAAAAPT}
{\bkmkend AAAAAAAAPT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns bool if this node is a declaration.}
 \par
}}
{\xe \v IsDefinition\:cpp::ast::Node}
{\xe \v cpp::ast::Node\:IsDefinition}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.Node.IsDefinition (  {\i self})}}
\par
{\bkmkstart AAAAAAAAPU}
{\bkmkend AAAAAAAAPU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns bool if this node is a definition.}
 \par
}}
{\xe \v IsExportable\:cpp::ast::Node}
{\xe \v cpp::ast::Node\:IsExportable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.Node.IsExportable (  {\i self})}}
\par
{\bkmkstart AAAAAAAAPV}
{\bkmkend AAAAAAAAPV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns bool if this node exportable from a header file.}
 \par
}}
{\xe \v Requires\:cpp::ast::Node}
{\xe \v cpp::ast::Node\:Requires}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.Node.Requires (  {\i self},   {\i node})}}
\par
{\bkmkstart AAAAAAAAPW}
{\bkmkend AAAAAAAAPW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Does this AST node require the definition of the node passed in?}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NoDefaultContructor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NoDefaultContructor}
{\xe \v testing::internal::NoDefaultContructor}
{\bkmkstart AAAAAAADLW}
{\bkmkend AAAAAAADLW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NoDefaultContructor} (const char *){\bkmkstart AAAAAAADLX}
{\bkmkend AAAAAAADLX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NoDefaultContructor} (const {\b NoDefaultContructor} &){\bkmkstart AAAAAAADLY}
{\bkmkend AAAAAAADLY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-port_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonContainer Class Reference\par \pard\plain 
{\tc\tcl2 \v NonContainer}
{\xe \v NonContainer}
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonFatalFailureInFixtureConstructorTest Class Reference\par \pard\plain 
{\tc\tcl2 \v NonFatalFailureInFixtureConstructorTest}
{\xe \v NonFatalFailureInFixtureConstructorTest}
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
Inheritance diagram for NonFatalFailureInFixtureConstructorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_non_fatal_failure_in_fixture_constructor_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for NonFatalFailureInFixtureConstructorTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_non_fatal_failure_in_fixture_constructor_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
NonFatalFailureInSetUpTest Class Reference\par \pard\plain 
{\tc\tcl2 \v NonFatalFailureInSetUpTest}
{\xe \v NonFatalFailureInSetUpTest}
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
Inheritance diagram for NonFatalFailureInSetUpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_non_fatal_failure_in_set_up_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for NonFatalFailureInSetUpTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_non_fatal_failure_in_set_up_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::NotCopyable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::NotCopyable}
{\xe \v testing::gmock_matchers_test::NotCopyable}
{\bkmkstart AAAAAAACDO}
{\bkmkend AAAAAAACDO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NotCopyable} (int a_value){\bkmkstart AAAAAAACDP}
{\bkmkend AAAAAAACDP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value} () const{\bkmkstart AAAAAAACDQ}
{\bkmkend AAAAAAACDQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator==} (const {\b NotCopyable} &rhs) const{\bkmkstart AAAAAAACDR}
{\bkmkend AAAAAAACDR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator>=} (const {\b NotCopyable} &rhs) const{\bkmkstart AAAAAAACDS}
{\bkmkend AAAAAAACDS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NotMatcher< InnerMatcher > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NotMatcher< InnerMatcher >}
{\xe \v testing::internal::NotMatcher< InnerMatcher >}
{\bkmkstart AAAAAAADLZ}
{\bkmkend AAAAAAADLZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NotMatcher} (InnerMatcher matcher){\bkmkstart AAAAAAADMA}
{\bkmkend AAAAAAADMA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator Matcher< T >} () const{\bkmkstart AAAAAAADMB}
{\bkmkend AAAAAAADMB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NotMatcherImpl< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NotMatcherImpl< T >}
{\xe \v testing::internal::NotMatcherImpl< T >}
{\bkmkstart AAAAAAADMC}
{\bkmkend AAAAAAADMC}
Inheritance diagram for testing::internal::NotMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_not_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::NotMatcherImpl< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_not_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b NotMatcherImpl} (const {\b Matcher}< T > &matcher){\bkmkstart AAAAAAADMD}
{\bkmkend AAAAAAADMD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (T x, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADME}
{\bkmkend AAAAAAADME}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADMF}
{\bkmkend AAAAAAADMF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADMG}
{\bkmkend AAAAAAADMG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::NotNullMatcher Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::NotNullMatcher}
{\xe \v testing::internal::NotNullMatcher}
{\bkmkstart AAAAAAADMH}
{\bkmkend AAAAAAADMH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Pointer > bool {\b MatchAndExplain} (const Pointer &p, {\b MatchResultListener} *) const{\bkmkstart AAAAAAADMI}
{\bkmkend AAAAAAADMI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADMJ}
{\bkmkend AAAAAAADMJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADMK}
{\bkmkend AAAAAAADMK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::NullaryConstructorClass Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::NullaryConstructorClass}
{\xe \v testing::gmock_generated_actions_test::NullaryConstructorClass}
{\bkmkstart AAAAAAABXA}
{\bkmkend AAAAAAABXA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value_}{\bkmkstart AAAAAAABXB}
{\bkmkend AAAAAAABXB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::NullaryFunctor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::NullaryFunctor}
{\xe \v testing::gmock_more_actions_test::NullaryFunctor}
{\bkmkstart AAAAAAACFS}
{\bkmkend AAAAAAACFS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (){\bkmkstart AAAAAAACFT}
{\bkmkend AAAAAAACFT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::NullaryFunctor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::NullaryFunctor}
{\xe \v testing::gmock_generated_actions_test::NullaryFunctor}
{\bkmkstart AAAAAAABXC}
{\bkmkend AAAAAAABXC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (){\bkmkstart AAAAAAABXD}
{\bkmkend AAAAAAABXD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ENPM808X::ObjectTracker Class Reference\par \pard\plain 
{\tc\tcl2 \v ENPM808X::ObjectTracker}
{\xe \v ENPM808X::ObjectTracker}
{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ObjectTracker} (const std::unordered_set< std::string > &objectClasses, const cv::Matx34f &extP, const cv::Matx33f &intP, const std::string &detectionModel="yolo", float minConfidence=0.5, float minOverlap=0.3)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< cv::Point3f > {\b localizeObjects} (cv::Mat frame)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for tracking all specified objects through every frame. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
cv::Point3f {\b localize} (const cv::Point2i &objectKeypoint) const\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for estimating the 3D location of a given pixel. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::tuple< std::vector< int >, std::vector< float >, std::vector< cv::Rect > > {\b detectObjects} (cv::Mat frame)\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for detecting objects in a given frame. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< std::string > {\b datasetLabels} () const\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter method for the classes of the pre-trained detection model. }{
}\par
}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v ObjectTracker\:ENPM808X::ObjectTracker}
{\xe \v ENPM808X::ObjectTracker\:ObjectTracker}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ENPM808X::ObjectTracker::ObjectTracker (const std::unordered_set< std::string > &  {\i objectClasses}, const cv::Matx34f &  {\i extP}, const cv::Matx33f &  {\i intP}, const std::string &  {\i detectionModel} = {\f2 "yolo"}, float  {\i minConfidence} = {\f2 0.5}, float  {\i minOverlap} = {\f2 0.3})}}
\par
{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Constructor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i object} \cell }{categories, camera extrinsics, camera intrinsics, detection model, minimum confidence, minimum overlap \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid None \par
}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v datasetLabels\:ENPM808X::ObjectTracker}
{\xe \v ENPM808X::ObjectTracker\:datasetLabels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< std::string > ENPM808X::ObjectTracker::datasetLabels () const}}
\par
{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Getter method for the classes of the pre-trained detection model. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i void} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid vector of the the dataset classes \par
}}}
{\xe \v detectObjects\:ENPM808X::ObjectTracker}
{\xe \v ENPM808X::ObjectTracker\:detectObjects}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::tuple< std::vector< int >, std::vector< float >, std::vector< cv::Rect > > ENPM808X::ObjectTracker::detectObjects (cv::Mat  {\i frame})}}
\par
{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for detecting objects in a given frame. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i frame} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid classIds, confidences, bounding boxes \par
}}}
{\xe \v localize\:ENPM808X::ObjectTracker}
{\xe \v ENPM808X::ObjectTracker\:localize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
cv::Point3f ENPM808X::ObjectTracker::localize (const cv::Point2i &  {\i objectKeypoint}) const}}
\par
{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for estimating the 3D location of a given pixel. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pixel} \cell }{in the image \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid 3D location in the robot coordinate system \par
}}}
{\xe \v localizeObjects\:ENPM808X::ObjectTracker}
{\xe \v ENPM808X::ObjectTracker\:localizeObjects}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< cv::Point3f > ENPM808X::ObjectTracker::localizeObjects (cv::Mat  {\i frame})}}
\par
{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for tracking all specified objects through every frame. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Parameters:\par}
\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i frame} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Returns:\par}\pard\plain \s62\li720\widctlpar\ql\adjustright \fs20\cgrid vector of the objects' 3D locations in the robot coordinate system \par
}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
include/{\b tracker.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
app/{\b tracker.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ObjectTrackerTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ObjectTrackerTest}
{\xe \v ObjectTrackerTest}
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test fixture for ObjectTracker class. }}\par
Inheritance diagram for ObjectTrackerTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_object_tracker_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ObjectTrackerTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_object_tracker_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetUp} () override{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b TearDown} () override{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ENPM808X::ObjectTracker} * {\b tracker}{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

cv::Matx34f {\b P}{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test fixture for ObjectTracker class. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
test/{\b test_tracker.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::OnCallSpec< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::OnCallSpec< F >}
{\xe \v testing::internal::OnCallSpec< F >}
{\bkmkstart AAAAAAADML}
{\bkmkend AAAAAAADML}
Inheritance diagram for testing::internal::OnCallSpec< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_on_call_spec__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::OnCallSpec< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_on_call_spec__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAADMM}
{\bkmkend AAAAAAADMM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::ArgumentMatcherTuple {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAADMN}
{\bkmkend AAAAAAADMN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OnCallSpec} (const char *a_file, int a_line, const ArgumentMatcherTuple &matchers){\bkmkstart AAAAAAADMO}
{\bkmkend AAAAAAADMO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OnCallSpec} & {\b With} (const {\b Matcher}< const ArgumentTuple &> &m){\bkmkstart AAAAAAADMP}
{\bkmkend AAAAAAADMP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OnCallSpec} & {\b WillByDefault} (const {\b Action}< F > &action){\bkmkstart AAAAAAADMQ}
{\bkmkend AAAAAAADMQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Matches} (const ArgumentTuple &args) const{\bkmkstart AAAAAAADMR}
{\bkmkend AAAAAAADMR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b Action}< F > & {\b GetAction} () const{\bkmkstart AAAAAAADMS}
{\bkmkend AAAAAAADMS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
OnTheFlyPrimeTable Class Reference\par \pard\plain 
{\tc\tcl2 \v OnTheFlyPrimeTable}
{\xe \v OnTheFlyPrimeTable}
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
Inheritance diagram for OnTheFlyPrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_on_the_fly_prime_table__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for OnTheFlyPrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_on_the_fly_prime_table__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b IsPrime} (int n) const{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetNextPrime} (int p) const{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/prime_tables.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::OsStackTraceGetter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::OsStackTraceGetter}
{\xe \v testing::internal::OsStackTraceGetter}
{\bkmkstart AAAAAAADMT}
{\bkmkend AAAAAAADMT}
Inheritance diagram for testing::internal::OsStackTraceGetter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_os_stack_trace_getter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::OsStackTraceGetter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_os_stack_trace_getter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual string {\b CurrentStackTrace} (int max_depth, int skip_count){\bkmkstart AAAAAAADMU}
{\bkmkend AAAAAAADMU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b UponLeavingGTest} (){\bkmkstart AAAAAAADMV}
{\bkmkend AAAAAAADMV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::OsStackTraceGetterInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::OsStackTraceGetterInterface}
{\xe \v testing::internal::OsStackTraceGetterInterface}
{\bkmkstart AAAAAAADMW}
{\bkmkend AAAAAAADMW}
Inheritance diagram for testing::internal::OsStackTraceGetterInterface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_os_stack_trace_getter_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual string {\b CurrentStackTrace} (int max_depth, int skip_count)=0{\bkmkstart AAAAAAADMX}
{\bkmkend AAAAAAADMX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b UponLeavingGTest} ()=0{\bkmkstart AAAAAAADMY}
{\bkmkend AAAAAAADMY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const char *const {\b kElidedFramesMarker}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Data Documentation\par
\pard\plain 
{\xe \v kElidedFramesMarker\:testing::internal::OsStackTraceGetterInterface}
{\xe \v testing::internal::OsStackTraceGetterInterface\:kElidedFramesMarker}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char *const testing::internal::OsStackTraceGetterInterface::kElidedFramesMarker{\f2 [static]}}}
\par
{\bkmkstart AAAAAAADMZ}
{\bkmkend AAAAAAADMZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Initial value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid =\par
    "... " GTEST_NAME_ " internal frames ..."\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::OtherDerived Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::OtherDerived}
{\xe \v testing::gmock_matchers_test::OtherDerived}
{\bkmkstart AAAAAAACDT}
{\bkmkend AAAAAAACDT}
Inheritance diagram for testing::gmock_matchers_test::OtherDerived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_other_derived__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::OtherDerived:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_other_derived__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.Output Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.Output}
{\xe \v pump.Output}
{\bkmkstart AAAAAAABBQ}
{\bkmkend AAAAAAABBQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self){\bkmkstart AAAAAAABBR}
{\bkmkend AAAAAAABBR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetLastLine} (self){\bkmkstart AAAAAAABBS}
{\bkmkend AAAAAAABBS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Append} (self, s){\bkmkstart AAAAAAABBT}
{\bkmkend AAAAAAABBT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b string}{\bkmkstart AAAAAAABBU}
{\bkmkend AAAAAAABBU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PairMatchBase< D, Op > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PairMatchBase< D, Op >}
{\xe \v testing::internal::PairMatchBase< D, Op >}
{\bkmkstart AAAAAAADNA}
{\bkmkend AAAAAAADNA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > {\b operator Matcher< ::testing::tuple< T1, T2 > >} () const{\bkmkstart AAAAAAADNB}
{\bkmkend AAAAAAADNB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > {\b operator Matcher< const ::testing::tuple< T1, T2 > & >} () const{\bkmkstart AAAAAAADNC}
{\bkmkend AAAAAAADNC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PairMatcher< FirstMatcher, SecondMatcher > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PairMatcher< FirstMatcher, SecondMatcher >}
{\xe \v testing::internal::PairMatcher< FirstMatcher, SecondMatcher >}
{\bkmkstart AAAAAAADND}
{\bkmkend AAAAAAADND}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PairMatcher} (FirstMatcher first_matcher, SecondMatcher second_matcher){\bkmkstart AAAAAAADNE}
{\bkmkend AAAAAAADNE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename PairType > {\b operator Matcher< PairType >} () const{\bkmkstart AAAAAAADNF}
{\bkmkend AAAAAAADNF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PairMatcherImpl< PairType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PairMatcherImpl< PairType >}
{\xe \v testing::internal::PairMatcherImpl< PairType >}
{\bkmkstart AAAAAAADNG}
{\bkmkend AAAAAAADNG}
Inheritance diagram for testing::internal::PairMatcherImpl< PairType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_pair_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::PairMatcherImpl< PairType >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_pair_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef RawPairType::first_type {\b FirstType}{\bkmkstart AAAAAAADNH}
{\bkmkend AAAAAAADNH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef RawPairType::second_type {\b SecondType}{\bkmkstart AAAAAAADNI}
{\bkmkend AAAAAAADNI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_REFERENCE_AND_CONST_} (PairType) RawPairType{\bkmkstart AAAAAAADNJ}
{\bkmkend AAAAAAADNJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename FirstMatcher , typename SecondMatcher > {\b PairMatcherImpl} (FirstMatcher first_matcher, SecondMatcher second_matcher){\bkmkstart AAAAAAADNK}
{\bkmkend AAAAAAADNK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADNL}
{\bkmkend AAAAAAADNL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADNM}
{\bkmkend AAAAAAADNM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (PairType a_pair, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADNN}
{\bkmkend AAAAAAADNN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Parameter Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Parameter}
{\xe \v cpp.ast.Parameter}
{\bkmkstart AAAAAAAAPX}
{\bkmkend AAAAAAAAPX}
Inheritance diagram for cpp.ast.Parameter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_parameter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Parameter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_parameter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, parameter_type, default){\bkmkstart AAAAAAAAPY}
{\bkmkend AAAAAAAAPY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Requires} (self, node){\bkmkstart AAAAAAAAPZ}
{\bkmkend AAAAAAAAPZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAQA}
{\bkmkend AAAAAAAAQA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b name}{\bkmkstart AAAAAAAAQB}
{\bkmkend AAAAAAAAQB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b type}{\bkmkstart AAAAAAAAQC}
{\bkmkend AAAAAAAAQC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b default}{\bkmkstart AAAAAAAAQD}
{\bkmkend AAAAAAAAQD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PointeeMatcher< InnerMatcher > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PointeeMatcher< InnerMatcher >}
{\xe \v testing::internal::PointeeMatcher< InnerMatcher >}
{\bkmkstart AAAAAAADNO}
{\bkmkend AAAAAAADNO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PointeeMatcher} (const InnerMatcher &matcher){\bkmkstart AAAAAAADNP}
{\bkmkend AAAAAAADNP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Pointer > {\b operator Matcher< Pointer >} () const{\bkmkstart AAAAAAADNQ}
{\bkmkend AAAAAAADNQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PointeeOf< Pointer > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PointeeOf< Pointer >}
{\xe \v testing::internal::PointeeOf< Pointer >}
{\bkmkstart AAAAAAADNR}
{\bkmkend AAAAAAADNR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Pointer::element_type {\b type}{\bkmkstart AAAAAAADNS}
{\bkmkend AAAAAAADNS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PointeeOf< T * > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PointeeOf< T * >}
{\xe \v testing::internal::PointeeOf< T * >}
{\bkmkstart AAAAAAADNT}
{\bkmkend AAAAAAADNT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADNU}
{\bkmkend AAAAAAADNU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PointerPrintable Struct Reference\par \pard\plain 
{\tc\tcl2 \v foo::PointerPrintable}
{\xe \v foo::PointerPrintable}
{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >}
{\xe \v testing::internal::PointwiseMatcher< TupleMatcher, RhsContainer >}
{\bkmkstart AAAAAAADNV}
{\bkmkend AAAAAAADNV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Impl}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< RhsContainer > {\b RhsView}{\bkmkstart AAAAAAADNW}
{\bkmkend AAAAAAADNW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef RhsView::type {\b RhsStlContainer}{\bkmkstart AAAAAAADNX}
{\bkmkend AAAAAAADNX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef RhsStlContainer::value_type {\b RhsValue}{\bkmkstart AAAAAAADNY}
{\bkmkend AAAAAAADNY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PointwiseMatcher} (const TupleMatcher &tuple_matcher, const RhsContainer &rhs){\bkmkstart AAAAAAADNZ}
{\bkmkend AAAAAAADNZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename LhsContainer > {\b operator Matcher< LhsContainer >} () const{\bkmkstart AAAAAAADOA}
{\bkmkend AAAAAAADOA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::PolymorphicAction< Impl > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::PolymorphicAction< Impl >}
{\xe \v testing::PolymorphicAction< Impl >}
{\bkmkstart AAAAAAABPQ}
{\bkmkend AAAAAAABPQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PolymorphicAction} (const Impl &impl){\bkmkstart AAAAAAABPR}
{\bkmkend AAAAAAABPR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAABPS}
{\bkmkend AAAAAAABPS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::PolymorphicFunctor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::PolymorphicFunctor}
{\xe \v testing::gmock_matchers_test::PolymorphicFunctor}
{\bkmkstart AAAAAAACDU}
{\bkmkend AAAAAAACDU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef int {\b result_type}{\bkmkstart AAAAAAACDV}
{\bkmkend AAAAAAACDV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (int n){\bkmkstart AAAAAAACDW}
{\bkmkend AAAAAAACDW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (const char *s){\bkmkstart AAAAAAACDX}
{\bkmkend AAAAAAACDX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::PolymorphicIsEvenImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::PolymorphicIsEvenImpl}
{\xe \v testing::gmock_matchers_test::PolymorphicIsEvenImpl}
{\bkmkstart AAAAAAACDY}
{\bkmkend AAAAAAACDY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACDZ}
{\bkmkend AAAAAAACDZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (ostream *os) const{\bkmkstart AAAAAAACEA}
{\bkmkend AAAAAAACEA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > bool {\b MatchAndExplain} (const T &x, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAACEB}
{\bkmkend AAAAAAACEB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::PolymorphicMatcher< Impl > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::PolymorphicMatcher< Impl >}
{\xe \v testing::PolymorphicMatcher< Impl >}
{\bkmkstart AAAAAAABPT}
{\bkmkend AAAAAAABPT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PolymorphicMatcher} (const Impl &an_impl){\bkmkstart AAAAAAABPU}
{\bkmkend AAAAAAABPU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Impl & {\b mutable_impl} (){\bkmkstart AAAAAAABPV}
{\bkmkend AAAAAAABPV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const Impl & {\b impl} () const{\bkmkstart AAAAAAABPW}
{\bkmkend AAAAAAABPW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator Matcher< T >} () const{\bkmkstart AAAAAAABPX}
{\bkmkend AAAAAAABPX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Streamlike< T >::ConstIter::PostIncrProxy Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Streamlike< T >::ConstIter::PostIncrProxy}
{\xe \v testing::gmock_matchers_test::Streamlike< T >::ConstIter::PostIncrProxy}
{\bkmkstart AAAAAAACEQ}
{\bkmkend AAAAAAACEQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PostIncrProxy} (const value_type &value){\bkmkstart AAAAAAACER}
{\bkmkend AAAAAAACER}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

value_type {\b operator*} () const{\bkmkstart AAAAAAACES}
{\bkmkend AAAAAAACES}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PreCalculatedPrimeTable Class Reference\par \pard\plain 
{\tc\tcl2 \v PreCalculatedPrimeTable}
{\xe \v PreCalculatedPrimeTable}
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
Inheritance diagram for PreCalculatedPrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_pre_calculated_prime_table__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for PreCalculatedPrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_pre_calculated_prime_table__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PreCalculatedPrimeTable} (int max){\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b IsPrime} (int n) const{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetNextPrime} (int p) const{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/prime_tables.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor1 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor1}
{\xe \v PredFormatFunctor1}
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 > {\b testing::AssertionResult} {\b operator()} (const char *e1, const T1 &v1) const{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor2 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor2}
{\xe \v PredFormatFunctor2}
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > {\b testing::AssertionResult} {\b operator()} (const char *e1, const char *e2, const T1 &v1, const T2 &v2) const{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor3 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor3}
{\xe \v PredFormatFunctor3}
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 > {\b testing::AssertionResult} {\b operator()} (const char *e1, const char *e2, const char *e3, const T1 &v1, const T2 &v2, const T3 &v3) const{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor4 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor4}
{\xe \v PredFormatFunctor4}
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 > {\b testing::AssertionResult} {\b operator()} (const char *e1, const char *e2, const char *e3, const char *e4, const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4) const{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFormatFunctor5 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFormatFunctor5}
{\xe \v PredFormatFunctor5}
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > {\b testing::AssertionResult} {\b operator()} (const char *e1, const char *e2, const char *e3, const char *e4, const char *e5, const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4, const T5 &v5) const{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor1 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor1}
{\xe \v PredFunctor1}
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 > bool {\b operator()} (const T1 &v1){\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor2 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor2}
{\xe \v PredFunctor2}
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 > bool {\b operator()} (const T1 &v1, const T2 &v2){\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor3 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor3}
{\xe \v PredFunctor3}
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 > bool {\b operator()} (const T1 &v1, const T2 &v2, const T3 &v3){\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor4 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor4}
{\xe \v PredFunctor4}
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 > bool {\b operator()} (const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4){\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PredFunctor5 Struct Reference\par \pard\plain 
{\tc\tcl2 \v PredFunctor5}
{\xe \v PredFunctor5}
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > bool {\b operator()} (const T1 &v1, const T2 &v2, const T3 &v3, const T4 &v4, const T5 &v5){\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate1Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate1Test}
{\xe \v Predicate1Test}
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
Inheritance diagram for Predicate1Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate1_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Predicate1Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate1_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate2Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate2Test}
{\xe \v Predicate2Test}
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
Inheritance diagram for Predicate2Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate2_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Predicate2Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate2_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate3Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate3Test}
{\xe \v Predicate3Test}
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
Inheritance diagram for Predicate3Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate3_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Predicate3Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate3_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n3_}{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate4Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate4Test}
{\xe \v Predicate4Test}
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
Inheritance diagram for Predicate4Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate4_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Predicate4Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate4_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n3_}{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n4_}{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Predicate5Test Class Reference\par \pard\plain 
{\tc\tcl2 \v Predicate5Test}
{\xe \v Predicate5Test}
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
Inheritance diagram for Predicate5Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate5_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for Predicate5Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_predicate5_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b expected_to_finish_}{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b finished_}{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n1_}{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n2_}{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n3_}{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n4_}{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b n5_}{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_pred_impl_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PredicateFormatterFromMatcher< M > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PredicateFormatterFromMatcher< M >}
{\xe \v testing::internal::PredicateFormatterFromMatcher< M >}
{\bkmkstart AAAAAAADOL}
{\bkmkend AAAAAAADOL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PredicateFormatterFromMatcher} (M m){\bkmkstart AAAAAAADOM}
{\bkmkend AAAAAAADOM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b AssertionResult} {\b operator()} (const char *value_text, const T &x) const{\bkmkstart AAAAAAADON}
{\bkmkend AAAAAAADON}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PrettyUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PrettyUnitTestResultPrinter}
{\xe \v testing::internal::PrettyUnitTestResultPrinter}
{\bkmkstart AAAAAAADOO}
{\bkmkend AAAAAAADOO}
Inheritance diagram for testing::internal::PrettyUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_pretty_unit_test_result_printer__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::PrettyUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_pretty_unit_test_result_printer__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &){\bkmkstart AAAAAAADOP}
{\bkmkend AAAAAAADOP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationStart} (const {\b UnitTest} &unit_test, int iteration){\bkmkstart AAAAAAADOQ}
{\bkmkend AAAAAAADOQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADOR}
{\bkmkend AAAAAAADOR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAADOS}
{\bkmkend AAAAAAADOS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseStart} (const {\b TestCase} &test_case){\bkmkstart AAAAAAADOT}
{\bkmkend AAAAAAADOT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestStart} (const {\b TestInfo} &test_info){\bkmkstart AAAAAAADOU}
{\bkmkend AAAAAAADOU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestPartResult} (const {\b TestPartResult} &result){\bkmkstart AAAAAAADOV}
{\bkmkend AAAAAAADOV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestEnd} (const {\b TestInfo} &test_info){\bkmkstart AAAAAAADOW}
{\bkmkend AAAAAAADOW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseEnd} (const {\b TestCase} &test_case){\bkmkstart AAAAAAADOX}
{\bkmkend AAAAAAADOX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADOY}
{\bkmkend AAAAAAADOY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAADOZ}
{\bkmkend AAAAAAADOZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration){\bkmkstart AAAAAAADPA}
{\bkmkend AAAAAAADPA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAADPB}
{\bkmkend AAAAAAADPB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintTestName} (const char *test_case, const char *test){\bkmkstart AAAAAAADPC}
{\bkmkend AAAAAAADPC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PrimeTable Class Reference\par \pard\plain 
{\tc\tcl2 \v PrimeTable}
{\xe \v PrimeTable}
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
Inheritance diagram for PrimeTable:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_prime_table__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b IsPrime} (int n) const =0{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetNextPrime} (int p) const =0{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/prime_tables.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PrimeTableTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v PrimeTableTest< T >}
{\xe \v PrimeTableTest< T >}
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
Inheritance diagram for PrimeTableTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_prime_table_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for PrimeTableTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_prime_table_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PrimeTable} *const {\b table_}{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample6_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PrintableViaPrintTo Struct Reference\par \pard\plain 
{\tc\tcl2 \v foo::PrintableViaPrintTo}
{\xe \v foo::PrintableViaPrintTo}
{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value}{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::PrintableViaPrintToTemplate< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v foo::PrintableViaPrintToTemplate< T >}
{\xe \v foo::PrintableViaPrintToTemplate< T >}
{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PrintableViaPrintToTemplate} (const T &a_value){\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b value} () const{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PrivateCode Class Reference\par \pard\plain 
{\tc\tcl2 \v PrivateCode}
{\xe \v PrivateCode}
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FRIEND_TEST} (PrivateCodeTest, CanAccessPrivateMembers){\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b FRIEND_TEST} ({\b PrivateCodeFixtureTest}, CanAccessPrivateMembers){\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b x} () const{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/production.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/production.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ENPM808X::ProfileResult Struct Reference\par \pard\plain 
{\tc\tcl2 \v ENPM808X::ProfileResult}
{\xe \v ENPM808X::ProfileResult}
{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Data structure for holding a profiling result. }}\par
{
{\f2 #include <profiler.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b name}{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::chrono::milliseconds::rep {\b elapsedTime}{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Data structure for holding a profiling result. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
include/{\b profiler.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::PropertyMatcher< Class, PropertyType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::PropertyMatcher< Class, PropertyType >}
{\xe \v testing::internal::PropertyMatcher< Class, PropertyType >}
{\bkmkstart AAAAAAADPD}
{\bkmkend AAAAAAADPD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REFERENCE_TO_CONST_} (PropertyType) RefToConstProperty{\bkmkstart AAAAAAADPE}
{\bkmkend AAAAAAADPE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b PropertyMatcher} (PropertyType(Class::*property)() const, const {\b Matcher}< RefToConstProperty > &matcher){\bkmkstart AAAAAAADPF}
{\bkmkend AAAAAAADPF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADPG}
{\bkmkend AAAAAAADPG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADPH}
{\bkmkend AAAAAAADPH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > bool {\b MatchAndExplain} (const T &value, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADPI}
{\bkmkend AAAAAAADPI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PropertyOne Class Reference\par \pard\plain 
{\tc\tcl2 \v PropertyOne}
{\xe \v PropertyOne}
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
Inheritance diagram for PropertyOne:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_one__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for PropertyOne:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_one__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_outfile1_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PropertyRecordingTest Class Reference\par \pard\plain 
{\tc\tcl2 \v PropertyRecordingTest}
{\xe \v PropertyRecordingTest}
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
Inheritance diagram for PropertyRecordingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_recording_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for PropertyRecordingTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_recording_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
PropertyTwo Class Reference\par \pard\plain 
{\tc\tcl2 \v PropertyTwo}
{\xe \v PropertyTwo}
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
Inheritance diagram for PropertyTwo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_two__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for PropertyTwo:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_property_two__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_outfile2_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ProtectedFixtureMethodsTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ProtectedFixtureMethodsTest}
{\xe \v ProtectedFixtureMethodsTest}
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
Inheritance diagram for ProtectedFixtureMethodsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_protected_fixture_methods_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ProtectedFixtureMethodsTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_protected_fixture_methods_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::QuantifierMatcherImpl< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::QuantifierMatcherImpl< Container >}
{\xe \v testing::internal::QuantifierMatcherImpl< Container >}
{\bkmkstart AAAAAAADPJ}
{\bkmkend AAAAAAADPJ}
Inheritance diagram for testing::internal::QuantifierMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_quantifier_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::QuantifierMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_quantifier_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b StlContainerView}< RawContainer > {\b View}{\bkmkstart AAAAAAADPK}
{\bkmkend AAAAAAADPK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::type {\b StlContainer}{\bkmkstart AAAAAAADPL}
{\bkmkend AAAAAAADPL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::const_reference {\b StlContainerReference}{\bkmkstart AAAAAAADPM}
{\bkmkend AAAAAAADPM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef StlContainer::value_type {\b Element}{\bkmkstart AAAAAAADPN}
{\bkmkend AAAAAAADPN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_REFERENCE_AND_CONST_} (Container) RawContainer{\bkmkstart AAAAAAADPO}
{\bkmkend AAAAAAADPO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InnerMatcher > {\b QuantifierMatcherImpl} (InnerMatcher inner_matcher){\bkmkstart AAAAAAADPP}
{\bkmkend AAAAAAADPP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b MatchAndExplainImpl} (bool all_elements_should_match, Container container, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADPQ}
{\bkmkend AAAAAAADPQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b GTEST_DISALLOW_ASSIGN_} ({\b QuantifierMatcherImpl}){\bkmkstart AAAAAAADPR}
{\bkmkend AAAAAAADPR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b Matcher}< const Element & > {\b inner_matcher_}{\bkmkstart AAAAAAADPS}
{\bkmkend AAAAAAADPS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Queue< E > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v Queue< E >}
{\xe \v Queue< E >}
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Clear} (){\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

size_t {\b Size} () const{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b QueueNode}< E > * {\b Head} (){\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b QueueNode}< E > * {\b Head} () const{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b QueueNode}< E > * {\b Last} (){\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b QueueNode}< E > * {\b Last} () const{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Enqueue} (const E &element){\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

E * {\b Dequeue} (){\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b Queue} * {\b Map} (F function) const{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample3-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
QueueNode< E > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v QueueNode< E >}
{\xe \v QueueNode< E >}
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const E & {\b element} () const{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b QueueNode} * {\b next} (){\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b QueueNode} * {\b next} () const{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Queue< E >}{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample3-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
QueueTest Class Reference\par \pard\plain 
{\tc\tcl2 \v QueueTest}
{\xe \v QueueTest}
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
Inheritance diagram for QueueTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_queue_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for QueueTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_queue_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b MapTester} (const {\b Queue}< int > *q){\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b Double} (int n){\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Queue}< int > {\b q0_}{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Queue}< int > {\b q1_}{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Queue}< int > {\b q2_}{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample3_unittest.cc\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample5_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
QuickTest Class Reference\par \pard\plain 
{\tc\tcl2 \v QuickTest}
{\xe \v QuickTest}
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
Inheritance diagram for QuickTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_quick_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for QuickTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_quick_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

time_t {\b start_time_}{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/samples/sample5_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::Random Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::Random}
{\xe \v testing::internal::Random}
{\bkmkstart AAAAAAADPT}
{\bkmkend AAAAAAADPT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Random} (UInt32 seed){\bkmkstart AAAAAAADPU}
{\bkmkend AAAAAAADPU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Reseed} (UInt32 seed){\bkmkstart AAAAAAADPV}
{\bkmkend AAAAAAADPV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

UInt32 {\b Generate} (UInt32 range){\bkmkstart AAAAAAADPW}
{\bkmkend AAAAAAADPW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const UInt32 {\b kMaxRange} = 1u << 31{\bkmkstart AAAAAAADPX}
{\bkmkend AAAAAAADPX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.RangeNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.RangeNode}
{\xe \v pump.RangeNode}
{\bkmkstart AAAAAAABBV}
{\bkmkend AAAAAAABBV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, identifier=None, exp1=None, exp2=None){\bkmkstart AAAAAAABBW}
{\bkmkend AAAAAAABBW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b identifier}{\bkmkstart AAAAAAABBX}
{\bkmkend AAAAAAABBX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b exp1}{\bkmkstart AAAAAAABBY}
{\bkmkend AAAAAAABBY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b exp2}{\bkmkstart AAAAAAABBZ}
{\bkmkend AAAAAAABBZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.RawCodeNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.RawCodeNode}
{\xe \v pump.RawCodeNode}
{\bkmkstart AAAAAAABCA}
{\bkmkend AAAAAAABCA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, token=None){\bkmkstart AAAAAAABCB}
{\bkmkend AAAAAAABCB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b raw_code}{\bkmkstart AAAAAAABCC}
{\bkmkend AAAAAAABCC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RE Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RE}
{\xe \v testing::internal::RE}
{\bkmkstart AAAAAAADPY}
{\bkmkend AAAAAAADPY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RE} (const {\b RE} &other){\bkmkstart AAAAAAADPZ}
{\bkmkend AAAAAAADPZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RE} (const ::std::string &regex){\bkmkstart AAAAAAADQA}
{\bkmkend AAAAAAADQA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RE} (const char *regex){\bkmkstart AAAAAAADQB}
{\bkmkend AAAAAAADQB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b pattern} () const{\bkmkstart AAAAAAADQC}
{\bkmkend AAAAAAADQC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b FullMatch} (const ::std::string &str, const {\b RE} &re){\bkmkstart AAAAAAADQD}
{\bkmkend AAAAAAADQD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b PartialMatch} (const ::std::string &str, const {\b RE} &re){\bkmkstart AAAAAAADQE}
{\bkmkend AAAAAAADQE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b FullMatch} (const char *str, const {\b RE} &re){\bkmkstart AAAAAAADQF}
{\bkmkend AAAAAAADQF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b PartialMatch} (const char *str, const {\b RE} &re){\bkmkstart AAAAAAADQG}
{\bkmkend AAAAAAADQG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReferenceOrValueWrapper< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReferenceOrValueWrapper< T >}
{\xe \v testing::internal::ReferenceOrValueWrapper< T >}
{\bkmkstart AAAAAAADQH}
{\bkmkend AAAAAAADQH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReferenceOrValueWrapper} (T value){\bkmkstart AAAAAAADQI}
{\bkmkend AAAAAAADQI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T {\b Unwrap} (){\bkmkstart AAAAAAADQJ}
{\bkmkend AAAAAAADQJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b Peek} () const{\bkmkstart AAAAAAADQK}
{\bkmkend AAAAAAADQK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReferenceOrValueWrapper< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReferenceOrValueWrapper< T & >}
{\xe \v testing::internal::ReferenceOrValueWrapper< T & >}
{\bkmkstart AAAAAAADQL}
{\bkmkend AAAAAAADQL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T & {\b reference}{\bkmkstart AAAAAAADQM}
{\bkmkend AAAAAAADQM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReferenceOrValueWrapper} (reference ref){\bkmkstart AAAAAAADQN}
{\bkmkend AAAAAAADQN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T & {\b Unwrap} (){\bkmkstart AAAAAAADQO}
{\bkmkend AAAAAAADQO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b Peek} () const{\bkmkstart AAAAAAADQP}
{\bkmkend AAAAAAADQP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl}
{\xe \v testing::gmock_matchers_test::ReferencesBarOrIsZeroImpl}
{\bkmkstart AAAAAAACEC}
{\bkmkend AAAAAAACEC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > bool {\b MatchAndExplain} (const T &x, {\b MatchResultListener} *) const{\bkmkstart AAAAAAACED}
{\bkmkend AAAAAAACED}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (ostream *os) const{\bkmkstart AAAAAAACEE}
{\bkmkend AAAAAAACEE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (ostream *os) const{\bkmkstart AAAAAAACEF}
{\bkmkend AAAAAAACEF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReferenceWrapper< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReferenceWrapper< T >}
{\xe \v testing::internal::ReferenceWrapper< T >}
{\bkmkstart AAAAAAADQQ}
{\bkmkend AAAAAAADQQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReferenceWrapper} (T &l_value){\bkmkstart AAAAAAADQR}
{\bkmkend AAAAAAADQR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b operator T &} () const{\bkmkstart AAAAAAADQS}
{\bkmkend AAAAAAADQS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::ReferencingFunctor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::ReferencingFunctor}
{\xe \v testing::gmock_matchers_test::ReferencingFunctor}
{\bkmkstart AAAAAAACEG}
{\bkmkend AAAAAAACEG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const int * {\b result_type}{\bkmkstart AAAAAAACEH}
{\bkmkend AAAAAAACEH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

result_type {\b operator()} (const int &n){\bkmkstart AAAAAAACEI}
{\bkmkend AAAAAAACEI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RefMatcher< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RefMatcher< T >}
{\xe \v testing::internal::RefMatcher< T >}
{\bkmkstart AAAAAAADQT}
{\bkmkend AAAAAAADQT}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RefMatcher< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RefMatcher< T & >}
{\xe \v testing::internal::RefMatcher< T & >}
{\bkmkstart AAAAAAADQU}
{\bkmkend AAAAAAADQU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b RefMatcher} (T &x){\bkmkstart AAAAAAADQV}
{\bkmkend AAAAAAADQV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Super > {\b operator Matcher< Super & >} () const{\bkmkstart AAAAAAADQW}
{\bkmkend AAAAAAADQW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RelationToSourceCopy Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RelationToSourceCopy}
{\xe \v testing::internal::RelationToSourceCopy}
{\bkmkstart AAAAAAADQX}
{\bkmkend AAAAAAADQX}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RelationToSourceReference Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RelationToSourceReference}
{\xe \v testing::internal::RelationToSourceReference}
{\bkmkstart AAAAAAADQY}
{\bkmkend AAAAAAADQY}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::remove_reference< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::remove_reference< T >}
{\xe \v testing::internal::remove_reference< T >}
{\bkmkstart AAAAAAADQZ}
{\bkmkend AAAAAAADQZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADRA}
{\bkmkend AAAAAAADRA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::remove_reference< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::remove_reference< T & >}
{\xe \v testing::internal::remove_reference< T & >}
{\bkmkstart AAAAAAADRB}
{\bkmkend AAAAAAADRB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADRC}
{\bkmkend AAAAAAADRC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveConst< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveConst< T >}
{\xe \v testing::internal::RemoveConst< T >}
{\bkmkstart AAAAAAADRD}
{\bkmkend AAAAAAADRD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADRE}
{\bkmkend AAAAAAADRE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveConst< const T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveConst< const T >}
{\xe \v testing::internal::RemoveConst< const T >}
{\bkmkstart AAAAAAADRF}
{\bkmkend AAAAAAADRF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADRG}
{\bkmkend AAAAAAADRG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveConst< const T[N]> Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveConst< const T[N]>}
{\xe \v testing::internal::RemoveConst< const T[N]>}
{\bkmkstart AAAAAAADRH}
{\bkmkend AAAAAAADRH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b RemoveConst}< T >::type {\b type}[N]{\bkmkstart AAAAAAADRI}
{\bkmkend AAAAAAADRI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveConstFromKey< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveConstFromKey< T >}
{\xe \v testing::internal::RemoveConstFromKey< T >}
{\bkmkstart AAAAAAADRJ}
{\bkmkend AAAAAAADRJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADRK}
{\bkmkend AAAAAAADRK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveConstFromKey< std::pair< const K, V > > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveConstFromKey< std::pair< const K, V > >}
{\xe \v testing::internal::RemoveConstFromKey< std::pair< const K, V > >}
{\bkmkstart AAAAAAADRL}
{\bkmkend AAAAAAADRL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::pair< K, V > {\b type}{\bkmkstart AAAAAAADRM}
{\bkmkend AAAAAAADRM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveReference< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveReference< T >}
{\xe \v testing::internal::RemoveReference< T >}
{\bkmkstart AAAAAAADRN}
{\bkmkend AAAAAAADRN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADRO}
{\bkmkend AAAAAAADRO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::RemoveReference< T & > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::RemoveReference< T & >}
{\xe \v testing::internal::RemoveReference< T & >}
{\bkmkstart AAAAAAADRP}
{\bkmkend AAAAAAADRP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b type}{\bkmkstart AAAAAAADRQ}
{\bkmkend AAAAAAADRQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ResultOfMatcher< Callable > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ResultOfMatcher< Callable >}
{\xe \v testing::internal::ResultOfMatcher< Callable >}
{\bkmkstart AAAAAAADRR}
{\bkmkend AAAAAAADRR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b CallableTraits}< Callable >::ResultType {\b ResultType}{\bkmkstart AAAAAAADRS}
{\bkmkend AAAAAAADRS}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ResultOfMatcher} (Callable callable, const {\b Matcher}< ResultType > &matcher){\bkmkstart AAAAAAADRT}
{\bkmkend AAAAAAADRT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > {\b operator Matcher< T >} () const{\bkmkstart AAAAAAADRU}
{\bkmkend AAAAAAADRU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Return Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Return}
{\xe \v cpp.ast.Return}
{\bkmkstart AAAAAAAAQE}
{\bkmkend AAAAAAAAQE}
Inheritance diagram for cpp.ast.Return:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_return__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Return:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_return__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnAction< R > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnAction< R >}
{\xe \v testing::internal::ReturnAction< R >}
{\bkmkstart AAAAAAADRV}
{\bkmkend AAAAAAADRV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnAction} (R value){\bkmkstart AAAAAAADRW}
{\bkmkend AAAAAAADRW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAADRX}
{\bkmkend AAAAAAADRX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnNullAction Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnNullAction}
{\xe \v testing::internal::ReturnNullAction}
{\bkmkstart AAAAAAADRY}
{\bkmkend AAAAAAADRY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > static Result {\b Perform} (const ArgumentTuple &){\bkmkstart AAAAAAADRZ}
{\bkmkend AAAAAAADRZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnRefAction< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnRefAction< T >}
{\xe \v testing::internal::ReturnRefAction< T >}
{\bkmkstart AAAAAAADSA}
{\bkmkend AAAAAAADSA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnRefAction} (T &ref){\bkmkstart AAAAAAADSB}
{\bkmkend AAAAAAADSB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAADSC}
{\bkmkend AAAAAAADSC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnRefOfCopyAction< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnRefOfCopyAction< T >}
{\xe \v testing::internal::ReturnRefOfCopyAction< T >}
{\bkmkstart AAAAAAADSD}
{\bkmkend AAAAAAADSD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ReturnRefOfCopyAction} (const T &value){\bkmkstart AAAAAAADSE}
{\bkmkend AAAAAAADSE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAADSF}
{\bkmkend AAAAAAADSF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ReturnVoidAction Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ReturnVoidAction}
{\xe \v testing::internal::ReturnVoidAction}
{\bkmkstart AAAAAAADSG}
{\bkmkend AAAAAAADSG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > static void {\b Perform} (const ArgumentTuple &){\bkmkstart AAAAAAADSH}
{\bkmkend AAAAAAADSH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::SafeMatcherCastImpl< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::SafeMatcherCastImpl< T >}
{\xe \v testing::SafeMatcherCastImpl< T >}
{\bkmkstart AAAAAAABPY}
{\bkmkend AAAAAAABPY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename M > static {\b Matcher}< T > {\b Cast} (const M &polymorphic_matcher_or_value){\bkmkstart AAAAAAABPZ}
{\bkmkend AAAAAAABPZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename U > static {\b Matcher}< T > {\b Cast} (const {\b Matcher}< U > &matcher){\bkmkstart AAAAAAABQA}
{\bkmkend AAAAAAABQA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::SameSizeTuplePrefixComparator< kSize1, kSize2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::SameSizeTuplePrefixComparator< kSize1, kSize2 >}
{\xe \v std::tr1::gtest_internal::SameSizeTuplePrefixComparator< kSize1, kSize2 >}
{\bkmkstart AAAAAAABGG}
{\bkmkend AAAAAAABGG}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::SameSizeTuplePrefixComparator< 0, 0 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::SameSizeTuplePrefixComparator< 0, 0 >}
{\xe \v std::tr1::gtest_internal::SameSizeTuplePrefixComparator< 0, 0 >}
{\bkmkstart AAAAAAABGH}
{\bkmkend AAAAAAABGH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple1 , class Tuple2 > static bool {\b Eq} (const Tuple1 &, const Tuple2 &){\bkmkstart AAAAAAABGI}
{\bkmkend AAAAAAABGI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::SameSizeTuplePrefixComparator< k, k > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::SameSizeTuplePrefixComparator< k, k >}
{\xe \v std::tr1::gtest_internal::SameSizeTuplePrefixComparator< k, k >}
{\bkmkstart AAAAAAABGJ}
{\bkmkend AAAAAAABGJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<class Tuple1 , class Tuple2 > static bool {\b Eq} (const Tuple1 &t1, const Tuple2 &t2){\bkmkstart AAAAAAABGK}
{\bkmkend AAAAAAABGK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::scoped_ptr< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::scoped_ptr< T >}
{\xe \v testing::internal::scoped_ptr< T >}
{\bkmkstart AAAAAAADSI}
{\bkmkend AAAAAAADSI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b element_type}{\bkmkstart AAAAAAADSJ}
{\bkmkend AAAAAAADSJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b scoped_ptr} (T *p=NULL){\bkmkstart AAAAAAADSK}
{\bkmkend AAAAAAADSK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T & {\b operator*} () const{\bkmkstart AAAAAAADSL}
{\bkmkend AAAAAAADSL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b operator->} () const{\bkmkstart AAAAAAADSM}
{\bkmkend AAAAAAADSM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b get} () const{\bkmkstart AAAAAAADSN}
{\bkmkend AAAAAAADSN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b release} (){\bkmkstart AAAAAAADSO}
{\bkmkend AAAAAAADSO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b reset} (T *p=NULL){\bkmkstart AAAAAAADSP}
{\bkmkend AAAAAAADSP}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b swap} ({\b scoped_ptr} &a, {\b scoped_ptr} &b){\bkmkstart AAAAAAADSQ}
{\bkmkend AAAAAAADSQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::ScopedFakeTestPartResultReporter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::ScopedFakeTestPartResultReporter}
{\xe \v testing::ScopedFakeTestPartResultReporter}
{\bkmkstart AAAAAAABQB}
{\bkmkend AAAAAAABQB}
Inheritance diagram for testing::ScopedFakeTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_scoped_fake_test_part_result_reporter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::ScopedFakeTestPartResultReporter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_scoped_fake_test_part_result_reporter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b InterceptMode} \{ {\b INTERCEPT_ONLY_CURRENT_THREAD}, 
{\b INTERCEPT_ALL_THREADS}
 \}{\bkmkstart AAAAAAABQC}
{\bkmkend AAAAAAABQC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ScopedFakeTestPartResultReporter} ({\b TestPartResultArray} *result){\bkmkstart AAAAAAABQD}
{\bkmkend AAAAAAABQD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ScopedFakeTestPartResultReporter} (InterceptMode intercept_mode, {\b TestPartResultArray} *result){\bkmkstart AAAAAAABQE}
{\bkmkend AAAAAAABQE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ReportTestPartResult} (const {\b TestPartResult} &result){\bkmkstart AAAAAAABQF}
{\bkmkend AAAAAAABQF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-spi.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ScopedPrematureExitFile Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ScopedPrematureExitFile}
{\xe \v testing::internal::ScopedPrematureExitFile}
{\bkmkstart AAAAAAADSR}
{\bkmkend AAAAAAADSR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ScopedPrematureExitFile} (const char *premature_exit_filepath){\bkmkstart AAAAAAADSS}
{\bkmkend AAAAAAADSS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ScopedTrace Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ScopedTrace}
{\xe \v testing::internal::ScopedTrace}
{\bkmkstart AAAAAAADST}
{\bkmkend AAAAAAADST}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ScopedTrace} (const char *file, int line, const {\b Message} &message){\bkmkstart AAAAAAADSU}
{\bkmkend AAAAAAADSU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >}
{\bkmkstart AAAAAAADSV}
{\bkmkend AAAAAAADSV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3), GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5), GMOCK_FIELD_(ArgumentTuple, k6), GMOCK_FIELD_(ArgumentTuple, k7), GMOCK_FIELD_(ArgumentTuple, k8), GMOCK_FIELD_(ArgumentTuple, k9), GMOCK_FIELD_(ArgumentTuple, k10)){\bkmkstart AAAAAAADSW}
{\bkmkend AAAAAAADSW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADSX}
{\bkmkend AAAAAAADSX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADSY}
{\bkmkend AAAAAAADSY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADSZ}
{\bkmkend AAAAAAADSZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(){\bkmkstart AAAAAAADTA}
{\bkmkend AAAAAAADTA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADTB}
{\bkmkend AAAAAAADTB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &){\bkmkstart AAAAAAADTC}
{\bkmkend AAAAAAADTC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, -1, -1, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADTD}
{\bkmkend AAAAAAADTD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1)){\bkmkstart AAAAAAADTE}
{\bkmkend AAAAAAADTE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADTF}
{\bkmkend AAAAAAADTF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADTG}
{\bkmkend AAAAAAADTG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, -1, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADTH}
{\bkmkend AAAAAAADTH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2)){\bkmkstart AAAAAAADTI}
{\bkmkend AAAAAAADTI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADTJ}
{\bkmkend AAAAAAADTJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADTK}
{\bkmkend AAAAAAADTK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADTL}
{\bkmkend AAAAAAADTL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3)){\bkmkstart AAAAAAADTM}
{\bkmkend AAAAAAADTM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADTN}
{\bkmkend AAAAAAADTN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADTO}
{\bkmkend AAAAAAADTO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADTP}
{\bkmkend AAAAAAADTP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3), GMOCK_FIELD_(ArgumentTuple, k4)){\bkmkstart AAAAAAADTQ}
{\bkmkend AAAAAAADTQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADTR}
{\bkmkend AAAAAAADTR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADTS}
{\bkmkend AAAAAAADTS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADTT}
{\bkmkend AAAAAAADTT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3), GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5)){\bkmkstart AAAAAAADTU}
{\bkmkend AAAAAAADTU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADTV}
{\bkmkend AAAAAAADTV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADTW}
{\bkmkend AAAAAAADTW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, -1, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADTX}
{\bkmkend AAAAAAADTX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3), GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5), GMOCK_FIELD_(ArgumentTuple, k6)){\bkmkstart AAAAAAADTY}
{\bkmkend AAAAAAADTY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADTZ}
{\bkmkend AAAAAAADTZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADUA}
{\bkmkend AAAAAAADUA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, -1, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, -1, -1, -1 >}
{\bkmkstart AAAAAAADUB}
{\bkmkend AAAAAAADUB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3), GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5), GMOCK_FIELD_(ArgumentTuple, k6), GMOCK_FIELD_(ArgumentTuple, k7)){\bkmkstart AAAAAAADUC}
{\bkmkend AAAAAAADUC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADUD}
{\bkmkend AAAAAAADUD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADUE}
{\bkmkend AAAAAAADUE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, -1, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, -1, -1 >}
{\bkmkstart AAAAAAADUF}
{\bkmkend AAAAAAADUF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3), GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5), GMOCK_FIELD_(ArgumentTuple, k6), GMOCK_FIELD_(ArgumentTuple, k7), GMOCK_FIELD_(ArgumentTuple, k8)){\bkmkstart AAAAAAADUG}
{\bkmkend AAAAAAADUG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADUH}
{\bkmkend AAAAAAADUH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADUI}
{\bkmkend AAAAAAADUI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, -1 >}
{\xe \v testing::internal::SelectArgs< Result, ArgumentTuple, k1, k2, k3, k4, k5, k6, k7, k8, k9, -1 >}
{\bkmkstart AAAAAAADUJ}
{\bkmkend AAAAAAADUJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef Result {\b type}(GMOCK_FIELD_(ArgumentTuple, k1), GMOCK_FIELD_(ArgumentTuple, k2), GMOCK_FIELD_(ArgumentTuple, k3), GMOCK_FIELD_(ArgumentTuple, k4), GMOCK_FIELD_(ArgumentTuple, k5), GMOCK_FIELD_(ArgumentTuple, k6), GMOCK_FIELD_(ArgumentTuple, k7), GMOCK_FIELD_(ArgumentTuple, k8), GMOCK_FIELD_(ArgumentTuple, k9)){\bkmkstart AAAAAAADUK}
{\bkmkend AAAAAAADUK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< type >::ArgumentTuple {\b SelectedArgs}{\bkmkstart AAAAAAADUL}
{\bkmkend AAAAAAADUL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static SelectedArgs {\b Select} (const ArgumentTuple &args){\bkmkstart AAAAAAADUM}
{\bkmkend AAAAAAADUM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Sequence Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Sequence}
{\xe \v testing::Sequence}
{\bkmkstart AAAAAAABQG}
{\bkmkend AAAAAAABQG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AddExpectation} (const {\b Expectation} &expectation) const{\bkmkstart AAAAAAABQH}
{\bkmkend AAAAAAABQH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-spec-builders.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SequenceTestingListener Class Reference\par \pard\plain 
{\tc\tcl2 \v SequenceTestingListener}
{\xe \v SequenceTestingListener}
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
Inheritance diagram for SequenceTestingListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sequence_testing_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for SequenceTestingListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_sequence_testing_listener__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SequenceTestingListener} (std::vector< std::string > *vector, const char *id){\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &){\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramEnd} (const {\b UnitTest} &){\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationStart} (const {\b UnitTest} &, int){\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &, int){\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SetArgumentPointeeAction< N, A, kIsProto > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SetArgumentPointeeAction< N, A, kIsProto >}
{\xe \v testing::internal::SetArgumentPointeeAction< N, A, kIsProto >}
{\bkmkstart AAAAAAADUN}
{\bkmkend AAAAAAADUN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SetArgumentPointeeAction} (const A &value){\bkmkstart AAAAAAADUO}
{\bkmkend AAAAAAADUO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > void {\b Perform} (const ArgumentTuple &args) const{\bkmkstart AAAAAAADUP}
{\bkmkend AAAAAAADUP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SetArgumentPointeeAction< N, Proto, true > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SetArgumentPointeeAction< N, Proto, true >}
{\xe \v testing::internal::SetArgumentPointeeAction< N, Proto, true >}
{\bkmkstart AAAAAAADUQ}
{\bkmkend AAAAAAADUQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SetArgumentPointeeAction} (const Proto &proto){\bkmkstart AAAAAAADUR}
{\bkmkend AAAAAAADUR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > void {\b Perform} (const ArgumentTuple &args) const{\bkmkstart AAAAAAADUS}
{\bkmkend AAAAAAADUS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SetErrnoAndReturnAction< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SetErrnoAndReturnAction< T >}
{\xe \v testing::internal::SetErrnoAndReturnAction< T >}
{\bkmkstart AAAAAAADUT}
{\bkmkend AAAAAAADUT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SetErrnoAndReturnAction} (int errno_value, T result){\bkmkstart AAAAAAADUU}
{\bkmkend AAAAAAADUU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Result , typename ArgumentTuple > Result {\b Perform} (const ArgumentTuple &) const{\bkmkstart AAAAAAADUV}
{\bkmkend AAAAAAADUV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::SetUpTestCaseTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::SetUpTestCaseTest}
{\xe \v testing::SetUpTestCaseTest}
{\bkmkstart AAAAAAABQI}
{\bkmkend AAAAAAABQI}
Inheritance diagram for testing::SetUpTestCaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_set_up_test_case_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::SetUpTestCaseTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_set_up_test_case_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAABQJ}
{\bkmkend AAAAAAABQJ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAABQK}
{\bkmkend AAAAAAABQK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAABQL}
{\bkmkend AAAAAAABQL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static int {\b counter_} = 0{\bkmkstart AAAAAAABQM}
{\bkmkend AAAAAAABQM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b shared_resource_} = NULL{\bkmkstart AAAAAAABQN}
{\bkmkend AAAAAAABQN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SingleFailureChecker Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SingleFailureChecker}
{\xe \v testing::internal::SingleFailureChecker}
{\bkmkstart AAAAAAADUW}
{\bkmkend AAAAAAADUW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SingleFailureChecker} (const {\b TestPartResultArray} *results, TestPartResult::Type type, const string &substr){\bkmkstart AAAAAAADUX}
{\bkmkend AAAAAAADUX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-spi.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::SizeIsMatcher< SizeMatcher > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::SizeIsMatcher< SizeMatcher >}
{\xe \v testing::internal::SizeIsMatcher< SizeMatcher >}
{\bkmkstart AAAAAAADUY}
{\bkmkend AAAAAAADUY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Impl}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b SizeIsMatcher} (const SizeMatcher &size_matcher){\bkmkstart AAAAAAADUZ}
{\bkmkend AAAAAAADUZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAADVA}
{\bkmkend AAAAAAADVA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_function_mockers_test::StackInterface< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_function_mockers_test::StackInterface< T >}
{\xe \v testing::gmock_generated_function_mockers_test::StackInterface< T >}
{\bkmkstart AAAAAAABZS}
{\bkmkend AAAAAAABZS}
Inheritance diagram for testing::gmock_generated_function_mockers_test::StackInterface< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__function__mockers__test_1_1_stack_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b Push} (const T &value)=0{\bkmkstart AAAAAAABZT}
{\bkmkend AAAAAAABZT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b Pop} ()=0{\bkmkstart AAAAAAABZU}
{\bkmkend AAAAAAABZU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b GetSize} () const =0{\bkmkstart AAAAAAABZV}
{\bkmkend AAAAAAABZV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual const T & {\b GetTop} () const =0{\bkmkstart AAAAAAABZW}
{\bkmkend AAAAAAABZW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-function-mockers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StartsWithMatcher< StringType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StartsWithMatcher< StringType >}
{\xe \v testing::internal::StartsWithMatcher< StringType >}
{\bkmkstart AAAAAAADVI}
{\bkmkend AAAAAAADVI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b StartsWithMatcher} (const StringType &prefix){\bkmkstart AAAAAAADVJ}
{\bkmkend AAAAAAADVJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > bool {\b MatchAndExplain} (CharType *s, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADVK}
{\bkmkend AAAAAAADVK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcheeStringType > bool {\b MatchAndExplain} (const MatcheeStringType &s, {\b MatchResultListener} *) const{\bkmkstart AAAAAAADVL}
{\bkmkend AAAAAAADVL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADVM}
{\bkmkend AAAAAAADVM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADVN}
{\bkmkend AAAAAAADVN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StaticAssertTypeEqHelper< T1, T2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StaticAssertTypeEqHelper< T1, T2 >}
{\xe \v testing::internal::StaticAssertTypeEqHelper< T1, T2 >}
{\bkmkstart AAAAAAADVO}
{\bkmkend AAAAAAADVO}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StaticAssertTypeEqHelper< T, T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StaticAssertTypeEqHelper< T, T >}
{\xe \v testing::internal::StaticAssertTypeEqHelper< T, T >}
{\bkmkstart AAAAAAADVP}
{\bkmkend AAAAAAADVP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum \{ {\b value} = true
 \}{\bkmkstart AAAAAAADVQ}
{\bkmkend AAAAAAADVQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StaticAssertTypeEqTestHelper< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v StaticAssertTypeEqTestHelper< T >}
{\xe \v StaticAssertTypeEqTestHelper< T >}
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StlContainerView< RawContainer > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StlContainerView< RawContainer >}
{\xe \v testing::internal::StlContainerView< RawContainer >}
{\bkmkstart AAAAAAADVR}
{\bkmkend AAAAAAADVR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef RawContainer {\b type}{\bkmkstart AAAAAAADVS}
{\bkmkend AAAAAAADVS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const type & {\b const_reference}{\bkmkstart AAAAAAADVT}
{\bkmkend AAAAAAADVT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const_reference {\b ConstReference} (const RawContainer &container){\bkmkstart AAAAAAADVU}
{\bkmkend AAAAAAADVU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b Copy} (const RawContainer &container){\bkmkstart AAAAAAADVV}
{\bkmkend AAAAAAADVV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StlContainerView< ::testing::tuple< ElementPointer, Size > > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StlContainerView< ::testing::tuple< ElementPointer, Size > >}
{\xe \v testing::internal::StlContainerView< ::testing::tuple< ElementPointer, Size > >}
{\bkmkstart AAAAAAADVW}
{\bkmkend AAAAAAADVW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::NativeArray}< RawElement > {\b type}{\bkmkstart AAAAAAADVX}
{\bkmkend AAAAAAADVX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const {\b type} {\b const_reference}{\bkmkstart AAAAAAADVY}
{\bkmkend AAAAAAADVY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_CONST_} (typename {\b internal::PointeeOf}< ElementPointer >::{\b type}) RawElement{\bkmkstart AAAAAAADVZ}
{\bkmkend AAAAAAADVZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b const_reference} {\b ConstReference} (const ::testing::tuple< ElementPointer, Size > &array){\bkmkstart AAAAAAADWA}
{\bkmkend AAAAAAADWA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b type} {\b Copy} (const ::testing::tuple< ElementPointer, Size > &array){\bkmkstart AAAAAAADWB}
{\bkmkend AAAAAAADWB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StlContainerView< Element[N]> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StlContainerView< Element[N]>}
{\xe \v testing::internal::StlContainerView< Element[N]>}
{\bkmkstart AAAAAAADWC}
{\bkmkend AAAAAAADWC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::NativeArray}< RawElement > {\b type}{\bkmkstart AAAAAAADWD}
{\bkmkend AAAAAAADWD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef const {\b type} {\b const_reference}{\bkmkstart AAAAAAADWE}
{\bkmkend AAAAAAADWE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_CONST_} (Element) RawElement{\bkmkstart AAAAAAADWF}
{\bkmkend AAAAAAADWF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b const_reference} {\b ConstReference} (const Element(&array)[N]){\bkmkstart AAAAAAADWG}
{\bkmkend AAAAAAADWG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b type} {\b Copy} (const Element(&array)[N]){\bkmkstart AAAAAAADWH}
{\bkmkend AAAAAAADWH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
StreamableInGlobal Class Reference\par \pard\plain 
{\tc\tcl2 \v StreamableInGlobal}
{\xe \v StreamableInGlobal}
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::StreamableTemplateInFoo< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v foo::StreamableTemplateInFoo< T >}
{\xe \v foo::StreamableTemplateInFoo< T >}
{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b value} () const{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Streamlike< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Streamlike< T >}
{\xe \v testing::gmock_matchers_test::Streamlike< T >}
{\bkmkstart AAAAAAACEJ}
{\bkmkend AAAAAAACEJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ConstIter {\b const_iterator}{\bkmkstart AAAAAAACEK}
{\bkmkend AAAAAAACEK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T {\b value_type}{\bkmkstart AAAAAAACEL}
{\bkmkend AAAAAAACEL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InIter > {\b Streamlike} (InIter first, InIter last){\bkmkstart AAAAAAACEM}
{\bkmkend AAAAAAACEM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b begin} () const{\bkmkstart AAAAAAACEN}
{\bkmkend AAAAAAACEN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const_iterator {\b end} () const{\bkmkstart AAAAAAACEO}
{\bkmkend AAAAAAACEO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::ostream & {\b operator<<} (std::ostream &os, const {\b Streamlike} &s){\bkmkstart AAAAAAACEP}
{\bkmkend AAAAAAACEP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StreamMatchResultListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StreamMatchResultListener}
{\xe \v testing::internal::StreamMatchResultListener}
{\bkmkstart AAAAAAADWI}
{\bkmkend AAAAAAADWI}
Inheritance diagram for testing::internal::StreamMatchResultListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_stream_match_result_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::StreamMatchResultListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_stream_match_result_listener__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b StreamMatchResultListener} (::std::ostream *os){\bkmkstart AAAAAAADWJ}
{\bkmkend AAAAAAADWJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::StrEqualityMatcher< StringType > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::StrEqualityMatcher< StringType >}
{\xe \v testing::internal::StrEqualityMatcher< StringType >}
{\bkmkstart AAAAAAADWK}
{\bkmkend AAAAAAADWK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b StrEqualityMatcher} (const StringType &str, bool expect_eq, bool case_sensitive){\bkmkstart AAAAAAADWL}
{\bkmkend AAAAAAADWL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename CharType > bool {\b MatchAndExplain} (CharType *s, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAADWM}
{\bkmkend AAAAAAADWM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcheeStringType > bool {\b MatchAndExplain} (const MatcheeStringType &s, {\b MatchResultListener} *) const{\bkmkstart AAAAAAADWN}
{\bkmkend AAAAAAADWN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADWO}
{\bkmkend AAAAAAADWO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADWP}
{\bkmkend AAAAAAADWP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::StrictMock< MockClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::StrictMock< MockClass >}
{\xe \v testing::StrictMock< MockClass >}
{\bkmkstart AAAAAAABQO}
{\bkmkend AAAAAAABQO}
Inheritance diagram for testing::StrictMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_strict_mock__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::StrictMock< MockClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_strict_mock__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 > {\b StrictMock} (const A1 &a1){\bkmkstart AAAAAAABQP}
{\bkmkend AAAAAAABQP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 > {\b StrictMock} (const A1 &a1, const A2 &a2){\bkmkstart AAAAAAABQQ}
{\bkmkend AAAAAAABQQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3){\bkmkstart AAAAAAABQR}
{\bkmkend AAAAAAABQR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4){\bkmkstart AAAAAAABQS}
{\bkmkend AAAAAAABQS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5){\bkmkstart AAAAAAABQT}
{\bkmkend AAAAAAABQT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6){\bkmkstart AAAAAAABQU}
{\bkmkend AAAAAAABQU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7){\bkmkstart AAAAAAABQV}
{\bkmkend AAAAAAABQV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8){\bkmkstart AAAAAAABQW}
{\bkmkend AAAAAAABQW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9){\bkmkstart AAAAAAABQX}
{\bkmkend AAAAAAABQX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > {\b StrictMock} (const A1 &a1, const A2 &a2, const A3 &a3, const A4 &a4, const A5 &a5, const A6 &a6, const A7 &a7, const A8 &a8, const A9 &a9, const A10 &a10){\bkmkstart AAAAAAABQY}
{\bkmkend AAAAAAABQY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::String Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::String}
{\xe \v testing::internal::String}
{\bkmkstart AAAAAAADWQ}
{\bkmkend AAAAAAADWQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const char * {\b CloneCString} (const char *c_str){\bkmkstart AAAAAAADWR}
{\bkmkend AAAAAAADWR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b CStringEquals} (const char *lhs, const char *rhs){\bkmkstart AAAAAAADWS}
{\bkmkend AAAAAAADWS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b ShowWideCString} (const wchar_t *wide_c_str){\bkmkstart AAAAAAADWT}
{\bkmkend AAAAAAADWT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b WideCStringEquals} (const wchar_t *lhs, const wchar_t *rhs){\bkmkstart AAAAAAADWU}
{\bkmkend AAAAAAADWU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b CaseInsensitiveCStringEquals} (const char *lhs, const char *rhs){\bkmkstart AAAAAAADWV}
{\bkmkend AAAAAAADWV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b CaseInsensitiveWideCStringEquals} (const wchar_t *lhs, const wchar_t *rhs){\bkmkstart AAAAAAADWW}
{\bkmkend AAAAAAADWW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b EndsWithCaseInsensitive} (const std::string &str, const std::string &suffix){\bkmkstart AAAAAAADWX}
{\bkmkend AAAAAAADWX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatIntWidth2} (int value){\bkmkstart AAAAAAADWY}
{\bkmkend AAAAAAADWY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatHexInt} (int value){\bkmkstart AAAAAAADWZ}
{\bkmkend AAAAAAADWZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b FormatByte} (unsigned char value){\bkmkstart AAAAAAADXA}
{\bkmkend AAAAAAADXA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-string.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::StringMatchResultListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::StringMatchResultListener}
{\xe \v testing::StringMatchResultListener}
{\bkmkstart AAAAAAABQZ}
{\bkmkend AAAAAAABQZ}
Inheritance diagram for testing::StringMatchResultListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_string_match_result_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::StringMatchResultListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_string_match_result_listener__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

internal::string {\b str} () const{\bkmkstart AAAAAAABRA}
{\bkmkend AAAAAAABRA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Clear} (){\bkmkstart AAAAAAABRB}
{\bkmkend AAAAAAABRB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Struct Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Struct}
{\xe \v cpp.ast.Struct}
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
Inheritance diagram for cpp.ast.Struct:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_struct__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Struct:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_struct__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_test_utils.Subprocess Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_test_utils.Subprocess}
{\xe \v gtest_test_utils.Subprocess}
{\bkmkstart AAAAAAAAYF}
{\bkmkend AAAAAAAAYF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b __init__} (self, command, working_dir=None, capture_stderr=True, env=None)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b output}{\bkmkstart AAAAAAAAYG}
{\bkmkend AAAAAAAAYG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b terminated_by_signal}{\bkmkstart AAAAAAAAYH}
{\bkmkend AAAAAAAAYH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b exited}{\bkmkstart AAAAAAAAYI}
{\bkmkend AAAAAAAAYI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b signal}{\bkmkstart AAAAAAAAYJ}
{\bkmkend AAAAAAAAYJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b exit_code}{\bkmkstart AAAAAAAAYK}
{\bkmkend AAAAAAAAYK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:gtest_test_utils::Subprocess}
{\xe \v gtest_test_utils::Subprocess\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_test_utils.Subprocess.__init__ (  {\i self},   {\i command},   {\i working_dir} = {\f2 None},   {\i capture_stderr} = {\f2 True},   {\i env} = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAYL}
{\bkmkend AAAAAAAAYL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Changes into a specified directory, if provided, and executes a command.\par
\par
Restores the old directory afterwards.\par
\par
Args:\par
  command:        The command to run, in the form of sys.argv.\par
  working_dir:    The directory to change into.\par
  capture_stderr: Determines whether to capture stderr in the output member\par
              or to discard it.\par
  env:            Dictionary with environment to pass to the subprocess.\par
\par
Returns:\par
  An object that represents outcome of the executed process. It has the\par
  following attributes:\par
terminated_by_signal   True iff the child process has been terminated\par
                       by a signal.\par
signal                 Sygnal that terminated the child process.\par
exited                 True iff the child process exited normally.\par
exit_code              The code with which the child process exited.\par
output                 Child process's stdout and stderr output\par
                       combined in a string.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_test_utils.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::SubstractAction Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::SubstractAction}
{\xe \v testing::gmock_generated_actions_test::SubstractAction}
{\bkmkstart AAAAAAABXE}
{\bkmkend AAAAAAABXE}
Inheritance diagram for testing::gmock_generated_actions_test::SubstractAction:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__actions__test_1_1_substract_action__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_generated_actions_test::SubstractAction:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__generated__actions__test_1_1_substract_action__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual int {\b Perform} (const tuple< int, int > &args){\bkmkstart AAAAAAABXF}
{\bkmkend AAAAAAABXF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
upload.SubversionVCS Class Reference\par \pard\plain 
{\tc\tcl2 \v upload.SubversionVCS}
{\xe \v upload.SubversionVCS}
{\bkmkstart AAAAAAAEKJ}
{\bkmkend AAAAAAAEKJ}
Inheritance diagram for upload.SubversionVCS:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_subversion_v_c_s__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for upload.SubversionVCS:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_subversion_v_c_s__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, options){\bkmkstart AAAAAAAEKK}
{\bkmkend AAAAAAAEKK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GuessBase} (self, required)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GenerateDiff} (self, args){\bkmkstart AAAAAAAEKL}
{\bkmkend AAAAAAAEKL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetUnknownFiles} (self){\bkmkstart AAAAAAAEKM}
{\bkmkend AAAAAAAEKM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b ReadFile} (self, filename)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetStatus} (self, filename)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetBaseFile} (self, filename){\bkmkstart AAAAAAAEKN}
{\bkmkend AAAAAAAEKN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, options){\bkmkstart AAAAAAAEKK}
{\bkmkend AAAAAAAEKK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GuessBase} (self, required)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GenerateDiff} (self, args){\bkmkstart AAAAAAAEKL}
{\bkmkend AAAAAAAEKL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetUnknownFiles} (self){\bkmkstart AAAAAAAEKM}
{\bkmkend AAAAAAAEKM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b ReadFile} (self, filename)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetStatus} (self, filename)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetBaseFile} (self, filename){\bkmkstart AAAAAAAEKN}
{\bkmkend AAAAAAAEKN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b rev_start}{\bkmkstart AAAAAAAEKO}
{\bkmkend AAAAAAAEKO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b rev_end}{\bkmkstart AAAAAAAEKP}
{\bkmkend AAAAAAAEKP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b svnls_cache}{\bkmkstart AAAAAAAEKQ}
{\bkmkend AAAAAAAEKQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b svn_base}{\bkmkstart AAAAAAAEKR}
{\bkmkend AAAAAAAEKR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Implementation of the VersionControlSystem interface for Subversion.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v GetStatus\:upload::SubversionVCS}
{\xe \v upload::SubversionVCS\:GetStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.SubversionVCS.GetStatus (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAEKS}
{\bkmkend AAAAAAAEKS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns the status of a file.}
 \par
}}
{\xe \v GetStatus\:upload::SubversionVCS}
{\xe \v upload::SubversionVCS\:GetStatus}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.SubversionVCS.GetStatus (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAEKS}
{\bkmkend AAAAAAAEKS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns the status of a file.}
 \par
}}
{\xe \v GuessBase\:upload::SubversionVCS}
{\xe \v upload::SubversionVCS\:GuessBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.SubversionVCS.GuessBase (  {\i self},   {\i required})}}
\par
{\bkmkstart AAAAAAAEKT}
{\bkmkend AAAAAAAEKT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Wrapper for _GuessBase.}
 \par
}}
{\xe \v GuessBase\:upload::SubversionVCS}
{\xe \v upload::SubversionVCS\:GuessBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.SubversionVCS.GuessBase (  {\i self},   {\i required})}}
\par
{\bkmkstart AAAAAAAEKT}
{\bkmkend AAAAAAAEKT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Wrapper for _GuessBase.}
 \par
}}
{\xe \v ReadFile\:upload::SubversionVCS}
{\xe \v upload::SubversionVCS\:ReadFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.SubversionVCS.ReadFile (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAEKU}
{\bkmkend AAAAAAAEKU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns the contents of a file.}
 \par
}}
{\xe \v ReadFile\:upload::SubversionVCS}
{\xe \v upload::SubversionVCS\:ReadFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.SubversionVCS.ReadFile (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAEKU}
{\bkmkend AAAAAAAEKU}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns the contents of a file.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/upload.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SuccessfulTest Class Reference\par \pard\plain 
{\tc\tcl2 \v SuccessfulTest}
{\xe \v SuccessfulTest}
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
Inheritance diagram for SuccessfulTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_successful_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for SuccessfulTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_successful_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_xml_output_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::SumOf5Functor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::SumOf5Functor}
{\xe \v testing::gmock_generated_actions_test::SumOf5Functor}
{\bkmkstart AAAAAAABXG}
{\bkmkend AAAAAAABXG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (int a, int b, int c, int d, int e){\bkmkstart AAAAAAABXH}
{\bkmkend AAAAAAABXH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::SumOf5Functor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::SumOf5Functor}
{\xe \v testing::gmock_more_actions_test::SumOf5Functor}
{\bkmkstart AAAAAAACFU}
{\bkmkend AAAAAAACFU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (int a, int b, int c, int d, int e){\bkmkstart AAAAAAACFV}
{\bkmkend AAAAAAACFV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::SumOf6Functor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::SumOf6Functor}
{\xe \v testing::gmock_generated_actions_test::SumOf6Functor}
{\bkmkstart AAAAAAABXI}
{\bkmkend AAAAAAABXI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (int a, int b, int c, int d, int e, int f){\bkmkstart AAAAAAABXJ}
{\bkmkend AAAAAAABXJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::SumOf6Functor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::SumOf6Functor}
{\xe \v testing::gmock_more_actions_test::SumOf6Functor}
{\bkmkstart AAAAAAACFW}
{\bkmkend AAAAAAACFW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (int a, int b, int c, int d, int e, int f){\bkmkstart AAAAAAACFX}
{\bkmkend AAAAAAACFX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::TenArgConstructorClass Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::TenArgConstructorClass}
{\xe \v testing::gmock_generated_actions_test::TenArgConstructorClass}
{\bkmkstart AAAAAAABXK}
{\bkmkend AAAAAAABXK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TenArgConstructorClass} (int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10){\bkmkstart AAAAAAABXL}
{\bkmkend AAAAAAABXL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value_}{\bkmkstart AAAAAAABXM}
{\bkmkend AAAAAAABXM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
my_namespace::testing::Test Class Reference\par \pard\plain 
{\tc\tcl2 \v my_namespace::testing::Test}
{\xe \v my_namespace::testing::Test}
{\bkmkstart AAAAAAAAZO}
{\bkmkend AAAAAAAAZO}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::Test Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::Test}
{\xe \v testing::Test}
{\bkmkstart AAAAAAABRC}
{\bkmkend AAAAAAABRC}
Inheritance diagram for testing::Test:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef internal::SetUpTestCaseFunc {\b SetUpTestCaseFunc}{\bkmkstart AAAAAAABRD}
{\bkmkend AAAAAAABRD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef internal::TearDownTestCaseFunc {\b TearDownTestCaseFunc}{\bkmkstart AAAAAAABRE}
{\bkmkend AAAAAAABRE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetUpTestCase} (){\bkmkstart AAAAAAABRF}
{\bkmkend AAAAAAABRF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b TearDownTestCase} (){\bkmkstart AAAAAAABRG}
{\bkmkend AAAAAAABRG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b HasFatalFailure} (){\bkmkstart AAAAAAABRH}
{\bkmkend AAAAAAABRH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b HasNonfatalFailure} (){\bkmkstart AAAAAAABRI}
{\bkmkend AAAAAAABRI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b HasFailure} (){\bkmkstart AAAAAAABRJ}
{\bkmkend AAAAAAABRJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b RecordProperty} (const std::string &key, const std::string &value){\bkmkstart AAAAAAABRK}
{\bkmkend AAAAAAABRK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b RecordProperty} (const std::string &key, int value){\bkmkstart AAAAAAABRL}
{\bkmkend AAAAAAABRL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b SetUp} (){\bkmkstart AAAAAAABRM}
{\bkmkend AAAAAAABRM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b TearDown} (){\bkmkstart AAAAAAABRN}
{\bkmkend AAAAAAABRN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestInfo}{\bkmkstart AAAAAAABRO}
{\bkmkend AAAAAAABRO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TEST_before_TEST_F_in_same_test_case Class Reference\par \pard\plain 
{\tc\tcl2 \v TEST_before_TEST_F_in_same_test_case}
{\xe \v TEST_before_TEST_F_in_same_test_case}
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
Inheritance diagram for TEST_before_TEST_F_in_same_test_case:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_t_e_s_t__before___t_e_s_t___f__in__same__test__case__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for TEST_before_TEST_F_in_same_test_case:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_t_e_s_t__before___t_e_s_t___f__in__same__test__case__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TEST_F_before_TEST_in_same_test_case Class Reference\par \pard\plain 
{\tc\tcl2 \v TEST_F_before_TEST_in_same_test_case}
{\xe \v TEST_F_before_TEST_in_same_test_case}
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
Inheritance diagram for TEST_F_before_TEST_in_same_test_case:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_t_e_s_t___f__before___t_e_s_t__in__same__test__case__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for TEST_F_before_TEST_in_same_test_case:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_t_e_s_t___f__before___t_e_s_t__in__same__test__case__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_output_test_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestCase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestCase}
{\xe \v testing::TestCase}
{\bkmkstart AAAAAAABRP}
{\bkmkend AAAAAAABRP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestCase} (const char *name, const char *a_type_param, Test::SetUpTestCaseFunc set_up_tc, Test::TearDownTestCaseFunc tear_down_tc){\bkmkstart AAAAAAABRQ}
{\bkmkend AAAAAAABRQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b name} () const{\bkmkstart AAAAAAABRR}
{\bkmkend AAAAAAABRR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b type_param} () const{\bkmkstart AAAAAAABRS}
{\bkmkend AAAAAAABRS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b should_run} () const{\bkmkstart AAAAAAABRT}
{\bkmkend AAAAAAABRT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_count} () const{\bkmkstart AAAAAAABRU}
{\bkmkend AAAAAAABRU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_count} () const{\bkmkstart AAAAAAABRV}
{\bkmkend AAAAAAABRV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_disabled_test_count} () const{\bkmkstart AAAAAAABRW}
{\bkmkend AAAAAAABRW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b disabled_test_count} () const{\bkmkstart AAAAAAABRX}
{\bkmkend AAAAAAABRX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_test_count} () const{\bkmkstart AAAAAAABRY}
{\bkmkend AAAAAAABRY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_to_run_count} () const{\bkmkstart AAAAAAABRZ}
{\bkmkend AAAAAAABRZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_count} () const{\bkmkstart AAAAAAABSA}
{\bkmkend AAAAAAABSA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAABSB}
{\bkmkend AAAAAAABSB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAABSC}
{\bkmkend AAAAAAABSC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAABSD}
{\bkmkend AAAAAAABSD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestInfo} * {\b GetTestInfo} (int i) const{\bkmkstart AAAAAAABSE}
{\bkmkend AAAAAAABSE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} & {\b ad_hoc_test_result} () const{\bkmkstart AAAAAAABSF}
{\bkmkend AAAAAAABSF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Test}{\bkmkstart AAAAAAABSG}
{\bkmkend AAAAAAABSG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAABSH}
{\bkmkend AAAAAAABSH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.gmock_class_test.TestCase Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.gmock_class_test.TestCase}
{\xe \v cpp.gmock_class_test.TestCase}
{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
Inheritance diagram for cpp.gmock_class_test.TestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1gmock__class__test_1_1_test_case__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.gmock_class_test.TestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1gmock__class__test_1_1_test_case__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b StripLeadingWhitespace} (self, lines)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b assertEqualIgnoreLeadingWhitespace} (self, expected_lines, lines)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Helper class that adds assert methods.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v assertEqualIgnoreLeadingWhitespace\:cpp::gmock_class_test::TestCase}
{\xe \v cpp::gmock_class_test::TestCase\:assertEqualIgnoreLeadingWhitespace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.gmock_class_test.TestCase.assertEqualIgnoreLeadingWhitespace (  {\i self},   {\i expected_lines},   {\i lines})}}
\par
{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Specialized assert that ignores the indent level.}
 \par
}}
{\xe \v StripLeadingWhitespace\:cpp::gmock_class_test::TestCase}
{\xe \v cpp::gmock_class_test::TestCase\:StripLeadingWhitespace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.gmock_class_test.TestCase.StripLeadingWhitespace (  {\i self},   {\i lines})}}
\par
{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Strip leading whitespace in each line in 'lines'.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/gmock_class_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestCaseNameIs Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestCaseNameIs}
{\xe \v testing::internal::TestCaseNameIs}
{\bkmkstart AAAAAAADXB}
{\bkmkend AAAAAAADXB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestCaseNameIs} (const std::string &name){\bkmkstart AAAAAAADXC}
{\bkmkend AAAAAAADXC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (const {\b TestCase} *test_case) const{\bkmkstart AAAAAAADXD}
{\bkmkend AAAAAAADXD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestEventListener Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestEventListener}
{\xe \v testing::TestEventListener}
{\bkmkstart AAAAAAABSI}
{\bkmkend AAAAAAABSI}
Inheritance diagram for testing::TestEventListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test_event_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAABSJ}
{\bkmkend AAAAAAABSJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationStart} (const {\b UnitTest} &unit_test, int iteration)=0{\bkmkstart AAAAAAABSK}
{\bkmkend AAAAAAABSK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAABSL}
{\bkmkend AAAAAAABSL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAABSM}
{\bkmkend AAAAAAABSM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseStart} (const {\b TestCase} &test_case)=0{\bkmkstart AAAAAAABSN}
{\bkmkend AAAAAAABSN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestStart} (const {\b TestInfo} &test_info)=0{\bkmkstart AAAAAAABSO}
{\bkmkend AAAAAAABSO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestPartResult} (const {\b TestPartResult} &test_part_result)=0{\bkmkstart AAAAAAABSP}
{\bkmkend AAAAAAABSP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestEnd} (const {\b TestInfo} &test_info)=0{\bkmkstart AAAAAAABSQ}
{\bkmkend AAAAAAABSQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseEnd} (const {\b TestCase} &test_case)=0{\bkmkstart AAAAAAABSR}
{\bkmkend AAAAAAABSR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAABSS}
{\bkmkend AAAAAAABSS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAABST}
{\bkmkend AAAAAAABST}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration)=0{\bkmkstart AAAAAAABSU}
{\bkmkend AAAAAAABSU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramEnd} (const {\b UnitTest} &unit_test)=0{\bkmkstart AAAAAAABSV}
{\bkmkend AAAAAAABSV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestEventListeners Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestEventListeners}
{\xe \v testing::TestEventListeners}
{\bkmkstart AAAAAAABSW}
{\bkmkend AAAAAAABSW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Append} ({\b TestEventListener} *listener){\bkmkstart AAAAAAABSX}
{\bkmkend AAAAAAABSX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b Release} ({\b TestEventListener} *listener){\bkmkstart AAAAAAABSY}
{\bkmkend AAAAAAABSY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b default_result_printer} () const{\bkmkstart AAAAAAABSZ}
{\bkmkend AAAAAAABSZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b default_xml_generator} () const{\bkmkstart AAAAAAABTA}
{\bkmkend AAAAAAABTA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestCase}{\bkmkstart AAAAAAABTB}
{\bkmkend AAAAAAABTB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestInfo}{\bkmkstart AAAAAAABTC}
{\bkmkend AAAAAAABTC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::DefaultGlobalTestPartResultReporter}{\bkmkstart AAAAAAABTD}
{\bkmkend AAAAAAABTD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::NoExecDeathTest}{\bkmkstart AAAAAAABTE}
{\bkmkend AAAAAAABTE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::TestEventListenersAccessor}{\bkmkstart AAAAAAABTF}
{\bkmkend AAAAAAABTF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAABTG}
{\bkmkend AAAAAAABTG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestEventListenersAccessor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestEventListenersAccessor}
{\xe \v testing::internal::TestEventListenersAccessor}
{\bkmkstart AAAAAAADXE}
{\bkmkend AAAAAAADXE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b TestEventListener} * {\b GetRepeater} ({\b TestEventListeners} *listeners){\bkmkstart AAAAAAADXF}
{\bkmkend AAAAAAADXF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetDefaultResultPrinter} ({\b TestEventListeners} *listeners, {\b TestEventListener} *listener){\bkmkstart AAAAAAADXG}
{\bkmkend AAAAAAADXG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SetDefaultXmlGenerator} ({\b TestEventListeners} *listeners, {\b TestEventListener} *listener){\bkmkstart AAAAAAADXH}
{\bkmkend AAAAAAADXH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b EventForwardingEnabled} (const {\b TestEventListeners} &listeners){\bkmkstart AAAAAAADXI}
{\bkmkend AAAAAAADXI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b SuppressEventForwarding} ({\b TestEventListeners} *listeners){\bkmkstart AAAAAAADXJ}
{\bkmkend AAAAAAADXJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestEventRepeater Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestEventRepeater}
{\xe \v testing::internal::TestEventRepeater}
{\bkmkstart AAAAAAADXK}
{\bkmkend AAAAAAADXK}
Inheritance diagram for testing::internal::TestEventRepeater:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_event_repeater__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::TestEventRepeater:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_event_repeater__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Append} ({\b TestEventListener} *listener){\bkmkstart AAAAAAADXL}
{\bkmkend AAAAAAADXL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListener} * {\b Release} ({\b TestEventListener} *listener){\bkmkstart AAAAAAADXM}
{\bkmkend AAAAAAADXM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b forwarding_enabled} () const{\bkmkstart AAAAAAADXN}
{\bkmkend AAAAAAADXN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_forwarding_enabled} (bool enable){\bkmkstart AAAAAAADXO}
{\bkmkend AAAAAAADXO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADXP}
{\bkmkend AAAAAAADXP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationStart} (const {\b UnitTest} &unit_test, int iteration){\bkmkstart AAAAAAADXQ}
{\bkmkend AAAAAAADXQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpStart} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADXR}
{\bkmkend AAAAAAADXR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsSetUpEnd} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADXS}
{\bkmkend AAAAAAADXS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseStart} (const {\b TestCase} &test_case){\bkmkstart AAAAAAADXT}
{\bkmkend AAAAAAADXT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestStart} (const {\b TestInfo} &test_info){\bkmkstart AAAAAAADXU}
{\bkmkend AAAAAAADXU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestPartResult} (const {\b TestPartResult} &result){\bkmkstart AAAAAAADXV}
{\bkmkend AAAAAAADXV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestEnd} (const {\b TestInfo} &test_info){\bkmkstart AAAAAAADXW}
{\bkmkend AAAAAAADXW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestCaseEnd} (const {\b TestCase} &test_case){\bkmkstart AAAAAAADXX}
{\bkmkend AAAAAAADXX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownStart} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADXY}
{\bkmkend AAAAAAADXY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnEnvironmentsTearDownEnd} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADXZ}
{\bkmkend AAAAAAADXZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration){\bkmkstart AAAAAAADYA}
{\bkmkend AAAAAAADYA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramEnd} (const {\b UnitTest} &unit_test){\bkmkstart AAAAAAADYB}
{\bkmkend AAAAAAADYB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestFactoryBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestFactoryBase}
{\xe \v testing::internal::TestFactoryBase}
{\bkmkstart AAAAAAADYC}
{\bkmkend AAAAAAADYC}
Inheritance diagram for testing::internal::TestFactoryBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_factory_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b Test} * {\b CreateTest} ()=0{\bkmkstart AAAAAAADYD}
{\bkmkend AAAAAAADYD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestFactoryImpl< TestClass > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestFactoryImpl< TestClass >}
{\xe \v testing::internal::TestFactoryImpl< TestClass >}
{\bkmkstart AAAAAAADYE}
{\bkmkend AAAAAAADYE}
Inheritance diagram for testing::internal::TestFactoryImpl< TestClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_factory_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::TestFactoryImpl< TestClass >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_test_factory_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b Test} * {\b CreateTest} (){\bkmkstart AAAAAAADYF}
{\bkmkend AAAAAAADYF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestInfo Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestInfo}
{\xe \v testing::TestInfo}
{\bkmkstart AAAAAAABTH}
{\bkmkend AAAAAAABTH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b test_case_name} () const{\bkmkstart AAAAAAABTI}
{\bkmkend AAAAAAABTI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b name} () const{\bkmkstart AAAAAAABTJ}
{\bkmkend AAAAAAABTJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b type_param} () const{\bkmkstart AAAAAAABTK}
{\bkmkend AAAAAAABTK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b value_param} () const{\bkmkstart AAAAAAABTL}
{\bkmkend AAAAAAABTL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file} () const{\bkmkstart AAAAAAABTM}
{\bkmkend AAAAAAABTM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line} () const{\bkmkstart AAAAAAABTN}
{\bkmkend AAAAAAABTN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b should_run} () const{\bkmkstart AAAAAAABTO}
{\bkmkend AAAAAAABTO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b is_reportable} () const{\bkmkstart AAAAAAABTP}
{\bkmkend AAAAAAABTP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} * {\b result} () const{\bkmkstart AAAAAAABTQ}
{\bkmkend AAAAAAABTQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Test}{\bkmkstart AAAAAAABTR}
{\bkmkend AAAAAAABTR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestCase}{\bkmkstart AAAAAAABTS}
{\bkmkend AAAAAAABTS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAABTT}
{\bkmkend AAAAAAABTT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::StreamingListenerTest}{\bkmkstart AAAAAAABTU}
{\bkmkend AAAAAAABTU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestInfo} * {\b internal::MakeAndRegisterTestInfo} (const char *test_case_name, const char *name, const char *type_param, const char *value_param, {\b internal::CodeLocation} code_location, internal::TypeId fixture_class_id, Test::SetUpTestCaseFunc set_up_tc, Test::TearDownTestCaseFunc tear_down_tc, {\b internal::TestFactoryBase} *factory){\bkmkstart AAAAAAABTV}
{\bkmkend AAAAAAABTV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestInfoTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestInfoTest}
{\xe \v testing::TestInfoTest}
{\bkmkstart AAAAAAABTW}
{\bkmkend AAAAAAABTW}
Inheritance diagram for testing::TestInfoTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test_info_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::TestInfoTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test_info_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const {\b TestInfo} * {\b GetTestInfo} (const char *test_name){\bkmkstart AAAAAAABTX}
{\bkmkend AAAAAAABTX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const {\b TestResult} * {\b GetTestResult} (const {\b TestInfo} *test_info){\bkmkstart AAAAAAABTY}
{\bkmkend AAAAAAABTY}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestingVector Class Reference\par \pard\plain 
{\tc\tcl2 \v TestingVector}
{\xe \v TestingVector}
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
Inheritance diagram for TestingVector:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_testing_vector__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for TestingVector:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_testing_vector__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TestListener Class Reference\par \pard\plain 
{\tc\tcl2 \v TestListener}
{\xe \v TestListener}
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
Inheritance diagram for TestListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_test_listener__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for TestListener:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_test_listener__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestListener} (int *on_start_counter, bool *is_destroyed){\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestProgramStart} (const {\b UnitTest} &){\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestPartResult Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestPartResult}
{\xe \v testing::TestPartResult}
{\bkmkstart AAAAAAABTZ}
{\bkmkend AAAAAAABTZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Type} \{ {\b kSuccess}, 
{\b kNonFatalFailure}, 
{\b kFatalFailure}
 \}{\bkmkstart AAAAAAABUA}
{\bkmkend AAAAAAABUA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestPartResult} (Type a_type, const char *a_file_name, int a_line_number, const char *a_message){\bkmkstart AAAAAAABUB}
{\bkmkend AAAAAAABUB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Type {\b type} () const{\bkmkstart AAAAAAABUC}
{\bkmkend AAAAAAABUC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file_name} () const{\bkmkstart AAAAAAABUD}
{\bkmkend AAAAAAABUD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line_number} () const{\bkmkstart AAAAAAABUE}
{\bkmkend AAAAAAABUE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b summary} () const{\bkmkstart AAAAAAABUF}
{\bkmkend AAAAAAABUF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b message} () const{\bkmkstart AAAAAAABUG}
{\bkmkend AAAAAAABUG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b passed} () const{\bkmkstart AAAAAAABUH}
{\bkmkend AAAAAAABUH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b failed} () const{\bkmkstart AAAAAAABUI}
{\bkmkend AAAAAAABUI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b nonfatally_failed} () const{\bkmkstart AAAAAAABUJ}
{\bkmkend AAAAAAABUJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b fatally_failed} () const{\bkmkstart AAAAAAABUK}
{\bkmkend AAAAAAABUK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-test-part.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-test-part.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestPartResultArray Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestPartResultArray}
{\xe \v testing::TestPartResultArray}
{\bkmkstart AAAAAAABUL}
{\bkmkend AAAAAAABUL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Append} (const {\b TestPartResult} &result){\bkmkstart AAAAAAABUM}
{\bkmkend AAAAAAABUM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestPartResult} & {\b GetTestPartResult} (int index) const{\bkmkstart AAAAAAABUN}
{\bkmkend AAAAAAABUN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b size} () const{\bkmkstart AAAAAAABUO}
{\bkmkend AAAAAAABUO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-test-part.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-test-part.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestPartResultReporterInterface Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestPartResultReporterInterface}
{\xe \v testing::TestPartResultReporterInterface}
{\bkmkstart AAAAAAABUP}
{\bkmkend AAAAAAABUP}
Inheritance diagram for testing::TestPartResultReporterInterface:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1_test_part_result_reporter_interface__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ReportTestPartResult} (const {\b TestPartResult} &result)=0{\bkmkstart AAAAAAABUQ}
{\bkmkend AAAAAAABUQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-test-part.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestProperty Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestProperty}
{\xe \v testing::TestProperty}
{\bkmkstart AAAAAAABUR}
{\bkmkend AAAAAAABUR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestProperty} (const std::string &a_key, const std::string &a_value){\bkmkstart AAAAAAABUS}
{\bkmkend AAAAAAABUS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b key} () const{\bkmkstart AAAAAAABUT}
{\bkmkend AAAAAAABUT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b value} () const{\bkmkstart AAAAAAABUU}
{\bkmkend AAAAAAABUU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetValue} (const std::string &new_value){\bkmkstart AAAAAAABUV}
{\bkmkend AAAAAAABUV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestPropertyKeyIs Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestPropertyKeyIs}
{\xe \v testing::internal::TestPropertyKeyIs}
{\bkmkstart AAAAAAADYG}
{\bkmkend AAAAAAADYG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestPropertyKeyIs} (const std::string &key){\bkmkstart AAAAAAADYH}
{\bkmkend AAAAAAADYH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b operator()} (const {\b TestProperty} &test_property) const{\bkmkstart AAAAAAADYI}
{\bkmkend AAAAAAADYI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::TestResult Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::TestResult}
{\xe \v testing::TestResult}
{\bkmkstart AAAAAAABUW}
{\bkmkend AAAAAAABUW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_part_count} () const{\bkmkstart AAAAAAABUX}
{\bkmkend AAAAAAABUX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_property_count} () const{\bkmkstart AAAAAAABUY}
{\bkmkend AAAAAAABUY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAABUZ}
{\bkmkend AAAAAAABUZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAABVA}
{\bkmkend AAAAAAABVA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b HasFatalFailure} () const{\bkmkstart AAAAAAABVB}
{\bkmkend AAAAAAABVB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b HasNonfatalFailure} () const{\bkmkstart AAAAAAABVC}
{\bkmkend AAAAAAABVC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAABVD}
{\bkmkend AAAAAAABVD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestPartResult} & {\b GetTestPartResult} (int i) const{\bkmkstart AAAAAAABVE}
{\bkmkend AAAAAAABVE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestProperty} & {\b GetTestProperty} (int i) const{\bkmkstart AAAAAAABVF}
{\bkmkend AAAAAAABVF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestInfo}{\bkmkstart AAAAAAABVG}
{\bkmkend AAAAAAABVG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b TestCase}{\bkmkstart AAAAAAABVH}
{\bkmkend AAAAAAABVH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b UnitTest}{\bkmkstart AAAAAAABVI}
{\bkmkend AAAAAAABVI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::DefaultGlobalTestPartResultReporter}{\bkmkstart AAAAAAABVJ}
{\bkmkend AAAAAAABVJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::ExecDeathTest}{\bkmkstart AAAAAAABVK}
{\bkmkend AAAAAAABVK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::TestResultAccessor}{\bkmkstart AAAAAAABVL}
{\bkmkend AAAAAAABVL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestImpl}{\bkmkstart AAAAAAABVM}
{\bkmkend AAAAAAABVM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::WindowsDeathTest}{\bkmkstart AAAAAAABVN}
{\bkmkend AAAAAAABVN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TestResultAccessor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TestResultAccessor}
{\xe \v testing::internal::TestResultAccessor}
{\bkmkstart AAAAAAADYJ}
{\bkmkend AAAAAAADYJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b RecordProperty} ({\b TestResult} *test_result, const std::string &xml_element, const {\b TestProperty} &property){\bkmkstart AAAAAAADYK}
{\bkmkend AAAAAAADYK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b ClearTestPartResults} ({\b TestResult} *test_result){\bkmkstart AAAAAAADYL}
{\bkmkend AAAAAAADYL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const std::vector< {\b testing::TestPartResult} > & {\b test_part_results} (const {\b TestResult} &test_result){\bkmkstart AAAAAAADYM}
{\bkmkend AAAAAAADYM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::ThreadLocal< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::ThreadLocal< T >}
{\xe \v testing::internal::ThreadLocal< T >}
{\bkmkstart AAAAAAADYN}
{\bkmkend AAAAAAADYN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b ThreadLocal} (const T &value){\bkmkstart AAAAAAADYO}
{\bkmkend AAAAAAADYO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T * {\b pointer} (){\bkmkstart AAAAAAADYP}
{\bkmkend AAAAAAADYP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T * {\b pointer} () const{\bkmkstart AAAAAAADYQ}
{\bkmkend AAAAAAADYQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const T & {\b get} () const{\bkmkstart AAAAAAADYR}
{\bkmkend AAAAAAADYR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set} (const T &value){\bkmkstart AAAAAAADYS}
{\bkmkend AAAAAAADYS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
gtest_throw_on_failure_test.ThrowOnFailureTest Class Reference\par \pard\plain 
{\tc\tcl2 \v gtest_throw_on_failure_test.ThrowOnFailureTest}
{\xe \v gtest_throw_on_failure_test.ThrowOnFailureTest}
{\bkmkstart AAAAAAAAYM}
{\bkmkend AAAAAAAAYM}
Inheritance diagram for gtest_throw_on_failure_test.ThrowOnFailureTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__throw__on__failure__test_1_1_throw_on_failure_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for gtest_throw_on_failure_test.ThrowOnFailureTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classgtest__throw__on__failure__test_1_1_throw_on_failure_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b RunAndVerify} (self, env_var_value, flag_value, should_fail)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testDefaultBehavior} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThrowOnFailureEnvVar} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThrowOnFailureFlag} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b testThrowOnFailureFlagOverridesEnvVar} (self)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the throw-on-failure mode.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v RunAndVerify\:gtest_throw_on_failure_test::ThrowOnFailureTest}
{\xe \v gtest_throw_on_failure_test::ThrowOnFailureTest\:RunAndVerify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_throw_on_failure_test.ThrowOnFailureTest.RunAndVerify (  {\i self},   {\i env_var_value},   {\i flag_value},   {\i should_fail})}}
\par
{\bkmkstart AAAAAAAAYN}
{\bkmkend AAAAAAAAYN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Runs gtest_throw_on_failure_test_ and verifies that it does\par
(or does not) exit with a non-zero code.\par
\par
Args:\par
  env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\par
                variable; None if the variable should be unset.\par
  flag_value:       value of the --gtest_break_on_failure flag;\par
                None if the flag should not be present.\par
  should_fail:      True iff the program is expected to fail.\par
}
 \par
}}
{\xe \v testDefaultBehavior\:gtest_throw_on_failure_test::ThrowOnFailureTest}
{\xe \v gtest_throw_on_failure_test::ThrowOnFailureTest\:testDefaultBehavior}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_throw_on_failure_test.ThrowOnFailureTest.testDefaultBehavior (  {\i self})}}
\par
{\bkmkstart AAAAAAAAYO}
{\bkmkend AAAAAAAAYO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests the behavior of the default mode.}
 \par
}}
{\xe \v testThrowOnFailureEnvVar\:gtest_throw_on_failure_test::ThrowOnFailureTest}
{\xe \v gtest_throw_on_failure_test::ThrowOnFailureTest\:testThrowOnFailureEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_throw_on_failure_test.ThrowOnFailureTest.testThrowOnFailureEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAAAYP}
{\bkmkend AAAAAAAAYP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the GTEST_THROW_ON_FAILURE environment variable.}
 \par
}}
{\xe \v testThrowOnFailureFlag\:gtest_throw_on_failure_test::ThrowOnFailureTest}
{\xe \v gtest_throw_on_failure_test::ThrowOnFailureTest\:testThrowOnFailureFlag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_throw_on_failure_test.ThrowOnFailureTest.testThrowOnFailureFlag (  {\i self})}}
\par
{\bkmkstart AAAAAAAAYQ}
{\bkmkend AAAAAAAAYQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests using the --gtest_throw_on_failure flag.}
 \par
}}
{\xe \v testThrowOnFailureFlagOverridesEnvVar\:gtest_throw_on_failure_test::ThrowOnFailureTest}
{\xe \v gtest_throw_on_failure_test::ThrowOnFailureTest\:testThrowOnFailureFlagOverridesEnvVar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def gtest_throw_on_failure_test.ThrowOnFailureTest.testThrowOnFailureFlagOverridesEnvVar (  {\i self})}}
\par
{\bkmkstart AAAAAAAAYR}
{\bkmkend AAAAAAAAYR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Tests that --gtest_throw_on_failure overrides GTEST_THROW_ON_FAILURE.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_throw_on_failure_test.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ENPM808X::Timer Class Reference\par \pard\plain 
{\tc\tcl2 \v ENPM808X::Timer}
{\xe \v ENPM808X::Timer}
{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for timing a scope (Stopwatch) }}\par
{
{\f2 #include <profiler.h>}}\par
Collaboration diagram for ENPM808X::Timer:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_e_n_p_m808_x_1_1_timer__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Timer} (const char *name){\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b Stop} (){\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b ProfileResult} {\b profileResult}{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for timing a scope (Stopwatch) \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
include/{\b profiler.h}\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
app/{\b profiler.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::To Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::To}
{\xe \v testing::internal::To}
{\bkmkstart AAAAAAADYT}
{\bkmkend AAAAAAADYT}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b To} (bool *converted){\bkmkstart AAAAAAADYU}
{\bkmkend AAAAAAADYU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-port_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.Token Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.Token}
{\xe \v pump.Token}
{\bkmkstart AAAAAAABCD}
{\bkmkend AAAAAAABCD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start=None, end=None, value=None, token_type=None){\bkmkstart AAAAAAABCE}
{\bkmkend AAAAAAABCE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAABCF}
{\bkmkend AAAAAAABCF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b Clone} (self)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b start}{\bkmkstart AAAAAAABCG}
{\bkmkend AAAAAAABCG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b end}{\bkmkstart AAAAAAABCH}
{\bkmkend AAAAAAABCH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b value}{\bkmkstart AAAAAAABCI}
{\bkmkend AAAAAAABCI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b token_type}{\bkmkstart AAAAAAABCJ}
{\bkmkend AAAAAAABCJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Represents a token in a Pump source file.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v Clone\:pump::Token}
{\xe \v pump::Token\:Clone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def pump.Token.Clone (  {\i self})}}
\par
{\bkmkstart AAAAAAABCK}
{\bkmkend AAAAAAABCK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns a copy of self.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.tokenize.Token Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.tokenize.Token}
{\xe \v cpp.tokenize.Token}
{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
Inheritance diagram for cpp.tokenize.Token:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1tokenize_1_1_token__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.tokenize.Token:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1tokenize_1_1_token__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, token_type, name, start, end){\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b token_type}{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b name}{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b start}{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b end}{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b whence}{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Data container to represent a C++ token.\par
\par
Tokens can be identifiers, syntax char(s), constants, or\par
pre-processor directives.\par
\par
start contains the index of the first char of the token in the source\par
end contains the index of the last char of the token in the source\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/tokenize.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TraceInfo Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TraceInfo}
{\xe \v testing::internal::TraceInfo}
{\bkmkstart AAAAAAADYV}
{\bkmkend AAAAAAADYV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file}{\bkmkstart AAAAAAADYW}
{\bkmkend AAAAAAADYW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line}{\bkmkstart AAAAAAADYX}
{\bkmkend AAAAAAADYX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b message}{\bkmkstart AAAAAAADYY}
{\bkmkend AAAAAAADYY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TransformTupleValuesHelper< Tuple, Func, OutIter > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TransformTupleValuesHelper< Tuple, Func, OutIter >}
{\xe \v testing::internal::TransformTupleValuesHelper< Tuple, Func, OutIter >}
{\bkmkstart AAAAAAADYZ}
{\bkmkend AAAAAAADYZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static OutIter {\b Run} (Func f, const Tuple &t, OutIter out){\bkmkstart AAAAAAADZA}
{\bkmkend AAAAAAADZA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TrulyMatcher< Predicate > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TrulyMatcher< Predicate >}
{\xe \v testing::internal::TrulyMatcher< Predicate >}
{\bkmkstart AAAAAAADZB}
{\bkmkend AAAAAAADZB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TrulyMatcher} (Predicate pred){\bkmkstart AAAAAAADZC}
{\bkmkend AAAAAAADZC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T > bool {\b MatchAndExplain} (T &x, {\b MatchResultListener} *) const{\bkmkstart AAAAAAADZD}
{\bkmkend AAAAAAADZD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAADZE}
{\bkmkend AAAAAAADZE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAADZF}
{\bkmkend AAAAAAADZF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple<> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple<>}
{\xe \v std::tr1::tuple<>}
{\bkmkstart AAAAAAABDA}
{\bkmkend AAAAAAABDA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b tuple} (GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1, GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4, GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7, GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9){\bkmkstart AAAAAAABDB}
{\bkmkend AAAAAAABDB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b tuple} (const {\b tuple} &t){\bkmkstart AAAAAAABDC}
{\bkmkend AAAAAAABDC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<GTEST_10_TYPENAMES_(U) > {\b tuple} (const GTEST_10_TUPLE_(U)&t){\bkmkstart AAAAAAABDD}
{\bkmkend AAAAAAABDD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b tuple} & {\b operator=} (const {\b tuple} &t){\bkmkstart AAAAAAABDE}
{\bkmkend AAAAAAABDE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<GTEST_10_TYPENAMES_(U) > {\b tuple} & {\b operator=} (const GTEST_10_TUPLE_(U)&t){\bkmkstart AAAAAAABDF}
{\bkmkend AAAAAAABDF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<GTEST_10_TYPENAMES_(U) > GTEST_DECLARE_TUPLE_AS_FRIEND_ {\b tuple} & {\b CopyFrom} (const GTEST_10_TUPLE_(U)&t){\bkmkstart AAAAAAABDG}
{\bkmkend AAAAAAABDG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T0 {\b f0_}{\bkmkstart AAAAAAABDH}
{\bkmkend AAAAAAABDH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T1 {\b f1_}{\bkmkstart AAAAAAABDI}
{\bkmkend AAAAAAABDI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T2 {\b f2_}{\bkmkstart AAAAAAABDJ}
{\bkmkend AAAAAAABDJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T3 {\b f3_}{\bkmkstart AAAAAAABDK}
{\bkmkend AAAAAAABDK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T4 {\b f4_}{\bkmkstart AAAAAAABDL}
{\bkmkend AAAAAAABDL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T5 {\b f5_}{\bkmkstart AAAAAAABDM}
{\bkmkend AAAAAAABDM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T6 {\b f6_}{\bkmkstart AAAAAAABDN}
{\bkmkend AAAAAAABDN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T7 {\b f7_}{\bkmkstart AAAAAAABDO}
{\bkmkend AAAAAAABDO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T8 {\b f8_}{\bkmkstart AAAAAAABDP}
{\bkmkend AAAAAAABDP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

T9 {\b f9_}{\bkmkstart AAAAAAABDQ}
{\bkmkend AAAAAAABDQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<int k> class {\b gtest_internal::Get}{\bkmkstart AAAAAAABDR}
{\bkmkend AAAAAAABDR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple<> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple<>}
{\xe \v std::tr1::tuple<>}
{\bkmkstart AAAAAAABDS}
{\bkmkend AAAAAAABDS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b tuple} (const {\b tuple} &){\bkmkstart AAAAAAABDT}
{\bkmkend AAAAAAABDT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b tuple} & {\b operator=} (const {\b tuple} &){\bkmkstart AAAAAAABDU}
{\bkmkend AAAAAAABDU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_element< k, Tuple > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_element< k, Tuple >}
{\xe \v std::tr1::tuple_element< k, Tuple >}
{\bkmkstart AAAAAAABDV}
{\bkmkend AAAAAAABDV}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< Tuple > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< Tuple >}
{\xe \v std::tr1::tuple_size< Tuple >}
{\bkmkstart AAAAAAABDW}
{\bkmkend AAAAAAABDW}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_0_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_0_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_0_TUPLE_(T) >}
{\bkmkstart AAAAAAABDX}
{\bkmkend AAAAAAABDX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 0{\bkmkstart AAAAAAABDY}
{\bkmkend AAAAAAABDY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABDZ}
{\bkmkend AAAAAAABDZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 10{\bkmkstart AAAAAAABEA}
{\bkmkend AAAAAAABEA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_1_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_1_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_1_TUPLE_(T) >}
{\bkmkstart AAAAAAABEB}
{\bkmkend AAAAAAABEB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 1{\bkmkstart AAAAAAABEC}
{\bkmkend AAAAAAABEC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_2_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_2_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_2_TUPLE_(T) >}
{\bkmkstart AAAAAAABED}
{\bkmkend AAAAAAABED}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 2{\bkmkstart AAAAAAABEE}
{\bkmkend AAAAAAABEE}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_3_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_3_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_3_TUPLE_(T) >}
{\bkmkstart AAAAAAABEF}
{\bkmkend AAAAAAABEF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 3{\bkmkstart AAAAAAABEG}
{\bkmkend AAAAAAABEG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_4_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_4_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_4_TUPLE_(T) >}
{\bkmkstart AAAAAAABEH}
{\bkmkend AAAAAAABEH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 4{\bkmkstart AAAAAAABEI}
{\bkmkend AAAAAAABEI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_5_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_5_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_5_TUPLE_(T) >}
{\bkmkstart AAAAAAABEJ}
{\bkmkend AAAAAAABEJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 5{\bkmkstart AAAAAAABEK}
{\bkmkend AAAAAAABEK}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_6_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_6_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_6_TUPLE_(T) >}
{\bkmkstart AAAAAAABEL}
{\bkmkend AAAAAAABEL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 6{\bkmkstart AAAAAAABEM}
{\bkmkend AAAAAAABEM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_7_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_7_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_7_TUPLE_(T) >}
{\bkmkstart AAAAAAABEN}
{\bkmkend AAAAAAABEN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 7{\bkmkstart AAAAAAABEO}
{\bkmkend AAAAAAABEO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_8_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_8_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_8_TUPLE_(T) >}
{\bkmkstart AAAAAAABEP}
{\bkmkend AAAAAAABEP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 8{\bkmkstart AAAAAAABEQ}
{\bkmkend AAAAAAABEQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::tuple_size< GTEST_9_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::tuple_size< GTEST_9_TUPLE_(T) >}
{\xe \v std::tr1::tuple_size< GTEST_9_TUPLE_(T) >}
{\bkmkstart AAAAAAABER}
{\bkmkend AAAAAAABER}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const int {\b value} = 9{\bkmkstart AAAAAAABES}
{\bkmkend AAAAAAABES}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< kIndexValid, kIndex, Tuple > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< kIndexValid, kIndex, Tuple >}
{\xe \v std::tr1::gtest_internal::TupleElement< kIndexValid, kIndex, Tuple >}
{\bkmkstart AAAAAAABGL}
{\bkmkend AAAAAAABGL}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 0, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 0, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 0, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABGM}
{\bkmkend AAAAAAABGM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T0 {\b type}{\bkmkstart AAAAAAABGN}
{\bkmkend AAAAAAABGN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 1, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 1, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 1, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABGO}
{\bkmkend AAAAAAABGO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T1 {\b type}{\bkmkstart AAAAAAABGP}
{\bkmkend AAAAAAABGP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 2, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 2, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 2, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABGQ}
{\bkmkend AAAAAAABGQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T2 {\b type}{\bkmkstart AAAAAAABGR}
{\bkmkend AAAAAAABGR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 3, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 3, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 3, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABGS}
{\bkmkend AAAAAAABGS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T3 {\b type}{\bkmkstart AAAAAAABGT}
{\bkmkend AAAAAAABGT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 4, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 4, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 4, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABGU}
{\bkmkend AAAAAAABGU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T4 {\b type}{\bkmkstart AAAAAAABGV}
{\bkmkend AAAAAAABGV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 5, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 5, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 5, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABGW}
{\bkmkend AAAAAAABGW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T5 {\b type}{\bkmkstart AAAAAAABGX}
{\bkmkend AAAAAAABGX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 6, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 6, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 6, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABGY}
{\bkmkend AAAAAAABGY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T6 {\b type}{\bkmkstart AAAAAAABGZ}
{\bkmkend AAAAAAABGZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 7, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 7, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 7, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABHA}
{\bkmkend AAAAAAABHA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T7 {\b type}{\bkmkstart AAAAAAABHB}
{\bkmkend AAAAAAABHB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 8, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 8, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 8, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABHC}
{\bkmkend AAAAAAABHC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T8 {\b type}{\bkmkstart AAAAAAABHD}
{\bkmkend AAAAAAABHD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
std::tr1::gtest_internal::TupleElement< true, 9, GTEST_10_TUPLE_(T) > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v std::tr1::gtest_internal::TupleElement< true, 9, GTEST_10_TUPLE_(T) >}
{\xe \v std::tr1::gtest_internal::TupleElement< true, 9, GTEST_10_TUPLE_(T) >}
{\bkmkstart AAAAAAABHE}
{\bkmkend AAAAAAABHE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef T9 {\b type}{\bkmkstart AAAAAAABHF}
{\bkmkend AAAAAAABHF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-tuple.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, k9 >}
{\bkmkstart AAAAAAADZG}
{\bkmkend AAAAAAADZG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2), GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4), GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6), GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8), GMOCK_FIELD_TYPE_(Tuple, k9)> {\b type}{\bkmkstart AAAAAAADZH}
{\bkmkend AAAAAAADZH}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAADZI}
{\bkmkend AAAAAAADZI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADZJ}
{\bkmkend AAAAAAADZJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple {\b type}{\bkmkstart AAAAAAADZK}
{\bkmkend AAAAAAADZK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &){\bkmkstart AAAAAAADZL}
{\bkmkend AAAAAAADZL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, -1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADZM}
{\bkmkend AAAAAAADZM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0)> {\b type}{\bkmkstart AAAAAAADZN}
{\bkmkend AAAAAAADZN}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAADZO}
{\bkmkend AAAAAAADZO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, -1, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADZP}
{\bkmkend AAAAAAADZP}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1)> {\b type}{\bkmkstart AAAAAAADZQ}
{\bkmkend AAAAAAADZQ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAADZR}
{\bkmkend AAAAAAADZR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, -1, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADZS}
{\bkmkend AAAAAAADZS}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2)> {\b type}{\bkmkstart AAAAAAADZT}
{\bkmkend AAAAAAADZT}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAADZU}
{\bkmkend AAAAAAADZU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, -1, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADZV}
{\bkmkend AAAAAAADZV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2), GMOCK_FIELD_TYPE_(Tuple, k3)> {\b type}{\bkmkstart AAAAAAADZW}
{\bkmkend AAAAAAADZW}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAADZX}
{\bkmkend AAAAAAADZX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, -1, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAADZY}
{\bkmkend AAAAAAADZY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2), GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4)> {\b type}{\bkmkstart AAAAAAADZZ}
{\bkmkend AAAAAAADZZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAAEAA}
{\bkmkend AAAAAAAEAA}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, -1, -1, -1, -1 >}
{\bkmkstart AAAAAAAEAB}
{\bkmkend AAAAAAAEAB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2), GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4), GMOCK_FIELD_TYPE_(Tuple, k5)> {\b type}{\bkmkstart AAAAAAAEAC}
{\bkmkend AAAAAAAEAC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAAEAD}
{\bkmkend AAAAAAAEAD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, -1, -1, -1 >}
{\bkmkstart AAAAAAAEAE}
{\bkmkend AAAAAAAEAE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2), GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4), GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6)> {\b type}{\bkmkstart AAAAAAAEAF}
{\bkmkend AAAAAAAEAF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAAEAG}
{\bkmkend AAAAAAAEAG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, -1, -1 >}
{\bkmkstart AAAAAAAEAH}
{\bkmkend AAAAAAAEAH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2), GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4), GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6), GMOCK_FIELD_TYPE_(Tuple, k7)> {\b type}{\bkmkstart AAAAAAAEAI}
{\bkmkend AAAAAAAEAI}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAAEAJ}
{\bkmkend AAAAAAAEAJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1 >}
{\xe \v testing::internal::TupleFields< Tuple, k0, k1, k2, k3, k4, k5, k6, k7, k8, -1 >}
{\bkmkstart AAAAAAAEAK}
{\bkmkend AAAAAAAEAK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::testing::tuple< GMOCK_FIELD_TYPE_(Tuple, k0), GMOCK_FIELD_TYPE_(Tuple, k1), GMOCK_FIELD_TYPE_(Tuple, k2), GMOCK_FIELD_TYPE_(Tuple, k3), GMOCK_FIELD_TYPE_(Tuple, k4), GMOCK_FIELD_TYPE_(Tuple, k5), GMOCK_FIELD_TYPE_(Tuple, k6), GMOCK_FIELD_TYPE_(Tuple, k7), GMOCK_FIELD_TYPE_(Tuple, k8)> {\b type}{\bkmkstart AAAAAAAEAL}
{\bkmkend AAAAAAAEAL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static type {\b GetSelectedFields} (const Tuple &t){\bkmkstart AAAAAAAEAM}
{\bkmkend AAAAAAAEAM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TuplePolicy< TupleT > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TuplePolicy< TupleT >}
{\xe \v testing::internal::TuplePolicy< TupleT >}
{\bkmkstart AAAAAAAEAN}
{\bkmkend AAAAAAAEAN}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TuplePrefix< N > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TuplePrefix< N >}
{\xe \v testing::internal::TuplePrefix< N >}
{\bkmkstart AAAAAAAEAO}
{\bkmkend AAAAAAAEAO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcherTuple , typename ValueTuple > static bool {\b Matches} (const {\b MatcherTuple} &matcher_tuple, const ValueTuple &value_tuple){\bkmkstart AAAAAAAEAP}
{\bkmkend AAAAAAAEAP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcherTuple , typename ValueTuple > static void {\b ExplainMatchFailuresTo} (const {\b MatcherTuple} &matchers, const ValueTuple &values, ::std::ostream *os){\bkmkstart AAAAAAAEAQ}
{\bkmkend AAAAAAAEAQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TuplePrefix< 0 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TuplePrefix< 0 >}
{\xe \v testing::internal::TuplePrefix< 0 >}
{\bkmkstart AAAAAAAEAR}
{\bkmkend AAAAAAAEAR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcherTuple , typename ValueTuple > static bool {\b Matches} (const {\b MatcherTuple} &, const ValueTuple &){\bkmkstart AAAAAAAEAS}
{\bkmkend AAAAAAAEAS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename MatcherTuple , typename ValueTuple > static void {\b ExplainMatchFailuresTo} (const {\b MatcherTuple} &, const ValueTuple &, ::std::ostream *){\bkmkstart AAAAAAAEAT}
{\bkmkend AAAAAAAEAT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Type Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Type}
{\xe \v cpp.ast.Type}
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
Inheritance diagram for cpp.ast.Type:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_type__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Type:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_type__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b __init__} (self, start, end, name, templated_types, modifiers, reference, pointer, array)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAAQH}
{\bkmkend AAAAAAAAQH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDeclaration} (self){\bkmkstart AAAAAAAAQI}
{\bkmkend AAAAAAAAQI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDefinition} (self){\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsExportable} (self){\bkmkstart AAAAAAAAQK}
{\bkmkend AAAAAAAAQK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b templated_types}{\bkmkstart AAAAAAAAQL}
{\bkmkend AAAAAAAAQL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b name}{\bkmkstart AAAAAAAAQM}
{\bkmkend AAAAAAAAQM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b modifiers}{\bkmkstart AAAAAAAAQN}
{\bkmkend AAAAAAAAQN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b reference}{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b pointer}{\bkmkstart AAAAAAAAQP}
{\bkmkend AAAAAAAAQP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b array}{\bkmkstart AAAAAAAAQQ}
{\bkmkend AAAAAAAAQQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Type used for any variable (eg class, primitive, struct, etc).}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:cpp::ast::Type}
{\xe \v cpp::ast::Type\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.Type.__init__ (  {\i self},   {\i start},   {\i end},   {\i name},   {\i templated_types},   {\i modifiers},   {\i reference},   {\i pointer},   {\i array})}}
\par
{\bkmkstart AAAAAAAAQR}
{\bkmkend AAAAAAAAQR}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Args:\par
  name: str name of main type\par
  templated_types: [Class (Type?)] template type info between <>\par
  modifiers: [str] type modifiers (keywords) eg, const, mutable, etc.\par
  reference, pointer, array: bools\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Type< T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Type< T >}
{\xe \v testing::gmock_matchers_test::Type< T >}
{\bkmkstart AAAAAAACET}
{\bkmkend AAAAAAACET}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b IsTypeOf} (const T &){\bkmkstart AAAAAAACEU}
{\bkmkend AAAAAAACEU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename T2 > static void {\b IsTypeOf} (T2 v){\bkmkstart AAAAAAACEV}
{\bkmkend AAAAAAACEV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::type_equals< T1, T2 > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::type_equals< T1, T2 >}
{\xe \v testing::internal::type_equals< T1, T2 >}
{\bkmkstart AAAAAAAEAU}
{\bkmkend AAAAAAAEAU}
Inheritance diagram for testing::internal::type_equals< T1, T2 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1type__equals__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::type_equals< T1, T2 >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1type__equals__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::type_equals< T, T > Struct Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::type_equals< T, T >}
{\xe \v testing::internal::type_equals< T, T >}
{\bkmkstart AAAAAAAEAV}
{\bkmkend AAAAAAAEAV}
Inheritance diagram for testing::internal::type_equals< T, T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1type__equals_3_01_t_00_01_t_01_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::type_equals< T, T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structtesting_1_1internal_1_1type__equals_3_01_t_00_01_t_01_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/internal/gmock-internal-utils.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.TypeConverter Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.TypeConverter}
{\xe \v cpp.ast.TypeConverter}
{\bkmkstart AAAAAAAAQS}
{\bkmkend AAAAAAAAQS}
Inheritance diagram for cpp.ast.TypeConverter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_type_converter__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.TypeConverter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_type_converter__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, namespace_stack){\bkmkstart AAAAAAAAQT}
{\bkmkend AAAAAAAAQT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b ToType} (self, tokens)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b DeclarationToParts} (self, parts, needs_name_removed){\bkmkstart AAAAAAAAQU}
{\bkmkend AAAAAAAAQU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b ToParameters} (self, tokens){\bkmkstart AAAAAAAAQV}
{\bkmkend AAAAAAAAQV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b CreateReturnType} (self, return_type_seq){\bkmkstart AAAAAAAAQW}
{\bkmkend AAAAAAAAQW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b GetTemplateIndices} (self, names){\bkmkstart AAAAAAAAQX}
{\bkmkend AAAAAAAAQX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b namespace_stack}{\bkmkstart AAAAAAAAQY}
{\bkmkend AAAAAAAAQY}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ToType\:cpp::ast::TypeConverter}
{\xe \v cpp::ast::TypeConverter\:ToType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.TypeConverter.ToType (  {\i self},   {\i tokens})}}
\par
{\bkmkstart AAAAAAAAQZ}
{\bkmkend AAAAAAAAQZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Convert [Token,...] to [Class(...), ] useful for base classes.\par
For example, code like class Foo : public Bar<x, y> \{ ... \};\par
the "Bar<x, y>" portion gets converted to an AST.\par
\par
Returns:\par
  [Class(...), ...]\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Typedef Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Typedef}
{\xe \v cpp.ast.Typedef}
{\bkmkstart AAAAAAAARA}
{\bkmkend AAAAAAAARA}
Inheritance diagram for cpp.ast.Typedef:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_typedef__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Typedef:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_typedef__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, alias, namespace){\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsDefinition} (self){\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b IsExportable} (self){\bkmkstart AAAAAAAARD}
{\bkmkend AAAAAAAARD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Requires} (self, node){\bkmkstart AAAAAAAARE}
{\bkmkend AAAAAAAARE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAARF}
{\bkmkend AAAAAAAARF}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b alias}{\bkmkstart AAAAAAAARG}
{\bkmkend AAAAAAAARG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypedExpectation< F > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypedExpectation< F >}
{\xe \v testing::internal::TypedExpectation< F >}
{\bkmkstart AAAAAAAEAW}
{\bkmkend AAAAAAAEAW}
Inheritance diagram for testing::internal::TypedExpectation< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_typed_expectation__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::TypedExpectation< F >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_typed_expectation__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::ArgumentTuple {\b ArgumentTuple}{\bkmkstart AAAAAAAEAX}
{\bkmkend AAAAAAAEAX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::ArgumentMatcherTuple {\b ArgumentMatcherTuple}{\bkmkstart AAAAAAAEAY}
{\bkmkend AAAAAAAEAY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b Function}< F >::Result {\b Result}{\bkmkstart AAAAAAAEAZ}
{\bkmkend AAAAAAAEAZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} ({\b FunctionMockerBase}< F > *owner, const char *a_file, int a_line, const string &a_source_text, const ArgumentMatcherTuple &m){\bkmkstart AAAAAAAEBA}
{\bkmkend AAAAAAAEBA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b With} (const {\b Matcher}< const ArgumentTuple &> &m){\bkmkstart AAAAAAAEBB}
{\bkmkend AAAAAAAEBB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b Times} (const {\b Cardinality} &a_cardinality){\bkmkstart AAAAAAAEBC}
{\bkmkend AAAAAAAEBC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b Times} (int n){\bkmkstart AAAAAAAEBD}
{\bkmkend AAAAAAAEBD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b InSequence} (const {\b Sequence} &s){\bkmkstart AAAAAAAEBE}
{\bkmkend AAAAAAAEBE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b InSequence} (const {\b Sequence} &s1, const {\b Sequence} &s2){\bkmkstart AAAAAAAEBF}
{\bkmkend AAAAAAAEBF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b InSequence} (const {\b Sequence} &s1, const {\b Sequence} &s2, const {\b Sequence} &s3){\bkmkstart AAAAAAAEBG}
{\bkmkend AAAAAAAEBG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b InSequence} (const {\b Sequence} &s1, const {\b Sequence} &s2, const {\b Sequence} &s3, const {\b Sequence} &s4){\bkmkstart AAAAAAAEBH}
{\bkmkend AAAAAAAEBH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b InSequence} (const {\b Sequence} &s1, const {\b Sequence} &s2, const {\b Sequence} &s3, const {\b Sequence} &s4, const {\b Sequence} &s5){\bkmkstart AAAAAAAEBI}
{\bkmkend AAAAAAAEBI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b After} (const {\b ExpectationSet} &s){\bkmkstart AAAAAAAEBJ}
{\bkmkend AAAAAAAEBJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b After} (const {\b ExpectationSet} &s1, const {\b ExpectationSet} &s2){\bkmkstart AAAAAAAEBK}
{\bkmkend AAAAAAAEBK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b After} (const {\b ExpectationSet} &s1, const {\b ExpectationSet} &s2, const {\b ExpectationSet} &s3){\bkmkstart AAAAAAAEBL}
{\bkmkend AAAAAAAEBL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b After} (const {\b ExpectationSet} &s1, const {\b ExpectationSet} &s2, const {\b ExpectationSet} &s3, const {\b ExpectationSet} &s4){\bkmkstart AAAAAAAEBM}
{\bkmkend AAAAAAAEBM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b After} (const {\b ExpectationSet} &s1, const {\b ExpectationSet} &s2, const {\b ExpectationSet} &s3, const {\b ExpectationSet} &s4, const {\b ExpectationSet} &s5){\bkmkstart AAAAAAAEBN}
{\bkmkend AAAAAAAEBN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b WillOnce} (const {\b Action}< F > &action){\bkmkstart AAAAAAAEBO}
{\bkmkend AAAAAAAEBO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b WillRepeatedly} (const {\b Action}< F > &action){\bkmkstart AAAAAAAEBP}
{\bkmkend AAAAAAAEBP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TypedExpectation} & {\b RetiresOnSaturation} (){\bkmkstart AAAAAAAEBQ}
{\bkmkend AAAAAAAEBQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const ArgumentMatcherTuple & {\b matchers} () const{\bkmkstart AAAAAAAEBR}
{\bkmkend AAAAAAAEBR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b Matcher}< const ArgumentTuple & > & {\b extra_matcher} () const{\bkmkstart AAAAAAAEBS}
{\bkmkend AAAAAAAEBS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b Action}< F > & {\b repeated_action} () const{\bkmkstart AAAAAAAEBT}
{\bkmkend AAAAAAAEBT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b MaybeDescribeExtraMatcherTo} (::std::ostream *os){\bkmkstart AAAAAAAEBU}
{\bkmkend AAAAAAAEBU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Function > class {\b FunctionMockerBase}{\bkmkstart AAAAAAAEBV}
{\bkmkend AAAAAAAEBV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypedTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypedTest< T >}
{\xe \v TypedTest< T >}
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
Inheritance diagram for TypedTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for TypedTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_typed_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeIdHelper< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeIdHelper< T >}
{\xe \v testing::internal::TypeIdHelper< T >}
{\bkmkstart AAAAAAAEBW}
{\bkmkend AAAAAAAEBW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b dummy_} = false{\bkmkstart AAAAAAAEBX}
{\bkmkend AAAAAAAEBX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-internal.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
TypeParamTest< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v TypeParamTest< T >}
{\xe \v TypeParamTest< T >}
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
Inheritance diagram for TypeParamTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_type_param_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for TypeParamTest< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_type_param_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal2::TypeWithoutFormatter< T, kTypeKind > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal2::TypeWithoutFormatter< T, kTypeKind >}
{\xe \v testing::internal2::TypeWithoutFormatter< T, kTypeKind >}
{\bkmkstart AAAAAAAEIW}
{\bkmkend AAAAAAAEIW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintValue} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAAEIX}
{\bkmkend AAAAAAAEIX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal2::TypeWithoutFormatter< T, kConvertibleToInteger > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal2::TypeWithoutFormatter< T, kConvertibleToInteger >}
{\xe \v testing::internal2::TypeWithoutFormatter< T, kConvertibleToInteger >}
{\bkmkstart AAAAAAAEIY}
{\bkmkend AAAAAAAEIY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintValue} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAAEIZ}
{\bkmkend AAAAAAAEIZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal2::TypeWithoutFormatter< T, kProtobuf > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal2::TypeWithoutFormatter< T, kProtobuf >}
{\xe \v testing::internal2::TypeWithoutFormatter< T, kProtobuf >}
{\bkmkstart AAAAAAAEJA}
{\bkmkend AAAAAAAEJA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b PrintValue} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAAEJB}
{\bkmkend AAAAAAAEJB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeWithSize< size > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeWithSize< size >}
{\xe \v testing::internal::TypeWithSize< size >}
{\bkmkstart AAAAAAAEBY}
{\bkmkend AAAAAAAEBY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef void {\b UInt}{\bkmkstart AAAAAAAEBZ}
{\bkmkend AAAAAAAEBZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeWithSize< 4 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeWithSize< 4 >}
{\xe \v testing::internal::TypeWithSize< 4 >}
{\bkmkstart AAAAAAAECA}
{\bkmkend AAAAAAAECA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef int {\b Int}{\bkmkstart AAAAAAAECB}
{\bkmkend AAAAAAAECB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef unsigned int {\b UInt}{\bkmkstart AAAAAAAECC}
{\bkmkend AAAAAAAECC}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::TypeWithSize< 8 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::TypeWithSize< 8 >}
{\xe \v testing::internal::TypeWithSize< 8 >}
{\bkmkstart AAAAAAAECD}
{\bkmkend AAAAAAAECD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef long long {\b Int}{\bkmkstart AAAAAAAECE}
{\bkmkend AAAAAAAECE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef unsigned long long {\b UInt}{\bkmkstart AAAAAAAECF}
{\bkmkend AAAAAAAECF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/internal/gtest-port.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::UnaryConstructorClass Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::UnaryConstructorClass}
{\xe \v testing::gmock_generated_actions_test::UnaryConstructorClass}
{\bkmkstart AAAAAAABXN}
{\bkmkend AAAAAAABXN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UnaryConstructorClass} (int value){\bkmkstart AAAAAAABXO}
{\bkmkend AAAAAAABXO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value_}{\bkmkstart AAAAAAABXP}
{\bkmkend AAAAAAABXP}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::UnaryFunctor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::UnaryFunctor}
{\xe \v testing::gmock_more_actions_test::UnaryFunctor}
{\bkmkstart AAAAAAACFY}
{\bkmkend AAAAAAACFY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (bool x){\bkmkstart AAAAAAACFZ}
{\bkmkend AAAAAAACFZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_generated_actions_test::UnaryFunctor Struct Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_generated_actions_test::UnaryFunctor}
{\xe \v testing::gmock_generated_actions_test::UnaryFunctor}
{\bkmkstart AAAAAAABXQ}
{\bkmkend AAAAAAABXQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b operator()} (bool x){\bkmkstart AAAAAAABXR}
{\bkmkend AAAAAAABXR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this struct was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-generated-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Uncopyable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Uncopyable}
{\xe \v testing::gmock_matchers_test::Uncopyable}
{\bkmkstart AAAAAAACEW}
{\bkmkend AAAAAAACEW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Uncopyable} (int a_value){\bkmkstart AAAAAAACEX}
{\bkmkend AAAAAAACEX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b value} () const{\bkmkstart AAAAAAACEY}
{\bkmkend AAAAAAACEY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_value} (int i){\bkmkstart AAAAAAACEZ}
{\bkmkend AAAAAAACEZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Union Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Union}
{\xe \v cpp.ast.Union}
{\bkmkstart AAAAAAAARH}
{\bkmkend AAAAAAAARH}
Inheritance diagram for cpp.ast.Union:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_union__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Union:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_union__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::UnitTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::UnitTest}
{\xe \v testing::UnitTest}
{\bkmkstart AAAAAAABVO}
{\bkmkend AAAAAAABVO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b Run} () GTEST_MUST_USE_RESULT_{\bkmkstart AAAAAAABVP}
{\bkmkend AAAAAAABVP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b original_working_dir} () const{\bkmkstart AAAAAAABVQ}
{\bkmkend AAAAAAABVQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestCase} * {\b current_test_case} () const GTEST_LOCK_EXCLUDED_(mutex_){\bkmkstart AAAAAAABVR}
{\bkmkend AAAAAAABVR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestInfo} * {\b current_test_info} () const GTEST_LOCK_EXCLUDED_(mutex_){\bkmkstart AAAAAAABVS}
{\bkmkend AAAAAAABVS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b random_seed} () const{\bkmkstart AAAAAAABVT}
{\bkmkend AAAAAAABVT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_case_count} () const{\bkmkstart AAAAAAABVU}
{\bkmkend AAAAAAABVU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_case_count} () const{\bkmkstart AAAAAAABVV}
{\bkmkend AAAAAAABVV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_case_count} () const{\bkmkstart AAAAAAABVW}
{\bkmkend AAAAAAABVW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_case_to_run_count} () const{\bkmkstart AAAAAAABVX}
{\bkmkend AAAAAAABVX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_count} () const{\bkmkstart AAAAAAABVY}
{\bkmkend AAAAAAABVY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_count} () const{\bkmkstart AAAAAAABVZ}
{\bkmkend AAAAAAABVZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_disabled_test_count} () const{\bkmkstart AAAAAAABWA}
{\bkmkend AAAAAAABWA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b disabled_test_count} () const{\bkmkstart AAAAAAABWB}
{\bkmkend AAAAAAABWB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_test_count} () const{\bkmkstart AAAAAAABWC}
{\bkmkend AAAAAAABWC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_count} () const{\bkmkstart AAAAAAABWD}
{\bkmkend AAAAAAABWD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_to_run_count} () const{\bkmkstart AAAAAAABWE}
{\bkmkend AAAAAAABWE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b start_timestamp} () const{\bkmkstart AAAAAAABWF}
{\bkmkend AAAAAAABWF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAABWG}
{\bkmkend AAAAAAABWG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAABWH}
{\bkmkend AAAAAAABWH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAABWI}
{\bkmkend AAAAAAABWI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestCase} * {\b GetTestCase} (int i) const{\bkmkstart AAAAAAABWJ}
{\bkmkend AAAAAAABWJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} & {\b ad_hoc_test_result} () const{\bkmkstart AAAAAAABWK}
{\bkmkend AAAAAAABWK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListeners} & {\b listeners} (){\bkmkstart AAAAAAABWL}
{\bkmkend AAAAAAABWL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b UnitTest} * {\b GetInstance} (){\bkmkstart AAAAAAABWM}
{\bkmkend AAAAAAABWM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b Test}{\bkmkstart AAAAAAABWN}
{\bkmkend AAAAAAABWN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::AssertHelper}{\bkmkstart AAAAAAABWO}
{\bkmkend AAAAAAABWO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::ScopedTrace}{\bkmkstart AAAAAAABWP}
{\bkmkend AAAAAAABWP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::StreamingListenerTest}{\bkmkstart AAAAAAABWQ}
{\bkmkend AAAAAAABWQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b internal::UnitTestRecordPropertyTestHelper}{\bkmkstart AAAAAAABWR}
{\bkmkend AAAAAAABWR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Environment} * {\b AddGlobalTestEnvironment} ({\b Environment} *env){\bkmkstart AAAAAAABWS}
{\bkmkend AAAAAAABWS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::UnitTestImpl} * {\b internal::GetUnitTestImpl} (){\bkmkstart AAAAAAABWT}
{\bkmkend AAAAAAABWT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b internal::ReportFailureInUnknownLocation} (TestPartResult::Type result_type, const std::string &message){\bkmkstart AAAAAAABWU}
{\bkmkend AAAAAAABWU}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestHelper}
{\xe \v testing::internal::UnitTestHelper}
{\bkmkstart AAAAAAAECG}
{\bkmkend AAAAAAAECG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b TestCase} const  ** {\b GetSortedTestCases} (){\bkmkstart AAAAAAAECH}
{\bkmkend AAAAAAAECH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static const {\b TestCase} * {\b FindTestCase} (const char *name){\bkmkstart AAAAAAAECI}
{\bkmkend AAAAAAAECI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b TestInfo} const  ** {\b GetSortedTests} (const {\b TestCase} *test_case){\bkmkstart AAAAAAAECJ}
{\bkmkend AAAAAAAECJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-unittest-api_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestImpl Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestImpl}
{\xe \v testing::internal::UnitTestImpl}
{\bkmkstart AAAAAAAECK}
{\bkmkend AAAAAAAECK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b ReactionToSharding} \{ {\b HONOR_SHARDING_PROTOCOL}, 
{\b IGNORE_SHARDING_PROTOCOL}
 \}{\bkmkstart AAAAAAAECL}
{\bkmkend AAAAAAAECL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UnitTestImpl} ({\b UnitTest} *parent){\bkmkstart AAAAAAAECM}
{\bkmkend AAAAAAAECM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestPartResultReporterInterface} * {\b GetGlobalTestPartResultReporter} (){\bkmkstart AAAAAAAECN}
{\bkmkend AAAAAAAECN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetGlobalTestPartResultReporter} ({\b TestPartResultReporterInterface} *reporter){\bkmkstart AAAAAAAECO}
{\bkmkend AAAAAAAECO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestPartResultReporterInterface} * {\b GetTestPartResultReporterForCurrentThread} (){\bkmkstart AAAAAAAECP}
{\bkmkend AAAAAAAECP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetTestPartResultReporterForCurrentThread} ({\b TestPartResultReporterInterface} *reporter){\bkmkstart AAAAAAAECQ}
{\bkmkend AAAAAAAECQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_case_count} () const{\bkmkstart AAAAAAAECR}
{\bkmkend AAAAAAAECR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_case_count} () const{\bkmkstart AAAAAAAECS}
{\bkmkend AAAAAAAECS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_case_count} () const{\bkmkstart AAAAAAAECT}
{\bkmkend AAAAAAAECT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_case_to_run_count} () const{\bkmkstart AAAAAAAECU}
{\bkmkend AAAAAAAECU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b successful_test_count} () const{\bkmkstart AAAAAAAECV}
{\bkmkend AAAAAAAECV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b failed_test_count} () const{\bkmkstart AAAAAAAECW}
{\bkmkend AAAAAAAECW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_disabled_test_count} () const{\bkmkstart AAAAAAAECX}
{\bkmkend AAAAAAAECX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b disabled_test_count} () const{\bkmkstart AAAAAAAECY}
{\bkmkend AAAAAAAECY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b reportable_test_count} () const{\bkmkstart AAAAAAAECZ}
{\bkmkend AAAAAAAECZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b total_test_count} () const{\bkmkstart AAAAAAAEDA}
{\bkmkend AAAAAAAEDA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b test_to_run_count} () const{\bkmkstart AAAAAAAEDB}
{\bkmkend AAAAAAAEDB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b start_timestamp} () const{\bkmkstart AAAAAAAEDC}
{\bkmkend AAAAAAAEDC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

TimeInMillis {\b elapsed_time} () const{\bkmkstart AAAAAAAEDD}
{\bkmkend AAAAAAAEDD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Passed} () const{\bkmkstart AAAAAAAEDE}
{\bkmkend AAAAAAAEDE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b Failed} () const{\bkmkstart AAAAAAAEDF}
{\bkmkend AAAAAAAEDF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestCase} * {\b GetTestCase} (int i) const{\bkmkstart AAAAAAAEDG}
{\bkmkend AAAAAAAEDG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestCase} * {\b GetMutableTestCase} (int i){\bkmkstart AAAAAAAEDH}
{\bkmkend AAAAAAAEDH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestEventListeners} * {\b listeners} (){\bkmkstart AAAAAAAEDI}
{\bkmkend AAAAAAAEDI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestResult} * {\b current_test_result} (){\bkmkstart AAAAAAAEDJ}
{\bkmkend AAAAAAAEDJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestResult} * {\b ad_hoc_test_result} () const{\bkmkstart AAAAAAAEDK}
{\bkmkend AAAAAAAEDK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_os_stack_trace_getter} ({\b OsStackTraceGetterInterface} *getter){\bkmkstart AAAAAAAEDL}
{\bkmkend AAAAAAAEDL}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b OsStackTraceGetterInterface} * {\b os_stack_trace_getter} (){\bkmkstart AAAAAAAEDM}
{\bkmkend AAAAAAAEDM}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b CurrentOsStackTraceExceptTop} (int skip_count) GTEST_NO_INLINE_{\bkmkstart AAAAAAAEDN}
{\bkmkend AAAAAAAEDN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestCase} * {\b GetTestCase} (const char *test_case_name, const char *type_param, Test::SetUpTestCaseFunc set_up_tc, Test::TearDownTestCaseFunc tear_down_tc){\bkmkstart AAAAAAAEDO}
{\bkmkend AAAAAAAEDO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AddTestInfo} (Test::SetUpTestCaseFunc set_up_tc, Test::TearDownTestCaseFunc tear_down_tc, {\b TestInfo} *test_info){\bkmkstart AAAAAAAEDP}
{\bkmkend AAAAAAAEDP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_current_test_case} ({\b TestCase} *a_current_test_case){\bkmkstart AAAAAAAEDQ}
{\bkmkend AAAAAAAEDQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b set_current_test_info} ({\b TestInfo} *a_current_test_info){\bkmkstart AAAAAAAEDR}
{\bkmkend AAAAAAAEDR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RegisterParameterizedTests} (){\bkmkstart AAAAAAAEDS}
{\bkmkend AAAAAAAEDS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b RunAllTests} (){\bkmkstart AAAAAAAEDT}
{\bkmkend AAAAAAAEDT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ClearNonAdHocTestResult} (){\bkmkstart AAAAAAAEDU}
{\bkmkend AAAAAAAEDU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ClearAdHocTestResult} (){\bkmkstart AAAAAAAEDV}
{\bkmkend AAAAAAAEDV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RecordProperty} (const {\b TestProperty} &test_property){\bkmkstart AAAAAAAEDW}
{\bkmkend AAAAAAAEDW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b FilterTests} (ReactionToSharding shard_tests){\bkmkstart AAAAAAAEDX}
{\bkmkend AAAAAAAEDX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ListTestsMatchingFilter} (){\bkmkstart AAAAAAAEDY}
{\bkmkend AAAAAAAEDY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestCase} * {\b current_test_case} () const{\bkmkstart AAAAAAAEDZ}
{\bkmkend AAAAAAAEDZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TestInfo} * {\b current_test_info} (){\bkmkstart AAAAAAAEEA}
{\bkmkend AAAAAAAEEA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b TestInfo} * {\b current_test_info} () const{\bkmkstart AAAAAAAEEB}
{\bkmkend AAAAAAAEEB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::vector< {\b Environment} * > & {\b environments} (){\bkmkstart AAAAAAAEEC}
{\bkmkend AAAAAAAEEC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::vector< {\b TraceInfo} > & {\b gtest_trace_stack} (){\bkmkstart AAAAAAAEED}
{\bkmkend AAAAAAAEED}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const std::vector< {\b TraceInfo} > & {\b gtest_trace_stack} () const{\bkmkstart AAAAAAAEEE}
{\bkmkend AAAAAAAEEE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ConfigureXmlOutput} (){\bkmkstart AAAAAAAEEF}
{\bkmkend AAAAAAAEEF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b PostFlagParsingInit} (){\bkmkstart AAAAAAAEEG}
{\bkmkend AAAAAAAEEG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b random_seed} () const{\bkmkstart AAAAAAAEEH}
{\bkmkend AAAAAAAEEH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b internal::Random} * {\b random} (){\bkmkstart AAAAAAAEEI}
{\bkmkend AAAAAAAEEI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ShuffleTests} (){\bkmkstart AAAAAAAEEJ}
{\bkmkend AAAAAAAEEJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b UnshuffleTests} (){\bkmkstart AAAAAAAEEK}
{\bkmkend AAAAAAAEEK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b catch_exceptions} () const{\bkmkstart AAAAAAAEEL}
{\bkmkend AAAAAAAEEL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Friends\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

class {\b ::testing::UnitTest}{\bkmkstart AAAAAAAEEM}
{\bkmkend AAAAAAAEEM}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestOptions Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestOptions}
{\xe \v testing::internal::UnitTestOptions}
{\bkmkstart AAAAAAAEEN}
{\bkmkend AAAAAAAEEN}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b GetOutputFormat} (){\bkmkstart AAAAAAAEEO}
{\bkmkend AAAAAAAEEO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static std::string {\b GetAbsolutePathToOutputFile} (){\bkmkstart AAAAAAAEEP}
{\bkmkend AAAAAAAEEP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b PatternMatchesString} (const char *pattern, const char *str){\bkmkstart AAAAAAAEEQ}
{\bkmkend AAAAAAAEEQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b FilterMatchesTest} (const std::string &test_case_name, const std::string &test_name){\bkmkstart AAAAAAAEER}
{\bkmkend AAAAAAAEER}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static bool {\b MatchesFilter} (const std::string &name, const char *filter){\bkmkstart AAAAAAAEES}
{\bkmkend AAAAAAAEES}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest-internal-inl.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnitTestRecordPropertyTestHelper Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnitTestRecordPropertyTestHelper}
{\xe \v testing::internal::UnitTestRecordPropertyTestHelper}
{\bkmkstart AAAAAAAEET}
{\bkmkend AAAAAAAEET}
Inheritance diagram for testing::internal::UnitTestRecordPropertyTestHelper:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_unit_test_record_property_test_helper__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::UnitTestRecordPropertyTestHelper:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_unit_test_record_property_test_helper__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b UnitTestRecordProperty} (const char *key, const std::string &value){\bkmkstart AAAAAAAEEU}
{\bkmkend AAAAAAAEEU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UnitTest} {\b unit_test_}{\bkmkstart AAAAAAAEEV}
{\bkmkend AAAAAAAEEV}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_unittest.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< T >}
{\xe \v testing::internal::UniversalPrinter< T >}
{\bkmkstart AAAAAAAEEW}
{\bkmkend AAAAAAAEEW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAAEEX}
{\bkmkend AAAAAAAEEX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< T & >}
{\xe \v testing::internal::UniversalPrinter< T & >}
{\bkmkstart AAAAAAAEEY}
{\bkmkend AAAAAAAEEY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAAEEZ}
{\bkmkend AAAAAAAEEZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalPrinter< T[N]> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalPrinter< T[N]>}
{\xe \v testing::internal::UniversalPrinter< T[N]>}
{\bkmkstart AAAAAAAEFA}
{\bkmkend AAAAAAAEFA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T(&a)[N], ::std::ostream *os){\bkmkstart AAAAAAAEFB}
{\bkmkend AAAAAAAEFB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< T >}
{\xe \v testing::internal::UniversalTersePrinter< T >}
{\bkmkstart AAAAAAAEFC}
{\bkmkend AAAAAAAEFC}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAAEFD}
{\bkmkend AAAAAAAEFD}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< char * > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< char * >}
{\xe \v testing::internal::UniversalTersePrinter< char * >}
{\bkmkstart AAAAAAAEFE}
{\bkmkend AAAAAAAEFE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (char *str, ::std::ostream *os){\bkmkstart AAAAAAAEFF}
{\bkmkend AAAAAAAEFF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< const char * > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< const char * >}
{\xe \v testing::internal::UniversalTersePrinter< const char * >}
{\bkmkstart AAAAAAAEFG}
{\bkmkend AAAAAAAEFG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const char *str, ::std::ostream *os){\bkmkstart AAAAAAAEFH}
{\bkmkend AAAAAAAEFH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< T & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< T & >}
{\xe \v testing::internal::UniversalTersePrinter< T & >}
{\bkmkstart AAAAAAAEFI}
{\bkmkend AAAAAAAEFI}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T &value, ::std::ostream *os){\bkmkstart AAAAAAAEFJ}
{\bkmkend AAAAAAAEFJ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< T[N]> Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< T[N]>}
{\xe \v testing::internal::UniversalTersePrinter< T[N]>}
{\bkmkstart AAAAAAAEFK}
{\bkmkend AAAAAAAEFK}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (const T(&value)[N], ::std::ostream *os){\bkmkstart AAAAAAAEFL}
{\bkmkend AAAAAAAEFL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UniversalTersePrinter< wchar_t * > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UniversalTersePrinter< wchar_t * >}
{\xe \v testing::internal::UniversalTersePrinter< wchar_t * >}
{\bkmkstart AAAAAAAEFM}
{\bkmkend AAAAAAAEFM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static void {\b Print} (wchar_t *str, ::std::ostream *os){\bkmkstart AAAAAAAEFN}
{\bkmkend AAAAAAAEFN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/include/gtest/gtest-printers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnorderedElementsAreArrayMatcher< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnorderedElementsAreArrayMatcher< T >}
{\xe \v testing::internal::UnorderedElementsAreArrayMatcher< T >}
{\bkmkstart AAAAAAAEFO}
{\bkmkend AAAAAAAEFO}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Iter > {\b UnorderedElementsAreArrayMatcher} (Iter first, Iter last){\bkmkstart AAAAAAAEFP}
{\bkmkend AAAAAAAEFP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAAEFQ}
{\bkmkend AAAAAAAEFQ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnorderedElementsAreMatcher< MatcherTuple > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnorderedElementsAreMatcher< MatcherTuple >}
{\xe \v testing::internal::UnorderedElementsAreMatcher< MatcherTuple >}
{\bkmkstart AAAAAAAEFR}
{\bkmkend AAAAAAAEFR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UnorderedElementsAreMatcher} (const {\b MatcherTuple} &args){\bkmkstart AAAAAAAEFS}
{\bkmkend AAAAAAAEFS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename Container > {\b operator Matcher< Container >} () const{\bkmkstart AAAAAAAEFT}
{\bkmkend AAAAAAAEFT}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnorderedElementsAreMatcherImpl< Container > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnorderedElementsAreMatcherImpl< Container >}
{\xe \v testing::internal::UnorderedElementsAreMatcherImpl< Container >}
{\bkmkstart AAAAAAAEFU}
{\bkmkend AAAAAAAEFU}
Inheritance diagram for testing::internal::UnorderedElementsAreMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_unordered_elements_are_matcher_impl__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::UnorderedElementsAreMatcherImpl< Container >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_unordered_elements_are_matcher_impl__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b internal::StlContainerView}< RawContainer > {\b View}{\bkmkstart AAAAAAAEFV}
{\bkmkend AAAAAAAEFV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::type {\b StlContainer}{\bkmkstart AAAAAAAEFW}
{\bkmkend AAAAAAAEFW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef View::const_reference {\b StlContainerReference}{\bkmkstart AAAAAAAEFX}
{\bkmkend AAAAAAAEFX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef StlContainer::const_iterator {\b StlContainerConstIterator}{\bkmkstart AAAAAAAEFY}
{\bkmkend AAAAAAAEFY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef StlContainer::value_type {\b Element}{\bkmkstart AAAAAAAEFZ}
{\bkmkend AAAAAAAEFZ}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef {\b GTEST_REMOVE_REFERENCE_AND_CONST_} (Container) RawContainer{\bkmkstart AAAAAAAEGA}
{\bkmkend AAAAAAAEGA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename InputIter > {\b UnorderedElementsAreMatcherImpl} (InputIter first, InputIter last){\bkmkstart AAAAAAAEGB}
{\bkmkend AAAAAAAEGB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAAEGC}
{\bkmkend AAAAAAAEGC}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAAEGD}
{\bkmkend AAAAAAAEGD}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual bool {\b MatchAndExplain} (Container container, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAAEGE}
{\bkmkend AAAAAAAEGE}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UnorderedElementsAreMatcherImplBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UnorderedElementsAreMatcherImplBase}
{\xe \v testing::internal::UnorderedElementsAreMatcherImplBase}
{\bkmkstart AAAAAAAEGF}
{\bkmkend AAAAAAAEGF}
Inheritance diagram for testing::internal::UnorderedElementsAreMatcherImplBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_unordered_elements_are_matcher_impl_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef ::std::vector< const {\b MatcherDescriberInterface} * > {\b MatcherDescriberVec}{\bkmkstart AAAAAAAEGG}
{\bkmkend AAAAAAAEGG}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeToImpl} (::std::ostream *os) const{\bkmkstart AAAAAAAEGH}
{\bkmkend AAAAAAAEGH}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationToImpl} (::std::ostream *os) const{\bkmkstart AAAAAAAEGI}
{\bkmkend AAAAAAAEGI}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b VerifyAllElementsAndMatchersAreMatched} (const ::std::vector< string > &element_printouts, const {\b MatchMatrix} &matrix, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAAEGJ}
{\bkmkend AAAAAAAEGJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

MatcherDescriberVec & {\b matcher_describers} (){\bkmkstart AAAAAAAEGK}
{\bkmkend AAAAAAAEGK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static {\b Message} {\b Elements} (size_t n){\bkmkstart AAAAAAAEGL}
{\bkmkend AAAAAAAEGL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-matchers.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::UnorderedElementsAreTest Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::UnorderedElementsAreTest}
{\xe \v testing::gmock_matchers_test::UnorderedElementsAreTest}
{\bkmkstart AAAAAAACFA}
{\bkmkend AAAAAAACFA}
Inheritance diagram for testing::gmock_matchers_test::UnorderedElementsAreTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::gmock_matchers_test::UnorderedElementsAreTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1gmock__matchers__test_1_1_unordered_elements_are_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::vector< int > {\b IntVec}{\bkmkstart AAAAAAACFB}
{\bkmkend AAAAAAACFB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_matchers_test::Unprintable Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_matchers_test::Unprintable}
{\xe \v testing::gmock_matchers_test::Unprintable}
{\bkmkstart AAAAAAACFC}
{\bkmkend AAAAAAACFC}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-matchers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
foo::UnprintableInFoo Class Reference\par \pard\plain 
{\tc\tcl2 \v foo::UnprintableInFoo}
{\xe \v foo::UnprintableInFoo}
{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

double {\b z} () const{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
UnprintableTemplateInGlobal< T > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v UnprintableTemplateInGlobal< T >}
{\xe \v UnprintableTemplateInGlobal< T >}
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest-printers_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UntypedActionResultHolderBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UntypedActionResultHolderBase}
{\xe \v testing::internal::UntypedActionResultHolderBase}
{\bkmkstart AAAAAAAEGM}
{\bkmkend AAAAAAAEGM}
Inheritance diagram for testing::internal::UntypedActionResultHolderBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_untyped_action_result_holder_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b PrintAsActionResult} (::std::ostream *os) const =0{\bkmkstart AAAAAAAEGN}
{\bkmkend AAAAAAAEGN}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UntypedFunctionMockerBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UntypedFunctionMockerBase}
{\xe \v testing::internal::UntypedFunctionMockerBase}
{\bkmkstart AAAAAAAEGO}
{\bkmkend AAAAAAAEGO}
Inheritance diagram for testing::internal::UntypedFunctionMockerBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_untyped_function_mocker_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

bool {\b VerifyAndClearExpectationsLocked} () GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex){\bkmkstart AAAAAAAEGP}
{\bkmkend AAAAAAAEGP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b ClearDefaultActionsLocked} () GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)=0{\bkmkstart AAAAAAAEGQ}
{\bkmkend AAAAAAAEGQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b UntypedActionResultHolderBase} * {\b UntypedPerformDefaultAction} (const void *untyped_args, const string &call_description) const =0{\bkmkstart AAAAAAAEGR}
{\bkmkend AAAAAAAEGR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual {\b UntypedActionResultHolderBase} * {\b UntypedPerformAction} (const void *untyped_action, const void *untyped_args) const =0{\bkmkstart AAAAAAAEGS}
{\bkmkend AAAAAAAEGS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b UntypedDescribeUninterestingCall} (const void *untyped_args, ::std::ostream *os) const GTEST_LOCK_EXCLUDED_(g_gmock_mutex)=0{\bkmkstart AAAAAAAEGT}
{\bkmkend AAAAAAAEGT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual const {\b ExpectationBase} * {\b UntypedFindMatchingExpectation} (const void *untyped_args, const void **untyped_action, bool *is_excessive, ::std::ostream *what, ::std::ostream *why) GTEST_LOCK_EXCLUDED_(g_gmock_mutex)=0{\bkmkstart AAAAAAAEGU}
{\bkmkend AAAAAAAEGU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b UntypedPrintArgs} (const void *untyped_args, ::std::ostream *os) const =0{\bkmkstart AAAAAAAEGV}
{\bkmkend AAAAAAAEGV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b RegisterOwner} (const void *mock_obj) GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAAEGW}
{\bkmkend AAAAAAAEGW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b SetOwnerAndName} (const void *mock_obj, const char *name) GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAAEGX}
{\bkmkend AAAAAAAEGX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const void * {\b MockObject} () const GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAAEGY}
{\bkmkend AAAAAAAEGY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b Name} () const GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAAEGZ}
{\bkmkend AAAAAAAEGZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UntypedActionResultHolderBase} * {\b UntypedInvokeWith} (const void *untyped_args) GTEST_LOCK_EXCLUDED_(g_gmock_mutex){\bkmkstart AAAAAAAEHA}
{\bkmkend AAAAAAAEHA}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::vector< const void * > {\b UntypedOnCallSpecs}{\bkmkstart AAAAAAAEHB}
{\bkmkend AAAAAAAEHB}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

typedef std::vector< {\b internal::linked_ptr}< {\b ExpectationBase} > > {\b UntypedExpectations}{\bkmkstart AAAAAAAEHC}
{\bkmkend AAAAAAAEHC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Expectation} {\b GetHandleOf} ({\b ExpectationBase} *exp){\bkmkstart AAAAAAAEHD}
{\bkmkend AAAAAAAEHD}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const void * {\b mock_obj_}{\bkmkstart AAAAAAAEHE}
{\bkmkend AAAAAAAEHE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b name_}{\bkmkstart AAAAAAAEHF}
{\bkmkend AAAAAAAEHF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

UntypedOnCallSpecs {\b untyped_on_call_specs_}{\bkmkstart AAAAAAAEHG}
{\bkmkend AAAAAAAEHG}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

UntypedExpectations {\b untyped_expectations_}{\bkmkstart AAAAAAAEHH}
{\bkmkend AAAAAAAEHH}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/src/gmock-spec-builders.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::UntypedOnCallSpecBase Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::UntypedOnCallSpecBase}
{\xe \v testing::internal::UntypedOnCallSpecBase}
{\bkmkstart AAAAAAAEHI}
{\bkmkend AAAAAAAEHI}
Inheritance diagram for testing::internal::UntypedOnCallSpecBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_untyped_on_call_spec_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b UntypedOnCallSpecBase} (const char *a_file, int a_line){\bkmkstart AAAAAAAEHJ}
{\bkmkend AAAAAAAEHJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file} () const{\bkmkstart AAAAAAAEHK}
{\bkmkend AAAAAAAEHK}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line} () const{\bkmkstart AAAAAAAEHL}
{\bkmkend AAAAAAAEHL}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Types\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Clause} \{ {\b kNone}, 
{\b kWith}, 
{\b kWillByDefault}
 \}{\bkmkstart AAAAAAAEHM}
{\bkmkend AAAAAAAEHM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b AssertSpecProperty} (bool property, const string &failure_message) const{\bkmkstart AAAAAAAEHN}
{\bkmkend AAAAAAAEHN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b ExpectSpecProperty} (bool property, const string &failure_message) const{\bkmkstart AAAAAAAEHO}
{\bkmkend AAAAAAAEHO}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const char * {\b file_}{\bkmkstart AAAAAAAEHP}
{\bkmkend AAAAAAAEHP}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b line_}{\bkmkstart AAAAAAAEHQ}
{\bkmkend AAAAAAAEHQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

Clause {\b last_clause_}{\bkmkstart AAAAAAAEHR}
{\bkmkend AAAAAAAEHR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.Using Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.Using}
{\xe \v cpp.ast.Using}
{\bkmkstart AAAAAAAARI}
{\bkmkend AAAAAAAARI}
Inheritance diagram for cpp.ast.Using:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_using__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.Using:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_using__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, names){\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b names}{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ValueParamTest Class Reference\par \pard\plain 
{\tc\tcl2 \v ValueParamTest}
{\xe \v ValueParamTest}
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
Inheritance diagram for ValueParamTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_value_param_test__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for ValueParamTest:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_value_param_test__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cpp.ast.VariableDeclaration Class Reference\par \pard\plain 
{\tc\tcl2 \v cpp.ast.VariableDeclaration}
{\xe \v cpp.ast.VariableDeclaration}
{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
Inheritance diagram for cpp.ast.VariableDeclaration:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_variable_declaration__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for cpp.ast.VariableDeclaration:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classcpp_1_1ast_1_1_variable_declaration__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, start, end, name, var_type, initial_value, namespace){\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b Requires} (self, node){\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b ToString} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __str__} (self){\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b type}{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b initial_value}{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v ToString\:cpp::ast::VariableDeclaration}
{\xe \v cpp::ast::VariableDeclaration\:ToString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def cpp.ast.VariableDeclaration.ToString (  {\i self})}}
\par
{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Return a string that tries to reconstitute the variable decl.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/generator/cpp/ast.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
pump.VarNode Class Reference\par \pard\plain 
{\tc\tcl2 \v pump.VarNode}
{\xe \v pump.VarNode}
{\bkmkstart AAAAAAABCL}
{\bkmkend AAAAAAABCL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, identifier=None, atomic_code=None){\bkmkstart AAAAAAABCM}
{\bkmkend AAAAAAABCM}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b identifier}{\bkmkstart AAAAAAABCN}
{\bkmkend AAAAAAABCN}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b atomic_code}{\bkmkstart AAAAAAABCO}
{\bkmkend AAAAAAABCO}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/pump.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
upload.VersionControlSystem Class Reference\par \pard\plain 
{\tc\tcl2 \v upload.VersionControlSystem}
{\xe \v upload.VersionControlSystem}
{\bkmkstart AAAAAAAEKV}
{\bkmkend AAAAAAAEKV}
Inheritance diagram for upload.VersionControlSystem:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_version_control_system__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for upload.VersionControlSystem:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classupload_1_1_version_control_system__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b __init__} (self, options)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GenerateDiff} (self, args)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetUnknownFiles} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b CheckForUnknownFiles} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetBaseFile} (self, filename)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetBaseFiles} (self, diff)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b UploadBaseFiles} (self, issue, rpc_server, patch_list, patchset, options, files)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b IsImage} (self, filename)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b __init__} (self, options)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GenerateDiff} (self, args)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetUnknownFiles} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b CheckForUnknownFiles} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetBaseFile} (self, filename)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetBaseFiles} (self, diff)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b UploadBaseFiles} (self, issue, rpc_server, patch_list, patchset, options, files)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b IsImage} (self, filename)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b options}{\bkmkstart AAAAAAAEKW}
{\bkmkend AAAAAAAEKW}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Abstract base class providing an interface to the VCS.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Constructor & Destructor Documentation\par
\pard\plain 
{\xe \v __init__\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.__init__ (  {\i self},   {\i options})}}
\par
{\bkmkstart AAAAAAAEKX}
{\bkmkend AAAAAAAEKX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Constructor.\par
\par
Args:\par
  options: Command line options.\par
}
 \par
}}
{\xe \v __init__\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:__init__}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.__init__ (  {\i self},   {\i options})}}
\par
{\bkmkstart AAAAAAAEKX}
{\bkmkend AAAAAAAEKX}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Constructor.\par
\par
Args:\par
  options: Command line options.\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v CheckForUnknownFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:CheckForUnknownFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.CheckForUnknownFiles (  {\i self})}}
\par
{\bkmkstart AAAAAAAEKY}
{\bkmkend AAAAAAAEKY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Show an "are you sure?" prompt if there are unknown files.}
 \par
}}
{\xe \v CheckForUnknownFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:CheckForUnknownFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.CheckForUnknownFiles (  {\i self})}}
\par
{\bkmkstart AAAAAAAEKY}
{\bkmkend AAAAAAAEKY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Show an "are you sure?" prompt if there are unknown files.}
 \par
}}
{\xe \v GenerateDiff\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GenerateDiff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GenerateDiff (  {\i self},   {\i args})}}
\par
{\bkmkstart AAAAAAAEKZ}
{\bkmkend AAAAAAAEKZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Return the current diff as a string.\par
\par
Args:\par
  args: Extra arguments to pass to the diff command.\par
}
 \par
}}
{\xe \v GenerateDiff\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GenerateDiff}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GenerateDiff (  {\i self},   {\i args})}}
\par
{\bkmkstart AAAAAAAEKZ}
{\bkmkend AAAAAAAEKZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Return the current diff as a string.\par
\par
Args:\par
  args: Extra arguments to pass to the diff command.\par
}
 \par
}}
{\xe \v GetBaseFile\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GetBaseFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GetBaseFile (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAELA}
{\bkmkend AAAAAAAELA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Get the content of the upstream version of a file.\par
\par
Returns:\par
  A tuple (base_content, new_content, is_binary, status)\par
base_content: The contents of the base file.\par
new_content: For text files, this is empty.  For binary files, this is\par
  the contents of the new file, since the diff output won't contain\par
  information to reconstruct the current file.\par
is_binary: True iff the file is binary.\par
status: The status of the file.\par
}
 \par
}}
{\xe \v GetBaseFile\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GetBaseFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GetBaseFile (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAELA}
{\bkmkend AAAAAAAELA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Get the content of the upstream version of a file.\par
\par
Returns:\par
  A tuple (base_content, new_content, is_binary, status)\par
base_content: The contents of the base file.\par
new_content: For text files, this is empty.  For binary files, this is\par
  the contents of the new file, since the diff output won't contain\par
  information to reconstruct the current file.\par
is_binary: True iff the file is binary.\par
status: The status of the file.\par
}
 \par
}}
{\xe \v GetBaseFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GetBaseFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GetBaseFiles (  {\i self},   {\i diff})}}
\par
{\bkmkstart AAAAAAAELB}
{\bkmkend AAAAAAAELB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Helper that calls GetBase file for each file in the patch.\par
\par
Returns:\par
  A dictionary that maps from filename to GetBaseFile's tuple.  Filenames\par
  are retrieved based on lines that start with "Index:" or\par
  "Property changes on:".\par
}
 \par
}}
{\xe \v GetBaseFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GetBaseFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GetBaseFiles (  {\i self},   {\i diff})}}
\par
{\bkmkstart AAAAAAAELB}
{\bkmkend AAAAAAAELB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Helper that calls GetBase file for each file in the patch.\par
\par
Returns:\par
  A dictionary that maps from filename to GetBaseFile's tuple.  Filenames\par
  are retrieved based on lines that start with "Index:" or\par
  "Property changes on:".\par
}
 \par
}}
{\xe \v GetUnknownFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GetUnknownFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GetUnknownFiles (  {\i self})}}
\par
{\bkmkstart AAAAAAAELC}
{\bkmkend AAAAAAAELC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Return a list of files unknown to the VCS.}
 \par
}}
{\xe \v GetUnknownFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:GetUnknownFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.GetUnknownFiles (  {\i self})}}
\par
{\bkmkstart AAAAAAAELC}
{\bkmkend AAAAAAAELC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Return a list of files unknown to the VCS.}
 \par
}}
{\xe \v IsImage\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:IsImage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.IsImage (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAELD}
{\bkmkend AAAAAAAELD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns true if the filename has an image extension.}
 \par
}}
{\xe \v IsImage\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:IsImage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.IsImage (  {\i self},   {\i filename})}}
\par
{\bkmkstart AAAAAAAELD}
{\bkmkend AAAAAAAELD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns true if the filename has an image extension.}
 \par
}}
{\xe \v UploadBaseFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:UploadBaseFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.UploadBaseFiles (  {\i self},   {\i issue},   {\i rpc_server},   {\i patch_list},   {\i patchset},   {\i options},   {\i files})}}
\par
{\bkmkstart AAAAAAAELE}
{\bkmkend AAAAAAAELE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Uploads the base files (and if necessary, the current ones as well).}
 \par
}}
{\xe \v UploadBaseFiles\:upload::VersionControlSystem}
{\xe \v upload::VersionControlSystem\:UploadBaseFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def upload.VersionControlSystem.UploadBaseFiles (  {\i self},   {\i issue},   {\i rpc_server},   {\i patch_list},   {\i patchset},   {\i options},   {\i files})}}
\par
{\bkmkstart AAAAAAAELE}
{\bkmkend AAAAAAAELE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Uploads the base files (and if necessary, the current ones as well).}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/scripts/upload.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName Class Reference\par \pard\plain 
{\tc\tcl2 \v VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName}
{\xe \v VeryLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooogName}
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/test/gtest_list_tests_unittest_.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::gmock_more_actions_test::VoidNullaryFunctor Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::gmock_more_actions_test::VoidNullaryFunctor}
{\xe \v testing::gmock_more_actions_test::VoidNullaryFunctor}
{\bkmkstart AAAAAAACGA}
{\bkmkend AAAAAAACGA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b operator()} (){\bkmkstart AAAAAAACGB}
{\bkmkend AAAAAAACGB}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/test/gmock-more-actions_test.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WhenDynamicCastToMatcher< To > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WhenDynamicCastToMatcher< To >}
{\xe \v testing::internal::WhenDynamicCastToMatcher< To >}
{\bkmkstart AAAAAAAEHS}
{\bkmkend AAAAAAAEHS}
Inheritance diagram for testing::internal::WhenDynamicCastToMatcher< To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::WhenDynamicCastToMatcher< To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b WhenDynamicCastToMatcher} (const {\b Matcher}< {\b To} > &matcher){\bkmkstart AAAAAAAEHT}
{\bkmkend AAAAAAAEHT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename From > bool {\b MatchAndExplain} (From from, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAAEHU}
{\bkmkend AAAAAAAEHU}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WhenDynamicCastToMatcher< To & > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WhenDynamicCastToMatcher< To & >}
{\xe \v testing::internal::WhenDynamicCastToMatcher< To & >}
{\bkmkstart AAAAAAAEHV}
{\bkmkend AAAAAAAEHV}
Inheritance diagram for testing::internal::WhenDynamicCastToMatcher< To & >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher_3_01_to_01_6_01_4__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::WhenDynamicCastToMatcher< To & >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher_3_01_to_01_6_01_4__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b WhenDynamicCastToMatcher} (const {\b Matcher}< {\b To} &> &matcher){\bkmkstart AAAAAAAEHW}
{\bkmkend AAAAAAAEHW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename From > bool {\b MatchAndExplain} (From &from, {\b MatchResultListener} *listener) const{\bkmkstart AAAAAAAEHX}
{\bkmkend AAAAAAAEHX}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Additional Inherited Members\par
\pard\plain 
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WhenDynamicCastToMatcherBase< To > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WhenDynamicCastToMatcherBase< To >}
{\xe \v testing::internal::WhenDynamicCastToMatcherBase< To >}
{\bkmkstart AAAAAAAEHY}
{\bkmkend AAAAAAAEHY}
Inheritance diagram for testing::internal::WhenDynamicCastToMatcherBase< To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher_base__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::WhenDynamicCastToMatcherBase< To >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher_base__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b WhenDynamicCastToMatcherBase} (const {\b Matcher}< {\b To} > &matcher){\bkmkstart AAAAAAAEHZ}
{\bkmkend AAAAAAAEHZ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeTo} (::std::ostream *os) const{\bkmkstart AAAAAAAEIA}
{\bkmkend AAAAAAAEIA}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b DescribeNegationTo} (::std::ostream *os) const{\bkmkstart AAAAAAAEIB}
{\bkmkend AAAAAAAEIB}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Static Protected Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

static string {\b GetToName} (){\bkmkstart AAAAAAAEIC}
{\bkmkend AAAAAAAEIC}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

const {\b Matcher}< {\b To} > {\b matcher_}{\bkmkstart AAAAAAAEID}
{\bkmkend AAAAAAAEID}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >}
{\xe \v testing::internal::WhenSortedByMatcher< Comparator, ContainerMatcher >}
{\bkmkstart AAAAAAAEIE}
{\bkmkend AAAAAAAEIE}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Impl}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b WhenSortedByMatcher} (const Comparator &comparator, const ContainerMatcher &matcher){\bkmkstart AAAAAAAEIF}
{\bkmkend AAAAAAAEIF}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename LhsContainer > {\b operator Matcher< LhsContainer >} () const{\bkmkstart AAAAAAAEIG}
{\bkmkend AAAAAAAEIG}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-matchers.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Widget Class Reference\par \pard\plain 
{\tc\tcl2 \v Widget}
{\xe \v Widget}
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b Widget} (int number, const std::string &name){\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

float {\b GetFloatValue} () const{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

int {\b GetIntValue} () const{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

std::string {\b GetStringValue} () const{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

void {\b GetCharPtrValue} (char *buffer, size_t max_size) const{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following files:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/xcode/Samples/FrameworkSample/widget.h\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/xcode/Samples/FrameworkSample/widget.cc\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
release_docs.WikiBrancher Class Reference\par \pard\plain 
{\tc\tcl2 \v release_docs.WikiBrancher}
{\xe \v release_docs.WikiBrancher}
{\bkmkstart AAAAAAABCP}
{\bkmkend AAAAAAABCP}
Inheritance diagram for release_docs.WikiBrancher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classrelease__docs_1_1_wiki_brancher__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for release_docs.WikiBrancher:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classrelease__docs_1_1_wiki_brancher__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b __init__} (self, dot_version){\bkmkstart AAAAAAABCQ}
{\bkmkend AAAAAAABCQ}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b GetFilesToBranch} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b BranchFiles} (self)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

def {\b UpdateLinksInBranchedFiles} (self){\bkmkstart AAAAAAABCR}
{\bkmkend AAAAAAABCR}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Attributes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b wiki_dir}{\bkmkstart AAAAAAABCS}
{\bkmkend AAAAAAABCS}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b version_prefix}{\bkmkstart AAAAAAABCT}
{\bkmkend AAAAAAABCT}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b files_to_branch}{\bkmkstart AAAAAAABCU}
{\bkmkend AAAAAAABCU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b search_for_re}{\bkmkstart AAAAAAABCV}
{\bkmkend AAAAAAABCV}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b replace_with}{\bkmkstart AAAAAAABCW}
{\bkmkend AAAAAAABCW}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b project}{\bkmkstart AAAAAAABCX}
{\bkmkend AAAAAAABCX}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Branches ...}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Member Function Documentation\par
\pard\plain 
{\xe \v BranchFiles\:release_docs::WikiBrancher}
{\xe \v release_docs::WikiBrancher\:BranchFiles}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def release_docs.WikiBrancher.BranchFiles (  {\i self})}}
\par
{\bkmkstart AAAAAAABCY}
{\bkmkend AAAAAAABCY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Branches the .wiki files needed to be branched.}
 \par
}}
{\xe \v GetFilesToBranch\:release_docs::WikiBrancher}
{\xe \v release_docs::WikiBrancher\:GetFilesToBranch}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def release_docs.WikiBrancher.GetFilesToBranch (  {\i self})}}
\par
{\bkmkstart AAAAAAABCZ}
{\bkmkend AAAAAAABCZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Returns a list of .wiki file names that need to be branched.}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/scripts/release_docs.py\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::WithArgsAction< InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 > Class Template Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::WithArgsAction< InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >}
{\xe \v testing::internal::WithArgsAction< InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 >}
{\bkmkstart AAAAAAAEIQ}
{\bkmkend AAAAAAAEIQ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b WithArgsAction} (const InnerAction &action){\bkmkstart AAAAAAAEIR}
{\bkmkend AAAAAAAEIR}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

template<typename F > {\b operator Action< F >} () const{\bkmkstart AAAAAAAEIS}
{\bkmkend AAAAAAAEIS}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
testing::internal::XmlUnitTestResultPrinter Class Reference\par \pard\plain 
{\tc\tcl2 \v testing::internal::XmlUnitTestResultPrinter}
{\xe \v testing::internal::XmlUnitTestResultPrinter}
{\bkmkstart AAAAAAAEIT}
{\bkmkend AAAAAAAEIT}
Inheritance diagram for testing::internal::XmlUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_xml_unit_test_result_printer__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
Collaboration diagram for testing::internal::XmlUnitTestResultPrinter:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classtesting_1_1internal_1_1_xml_unit_test_result_printer__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public Member Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b XmlUnitTestResultPrinter} (const char *output_file){\bkmkstart AAAAAAAEIU}
{\bkmkend AAAAAAAEIU}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

virtual void {\b OnTestIterationEnd} (const {\b UnitTest} &unit_test, int iteration){\bkmkstart AAAAAAAEIV}
{\bkmkend AAAAAAAEIV}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
The documentation for this class was generated from the following file:{\par
\pard\plain \s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid 
vendor/googletest/googletest/src/gtest.cc\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
app/profiler.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v app/profiler.cpp}
{\xe \v app/profiler.cpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Profiler class specification. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "profiler.h"}\par
{\f2 #include <cstdio>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for profiler.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "profiler_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Profiler class specification. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mahmoud Dahmani (Driver) \par
Aditya Khopkar (Navigator) \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid MIT License \par
}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
app/tracker.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v app/tracker.cpp}
{\xe \v app/tracker.cpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ObjectTracker class implementation. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "tracker.h"}\par
{\f2 #include <cstdio>}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <opencv2/imgproc.hpp>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for tracker.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "tracker_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ObjectTracker class implementation. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mahmoud Dahmani (Driver) \par
Aditya Khopkar (Navigator) \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid MIT License \par
}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
include/config.h File Reference\par \pard\plain 
{\tc\tcl2 \v include/config.h}
{\xe \v include/config.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
System configuration. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <unordered_set>}\par
{\f2 #include <opencv2/highgui.hpp>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for config.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "config_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "config_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
System configuration. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mahmoud Dahmani (Driver) \par
Aditya Khopkar (Navigator) \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid MIT License \par
}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
include/profiler.h File Reference\par \pard\plain 
{\tc\tcl2 \v include/profiler.h}
{\xe \v include/profiler.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Profiler class specification. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <chrono>}\par
{\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for profiler.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "profiler_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "profiler_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ENPM808X::ProfileResult}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Data structure for holding a profiling result. }}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ENPM808X::Timer}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for timing a scope (Stopwatch) }}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\b ENPM808X}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for monocular multiple object tracking for a mobile robot. }}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

#define {\b PROFILE_SCOPE}(name)\~ Timer timer##__LINE__(name){\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

#define {\b PROFILE_FUNCTION}()\~ PROFILE_SCOPE(__FUNCTION__){\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Profiler class specification. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mahmoud Dahmani (Driver) \par
Aditya Khopkar (Navigator) \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid MIT License \par
}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
include/tracker.h File Reference\par \pard\plain 
{\tc\tcl2 \v include/tracker.h}
{\xe \v include/tracker.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ObjectTracker class specification. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <vector>}\par
{\f2 #include <unordered_set>}\par
{\f2 #include <map>}\par
{\f2 #include <tuple>}\par
{\f2 #include <opencv2/dnn.hpp>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for tracker.h:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "tracker_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid This graph shows which files directly or indirectly include this file:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "tracker_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ENPM808X::ObjectTracker}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
 {\b ENPM808X}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Class for monocular multiple object tracking for a mobile robot. }}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
ObjectTracker class specification. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mahmoud Dahmani (Driver) \par
Aditya Khopkar (Navigator) \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid MIT License \par
}}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
test/test_tracker.cpp File Reference\par \pard\plain 
{\tc\tcl2 \v test/test_tracker.cpp}
{\xe \v test/test_tracker.cpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test Suite for ObjectTracker class methods. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <gtest/gtest.h>}\par
{\f2 #include "tracker.h"}\par
{\f2 #include "config.h"}\par
{\f2 #include "profiler.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Include dependency graph for test_tracker.cpp:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "test__tracker_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Classes\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ObjectTrackerTest}\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test fixture for ObjectTracker class. }}}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TEST_F} ({\b ObjectTrackerTest}, LocalizationWorks){\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test Case for the localization function of ObjectTracker class Checks if the localiztion method "F" implements the inverse mapping of the camera projection operator "F-1". In mathematical terms, the following condition [F-1(F(pixel_given) == pixel_reconstructed] is evaluated. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TEST_F} ({\b ObjectTrackerTest}, MultipleHumanDetectionWorks){\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test Case for the multiple object detection function of ObjectTracker Checks if the number of detections matches the number objects in the test image. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TEST_F} ({\b ObjectTrackerTest}, CocoLabelsAreRead){\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test Case for the file parsing function of ObjectTracker class Checks if all the labels in the COCO dataset (which contains 80 classes) are correctly loaded. }{
}\par
}}
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 

{\b TEST_F} ({\b ObjectTrackerTest}, RealtimePerformanceIsAchieved){\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
\par
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test Case for benchmarking the speed of the tracker Checks if the achieved frame rate fulfills the real-time requirement. }{
}\par
}}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Test Suite for ObjectTracker class methods. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Mahmoud Dahmani (Driver) \par
Aditya Khopkar (Navigator) \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Copyright:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid MIT License \par
}}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}