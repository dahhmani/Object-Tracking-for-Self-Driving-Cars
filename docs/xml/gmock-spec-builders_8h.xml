<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-spec-builders_8h" kind="file" language="C++">
    <compoundname>gmock-spec-builders.h</compoundname>
    <includes local="no">map</includes>
    <includes local="no">set</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="gmock-actions_8h" local="yes">gmock/gmock-actions.h</includes>
    <includes refid="gmock-cardinalities_8h" local="yes">gmock/gmock-cardinalities.h</includes>
    <includes refid="gmock-matchers_8h" local="yes">gmock/gmock-matchers.h</includes>
    <includes refid="gmock-internal-utils_8h" local="yes">gmock/internal/gmock-internal-utils.h</includes>
    <includes refid="gmock-port_8h" local="yes">gmock/internal/gmock-port.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gmock-generated-function-mockers_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h</includedby>
    <includedby refid="gmock-generated-nice-strict_8h" local="yes">vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h</includedby>
    <includedby refid="gmock-spec-builders_8cc" local="yes">vendor/googletest/googlemock/src/gmock-spec-builders.cc</includedby>
    <includedby refid="gmock-spec-builders__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock-spec-builders_test.cc</includedby>
    <incdepgraph>
      <node id="821">
        <label>sys/stat.h</label>
      </node>
      <node id="839">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="835">
        <label>iomanip</label>
      </node>
      <node id="832">
        <label>limits</label>
      </node>
      <node id="823">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="812">
        <label>assert.h</label>
      </node>
      <node id="844">
        <label>iterator</label>
      </node>
      <node id="834">
        <label>float.h</label>
      </node>
      <node id="807">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
      </node>
      <node id="848">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="813">
        <label>stdlib.h</label>
      </node>
      <node id="837">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="849">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="850" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
      </node>
      <node id="805">
        <label>errno.h</label>
      </node>
      <node id="857">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="802">
        <label>string</label>
      </node>
      <node id="799">
        <label>map</label>
      </node>
      <node id="830">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="847">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="818">
        <label>stddef.h</label>
      </node>
      <node id="852">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="809">
        <label>ostream</label>
      </node>
      <node id="824">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="854">
        <label>limits.h</label>
      </node>
      <node id="840">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="841" relation="include">
        </childnode>
      </node>
      <node id="820">
        <label>sys/types.h</label>
      </node>
      <node id="819">
        <label>string.h</label>
      </node>
      <node id="804">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="805" relation="include">
        </childnode>
        <childnode refid="806" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
      </node>
      <node id="828">
        <label>typeinfo</label>
      </node>
      <node id="811">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
      </node>
      <node id="825">
        <label>unistd.h</label>
      </node>
      <node id="803">
        <label>vector</label>
      </node>
      <node id="846">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="836">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="822">
        <label>utility</label>
      </node>
      <node id="798">
        <label>vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h"/>
        <childnode refid="799" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="804" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
        <childnode refid="855" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
      </node>
      <node id="801">
        <label>sstream</label>
      </node>
      <node id="815">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
      </node>
      <node id="855">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="856" relation="include">
        </childnode>
        <childnode refid="806" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
        <childnode refid="857" relation="include">
        </childnode>
      </node>
      <node id="856">
        <label>math.h</label>
      </node>
      <node id="850">
        <label>iosfwd</label>
      </node>
      <node id="853">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="854" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
      </node>
      <node id="838">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="837" relation="include">
        </childnode>
      </node>
      <node id="814">
        <label>iostream</label>
      </node>
      <node id="831">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
        <childnode refid="849" relation="include">
        </childnode>
        <childnode refid="851" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
      </node>
      <node id="829">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="822" relation="include">
        </childnode>
      </node>
      <node id="826">
        <label>strings.h</label>
      </node>
      <node id="817">
        <label>ctype.h</label>
      </node>
      <node id="851">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
      <node id="816">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="806" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="826" relation="include">
        </childnode>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="828" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
      </node>
      <node id="833">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="835" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="799" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
      <node id="843">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="817" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="800" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
      </node>
      <node id="810">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="811" relation="include">
        </childnode>
      </node>
      <node id="800">
        <label>set</label>
      </node>
      <node id="842">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="847" relation="include">
        </childnode>
      </node>
      <node id="806">
        <label>algorithm</label>
      </node>
      <node id="827">
        <label>regex.h</label>
      </node>
      <node id="808">
        <label>stdio.h</label>
      </node>
      <node id="841">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="808" relation="include">
        </childnode>
      </node>
      <node id="845">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="801" relation="include">
        </childnode>
        <childnode refid="802" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="803" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="846" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="859">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="860" relation="include">
        </childnode>
      </node>
      <node id="860">
        <label>vendor/googletest/googlemock/include/gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="861" relation="include">
        </childnode>
      </node>
      <node id="858">
        <label>vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h"/>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
      </node>
      <node id="862">
        <label>vendor/googletest/googlemock/include/gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="860" relation="include">
        </childnode>
      </node>
      <node id="861">
        <label>vendor/googletest/googlemock/test/gmock_link_test.h</label>
        <link refid="gmock__link__test_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker" prot="public">testing::internal::FunctionMocker</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_typed_expectation" prot="public">testing::internal::TypedExpectation</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_base" prot="public">testing::internal::FunctionMockerBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" prot="public">testing::internal::UntypedFunctionMockerBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" prot="public">testing::internal::UntypedOnCallSpecBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_on_call_spec" prot="public">testing::internal::OnCallSpec</innerclass>
    <innerclass refid="classtesting_1_1_mock" prot="public">testing::Mock</innerclass>
    <innerclass refid="classtesting_1_1_expectation" prot="public">testing::Expectation</innerclass>
    <innerclass refid="classtesting_1_1_expectation_1_1_less" prot="private">testing::Expectation::Less</innerclass>
    <innerclass refid="classtesting_1_1_expectation_set" prot="public">testing::ExpectationSet</innerclass>
    <innerclass refid="classtesting_1_1_sequence" prot="public">testing::Sequence</innerclass>
    <innerclass refid="classtesting_1_1_in_sequence" prot="public">testing::InSequence</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_expectation_base" prot="public">testing::internal::ExpectationBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_typed_expectation" prot="public">testing::internal::TypedExpectation</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_mock_spec" prot="public">testing::internal::MockSpec</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" prot="public">testing::internal::ReferenceOrValueWrapper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_reference_or_value_wrapper_3_01_t_01_6_01_4" prot="public">testing::internal::ReferenceOrValueWrapper&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" prot="public">testing::internal::UntypedActionResultHolderBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_action_result_holder" prot="public">testing::internal::ActionResultHolder</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_action_result_holder_3_01void_01_4" prot="public">testing::internal::ActionResultHolder&lt; void &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1_function_mocker_base" prot="public">testing::internal::FunctionMockerBase</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gmock-spec-builders_8h_1a7c47d936dcf489ac84c046740aea777e" prot="public" static="no">
        <name>GMOCK_ON_CALL_IMPL_</name>
        <param><defname>obj</defname></param>
        <param><defname>call</defname></param>
        <initializer>((obj).gmock_##call).InternalDefaultActionSetAt(__FILE__, __LINE__, \
                                                    #obj, #call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1838" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-spec-builders_8h_1a5b12ae6cf84f0a544ca811b380c37334" prot="public" static="no">
        <name>ON_CALL</name>
        <param><defname>obj</defname></param>
        <param><defname>call</defname></param>
        <initializer>GMOCK_ON_CALL_IMPL_(obj, call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1841" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-spec-builders_8h_1ae261d723ebfab24d5831030d320f526c" prot="public" static="no">
        <name>GMOCK_EXPECT_CALL_IMPL_</name>
        <param><defname>obj</defname></param>
        <param><defname>call</defname></param>
        <initializer>((obj).gmock_##call).InternalExpectedAt(__FILE__, __LINE__, #obj, #call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1843" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gmock-spec-builders_8h_1a535a6156de72c1a2e25a127e38ee5232" prot="public" static="no">
        <name>EXPECT_CALL</name>
        <param><defname>obj</defname></param>
        <param><defname>call</defname></param>
        <initializer>GMOCK_EXPECT_CALL_IMPL_(obj, call)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1845" column="9" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1845" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>implements<sp/>the<sp/>ON_CALL()<sp/>and<sp/>EXPECT_CALL()<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>can<sp/>use<sp/>the<sp/>ON_CALL()<sp/>macro<sp/>to<sp/>specify<sp/>the<sp/>default<sp/>action<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>mock<sp/>method.<sp/><sp/>The<sp/>syntax<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ON_CALL(mock_object,<sp/>Method(argument-matchers))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.With(multi-argument-matcher)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(action);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>where<sp/>the<sp/>.With()<sp/>clause<sp/>is<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>user<sp/>can<sp/>use<sp/>the<sp/>EXPECT_CALL()<sp/>macro<sp/>to<sp/>specify<sp/>an<sp/>expectation<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>mock<sp/>method.<sp/><sp/>The<sp/>syntax<sp/>is:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(mock_object,<sp/>Method(argument-matchers))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.With(multi-argument-matchers)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Times(cardinality)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.InSequence(sequences)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.After(expectations)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillOnce(action)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillRepeatedly(action)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.RetiresOnSaturation();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>all<sp/>clauses<sp/>are<sp/>optional,<sp/>and<sp/>.InSequence()/.After()/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>.WillOnce()<sp/>can<sp/>appear<sp/>any<sp/>number<sp/>of<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-actions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-cardinalities.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-matchers.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-internal-utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/internal/gmock-port.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>abstract<sp/>handle<sp/>of<sp/>an<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Expectation;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>set<sp/>of<sp/>expectation<sp/>handles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpectationSet;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Anything<sp/>inside<sp/>the<sp/>&apos;internal&apos;<sp/>namespace<sp/>IS<sp/>INTERNAL<sp/>IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>MUST<sp/>NOT<sp/>BE<sp/>USED<sp/>IN<sp/>USER<sp/>CODE!!!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>a<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FunctionMocker;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpectationBase;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>an<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classtesting_1_1internal_1_1_typed_expectation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>class<sp/>for<sp/>testing<sp/>the<sp/>Expectation<sp/>class<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_expectation_tester" kindref="compound">ExpectationTester</ref>;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>function<sp/>mockers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Protects<sp/>the<sp/>mock<sp/>object<sp/>registry<sp/>(in<sp/>class<sp/>Mock),<sp/>all<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mockers,<sp/>and<sp/>all<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>reason<sp/>we<sp/>don&apos;t<sp/>use<sp/>more<sp/>fine-grained<sp/>protection<sp/>is:<sp/>when<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>function<sp/>Foo()<sp/>is<sp/>called,<sp/>it<sp/>needs<sp/>to<sp/>consult<sp/>its<sp/>expectations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>see<sp/>which<sp/>one<sp/>should<sp/>be<sp/>picked.<sp/><sp/>If<sp/>another<sp/>thread<sp/>is<sp/>allowed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>a<sp/>mock<sp/>function<sp/>(either<sp/>Foo()<sp/>or<sp/>a<sp/>different<sp/>one)<sp/>at<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time,<sp/>it<sp/>could<sp/>affect<sp/>the<sp/>&quot;retired&quot;<sp/>attributes<sp/>of<sp/>Foo()&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expectations<sp/>when<sp/>InSequence()<sp/>is<sp/>used,<sp/>and<sp/>thus<sp/>affect<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expectation<sp/>gets<sp/>picked.<sp/><sp/>Therefore,<sp/>we<sp/>sequence<sp/>all<sp/>mock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>calls<sp/>to<sp/>ensure<sp/>the<sp/>integrity<sp/>of<sp/>the<sp/>mock<sp/>objects&apos;<sp/>states.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">GTEST_API_<sp/>GTEST_DECLARE_STATIC_MUTEX_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Untyped<sp/>base<sp/>class<sp/>for<sp/>ActionResultHolder&lt;R&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Abstract<sp/>base<sp/>class<sp/>of<sp/>FunctionMockerBase.<sp/><sp/>This<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type-agnostic<sp/>part<sp/>of<sp/>the<sp/>function<sp/>mocker<sp/>interface.<sp/><sp/>Its<sp/>pure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>virtual<sp/>methods<sp/>are<sp/>implemented<sp/>by<sp/>FunctionMockerBase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">UntypedFunctionMockerBase</ref><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">UntypedFunctionMockerBase</ref>();</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">UntypedFunctionMockerBase</ref>();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>all<sp/>expectations<sp/>on<sp/>this<sp/>mock<sp/>function<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>satisfied.<sp/><sp/>Reports<sp/>one<sp/>or<sp/>more<sp/>Google<sp/>Test<sp/>non-fatal<sp/>failures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>returns<sp/>false<sp/>if<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VerifyAndClearExpectationsLocked()</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>the<sp/>ON_CALL()s<sp/>set<sp/>on<sp/>this<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearDefaultActionsLocked()</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>all<sp/>of<sp/>the<sp/>following<sp/>Untyped*<sp/>functions,<sp/>it&apos;s<sp/>the<sp/>caller&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>responsibility<sp/>to<sp/>guarantee<sp/>the<sp/>correctness<sp/>of<sp/>the<sp/>arguments&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>default<sp/>action<sp/>with<sp/>the<sp/>given<sp/>arguments<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>action&apos;s<sp/>result.<sp/><sp/>The<sp/>call<sp/>description<sp/>string<sp/>will<sp/>be<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>error<sp/>message<sp/>to<sp/>describe<sp/>the<sp/>call<sp/>in<sp/>the<sp/>case<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>action<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>=<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref>*<sp/>UntypedPerformDefaultAction(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>call_description)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>given<sp/>action<sp/>with<sp/>the<sp/>given<sp/>arguments<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>action&apos;s<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>=<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref>*<sp/>UntypedPerformAction(</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_action,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writes<sp/>a<sp/>message<sp/>that<sp/>the<sp/>call<sp/>is<sp/>uninteresting<sp/>(i.e.<sp/>neither</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>expected<sp/>nor<sp/>explicitly<sp/>unexpected)<sp/>to<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UntypedDescribeUninterestingCall(</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>expectation<sp/>that<sp/>matches<sp/>the<sp/>given<sp/>function<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(or<sp/>NULL<sp/>is<sp/>there&apos;s<sp/>no<sp/>match);<sp/>when<sp/>a<sp/>match<sp/>is<sp/>found,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>untyped_action<sp/>is<sp/>set<sp/>to<sp/>point<sp/>to<sp/>the<sp/>action<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>performed<sp/>(or<sp/>NULL<sp/>if<sp/>the<sp/>action<sp/>is<sp/>&quot;do<sp/>default&quot;),<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is_excessive<sp/>is<sp/>modified<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>call<sp/>exceeds<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref>*<sp/>UntypedFindMatchingExpectation(</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>untyped_action,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_excessive,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>what,<sp/>::std::ostream*<sp/>why)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>function<sp/>arguments<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UntypedPrintArgs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>mock<sp/>object<sp/>this<sp/>mock<sp/>method<sp/>belongs<sp/>to,<sp/>and<sp/>registers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>information<sp/>in<sp/>the<sp/>global<sp/>mock<sp/>registry.<sp/><sp/>Will<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>whenever<sp/>an<sp/>EXPECT_CALL()<sp/>or<sp/>ON_CALL()<sp/>is<sp/>executed<sp/>on<sp/>this<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>rename<sp/>to<sp/>SetAndRegisterOwner().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterOwner(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>mock<sp/>object<sp/>this<sp/>mock<sp/>method<sp/>belongs<sp/>to,<sp/>and<sp/>sets<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>mock<sp/>function.<sp/><sp/>Will<sp/>be<sp/>called<sp/>upon<sp/>each<sp/>invocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>this<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetOwnerAndName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>mock<sp/>object<sp/>this<sp/>mock<sp/>method<sp/>belongs<sp/>to.<sp/><sp/>Must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>called<sp/>after<sp/>RegisterOwner()<sp/>or<sp/>SetOwnerAndName()<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>MockObject()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>name<sp/>of<sp/>this<sp/>mock<sp/>method.<sp/><sp/>Must<sp/>be<sp/>called<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetOwnerAndName()<sp/>has<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>invoking<sp/>this<sp/>mock<sp/>function<sp/>with<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments.<sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>safely<sp/>called<sp/>from<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>threads<sp/>concurrently.<sp/><sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref>*<sp/>UntypedInvokeWith(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>void*&gt;<sp/>UntypedOnCallSpecs;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;internal::linked_ptr&lt;ExpectationBase&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>UntypedExpectations;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>Expectation<sp/>object<sp/>that<sp/>references<sp/>and<sp/>co-owns<sp/>exp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>must<sp/>be<sp/>an<sp/>expectation<sp/>on<sp/>this<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref><sp/>GetHandleOf(<ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref>*<sp/>exp);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Address<sp/>of<sp/>the<sp/>mock<sp/>object<sp/>this<sp/>mock<sp/>method<sp/>belongs<sp/>to.<sp/><sp/>Only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>valid<sp/>after<sp/>this<sp/>mock<sp/>method<sp/>has<sp/>been<sp/>called<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ON_CALL/EXPECT_CALL<sp/>has<sp/>been<sp/>invoked<sp/>on<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Protected<sp/>by<sp/>g_gmock_mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Name<sp/>of<sp/>the<sp/>function<sp/>being<sp/>mocked.<sp/><sp/>Only<sp/>valid<sp/>after<sp/>this<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>method<sp/>has<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Protected<sp/>by<sp/>g_gmock_mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>default<sp/>action<sp/>specs<sp/>for<sp/>this<sp/>function<sp/>mocker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>UntypedOnCallSpecs<sp/>untyped_on_call_specs_;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>expectations<sp/>for<sp/>this<sp/>function<sp/>mocker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>UntypedExpectations<sp/>untyped_expectations_;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>UntypedFunctionMockerBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Untyped<sp/>base<sp/>class<sp/>for<sp/>OnCallSpec&lt;F&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" kindref="compound">UntypedOnCallSpecBase</ref><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>arguments<sp/>are<sp/>the<sp/>location<sp/>of<sp/>the<sp/>ON_CALL()<sp/>statement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" kindref="compound">UntypedOnCallSpecBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_line)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>file_(a_file),<sp/>line_(a_line),<sp/>last_clause_(kNone)<sp/>{}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Where<sp/>in<sp/>the<sp/>source<sp/>file<sp/>was<sp/>the<sp/>default<sp/>action<sp/>spec<sp/>defined?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_;<sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_;<sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gives<sp/>each<sp/>clause<sp/>in<sp/>the<sp/>ON_CALL()<sp/>statement<sp/>a<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Clause<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>change<sp/>the<sp/>order<sp/>of<sp/>the<sp/>enum<sp/>members!<sp/><sp/>The<sp/>run-time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>syntax<sp/>checking<sp/>relies<sp/>on<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>kNone,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>kWith,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>kWillByDefault</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>the<sp/>ON_CALL()<sp/>statement<sp/>has<sp/>a<sp/>certain<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertSpecProperty(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>failure_message)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(property,<sp/>file_,<sp/>line_,<sp/>failure_message);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expects<sp/>that<sp/>the<sp/>ON_CALL()<sp/>statement<sp/>has<sp/>a<sp/>certain<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectSpecProperty(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>failure_message)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>Expect(property,<sp/>file_,<sp/>line_,<sp/>failure_message);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>clause<sp/>in<sp/>the<sp/>ON_CALL()<sp/>statement<sp/>as<sp/>seen<sp/>so<sp/>far.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initially<sp/>kNone<sp/>and<sp/>changes<sp/>as<sp/>the<sp/>statement<sp/>is<sp/>parsed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>Clause<sp/>last_clause_;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>UntypedOnCallSpecBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>class<sp/>implements<sp/>an<sp/>ON_CALL<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="285" refid="classtesting_1_1internal_1_1_on_call_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" kindref="compound">UntypedOnCallSpecBase</ref><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentMatcherTuple</ref><sp/>ArgumentMatcherTuple;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>OnCallSpec<sp/>object<sp/>from<sp/>the<sp/>information<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>parenthesis<sp/>of<sp/>an<sp/>ON_CALL()<sp/>statement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_line,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentMatcherTuple&amp;<sp/>matchers)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classtesting_1_1internal_1_1_untyped_on_call_spec_base" kindref="compound">UntypedOnCallSpecBase</ref>(a_file,<sp/>a_line),</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers_(matchers),</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>extra_matcher_<sp/>should<sp/>match<sp/>anything.<sp/><sp/>However,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>cannot<sp/>initialize<sp/>it<sp/>with<sp/>_<sp/>as<sp/>that<sp/>triggers<sp/>a<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bug<sp/>in<sp/>Symbian&apos;s<sp/>C++<sp/>compiler<sp/>(cannot<sp/>decide<sp/>between<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overloaded<sp/>constructors<sp/>of<sp/>Matcher&lt;const<sp/>ArgumentTuple&amp;&gt;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_matcher_(A&lt;const<sp/>ArgumentTuple&amp;&gt;())<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.With()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref>&amp;<sp/>With(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ArgumentTuple&amp;&gt;</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Makes<sp/>sure<sp/>this<sp/>is<sp/>called<sp/>at<sp/>most<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;<sp/>kWith,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.With()<sp/>cannot<sp/>appear<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;more<sp/>than<sp/>once<sp/>in<sp/>an<sp/>ON_CALL().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kWith;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>extra_matcher_<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.WillByDefault()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec</ref>&amp;<sp/>WillByDefault(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;<sp/>kWillByDefault,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillByDefault()<sp/>must<sp/>appear<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;exactly<sp/>once<sp/>in<sp/>an<sp/>ON_CALL().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kWillByDefault;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectSpecProperty(!action.IsDoDefault(),</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DoDefault()<sp/>cannot<sp/>be<sp/>used<sp/>in<sp/>ON_CALL().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>action_<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>given<sp/>arguments<sp/>match<sp/>the<sp/>matchers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Matches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TupleMatches(matchers_,<sp/>args)<sp/>&amp;&amp;<sp/>extra_matcher_.Matches(args);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>action<sp/>specified<sp/>by<sp/>the<sp/>user.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>GetAction()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertSpecProperty(last_clause_<sp/>==<sp/>kWillByDefault,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillByDefault()<sp/>must<sp/>appear<sp/>exactly<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;once<sp/>in<sp/>an<sp/>ON_CALL().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>action_;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>information<sp/>in<sp/>statement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>ON_CALL(mock_object,<sp/>Method(matchers))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.With(multi-argument-matcher)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(action);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>recorded<sp/>in<sp/>the<sp/>data<sp/>members<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>source<sp/>file<sp/>that<sp/>contains<sp/>the<sp/>statement<sp/>=&gt;<sp/>file_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>line<sp/>number<sp/>of<sp/>the<sp/>statement<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>line_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>matchers<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>matchers_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>multi-argument-matcher<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>extra_matcher_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>action<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=&gt;<sp/>action_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>ArgumentMatcherTuple<sp/>matchers_;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ArgumentTuple&amp;&gt;</ref><sp/>extra_matcher_;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref><sp/>action_;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>OnCallSpec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Possible<sp/>reactions<sp/>on<sp/>uninteresting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>CallReaction<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>kAllow,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>kWarn,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>kFail,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>kDefault<sp/>=<sp/>kWarn<sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>warn<sp/>about<sp/>uninteresting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>for<sp/>manipulating<sp/>mock<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classtesting_1_1_mock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1_mock" kindref="compound">Mock</ref><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>public<sp/>methods<sp/>can<sp/>be<sp/>called<sp/>concurrently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>Google<sp/>Mock<sp/>to<sp/>ignore<sp/>mock_obj<sp/>when<sp/>checking<sp/>for<sp/>leaked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mock<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllowLeak(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>and<sp/>clears<sp/>all<sp/>expectations<sp/>on<sp/>the<sp/>given<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>expectations<sp/>aren&apos;t<sp/>satisfied,<sp/>generates<sp/>one<sp/>or<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>non-fatal<sp/>failures<sp/>and<sp/>returns<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VerifyAndClearExpectations(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>all<sp/>expectations<sp/>on<sp/>the<sp/>given<sp/>mock<sp/>object<sp/>and<sp/>clears<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>default<sp/>actions<sp/>and<sp/>expectations.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>verification<sp/>was<sp/>successful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VerifyAndClear(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">internal::UntypedFunctionMockerBase</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Needed<sp/>for<sp/>a<sp/>function<sp/>mocker<sp/>to<sp/>register<sp/>itself<sp/>(so<sp/>that<sp/>we<sp/>know</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>how<sp/>to<sp/>clear<sp/>a<sp/>mock<sp/>object).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">internal::FunctionMockerBase</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>M&gt;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>Google<sp/>Mock<sp/>to<sp/>allow<sp/>uninteresting<sp/>calls<sp/>on<sp/>the<sp/>given<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AllowUninterestingCalls(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>Google<sp/>Mock<sp/>to<sp/>warn<sp/>the<sp/>user<sp/>about<sp/>uninteresting<sp/>calls<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>given<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WarnUninterestingCalls(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>Google<sp/>Mock<sp/>to<sp/>fail<sp/>uninteresting<sp/>calls<sp/>on<sp/>the<sp/>given<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FailUninterestingCalls(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>Google<sp/>Mock<sp/>the<sp/>given<sp/>mock<sp/>object<sp/>is<sp/>being<sp/>destroyed<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>entry<sp/>in<sp/>the<sp/>call-reaction<sp/>table<sp/>should<sp/>be<sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnregisterCallReaction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>reaction<sp/>Google<sp/>Mock<sp/>will<sp/>have<sp/>on<sp/>uninteresting<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>made<sp/>on<sp/>the<sp/>given<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>internal::CallReaction<sp/>GetReactionOnUninterestingCalls(</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>all<sp/>expectations<sp/>on<sp/>the<sp/>given<sp/>mock<sp/>object<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>satisfied.<sp/><sp/>Reports<sp/>one<sp/>or<sp/>more<sp/>Google<sp/>Test<sp/>non-fatal<sp/>failures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>returns<sp/>false<sp/>if<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>VerifyAndClearExpectationsLocked(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clears<sp/>all<sp/>ON_CALL()s<sp/>set<sp/>on<sp/>the<sp/>given<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearDefaultActionsLocked(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>a<sp/>mock<sp/>object<sp/>and<sp/>a<sp/>mock<sp/>method<sp/>it<sp/>owns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Register(</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj,</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">internal::UntypedFunctionMockerBase</ref>*<sp/>mocker)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>Google<sp/>Mock<sp/>where<sp/>in<sp/>the<sp/>source<sp/>code<sp/>mock_obj<sp/>is<sp/>used<sp/>in<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ON_CALL<sp/>or<sp/>EXPECT_CALL.<sp/><sp/>In<sp/>case<sp/>mock_obj<sp/>is<sp/>leaked,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>information<sp/>helps<sp/>the<sp/>user<sp/>identify<sp/>which<sp/>object<sp/>it<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RegisterUseByOnCallOrExpectCall(</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mock_obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unregisters<sp/>a<sp/>mock<sp/>method;<sp/>removes<sp/>the<sp/>owning<sp/>mock<sp/>object<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>registry<sp/>when<sp/>the<sp/>last<sp/>mock<sp/>method<sp/>associated<sp/>with<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>unregistered.<sp/><sp/>This<sp/>is<sp/>called<sp/>only<sp/>in<sp/>the<sp/>destructor<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FunctionMockerBase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UnregisterLocked(<ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">internal::UntypedFunctionMockerBase</ref>*<sp/>mocker)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(internal::g_gmock_mutex);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>Mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>abstract<sp/>handle<sp/>of<sp/>an<sp/>expectation.<sp/><sp/>Useful<sp/>in<sp/>the<sp/>.After()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clause<sp/>of<sp/>EXPECT_CALL()<sp/>for<sp/>setting<sp/>the<sp/>(partial)<sp/>order<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expectations.<sp/><sp/>The<sp/>syntax:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expectation<sp/>e1<sp/>=<sp/>EXPECT_CALL(...)...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(...).After(e1)...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sets<sp/>two<sp/>expectations<sp/>where<sp/>the<sp/>latter<sp/>can<sp/>only<sp/>be<sp/>matched<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>former<sp/>has<sp/>been<sp/>satisfied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Notes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>This<sp/>class<sp/>is<sp/>copyable<sp/>and<sp/>has<sp/>value<sp/>semantics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>Constness<sp/>is<sp/>shallow:<sp/>a<sp/>const<sp/>Expectation<sp/>object<sp/>itself<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>be<sp/>modified,<sp/>but<sp/>the<sp/>mutable<sp/>methods<sp/>of<sp/>the<sp/>ExpectationBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>object<sp/>it<sp/>references<sp/>can<sp/>be<sp/>called<sp/>via<sp/>expectation_base().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>The<sp/>constructors<sp/>and<sp/>destructor<sp/>are<sp/>defined<sp/>out-of-line<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>the<sp/>Symbian<sp/>WINSCW<sp/>compiler<sp/>wants<sp/>to<sp/>otherwise<sp/>instantiate<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>when<sp/>it<sp/>sees<sp/>this<sp/>class<sp/>definition,<sp/>at<sp/>which<sp/>point<sp/>it<sp/>doesn&apos;t<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ExpectationBase<sp/>available<sp/>yet,<sp/>leading<sp/>to<sp/>incorrect<sp/>destruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>linked_ptr<sp/>(or<sp/>compilation<sp/>errors<sp/>if<sp/>using<sp/>a<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>linked_ptr).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="classtesting_1_1_expectation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>null<sp/>object<sp/>that<sp/>doesn&apos;t<sp/>reference<sp/>any<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>~<ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>single-argument<sp/>ctor<sp/>must<sp/>not<sp/>be<sp/>explicit,<sp/>in<sp/>order<sp/>to<sp/>support<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Expectation<sp/>e<sp/>=<sp/>EXPECT_CALL(...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>TypedExpectation<sp/>object<sp/>stores<sp/>its<sp/>pre-requisites<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expectation<sp/>objects,<sp/>and<sp/>needs<sp/>to<sp/>call<sp/>the<sp/>non-const<sp/>Retire()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>method<sp/>on<sp/>the<sp/>ExpectationBase<sp/>objects<sp/>they<sp/>reference.<sp/><sp/>Therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expectation<sp/>must<sp/>receive<sp/>a<sp/>*non-const*<sp/>reference<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ExpectationBase<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>(<ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">internal::ExpectationBase</ref>&amp;<sp/>exp);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compiler-generated<sp/>copy<sp/>ctor<sp/>and<sp/>operator=<sp/>work<sp/>exactly<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intended,<sp/>so<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>define<sp/>our<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>rhs<sp/>references<sp/>the<sp/>same<sp/>expectation<sp/>as<sp/>this<sp/>object<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expectation_base_<sp/>==<sp/>rhs.expectation_base_;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::internal::ExpectationBase;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::internal::UntypedFunctionMockerBase;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::internal::FunctionMockerBase;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::internal::TypedExpectation;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>comparator<sp/>is<sp/>needed<sp/>for<sp/>putting<sp/>Expectation<sp/>objects<sp/>into<sp/>a<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Less<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.expectation_base_.get()<sp/>&lt;<sp/>rhs.expectation_base_.get();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>typedef<sp/>::std::set&lt;Expectation,<sp/>Less&gt;<sp/>Set;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>(</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">internal::linked_ptr&lt;internal::ExpectationBase&gt;</ref>&amp;<sp/>expectation_base);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>expectation<sp/>this<sp/>object<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">internal::linked_ptr&lt;internal::ExpectationBase&gt;</ref>&amp;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>expectation_base()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expectation_base_;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>linked_ptr<sp/>that<sp/>co-owns<sp/>the<sp/>expectation<sp/>this<sp/>handle<sp/>references.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">internal::linked_ptr&lt;internal::ExpectationBase&gt;</ref><sp/>expectation_base_;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">};</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>set<sp/>of<sp/>expectation<sp/>handles.<sp/><sp/>Useful<sp/>in<sp/>the<sp/>.After()<sp/>clause<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_CALL()<sp/>for<sp/>setting<sp/>the<sp/>(partial)<sp/>order<sp/>of<sp/>expectations.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>syntax:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ExpectationSet<sp/>es;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>es<sp/>+=<sp/>EXPECT_CALL(...)...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>es<sp/>+=<sp/>EXPECT_CALL(...)...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(...).After(es)...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sets<sp/>three<sp/>expectations<sp/>where<sp/>the<sp/>last<sp/>one<sp/>can<sp/>only<sp/>be<sp/>matched</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>after<sp/>the<sp/>first<sp/>two<sp/>have<sp/>both<sp/>been<sp/>satisfied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>copyable<sp/>and<sp/>has<sp/>value<sp/>semantics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563" refid="classtesting_1_1_expectation_set" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>bidirectional<sp/>iterator<sp/>that<sp/>can<sp/>read<sp/>a<sp/>const<sp/>element<sp/>in<sp/>the<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Expectation::Set::const_iterator<sp/>const_iterator;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>object<sp/>stored<sp/>in<sp/>the<sp/>set.<sp/><sp/>This<sp/>is<sp/>an<sp/>alias<sp/>of<sp/>Expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Expectation::Set::value_type<sp/>value_type;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>empty<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>single-argument<sp/>ctor<sp/>must<sp/>not<sp/>be<sp/>explicit,<sp/>in<sp/>order<sp/>to<sp/>support<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>ExpectationSet<sp/>es<sp/>=<sp/>EXPECT_CALL(...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>syntax.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>(<ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">internal::ExpectationBase</ref>&amp;<sp/>exp)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>(exp);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>single-argument<sp/>ctor<sp/>implements<sp/>implicit<sp/>conversion<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expectation<sp/>and<sp/>thus<sp/>must<sp/>not<sp/>be<sp/>explicit.<sp/><sp/>This<sp/>allows<sp/>either<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expectation<sp/>or<sp/>an<sp/>ExpectationSet<sp/>to<sp/>be<sp/>used<sp/>in<sp/>.After().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>&amp;<sp/>e)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/>e;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compiler-generator<sp/>ctor<sp/>and<sp/>operator=<sp/>works<sp/>exactly<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>intended,<sp/>so<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>define<sp/>our<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>rhs<sp/>contains<sp/>the<sp/>same<sp/>set<sp/>of<sp/>Expectation<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>this<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expectations_<sp/>==<sp/>rhs.expectations_;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>expectation_set<sp/>+=<sp/>EXPECT_CALL(...);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>operator+=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>expectations_.insert(e);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(expectations_.size());<sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expectations_.begin();<sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expectations_.end();<sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>Expectation::Set<sp/>expectations_;</highlight></codeline>
<codeline lineno="613"><highlight class="normal">};</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sequence<sp/>objects<sp/>are<sp/>used<sp/>by<sp/>a<sp/>user<sp/>to<sp/>specify<sp/>the<sp/>relative<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>which<sp/>the<sp/>expectations<sp/>should<sp/>match.<sp/><sp/>They<sp/>are<sp/>copyable<sp/>(we<sp/>rely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>compiler-defined<sp/>copy<sp/>constructor<sp/>and<sp/>assignment<sp/>operator).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619" refid="classtesting_1_1_sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>empty<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>()<sp/>:<sp/>last_expectation_(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>an<sp/>expectation<sp/>to<sp/>this<sp/>sequence.<sp/><sp/>The<sp/>caller<sp/>must<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>no<sp/>other<sp/>thread<sp/>is<sp/>accessing<sp/>this<sp/>Sequence<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddExpectation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>&amp;<sp/>expectation)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>last<sp/>expectation<sp/>in<sp/>this<sp/>sequence.<sp/><sp/>We<sp/>use<sp/>a<sp/>linked_ptr<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>Sequence<sp/>objects<sp/>are<sp/>copyable<sp/>and<sp/>we<sp/>want<sp/>the<sp/>copies<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>aliases.<sp/><sp/>The<sp/>linked_ptr<sp/>allows<sp/>the<sp/>copies<sp/>to<sp/>co-own<sp/>and<sp/>share</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>Expectation<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">internal::linked_ptr&lt;Expectation&gt;</ref><sp/>last_expectation_;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>object<sp/>of<sp/>this<sp/>type<sp/>causes<sp/>all<sp/>EXPECT_CALL()<sp/>statements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>encountered<sp/>in<sp/>its<sp/>scope<sp/>to<sp/>be<sp/>put<sp/>in<sp/>an<sp/>anonymous<sp/>sequence.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>work<sp/>is<sp/>done<sp/>in<sp/>the<sp/>constructor<sp/>and<sp/>destructor.<sp/><sp/>You<sp/>should<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>an<sp/>InSequence<sp/>object<sp/>on<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>sole<sp/>purpose<sp/>for<sp/>this<sp/>class<sp/>is<sp/>to<sp/>support<sp/>easy<sp/>definition<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>sequential<sp/>expectations,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>InSequence<sp/>dummy;<sp/><sp/>//<sp/>The<sp/>name<sp/>of<sp/>the<sp/>object<sp/>doesn&apos;t<sp/>matter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>The<sp/>following<sp/>expectations<sp/>must<sp/>match<sp/>in<sp/>the<sp/>order<sp/>they<sp/>appear.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>Bar())...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(a,<sp/>Baz())...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_CALL(b,<sp/>Xyz())...;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>create<sp/>InSequence<sp/>objects<sp/>in<sp/>multiple<sp/>threads,<sp/>as<sp/>long<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>they<sp/>are<sp/>used<sp/>to<sp/>affect<sp/>different<sp/>mock<sp/>objects.<sp/><sp/>The<sp/>idea<sp/>is<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>thread<sp/>can<sp/>create<sp/>and<sp/>set<sp/>up<sp/>its<sp/>own<sp/>mocks<sp/>as<sp/>if<sp/>it&apos;s<sp/>the<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>thread.<sp/><sp/>However,<sp/>for<sp/>clarity<sp/>of<sp/>your<sp/>tests<sp/>we<sp/>recommend<sp/>you<sp/>to<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//<sp/>up<sp/>mocks<sp/>in<sp/>the<sp/>main<sp/>thread<sp/>unless<sp/>you<sp/>have<sp/>a<sp/>good<sp/>reason<sp/>not<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660" refid="classtesting_1_1_in_sequence" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>();</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>~<ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sequence_created_;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">}<sp/>GTEST_ATTRIBUTE_UNUSED_;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Points<sp/>to<sp/>the<sp/>implicit<sp/>sequence<sp/>introduced<sp/>by<sp/>a<sp/>living<sp/>InSequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>object<sp/>(if<sp/>any)<sp/>in<sp/>the<sp/>current<sp/>thread<sp/>or<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ThreadLocal&lt;Sequence*&gt;<sp/>g_gmock_implicit_sequence;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>implementing<sp/>expectations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>two<sp/>reasons<sp/>for<sp/>having<sp/>a<sp/>type-agnostic<sp/>base<sp/>class<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expectation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>We<sp/>need<sp/>to<sp/>store<sp/>collections<sp/>of<sp/>expectations<sp/>of<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>types<sp/>(e.g.<sp/>all<sp/>pre-requisites<sp/>of<sp/>a<sp/>particular<sp/>expectation,<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>expectations<sp/>in<sp/>a<sp/>sequence).<sp/><sp/>Therefore<sp/>these<sp/>expectation<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>must<sp/>share<sp/>a<sp/>common<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>We<sp/>can<sp/>avoid<sp/>binary<sp/>code<sp/>bloat<sp/>by<sp/>moving<sp/>methods<sp/>not<sp/>depending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>on<sp/>the<sp/>template<sp/>argument<sp/>of<sp/>Expectation<sp/>to<sp/>the<sp/>base<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>internal<sp/>and<sp/>mustn&apos;t<sp/>be<sp/>used<sp/>by<sp/>user<sp/>code<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690" refid="classtesting_1_1internal_1_1_expectation_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTEST_API_<sp/><ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>source_text<sp/>is<sp/>the<sp/>EXPECT_CALL(...)<sp/>source<sp/>that<sp/>created<sp/>this<sp/>Expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>source_text);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref>();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Where<sp/>in<sp/>the<sp/>source<sp/>file<sp/>was<sp/>the<sp/>expectation<sp/>spec<sp/>defined?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file_;<sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line_;<sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>source_text()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>source_text_.c_str();<sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>cardinality<sp/>specified<sp/>in<sp/>the<sp/>expectation<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref>&amp;<sp/>cardinality()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cardinality_;<sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>the<sp/>source<sp/>file<sp/>location<sp/>of<sp/>this<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeLocationTo(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>FormatFileLocation(file(),<sp/>line())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>how<sp/>many<sp/>times<sp/>a<sp/>function<sp/>call<sp/>matching<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation<sp/>has<sp/>occurred.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeCallCountTo(::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>mock<sp/>method<sp/>has<sp/>an<sp/>extra<sp/>matcher<sp/>(i.e.<sp/>.With(matcher)),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>describes<sp/>it<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaybeDescribeExtraMatcherTo(::std::ostream*<sp/>os)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::Expectation;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">UntypedFunctionMockerBase</ref>;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Clause<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>change<sp/>the<sp/>order<sp/>of<sp/>the<sp/>enum<sp/>members!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>kNone,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>kWith,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>kTimes,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>kInSequence,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>kAfter,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>kWillOnce,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>kWillRepeatedly,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>kRetiresOnSaturation</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;const<sp/>void*&gt;<sp/>UntypedActions;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>Expectation<sp/>object<sp/>that<sp/>references<sp/>and<sp/>co-owns<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref><sp/>GetHandle()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>the<sp/>EXPECT_CALL()<sp/>statement<sp/>has<sp/>the<sp/>given<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertSpecProperty(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>failure_message)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(property,<sp/>file_,<sp/>line_,<sp/>failure_message);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expects<sp/>that<sp/>the<sp/>EXPECT_CALL()<sp/>statement<sp/>has<sp/>the<sp/>given<sp/>property.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExpectSpecProperty(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>property,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>failure_message)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>Expect(property,<sp/>file_,<sp/>line_,<sp/>failure_message);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Explicitly<sp/>specifies<sp/>the<sp/>cardinality<sp/>of<sp/>this<sp/>expectation.<sp/><sp/>Used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>subclasses<sp/>to<sp/>implement<sp/>the<sp/>.Times()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SpecifyCardinality(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref>&amp;<sp/>cardinality);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>user<sp/>specified<sp/>the<sp/>cardinality<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>a<sp/>.Times().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cardinality_specified()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cardinality_specified_;<sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>cardinality<sp/>of<sp/>this<sp/>expectation<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_cardinality(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref>&amp;<sp/>a_cardinality)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>cardinality_<sp/>=<sp/>a_cardinality;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>group<sp/>of<sp/>methods<sp/>should<sp/>only<sp/>be<sp/>called<sp/>after<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_CALL()<sp/>statement,<sp/>and<sp/>only<sp/>when<sp/>g_gmock_mutex<sp/>is<sp/>held<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retires<sp/>all<sp/>pre-requisites<sp/>of<sp/>this<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RetireAllPreRequisites()</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>expectation<sp/>is<sp/>retired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_retired()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retired_;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Retires<sp/>this<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Retire()</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>retired_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>expectation<sp/>is<sp/>satisfied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSatisfied()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cardinality().IsSatisfiedByCallCount(call_count_);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>expectation<sp/>is<sp/>saturated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSaturated()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cardinality().IsSaturatedByCallCount(call_count_);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>expectation<sp/>is<sp/>over-saturated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsOverSaturated()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cardinality().IsOverSaturatedByCallCount(call_count_);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>all<sp/>pre-requisites<sp/>of<sp/>this<sp/>expectation<sp/>are<sp/>satisfied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AllPrerequisitesAreSatisfied()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>unsatisfied<sp/>pre-requisites<sp/>of<sp/>this<sp/>expectation<sp/>to<sp/>&apos;result&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FindUnsatisfiedPrerequisites(<ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>*<sp/>result)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>this<sp/>expectation<sp/>has<sp/>been<sp/>invoked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>call_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>call_count_;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>number<sp/>this<sp/>expectation<sp/>has<sp/>been<sp/>invoked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IncrementCallCount()</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>call_count_++;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Checks<sp/>the<sp/>action<sp/>count<sp/>(i.e.<sp/>the<sp/>number<sp/>of<sp/>WillOnce()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>WillRepeatedly()<sp/>clauses)<sp/>against<sp/>the<sp/>cardinality<sp/>if<sp/>this<sp/>hasn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>been<sp/>done<sp/>before.<sp/><sp/>Prints<sp/>a<sp/>warning<sp/>if<sp/>there<sp/>are<sp/>too<sp/>many<sp/>or<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>few<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckActionCountIfNotDone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(mutex_);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::Sequence;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>class<sp/>::testing::internal::ExpectationTester;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.Times()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UntypedTimes(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref>&amp;<sp/>a_cardinality);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>group<sp/>of<sp/>fields<sp/>are<sp/>part<sp/>of<sp/>the<sp/>spec<sp/>and<sp/>won&apos;t<sp/>change<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>EXPECT_CALL()<sp/>statement<sp/>finishes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>file<sp/>that<sp/>contains<sp/>the<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>line<sp/>number<sp/>of<sp/>the<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>source_text_;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>EXPECT_CALL(...)<sp/>source<sp/>text.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>the<sp/>cardinality<sp/>is<sp/>specified<sp/>explicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>cardinality_specified_;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref><sp/>cardinality_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>cardinality<sp/>of<sp/>the<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>immediate<sp/>pre-requisites<sp/>(i.e.<sp/>expectations<sp/>that<sp/>must<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>satisfied<sp/>before<sp/>this<sp/>expectation<sp/>can<sp/>be<sp/>matched)<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation.<sp/><sp/>We<sp/>use<sp/>linked_ptr<sp/>in<sp/>the<sp/>set<sp/>because<sp/>we<sp/>want<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expectation<sp/>object<sp/>to<sp/>be<sp/>co-owned<sp/>by<sp/>its<sp/>FunctionMocker<sp/>and<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>successors.<sp/><sp/>This<sp/>allows<sp/>multiple<sp/>mock<sp/>objects<sp/>to<sp/>be<sp/>deleted<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>different<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref><sp/>immediate_prerequisites_;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>group<sp/>of<sp/>fields<sp/>are<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>expectation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>can<sp/>change<sp/>as<sp/>the<sp/>mock<sp/>function<sp/>is<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>call_count_;<sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>times<sp/>this<sp/>expectation<sp/>has<sp/>been<sp/>invoked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retired_;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>iff<sp/>this<sp/>expectation<sp/>has<sp/>retired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>UntypedActions<sp/>untyped_actions_;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>extra_matcher_specified_;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>repeated_action_specified_;<sp/><sp/></highlight><highlight class="comment">//<sp/>True<sp/>if<sp/>a<sp/>WillRepeatedly()<sp/>was<sp/>specified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retires_on_saturation_;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>Clause<sp/>last_clause_;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>action_count_checked_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Under<sp/>mutex_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_mutex" kindref="compound">Mutex</ref><sp/>mutex_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Protects<sp/>action_count_checked_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref>);</highlight></codeline>
<codeline lineno="873"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>ExpectationBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Impements<sp/>an<sp/>expectation<sp/>for<sp/>the<sp/>given<sp/>function<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentMatcherTuple</ref><sp/>ArgumentMatcherTuple;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>(<ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase&lt;F&gt;</ref>*<sp/>owner,</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>a_file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>a_source_text,</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentMatcherTuple&amp;<sp/>m)</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref>(a_file,<sp/>a_line,<sp/>a_source_text),</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>owner_(owner),</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchers_(m),</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>extra_matcher_<sp/>should<sp/>match<sp/>anything.<sp/><sp/>However,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>cannot<sp/>initialize<sp/>it<sp/>with<sp/>_<sp/>as<sp/>that<sp/>triggers<sp/>a<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bug<sp/>in<sp/>Symbian&apos;s<sp/>C++<sp/>compiler<sp/>(cannot<sp/>decide<sp/>between<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overloaded<sp/>constructors<sp/>of<sp/>Matcher&lt;const<sp/>ArgumentTuple&amp;&gt;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_matcher_(A&lt;const<sp/>ArgumentTuple&amp;&gt;()),</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeated_action_(DoDefault())<sp/>{}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>()<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>action<sp/>count<sp/>if<sp/>it<sp/>hasn&apos;t<sp/>been<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>yet<sp/>(for<sp/>example,<sp/>if<sp/>the<sp/>expectation<sp/>was<sp/>never<sp/>used).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckActionCountIfNotDone();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UntypedActions::const_iterator<sp/>it<sp/>=<sp/>untyped_actions_.begin();</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>untyped_actions_.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.With()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>With(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ArgumentTuple&amp;&gt;</ref>&amp;<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_clause_<sp/>==<sp/>kWith)<sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExpectSpecProperty(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.With()<sp/>cannot<sp/>appear<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;more<sp/>than<sp/>once<sp/>in<sp/>an<sp/>EXPECT_CALL().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;<sp/>kWith,</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.With()<sp/>must<sp/>be<sp/>the<sp/>first<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;clause<sp/>in<sp/>an<sp/>EXPECT_CALL().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kWith;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>extra_matcher_<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>extra_matcher_specified_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.Times()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>Times(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref>&amp;<sp/>a_cardinality)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectationBase::UntypedTimes(a_cardinality);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.Times()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>Times(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Times(Exactly(n));</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.InSequence()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;=<sp/>kInSequence,</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.InSequence()<sp/>cannot<sp/>appear<sp/>after<sp/>.After(),&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>.WillOnce(),<sp/>.WillRepeatedly(),<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.RetiresOnSaturation().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kInSequence;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>s.AddExpectation(GetHandle());</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(s1).InSequence(s2);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s2,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s3)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(s1,<sp/>s2).InSequence(s3);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s2,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s4)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(s1,<sp/>s2,<sp/>s3).InSequence(s4);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s2,</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s4,</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>&amp;<sp/>s5)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_in_sequence" kindref="compound">InSequence</ref>(s1,<sp/>s2,<sp/>s3,<sp/>s4).InSequence(s5);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>that<sp/>.After()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>After(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;=<sp/>kAfter,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.After()<sp/>cannot<sp/>appear<sp/>after<sp/>.WillOnce(),&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>.WillRepeatedly(),<sp/>or<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.RetiresOnSaturation().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kAfter;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ExpectationSet::const_iterator<sp/>it<sp/>=<sp/>s.begin();<sp/>it<sp/>!=<sp/>s.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>immediate_prerequisites_<sp/>+=<sp/>*it;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>After(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>After(s1).After(s2);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>After(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s2,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s3)<sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>After(s1,<sp/>s2).After(s3);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>After(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s2,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s4)<sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>After(s1,<sp/>s2,<sp/>s3).After(s4);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>After(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s2,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s4,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref>&amp;<sp/>s5)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>After(s1,<sp/>s2,<sp/>s3,<sp/>s4).After(s5);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.WillOnce()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>WillOnce(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;=<sp/>kWillOnce,</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillOnce()<sp/>cannot<sp/>appear<sp/>after<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillRepeatedly()<sp/>or<sp/>.RetiresOnSaturation().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kWillOnce;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>untyped_actions_.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>(action));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cardinality_specified())<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_cardinality(Exactly(static_cast&lt;int&gt;(untyped_actions_.size())));</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.WillRepeatedly()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>WillRepeatedly(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>action)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_clause_<sp/>==<sp/>kWillRepeatedly)<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExpectSpecProperty(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillRepeatedly()<sp/>cannot<sp/>appear<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;more<sp/>than<sp/>once<sp/>in<sp/>an<sp/>EXPECT_CALL().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;<sp/>kWillRepeatedly,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.WillRepeatedly()<sp/>cannot<sp/>appear<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;after<sp/>.RetiresOnSaturation().&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kWillRepeatedly;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>repeated_action_specified_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>repeated_action_<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cardinality_specified())<sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_cardinality(AtLeast(static_cast&lt;int&gt;(untyped_actions_.size())));</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>no<sp/>more<sp/>action<sp/>clauses<sp/>can<sp/>be<sp/>specified,<sp/>we<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whether<sp/>their<sp/>count<sp/>makes<sp/>sense.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckActionCountIfNotDone();</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>.RetiresOnSaturation()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>&amp;<sp/>RetiresOnSaturation()<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>ExpectSpecProperty(last_clause_<sp/>&lt;<sp/>kRetiresOnSaturation,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;.RetiresOnSaturation()<sp/>cannot<sp/>appear<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;more<sp/>than<sp/>once.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>last_clause_<sp/>=<sp/>kRetiresOnSaturation;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>retires_on_saturation_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>that<sp/>no<sp/>more<sp/>action<sp/>clauses<sp/>can<sp/>be<sp/>specified,<sp/>we<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whether<sp/>their<sp/>count<sp/>makes<sp/>sense.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckActionCountIfNotDone();</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>matchers<sp/>for<sp/>the<sp/>arguments<sp/>as<sp/>specified<sp/>inside<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_CALL()<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentMatcherTuple&amp;<sp/>matchers()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matchers_;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>matcher<sp/>specified<sp/>by<sp/>the<sp/>.With()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ArgumentTuple&amp;&gt;</ref>&amp;<sp/>extra_matcher()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>extra_matcher_;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>action<sp/>specified<sp/>by<sp/>the<sp/>.WillRepeatedly()<sp/>clause.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>repeated_action()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repeated_action_;<sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>mock<sp/>method<sp/>has<sp/>an<sp/>extra<sp/>matcher<sp/>(i.e.<sp/>.With(matcher)),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>describes<sp/>it<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MaybeDescribeExtraMatcherTo(::std::ostream*<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra_matcher_specified_)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Expected<sp/>args:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase</ref>;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>Expectation<sp/>object<sp/>that<sp/>references<sp/>and<sp/>co-owns<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref><sp/>GetHandle()<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>owner_-&gt;GetHandleOf(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>methods<sp/>will<sp/>be<sp/>called<sp/>only<sp/>after<sp/>the<sp/>EXPECT_CALL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>statement<sp/>finishes<sp/>and<sp/>when<sp/>the<sp/>current<sp/>thread<sp/>holds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>g_gmock_mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>expectation<sp/>matches<sp/>the<sp/>given<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Matches(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TupleMatches(matchers_,<sp/>args)<sp/>&amp;&amp;<sp/>extra_matcher_.Matches(args);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>expectation<sp/>should<sp/>handle<sp/>the<sp/>given<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ShouldHandleArguments(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>the<sp/>action<sp/>count<sp/>wasn&apos;t<sp/>checked<sp/>when<sp/>the<sp/>expectation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>defined<sp/>(e.g.<sp/>if<sp/>this<sp/>expectation<sp/>has<sp/>no<sp/>WillRepeatedly()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>RetiresOnSaturation()<sp/>clause),<sp/>we<sp/>check<sp/>it<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation<sp/>is<sp/>used<sp/>for<sp/>the<sp/>first<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckActionCountIfNotDone();</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!is_retired()<sp/>&amp;&amp;<sp/>AllPrerequisitesAreSatisfied()<sp/>&amp;&amp;<sp/>Matches(args);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>the<sp/>result<sp/>of<sp/>matching<sp/>the<sp/>arguments<sp/>against<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation<sp/>to<sp/>the<sp/>given<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExplainMatchResultTo(</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_retired())<sp/>{</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>the<sp/>expectation<sp/>is<sp/>active\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>it<sp/>is<sp/>retired\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Matches(args))<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!TupleMatches(matchers_,<sp/>args))<sp/>{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExplainMatchFailureTupleTo(matchers_,<sp/>args,<sp/>os);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_string_match_result_listener" kindref="compound">StringMatchResultListener</ref><sp/>listener;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!extra_matcher_.MatchAndExplain(args,<sp/>&amp;listener))<sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Expected<sp/>args:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra_matcher_.DescribeTo(os);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>don&apos;t<sp/>match&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::PrintIfNotEmpty(listener.str(),<sp/>os);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AllPrerequisitesAreSatisfied())<sp/>{</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expected:<sp/>all<sp/>pre-requisites<sp/>are<sp/>satisfied\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Actual:<sp/>the<sp/>following<sp/>immediate<sp/>pre-requisites<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;are<sp/>not<sp/>satisfied:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_expectation_set" kindref="compound">ExpectationSet</ref><sp/>unsatisfied_prereqs;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FindUnsatisfiedPrerequisites(&amp;unsatisfied_prereqs);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ExpectationSet::const_iterator<sp/>it<sp/>=<sp/>unsatisfied_prereqs.begin();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>unsatisfied_prereqs.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;expectation_base()-&gt;DescribeLocationTo(os);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;pre-requisite<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i++<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(end<sp/>of<sp/>pre-requisites)\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>is<sp/>here<sp/>just<sp/>for<sp/>completeness&apos;<sp/>sake.<sp/><sp/>It<sp/>will<sp/>never</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>executed<sp/>as<sp/>currently<sp/>the<sp/>ExplainMatchResultTo()<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>called<sp/>only<sp/>when<sp/>the<sp/>mock<sp/>function<sp/>call<sp/>does<sp/>NOT<sp/>match<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>call<sp/>matches<sp/>the<sp/>expectation.\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>action<sp/>that<sp/>should<sp/>be<sp/>taken<sp/>for<sp/>the<sp/>current<sp/>invocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>GetCurrentAction(</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase&lt;F&gt;</ref>*<sp/>mocker,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>call_count();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(count<sp/>&gt;=<sp/>1,<sp/>__FILE__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;call_count()<sp/>is<sp/>&lt;=<sp/>0<sp/>when<sp/>GetCurrentAction()<sp/>is<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;called<sp/>-<sp/>this<sp/>should<sp/>never<sp/>happen.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action_count<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_actions_.size());</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action_count<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!repeated_action_specified_<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>&gt;<sp/>action_count)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is<sp/>at<sp/>least<sp/>one<sp/>WillOnce()<sp/>and<sp/>no<sp/>WillRepeatedly(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>warn<sp/>the<sp/>user<sp/>when<sp/>the<sp/>WillOnce()<sp/>clauses<sp/>ran<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeLocationTo(&amp;ss);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Actions<sp/>ran<sp/>out<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>source_text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Called<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>times,<sp/>but<sp/>only<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>action_count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WillOnce()&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(action_count<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;s<sp/>are&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>specified<sp/>-<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mocker-&gt;DescribeDefaultActionTo(args,<sp/>&amp;ss);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Log(kWarning,<sp/>ss.str(),<sp/>1);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>&lt;=<sp/>action_count<sp/>?</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_actions_[count<sp/>-<sp/>1])<sp/>:</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeated_action();</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>arguments<sp/>of<sp/>a<sp/>mock<sp/>function<sp/>call,<sp/>if<sp/>the<sp/>call<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>over-saturate<sp/>this<sp/>expectation,<sp/>returns<sp/>the<sp/>default<sp/>action;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>returns<sp/>the<sp/>next<sp/>action<sp/>in<sp/>this<sp/>expectation.<sp/><sp/>Also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>describes<sp/>*what*<sp/>happened<sp/>to<sp/>&apos;what&apos;,<sp/>and<sp/>explains<sp/>*why*<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mock<sp/>does<sp/>it<sp/>to<sp/>&apos;why&apos;.<sp/><sp/>This<sp/>method<sp/>is<sp/>not<sp/>const<sp/>as<sp/>it<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IncrementCallCount().<sp/><sp/>A<sp/>return<sp/>value<sp/>of<sp/>NULL<sp/>means<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>*<sp/>GetActionForArguments(</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase&lt;F&gt;</ref>*<sp/>mocker,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>what,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>why)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsSaturated())<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>an<sp/>excessive<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IncrementCallCount();</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*what<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>called<sp/>more<sp/>times<sp/>than<sp/>expected<sp/>-<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mocker-&gt;DescribeDefaultActionTo(args,<sp/>what);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DescribeCallCountTo(why);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(wan@google.com):<sp/>allow<sp/>the<sp/>user<sp/>to<sp/>control<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unexpected<sp/>calls<sp/>should<sp/>fail<sp/>immediately<sp/>or<sp/>continue<sp/>using<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>--gmock_unexpected_calls_are_fatal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>IncrementCallCount();</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>RetireAllPreRequisites();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retires_on_saturation_<sp/>&amp;&amp;<sp/>IsSaturated())<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Retire();</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>done<sp/>after<sp/>IncrementCount()!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>*what<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Mock<sp/>function<sp/>call<sp/>matches<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>source_text()<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(GetCurrentAction(mocker,<sp/>args));</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>the<sp/>fields<sp/>below<sp/>won&apos;t<sp/>change<sp/>once<sp/>the<sp/>EXPECT_CALL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>statement<sp/>finishes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>owner_;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>ArgumentMatcherTuple<sp/>matchers_;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher&lt;const ArgumentTuple&amp;&gt;</ref><sp/>extra_matcher_;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref><sp/>repeated_action_;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>TypedExpectation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>MockSpec<sp/>object<sp/>is<sp/>used<sp/>by<sp/>ON_CALL()<sp/>or<sp/>EXPECT_CALL()<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifying<sp/>the<sp/>default<sp/>behavior<sp/>of,<sp/>or<sp/>expectation<sp/>on,<sp/>a<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>class<sp/>MockSpec<sp/>really<sp/>belongs<sp/>to<sp/>the<sp/>::testing<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>However<sp/>if<sp/>we<sp/>define<sp/>it<sp/>in<sp/>::testing,<sp/>MSVC<sp/>will<sp/>complain<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>classes<sp/>in<sp/>::testing::internal<sp/>declare<sp/>it<sp/>as<sp/>a<sp/>friend<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template.<sp/><sp/>To<sp/>workaround<sp/>this<sp/>compiler<sp/>bug,<sp/>we<sp/>define<sp/>MockSpec<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::internal<sp/>and<sp/>import<sp/>it<sp/>into<sp/>::testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logs<sp/>a<sp/>message<sp/>including<sp/>file<sp/>and<sp/>line<sp/>number<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal">GTEST_API_<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LogWithLocation(testing::internal::LogSeverity<sp/>severity,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>message);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1246" refid="classtesting_1_1internal_1_1_mock_spec" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec</ref><sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">internal::Function&lt;F&gt;::ArgumentMatcherTuple</ref></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ArgumentMatcherTuple;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>MockSpec<sp/>object,<sp/>given<sp/>the<sp/>function<sp/>mocker<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>spec<sp/>is<sp/>associated<sp/>with.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec</ref>(<ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">internal::FunctionMockerBase&lt;F&gt;</ref>*<sp/>function_mocker)</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>function_mocker_(function_mocker)<sp/>{}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>new<sp/>default<sp/>action<sp/>spec<sp/>to<sp/>the<sp/>function<sp/>mocker<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>newly<sp/>created<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">internal::OnCallSpec&lt;F&gt;</ref>&amp;<sp/>InternalDefaultActionSetAt(</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>call)<sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>LogWithLocation(internal::kInfo,<sp/>file,<sp/>line,</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;ON_CALL(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>obj<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>call<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)<sp/>invoked&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function_mocker_-&gt;AddNewOnCallSpec(file,<sp/>line,<sp/>matchers_);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>new<sp/>expectation<sp/>spec<sp/>to<sp/>the<sp/>function<sp/>mocker<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>newly<sp/>created<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">internal::TypedExpectation&lt;F&gt;</ref>&amp;<sp/>InternalExpectedAt(</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>call)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>source_text(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;EXPECT_CALL(&quot;</highlight><highlight class="normal">)<sp/>+<sp/>obj<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>call<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>LogWithLocation(internal::kInfo,<sp/>file,<sp/>line,<sp/>source_text<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>invoked&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function_mocker_-&gt;AddNewExpectation(</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>line,<sp/>source_text,<sp/>matchers_);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_function_mocker" kindref="compound">internal::FunctionMocker</ref>;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetMatchers(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentMatcherTuple&amp;<sp/>matchers)<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>matchers_<sp/>=<sp/>matchers;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>function<sp/>mocker<sp/>that<sp/>owns<sp/>this<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">internal::FunctionMockerBase&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>function_mocker_;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>argument<sp/>matchers<sp/>specified<sp/>in<sp/>the<sp/>spec.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>ArgumentMatcherTuple<sp/>matchers_;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec</ref>);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>MockSpec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wrapper<sp/>type<sp/>for<sp/>generically<sp/>holding<sp/>an<sp/>ordinary<sp/>value<sp/>or<sp/>lvalue<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>T<sp/>is<sp/>not<sp/>a<sp/>reference<sp/>type,<sp/>it<sp/>must<sp/>be<sp/>copyable<sp/>or<sp/>movable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ReferenceOrValueWrapper&lt;T&gt;<sp/>is<sp/>movable,<sp/>and<sp/>will<sp/>also<sp/>be<sp/>copyable<sp/>unless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>T<sp/>is<sp/>a<sp/>move-only<sp/>value<sp/>type<sp/>(which<sp/>means<sp/>that<sp/>it<sp/>will<sp/>always<sp/>be<sp/>copyable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>current<sp/>platform<sp/>does<sp/>not<sp/>support<sp/>move<sp/>semantics).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>primary<sp/>template<sp/>defines<sp/>handling<sp/>for<sp/>values,<sp/>but<sp/>function<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comments<sp/>describe<sp/>the<sp/>contract<sp/>for<sp/>the<sp/>whole<sp/>template<sp/>(including</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specializations).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1302" refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">ReferenceOrValueWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>wrapper<sp/>from<sp/>the<sp/>given<sp/>value/reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">ReferenceOrValueWrapper</ref>(T<sp/>value)</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(::testing::internal::move(value))<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unwraps<sp/>and<sp/>returns<sp/>the<sp/>underlying<sp/>value/reference,<sp/>exactly<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>originally<sp/>passed.<sp/>The<sp/>behavior<sp/>of<sp/>calling<sp/>this<sp/>more<sp/>than<sp/>once<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>object<sp/>is<sp/>unspecified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>T<sp/>Unwrap()<sp/>{<sp/>return<sp/>::testing::internal::move(value_);<sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Provides<sp/>nondestructive<sp/>access<sp/>to<sp/>the<sp/>underlying<sp/>value/reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Always<sp/>returns<sp/>a<sp/>const<sp/>reference<sp/>(more<sp/>precisely,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>RemoveReference&lt;T&gt;&amp;).<sp/>The<sp/>behavior<sp/>of<sp/>calling<sp/>this<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calling<sp/>Unwrap<sp/>on<sp/>the<sp/>same<sp/>object<sp/>is<sp/>unspecified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>Peek()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>T<sp/>value_;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>lvalue<sp/>reference<sp/>types.<sp/>See<sp/>primary<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>documentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1329" refid="classtesting_1_1internal_1_1_reference_or_value_wrapper_3_01_t_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">ReferenceOrValueWrapper</ref>&lt;T&amp;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>for<sp/>debatable<sp/>pass-by-reference<sp/>lint<sp/>warning<sp/>(c-library-team</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>policy<sp/>precludes<sp/>NOLINT<sp/>in<sp/>this<sp/>context)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T&amp;<sp/>reference;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">ReferenceOrValueWrapper</ref>(reference<sp/>ref)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_ptr_(&amp;ref)<sp/>{}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>T&amp;<sp/>Unwrap()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*value_ptr_;<sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>Peek()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*value_ptr_;<sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>T*<sp/>value_ptr_;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>warns<sp/>about<sp/>using<sp/>&apos;this&apos;<sp/>in<sp/>base<sp/>member<sp/>initializer<sp/>list,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>temporarily<sp/>disable<sp/>the<sp/>warning.<sp/><sp/>We<sp/>have<sp/>to<sp/>do<sp/>it<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>entire<sp/>class<sp/>to<sp/>suppress<sp/>the<sp/>warning,<sp/>even<sp/>though<sp/>it&apos;s<sp/>about</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>constructor<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Saves<sp/>the<sp/>current<sp/>warning<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:4355)<sp/><sp/>//<sp/>Temporarily<sp/>disables<sp/>warning<sp/>4355.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>_MSV_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++<sp/>treats<sp/>the<sp/>void<sp/>type<sp/>specially.<sp/><sp/>For<sp/>example,<sp/>you<sp/>cannot<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>void-typed<sp/>variable<sp/>or<sp/>pass<sp/>a<sp/>void<sp/>value<sp/>to<sp/>a<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ActionResultHolder&lt;T&gt;<sp/>holds<sp/>a<sp/>value<sp/>of<sp/>type<sp/>T,<sp/>where<sp/>T<sp/>must<sp/>be<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyable<sp/>type<sp/>or<sp/>void<sp/>(T<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>default-constructable).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>hides<sp/>the<sp/>syntactic<sp/>difference<sp/>between<sp/>void<sp/>and<sp/>other<sp/>types,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>used<sp/>to<sp/>unify<sp/>the<sp/>code<sp/>for<sp/>invoking<sp/>both<sp/>void-returning<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-void-returning<sp/>mock<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Untyped<sp/>base<sp/>class<sp/>for<sp/>ActionResultHolder&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362" refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref><sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>held<sp/>value<sp/>as<sp/>an<sp/>action&apos;s<sp/>result<sp/>to<sp/>os.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintAsActionResult(::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>generic<sp/>definition<sp/>is<sp/>used<sp/>when<sp/>T<sp/>is<sp/>not<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1372" refid="classtesting_1_1internal_1_1_action_result_holder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref><sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>held<sp/>value.<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>more<sp/>than<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>T<sp/>Unwrap()<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_.Unwrap();</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>held<sp/>value<sp/>as<sp/>an<sp/>action&apos;s<sp/>result<sp/>to<sp/>os.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintAsActionResult(::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Returns:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>T<sp/>may<sp/>be<sp/>a<sp/>reference<sp/>type,<sp/>so<sp/>we<sp/>don&apos;t<sp/>use<sp/>UniversalPrint().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_universal_printer" kindref="compound">UniversalPrinter&lt;T&gt;::Print</ref>(result_.Peek(),<sp/>os);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>given<sp/>mock<sp/>function&apos;s<sp/>default<sp/>action<sp/>and<sp/>returns<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>in<sp/>a<sp/>new-ed<sp/>ActionResultHolder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>*<sp/>PerformDefaultAction(</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase&lt;F&gt;</ref>*<sp/>func_mocker,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref>&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>call_description)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>(<ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">Wrapper</ref>(</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_mocker-&gt;PerformDefaultAction(args,<sp/>call_description)));</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>given<sp/>action<sp/>and<sp/>returns<sp/>the<sp/>result<sp/>in<sp/>a<sp/>new-ed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ActionResultHolder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>*</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>PerformAction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>action,</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>(<ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">Wrapper</ref>(action.Perform(args)));</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">ReferenceOrValueWrapper&lt;T&gt;</ref><sp/><ref refid="classtesting_1_1internal_1_1_reference_or_value_wrapper" kindref="compound">Wrapper</ref>;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>(Wrapper<sp/>result)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>result_(::testing::internal::move(result))<sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>Wrapper<sp/>result_;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specialization<sp/>for<sp/>T<sp/>=<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1420" refid="classtesting_1_1internal_1_1_action_result_holder_3_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>&lt;void&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Unwrap()<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintAsActionResult(::std::ostream*<sp/></highlight><highlight class="comment">/*<sp/>os<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>given<sp/>mock<sp/>function&apos;s<sp/>default<sp/>action<sp/>and<sp/>returns<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>an<sp/>empty<sp/>ActionResultHolder*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>*<sp/>PerformDefaultAction(</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase&lt;F&gt;</ref>*<sp/>func_mocker,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref>&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>call_description)<sp/>{</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/>func_mocker-&gt;PerformDefaultAction(args,<sp/>call_description);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>given<sp/>action<sp/>and<sp/>returns<sp/>ownership<sp/>of<sp/>an<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ActionResultHolder*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>*<sp/>PerformAction(</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>&amp;<sp/>action,</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref>&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>action.Perform(args);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder</ref>);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>of<sp/>the<sp/>function<sp/>mocker<sp/>class<sp/>for<sp/>the<sp/>given<sp/>function<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>put<sp/>the<sp/>methods<sp/>in<sp/>this<sp/>class<sp/>instead<sp/>of<sp/>its<sp/>child<sp/>to<sp/>avoid<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>bloat.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_function_mocker_base" kindref="compound">UntypedFunctionMockerBase</ref><sp/>{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::Result</ref><sp/>Result;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentTuple</ref><sp/>ArgumentTuple;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1_function" kindref="compound">Function&lt;F&gt;::ArgumentMatcherTuple</ref><sp/>ArgumentMatcherTuple;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase</ref>()<sp/>:<sp/>current_spec_(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>destructor<sp/>verifies<sp/>that<sp/>all<sp/>expectations<sp/>on<sp/>this<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>have<sp/>been<sp/>satisfied.<sp/><sp/>If<sp/>not,<sp/>it<sp/>will<sp/>report<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-fatal<sp/>failures<sp/>for<sp/>the<sp/>violations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase</ref>()</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">MutexLock</ref><sp/>l(&amp;g_gmock_mutex);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>VerifyAndClearExpectationsLocked();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>Mock::UnregisterLocked(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearDefaultActionsLocked();</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ON_CALL<sp/>spec<sp/>that<sp/>matches<sp/>this<sp/>mock<sp/>function<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>given<sp/>arguments;<sp/>returns<sp/>NULL<sp/>if<sp/>no<sp/>matching<sp/>ON_CALL<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>=<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>*<sp/>FindOnCallSpec(</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UntypedOnCallSpecs::const_reverse_iterator<sp/>it</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>untyped_on_call_specs_.rbegin();</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>untyped_on_call_specs_.rend();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>*<sp/>spec<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec-&gt;Matches(args))</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spec;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>default<sp/>action<sp/>of<sp/>this<sp/>mock<sp/>function<sp/>on<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments<sp/>and<sp/>returns<sp/>the<sp/>result.<sp/>Asserts<sp/>(or<sp/>throws<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exceptions<sp/>are<sp/>enabled)<sp/>with<sp/>a<sp/>helpful<sp/>call<sp/>descrption<sp/>if<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>no<sp/>valid<sp/>return<sp/>value.<sp/>This<sp/>method<sp/>doesn&apos;t<sp/>depend<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mutable<sp/>state<sp/>of<sp/>this<sp/>object,<sp/>and<sp/>thus<sp/>can<sp/>be<sp/>called<sp/>concurrently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>locking.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>=<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>Result<sp/>PerformDefaultAction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>call_description)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>spec<sp/>=</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;FindOnCallSpec(args);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spec-&gt;GetAction().Perform(args);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>message<sp/>=<sp/>call_description<sp/>+</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n<sp/><sp/><sp/><sp/>The<sp/>mock<sp/>function<sp/>has<sp/>no<sp/>default<sp/>action<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;set,<sp/>and<sp/>its<sp/>return<sp/>type<sp/>has<sp/>no<sp/>default<sp/>value<sp/>set.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue&lt;Result&gt;::Exists</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(message);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>Assert(<ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue&lt;Result&gt;::Exists</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>-1,<sp/>message);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_default_value" kindref="compound">DefaultValue&lt;Result&gt;::Get</ref>();</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>default<sp/>action<sp/>with<sp/>the<sp/>given<sp/>arguments<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>action&apos;s<sp/>result.<sp/><sp/>The<sp/>call<sp/>description<sp/>string<sp/>will<sp/>be<sp/>used<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>error<sp/>message<sp/>to<sp/>describe<sp/>the<sp/>call<sp/>in<sp/>the<sp/>case<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>action<sp/>fails.<sp/><sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>=<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref>*<sp/>UntypedPerformDefaultAction(</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,<sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>point<sp/>to<sp/>an<sp/>ArgumentTuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>call_description)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args<sp/>=</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ArgumentTuple*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_args);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ResultHolder::PerformDefaultAction(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>args,<sp/>call_description);</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>the<sp/>given<sp/>action<sp/>with<sp/>the<sp/>given<sp/>arguments<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>action&apos;s<sp/>result.<sp/><sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>=<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_untyped_action_result_holder_base" kindref="compound">UntypedActionResultHolderBase</ref>*<sp/>UntypedPerformAction(</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_action,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>action<sp/>before<sp/>performing<sp/>it,<sp/>in<sp/>case<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>action<sp/>deletes<sp/>the<sp/>mock<sp/>object<sp/>(and<sp/>thus<sp/>deletes<sp/>itself).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref><sp/>action<sp/>=<sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_action);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args<sp/>=</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ArgumentTuple*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_args);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ResultHolder::PerformAction(action,<sp/>args);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>UntypedFunctionMockerBase::ClearDefaultActionsLocked():</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clears<sp/>the<sp/>ON_CALL()s<sp/>set<sp/>on<sp/>this<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearDefaultActionsLocked()</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deleting<sp/>our<sp/>default<sp/>actions<sp/>may<sp/>trigger<sp/>other<sp/>mock<sp/>objects<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deleted,<sp/>for<sp/>example<sp/>if<sp/>an<sp/>action<sp/>contains<sp/>a<sp/>reference<sp/>counted<sp/>smart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>to<sp/>that<sp/>mock<sp/>object,<sp/>and<sp/>that<sp/>is<sp/>the<sp/>last<sp/>reference.<sp/>So<sp/>if<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>our<sp/>actions<sp/>within<sp/>the<sp/>context<sp/>of<sp/>the<sp/>global<sp/>mutex<sp/>we<sp/>may<sp/>deadlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>this<sp/>method<sp/>is<sp/>called<sp/>again.<sp/>Instead,<sp/>make<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>set<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actions<sp/>to<sp/>delete,<sp/>clear<sp/>our<sp/>set<sp/>within<sp/>the<sp/>mutex,<sp/>and<sp/>then<sp/>delete<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actions<sp/>outside<sp/>of<sp/>the<sp/>mutex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>UntypedOnCallSpecs<sp/>specs_to_delete;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>untyped_on_call_specs_.swap(specs_to_delete);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.Unlock();</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(UntypedOnCallSpecs::const_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_to_delete.begin();</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>specs_to_delete.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>mutex<sp/>again,<sp/>since<sp/>the<sp/>caller<sp/>expects<sp/>it<sp/>to<sp/>be<sp/>locked<sp/>when<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.Lock();</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec</ref>;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_action_result_holder" kindref="compound">ActionResultHolder&lt;Result&gt;</ref><sp/>ResultHolder;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>invoking<sp/>this<sp/>mock<sp/>function<sp/>with<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments.<sp/><sp/>This<sp/>function<sp/>can<sp/>be<sp/>safely<sp/>called<sp/>from<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>threads<sp/>concurrently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/>Result<sp/>InvokeWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1scoped__ptr" kindref="compound">scoped_ptr&lt;ResultHolder&gt;</ref><sp/>holder(</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DownCast_&lt;ResultHolder*&gt;(this-&gt;UntypedInvokeWith(&amp;args)));</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>holder-&gt;Unwrap();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>and<sp/>returns<sp/>a<sp/>default<sp/>action<sp/>spec<sp/>for<sp/>this<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>&amp;<sp/>AddNewOnCallSpec(</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentMatcherTuple&amp;<sp/>m)</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>Mock::RegisterUseByOnCallOrExpectCall(MockObject(),<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>on_call_spec<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>(file,<sp/>line,<sp/>m);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/>untyped_on_call_specs_.push_back(on_call_spec);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*on_call_spec;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>and<sp/>returns<sp/>an<sp/>expectation<sp/>spec<sp/>for<sp/>this<sp/>mock<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>&amp;<sp/>AddNewExpectation(</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>source_text,</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentMatcherTuple&amp;<sp/>m)</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>Mock::RegisterUseByOnCallOrExpectCall(MockObject(),<sp/>file,<sp/>line);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expectation<sp/>=</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>file,<sp/>line,<sp/>source_text,<sp/>m);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1linked__ptr" kindref="compound">linked_ptr&lt;ExpectationBase&gt;</ref><sp/>untyped_expectation(expectation);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/>untyped_expectations_.push_back(untyped_expectation);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>this<sp/>expectation<sp/>into<sp/>the<sp/>implicit<sp/>sequence<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1_sequence" kindref="compound">Sequence</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>implicit_sequence<sp/>=<sp/>g_gmock_implicit_sequence.get();</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(implicit_sequence<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>implicit_sequence-&gt;AddExpectation(<ref refid="classtesting_1_1_expectation" kindref="compound">Expectation</ref>(untyped_expectation));</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*expectation;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>spec<sp/>(either<sp/>default<sp/>action<sp/>spec<sp/>or<sp/>expectation<sp/>spec)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>described<sp/>on<sp/>this<sp/>function<sp/>mocker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec&lt;F&gt;</ref>&amp;<sp/>current_spec()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current_spec_;<sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation</ref>;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>utilities<sp/>needed<sp/>for<sp/>implementing<sp/>UntypedInvokeWith().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Describes<sp/>what<sp/>default<sp/>action<sp/>will<sp/>be<sp/>performed<sp/>for<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>L<sp/>=<sp/>*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DescribeDefaultActionTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_on_call_spec" kindref="compound">OnCallSpec&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>spec<sp/>=<sp/>FindOnCallSpec(args);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(spec<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/>(internal::type_equals&lt;Result,<sp/>void&gt;::value<sp/>?</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;returning<sp/>directly.\n&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;returning<sp/>default<sp/>value.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;taking<sp/>default<sp/>action<sp/>specified<sp/>at:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>FormatFileLocation(spec-&gt;file(),<sp/>spec-&gt;line())<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writes<sp/>a<sp/>message<sp/>that<sp/>the<sp/>call<sp/>is<sp/>uninteresting<sp/>(i.e.<sp/>neither</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>explicitly<sp/>expected<sp/>nor<sp/>explicitly<sp/>unexpected)<sp/>to<sp/>the<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UntypedDescribeUninterestingCall(</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args<sp/>=</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ArgumentTuple*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_args);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>DescribeDefaultActionTo(args,<sp/>os);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Function<sp/>call:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Name();</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(args,<sp/>os);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>expectation<sp/>that<sp/>matches<sp/>the<sp/>given<sp/>function<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(or<sp/>NULL<sp/>is<sp/>there&apos;s<sp/>no<sp/>match);<sp/>when<sp/>a<sp/>match<sp/>is<sp/>found,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>untyped_action<sp/>is<sp/>set<sp/>to<sp/>point<sp/>to<sp/>the<sp/>action<sp/>that<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>performed<sp/>(or<sp/>NULL<sp/>if<sp/>the<sp/>action<sp/>is<sp/>&quot;do<sp/>default&quot;),<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is_excessive<sp/>is<sp/>modified<sp/>to<sp/>indicate<sp/>whether<sp/>the<sp/>call<sp/>exceeds<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expected<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Critical<sp/>section:<sp/>We<sp/>must<sp/>find<sp/>the<sp/>matching<sp/>expectation<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>corresponding<sp/>action<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>taken<sp/>in<sp/>an<sp/>ATOMIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>transaction.<sp/><sp/>Otherwise<sp/>another<sp/>thread<sp/>may<sp/>call<sp/>this<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>method<sp/>in<sp/>the<sp/>middle<sp/>and<sp/>mess<sp/>up<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>performing<sp/>the<sp/>action<sp/>has<sp/>to<sp/>be<sp/>left<sp/>out<sp/>of<sp/>the<sp/>critical</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>section.<sp/><sp/>The<sp/>reason<sp/>is<sp/>that<sp/>we<sp/>have<sp/>no<sp/>control<sp/>on<sp/>what<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>action<sp/>does<sp/>(it<sp/>can<sp/>invoke<sp/>an<sp/>arbitrary<sp/>user<sp/>function<sp/>or<sp/>even<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>mock<sp/>function)<sp/>and<sp/>excessive<sp/>locking<sp/>could<sp/>cause<sp/>a<sp/>dead<sp/>lock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">ExpectationBase</ref>*<sp/>UntypedFindMatchingExpectation(</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>untyped_action,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_excessive,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>what,<sp/>::std::ostream*<sp/>why)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_LOCK_EXCLUDED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args<sp/>=</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ArgumentTuple*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_args);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_g_test_mutex_lock" kindref="compound">MutexLock</ref><sp/>l(&amp;g_gmock_mutex);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>*<sp/>exp<sp/>=<sp/>this-&gt;FindMatchingExpectationLocked(args);</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp<sp/>==<sp/>NULL)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>match<sp/>wasn&apos;t<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;FormatUnexpectedCallMessageLocked(args,<sp/>what,<sp/>why);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>must<sp/>be<sp/>done<sp/>before<sp/>calling<sp/>GetActionForArguments(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>will<sp/>increment<sp/>the<sp/>call<sp/>count<sp/>for<sp/>*exp<sp/>and<sp/>thus<sp/>affect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>its<sp/>saturation<sp/>status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/>*is_excessive<sp/>=<sp/>exp-&gt;IsSaturated();</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;F&gt;</ref>*<sp/>action<sp/>=<sp/>exp-&gt;GetActionForArguments(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>args,<sp/>what,<sp/>why);</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>action-&gt;IsDoDefault())</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>action<sp/>=<sp/>NULL;<sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>&quot;do<sp/>default&quot;<sp/>to<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>*untyped_action<sp/>=<sp/>action;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>the<sp/>given<sp/>function<sp/>arguments<sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UntypedPrintArgs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>untyped_args,</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args<sp/>=</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">ArgumentTuple*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_args);</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>UniversalPrint(args,<sp/>os);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>expectation<sp/>that<sp/>matches<sp/>the<sp/>arguments,<sp/>or<sp/>NULL<sp/>if<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>expectation<sp/>matches<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>*<sp/>FindMatchingExpectationLocked(</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>UntypedExpectations::const_reverse_iterator<sp/>it<sp/>=</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>untyped_expectations_.rbegin();</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>untyped_expectations_.rend();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>exp<sp/>=</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(it-&gt;get());</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(exp-&gt;ShouldHandleArguments(args))<sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp;</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>message<sp/>that<sp/>the<sp/>arguments<sp/>don&apos;t<sp/>match<sp/>any<sp/>expectation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FormatUnexpectedCallMessageLocked(</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>os,</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>why)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>*os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nUnexpected<sp/>mock<sp/>function<sp/>call<sp/>-<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>DescribeDefaultActionTo(args,<sp/>os);</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintTriedExpectationsLocked(args,<sp/>why);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Prints<sp/>a<sp/>list<sp/>of<sp/>expectations<sp/>that<sp/>have<sp/>been<sp/>tried<sp/>against<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>mock<sp/>function<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTriedExpectationsLocked(</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArgumentTuple&amp;<sp/>args,</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::std::ostream*<sp/>why)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_EXCLUSIVE_LOCK_REQUIRED_(g_gmock_mutex)<sp/>{</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>g_gmock_mutex.AssertHeld();</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_expectations_.size());</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>*why<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Google<sp/>Mock<sp/>tried<sp/>the<sp/>following<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(count<sp/>==<sp/>1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;expectation,<sp/>but<sp/>it<sp/>didn&apos;t<sp/>match&quot;</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;expectations,<sp/>but<sp/>none<sp/>matched&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expectation<sp/>=</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1_typed_expectation" kindref="compound">TypedExpectation&lt;F&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(untyped_expectations_[i].get());</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*why<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expectation-&gt;DescribeLocationTo(why);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*why<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tried<sp/>expectation<sp/>#&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*why<sp/>&lt;&lt;<sp/>expectation-&gt;source_text()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expectation-&gt;ExplainMatchResultTo(args,<sp/>why);</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expectation-&gt;DescribeCallCountTo(why);</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>spec<sp/>(either<sp/>default<sp/>action<sp/>spec<sp/>or<sp/>expectation<sp/>spec)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>being<sp/>described<sp/>on<sp/>this<sp/>function<sp/>mocker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">MockSpec&lt;F&gt;</ref><sp/>current_spec_;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>generally<sp/>useful<sp/>and<sp/>implementable<sp/>semantics<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>copying<sp/>a<sp/>mock<sp/>object,<sp/>so<sp/>copying<sp/>a<sp/>mock<sp/>is<sp/>usually<sp/>a<sp/>user<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Thus<sp/>we<sp/>disallow<sp/>copying<sp/>function<sp/>mockers.<sp/><sp/>If<sp/>the<sp/>user<sp/>really</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wants<sp/>to<sp/>copy<sp/>a<sp/>mock<sp/>object,<sp/>he<sp/>should<sp/>implement<sp/>his<sp/>own<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>operation,<sp/>for<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>class<sp/>MockFoo<sp/>:<sp/>public<sp/>Foo<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Defines<sp/>a<sp/>copy<sp/>constructor<sp/>explicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MockFoo(const<sp/>MockFoo&amp;<sp/>src)<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1internal_1_1_function_mocker_base" kindref="compound">FunctionMockerBase</ref>);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>class<sp/>FunctionMockerBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(pop)<sp/><sp/>//<sp/>Restores<sp/>the<sp/>warning<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>_MSV_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>methods<sp/>of<sp/>FunctionMockerBase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>all<sp/>expectations<sp/>on<sp/>this<sp/>mock<sp/>function<sp/>have<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>satisfied.<sp/><sp/>Reports<sp/>one<sp/>or<sp/>more<sp/>Google<sp/>Test<sp/>non-fatal<sp/>failures<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>false<sp/>if<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reports<sp/>an<sp/>uninteresting<sp/>call<sp/>(whose<sp/>description<sp/>is<sp/>in<sp/>msg)<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>manner<sp/>specified<sp/>by<sp/>&apos;reaction&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReportUninterestingCall(CallReaction<sp/>reaction,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>style<sp/>guide<sp/>prohibits<sp/>&quot;using&quot;<sp/>statements<sp/>in<sp/>a<sp/>namespace<sp/>scope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inside<sp/>a<sp/>header<sp/>file.<sp/><sp/>However,<sp/>the<sp/>MockSpec<sp/>class<sp/>template<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="comment">//<sp/>meant<sp/>to<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>::testing<sp/>namespace.<sp/><sp/>The<sp/>following<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>just<sp/>a<sp/>trick<sp/>for<sp/>working<sp/>around<sp/>a<sp/>bug<sp/>in<sp/>MSVC<sp/>8.0,<sp/>which<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handle<sp/>it<sp/>if<sp/>we<sp/>define<sp/>MockSpec<sp/>in<sp/>::testing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_mock_spec" kindref="compound">internal::MockSpec</ref>;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Const(x)<sp/>is<sp/>a<sp/>convenient<sp/>function<sp/>for<sp/>obtaining<sp/>a<sp/>const<sp/>reference</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>x.<sp/><sp/>This<sp/>is<sp/>useful<sp/>for<sp/>setting<sp/>expectations<sp/>on<sp/>an<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>mock<sp/>method,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>class<sp/>MockFoo<sp/>:<sp/>public<sp/>FooInterface<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>public:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MOCK_METHOD0(Bar,<sp/>int());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>MOCK_CONST_METHOD0(Bar,<sp/>int&amp;());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>MockFoo<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Expects<sp/>a<sp/>call<sp/>to<sp/>non-const<sp/>MockFoo::Bar().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(foo,<sp/>Bar());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Expects<sp/>a<sp/>call<sp/>to<sp/>const<sp/>MockFoo::Bar().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_CALL(Const(foo),<sp/>Bar());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>Const(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>Expectation<sp/>object<sp/>that<sp/>references<sp/>and<sp/>co-owns<sp/>exp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Expectation::Expectation(<ref refid="classtesting_1_1internal_1_1_expectation_base" kindref="compound">internal::ExpectationBase</ref>&amp;<sp/>exp)<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>expectation_base_(exp.GetHandle().expectation_base())<sp/>{}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>separate<sp/>macro<sp/>is<sp/>required<sp/>to<sp/>avoid<sp/>compile<sp/>errors<sp/>when<sp/>the<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>method<sp/>used<sp/>in<sp/>call<sp/>is<sp/>a<sp/>result<sp/>of<sp/>macro<sp/>expansion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>CompilesWithMethodNameExpandedFromMacro<sp/>tests<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight><highlight class="comment">//<sp/>internal/gmock-spec-builders_test.cc<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_ON_CALL_IMPL_(obj,<sp/>call)<sp/>\</highlight></codeline>
<codeline lineno="1839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((obj).gmock_##call).InternalDefaultActionSetAt(__FILE__,<sp/>__LINE__,<sp/>\</highlight></codeline>
<codeline lineno="1840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#obj,<sp/>#call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ON_CALL(obj,<sp/>call)<sp/>GMOCK_ON_CALL_IMPL_(obj,<sp/>call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GMOCK_EXPECT_CALL_IMPL_(obj,<sp/>call)<sp/>\</highlight></codeline>
<codeline lineno="1844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((obj).gmock_##call).InternalExpectedAt(__FILE__,<sp/>__LINE__,<sp/>#obj,<sp/>#call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_CALL(obj,<sp/>call)<sp/>GMOCK_EXPECT_CALL_IMPL_(obj,<sp/>call)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h"/>
  </compounddef>
</doxygen>
