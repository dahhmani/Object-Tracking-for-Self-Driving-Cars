<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structtesting_1_1_flags" kind="struct" language="C++" prot="public">
    <compoundname>testing::Flags</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structtesting_1_1_flags_1a8ebf8c68f918b9039926b569c880f910" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::also_run_disabled_tests</definition>
        <argsstring></argsstring>
        <name>also_run_disabled_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5588" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1acccce2a9673bb61751269d2ef9c21c89" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::break_on_failure</definition>
        <argsstring></argsstring>
        <name>break_on_failure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5589" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5589" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a06984d0553f09716e1bd9f159e7cc644" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::catch_exceptions</definition>
        <argsstring></argsstring>
        <name>catch_exceptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5590" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5590" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a7cdef4e6e102771fc15940931dd07e5c" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::death_test_use_fork</definition>
        <argsstring></argsstring>
        <name>death_test_use_fork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5591" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1aa52c1048a7e3cbe726ed4160f2e05d14" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* testing::Flags::filter</definition>
        <argsstring></argsstring>
        <name>filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5592" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5592" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a3c73f29131074146224018066379fb2f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::list_tests</definition>
        <argsstring></argsstring>
        <name>list_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5593" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5593" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a8c8289b3af9310744bc25280e3980e4b" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* testing::Flags::output</definition>
        <argsstring></argsstring>
        <name>output</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5594" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a8758d574ce5513402679df258f788733" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::print_time</definition>
        <argsstring></argsstring>
        <name>print_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5595" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a4728bce63433f711205fd7b427e57f1b" prot="public" static="no" mutable="no">
        <type>Int32</type>
        <definition>Int32 testing::Flags::random_seed</definition>
        <argsstring></argsstring>
        <name>random_seed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5596" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a61614dd07f97f6e04d27c004ff15195e" prot="public" static="no" mutable="no">
        <type>Int32</type>
        <definition>Int32 testing::Flags::repeat</definition>
        <argsstring></argsstring>
        <name>repeat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5597" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a51c689e47e0f55c16116ac2a1d3b05d6" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::shuffle</definition>
        <argsstring></argsstring>
        <name>shuffle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5598" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1a20c6592453909c1adace64bf6a2bc2de" prot="public" static="no" mutable="no">
        <type>Int32</type>
        <definition>Int32 testing::Flags::stack_trace_depth</definition>
        <argsstring></argsstring>
        <name>stack_trace_depth</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5599" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1ab09849fd3e095d5628dec65ec4dce9e1" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* testing::Flags::stream_result_to</definition>
        <argsstring></argsstring>
        <name>stream_result_to</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5600" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structtesting_1_1_flags_1ab8e7d21e31e641efe47b8050759e001a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool testing::Flags::throw_on_failure</definition>
        <argsstring></argsstring>
        <name>throw_on_failure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5601" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5601" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structtesting_1_1_flags_1a41dc8942bec08ebc7f74dee545e6ad7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::Flags::Flags</definition>
        <argsstring>()</argsstring>
        <name>Flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5458" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5458" bodyend="5471"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structtesting_1_1_flags_1a8bee2b5f94d8248b6791d6b005db146f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::AlsoRunDisabledTests</definition>
        <argsstring>(bool also_run_disabled_tests)</argsstring>
        <name>AlsoRunDisabledTests</name>
        <param>
          <type>bool</type>
          <declname>also_run_disabled_tests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5477" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5477" bodyend="5481"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a62660e44922321f7640bc951a04c2296" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::BreakOnFailure</definition>
        <argsstring>(bool break_on_failure)</argsstring>
        <name>BreakOnFailure</name>
        <param>
          <type>bool</type>
          <declname>break_on_failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5485" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5485" bodyend="5489"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a2c7d89f62f4328ae0ced66154ef96b44" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::CatchExceptions</definition>
        <argsstring>(bool catch_exceptions)</argsstring>
        <name>CatchExceptions</name>
        <param>
          <type>bool</type>
          <declname>catch_exceptions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5493" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5493" bodyend="5497"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a4468e5625833043596c44be174349d8c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::DeathTestUseFork</definition>
        <argsstring>(bool death_test_use_fork)</argsstring>
        <name>DeathTestUseFork</name>
        <param>
          <type>bool</type>
          <declname>death_test_use_fork</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5501" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5501" bodyend="5505"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1afc7350b7c1ac4c0e0efe2d9a94729eb7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::Filter</definition>
        <argsstring>(const char *filter)</argsstring>
        <name>Filter</name>
        <param>
          <type>const char *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5509" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5509" bodyend="5513"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a825a5d763a31fe6c28f543990bd336df" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::ListTests</definition>
        <argsstring>(bool list_tests)</argsstring>
        <name>ListTests</name>
        <param>
          <type>bool</type>
          <declname>list_tests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5517" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5517" bodyend="5521"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a507916734a6d7ff2dd02891d7849f2d3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::Output</definition>
        <argsstring>(const char *output)</argsstring>
        <name>Output</name>
        <param>
          <type>const char *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5525" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5525" bodyend="5529"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1af4dc8454995fb3691399a049e95de179" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::PrintTime</definition>
        <argsstring>(bool print_time)</argsstring>
        <name>PrintTime</name>
        <param>
          <type>bool</type>
          <declname>print_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5533" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5533" bodyend="5537"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a695cd8b8ab44df5eaa371bacded78c05" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::RandomSeed</definition>
        <argsstring>(Int32 random_seed)</argsstring>
        <name>RandomSeed</name>
        <param>
          <type>Int32</type>
          <declname>random_seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5541" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5541" bodyend="5545"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a19d47e87d77a18ef4fa8a85b74e25956" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::Repeat</definition>
        <argsstring>(Int32 repeat)</argsstring>
        <name>Repeat</name>
        <param>
          <type>Int32</type>
          <declname>repeat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5549" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5549" bodyend="5553"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a19ddbbaed61bda44a1940333b7c5a469" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::Shuffle</definition>
        <argsstring>(bool shuffle)</argsstring>
        <name>Shuffle</name>
        <param>
          <type>bool</type>
          <declname>shuffle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5557" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5557" bodyend="5561"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a16b01d8bcceaa9fa8211fd24faa75b5a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::StackTraceDepth</definition>
        <argsstring>(Int32 stack_trace_depth)</argsstring>
        <name>StackTraceDepth</name>
        <param>
          <type>Int32</type>
          <declname>stack_trace_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5565" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5565" bodyend="5569"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1a9cf0f64310b28eadbbfbb35584ebfc71" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::StreamResultTo</definition>
        <argsstring>(const char *stream_result_to)</argsstring>
        <name>StreamResultTo</name>
        <param>
          <type>const char *</type>
          <declname>stream_result_to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5573" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5573" bodyend="5577"/>
      </memberdef>
      <memberdef kind="function" id="structtesting_1_1_flags_1ad856df862414ed0dadf80b5e03829cc7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structtesting_1_1_flags" kindref="compound">Flags</ref></type>
        <definition>static Flags testing::Flags::ThrowOnFailure</definition>
        <argsstring>(bool throw_on_failure)</argsstring>
        <name>ThrowOnFailure</name>
        <param>
          <type>bool</type>
          <declname>throw_on_failure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5581" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5581" bodyend="5585"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="580">
        <label>Int32</label>
      </node>
      <node id="579">
        <label>testing::Flags</label>
        <link refid="structtesting_1_1_flags"/>
        <childnode refid="580" relation="usage">
          <edgelabel>stack_trace_depth</edgelabel>
          <edgelabel>repeat</edgelabel>
          <edgelabel>random_seed</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5456" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5456" bodyend="5602"/>
    <listofallmembers>
      <member refid="structtesting_1_1_flags_1a8ebf8c68f918b9039926b569c880f910" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>also_run_disabled_tests</name></member>
      <member refid="structtesting_1_1_flags_1a8bee2b5f94d8248b6791d6b005db146f" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>AlsoRunDisabledTests</name></member>
      <member refid="structtesting_1_1_flags_1acccce2a9673bb61751269d2ef9c21c89" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>break_on_failure</name></member>
      <member refid="structtesting_1_1_flags_1a62660e44922321f7640bc951a04c2296" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>BreakOnFailure</name></member>
      <member refid="structtesting_1_1_flags_1a06984d0553f09716e1bd9f159e7cc644" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>catch_exceptions</name></member>
      <member refid="structtesting_1_1_flags_1a2c7d89f62f4328ae0ced66154ef96b44" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>CatchExceptions</name></member>
      <member refid="structtesting_1_1_flags_1a7cdef4e6e102771fc15940931dd07e5c" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>death_test_use_fork</name></member>
      <member refid="structtesting_1_1_flags_1a4468e5625833043596c44be174349d8c" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>DeathTestUseFork</name></member>
      <member refid="structtesting_1_1_flags_1aa52c1048a7e3cbe726ed4160f2e05d14" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>filter</name></member>
      <member refid="structtesting_1_1_flags_1afc7350b7c1ac4c0e0efe2d9a94729eb7" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>Filter</name></member>
      <member refid="structtesting_1_1_flags_1a41dc8942bec08ebc7f74dee545e6ad7e" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>Flags</name></member>
      <member refid="structtesting_1_1_flags_1a3c73f29131074146224018066379fb2f" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>list_tests</name></member>
      <member refid="structtesting_1_1_flags_1a825a5d763a31fe6c28f543990bd336df" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>ListTests</name></member>
      <member refid="structtesting_1_1_flags_1a507916734a6d7ff2dd02891d7849f2d3" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>Output</name></member>
      <member refid="structtesting_1_1_flags_1a8c8289b3af9310744bc25280e3980e4b" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>output</name></member>
      <member refid="structtesting_1_1_flags_1a8758d574ce5513402679df258f788733" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>print_time</name></member>
      <member refid="structtesting_1_1_flags_1af4dc8454995fb3691399a049e95de179" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>PrintTime</name></member>
      <member refid="structtesting_1_1_flags_1a4728bce63433f711205fd7b427e57f1b" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>random_seed</name></member>
      <member refid="structtesting_1_1_flags_1a695cd8b8ab44df5eaa371bacded78c05" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>RandomSeed</name></member>
      <member refid="structtesting_1_1_flags_1a19d47e87d77a18ef4fa8a85b74e25956" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>Repeat</name></member>
      <member refid="structtesting_1_1_flags_1a61614dd07f97f6e04d27c004ff15195e" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>repeat</name></member>
      <member refid="structtesting_1_1_flags_1a51c689e47e0f55c16116ac2a1d3b05d6" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>shuffle</name></member>
      <member refid="structtesting_1_1_flags_1a19ddbbaed61bda44a1940333b7c5a469" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>Shuffle</name></member>
      <member refid="structtesting_1_1_flags_1a20c6592453909c1adace64bf6a2bc2de" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>stack_trace_depth</name></member>
      <member refid="structtesting_1_1_flags_1a16b01d8bcceaa9fa8211fd24faa75b5a" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>StackTraceDepth</name></member>
      <member refid="structtesting_1_1_flags_1ab09849fd3e095d5628dec65ec4dce9e1" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>stream_result_to</name></member>
      <member refid="structtesting_1_1_flags_1a9cf0f64310b28eadbbfbb35584ebfc71" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>StreamResultTo</name></member>
      <member refid="structtesting_1_1_flags_1ab8e7d21e31e641efe47b8050759e001a" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>throw_on_failure</name></member>
      <member refid="structtesting_1_1_flags_1ad856df862414ed0dadf80b5e03829cc7" prot="public" virt="non-virtual"><scope>testing::Flags</scope><name>ThrowOnFailure</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
