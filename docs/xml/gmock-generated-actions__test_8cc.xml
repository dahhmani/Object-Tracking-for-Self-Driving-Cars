<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-generated-actions__test_8cc" kind="file" language="C++">
    <compoundname>gmock-generated-actions_test.cc</compoundname>
    <includes refid="gmock-generated-actions_8h" local="yes">gmock/gmock-generated-actions.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="1746">
        <label>sys/stat.h</label>
      </node>
      <node id="1768">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="1741" relation="include">
        </childnode>
      </node>
      <node id="1726">
        <label>vendor/googletest/googlemock/test/gmock-generated-actions_test.cc</label>
        <link refid="gmock-generated-actions__test_8cc"/>
        <childnode refid="1727" relation="include">
        </childnode>
        <childnode refid="1783" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1784" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
      </node>
      <node id="1783">
        <label>functional</label>
      </node>
      <node id="1762">
        <label>iomanip</label>
      </node>
      <node id="1759">
        <label>limits</label>
      </node>
      <node id="1750">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="1737">
        <label>assert.h</label>
      </node>
      <node id="1773">
        <label>iterator</label>
      </node>
      <node id="1761">
        <label>float.h</label>
      </node>
      <node id="1732">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="1733" relation="include">
        </childnode>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1735" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
      </node>
      <node id="1794">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="1730" relation="include">
        </childnode>
        <childnode refid="1727" relation="include">
        </childnode>
      </node>
      <node id="1777">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="1738">
        <label>stdlib.h</label>
      </node>
      <node id="1766">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="1744" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
      </node>
      <node id="1778">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="1779" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1766" relation="include">
        </childnode>
      </node>
      <node id="1793">
        <label>gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="1773" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1789" relation="include">
        </childnode>
      </node>
      <node id="1729">
        <label>errno.h</label>
      </node>
      <node id="1791">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="1787">
        <label>gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="1788" relation="include">
        </childnode>
        <childnode refid="1732" relation="include">
        </childnode>
      </node>
      <node id="1784">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="1728" relation="include">
        </childnode>
        <childnode refid="1785" relation="include">
        </childnode>
        <childnode refid="1727" relation="include">
        </childnode>
        <childnode refid="1787" relation="include">
        </childnode>
        <childnode refid="1792" relation="include">
        </childnode>
        <childnode refid="1793" relation="include">
        </childnode>
        <childnode refid="1789" relation="include">
        </childnode>
        <childnode refid="1794" relation="include">
        </childnode>
        <childnode refid="1795" relation="include">
        </childnode>
        <childnode refid="1732" relation="include">
        </childnode>
      </node>
      <node id="1731">
        <label>string</label>
      </node>
      <node id="1763">
        <label>map</label>
      </node>
      <node id="1757">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="1776">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="1772" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
      </node>
      <node id="1743">
        <label>stddef.h</label>
      </node>
      <node id="1781">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="1734">
        <label>ostream</label>
      </node>
      <node id="1751">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="1786">
        <label>limits.h</label>
      </node>
      <node id="1727">
        <label>gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="1728" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
        <childnode refid="1782" relation="include">
        </childnode>
      </node>
      <node id="1769">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="1770" relation="include">
        </childnode>
      </node>
      <node id="1745">
        <label>sys/types.h</label>
      </node>
      <node id="1744">
        <label>string.h</label>
      </node>
      <node id="1728">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="1729" relation="include">
        </childnode>
        <childnode refid="1730" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1732" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
      </node>
      <node id="1755">
        <label>typeinfo</label>
      </node>
      <node id="1736">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="1737" relation="include">
        </childnode>
        <childnode refid="1738" relation="include">
        </childnode>
        <childnode refid="1739" relation="include">
        </childnode>
        <childnode refid="1740" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1757" relation="include">
        </childnode>
      </node>
      <node id="1752">
        <label>unistd.h</label>
      </node>
      <node id="1749">
        <label>vector</label>
      </node>
      <node id="1775">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="1765">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="1759" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
      </node>
      <node id="1748">
        <label>utility</label>
      </node>
      <node id="1788">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="1763" relation="include">
        </childnode>
        <childnode refid="1764" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1728" relation="include">
        </childnode>
        <childnode refid="1785" relation="include">
        </childnode>
        <childnode refid="1789" relation="include">
        </childnode>
        <childnode refid="1732" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
      </node>
      <node id="1747">
        <label>sstream</label>
      </node>
      <node id="1740">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="1738" relation="include">
        </childnode>
        <childnode refid="1737" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
      </node>
      <node id="1789">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="1790" relation="include">
        </childnode>
        <childnode refid="1730" relation="include">
        </childnode>
        <childnode refid="1773" relation="include">
        </childnode>
        <childnode refid="1759" relation="include">
        </childnode>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1732" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
        <childnode refid="1791" relation="include">
        </childnode>
      </node>
      <node id="1790">
        <label>math.h</label>
      </node>
      <node id="1792">
        <label>gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="1788" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
      </node>
      <node id="1779">
        <label>iosfwd</label>
      </node>
      <node id="1785">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="1786" relation="include">
        </childnode>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1736" relation="include">
        </childnode>
        <childnode refid="1758" relation="include">
        </childnode>
      </node>
      <node id="1767">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="1766" relation="include">
        </childnode>
      </node>
      <node id="1739">
        <label>iostream</label>
      </node>
      <node id="1758">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="1759" relation="include">
        </childnode>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1766" relation="include">
        </childnode>
        <childnode refid="1769" relation="include">
        </childnode>
        <childnode refid="1765" relation="include">
        </childnode>
        <childnode refid="1771" relation="include">
        </childnode>
        <childnode refid="1774" relation="include">
        </childnode>
        <childnode refid="1777" relation="include">
        </childnode>
        <childnode refid="1778" relation="include">
        </childnode>
        <childnode refid="1780" relation="include">
        </childnode>
        <childnode refid="1781" relation="include">
        </childnode>
      </node>
      <node id="1756">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="1748" relation="include">
        </childnode>
      </node>
      <node id="1753">
        <label>strings.h</label>
      </node>
      <node id="1742">
        <label>ctype.h</label>
      </node>
      <node id="1780">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1768" relation="include">
        </childnode>
      </node>
      <node id="1741">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="1742" relation="include">
        </childnode>
        <childnode refid="1743" relation="include">
        </childnode>
        <childnode refid="1738" relation="include">
        </childnode>
        <childnode refid="1733" relation="include">
        </childnode>
        <childnode refid="1744" relation="include">
        </childnode>
        <childnode refid="1745" relation="include">
        </childnode>
        <childnode refid="1746" relation="include">
        </childnode>
        <childnode refid="1730" relation="include">
        </childnode>
        <childnode refid="1739" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1750" relation="include">
        </childnode>
        <childnode refid="1751" relation="include">
        </childnode>
        <childnode refid="1752" relation="include">
        </childnode>
        <childnode refid="1753" relation="include">
        </childnode>
        <childnode refid="1754" relation="include">
        </childnode>
        <childnode refid="1755" relation="include">
        </childnode>
        <childnode refid="1756" relation="include">
        </childnode>
      </node>
      <node id="1760">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1742" relation="include">
        </childnode>
        <childnode refid="1761" relation="include">
        </childnode>
        <childnode refid="1744" relation="include">
        </childnode>
        <childnode refid="1762" relation="include">
        </childnode>
        <childnode refid="1759" relation="include">
        </childnode>
        <childnode refid="1763" relation="include">
        </childnode>
        <childnode refid="1764" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1765" relation="include">
        </childnode>
        <childnode refid="1766" relation="include">
        </childnode>
        <childnode refid="1767" relation="include">
        </childnode>
        <childnode refid="1768" relation="include">
        </childnode>
      </node>
      <node id="1795">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="1793" relation="include">
        </childnode>
      </node>
      <node id="1782">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="internal_2custom_2gmock-generated-actions_8h_source"/>
      </node>
      <node id="1772">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="1742" relation="include">
        </childnode>
        <childnode refid="1773" relation="include">
        </childnode>
        <childnode refid="1764" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1740" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1774" relation="include">
        </childnode>
      </node>
      <node id="1735">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="1736" relation="include">
        </childnode>
      </node>
      <node id="1764">
        <label>set</label>
      </node>
      <node id="1771">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1772" relation="include">
        </childnode>
        <childnode refid="1776" relation="include">
        </childnode>
      </node>
      <node id="1730">
        <label>algorithm</label>
      </node>
      <node id="1754">
        <label>regex.h</label>
      </node>
      <node id="1733">
        <label>stdio.h</label>
      </node>
      <node id="1770">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1733" relation="include">
        </childnode>
      </node>
      <node id="1774">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="1734" relation="include">
        </childnode>
        <childnode refid="1747" relation="include">
        </childnode>
        <childnode refid="1731" relation="include">
        </childnode>
        <childnode refid="1748" relation="include">
        </childnode>
        <childnode refid="1749" relation="include">
        </childnode>
        <childnode refid="1741" relation="include">
        </childnode>
        <childnode refid="1760" relation="include">
        </childnode>
        <childnode refid="1775" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_functor" prot="public">testing::gmock_generated_actions_test::NullaryFunctor</innerclass>
    <innerclass refid="structtesting_1_1gmock__generated__actions__test_1_1_unary_functor" prot="public">testing::gmock_generated_actions_test::UnaryFunctor</innerclass>
    <innerclass refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of5_functor" prot="public">testing::gmock_generated_actions_test::SumOf5Functor</innerclass>
    <innerclass refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of6_functor" prot="public">testing::gmock_generated_actions_test::SumOf6Functor</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__actions__test_1_1_substract_action" prot="public">testing::gmock_generated_actions_test::SubstractAction</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_constructor_class" prot="public">testing::gmock_generated_actions_test::NullaryConstructorClass</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__actions__test_1_1_unary_constructor_class" prot="public">testing::gmock_generated_actions_test::UnaryConstructorClass</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__actions__test_1_1_ten_arg_constructor_class" prot="public">testing::gmock_generated_actions_test::TenArgConstructorClass</innerclass>
    <innerclass refid="classtesting_1_1gmock__generated__actions__test_1_1_bool_resetter" prot="public">testing::gmock_generated_actions_test::BoolResetter</innerclass>
    <innerclass refid="structtesting_1_1gmock__generated__actions__test_1_1_giant_template" prot="public">testing::gmock_generated_actions_test::GiantTemplate</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__generated__actions__test">testing::gmock_generated_actions_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__generated__actions__test_1_1action__test">testing::gmock_generated_actions_test::action_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2007,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Mock<sp/>-<sp/>a<sp/>framework<sp/>for<sp/>writing<sp/>C++<sp/>mock<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>tests<sp/>the<sp/>built-in<sp/>actions<sp/>generated<sp/>by<sp/>a<sp/>script.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-generated-actions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_generated_actions_test<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">using<sp/>::std::plus;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">using<sp/>::std::string;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::get;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::make_tuple;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::tuple;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::tuple_element;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::_;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">testing::Action</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">testing::ActionInterface</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ByRef;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::DoAll;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Invoke;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::Return;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::ReturnNew;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::SetArgPointee;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::StaticAssertTypeEq;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">testing::Unused</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::WithArgs;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>suppressing<sp/>compiler<sp/>warnings<sp/>on<sp/>conversion<sp/>possibly<sp/>losing<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Short(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Char(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sample<sp/>functions<sp/>and<sp/>functors<sp/>for<sp/>testing<sp/>various<sp/>actions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Nullary()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_functor" kindref="compound">NullaryFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Unary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Plus1(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ByConstRef(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_double<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ReferencesGlobalDouble(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;x<sp/>==<sp/>&amp;g_double;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>ByNonConstRef(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structtesting_1_1gmock__generated__actions__test_1_1_unary_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__generated__actions__test_1_1_unary_functor" kindref="compound">UnaryFunctor</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>?<sp/>1<sp/>:<sp/>-1;<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Binary(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>input<sp/>+<sp/>n;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidBinary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ternary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y<sp/>+<sp/>z;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VoidTernary(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{<sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d;<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat4(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf5(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of5_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of5_functor" kindref="compound">SumOf5Functor</ref><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat5(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SumOf6(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of6_functor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of6_functor" kindref="compound">SumOf6Functor</ref><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>e,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>b<sp/>+<sp/>c<sp/>+<sp/>d<sp/>+<sp/>e<sp/>+<sp/>f;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat6(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat7(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat9(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>Concat10(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s3,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s6,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s9,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s10)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string(s1)<sp/>+<sp/>s2<sp/>+<sp/>s3<sp/>+<sp/>s4<sp/>+<sp/>s5<sp/>+<sp/>s6<sp/>+<sp/>s7<sp/>+<sp/>s8<sp/>+<sp/>s9<sp/>+<sp/>s10;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>that<sp/>turns<sp/>the<sp/>type<sp/>of<sp/>a<sp/>C-string<sp/>literal<sp/>from<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char[N]<sp/>to<sp/>const<sp/>char*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>CharPtr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>InvokeArgument&lt;N&gt;(...).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>nullary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function0)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int(*)())&gt;</ref><sp/>a<sp/>=<sp/>InvokeArgument&lt;1&gt;();<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(make_tuple(2,<sp/>&amp;Nullary)));</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>unary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Functor1)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(UnaryFunctor)&gt;</ref><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(make_tuple(<ref refid="structtesting_1_1gmock__generated__actions__test_1_1_unary_functor" kindref="compound">UnaryFunctor</ref>())));</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>5-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function5)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int(*)(int, int, int, int, int))&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(make_tuple(&amp;SumOf5)));</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>5-ary<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Functor5)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(SumOf5Functor)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(10000,<sp/>2000,<sp/>300,<sp/>40,<sp/>5);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a.Perform(make_tuple(<ref refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of5_functor" kindref="compound">SumOf5Functor</ref>())));</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>6-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function6)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int(*)(int, int, int, int, int, int))&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,<sp/>a.Perform(make_tuple(&amp;SumOf6)));</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>6-ary<sp/>functor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Functor6)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(SumOf6Functor)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(100000,<sp/>20000,<sp/>3000,<sp/>400,<sp/>50,<sp/>6);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123456,<sp/>a.Perform(make_tuple(<ref refid="structtesting_1_1gmock__generated__actions__test_1_1_sum_of6_functor" kindref="compound">SumOf6Functor</ref>())));</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>7-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function7)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(&amp;Concat7)));</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>8-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function8)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;12345678&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(&amp;Concat8)));</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>9-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function9)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123456789&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(&amp;Concat9)));</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>10-ary<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>Function10)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;8&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;9&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;1234567890&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(&amp;Concat10)));</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>pointer<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>ByPointerFunction)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const char*(const char*(*)(const char* input, short n))&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">),<sp/>Short(1));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(&amp;Binary)));</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>char*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>passing<sp/>it<sp/>a<sp/>C-string<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>FunctionWithCStringLiteral)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const char*(const char*(*)(const char* input, short n))&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">,<sp/>Short(1));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(&amp;Binary)));</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>ByConstReferenceFunction)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;bool(bool(*function)(const string&amp; s))&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(string(</highlight><highlight class="stringliteral">&quot;Hi&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>action<sp/>&apos;a&apos;<sp/>is<sp/>constructed,<sp/>it<sp/>makes<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>temporary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>object<sp/>passed<sp/>to<sp/>it,<sp/>so<sp/>it&apos;s<sp/>OK<sp/>to<sp/>use<sp/>&apos;a&apos;<sp/>later,<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>temporary<sp/>object<sp/>has<sp/>already<sp/>died.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(make_tuple(&amp;ByConstRef)));</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>InvokeArgument<sp/>with<sp/>ByRef()<sp/>and<sp/>a<sp/>function<sp/>that<sp/>takes<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal">TEST(InvokeArgumentTest,<sp/>ByExplicitConstReferenceFunction)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;bool(bool(*)(const double&amp; x))&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InvokeArgument&lt;0&gt;(ByRef(g_double));</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>above<sp/>line<sp/>calls<sp/>ByRef()<sp/>on<sp/>a<sp/>const<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(make_tuple(&amp;ReferencesGlobalDouble)));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>InvokeArgument&lt;0&gt;(ByRef(x));<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>calls<sp/>ByRef()<sp/>on<sp/>a<sp/>non-const.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a.Perform(make_tuple(&amp;ReferencesGlobalDouble)));</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>and<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>1<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">TEST(WithArgsTest,<sp/>OneArg)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;bool(double x, int n)&gt;</ref><sp/>a<sp/>=<sp/>WithArgs&lt;1&gt;(Invoke(Unary));<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(a.Perform(make_tuple(1.5,<sp/>-1)));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(a.Perform(make_tuple(1.5,<sp/>1)));</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>2<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">TEST(WithArgsTest,<sp/>TwoArgs)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const char*(const char* s, double x, short n)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>2&gt;(Invoke(Binary));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s<sp/>+<sp/>2,<sp/>a.Perform(make_tuple(CharPtr(s),<sp/>0.5,<sp/>Short(2))));</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>3<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">TEST(WithArgsTest,<sp/>ThreeArgs)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, double, char, short)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>2,<sp/>3&gt;(Invoke(Ternary));</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>a.Perform(make_tuple(100,<sp/>6.5,<sp/>Char(20),<sp/>Short(3))));</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>4<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">TEST(WithArgsTest,<sp/>FourArgs)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(const char*, const char*, double, const char*, const char*)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;4,<sp/>3,<sp/>1,<sp/>0&gt;(Invoke(Concat4));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;4310&quot;</highlight><highlight class="normal">,<sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>2.5,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>5<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">TEST(WithArgsTest,<sp/>FiveArgs)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>a<sp/>=</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;4,<sp/>3,<sp/>2,<sp/>1,<sp/>0&gt;(Invoke(Concat5));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;43210&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;4&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>6<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal">TEST(WithArgsTest,<sp/>SixArgs)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(const char*, const char*, const char*)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2,<sp/>2,<sp/>1,<sp/>0&gt;(Invoke(Concat6));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;012210&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>7<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">TEST(WithArgsTest,<sp/>SevenArgs)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(const char*, const char*, const char*, const char*)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2,<sp/>3,<sp/>2,<sp/>1,<sp/>0&gt;(Invoke(Concat7));</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0123210&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>8<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">TEST(WithArgsTest,<sp/>EightArgs)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(const char*, const char*, const char*, const char*)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2,<sp/>3,<sp/>0,<sp/>1,<sp/>2,<sp/>3&gt;(Invoke(Concat8));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;01230123&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>9<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">TEST(WithArgsTest,<sp/>NineArgs)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(const char*, const char*, const char*, const char*)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2,<sp/>3,<sp/>1,<sp/>2,<sp/>3,<sp/>2,<sp/>3&gt;(Invoke(Concat9));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;012312323&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>takes<sp/>10<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">TEST(WithArgsTest,<sp/>TenArgs)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;string(const char*, const char*, const char*, const char*)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2,<sp/>3,<sp/>2,<sp/>1,<sp/>0,<sp/>1,<sp/>2,<sp/>3&gt;(Invoke(Concat10));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;0123210123&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">),<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>is<sp/>not<sp/>Invoke().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="classtesting_1_1gmock__generated__actions__test_1_1_substract_action" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_substract_action" kindref="compound">SubstractAction</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt;int(int,<sp/>int)&gt;<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Perform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;int,<sp/>int&gt;&amp;<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;0&gt;(args)<sp/>-<sp/>get&lt;1&gt;(args);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal">};</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">TEST(WithArgsTest,<sp/>NonInvokeAction)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(const string&amp;, int, int)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;2,<sp/>1&gt;(MakeAction(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_substract_action" kindref="compound">SubstractAction</ref>));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>s(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>EXPECT_EQ(8,<sp/>a.Perform(tuple&lt;const<sp/>string&amp;,<sp/>int,<sp/>int&gt;(s,<sp/>2,<sp/>10)));</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>to<sp/>pass<sp/>all<sp/>original<sp/>arguments<sp/>in<sp/>the<sp/>original<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">TEST(WithArgsTest,<sp/>Identity)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int x, char y, short z)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>2&gt;(Invoke(Ternary));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>a.Perform(make_tuple(100,<sp/>Char(20),<sp/>Short(3))));</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>repeated<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">TEST(WithArgsTest,<sp/>RepeatedArguments)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(bool, int m, int n)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;1,<sp/>1,<sp/>1,<sp/>1&gt;(Invoke(SumOf4));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>a.Perform(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>1,<sp/>10)));</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>reversed<sp/>argument<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">TEST(WithArgsTest,<sp/>ReversedArgumentOrder)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const char*(short n, const char* input)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;1,<sp/>0&gt;(Invoke(Binary));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>EXPECT_EQ(s<sp/>+<sp/>2,<sp/>a.Perform(make_tuple(Short(2),<sp/>CharPtr(s))));</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>compatible,<sp/>but<sp/>not<sp/>identical,<sp/>argument<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">TEST(WithArgsTest,<sp/>ArgsOfCompatibleTypes)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;long(short x, char y, double z, char c)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WithArgs&lt;0,<sp/>1,<sp/>3&gt;(Invoke(Ternary));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>a.Perform(make_tuple(Short(100),<sp/>Char(20),<sp/>5.6,<sp/>Char(3))));</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>WithArgs<sp/>with<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">TEST(WithArgsTest,<sp/>VoidAction)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(double x, char c, int n)&gt;</ref><sp/>a<sp/>=<sp/>WithArgs&lt;2,<sp/>1&gt;(Invoke(VoidBinary));</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>g_done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>a.Perform(make_tuple(1.5,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>3));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>EXPECT_TRUE(g_done);</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">TEST(DoAllTest,<sp/>TwoActions)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int*)&gt;</ref><sp/>a<sp/>=<sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(2));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>a.Perform(make_tuple(&amp;n)));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>a3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">TEST(DoAllTest,<sp/>ThreeActions)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int*, int*)&gt;</ref><sp/>a<sp/>=<sp/>DoAll(SetArgPointee&lt;0&gt;(1),<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a.Perform(make_tuple(&amp;m,<sp/>&amp;n)));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>a3,<sp/>a4).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">TEST(DoAllTest,<sp/>FourActions)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int*, int*, char*)&gt;</ref><sp/>a<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a.Perform(make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;ch)));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>ch);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>a3,<sp/>a4,<sp/>a5).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal">TEST(DoAllTest,<sp/>FiveActions)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int*, int*, char*, char*)&gt;</ref><sp/>action<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b)));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a6).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">TEST(DoAllTest,<sp/>SixActions)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int*, int*, char*, char*, char*)&gt;</ref><sp/>action<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c)));</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a7).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">TEST(DoAllTest,<sp/>SevenActions)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int*, int*, char*, char*, char*, char*)&gt;</ref><sp/>action<sp/>=<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d)));</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a8).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">TEST(DoAllTest,<sp/>EightActions)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>e<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>action<sp/>=</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;6&gt;(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d,<sp/>&amp;e)));</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a9).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">TEST(DoAllTest,<sp/>NineActions)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>e<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>f<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>action<sp/>=</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;6&gt;(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;7&gt;(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d,<sp/>&amp;e,<sp/>&amp;f)));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>DoAll(a1,<sp/>a2,<sp/>...,<sp/>a10).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">TEST(DoAllTest,<sp/>TenActions)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>0,<sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>b<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>d<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>e<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>f<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>g<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt;int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&gt;<sp/>action<sp/>=</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DoAll(SetArgPointee&lt;0&gt;(1),</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;1&gt;(2),</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;2&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;3&gt;(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;4&gt;(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;5&gt;(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;6&gt;(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;7&gt;(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetArgPointee&lt;8&gt;(</highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Return(3));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>action.Perform(make_tuple(&amp;m,<sp/>&amp;n,<sp/>&amp;a,<sp/>&amp;b,<sp/>&amp;c,<sp/>&amp;d,<sp/>&amp;e,<sp/>&amp;f,<sp/>&amp;g)));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>m);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>EXPECT_EQ(2,<sp/>n);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/>b);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>c);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/>d);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/>f);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/>g);</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ACTION*()<sp/>macros<sp/>trigger<sp/>warning<sp/>C4100<sp/>(unreferenced<sp/>formal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter)<sp/>in<sp/>MSVC<sp/>with<sp/>-W4.<sp/><sp/>Unfortunately<sp/>they<sp/>cannot<sp/>be<sp/>fixed<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>macro<sp/>definition,<sp/>as<sp/>the<sp/>warnings<sp/>are<sp/>generated<sp/>when<sp/>the<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>expanded<sp/>and<sp/>macro<sp/>expansion<sp/>cannot<sp/>contain<sp/>#pragma.<sp/><sp/>Therefore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>suppress<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(disable:4100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>the<sp/>ACTION*()<sp/>macro<sp/>family.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>can<sp/>define<sp/>an<sp/>action<sp/>that<sp/>doesn&apos;t<sp/>reference<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mock<sp/>function<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">ACTION(Return5)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;<sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksWhenNotReferencingArguments)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;double()&gt;</ref><sp/>a1<sp/>=<sp/>Return5();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(5,<sp/>a1.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(double, bool)&gt;</ref><sp/>a2<sp/>=<sp/>Return5();</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>EXPECT_EQ(5,<sp/>a2.Perform(make_tuple(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>can<sp/>define<sp/>an<sp/>action<sp/>that<sp/>returns<sp/>void.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal">ACTION(IncrementArg1)<sp/>{<sp/>(*arg1)++;<sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksWhenReturningVoid)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(int, int*)&gt;</ref><sp/>a1<sp/>=<sp/>IncrementArg1();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(5,<sp/>&amp;n));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>type<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal">ACTION(IncrementArg2)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int*,<sp/>arg2_type&gt;();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>arg2_type<sp/>temp<sp/>=<sp/>arg2;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>(*temp)++;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceArgumentType)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(int, bool, int*)&gt;</ref><sp/>a1<sp/>=<sp/>IncrementArg2();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>a1.Perform(make_tuple(5,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;n));</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>n);</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>argument<sp/>tuple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>via<sp/>args_type<sp/>and<sp/>args.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal">ACTION(Sum2)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;tuple&lt;int,<sp/>char,<sp/>int*&gt;,<sp/>args_type&gt;();</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>args_type<sp/>args_copy<sp/>=<sp/>args;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get&lt;0&gt;(args_copy)<sp/>+<sp/>get&lt;1&gt;(args_copy);</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceArgumentTuple)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, char, int*)&gt;</ref><sp/>a1<sp/>=<sp/>Sum2();</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>EXPECT_EQ(11,<sp/>a1.Perform(make_tuple(5,<sp/>Char(6),<sp/>&amp;dummy)));</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>mock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Dummy(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flag?<sp/>1<sp/>:<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal">ACTION(InvokeDummy)<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int(bool),<sp/>function_type&gt;();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>function_type*<sp/>fp<sp/>=<sp/>&amp;Dummy;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*fp)(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceMockFunctionType)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(bool)&gt;</ref><sp/>a1<sp/>=<sp/>InvokeDummy();</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION()<sp/>can<sp/>reference<sp/>the<sp/>mock<sp/>function&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">ACTION(InvokeDummy2)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int,<sp/>return_type&gt;();</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>return_type<sp/>result<sp/>=<sp/>Dummy(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanReferenceMockFunctionReturnType)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(bool)&gt;</ref><sp/>a1<sp/>=<sp/>InvokeDummy2();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>works<sp/>for<sp/>arguments<sp/>passed<sp/>by<sp/>const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">ACTION(ReturnAddrOfConstBoolReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;const<sp/>bool&amp;,<sp/>arg1_type&gt;();</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg1;</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksForConstReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const bool*(int, const bool&amp;)&gt;</ref><sp/>a<sp/>=<sp/>ReturnAddrOfConstBoolReferenceArg();</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;b,<sp/>a.Perform(tuple&lt;int,<sp/>const<sp/>bool&amp;&gt;(0,<sp/>b)));</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>works<sp/>for<sp/>arguments<sp/>passed<sp/>by<sp/>non-const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal">ACTION(ReturnAddrOfIntReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>StaticAssertTypeEq&lt;int&amp;,<sp/>arg0_type&gt;();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;arg0;</highlight></codeline>
<codeline lineno="700"><highlight class="normal">}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksForNonConstReferenceArg)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int*(int&amp;, bool, int)&gt;</ref><sp/>a<sp/>=<sp/>ReturnAddrOfIntReferenceArg();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>EXPECT_EQ(&amp;n,<sp/>a.Perform(tuple&lt;int&amp;,<sp/>bool,<sp/>int&gt;(n,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>1)));</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION()<sp/>can<sp/>be<sp/>used<sp/>in<sp/>a<sp/>namespace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">action_test<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal">ACTION(Sum)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>arg1;<sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>action_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksInNamespace)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int, int)&gt;</ref><sp/>a1<sp/>=<sp/>action_test::Sum();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a1.Perform(make_tuple(1,<sp/>2)));</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>same<sp/>ACTION<sp/>definition<sp/>works<sp/>for<sp/>mock<sp/>functions<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>argument<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">ACTION(PlusTwo)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>2;<sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal">TEST(ActionMacroTest,<sp/>WorksForDifferentArgumentNumbers)<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>PlusTwo();</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4,<sp/>a1.Perform(make_tuple(2)));</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;double(float, void*)&gt;</ref><sp/>a2<sp/>=<sp/>PlusTwo();</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(6,<sp/>a2.Perform(make_tuple(4.0f,<sp/>&amp;dummy)));</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_P<sp/>can<sp/>define<sp/>a<sp/>parameterized<sp/>action.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal">ACTION_P(Plus,<sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>n;<sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal">TEST(ActionPMacroTest,<sp/>DefinesParameterizedAction)<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int m, bool t)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(9);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>a1.Perform(make_tuple(1,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>body<sp/>of<sp/>ACTION_P<sp/>can<sp/>reference<sp/>the<sp/>argument<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>parameter<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal">ACTION_P(TypedPlus,<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>arg0_type<sp/>t1<sp/>=<sp/>arg0;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>n_type<sp/>t2<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t1<sp/>+<sp/>t2;</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal">TEST(ActionPMacroTest,<sp/>CanReferenceArgumentAndParameterTypes)<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(char m, bool t)&gt;</ref><sp/>a1<sp/>=<sp/>TypedPlus(9);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10,<sp/>a1.Perform(make_tuple(Char(1),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>parameterized<sp/>action<sp/>can<sp/>be<sp/>used<sp/>in<sp/>any<sp/>mock<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>whose<sp/>type<sp/>is<sp/>compatible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">TEST(ActionPMacroTest,<sp/>WorksInCompatibleMockFunction)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;std::string(const std::string&amp; s)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(</highlight><highlight class="stringliteral">&quot;tail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>re<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;re&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;retail&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(tuple&lt;const<sp/>std::string&amp;&gt;(re)));</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>use<sp/>ACTION*()<sp/>to<sp/>define<sp/>actions<sp/>overloaded<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal">ACTION(OverloadedAction)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>?<sp/>arg1<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">ACTION_P(OverloadedAction,<sp/>default_value)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>?<sp/>arg1<sp/>:<sp/>default_value;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal">ACTION_P2(OverloadedAction,<sp/>true_value,<sp/>false_value)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>?<sp/>true_value<sp/>:<sp/>false_value;</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">TEST(ActionMacroTest,<sp/>CanDefineOverloadedActions)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const char*(bool, const char*)&gt;</ref><sp/>MyAction;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyAction<sp/>a1<sp/>=<sp/>OverloadedAction();</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyAction<sp/>a2<sp/>=<sp/>OverloadedAction(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>a2.Perform(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>a2.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyAction<sp/>a3<sp/>=<sp/>OverloadedAction(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;you&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>a3.Perform(make_tuple(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;you&quot;</highlight><highlight class="normal">,<sp/>a3.Perform(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>CharPtr(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="787"><highlight class="normal">}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>ACTION_Pn<sp/>where<sp/>n<sp/>&gt;=<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">ACTION_P3(Plus,<sp/>m,<sp/>n,<sp/>k)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>m<sp/>+<sp/>n<sp/>+<sp/>k;<sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor3Parameters)<sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;double(int m, bool t)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(100,<sp/>20,<sp/>3.4);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>EXPECT_DOUBLE_EQ(3123.4,<sp/>a1.Perform(make_tuple(3000,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;std::string(const std::string&amp; s)&gt;</ref><sp/>a2<sp/>=<sp/>Plus(</highlight><highlight class="stringliteral">&quot;tail&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>re<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;re&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;retail-&gt;&quot;</highlight><highlight class="normal">,<sp/>a2.Perform(tuple&lt;const<sp/>std::string&amp;&gt;(re)));</highlight></codeline>
<codeline lineno="800"><highlight class="normal">}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal">ACTION_P4(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3;<sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor4Parameters)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4,<sp/>a1.Perform(make_tuple(10)));</highlight></codeline>
<codeline lineno="807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">ACTION_P5(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4;<sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor5Parameters)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5,<sp/>a1.Perform(make_tuple(10)));</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal">ACTION_P6(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5)<sp/>{</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5;</highlight></codeline>
<codeline lineno="818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor6Parameters)<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6,<sp/>a1.Perform(make_tuple(10)));</highlight></codeline>
<codeline lineno="823"><highlight class="normal">}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal">ACTION_P7(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6;</highlight></codeline>
<codeline lineno="827"><highlight class="normal">}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor7Parameters)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7,<sp/>a1.Perform(make_tuple(10)));</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">ACTION_P8(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6<sp/>+<sp/>p7;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor8Parameters)<sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8,<sp/>a1.Perform(make_tuple(10)));</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">ACTION_P9(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6<sp/>+<sp/>p7<sp/>+<sp/>p8;</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor9Parameters)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8<sp/>+<sp/>9,<sp/>a1.Perform(make_tuple(10)));</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal">ACTION_P10(Plus,<sp/>p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>p4,<sp/>p5,<sp/>p6,<sp/>p7,<sp/>p8,<sp/>last_param)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>arg0_type<sp/>t0<sp/>=<sp/>arg0;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>last_param_type<sp/>t9<sp/>=<sp/>last_param;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t0<sp/>+<sp/>p0<sp/>+<sp/>p1<sp/>+<sp/>p2<sp/>+<sp/>p3<sp/>+<sp/>p4<sp/>+<sp/>p5<sp/>+<sp/>p6<sp/>+<sp/>p7<sp/>+<sp/>p8<sp/>+<sp/>t9;</highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>WorksFor10Parameters)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int(int)&gt;</ref><sp/>a1<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>EXPECT_EQ(10<sp/>+<sp/>1<sp/>+<sp/>2<sp/>+<sp/>3<sp/>+<sp/>4<sp/>+<sp/>5<sp/>+<sp/>6<sp/>+<sp/>7<sp/>+<sp/>8<sp/>+<sp/>9<sp/>+<sp/>10,</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a1.Perform(make_tuple(10)));</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>the<sp/>action<sp/>body<sp/>can<sp/>promote<sp/>the<sp/>parameter<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">ACTION_P2(PadArgument,<sp/>prefix,<sp/>suffix)<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>lines<sp/>promote<sp/>the<sp/>two<sp/>parameters<sp/>to<sp/>desired<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>std::string<sp/>prefix_str(prefix);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>suffix_char<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(suffix);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prefix_str<sp/>+<sp/>arg0<sp/>+<sp/>suffix_char;</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>SimpleTypePromotion)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;std::string(const char*)&gt;</ref><sp/>no_promo<sp/>=</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PadArgument(std::string(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;std::string(const char*)&gt;</ref><sp/>promo<sp/>=</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PadArgument(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>static_cast&lt;int&gt;(</highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/>no_promo.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;foobar&quot;</highlight><highlight class="normal">,<sp/>promo.Perform(make_tuple(CharPtr(</highlight><highlight class="stringliteral">&quot;ba&quot;</highlight><highlight class="normal">))));</highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>we<sp/>can<sp/>partially<sp/>restrict<sp/>parameter<sp/>types<sp/>using<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>straight-forward<sp/>pattern.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>generic<sp/>action<sp/>that<sp/>doesn&apos;t<sp/>restrict<sp/>the<sp/>types<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal">ACTION_P3(ConcatImpl,<sp/>a,<sp/>b,<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>ss<sp/>&lt;&lt;<sp/>a<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="891"><highlight class="normal">}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Next,<sp/>we<sp/>try<sp/>to<sp/>restrict<sp/>that<sp/>either<sp/>the<sp/>first<sp/>parameter<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string,<sp/>or<sp/>the<sp/>second<sp/>parameter<sp/>is<sp/>an<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>partially<sp/>specialized<sp/>wrapper<sp/>that<sp/>restricts<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter<sp/>to<sp/>std::string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ConcatImplActionP3<sp/>is<sp/>the<sp/>class<sp/>template<sp/>ACTION_P3<sp/>uses<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implement<sp/>ConcatImpl.<sp/><sp/>We<sp/>shouldn&apos;t<sp/>change<sp/>the<sp/>name<sp/>as<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pattern<sp/>requires<sp/>the<sp/>user<sp/>to<sp/>use<sp/>it<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal">ConcatImplActionP3&lt;std::string,<sp/>T1,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">Concat(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>a,<sp/>T1<sp/>b,<sp/>T2<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_PUSH_()</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>GTEST_INTENTIONAL_CONST_COND_POP_()</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>branch<sp/>verifies<sp/>that<sp/>ConcatImpl()<sp/>can<sp/>be<sp/>invoked<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>template<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConcatImpl(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>branch<sp/>verifies<sp/>that<sp/>ConcatImpl()<sp/>can<sp/>also<sp/>be<sp/>invoked<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explicit<sp/>template<sp/>arguments.<sp/><sp/>It<sp/>doesn&apos;t<sp/>really<sp/>need<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>executed<sp/>as<sp/>this<sp/>is<sp/>a<sp/>compile-time<sp/>verification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConcatImpl&lt;std::string,<sp/>T1,<sp/>T2&gt;(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>another<sp/>partially<sp/>specialized<sp/>wrapper<sp/>that<sp/>restricts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>parameter<sp/>to<sp/>int.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="921"><highlight class="normal">ConcatImplActionP3&lt;T1,<sp/>int,<sp/>T2&gt;</highlight></codeline>
<codeline lineno="922"><highlight class="normal">Concat(T1<sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/>T2<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConcatImpl(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>CanPartiallyRestrictParameterTypes)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const std::string()&gt;</ref><sp/>a1<sp/>=<sp/>Concat(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;Hello12&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>a1<sp/>=<sp/>Concat(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>a1.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Verifies<sp/>the<sp/>type<sp/>of<sp/>an<sp/>ACTION*.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal">ACTION(DoFoo)<sp/>{}</highlight></codeline>
<codeline lineno="937"><highlight class="normal">ACTION_P(DoFoo,<sp/>p)<sp/>{}</highlight></codeline>
<codeline lineno="938"><highlight class="normal">ACTION_P2(DoFoo,<sp/>p0,<sp/>p1)<sp/>{}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>TypesAreCorrect)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoFoo()<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>DoFooAction<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>DoFooAction<sp/>a0<sp/>=<sp/>DoFoo();</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoFoo(1)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>DoFooActionP<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>DoFooActionP&lt;int&gt;<sp/>a1<sp/>=<sp/>DoFoo(1);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DoFoo(p1,<sp/>...,<sp/>pk)<sp/>must<sp/>be<sp/>assignable<sp/>to<sp/>a<sp/>DoFooActionPk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>DoFooActionP2&lt;int,<sp/>char&gt;<sp/>a2<sp/>=<sp/>DoFoo(1,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>PlusActionP3&lt;int,<sp/>int,<sp/>char&gt;<sp/>a3<sp/>=<sp/>Plus(1,<sp/>2,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>PlusActionP4&lt;int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a4<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>PlusActionP5&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a5<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>PlusActionP6&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a6<sp/>=<sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>PlusActionP7&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a7<sp/>=</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>PlusActionP8&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a8<sp/>=</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>PlusActionP9&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a9<sp/>=</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>PlusActionP10&lt;int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>int,<sp/>char&gt;<sp/>a10<sp/>=</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Plus(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>&quot;unused<sp/>variable&quot;<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>(void)a0;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>(void)a1;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>(void)a2;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>(void)a3;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>(void)a4;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>(void)a5;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>(void)a6;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>(void)a7;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>(void)a8;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>(void)a9;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>(void)a10;</highlight></codeline>
<codeline lineno="975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>ACTION_P*()<sp/>action<sp/>can<sp/>be<sp/>explicitly<sp/>instantiated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>reference-typed<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal">ACTION_P(Plus1,<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal">ACTION_P2(Plus2,<sp/>x,<sp/>y)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y;<sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal">ACTION_P3(Plus3,<sp/>x,<sp/>y,<sp/>z)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>+<sp/>y<sp/>+<sp/>z;<sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal">ACTION_P10(Plus10,<sp/>a0,<sp/>a1,<sp/>a2,<sp/>a3,<sp/>a4,<sp/>a5,<sp/>a6,<sp/>a7,<sp/>a8,<sp/>a9)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a0<sp/>+<sp/>a1<sp/>+<sp/>a2<sp/>+<sp/>a3<sp/>+<sp/>a4<sp/>+<sp/>a5<sp/>+<sp/>a6<sp/>+<sp/>a7<sp/>+<sp/>a8<sp/>+<sp/>a9;</highlight></codeline>
<codeline lineno="985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal">TEST(ActionPnMacroTest,<sp/>CanExplicitlyInstantiateWithReferenceTypes)<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>1,<sp/>y<sp/>=<sp/>2,<sp/>z<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tuple&lt;&gt;<sp/>empty<sp/>=<sp/>make_tuple();</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a<sp/>=<sp/>Plus1&lt;int&amp;&gt;(x);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>Plus2&lt;const<sp/>int&amp;,<sp/>int&amp;&gt;(x,<sp/>y);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>Plus3&lt;int&amp;,<sp/>const<sp/>int&amp;,<sp/>int&amp;&gt;(x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[10]<sp/>=<sp/>{<sp/>1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10<sp/>};</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>a<sp/>=<sp/>Plus10&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;&gt;(n[0],<sp/>n[1],<sp/>n[2],<sp/>n[3],<sp/>n[4],<sp/>n[5],<sp/>n[6],<sp/>n[7],</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n[8],<sp/>n[9]);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>EXPECT_EQ(55,<sp/>a.Perform(empty));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007" refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_constructor_class" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_constructor_class" kindref="compound">NullaryConstructorClass</ref><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_constructor_class" kindref="compound">NullaryConstructorClass</ref>()<sp/>:<sp/>value_(123)<sp/>{}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ReturnNew()<sp/>with<sp/>a<sp/>nullary<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">TEST(ReturnNewTest,<sp/>NoArgs)<sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;NullaryConstructorClass*()&gt;</ref><sp/>a<sp/>=<sp/>ReturnNew&lt;NullaryConstructorClass&gt;();</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_nullary_constructor_class" kindref="compound">NullaryConstructorClass</ref>*<sp/>c<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>EXPECT_EQ(123,<sp/>c-&gt;value_);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021" refid="classtesting_1_1gmock__generated__actions__test_1_1_unary_constructor_class" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_unary_constructor_class" kindref="compound">UnaryConstructorClass</ref><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_unary_constructor_class" kindref="compound">UnaryConstructorClass</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ReturnNew()<sp/>with<sp/>a<sp/>unary<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">TEST(ReturnNewTest,<sp/>Unary)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;UnaryConstructorClass*()&gt;</ref><sp/>a<sp/>=<sp/>ReturnNew&lt;UnaryConstructorClass&gt;(4000);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_unary_constructor_class" kindref="compound">UnaryConstructorClass</ref>*<sp/>c<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4000,<sp/>c-&gt;value_);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal">TEST(ReturnNewTest,<sp/>UnaryWorksWhenMockMethodHasArgs)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;UnaryConstructorClass*(bool, int)&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReturnNew&lt;UnaryConstructorClass&gt;(4000);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_unary_constructor_class" kindref="compound">UnaryConstructorClass</ref>*<sp/>c<sp/>=<sp/>a.Perform(make_tuple(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>5));</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4000,<sp/>c-&gt;value_);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal">TEST(ReturnNewTest,<sp/>UnaryWorksWhenMockMethodReturnsPointerToConst)<sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;const UnaryConstructorClass*()&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReturnNew&lt;UnaryConstructorClass&gt;(4000);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_unary_constructor_class" kindref="compound">UnaryConstructorClass</ref>*<sp/>c<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>EXPECT_EQ(4000,<sp/>c-&gt;value_);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051" refid="classtesting_1_1gmock__generated__actions__test_1_1_ten_arg_constructor_class" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_ten_arg_constructor_class" kindref="compound">TenArgConstructorClass</ref><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_ten_arg_constructor_class" kindref="compound">TenArgConstructorClass</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a5,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a6,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a7,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a8,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a9,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a10)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>value_(a1<sp/>+<sp/>a2<sp/>+<sp/>a3<sp/>+<sp/>a4<sp/>+<sp/>a5<sp/>+<sp/>a6<sp/>+<sp/>a7<sp/>+<sp/>a8<sp/>+<sp/>a9<sp/>+<sp/>a10)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>using<sp/>ReturnNew()<sp/>with<sp/>a<sp/>10-argument<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal">TEST(ReturnNewTest,<sp/>ConstructorThatTakes10Arguments)<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;TenArgConstructorClass*()&gt;</ref><sp/>a<sp/>=</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReturnNew&lt;TenArgConstructorClass&gt;(1000000000,<sp/>200000000,<sp/>30000000,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4000000,<sp/>500000,<sp/>60000,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7000,<sp/>800,<sp/>90,<sp/>0);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_ten_arg_constructor_class" kindref="compound">TenArgConstructorClass</ref>*<sp/>c<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1234567890,<sp/>c-&gt;value_);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>when<sp/>there<sp/>is<sp/>no<sp/>value<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal">ACTION_TEMPLATE(CreateNew,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T),</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_0_VALUE_PARAMS())<sp/>{</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksWithoutValueParam)<sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int*()&gt;</ref><sp/>a<sp/>=<sp/>CreateNew&lt;int&gt;();</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>when<sp/>there<sp/>are<sp/>value<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">ACTION_TEMPLATE(CreateNew,</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T),</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_1_VALUE_PARAMS(a0))<sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(a0);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksWithValueParams)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int*()&gt;</ref><sp/>a<sp/>=<sp/>CreateNew&lt;int&gt;(42);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>*p);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>for<sp/>integral<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal">ACTION_TEMPLATE(MyDeleteArg,</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k),</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_0_VALUE_PARAMS())<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>get&lt;k&gt;(args);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Resets<sp/>a<sp/>bool<sp/>variable<sp/>in<sp/>the<sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106" refid="classtesting_1_1gmock__generated__actions__test_1_1_bool_resetter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_bool_resetter" kindref="compound">BoolResetter</ref><sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_bool_resetter" kindref="compound">BoolResetter</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>value)<sp/>:<sp/>value_(value)<sp/>{}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>~<ref refid="classtesting_1_1gmock__generated__actions__test_1_1_bool_resetter" kindref="compound">BoolResetter</ref>()<sp/>{<sp/>*value_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>value_;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksForIntegralTemplateParams)<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;void(int*, BoolResetter*)&gt;</ref><sp/>a<sp/>=<sp/>MyDeleteArg&lt;1&gt;();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_bool_resetter" kindref="compound">BoolResetter</ref>*<sp/>resetter<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__generated__actions__test_1_1_bool_resetter" kindref="compound">BoolResetter</ref>(&amp;b);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>a.Perform(make_tuple(&amp;n,<sp/>resetter));</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>EXPECT_FALSE(b);<sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>resetter<sp/>is<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATES<sp/>works<sp/>for<sp/>template<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal">ACTION_TEMPLATE(ReturnSmartPointer,</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(template<sp/>&lt;typename<sp/>Pointee&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer),</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_1_VALUE_PARAMS(pointee))<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Pointer&lt;pointee_type&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>pointee_type(pointee));</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksForTemplateTemplateParameters)<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>using<sp/>::testing::internal::linked_ptr;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;linked_ptr&lt;int&gt;</ref>()&gt;<sp/>a<sp/>=<sp/>ReturnSmartPointer&lt;linked_ptr&gt;(42);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>linked_ptr&lt;int&gt;<sp/>p<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>*p);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>for<sp/>10<sp/>template<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k4,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>k5,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T7,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T8,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T9&gt;</highlight></codeline>
<codeline lineno="1141" refid="structtesting_1_1gmock__generated__actions__test_1_1_giant_template" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1gmock__generated__actions__test_1_1_giant_template" kindref="compound">GiantTemplate</ref><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__generated__actions__test_1_1_giant_template" kindref="compound">GiantTemplate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_value)<sp/>:<sp/>value(a_value)<sp/>{}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal">ACTION_TEMPLATE(ReturnGiant,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_10_TEMPLATE_PARAMS(</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T1,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T2,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>T3,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k4,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>k5,</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k6,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T7,</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T8,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T9,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T&gt;<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">,<sp/>T10),</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_1_VALUE_PARAMS(value))<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__generated__actions__test_1_1_giant_template" kindref="compound">GiantTemplate&lt;T10&lt;T1&gt;</ref>,<sp/>T2,<sp/>T3,<sp/>k4,<sp/>k5,<sp/>k6,<sp/>T7,<sp/>T8,<sp/>T9&gt;(value);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksFor10TemplateParameters)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>using<sp/>::testing::internal::linked_ptr;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1gmock__generated__actions__test_1_1_giant_template" kindref="compound">GiantTemplate&lt;linked_ptr&lt;int&gt;</ref>,<sp/>bool,<sp/>double,<sp/>5,</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>6,<sp/>char,<sp/>unsigned,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>Giant;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;Giant()&gt;</ref><sp/>a<sp/>=<sp/>ReturnGiant&lt;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int,<sp/>bool,<sp/>double,<sp/>5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>6,<sp/>char,<sp/>unsigned,<sp/>int,<sp/>linked_ptr&gt;(42);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>Giant<sp/>giant<sp/>=<sp/>a.Perform(make_tuple());</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>EXPECT_EQ(42,<sp/>giant.value);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>works<sp/>for<sp/>10<sp/>value<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number),</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_10_VALUE_PARAMS(v1,<sp/>v2,<sp/>v3,<sp/>v4,<sp/>v5,<sp/>v6,<sp/>v7,<sp/>v8,<sp/>v9,<sp/>v10))<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>v5<sp/>+<sp/>v6<sp/>+<sp/>v7<sp/>+<sp/>v8<sp/>+<sp/>v9<sp/>+<sp/>v10;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal">TEST(ActionTemplateTest,<sp/>WorksFor10ValueParameters)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a<sp/>=<sp/>ReturnSum&lt;int&gt;(1,<sp/>2,<sp/>3,<sp/>4,<sp/>5,<sp/>6,<sp/>7,<sp/>8,<sp/>9,<sp/>10);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>EXPECT_EQ(55,<sp/>a.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>ACTION_TEMPLATE<sp/>and<sp/>ACTION/ACTION_P*<sp/>can<sp/>be<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>number<sp/>of<sp/>value<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal">ACTION(ReturnSum)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal">ACTION_P(ReturnSum,<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;<sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number),</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_2_VALUE_PARAMS(v1,<sp/>v2))<sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_1_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number),</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_3_VALUE_PARAMS(v1,<sp/>v2,<sp/>v3))<sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2<sp/>+<sp/>v3;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">ACTION_TEMPLATE(ReturnSum,</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HAS_2_TEMPLATE_PARAMS(</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>Number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>k),</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AND_4_VALUE_PARAMS(v1,<sp/>v2,<sp/>v3,<sp/>v4))<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Number</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v1)<sp/>+<sp/>v2<sp/>+<sp/>v3<sp/>+<sp/>v4<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal">TEST(ActionTemplateTest,<sp/>CanBeOverloadedOnNumberOfValueParameters)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a0<sp/>=<sp/>ReturnSum();</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a1<sp/>=<sp/>ReturnSum(1);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a2<sp/>=<sp/>ReturnSum&lt;int&gt;(1,<sp/>2);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a3<sp/>=<sp/>ReturnSum&lt;int&gt;(1,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_action" kindref="compound">Action&lt;int()&gt;</ref><sp/>a4<sp/>=<sp/>ReturnSum&lt;int,<sp/>10000&gt;(2000,<sp/>300,<sp/>40,<sp/>5);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>EXPECT_EQ(0,<sp/>a0.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>EXPECT_EQ(1,<sp/>a1.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>EXPECT_EQ(3,<sp/>a2.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>EXPECT_EQ(6,<sp/>a3.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>EXPECT_EQ(12345,<sp/>a4.Perform(make_tuple()));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_generated_actions_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/test/gmock-generated-actions_test.cc"/>
  </compounddef>
</doxygen>
