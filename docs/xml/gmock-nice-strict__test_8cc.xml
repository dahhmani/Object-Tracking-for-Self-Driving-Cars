<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock-nice-strict__test_8cc" kind="file" language="C++">
    <compoundname>gmock-nice-strict_test.cc</compoundname>
    <includes refid="gmock-generated-nice-strict_8h" local="yes">gmock/gmock-generated-nice-strict.h</includes>
    <includes local="no">string</includes>
    <includes refid="gmock_8h" local="yes">gmock/gmock.h</includes>
    <includes refid="gtest_8h" local="yes">gtest/gtest.h</includes>
    <includes refid="gtest-spi_8h" local="yes">gtest/gtest-spi.h</includes>
    <includedby refid="gmock__all__test_8cc" local="yes">vendor/googletest/googlemock/test/gmock_all_test.cc</includedby>
    <incdepgraph>
      <node id="2237">
        <label>sys/stat.h</label>
      </node>
      <node id="2255">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h_source"/>
        <childnode refid="2232" relation="include">
        </childnode>
      </node>
      <node id="2251">
        <label>iomanip</label>
      </node>
      <node id="2248">
        <label>limits</label>
      </node>
      <node id="2239">
        <label>gtest/internal/gtest-port-arch.h</label>
        <link refid="gtest-port-arch_8h_source"/>
      </node>
      <node id="2228">
        <label>assert.h</label>
      </node>
      <node id="2260">
        <label>iterator</label>
      </node>
      <node id="2250">
        <label>float.h</label>
      </node>
      <node id="2223">
        <label>gmock/internal/gmock-internal-utils.h</label>
        <link refid="gmock-internal-utils_8h_source"/>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
      </node>
      <node id="2279">
        <label>gmock/gmock-more-actions.h</label>
        <link refid="gmock-more-actions_8h_source"/>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2275" relation="include">
        </childnode>
      </node>
      <node id="2264">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h_source"/>
      </node>
      <node id="2229">
        <label>stdlib.h</label>
      </node>
      <node id="2253">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h_source"/>
        <childnode refid="2235" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
      </node>
      <node id="2265">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h_source"/>
        <childnode refid="2266" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2253" relation="include">
        </childnode>
      </node>
      <node id="2278">
        <label>gmock/gmock-generated-matchers.h</label>
        <link refid="gmock-generated-matchers_8h_source"/>
        <childnode refid="2260" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2271" relation="include">
        </childnode>
      </node>
      <node id="2221">
        <label>errno.h</label>
      </node>
      <node id="2273">
        <label>gmock/internal/custom/gmock-matchers.h</label>
        <link refid="internal_2custom_2gmock-matchers_8h_source"/>
      </node>
      <node id="2277">
        <label>gmock/gmock-generated-function-mockers.h</label>
        <link refid="gmock-generated-function-mockers_8h_source"/>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
      </node>
      <node id="2274">
        <label>gmock/gmock.h</label>
        <link refid="gmock_8h_source"/>
        <childnode refid="2220" relation="include">
        </childnode>
        <childnode refid="2269" relation="include">
        </childnode>
        <childnode refid="2275" relation="include">
        </childnode>
        <childnode refid="2277" relation="include">
        </childnode>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2278" relation="include">
        </childnode>
        <childnode refid="2271" relation="include">
        </childnode>
        <childnode refid="2279" relation="include">
        </childnode>
        <childnode refid="2280" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
      </node>
      <node id="2218">
        <label>string</label>
      </node>
      <node id="2215">
        <label>map</label>
      </node>
      <node id="2246">
        <label>gmock/internal/custom/gmock-port.h</label>
        <link refid="custom_2gmock-port_8h_source"/>
      </node>
      <node id="2263">
        <label>gtest/internal/gtest-param-util-generated.h</label>
        <link refid="gtest-param-util-generated_8h_source"/>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
      </node>
      <node id="2234">
        <label>stddef.h</label>
      </node>
      <node id="2268">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h_source"/>
      </node>
      <node id="2225">
        <label>ostream</label>
      </node>
      <node id="2240">
        <label>gtest/internal/custom/gtest-port.h</label>
        <link refid="custom_2gtest-port_8h_source"/>
      </node>
      <node id="2270">
        <label>limits.h</label>
      </node>
      <node id="2275">
        <label>gmock/gmock-generated-actions.h</label>
        <link refid="gmock-generated-actions_8h_source"/>
        <childnode refid="2220" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2276" relation="include">
        </childnode>
      </node>
      <node id="2256">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h_source"/>
        <childnode refid="2257" relation="include">
        </childnode>
      </node>
      <node id="2236">
        <label>sys/types.h</label>
      </node>
      <node id="2235">
        <label>string.h</label>
      </node>
      <node id="2220">
        <label>gmock/gmock-actions.h</label>
        <link refid="gmock-actions_8h_source"/>
        <childnode refid="2221" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
      </node>
      <node id="2244">
        <label>typeinfo</label>
      </node>
      <node id="2227">
        <label>gmock/internal/gmock-port.h</label>
        <link refid="gmock-port_8h_source"/>
        <childnode refid="2228" relation="include">
        </childnode>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2230" relation="include">
        </childnode>
        <childnode refid="2231" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2246" relation="include">
        </childnode>
      </node>
      <node id="2241">
        <label>unistd.h</label>
      </node>
      <node id="2219">
        <label>vector</label>
      </node>
      <node id="2212">
        <label>vendor/googletest/googlemock/test/gmock-nice-strict_test.cc</label>
        <link refid="gmock-nice-strict__test_8cc"/>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2274" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2281" relation="include">
        </childnode>
      </node>
      <node id="2262">
        <label>gtest/internal/custom/gtest-printers.h</label>
        <link refid="internal_2custom_2gtest-printers_8h_source"/>
      </node>
      <node id="2252">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h_source"/>
        <childnode refid="2248" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
      </node>
      <node id="2238">
        <label>utility</label>
      </node>
      <node id="2214">
        <label>gmock/gmock-spec-builders.h</label>
        <link refid="gmock-spec-builders_8h_source"/>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
        <childnode refid="2269" relation="include">
        </childnode>
        <childnode refid="2271" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
      </node>
      <node id="2217">
        <label>sstream</label>
      </node>
      <node id="2231">
        <label>gtest/internal/gtest-linked_ptr.h</label>
        <link refid="gtest-linked__ptr_8h_source"/>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2228" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
      </node>
      <node id="2271">
        <label>gmock/gmock-matchers.h</label>
        <link refid="gmock-matchers_8h_source"/>
        <childnode refid="2272" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2273" relation="include">
        </childnode>
      </node>
      <node id="2272">
        <label>math.h</label>
      </node>
      <node id="2213">
        <label>gmock/gmock-generated-nice-strict.h</label>
        <link refid="gmock-generated-nice-strict_8h_source"/>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
      </node>
      <node id="2266">
        <label>iosfwd</label>
      </node>
      <node id="2269">
        <label>gmock/gmock-cardinalities.h</label>
        <link refid="gmock-cardinalities_8h_source"/>
        <childnode refid="2270" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
      </node>
      <node id="2254">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h_source"/>
        <childnode refid="2253" relation="include">
        </childnode>
      </node>
      <node id="2230">
        <label>iostream</label>
      </node>
      <node id="2247">
        <label>gtest/gtest.h</label>
        <link refid="gtest_8h_source"/>
        <childnode refid="2248" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2253" relation="include">
        </childnode>
        <childnode refid="2256" relation="include">
        </childnode>
        <childnode refid="2252" relation="include">
        </childnode>
        <childnode refid="2258" relation="include">
        </childnode>
        <childnode refid="2261" relation="include">
        </childnode>
        <childnode refid="2264" relation="include">
        </childnode>
        <childnode refid="2265" relation="include">
        </childnode>
        <childnode refid="2267" relation="include">
        </childnode>
        <childnode refid="2268" relation="include">
        </childnode>
      </node>
      <node id="2245">
        <label>gtest/internal/gtest-tuple.h</label>
        <link refid="gtest-tuple_8h_source"/>
        <childnode refid="2238" relation="include">
        </childnode>
      </node>
      <node id="2242">
        <label>strings.h</label>
      </node>
      <node id="2233">
        <label>ctype.h</label>
      </node>
      <node id="2267">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h_source"/>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2255" relation="include">
        </childnode>
      </node>
      <node id="2232">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h_source"/>
        <childnode refid="2233" relation="include">
        </childnode>
        <childnode refid="2234" relation="include">
        </childnode>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2235" relation="include">
        </childnode>
        <childnode refid="2236" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2230" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2239" relation="include">
        </childnode>
        <childnode refid="2240" relation="include">
        </childnode>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2243" relation="include">
        </childnode>
        <childnode refid="2244" relation="include">
        </childnode>
        <childnode refid="2245" relation="include">
        </childnode>
      </node>
      <node id="2249">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h_source"/>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2233" relation="include">
        </childnode>
        <childnode refid="2250" relation="include">
        </childnode>
        <childnode refid="2235" relation="include">
        </childnode>
        <childnode refid="2251" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2252" relation="include">
        </childnode>
        <childnode refid="2253" relation="include">
        </childnode>
        <childnode refid="2254" relation="include">
        </childnode>
        <childnode refid="2255" relation="include">
        </childnode>
      </node>
      <node id="2280">
        <label>gmock/gmock-more-matchers.h</label>
        <link refid="gmock-more-matchers_8h_source"/>
        <childnode refid="2278" relation="include">
        </childnode>
      </node>
      <node id="2276">
        <label>gmock/internal/custom/gmock-generated-actions.h</label>
        <link refid="internal_2custom_2gmock-generated-actions_8h_source"/>
      </node>
      <node id="2259">
        <label>gtest/internal/gtest-param-util.h</label>
        <link refid="gtest-param-util_8h_source"/>
        <childnode refid="2233" relation="include">
        </childnode>
        <childnode refid="2260" relation="include">
        </childnode>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2231" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2261" relation="include">
        </childnode>
      </node>
      <node id="2226">
        <label>gmock/internal/gmock-generated-internal-utils.h</label>
        <link refid="gmock-generated-internal-utils_8h_source"/>
        <childnode refid="2227" relation="include">
        </childnode>
      </node>
      <node id="2216">
        <label>set</label>
      </node>
      <node id="2258">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h_source"/>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2259" relation="include">
        </childnode>
        <childnode refid="2263" relation="include">
        </childnode>
      </node>
      <node id="2222">
        <label>algorithm</label>
      </node>
      <node id="2243">
        <label>regex.h</label>
      </node>
      <node id="2281">
        <label>gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h_source"/>
        <childnode refid="2247" relation="include">
        </childnode>
      </node>
      <node id="2224">
        <label>stdio.h</label>
      </node>
      <node id="2257">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h_source"/>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
      </node>
      <node id="2261">
        <label>gtest/gtest-printers.h</label>
        <link refid="gtest-printers_8h_source"/>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2238" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2262" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_mock" prot="public">Mock</innerclass>
    <innerclass refid="classtesting_1_1gmock__nice__strict__test_1_1_foo" prot="public">testing::gmock_nice_strict_test::Foo</innerclass>
    <innerclass refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" prot="public">testing::gmock_nice_strict_test::MockFoo</innerclass>
    <innerclass refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_bar" prot="public">testing::gmock_nice_strict_test::MockBar</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__nice__strict__test">testing::gmock_nice_strict_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2008,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock-generated-nice-strict.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gmock/gmock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest-spi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>must<sp/>not<sp/>be<sp/>defined<sp/>inside<sp/>the<sp/>::testing<sp/>namespace,<sp/>or<sp/>it<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clash<sp/>with<sp/>::testing::Mock.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="class_mock" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_mock" kindref="compound">Mock</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="class_mock" kindref="compound">Mock</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(DoThis,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="class_mock" kindref="compound">Mock</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacetesting" kindref="compound">testing</ref><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gmock_nice_strict_test<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::string;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::GMOCK_FLAG(verbose);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::HasSubstr;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">testing::NaggyMock</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">testing::NiceMock</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">testing::StrictMock</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::CaptureStdout;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>testing::internal::GetCapturedStdout;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>some<sp/>mock<sp/>classes<sp/>needed<sp/>by<sp/>the<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classtesting_1_1gmock__nice__strict__test_1_1_foo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_foo" kindref="compound">Foo</ref><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1gmock__nice__strict__test_1_1_foo" kindref="compound">Foo</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoThis()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DoThat(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" kindref="compound">MockFoo</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_foo" kindref="compound">Foo</ref><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" kindref="compound">MockFoo</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Delete()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(DoThis,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>MOCK_METHOD1(DoThat,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" kindref="compound">MockFoo</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_bar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_bar" kindref="compound">MockBar</ref><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_bar" kindref="compound">MockBar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>s)<sp/>:<sp/>str_(s)<sp/>{}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_bar" kindref="compound">MockBar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>a2,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>a3,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>a4,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a5,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a6,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>a7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>a8,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a9,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>a10)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>str_<sp/>=<sp/>string()<sp/>+<sp/>a1<sp/>+<sp/>a2<sp/>+<sp/>a3<sp/>+<sp/>a4<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a5)<sp/>+</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;char&gt;(a6)<sp/>+<sp/>a7<sp/>+<sp/>a8<sp/>+<sp/>(a9<sp/>?<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>+<sp/>(a10<sp/>?<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_bar" kindref="compound">MockBar</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>MOCK_METHOD0(This,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>MOCK_METHOD2(That,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str_;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(<ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_bar" kindref="compound">MockBar</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>raw<sp/>mock<sp/>generates<sp/>warnings<sp/>for<sp/>uninteresting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">TEST(RawMockTest,<sp/>WarningForUninterestingCall)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG(verbose);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" kindref="compound">MockFoo</ref><sp/>raw_foo;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>raw_foo.DoThis();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>raw_foo.DoThat(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>EXPECT_THAT(GetCapturedStdout(),</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/>saved_flag;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>raw<sp/>mock<sp/>generates<sp/>warnings<sp/>for<sp/>uninteresting<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>delete<sp/>the<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">TEST(RawMockTest,<sp/>WarningForUninterestingCallAfterDeath)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG(verbose);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" kindref="compound">MockFoo</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>raw_foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" kindref="compound">MockFoo</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>ON_CALL(*raw_foo,<sp/>DoThis())</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(raw_foo,<sp/>&amp;MockFoo::Delete));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>raw_foo-&gt;DoThis();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>EXPECT_THAT(GetCapturedStdout(),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/>saved_flag;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>raw<sp/>mock<sp/>generates<sp/>informational<sp/>logs<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uninteresting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">TEST(RawMockTest,<sp/>InfoForUninterestingCall)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1gmock__nice__strict__test_1_1_mock_foo" kindref="compound">MockFoo</ref><sp/>raw_foo;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG(verbose);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>raw_foo.DoThis();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>EXPECT_THAT(GetCapturedStdout(),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/>saved_flag;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>nice<sp/>mock<sp/>generates<sp/>no<sp/>warning<sp/>for<sp/>uninteresting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">TEST(NiceMockTest,<sp/>NoWarningForUninterestingCall)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockFoo&gt;</ref><sp/>nice_foo;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>nice_foo.DoThis();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>nice_foo.DoThat(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStdout());</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>nice<sp/>mock<sp/>generates<sp/>no<sp/>warning<sp/>for<sp/>uninteresting<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>delete<sp/>the<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">TEST(NiceMockTest,<sp/>NoWarningForUninterestingCallAfterDeath)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockFoo&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nice_foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockFoo&gt;</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>ON_CALL(*nice_foo,<sp/>DoThis())</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(nice_foo,<sp/>&amp;MockFoo::Delete));</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>nice_foo-&gt;DoThis();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>GetCapturedStdout());</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>nice<sp/>mock<sp/>generates<sp/>informational<sp/>logs<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uninteresting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">TEST(NiceMockTest,<sp/>InfoForUninterestingCall)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockFoo&gt;</ref><sp/>nice_foo;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG(verbose);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>nice_foo.DoThis();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>EXPECT_THAT(GetCapturedStdout(),</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/>saved_flag;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>nice<sp/>mock<sp/>allows<sp/>expected<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">TEST(NiceMockTest,<sp/>AllowsExpectedCall)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockFoo&gt;</ref><sp/>nice_foo;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>EXPECT_CALL(nice_foo,<sp/>DoThis());</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>nice_foo.DoThis();</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>unexpected<sp/>call<sp/>on<sp/>a<sp/>nice<sp/>mock<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">TEST(NiceMockTest,<sp/>UnexpectedCallFails)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockFoo&gt;</ref><sp/>nice_foo;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>EXPECT_CALL(nice_foo,<sp/>DoThis()).Times(0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(nice_foo.DoThis(),<sp/></highlight><highlight class="stringliteral">&quot;called<sp/>more<sp/>times<sp/>than<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NiceMock<sp/>works<sp/>with<sp/>a<sp/>mock<sp/>class<sp/>that<sp/>has<sp/>a<sp/>non-default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">TEST(NiceMockTest,<sp/>NonDefaultConstructor)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockBar&gt;</ref><sp/>nice_bar(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>nice_bar.str());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>nice_bar.This();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>nice_bar.That(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NiceMock<sp/>works<sp/>with<sp/>a<sp/>mock<sp/>class<sp/>that<sp/>has<sp/>a<sp/>10-ary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">TEST(NiceMockTest,<sp/>NonDefaultConstructor10)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt;MockBar&gt;</ref><sp/>nice_bar(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;abcdefghTF&quot;</highlight><highlight class="normal">,<sp/>nice_bar.str());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>nice_bar.This();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>nice_bar.That(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_SYMBIAN<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NiceMock&lt;Mock&gt;<sp/>compiles<sp/>where<sp/>Mock<sp/>is<sp/>a<sp/>user-defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>(as<sp/>opposed<sp/>to<sp/>::testing::Mock).<sp/><sp/>We<sp/>had<sp/>to<sp/>work<sp/>around<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>8.0<sp/>bug<sp/>that<sp/>caused<sp/>the<sp/>symbol<sp/>Mock<sp/>used<sp/>in<sp/>the<sp/>definition<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NiceMock<sp/>to<sp/>be<sp/>looked<sp/>up<sp/>in<sp/>the<sp/>wrong<sp/>context,<sp/>and<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ensures<sp/>that<sp/>our<sp/>fix<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>skip<sp/>this<sp/>test<sp/>on<sp/>Symbian<sp/>and<sp/>Windows<sp/>Mobile,<sp/>as<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>causes<sp/>the<sp/>program<sp/>to<sp/>crash<sp/>there,<sp/>for<sp/>reasons<sp/>unclear<sp/>to<sp/>us<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">TEST(NiceMockTest,<sp/>AcceptsClassNamedMock)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_nice_mock" kindref="compound">NiceMock&lt; ::Mock&gt;</ref><sp/>nice;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>EXPECT_CALL(nice,<sp/>DoThis());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>nice.DoThis();</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!GTEST_OS_SYMBIAN<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>naggy<sp/>mock<sp/>generates<sp/>warnings<sp/>for<sp/>uninteresting<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">TEST(NaggyMockTest,<sp/>WarningForUninterestingCall)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG(verbose);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockFoo&gt;</ref><sp/>naggy_foo;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>naggy_foo.DoThis();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>naggy_foo.DoThat(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>EXPECT_THAT(GetCapturedStdout(),</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/>saved_flag;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>naggy<sp/>mock<sp/>generates<sp/>a<sp/>warning<sp/>for<sp/>an<sp/>uninteresting<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>deletes<sp/>the<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">TEST(NaggyMockTest,<sp/>WarningForUninterestingCallAfterDeath)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>saved_flag<sp/>=<sp/>GMOCK_FLAG(verbose);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockFoo&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>naggy_foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockFoo&gt;</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>ON_CALL(*naggy_foo,<sp/>DoThis())</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(naggy_foo,<sp/>&amp;MockFoo::Delete));</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>CaptureStdout();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>naggy_foo-&gt;DoThis();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>EXPECT_THAT(GetCapturedStdout(),</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasSubstr(</highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>GMOCK_FLAG(verbose)<sp/>=<sp/>saved_flag;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STREAM_REDIRECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>naggy<sp/>mock<sp/>allows<sp/>expected<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">TEST(NaggyMockTest,<sp/>AllowsExpectedCall)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockFoo&gt;</ref><sp/>naggy_foo;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>EXPECT_CALL(naggy_foo,<sp/>DoThis());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>naggy_foo.DoThis();</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>unexpected<sp/>call<sp/>on<sp/>a<sp/>naggy<sp/>mock<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">TEST(NaggyMockTest,<sp/>UnexpectedCallFails)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockFoo&gt;</ref><sp/>naggy_foo;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>EXPECT_CALL(naggy_foo,<sp/>DoThis()).Times(0);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(naggy_foo.DoThis(),</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;called<sp/>more<sp/>times<sp/>than<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NaggyMock<sp/>works<sp/>with<sp/>a<sp/>mock<sp/>class<sp/>that<sp/>has<sp/>a<sp/>non-default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">TEST(NaggyMockTest,<sp/>NonDefaultConstructor)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockBar&gt;</ref><sp/>naggy_bar(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>naggy_bar.str());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>naggy_bar.This();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>naggy_bar.That(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NaggyMock<sp/>works<sp/>with<sp/>a<sp/>mock<sp/>class<sp/>that<sp/>has<sp/>a<sp/>10-ary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal">TEST(NaggyMockTest,<sp/>NonDefaultConstructor10)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt;MockBar&gt;</ref><sp/>naggy_bar(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;7&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;01234567TF&quot;</highlight><highlight class="normal">,<sp/>naggy_bar.str());</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>naggy_bar.This();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>naggy_bar.That(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_SYMBIAN<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>NaggyMock&lt;Mock&gt;<sp/>compiles<sp/>where<sp/>Mock<sp/>is<sp/>a<sp/>user-defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>(as<sp/>opposed<sp/>to<sp/>::testing::Mock).<sp/><sp/>We<sp/>had<sp/>to<sp/>work<sp/>around<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>8.0<sp/>bug<sp/>that<sp/>caused<sp/>the<sp/>symbol<sp/>Mock<sp/>used<sp/>in<sp/>the<sp/>definition<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NaggyMock<sp/>to<sp/>be<sp/>looked<sp/>up<sp/>in<sp/>the<sp/>wrong<sp/>context,<sp/>and<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ensures<sp/>that<sp/>our<sp/>fix<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>skip<sp/>this<sp/>test<sp/>on<sp/>Symbian<sp/>and<sp/>Windows<sp/>Mobile,<sp/>as<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>causes<sp/>the<sp/>program<sp/>to<sp/>crash<sp/>there,<sp/>for<sp/>reasons<sp/>unclear<sp/>to<sp/>us<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">TEST(NaggyMockTest,<sp/>AcceptsClassNamedMock)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_naggy_mock" kindref="compound">NaggyMock&lt; ::Mock&gt;</ref><sp/>naggy;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>EXPECT_CALL(naggy,<sp/>DoThis());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>naggy.DoThis();</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!GTEST_OS_SYMBIAN<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>a<sp/>strict<sp/>mock<sp/>allows<sp/>expected<sp/>calls.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">TEST(StrictMockTest,<sp/>AllowsExpectedCall)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt;MockFoo&gt;</ref><sp/>strict_foo;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>EXPECT_CALL(strict_foo,<sp/>DoThis());</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>strict_foo.DoThis();</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>unexpected<sp/>call<sp/>on<sp/>a<sp/>strict<sp/>mock<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">TEST(StrictMockTest,<sp/>UnexpectedCallFails)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt;MockFoo&gt;</ref><sp/>strict_foo;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>EXPECT_CALL(strict_foo,<sp/>DoThis()).Times(0);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(strict_foo.DoThis(),</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;called<sp/>more<sp/>times<sp/>than<sp/>expected&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>uninteresting<sp/>call<sp/>on<sp/>a<sp/>strict<sp/>mock<sp/>fails.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">TEST(StrictMockTest,<sp/>UninterestingCallFails)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt;MockFoo&gt;</ref><sp/>strict_foo;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(strict_foo.DoThis(),</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>an<sp/>uninteresting<sp/>call<sp/>on<sp/>a<sp/>strict<sp/>mock<sp/>fails,<sp/>even<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>deletes<sp/>the<sp/>mock<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">TEST(StrictMockTest,<sp/>UninterestingCallFailsAfterDeath)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt;MockFoo&gt;</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>strict_foo<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt;MockFoo&gt;</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>ON_CALL(*strict_foo,<sp/>DoThis())</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.WillByDefault(Invoke(strict_foo,<sp/>&amp;MockFoo::Delete));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(strict_foo-&gt;DoThis(),</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>StrictMock<sp/>works<sp/>with<sp/>a<sp/>mock<sp/>class<sp/>that<sp/>has<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">TEST(StrictMockTest,<sp/>NonDefaultConstructor)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt;MockBar&gt;</ref><sp/>strict_bar(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;hi&quot;</highlight><highlight class="normal">,<sp/>strict_bar.str());</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(strict_bar.That(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>StrictMock<sp/>works<sp/>with<sp/>a<sp/>mock<sp/>class<sp/>that<sp/>has<sp/>a<sp/>10-ary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-default<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">TEST(StrictMockTest,<sp/>NonDefaultConstructor10)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt;MockBar&gt;</ref><sp/>strict_bar(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;d&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>EXPECT_EQ(</highlight><highlight class="stringliteral">&quot;abcdefghTF&quot;</highlight><highlight class="normal">,<sp/>strict_bar.str());</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>EXPECT_NONFATAL_FAILURE(strict_bar.That(5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Uninteresting<sp/>mock<sp/>function<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!GTEST_OS_SYMBIAN<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>that<sp/>StrictMock&lt;Mock&gt;<sp/>compiles<sp/>where<sp/>Mock<sp/>is<sp/>a<sp/>user-defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>(as<sp/>opposed<sp/>to<sp/>::testing::Mock).<sp/><sp/>We<sp/>had<sp/>to<sp/>work<sp/>around<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>8.0<sp/>bug<sp/>that<sp/>caused<sp/>the<sp/>symbol<sp/>Mock<sp/>used<sp/>in<sp/>the<sp/>definition<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StrictMock<sp/>to<sp/>be<sp/>looked<sp/>up<sp/>in<sp/>the<sp/>wrong<sp/>context,<sp/>and<sp/>this<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ensures<sp/>that<sp/>our<sp/>fix<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>skip<sp/>this<sp/>test<sp/>on<sp/>Symbian<sp/>and<sp/>Windows<sp/>Mobile,<sp/>as<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>causes<sp/>the<sp/>program<sp/>to<sp/>crash<sp/>there,<sp/>for<sp/>reasons<sp/>unclear<sp/>to<sp/>us<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">TEST(StrictMockTest,<sp/>AcceptsClassNamedMock)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1_strict_mock" kindref="compound">StrictMock&lt; ::Mock&gt;</ref><sp/>strict;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>EXPECT_CALL(strict,<sp/>DoThis());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>strict.DoThis();</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>!GTEST_OS_SYMBIAN<sp/>&amp;&amp;<sp/>!GTEST_OS_WINDOWS_MOBILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gmock_nice_strict_test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/test/gmock-nice-strict_test.cc"/>
  </compounddef>
</doxygen>
