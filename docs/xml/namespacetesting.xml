<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacetesting" kind="namespace" language="C++">
    <compoundname>testing</compoundname>
    <innerclass refid="classtesting_1_1_action" prot="public">testing::Action</innerclass>
    <innerclass refid="classtesting_1_1_action_interface" prot="public">testing::ActionInterface</innerclass>
    <innerclass refid="classtesting_1_1_assertion_result" prot="public">testing::AssertionResult</innerclass>
    <innerclass refid="classtesting_1_1_cardinality" prot="public">testing::Cardinality</innerclass>
    <innerclass refid="classtesting_1_1_cardinality_interface" prot="public">testing::CardinalityInterface</innerclass>
    <innerclass refid="classtesting_1_1_code_location_for_t_e_s_t_f" prot="public">testing::CodeLocationForTESTF</innerclass>
    <innerclass refid="classtesting_1_1_code_location_for_t_e_s_t_p" prot="public">testing::CodeLocationForTESTP</innerclass>
    <innerclass refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t" prot="public">testing::CodeLocationForTYPEDTEST</innerclass>
    <innerclass refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p" prot="public">testing::CodeLocationForTYPEDTESTP</innerclass>
    <innerclass refid="classtesting_1_1_current_test_info_test" prot="public">testing::CurrentTestInfoTest</innerclass>
    <innerclass refid="classtesting_1_1_default_value" prot="public">testing::DefaultValue</innerclass>
    <innerclass refid="classtesting_1_1_default_value_3_01_t_01_6_01_4" prot="public">testing::DefaultValue&lt; T &amp; &gt;</innerclass>
    <innerclass refid="classtesting_1_1_default_value_3_01void_01_4" prot="public">testing::DefaultValue&lt; void &gt;</innerclass>
    <innerclass refid="classtesting_1_1_empty_test_event_listener" prot="public">testing::EmptyTestEventListener</innerclass>
    <innerclass refid="classtesting_1_1_environment" prot="public">testing::Environment</innerclass>
    <innerclass refid="classtesting_1_1_expectation" prot="public">testing::Expectation</innerclass>
    <innerclass refid="classtesting_1_1_expectation_set" prot="public">testing::ExpectationSet</innerclass>
    <innerclass refid="structtesting_1_1_flags" prot="public">testing::Flags</innerclass>
    <innerclass refid="classtesting_1_1_init_google_test_test" prot="public">testing::InitGoogleTestTest</innerclass>
    <innerclass refid="classtesting_1_1_in_sequence" prot="public">testing::InSequence</innerclass>
    <innerclass refid="classtesting_1_1_matcher" prot="public">testing::Matcher</innerclass>
    <innerclass refid="classtesting_1_1_matcher_3_01const_01internal_1_1string_01_6_4" prot="public">testing::Matcher&lt; const internal::string &amp;&gt;</innerclass>
    <innerclass refid="classtesting_1_1_matcher_3_01internal_1_1string_01_4" prot="public">testing::Matcher&lt; internal::string &gt;</innerclass>
    <innerclass refid="classtesting_1_1_matcher_describer_interface" prot="public">testing::MatcherDescriberInterface</innerclass>
    <innerclass refid="classtesting_1_1_matcher_interface" prot="public">testing::MatcherInterface</innerclass>
    <innerclass refid="classtesting_1_1_match_result_listener" prot="public">testing::MatchResultListener</innerclass>
    <innerclass refid="classtesting_1_1_message" prot="public">testing::Message</innerclass>
    <innerclass refid="classtesting_1_1_mock" prot="public">testing::Mock</innerclass>
    <innerclass refid="classtesting_1_1_mock_function" prot="public">testing::MockFunction</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_08_4" prot="public">testing::MockFunction&lt; R()&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_08_4" prot="public">testing::MockFunction&lt; R(A0)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_08_4" prot="public">testing::MockFunction&lt; R(A0, A1)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_00_01_a3_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_00_01_a3_00_01_a4_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6, A7)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a6_00_01_a7_00_01_a8_08_4" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6, A7, A8)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_mock_function_3_01_r_07_a0_00_01_a1_00_01_a2_00_01_a3_00_01_a4_00_01_a5_00_01_a654a9d62da83bde10dfec0368733bb48" prot="public">testing::MockFunction&lt; R(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)&gt;</innerclass>
    <innerclass refid="classtesting_1_1_naggy_mock" prot="public">testing::NaggyMock</innerclass>
    <innerclass refid="classtesting_1_1_nice_mock" prot="public">testing::NiceMock</innerclass>
    <innerclass refid="classtesting_1_1_polymorphic_action" prot="public">testing::PolymorphicAction</innerclass>
    <innerclass refid="classtesting_1_1_polymorphic_matcher" prot="public">testing::PolymorphicMatcher</innerclass>
    <innerclass refid="classtesting_1_1_safe_matcher_cast_impl" prot="public">testing::SafeMatcherCastImpl</innerclass>
    <innerclass refid="classtesting_1_1_scoped_fake_test_part_result_reporter" prot="public">testing::ScopedFakeTestPartResultReporter</innerclass>
    <innerclass refid="classtesting_1_1_sequence" prot="public">testing::Sequence</innerclass>
    <innerclass refid="classtesting_1_1_set_up_test_case_test" prot="public">testing::SetUpTestCaseTest</innerclass>
    <innerclass refid="classtesting_1_1_strict_mock" prot="public">testing::StrictMock</innerclass>
    <innerclass refid="classtesting_1_1_string_match_result_listener" prot="public">testing::StringMatchResultListener</innerclass>
    <innerclass refid="classtesting_1_1_test" prot="public">testing::Test</innerclass>
    <innerclass refid="classtesting_1_1_test_case" prot="public">testing::TestCase</innerclass>
    <innerclass refid="classtesting_1_1_test_event_listener" prot="public">testing::TestEventListener</innerclass>
    <innerclass refid="classtesting_1_1_test_event_listeners" prot="public">testing::TestEventListeners</innerclass>
    <innerclass refid="classtesting_1_1_test_info" prot="public">testing::TestInfo</innerclass>
    <innerclass refid="classtesting_1_1_test_info_test" prot="public">testing::TestInfoTest</innerclass>
    <innerclass refid="classtesting_1_1_test_part_result" prot="public">testing::TestPartResult</innerclass>
    <innerclass refid="classtesting_1_1_test_part_result_array" prot="public">testing::TestPartResultArray</innerclass>
    <innerclass refid="classtesting_1_1_test_part_result_reporter_interface" prot="public">testing::TestPartResultReporterInterface</innerclass>
    <innerclass refid="classtesting_1_1_test_property" prot="public">testing::TestProperty</innerclass>
    <innerclass refid="classtesting_1_1_test_result" prot="public">testing::TestResult</innerclass>
    <innerclass refid="classtesting_1_1_unit_test" prot="public">testing::UnitTest</innerclass>
    <innernamespace refid="namespacetesting_1_1gmock__generated__actions__test">testing::gmock_generated_actions_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__generated__function__mockers__test">testing::gmock_generated_function_mockers_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__matchers__test">testing::gmock_matchers_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__more__actions__test">testing::gmock_more_actions_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gmock__nice__strict__test">testing::gmock_nice_strict_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1gtest__printers__test">testing::gtest_printers_test</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal2">testing::internal2</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="gmock-actions_8h_1a603e329ec0263ebfcf16f712810bd511" prot="public" static="no">
        <type><ref refid="classtesting_1_1internal_1_1_ignored_value" kindref="compound">internal::IgnoredValue</ref></type>
        <definition>typedef internal::IgnoredValue testing::Unused</definition>
        <argsstring></argsstring>
        <name>Unused</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1046" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="gtest_8h_1a992de1d091ce660f451d1e8b3ce30fd6" prot="public" static="no">
        <type>internal::TimeInMillis</type>
        <definition>typedef internal::TimeInMillis testing::TimeInMillis</definition>
        <argsstring></argsstring>
        <name>TimeInMillis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="480" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gmock-matchers_8h_1a4ba77a3f5b67166ff1b59d96a32346a2" prot="public" static="no" mutable="no">
        <type>const <ref refid="classtesting_1_1internal_1_1_anything_matcher" kindref="compound">internal::AnythingMatcher</ref></type>
        <definition>const internal::AnythingMatcher testing::_</definition>
        <argsstring></argsstring>
        <name>_</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3729" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gmock-spec-builders_8h_1ae028f80705ba0f84ce7d036bf3793448" prot="public" static="no" mutable="no">
        <type>class GTEST_API_ <ref refid="classtesting_1_1_in_sequence" kindref="compound">testing::InSequence</ref></type>
        <definition>class GTEST_API_ testing::InSequence  testing::GTEST_ATTRIBUTE_UNUSED_</definition>
        <argsstring></argsstring>
        <name>GTEST_ATTRIBUTE_UNUSED_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="668" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8h_1ae605f2ccac04616bb7812ca72e517082" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int testing::kMaxStackTraceDepth</definition>
        <argsstring></argsstring>
        <name>kMaxStackTraceDepth</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="147" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest-death-test_8cc_1a317291240e750e2142a23cbd52bc5aec" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultDeathTestStyle[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultDeathTestStyle</name>
        <initializer>= &quot;fast&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-death-test.cc" line="84" column="1" bodyfile="vendor/googletest/googletest/src/gtest-death-test.cc" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a0a2a3239fb038e7ce83195d89941872d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDisableTestFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDisableTestFilter</name>
        <initializer>= &quot;DISABLED_*:*/DISABLED_*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="160" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a23c33f4bfcc3c2e5e620eff31a98892d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDeathTestCaseFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kDeathTestCaseFilter</name>
        <initializer>= &quot;*DeathTest:*DeathTest/*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="165" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a236f8612e4b148d8d989a311a30a4557" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kUniversalFilter[]</definition>
        <argsstring>[]</argsstring>
        <name>kUniversalFilter</name>
        <initializer>= &quot;*&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="168" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1aa5a002b5bb3784c830b1c99aa2688f27" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kDefaultOutputFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kDefaultOutputFile</name>
        <initializer>= &quot;test_detail.xml&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="171" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a5f76dfdb8cb2664da54e320ecaba3643" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardIndex[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardIndex</name>
        <initializer>= &quot;GTEST_SHARD_INDEX&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="174" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a7542311baba200ebabd4065717606f6e" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestTotalShards[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestTotalShards</name>
        <initializer>= &quot;GTEST_TOTAL_SHARDS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="176" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1a57d3eeb1e968b4f1efc4787b2d39fbfa" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char testing::kTestShardStatusFile[]</definition>
        <argsstring>[]</argsstring>
        <name>kTestShardStatusFile</name>
        <initializer>= &quot;GTEST_SHARD_STATUS_FILE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="178" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1afa194c15a2ac0e03029019b0f4029968" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestSuitesAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuitesAttributes</name>
        <initializer>= {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;random_seed&quot;,
  &quot;tests&quot;,
  &quot;time&quot;,
  &quot;timestamp&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2075" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1af44b2969928d37e9081145760f21e79a" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestSuiteAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestSuiteAttributes</name>
        <initializer>= {
  &quot;disabled&quot;,
  &quot;errors&quot;,
  &quot;failures&quot;,
  &quot;name&quot;,
  &quot;tests&quot;,
  &quot;time&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2088" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gtest_8cc_1ae9689f28cd859736f734623b26c93d88" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const testing::kReservedTestCaseAttributes[]</definition>
        <argsstring>[]</argsstring>
        <name>kReservedTestCaseAttributes</name>
        <initializer>= {
  &quot;classname&quot;,
  &quot;name&quot;,
  &quot;status&quot;,
  &quot;time&quot;,
  &quot;type_param&quot;,
  &quot;value_param&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2098" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2098" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gmock-actions_8h_1ae6b9960db2b2685e043ce5215291f5b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_action" kindref="compound">Action</ref>&lt; F &gt;</type>
        <definition>Action&lt;F&gt; testing::MakeAction</definition>
        <argsstring>(ActionInterface&lt; F &gt; *impl)</argsstring>
        <name>MakeAction</name>
        <param>
          <type><ref refid="classtesting_1_1_action_interface" kindref="compound">ActionInterface</ref>&lt; F &gt; *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="463" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="463" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a36bd06c5ea972c6df0bd9f40a7a94c65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Impl</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; Impl &gt;</type>
        <definition>PolymorphicAction&lt;Impl&gt; testing::MakePolymorphicAction</definition>
        <argsstring>(const Impl &amp;impl)</argsstring>
        <name>MakePolymorphicAction</name>
        <param>
          <type>const Impl &amp;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="475" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="475" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1af6d1c13e9376c77671e37545cd84359c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_return_action" kindref="compound">internal::ReturnAction</ref>&lt; R &gt;</type>
        <definition>internal::ReturnAction&lt;R&gt; testing::Return</definition>
        <argsstring>(R value)</argsstring>
        <name>Return</name>
        <param>
          <type>R</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1061" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1061" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aa0331596e269114da101f810d3a1b88b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_return_null_action" kindref="compound">internal::ReturnNullAction</ref> &gt;</type>
        <definition>PolymorphicAction&lt;internal::ReturnNullAction&gt; testing::ReturnNull</definition>
        <argsstring>()</argsstring>
        <name>ReturnNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1066" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1066" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a8da8e53d2e7bc4e3c531f7435ad04823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_return_void_action" kindref="compound">internal::ReturnVoidAction</ref> &gt;</type>
        <definition>PolymorphicAction&lt;internal::ReturnVoidAction&gt; testing::Return</definition>
        <argsstring>()</argsstring>
        <name>Return</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1071" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1071" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a18eda8fe9c89ee856c199a2e04ca1641" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_return_ref_action" kindref="compound">internal::ReturnRefAction</ref>&lt; R &gt;</type>
        <definition>internal::ReturnRefAction&lt;R&gt; testing::ReturnRef</definition>
        <argsstring>(R &amp;x)</argsstring>
        <name>ReturnRef</name>
        <param>
          <type>R &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1077" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1077" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ac1b75444c89371dc25ebcfcc48336201" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_return_ref_of_copy_action" kindref="compound">internal::ReturnRefOfCopyAction</ref>&lt; R &gt;</type>
        <definition>internal::ReturnRefOfCopyAction&lt;R&gt; testing::ReturnRefOfCopy</definition>
        <argsstring>(const R &amp;x)</argsstring>
        <name>ReturnRefOfCopy</name>
        <param>
          <type>const R &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1085" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1085" bodyend="1087"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1acaa432211a3aec62e3d0f24b47bd2dae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_by_move_wrapper" kindref="compound">internal::ByMoveWrapper</ref>&lt; R &gt;</type>
        <definition>internal::ByMoveWrapper&lt;R&gt; testing::ByMove</definition>
        <argsstring>(R x)</argsstring>
        <name>ByMove</name>
        <param>
          <type>R</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1094" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1094" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ae041df61ff61ccb9753ba15b4309e1a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_do_default_action" kindref="compound">internal::DoDefaultAction</ref></type>
        <definition>internal::DoDefaultAction testing::DoDefault</definition>
        <argsstring>()</argsstring>
        <name>DoDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1099" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1099" bodyend="1101"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a5740a5033b88c37666fcd09a269d123f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; N, T, <ref refid="structtesting_1_1internal_1_1_is_a_protocol_message" kindref="compound">internal::IsAProtocolMessage</ref>&lt; T &gt;::value &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt; N, T, internal::IsAProtocolMessage&lt;T&gt;::value&gt; &gt; testing::SetArgPointee</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>SetArgPointee</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1109" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1109" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a4a190fd2d02fb7cd79c5b3df3f80b647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; N, const char *, false &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt;N, const char*, false&gt; &gt; testing::SetArgPointee</definition>
        <argsstring>(const char *p)</argsstring>
        <name>SetArgPointee</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1121" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ac128085b4a8d64563fd5ccef324ea177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; N, const wchar_t *, false &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt;N, const wchar_t*, false&gt; &gt; testing::SetArgPointee</definition>
        <argsstring>(const wchar_t *p)</argsstring>
        <name>SetArgPointee</name>
        <param>
          <type>const wchar_t *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1129" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1129" bodyend="1132"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a03b315d27c91a8e719f2b6c09964130b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_set_argument_pointee_action" kindref="compound">internal::SetArgumentPointeeAction</ref>&lt; N, T, <ref refid="structtesting_1_1internal_1_1_is_a_protocol_message" kindref="compound">internal::IsAProtocolMessage</ref>&lt; T &gt;::value &gt; &gt;</type>
        <definition>PolymorphicAction&lt; internal::SetArgumentPointeeAction&lt; N, T, internal::IsAProtocolMessage&lt;T&gt;::value&gt; &gt; testing::SetArgumentPointee</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>SetArgumentPointee</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1140" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1140" bodyend="1143"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1abfc4121b8708e8b22a096ff8be88a9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_assign_action" kindref="compound">internal::AssignAction</ref>&lt; T1, T2 &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::AssignAction&lt;T1, T2&gt; &gt; testing::Assign</definition>
        <argsstring>(T1 *ptr, T2 val)</argsstring>
        <name>Assign</name>
        <param>
          <type>T1 *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1147" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1147" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a31095e421f167fade2e6d4d60df1f4da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_set_errno_and_return_action" kindref="compound">internal::SetErrnoAndReturnAction</ref>&lt; T &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::SetErrnoAndReturnAction&lt;T&gt; &gt; testing::SetErrnoAndReturn</definition>
        <argsstring>(int errval, T result)</argsstring>
        <name>SetErrnoAndReturn</name>
        <param>
          <type>int</type>
          <declname>errval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1156" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1156" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a88cc1999296bc630f6a49cdf66bb21f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctionImpl</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_invoke_without_args_action" kindref="compound">internal::InvokeWithoutArgsAction</ref>&lt; FunctionImpl &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeWithoutArgsAction&lt;FunctionImpl&gt; &gt; testing::InvokeWithoutArgs</definition>
        <argsstring>(FunctionImpl function_impl)</argsstring>
        <name>InvokeWithoutArgs</name>
        <param>
          <type>FunctionImpl</type>
          <declname>function_impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1168" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1168" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1ab75325d71a8c37db94f349243815c728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Class</type>
          </param>
          <param>
            <type>typename MethodPtr</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_invoke_method_without_args_action" kindref="compound">internal::InvokeMethodWithoutArgsAction</ref>&lt; Class, MethodPtr &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeMethodWithoutArgsAction&lt;Class, MethodPtr&gt; &gt; testing::InvokeWithoutArgs</definition>
        <argsstring>(Class *obj_ptr, MethodPtr method_ptr)</argsstring>
        <name>InvokeWithoutArgs</name>
        <param>
          <type>Class *</type>
          <declname>obj_ptr</declname>
        </param>
        <param>
          <type>MethodPtr</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1177" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1177" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1a50ae42540a31047c7fddd32df8d835f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_ignore_result_action" kindref="compound">internal::IgnoreResultAction</ref>&lt; A &gt;</type>
        <definition>internal::IgnoreResultAction&lt;A&gt; testing::IgnoreResult</definition>
        <argsstring>(const A &amp;an_action)</argsstring>
        <name>IgnoreResult</name>
        <param>
          <type>const A &amp;</type>
          <declname>an_action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1187" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1187" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="gmock-actions_8h_1aaee6d42dcd69de6e7a1459c5c71222c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_reference_wrapper" kindref="compound">internal::ReferenceWrapper</ref>&lt; T &gt;</type>
        <definition>internal::ReferenceWrapper&lt;T&gt; testing::ByRef</definition>
        <argsstring>(T &amp;l_value)</argsstring>
        <name>ByRef</name>
        <param>
          <type>T &amp;</type>
          <declname>l_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="1199" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-actions.h" bodystart="1199" bodyend="1201"/>
      </memberdef>
      <memberdef kind="function" id="gmock-cardinalities_8h_1a137297cb3c582843989fbd937cf0fed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::AtLeast</definition>
        <argsstring>(int n)</argsstring>
        <name>AtLeast</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h" line="126" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-cardinalities.cc" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="gmock-cardinalities_8h_1a5487cd1068c78821ced96fbf542a91bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::AtMost</definition>
        <argsstring>(int n)</argsstring>
        <name>AtMost</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h" line="129" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-cardinalities.cc" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="gmock-cardinalities_8h_1aa1f8a6371097e1e9b8d6866020f35252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::AnyNumber</definition>
        <argsstring>()</argsstring>
        <name>AnyNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h" line="132" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-cardinalities.cc" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="gmock-cardinalities_8h_1a3bb2d3cdd3fdf5b4be1480fce549918e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::Between</definition>
        <argsstring>(int min, int max)</argsstring>
        <name>Between</name>
        <param>
          <type>int</type>
          <declname>min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h" line="135" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-cardinalities.cc" bodystart="149" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="gmock-cardinalities_8h_1aa9b1b32ba9e8d3db8ac0af0fc8785c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref></type>
        <definition>GTEST_API_ Cardinality testing::Exactly</definition>
        <argsstring>(int n)</argsstring>
        <name>Exactly</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h" line="138" column="1" bodyfile="vendor/googletest/googlemock/src/gmock-cardinalities.cc" bodystart="154" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="gmock-cardinalities_8h_1af567006969875ab70fc6aa3029576774" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_cardinality" kindref="compound">Cardinality</ref></type>
        <definition>Cardinality testing::MakeCardinality</definition>
        <argsstring>(const CardinalityInterface *c)</argsstring>
        <name>MakeCardinality</name>
        <param>
          <type>const <ref refid="classtesting_1_1_cardinality_interface" kindref="compound">CardinalityInterface</ref> *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h" line="141" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-cardinalities.h" bodystart="141" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a3bd9eef13bee9065b19d3cd571829c7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="625" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="625" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1aa82fc09250ba172220e6fb7e77249e74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="631" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="631" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a999614cb785165b9a44a9a95a3753407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="637" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="637" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a646a2e4ac7866ee8c486cb167ba9b45e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="643" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="643" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1aa36b0c7216df96bdacf9fe491afd40bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="649" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="649" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a6df9cd27659e5943b5d3d77fc4f102e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="655" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="655" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a04146a27847141c6942e9c67a85aadbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="662" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a16c131c0d58ae07d2e1ee6c7a44aaad1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7, k8 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7, k8&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="670" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a6aec78e6c201b150c78271e3f851414e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="678" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="678" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a768a620ad07c6b5822201fa4f15fb4f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k10</declname>
            <defname>k10</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10&gt; testing::WithArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="687" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="687" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a5f533932753d2af95000e96c4a3042e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, Action2 &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, Action2&gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="696" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="696" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1ad6a3ce5e229120ea287286a86394d712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, Action3 &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, Action3&gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="703" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="703" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a790ce08c80a1f8ececa0f2a4f678247c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action3, Action4 &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, Action4&gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="711" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="711" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a794c41d43373d7af9cebbc7f1c5e4a57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action4, Action5 &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, Action5&gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="720" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1aa6c87c8d7520fb333f1559487d3e06e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action5, Action6 &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, Action6&gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="729" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="729" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1aadfaf4eb9897dcabe067b1d882febc86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action6, Action7 &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, Action7&gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="739" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="739" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a2c0e69056a8e5bc4ddc2308ba0af5214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
          <param>
            <type>typename Action8</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action6, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action7, Action8 &gt; &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, internal::DoBothAction&lt;Action7, Action8&gt; &gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7, Action8 a8)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <param>
          <type>Action8</type>
          <declname>a8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="751" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="751" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a3479e234532d82d0a093f7ffdb3ac254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
          <param>
            <type>typename Action8</type>
          </param>
          <param>
            <type>typename Action9</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action6, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action7, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action8, Action9 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, internal::DoBothAction&lt;Action7, internal::DoBothAction&lt;Action8, Action9&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7, Action8 a8, Action9 a9)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <param>
          <type>Action8</type>
          <declname>a8</declname>
        </param>
        <param>
          <type>Action9</type>
          <declname>a9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="764" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="764" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a79ac222c485c7aa0a1774bee17dadb10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Action1</type>
          </param>
          <param>
            <type>typename Action2</type>
          </param>
          <param>
            <type>typename Action3</type>
          </param>
          <param>
            <type>typename Action4</type>
          </param>
          <param>
            <type>typename Action5</type>
          </param>
          <param>
            <type>typename Action6</type>
          </param>
          <param>
            <type>typename Action7</type>
          </param>
          <param>
            <type>typename Action8</type>
          </param>
          <param>
            <type>typename Action9</type>
          </param>
          <param>
            <type>typename Action10</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action1, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action2, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action3, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action4, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action5, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action6, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action7, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action8, <ref refid="classtesting_1_1internal_1_1_do_both_action" kindref="compound">internal::DoBothAction</ref>&lt; Action9, Action10 &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;</type>
        <definition>internal::DoBothAction&lt;Action1, internal::DoBothAction&lt;Action2, internal::DoBothAction&lt;Action3, internal::DoBothAction&lt;Action4, internal::DoBothAction&lt;Action5, internal::DoBothAction&lt;Action6, internal::DoBothAction&lt;Action7, internal::DoBothAction&lt;Action8, internal::DoBothAction&lt;Action9, Action10&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; testing::DoAll</definition>
        <argsstring>(Action1 a1, Action2 a2, Action3 a3, Action4 a4, Action5 a5, Action6 a6, Action7 a7, Action8 a8, Action9 a9, Action10 a10)</argsstring>
        <name>DoAll</name>
        <param>
          <type>Action1</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>Action2</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>Action3</type>
          <declname>a3</declname>
        </param>
        <param>
          <type>Action4</type>
          <declname>a4</declname>
        </param>
        <param>
          <type>Action5</type>
          <declname>a5</declname>
        </param>
        <param>
          <type>Action6</type>
          <declname>a6</declname>
        </param>
        <param>
          <type>Action7</type>
          <declname>a7</declname>
        </param>
        <param>
          <type>Action8</type>
          <declname>a8</declname>
        </param>
        <param>
          <type>Action9</type>
          <declname>a9</declname>
        </param>
        <param>
          <type>Action10</type>
          <declname>a10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="777" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="777" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a8a02397c7fdf8e84d559ab72dcc28eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2196" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2196" bodyend="2203"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1afaa0d88f5442f9aee5d6147377d3e50c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(p0))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(p0)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2205" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2205" bodyend="2212"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a39bf6c49dc1323cc9539a12249e60aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_2_VALUE_PARAMS(p0, p1))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_2_VALUE_PARAMS(p0, p1)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2214" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2214" bodyend="2221"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1ac50647216fdf5197899a3d5034a9a670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_3_VALUE_PARAMS(p0, p1, p2))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_3_VALUE_PARAMS(p0, p1, p2)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2223" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2223" bodyend="2230"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1ae98e43eecf8f44990b39b460f00b397b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_4_VALUE_PARAMS(p0, p1, p2, p3))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_4_VALUE_PARAMS(p0, p1, p2, p3)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2232" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2232" bodyend="2239"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a505f6d82df233802c5f4235d77dca164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2241" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2241" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1ab85e5f54a209bf141fc04f8612fbe887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2250" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2250" bodyend="2257"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a8d3590561f334d165c620f522219831b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2259" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2259" bodyend="2266"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a8725892aafb62cc8f6f76280d29595d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2268" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2268" bodyend="2275"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a910551adbfeb1854071ef55ae54a5c0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2277" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2277" bodyend="2284"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1ab7bf885ff274cbdc09f19c39e43b7f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(InvokeArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>InvokeArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2286" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2286" bodyend="2293"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a468e601467d018ab7566f321d3f7e871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2300" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2300" bodyend="2304"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1af07e911d69b8efb03bddbd0332f79ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_1_VALUE_PARAMS(p0))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(p0)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2306" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2306" bodyend="2310"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1ad418620ed637e789f91d029f4fe85b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_2_VALUE_PARAMS(p0, p1))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_2_VALUE_PARAMS(p0, p1)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2312" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2312" bodyend="2316"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1ac24511eb64ebe2c2927feaf285ac3785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_3_VALUE_PARAMS(p0, p1, p2))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_3_VALUE_PARAMS(p0, p1, p2)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2318" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2318" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1afc5a3710d11bdee2023d8402b84d86ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_4_VALUE_PARAMS(p0, p1, p2, p3))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_4_VALUE_PARAMS(p0, p1, p2, p3)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2324" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2324" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a0c03444379adfb849db243829946c1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2330" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2330" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a2ef1b31693ee2be0bb93602b375fb9ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2336" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2336" bodyend="2340"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a7b4cfa09367e9938561eeca5a105d183" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2342" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2342" bodyend="2346"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a76d58331453ee0a2eb75a5992e35197b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2348" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2348" bodyend="2352"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1adfb5791a941ec1f2a2f8067fd9ac7667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2354" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2354" bodyend="2358"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-actions_8h_1a3934a47f6125504c939a3573b7fc55c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnNew, HAS_1_TEMPLATE_PARAMS(typename, T), AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnNew</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(typename, T)</type>
        </param>
        <param>
          <type>AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" line="2360" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-actions.h" bodystart="2360" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aaca153f67b689b8b9d5b8c67ecf8cee4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="481" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="481" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1af67bac6da407df7586f60cfa2c9b602d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="487" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="487" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a663409e441584c81f496e9c98fd3453c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="493" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="493" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1abd3ddae153e1c452b7625808cc4d820b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="499" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="499" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aeff7e644fd00516c3519fe8c0dc1aee2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="505" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="505" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aede9fd33cce0d21f5e31ba10a0706827" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="511" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="511" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1abc92e87b4a9cad372b082d81479f3d48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="517" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="517" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a9a9ef7a866b397430527076e342817f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="524" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1ae8a4e8e1b8eb87c9f1e5f02519da7fce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="532" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="532" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a62c877e01fb9098cd3c399f921bf4e3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="540" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a09ac462e8d6ed468cbfaa9c767aee0aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k1</declname>
            <defname>k1</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k2</declname>
            <defname>k2</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k3</declname>
            <defname>k3</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k4</declname>
            <defname>k4</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k5</declname>
            <defname>k5</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k6</declname>
            <defname>k6</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k7</declname>
            <defname>k7</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k8</declname>
            <defname>k8</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k9</declname>
            <defname>k9</defname>
          </param>
          <param>
            <type>int</type>
            <declname>k10</declname>
            <defname>k10</defname>
          </param>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_args_matcher" kindref="compound">internal::ArgsMatcher</ref>&lt; InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10 &gt;</type>
        <definition>internal::ArgsMatcher&lt;InnerMatcher, k1, k2, k3, k4, k5, k6, k7, k8, k9, k10&gt; testing::Args</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>Args</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="549" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="549" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a79cf4ae694bf8231dcf283b325405f27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt;&gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt;&gt; &gt; testing::ElementsAre</definition>
        <argsstring>()</argsstring>
        <name>ElementsAre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="570" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aa35aa6c9638d989e9f4aaa6009f60589" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="579" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="579" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a864f77fe7774308d4c54f1f52f9040cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="590" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="590" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a0be8a0ad5d7461fd1da13ecac4e21e2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="603" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="603" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a4109ce480e0145bfce7c46120afb36d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="618" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="618" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aa075d52e84310659ca8636c6e7d5c9b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="635" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="635" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a725b7a52e5eea9fe8f4ce46be6fd7159" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="656" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="656" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a3af9f549d951a4961825f821e6d47da9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="679" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="679" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a8d498031827c1d089dc84f5f14b7df12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="704" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="704" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aa39ad709c933dbbbe3cbaececa8b4577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="732" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="732" bodyend="746"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a047f5f5a28c156a70002668323009ae9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
          <param>
            <type>typename T10</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_matcher" kindref="compound">internal::ElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T10 &gt;::type &gt; &gt;</type>
        <definition>internal::ElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type, typename internal::DecayArray&lt;T10&gt;::type&gt; &gt; testing::ElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9, const T10 &amp;e10)</argsstring>
        <name>ElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <param>
          <type>const T10 &amp;</type>
          <declname>e10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="762" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="762" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a8622c12aadfa0e60f7d68683eeb21115" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt;&gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt;&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>()</argsstring>
        <name>UnorderedElementsAre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="785" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="785" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a0b81dd5584a3588cc2516b29ef166b7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="794" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="794" bodyend="798"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aedcecfa2107e03f5e2837f7124f73a87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="805" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="805" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aec0f9ede2dc05de791c61eae0504a757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="818" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="818" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a8dfb2b88d0cacb8ececc069b0b015991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="833" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="833" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a5e0ff76eb3f61b6c79b60311ceca73d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="850" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="850" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aff1859501ecd94dd1bc428d146a66fdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="871" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="871" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1add6e16fe24c45e39e92c0d19c04acf11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="895" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="895" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a0f30358234947d21c7f39f15a8395d04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="921" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="921" bodyend="934"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a2e03e363e193ef512bf9fa964c484375" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="949" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="949" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1ae0e6c9754b17623a64358da8d38c4d13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename T4</type>
          </param>
          <param>
            <type>typename T5</type>
          </param>
          <param>
            <type>typename T6</type>
          </param>
          <param>
            <type>typename T7</type>
          </param>
          <param>
            <type>typename T8</type>
          </param>
          <param>
            <type>typename T9</type>
          </param>
          <param>
            <type>typename T10</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_matcher" kindref="compound">internal::UnorderedElementsAreMatcher</ref>&lt; ::testing::tuple&lt; typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T1 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T2 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T3 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T4 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T5 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T6 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T7 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T8 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T9 &gt;::type, typename <ref refid="structtesting_1_1internal_1_1_decay_array" kindref="compound">internal::DecayArray</ref>&lt; T10 &gt;::type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreMatcher&lt; ::testing::tuple&lt; typename internal::DecayArray&lt;T1&gt;::type, typename internal::DecayArray&lt;T2&gt;::type, typename internal::DecayArray&lt;T3&gt;::type, typename internal::DecayArray&lt;T4&gt;::type, typename internal::DecayArray&lt;T5&gt;::type, typename internal::DecayArray&lt;T6&gt;::type, typename internal::DecayArray&lt;T7&gt;::type, typename internal::DecayArray&lt;T8&gt;::type, typename internal::DecayArray&lt;T9&gt;::type, typename internal::DecayArray&lt;T10&gt;::type&gt; &gt; testing::UnorderedElementsAre</definition>
        <argsstring>(const T1 &amp;e1, const T2 &amp;e2, const T3 &amp;e3, const T4 &amp;e4, const T5 &amp;e5, const T6 &amp;e6, const T7 &amp;e7, const T8 &amp;e8, const T9 &amp;e9, const T10 &amp;e10)</argsstring>
        <name>UnorderedElementsAre</name>
        <param>
          <type>const T1 &amp;</type>
          <declname>e1</declname>
        </param>
        <param>
          <type>const T2 &amp;</type>
          <declname>e2</declname>
        </param>
        <param>
          <type>const T3 &amp;</type>
          <declname>e3</declname>
        </param>
        <param>
          <type>const T4 &amp;</type>
          <declname>e4</declname>
        </param>
        <param>
          <type>const T5 &amp;</type>
          <declname>e5</declname>
        </param>
        <param>
          <type>const T6 &amp;</type>
          <declname>e6</declname>
        </param>
        <param>
          <type>const T7 &amp;</type>
          <declname>e7</declname>
        </param>
        <param>
          <type>const T8 &amp;</type>
          <declname>e8</declname>
        </param>
        <param>
          <type>const T9 &amp;</type>
          <declname>e9</declname>
        </param>
        <param>
          <type>const T10 &amp;</type>
          <declname>e10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="979" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="979" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1af7618e8606c1cb45738163688944e2b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result2" kindref="compound">internal::AllOfResult2</ref>&lt; M1, M2 &gt;::type</type>
        <definition>internal::AllOfResult2&lt;M1, M2&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1002" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1002" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a75934d8ea6b986d2157a5ebfe68f9904" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result3" kindref="compound">internal::AllOfResult3</ref>&lt; M1, M2, M3 &gt;::type</type>
        <definition>internal::AllOfResult3&lt;M1, M2, M3&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1010" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1010" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a4a9a119cde16e43b364f3573136857a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result4" kindref="compound">internal::AllOfResult4</ref>&lt; M1, M2, M3, M4 &gt;::type</type>
        <definition>internal::AllOfResult4&lt;M1, M2, M3, M4&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1018" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1018" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1ab8f5e6cf1c22acf51a2b9b376b0ef03a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result5" kindref="compound">internal::AllOfResult5</ref>&lt; M1, M2, M3, M4, M5 &gt;::type</type>
        <definition>internal::AllOfResult5&lt;M1, M2, M3, M4, M5&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1026" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1026" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1afc8e2d405f80e7d3df32842ddb648125" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result6" kindref="compound">internal::AllOfResult6</ref>&lt; M1, M2, M3, M4, M5, M6 &gt;::type</type>
        <definition>internal::AllOfResult6&lt;M1, M2, M3, M4, M5, M6&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1035" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1035" bodyend="1039"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1acbd4eef50126ff6db5b93ac5faa71b45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result7" kindref="compound">internal::AllOfResult7</ref>&lt; M1, M2, M3, M4, M5, M6, M7 &gt;::type</type>
        <definition>internal::AllOfResult7&lt;M1, M2, M3, M4, M5, M6, M7&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1044" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1044" bodyend="1048"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a7ec0bc4eca9805e85b9b34bbbf3d3ae2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result8" kindref="compound">internal::AllOfResult8</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8 &gt;::type</type>
        <definition>internal::AllOfResult8&lt;M1, M2, M3, M4, M5, M6, M7, M8&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1053" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1053" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1aaecf2bd8eb7c68b119f9b81a01942b7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result9" kindref="compound">internal::AllOfResult9</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9 &gt;::type</type>
        <definition>internal::AllOfResult9&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1062" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1062" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a9939c08664efeed0c1983090115f7ecb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
          <param>
            <type>typename M10</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_all_of_result10" kindref="compound">internal::AllOfResult10</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 &gt;::type</type>
        <definition>internal::AllOfResult10&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9, M10&gt;::type testing::AllOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10)</argsstring>
        <name>AllOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <param>
          <type>M10</type>
          <declname>m10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1073" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1073" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a81cfefd9f75cdce827d5bc873cf73aac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result2" kindref="compound">internal::AnyOfResult2</ref>&lt; M1, M2 &gt;::type</type>
        <definition>internal::AnyOfResult2&lt;M1, M2&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1085" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1085" bodyend="1089"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a3ccbde3ba01189587676d44a4333c0a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result3" kindref="compound">internal::AnyOfResult3</ref>&lt; M1, M2, M3 &gt;::type</type>
        <definition>internal::AnyOfResult3&lt;M1, M2, M3&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1093" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1093" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a1cfcacf2cf19543b86445e3585d5356f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result4" kindref="compound">internal::AnyOfResult4</ref>&lt; M1, M2, M3, M4 &gt;::type</type>
        <definition>internal::AnyOfResult4&lt;M1, M2, M3, M4&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1101" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1101" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a049ea436e52c242adc44b2b42dc03e50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result5" kindref="compound">internal::AnyOfResult5</ref>&lt; M1, M2, M3, M4, M5 &gt;::type</type>
        <definition>internal::AnyOfResult5&lt;M1, M2, M3, M4, M5&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1109" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1109" bodyend="1113"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a747189264a49a426004366371f1a2575" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result6" kindref="compound">internal::AnyOfResult6</ref>&lt; M1, M2, M3, M4, M5, M6 &gt;::type</type>
        <definition>internal::AnyOfResult6&lt;M1, M2, M3, M4, M5, M6&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1118" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1118" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a754d1bddb237e79613f6834af3329efa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result7" kindref="compound">internal::AnyOfResult7</ref>&lt; M1, M2, M3, M4, M5, M6, M7 &gt;::type</type>
        <definition>internal::AnyOfResult7&lt;M1, M2, M3, M4, M5, M6, M7&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1127" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1127" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a9c979c62cc004664b14e0ce444e531d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result8" kindref="compound">internal::AnyOfResult8</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8 &gt;::type</type>
        <definition>internal::AnyOfResult8&lt;M1, M2, M3, M4, M5, M6, M7, M8&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1136" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1136" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a873c812db953aebd4bf2ffbff0e8d770" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result9" kindref="compound">internal::AnyOfResult9</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9 &gt;::type</type>
        <definition>internal::AnyOfResult9&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1145" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1145" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="gmock-generated-matchers_8h_1a1797921d3ed04c7f13dfa8f36bf0bf1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M1</type>
          </param>
          <param>
            <type>typename M2</type>
          </param>
          <param>
            <type>typename M3</type>
          </param>
          <param>
            <type>typename M4</type>
          </param>
          <param>
            <type>typename M5</type>
          </param>
          <param>
            <type>typename M6</type>
          </param>
          <param>
            <type>typename M7</type>
          </param>
          <param>
            <type>typename M8</type>
          </param>
          <param>
            <type>typename M9</type>
          </param>
          <param>
            <type>typename M10</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtesting_1_1internal_1_1_any_of_result10" kindref="compound">internal::AnyOfResult10</ref>&lt; M1, M2, M3, M4, M5, M6, M7, M8, M9, M10 &gt;::type</type>
        <definition>internal::AnyOfResult10&lt;M1, M2, M3, M4, M5, M6, M7, M8, M9, M10&gt;::type testing::AnyOf</definition>
        <argsstring>(M1 m1, M2 m2, M3 m3, M4 m4, M5 m5, M6 m6, M7 m7, M8 m8, M9 m9, M10 m10)</argsstring>
        <name>AnyOf</name>
        <param>
          <type>M1</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>M2</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>M3</type>
          <declname>m3</declname>
        </param>
        <param>
          <type>M4</type>
          <declname>m4</declname>
        </param>
        <param>
          <type>M5</type>
          <declname>m5</declname>
        </param>
        <param>
          <type>M6</type>
          <declname>m6</declname>
        </param>
        <param>
          <type>M7</type>
          <declname>m7</declname>
        </param>
        <param>
          <type>M8</type>
          <declname>m8</declname>
        </param>
        <param>
          <type>M9</type>
          <declname>m9</declname>
        </param>
        <param>
          <type>M10</type>
          <declname>m10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" line="1156" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-generated-matchers.h" bodystart="1156" bodyend="1161"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a37fd8029ac00e60952440a3d9cca8166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt;</type>
        <definition>Matcher&lt;T&gt; testing::MakeMatcher</definition>
        <argsstring>(const MatcherInterface&lt; T &gt; *impl)</argsstring>
        <name>MakeMatcher</name>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher_interface" kindref="compound">MatcherInterface</ref>&lt; T &gt; *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="484" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="484" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a667ca94f190ec2e17ee2fbfdb7d3da04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Impl</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; Impl &gt;</type>
        <definition>PolymorphicMatcher&lt;Impl&gt; testing::MakePolymorphicMatcher</definition>
        <argsstring>(const Impl &amp;impl)</argsstring>
        <name>MakePolymorphicMatcher</name>
        <param>
          <type>const Impl &amp;</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="496" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="496" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a8234d15eee99b135a7fdf2141a2ebe1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt;</type>
        <definition>Matcher&lt;T&gt; testing::MatcherCast</definition>
        <argsstring>(const M &amp;matcher)</argsstring>
        <name>MatcherCast</name>
        <param>
          <type>const M &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="610" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="610" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ac016ac22aa065a19b9ef95f0ccffc17b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt;</type>
        <definition>Matcher&lt;T&gt; testing::SafeMatcherCast</definition>
        <argsstring>(const M &amp;polymorphic_matcher)</argsstring>
        <name>SafeMatcherCast</name>
        <param>
          <type>const M &amp;</type>
          <declname>polymorphic_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="665" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="665" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a5e9134d655d2fc9323902348083282e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt;</type>
        <definition>Matcher&lt; T &gt; testing::A</definition>
        <argsstring>()</argsstring>
        <name>A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="671" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3732" bodyend="3732"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ae2eee06e7ddbf5f5372fd24372e9703f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_array_matcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; typename ::std::iterator_traits&lt; Iter &gt;::value_type &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt; typename ::std::iterator_traits&lt;Iter&gt;::value_type&gt; testing::ElementsAreArray</definition>
        <argsstring>(Iter first, Iter last)</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>Iter</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3646" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3646" bodyend="3649"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1abf5c2219b4e6a7542368b5f68eadd007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_array_matcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; T &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt;T&gt; testing::ElementsAreArray</definition>
        <argsstring>(const T *pointer, size_t count)</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>const T *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3652" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3652" bodyend="3655"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ac5895c9867d6b976351446a043dcdd66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_array_matcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; T &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt;T&gt; testing::ElementsAreArray</definition>
        <argsstring>(const T(&amp;array)[N])</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>const T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3658" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3658" bodyend="3661"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ad257747adbe056feaa92f449063d681f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_elements_are_array_matcher" kindref="compound">internal::ElementsAreArrayMatcher</ref>&lt; typename Container::value_type &gt;</type>
        <definition>internal::ElementsAreArrayMatcher&lt;typename Container::value_type&gt; testing::ElementsAreArray</definition>
        <argsstring>(const Container &amp;container)</argsstring>
        <name>ElementsAreArray</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3665" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3665" bodyend="3667"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ab4896081406209171a1596b7028e1cf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iter</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_array_matcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; typename ::std::iterator_traits&lt; Iter &gt;::value_type &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt; typename ::std::iterator_traits&lt;Iter&gt;::value_type&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(Iter first, Iter last)</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>Iter</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Iter</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3688" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3688" bodyend="3691"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a99b9509a7cd405be28bf45231577384b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_array_matcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; T &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt;T&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(const T *pointer, size_t count)</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>const T *</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3695" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3695" bodyend="3697"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a23c7729cfc61967f3271018076c4b724" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_array_matcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; T &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt;T&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(const T(&amp;array)[N])</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>const T(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3701" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3701" bodyend="3703"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a72b0ee2217293106fcf4971dc4a59f4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_array_matcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; typename Container::value_type &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt; typename Container::value_type&gt; testing::UnorderedElementsAreArray</definition>
        <argsstring>(const Container &amp;container)</argsstring>
        <name>UnorderedElementsAreArray</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3708" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3708" bodyend="3710"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a48792471ff9cdf5b4f95a4242df7bfbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; T &gt;</type>
        <definition>Matcher&lt;T&gt; testing::An</definition>
        <argsstring>()</argsstring>
        <name>An</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3736" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3736" bodyend="3736"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a0cb8ba7eae844c871eccb29e7c81635f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_eq_matcher" kindref="compound">internal::EqMatcher</ref>&lt; T &gt;</type>
        <definition>internal::EqMatcher&lt;T&gt; testing::Eq</definition>
        <argsstring>(T x)</argsstring>
        <name>Eq</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3742" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3742" bodyend="3742"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a57c9aba17aaa27d818e80a1eec81070f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lhs</type>
          </param>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; Lhs &gt;</type>
        <definition>Matcher&lt;Lhs&gt; testing::TypedEq</definition>
        <argsstring>(const Rhs &amp;rhs)</argsstring>
        <name>TypedEq</name>
        <param>
          <type>const Rhs &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3762" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3762" bodyend="3762"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a42bb19b42d7830b972973a103d5e00f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_ge_matcher" kindref="compound">internal::GeMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::GeMatcher&lt;Rhs&gt; testing::Ge</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Ge</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3766" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3766" bodyend="3768"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a493fc1bafd7b3945ba06ace80e74b0d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_gt_matcher" kindref="compound">internal::GtMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::GtMatcher&lt;Rhs&gt; testing::Gt</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Gt</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3772" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3772" bodyend="3774"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a2e33596921b80a7fdaff3f62bf18a478" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_le_matcher" kindref="compound">internal::LeMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::LeMatcher&lt;Rhs&gt; testing::Le</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Le</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3778" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3778" bodyend="3780"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ad621459957a8bcdd3c256b7940ecbf99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_lt_matcher" kindref="compound">internal::LtMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::LtMatcher&lt;Rhs&gt; testing::Lt</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Lt</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3784" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3784" bodyend="3786"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1afe42d41d5171234cb9da5da27faeb7e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Rhs</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_ne_matcher" kindref="compound">internal::NeMatcher</ref>&lt; Rhs &gt;</type>
        <definition>internal::NeMatcher&lt;Rhs&gt; testing::Ne</definition>
        <argsstring>(Rhs x)</argsstring>
        <name>Ne</name>
        <param>
          <type>Rhs</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3790" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3790" bodyend="3792"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a56ffb1a169c14ce585fc5bed32add2db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_is_null_matcher" kindref="compound">internal::IsNullMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::IsNullMatcher &gt; testing::IsNull</definition>
        <argsstring>()</argsstring>
        <name>IsNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3795" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3795" bodyend="3797"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a39d1f92b53b8b2a0b6db6a22ac146416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_not_null_matcher" kindref="compound">internal::NotNullMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::NotNullMatcher &gt; testing::NotNull</definition>
        <argsstring>()</argsstring>
        <name>NotNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3802" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3802" bodyend="3804"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a0a4a364121ea3fa656a112f1c2e6b7a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_ref_matcher" kindref="compound">internal::RefMatcher</ref>&lt; T &amp; &gt;</type>
        <definition>internal::RefMatcher&lt;T&amp;&gt; testing::Ref</definition>
        <argsstring>(T &amp;x)</argsstring>
        <name>Ref</name>
        <param>
          <type>T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3809" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3809" bodyend="3811"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a1f49f9d97f03bfa4db26888f03486a9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::DoubleEq</definition>
        <argsstring>(double rhs)</argsstring>
        <name>DoubleEq</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3815" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3815" bodyend="3817"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1aa83ee35256fd90033f615ef640245525" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::NanSensitiveDoubleEq</definition>
        <argsstring>(double rhs)</argsstring>
        <name>NanSensitiveDoubleEq</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3821" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3821" bodyend="3823"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1aaee08ecb6815ef8398bbcb4e56d56d44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::DoubleNear</definition>
        <argsstring>(double rhs, double max_abs_error)</argsstring>
        <name>DoubleNear</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3828" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3828" bodyend="3831"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a3caa8177ef48150d0dde3a54b0961f7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; double &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;double&gt; testing::NanSensitiveDoubleNear</definition>
        <argsstring>(double rhs, double max_abs_error)</argsstring>
        <name>NanSensitiveDoubleNear</name>
        <param>
          <type>double</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3836" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3836" bodyend="3839"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ac75507edb7998957b48fb17a9b8a020b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::FloatEq</definition>
        <argsstring>(float rhs)</argsstring>
        <name>FloatEq</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3843" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3843" bodyend="3845"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ab3653439a654b85bdccff46d1436670d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::NanSensitiveFloatEq</definition>
        <argsstring>(float rhs)</argsstring>
        <name>NanSensitiveFloatEq</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3849" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3849" bodyend="3851"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a933a78452dd1770669bed758f35ff250" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::FloatNear</definition>
        <argsstring>(float rhs, float max_abs_error)</argsstring>
        <name>FloatNear</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3856" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3856" bodyend="3859"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a347ebf0075ca9470e71e8ac468c9818f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_floating_eq_matcher" kindref="compound">internal::FloatingEqMatcher</ref>&lt; float &gt;</type>
        <definition>internal::FloatingEqMatcher&lt;float&gt; testing::NanSensitiveFloatNear</definition>
        <argsstring>(float rhs, float max_abs_error)</argsstring>
        <name>NanSensitiveFloatNear</name>
        <param>
          <type>float</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>float</type>
          <declname>max_abs_error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3864" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3864" bodyend="3867"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a5122ca3533f3a00f67e146dd81f3b68c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_pointee_matcher" kindref="compound">internal::PointeeMatcher</ref>&lt; InnerMatcher &gt;</type>
        <definition>internal::PointeeMatcher&lt;InnerMatcher&gt; testing::Pointee</definition>
        <argsstring>(const InnerMatcher &amp;inner_matcher)</argsstring>
        <name>Pointee</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>inner_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3872" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3872" bodyend="3875"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1aabfc320cc132d0a1da2a255b45a17b7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_when_dynamic_cast_to_matcher" kindref="compound">internal::WhenDynamicCastToMatcher</ref>&lt; To &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::WhenDynamicCastToMatcher&lt;To&gt; &gt; testing::WhenDynamicCastTo</definition>
        <argsstring>(const Matcher&lt; To &gt; &amp;inner_matcher)</argsstring>
        <name>WhenDynamicCastTo</name>
        <param>
          <type>const <ref refid="classtesting_1_1_matcher" kindref="compound">Matcher</ref>&lt; To &gt; &amp;</type>
          <declname>inner_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3885" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3885" bodyend="3888"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a4df3849391696aa93ac3a7703a717c2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Class</type>
          </param>
          <param>
            <type>typename FieldType</type>
          </param>
          <param>
            <type>typename FieldMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_field_matcher" kindref="compound">internal::FieldMatcher</ref>&lt; Class, FieldType &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt; internal::FieldMatcher&lt;Class, FieldType&gt; &gt; testing::Field</definition>
        <argsstring>(FieldType Class::*field, const FieldMatcher &amp;matcher)</argsstring>
        <name>Field</name>
        <param>
          <type>FieldType Class::*</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const FieldMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3896" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3896" bodyend="3905"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a0fad10571e23f7bc0d5c83d4c31ba740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Class</type>
          </param>
          <param>
            <type>typename PropertyType</type>
          </param>
          <param>
            <type>typename PropertyMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_property_matcher" kindref="compound">internal::PropertyMatcher</ref>&lt; Class, PropertyType &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt; internal::PropertyMatcher&lt;Class, PropertyType&gt; &gt; testing::Property</definition>
        <argsstring>(PropertyType(Class::*property)() const, const PropertyMatcher &amp;matcher)</argsstring>
        <name>Property</name>
        <param>
          <type>PropertyType(Class::*)() const</type>
          <declname>property</declname>
        </param>
        <param>
          <type>const PropertyMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3913" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3913" bodyend="3923"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1aaadb51dd383baa95f123ab891d4f8a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Callable</type>
          </param>
          <param>
            <type>typename ResultOfMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_result_of_matcher" kindref="compound">internal::ResultOfMatcher</ref>&lt; Callable &gt;</type>
        <definition>internal::ResultOfMatcher&lt;Callable&gt; testing::ResultOf</definition>
        <argsstring>(Callable callable, const ResultOfMatcher &amp;matcher)</argsstring>
        <name>ResultOf</name>
        <param>
          <type>Callable</type>
          <declname>callable</declname>
        </param>
        <param>
          <type>const ResultOfMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3939" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3939" bodyend="3949"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a154de81376ae7d584c6e5a619b45fb09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_str_equality_matcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrEq</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrEq</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3955" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3955" bodyend="3958"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a6f6b8af3d19cb969df0eb995c47a14d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_str_equality_matcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrNe</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrNe</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3962" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3962" bodyend="3965"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1addbdb8c0902ab09cade24fa6db7c0073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_str_equality_matcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrCaseEq</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrCaseEq</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3969" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3969" bodyend="3972"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a9596fd67bdd5df195bc54382f91a1906" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_str_equality_matcher" kindref="compound">internal::StrEqualityMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StrEqualityMatcher&lt;internal::string&gt; &gt; testing::StrCaseNe</definition>
        <argsstring>(const internal::string &amp;str)</argsstring>
        <name>StrCaseNe</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3976" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3976" bodyend="3979"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a7d27682e38d57eea81ba145a2772e1c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_has_substr_matcher" kindref="compound">internal::HasSubstrMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::HasSubstrMatcher&lt;internal::string&gt; &gt; testing::HasSubstr</definition>
        <argsstring>(const internal::string &amp;substring)</argsstring>
        <name>HasSubstr</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>substring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3984" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3984" bodyend="3987"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ae0502232432b1fe8361d296c6de6beda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_starts_with_matcher" kindref="compound">internal::StartsWithMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::StartsWithMatcher&lt;internal::string&gt; &gt; testing::StartsWith</definition>
        <argsstring>(const internal::string &amp;prefix)</argsstring>
        <name>StartsWith</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3991" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3991" bodyend="3994"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1aec11c4e418a835ca2c0c3cbdb29b28ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_ends_with_matcher" kindref="compound">internal::EndsWithMatcher</ref>&lt; internal::string &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::EndsWithMatcher&lt;internal::string&gt; &gt; testing::EndsWith</definition>
        <argsstring>(const internal::string &amp;suffix)</argsstring>
        <name>EndsWith</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>suffix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="3998" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="3998" bodyend="4001"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a4dac232f315edc259b62ce88e413b107" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_matches_regex_matcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::MatchesRegex</definition>
        <argsstring>(const internal::RE *regex)</argsstring>
        <name>MatchesRegex</name>
        <param>
          <type>const <ref refid="classtesting_1_1internal_1_1_r_e" kindref="compound">internal::RE</ref> *</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4005" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4005" bodyend="4008"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1afea6e0eaf0ae69b409fc1c0285df6c8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_matches_regex_matcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::MatchesRegex</definition>
        <argsstring>(const internal::string &amp;regex)</argsstring>
        <name>MatchesRegex</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4009" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4009" bodyend="4012"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a899838630a71376aa071dfd7c500f2ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_matches_regex_matcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::ContainsRegex</definition>
        <argsstring>(const internal::RE *regex)</argsstring>
        <name>ContainsRegex</name>
        <param>
          <type>const <ref refid="classtesting_1_1internal_1_1_r_e" kindref="compound">internal::RE</ref> *</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4016" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4016" bodyend="4019"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ad8efafa15630a8274f41f5e22f8f0e49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_matches_regex_matcher" kindref="compound">internal::MatchesRegexMatcher</ref> &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::MatchesRegexMatcher&gt; testing::ContainsRegex</definition>
        <argsstring>(const internal::string &amp;regex)</argsstring>
        <name>ContainsRegex</name>
        <param>
          <type>const internal::string &amp;</type>
          <declname>regex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4020" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4020" bodyend="4023"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1aa7771a34f092fd6f1dca2c82fb2a36a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_eq2_matcher" kindref="compound">internal::Eq2Matcher</ref></type>
        <definition>internal::Eq2Matcher testing::Eq</definition>
        <argsstring>()</argsstring>
        <name>Eq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4082" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4082" bodyend="4082"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a8cc0a6519e30bedf52c6e53c71e18265" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_ge2_matcher" kindref="compound">internal::Ge2Matcher</ref></type>
        <definition>internal::Ge2Matcher testing::Ge</definition>
        <argsstring>()</argsstring>
        <name>Ge</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4086" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4086" bodyend="4086"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a3eaae6408f77ba7d87ca2d6a21dbde77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_gt2_matcher" kindref="compound">internal::Gt2Matcher</ref></type>
        <definition>internal::Gt2Matcher testing::Gt</definition>
        <argsstring>()</argsstring>
        <name>Gt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4090" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4090" bodyend="4090"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a04def1c627ea7e3fce2f08cb06e83ebc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_le2_matcher" kindref="compound">internal::Le2Matcher</ref></type>
        <definition>internal::Le2Matcher testing::Le</definition>
        <argsstring>()</argsstring>
        <name>Le</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4094" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4094" bodyend="4094"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a3b4d6d29d715c1bf219163f5206b53d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_lt2_matcher" kindref="compound">internal::Lt2Matcher</ref></type>
        <definition>internal::Lt2Matcher testing::Lt</definition>
        <argsstring>()</argsstring>
        <name>Lt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4098" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4098" bodyend="4098"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a0cde8994764617eebc751e682c28d4ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1internal_1_1_ne2_matcher" kindref="compound">internal::Ne2Matcher</ref></type>
        <definition>internal::Ne2Matcher testing::Ne</definition>
        <argsstring>()</argsstring>
        <name>Ne</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4102" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4102" bodyend="4102"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a3d7d0dda7e51b13fe2f5aa28e23ed6b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_not_matcher" kindref="compound">internal::NotMatcher</ref>&lt; InnerMatcher &gt;</type>
        <definition>internal::NotMatcher&lt;InnerMatcher&gt; testing::Not</definition>
        <argsstring>(InnerMatcher m)</argsstring>
        <name>Not</name>
        <param>
          <type>InnerMatcher</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4107" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4107" bodyend="4109"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a5faf05cfaae6074439960048e478b1c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Predicate</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_truly_matcher" kindref="compound">internal::TrulyMatcher</ref>&lt; Predicate &gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::TrulyMatcher&lt;Predicate&gt; &gt; testing::Truly</definition>
        <argsstring>(Predicate pred)</argsstring>
        <name>Truly</name>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4116" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4116" bodyend="4118"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1acd5e215558f95f1393c048a6d496060d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SizeMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_size_is_matcher" kindref="compound">internal::SizeIsMatcher</ref>&lt; SizeMatcher &gt;</type>
        <definition>internal::SizeIsMatcher&lt;SizeMatcher&gt; testing::SizeIs</definition>
        <argsstring>(const SizeMatcher &amp;size_matcher)</argsstring>
        <name>SizeIs</name>
        <param>
          <type>const SizeMatcher &amp;</type>
          <declname>size_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4128" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4128" bodyend="4130"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a122739b5b6bd9f993f26800dafdb4cc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DistanceMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_begin_end_distance_is_matcher" kindref="compound">internal::BeginEndDistanceIsMatcher</ref>&lt; DistanceMatcher &gt;</type>
        <definition>internal::BeginEndDistanceIsMatcher&lt;DistanceMatcher&gt; testing::BeginEndDistanceIs</definition>
        <argsstring>(const DistanceMatcher &amp;distance_matcher)</argsstring>
        <name>BeginEndDistanceIs</name>
        <param>
          <type>const DistanceMatcher &amp;</type>
          <declname>distance_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4139" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4139" bodyend="4141"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a5928ffc4e976a4da981512c422792840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_matcher" kindref="compound">PolymorphicMatcher</ref>&lt; <ref refid="classtesting_1_1internal_1_1_container_eq_matcher" kindref="compound">internal::ContainerEqMatcher</ref>&lt; GTEST_REMOVE_CONST_(Container)&gt; &gt;</type>
        <definition>PolymorphicMatcher&lt;internal::ContainerEqMatcher&lt; GTEST_REMOVE_CONST_(Container)&gt; &gt; testing::ContainerEq</definition>
        <argsstring>(const Container &amp;rhs)</argsstring>
        <name>ContainerEq</name>
        <param>
          <type>const Container &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4150" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4150" bodyend="4156"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1af74dfcde9ed88d79cf69dfda049078a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Comparator</type>
          </param>
          <param>
            <type>typename ContainerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_when_sorted_by_matcher" kindref="compound">internal::WhenSortedByMatcher</ref>&lt; Comparator, ContainerMatcher &gt;</type>
        <definition>internal::WhenSortedByMatcher&lt;Comparator, ContainerMatcher&gt; testing::WhenSortedBy</definition>
        <argsstring>(const Comparator &amp;comparator, const ContainerMatcher &amp;container_matcher)</argsstring>
        <name>WhenSortedBy</name>
        <param>
          <type>const Comparator &amp;</type>
          <declname>comparator</declname>
        </param>
        <param>
          <type>const ContainerMatcher &amp;</type>
          <declname>container_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4162" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4162" bodyend="4166"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a01468e3e641c72a2efb605b4c34675ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ContainerMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_when_sorted_by_matcher" kindref="compound">internal::WhenSortedByMatcher</ref>&lt; <ref refid="structtesting_1_1internal_1_1_less_comparator" kindref="compound">internal::LessComparator</ref>, ContainerMatcher &gt;</type>
        <definition>internal::WhenSortedByMatcher&lt;internal::LessComparator, ContainerMatcher&gt; testing::WhenSorted</definition>
        <argsstring>(const ContainerMatcher &amp;container_matcher)</argsstring>
        <name>WhenSorted</name>
        <param>
          <type>const ContainerMatcher &amp;</type>
          <declname>container_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4172" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4172" bodyend="4176"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a51ee81f6f1723f7a7aff0429b1d76ec1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TupleMatcher</type>
          </param>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_pointwise_matcher" kindref="compound">internal::PointwiseMatcher</ref>&lt; TupleMatcher, GTEST_REMOVE_CONST_(Container)&gt;</type>
        <definition>internal::PointwiseMatcher&lt;TupleMatcher, GTEST_REMOVE_CONST_(Container)&gt; testing::Pointwise</definition>
        <argsstring>(const TupleMatcher &amp;tuple_matcher, const Container &amp;rhs)</argsstring>
        <name>Pointwise</name>
        <param>
          <type>const TupleMatcher &amp;</type>
          <declname>tuple_matcher</declname>
        </param>
        <param>
          <type>const Container &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4187" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4187" bodyend="4194"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a3e800c56ae70a6d9955077a75d4971f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tuple2Matcher</type>
          </param>
          <param>
            <type>typename RhsContainer</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_unordered_elements_are_array_matcher" kindref="compound">internal::UnorderedElementsAreArrayMatcher</ref>&lt; typename <ref refid="classtesting_1_1internal_1_1_bound_second_matcher" kindref="compound">internal::BoundSecondMatcher</ref>&lt; Tuple2Matcher, typename <ref refid="classtesting_1_1internal_1_1_stl_container_view" kindref="compound">internal::StlContainerView</ref>&lt; GTEST_REMOVE_CONST_(RhsContainer)&gt;::type::value_type &gt; &gt;</type>
        <definition>internal::UnorderedElementsAreArrayMatcher&lt; typename internal::BoundSecondMatcher&lt; Tuple2Matcher, typename internal::StlContainerView&lt;GTEST_REMOVE_CONST_( RhsContainer)&gt;::type::value_type&gt; &gt; testing::UnorderedPointwise</definition>
        <argsstring>(const Tuple2Matcher &amp;tuple2_matcher, const RhsContainer &amp;rhs_container)</argsstring>
        <name>UnorderedPointwise</name>
        <param>
          <type>const Tuple2Matcher &amp;</type>
          <declname>tuple2_matcher</declname>
        </param>
        <param>
          <type>const RhsContainer &amp;</type>
          <declname>rhs_container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4223" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4223" bodyend="4248"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a2a12af7db4752797d06c1182b2470933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_contains_matcher" kindref="compound">internal::ContainsMatcher</ref>&lt; M &gt;</type>
        <definition>internal::ContainsMatcher&lt;M&gt; testing::Contains</definition>
        <argsstring>(M matcher)</argsstring>
        <name>Contains</name>
        <param>
          <type>M</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4282" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4282" bodyend="4284"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a42743c985b1e02dc373ab7517ca1e740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_each_matcher" kindref="compound">internal::EachMatcher</ref>&lt; M &gt;</type>
        <definition>internal::EachMatcher&lt;M&gt; testing::Each</definition>
        <argsstring>(M matcher)</argsstring>
        <name>Each</name>
        <param>
          <type>M</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4314" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4314" bodyend="4316"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a6212e76b542f4ffd3079de59092a826a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_key_matcher" kindref="compound">internal::KeyMatcher</ref>&lt; M &gt;</type>
        <definition>internal::KeyMatcher&lt;M&gt; testing::Key</definition>
        <argsstring>(M inner_matcher)</argsstring>
        <name>Key</name>
        <param>
          <type>M</type>
          <declname>inner_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4322" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4322" bodyend="4324"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ac7520de8af26d3085513eeeb68561889" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FirstMatcher</type>
          </param>
          <param>
            <type>typename SecondMatcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_pair_matcher" kindref="compound">internal::PairMatcher</ref>&lt; FirstMatcher, SecondMatcher &gt;</type>
        <definition>internal::PairMatcher&lt;FirstMatcher, SecondMatcher&gt; testing::Pair</definition>
        <argsstring>(FirstMatcher first_matcher, SecondMatcher second_matcher)</argsstring>
        <name>Pair</name>
        <param>
          <type>FirstMatcher</type>
          <declname>first_matcher</declname>
        </param>
        <param>
          <type>SecondMatcher</type>
          <declname>second_matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4333" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4333" bodyend="4336"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ad53b509ae9cd51040d67f668f99702ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_matcher_as_predicate" kindref="compound">internal::MatcherAsPredicate</ref>&lt; M &gt;</type>
        <definition>internal::MatcherAsPredicate&lt;M&gt; testing::Matches</definition>
        <argsstring>(M matcher)</argsstring>
        <name>Matches</name>
        <param>
          <type>M</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4341" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4341" bodyend="4343"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1ae44c50a3a7f0a46f05c8a0b0592b4a62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::Value</definition>
        <argsstring>(const T &amp;value, M matcher)</argsstring>
        <name>Value</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>M</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4347" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4347" bodyend="4349"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a6d5fbd5104dafc63bf705dafbcb5ce18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::ExplainMatchResult</definition>
        <argsstring>(M matcher, const T &amp;value, MatchResultListener *listener)</argsstring>
        <name>ExplainMatchResult</name>
        <param>
          <type>M</type>
          <declname>matcher</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classtesting_1_1_match_result_listener" kindref="compound">MatchResultListener</ref> *</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4354" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4354" bodyend="4357"/>
      </memberdef>
      <memberdef kind="function" id="gmock-matchers_8h_1a2522e94b71f88fbfbbcf6942cd0c6ee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerMatcher</type>
          </param>
        </templateparamlist>
        <type>InnerMatcher</type>
        <definition>InnerMatcher testing::AllArgs</definition>
        <argsstring>(const InnerMatcher &amp;matcher)</argsstring>
        <name>AllArgs</name>
        <param>
          <type>const InnerMatcher &amp;</type>
          <declname>matcher</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" line="4382" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-matchers.h" bodystart="4382" bodyend="4382"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a12aebaf8363d49a383047529f798b694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FunctionImpl</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_invoke_action" kindref="compound">internal::InvokeAction</ref>&lt; FunctionImpl &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeAction&lt;FunctionImpl&gt; &gt; testing::Invoke</definition>
        <argsstring>(FunctionImpl function_impl)</argsstring>
        <name>Invoke</name>
        <param>
          <type>FunctionImpl</type>
          <declname>function_impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="114" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a80b82dc382445d240ff011f9c34aefc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Class</type>
          </param>
          <param>
            <type>typename MethodPtr</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1_polymorphic_action" kindref="compound">PolymorphicAction</ref>&lt; <ref refid="classtesting_1_1internal_1_1_invoke_method_action" kindref="compound">internal::InvokeMethodAction</ref>&lt; Class, MethodPtr &gt; &gt;</type>
        <definition>PolymorphicAction&lt;internal::InvokeMethodAction&lt;Class, MethodPtr&gt; &gt; testing::Invoke</definition>
        <argsstring>(Class *obj_ptr, MethodPtr method_ptr)</argsstring>
        <name>Invoke</name>
        <param>
          <type>Class *</type>
          <declname>obj_ptr</declname>
        </param>
        <param>
          <type>MethodPtr</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="123" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1aeac85f74bd11112f69142e92e3a50780" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction&gt; testing::WithoutArgs</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithoutArgs</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="135" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1af76590c6cecc621e1ab4b681a9ea209b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>k</declname>
            <defname>k</defname>
          </param>
          <param>
            <type>typename InnerAction</type>
          </param>
        </templateparamlist>
        <type><ref refid="classtesting_1_1internal_1_1_with_args_action" kindref="compound">internal::WithArgsAction</ref>&lt; InnerAction, k &gt;</type>
        <definition>internal::WithArgsAction&lt;InnerAction, k&gt; testing::WithArg</definition>
        <argsstring>(const InnerAction &amp;action)</argsstring>
        <name>WithArg</name>
        <param>
          <type>const InnerAction &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="146" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="146" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a109d48f969260878ed1e743006196992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(ReturnArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>ReturnArg</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="161" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a0478a3464d31f6726d5bc47b1be46491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SaveArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(pointer))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SaveArg</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(pointer)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="169" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a31565a90ad7f08c1a88e4b138957172c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SaveArgPointee, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(pointer))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SaveArgPointee</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(pointer)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="177" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1adfd3c9538285d257370f955aa81488f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SetArgReferee, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(value))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SetArgReferee</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_1_VALUE_PARAMS(value)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="185" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="185" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a2b0f090219db3bb0630d5ce6f7d911d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(SetArrayArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_2_VALUE_PARAMS(first, last))</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>SetArrayArgument</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_2_VALUE_PARAMS(first, last)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="202" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="202" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a37a5ebfe68fd8dedf8bd82a5ebddcb7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_TEMPLATE</definition>
        <argsstring>(DeleteArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())</argsstring>
        <name>ACTION_TEMPLATE</name>
        <param>
          <type>DeleteArg</type>
        </param>
        <param>
          <type>HAS_1_TEMPLATE_PARAMS(int, k)</type>
        </param>
        <param>
          <type>AND_0_VALUE_PARAMS()</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="215" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-actions_8h_1a3d58f0d746946064154cd257d368599d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::ACTION_P</definition>
        <argsstring>(ReturnPointee, pointer)</argsstring>
        <name>ACTION_P</name>
        <param>
          <type>ReturnPointee</type>
        </param>
        <param>
          <type>pointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" line="222" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-actions.h" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="gmock-more-matchers_8h_1a4fcb3f407119590471bea5a90a8d2dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::MATCHER</definition>
        <argsstring>(IsEmpty, negation ? &quot;isn&apos;t empty&quot; :&quot;is empty&quot;)</argsstring>
        <name>MATCHER</name>
        <param>
          <type>IsEmpty</type>
        </param>
        <param>
          <type>negation ? &quot;isn&apos;t empty&quot; :&quot;is empty&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-more-matchers.h" line="48" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-more-matchers.h" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="gmock-spec-builders_8h_1a945ac56c5508a3c9c032bbe8aae8dcfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; testing::Const</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>Const</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" line="1826" column="1" bodyfile="vendor/googletest/googlemock/include/gmock/gmock-spec-builders.h" bodystart="1826" bodyend="1826"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8h_1a9dd7591091234b86ce48ce1aff6feeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DECLARE_bool_</definition>
        <argsstring>(catch_leaked_mocks)</argsstring>
        <name>GMOCK_DECLARE_bool_</name>
        <param>
          <type>catch_leaked_mocks</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8h_1a4dd099d1d538f26a16fcc2f94011b37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DECLARE_string_</definition>
        <argsstring>(verbose)</argsstring>
        <name>GMOCK_DECLARE_string_</name>
        <param>
          <type>verbose</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8h_1a32b1c6db9ba5133ccabfa67616b3c041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::InitGoogleMock</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleMock</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock.h" line="86" column="1" bodyfile="vendor/googletest/googlemock/src/gmock.cc" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8h_1a20fb86152763dddef67bc1dd8b090800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>GTEST_API_ void testing::InitGoogleMock</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleMock</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/include/gmock/gmock.h" line="90" column="1" bodyfile="vendor/googletest/googlemock/src/gmock.cc" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1aca5af0e8943ba53352537ab84233b47f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DEFINE_bool_</definition>
        <argsstring>(catch_leaked_mocks, true, &quot;true iff Google Mock should report leaked mock objects &quot; &quot;as failures.&quot;)</argsstring>
        <name>GMOCK_DEFINE_bool_</name>
        <param>
          <type>catch_leaked_mocks</type>
        </param>
        <param>
          <type>true</type>
        </param>
        <param>
          <type>&quot;true iff Google <ref refid="classtesting_1_1_mock" kindref="compound">Mock</ref> should report leaked mock objects &quot; &quot;as failures.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock.cc" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gmock_8cc_1a16c4c37462184feebef44eb45e3fd98c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GMOCK_DEFINE_string_</definition>
        <argsstring>(verbose, internal::kWarningVerbosity, &quot;Controls how verbose Google Mock&apos;s output is.&quot; &quot;  Valid values:\ &quot; info - prints all messages.\&quot; &quot; warning - prints warnings and errors.\&quot; &quot; error - prints errors only.&quot;)</argsstring>
        <name>GMOCK_DEFINE_string_</name>
        <param>
          <type>verbose</type>
        </param>
        <param>
          <type>internal::kWarningVerbosity</type>
        </param>
        <param>
          <type>&quot;Controls how verbose Google <ref refid="classtesting_1_1_mock" kindref="compound">Mock</ref>&apos;s output is.&quot; &quot; Valid values:\ info - prints all messages.\ &quot; warning - prints warnings and errors.\&quot; &quot; error - prints errors only.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/src/gmock.cc" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test_8h_1a37b7e87f0a5f502c6918f37d1768c1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(death_test_style)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>death_test_style</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-death-test.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-message_8h_1a7b802e532fd68749765cb7dc156130db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Message &amp;sb)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-message.h" line="232" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-message.h" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="gtest-printers_8h_1aa5717bb1144edd1d262d310ba70c82ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>::std::string</type>
        <definition>::std::string testing::PrintToString</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>PrintToString</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-printers.h" line="980" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest-printers.h" bodystart="980" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="gtest-test-part_8h_1a7c88897836b9f492190fb2b9dfa3a327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; testing::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const TestPartResult &amp;result)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest-test-part.h" line="120" column="1" bodyfile="vendor/googletest/googletest/src/gtest-test-part.cc" bodystart="58" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a4c08ba9fcb0581c61e25968e520efa48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(also_run_disabled_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a5868c3980b2f69f511fc8c3de7cdfc17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(break_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ab6f1777f7b740f31e41f7da017447b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(catch_exceptions)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a0f658c915a1e60996a2ab00a06612723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(color)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>color</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a20d69860ce843142c7f740262e6b0c9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(filter)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1af2cd3595c571ca408afc337bc4bb2619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(list_tests)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a3fe54dd551f1c36cfdd1b36cd6881a44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(output)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>output</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1aeccefd463a0942da24750e1bbee76041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(print_time)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ae754999b59509808254d39e3a3cf38e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(random_seed)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a315ef0647e4f2795bf1705de8e9c9659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(repeat)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1af37b9206b938bb8b7d398a1379eb7482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(show_internal_stack_frames)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a6d87f7374e105483905a305328856f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(shuffle)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1adba6f8afa0f8695956d0134f1629a10b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_int32_</definition>
        <argsstring>(stack_trace_depth)</argsstring>
        <name>GTEST_DECLARE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ac69f2aeeb84dc5f49bd3d040a6f32d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(throw_on_failure)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ad4d1ea63037fc21018dbe997cb0041d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_string_</definition>
        <argsstring>(stream_result_to)</argsstring>
        <name>GTEST_DECLARE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ac1d0baedb17286c5c6c87bd1a45da8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::AssertionSuccess</definition>
        <argsstring>()</argsstring>
        <name>AssertionSuccess</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="339" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1010" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a75cb789614cb1c28c34627a4a3c053df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::AssertionFailure</definition>
        <argsstring>()</argsstring>
        <name>AssertionFailure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="342" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1015" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a6bdf82adf159dcda822d75746937ffa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::AssertionFailure</definition>
        <argsstring>(const Message &amp;msg)</argsstring>
        <name>AssertionFailure</name>
        <param>
          <type>const <ref refid="classtesting_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="346" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1021" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a460d7b998622e332392c1e00be3a60d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtesting_1_1_environment" kindref="compound">Environment</ref> *</type>
        <definition>Environment* testing::AddGlobalTestEnvironment</definition>
        <argsstring>(Environment *env)</argsstring>
        <name>AddGlobalTestEnvironment</name>
        <param>
          <type><ref refid="classtesting_1_1_environment" kindref="compound">Environment</ref> *</type>
          <declname>env</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1350" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="1350" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1afd726ae08c9bd16dc52f78c822d9946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, char **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1363" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5370" bodyend="5376"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ae5a88709a4a7529e30c83242156556b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ void</type>
        <definition>void testing::InitGoogleTest</definition>
        <argsstring>(int *argc, wchar_t **argv)</argsstring>
        <name>InitGoogleTest</name>
        <param>
          <type>int *</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>wchar_t **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1367" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="5380" bodyend="5386"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a390c4f66fe7e9098117eb77e5fffa4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1593" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1606" bodyend="1610"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1aa1c82529c7591d2a9fd016de45dd9113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1596" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1612" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a2288dcf4249f88af67dcd46544dc49a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const char *needle, const char *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1599" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1618" bodyend="1622"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a53e5c6e91ea429c43de7f4f57e33d166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const wchar_t *needle, const wchar_t *haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1602" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1624" bodyend="1628"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a571c7edcfc574269833ebe3e7d338ec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1605" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1630" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1abe7b3fa1c9528745f934d4a14155ea87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::IsNotSubstring</definition>
        <argsstring>(const char *needle_expr, const char *haystack_expr, const ::std::string &amp;needle, const ::std::string &amp;haystack)</argsstring>
        <name>IsNotSubstring</name>
        <param>
          <type>const char *</type>
          <declname>needle_expr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>haystack_expr</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>needle</declname>
        </param>
        <param>
          <type>const ::std::string &amp;</type>
          <declname>haystack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="1608" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1636" bodyend="1640"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a2c9a2a391c72a7b02ea3024586e33af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::FloatLE</definition>
        <argsstring>(const char *expr1, const char *expr2, float val1, float val2)</argsstring>
        <name>FloatLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="2058" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1421" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1ae10e2bb304b74abd1b06a2d912a8b43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GTEST_API_ <ref refid="classtesting_1_1_assertion_result" kindref="compound">AssertionResult</ref></type>
        <definition>AssertionResult testing::DoubleLE</definition>
        <argsstring>(const char *expr1, const char *expr2, double val1, double val2)</argsstring>
        <name>DoubleLE</name>
        <param>
          <type>const char *</type>
          <declname>expr1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>val2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="2060" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="1428" bodyend="1431"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8h_1a661e70fc6afeb5c085eed3716aa45059" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool testing::StaticAssertTypeEq</definition>
        <argsstring>()</argsstring>
        <name>StaticAssertTypeEq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/include/gtest/gtest.h" line="2150" column="1" bodyfile="vendor/googletest/googletest/include/gtest/gtest.h" bodystart="2150" bodyend="2153"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test_8cc_1a8e954ed3f0f6ca2e90b043e419c74123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(death_test_style, internal::StringFromGTestEnv(&quot;death_test_style&quot;, kDefaultDeathTestStyle), &quot;Indicates how to run a death test in a forked child process: &quot; &quot;\hreadsafe\(child process re-executes the test binary &quot; &quot;from the beginning, running only the specific death test) or &quot; &quot;\ast\(child process runs the death test immediately &quot; &quot;after forking).&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>death_test_style</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;death_test_style&quot;, kDefaultDeathTestStyle)</type>
        </param>
        <param>
          <type>&quot;Indicates how to run a death test in a forked child process: &quot; &quot;\eadsafe\hild process re-executes the test binary &quot; &quot;from the beginning, running only the specific death test) or &quot; &quot;\t\hild process runs the death test immediately &quot; &quot;after forking).&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-death-test.cc" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-death-test_8cc_1a428e5944490e497df683cb8324ce4489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(death_test_use_fork, internal::BoolFromGTestEnv(&quot;death_test_use_fork&quot;, false), &quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot; &quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot; &quot;implemented. Useful when running under valgrind or similar tools if &quot; &quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot; &quot;it sees an unsupported combination of clone() flags. &quot; &quot;It is not recommended to use this flag w/o valgrind though it will &quot; &quot;work in 99% of the cases. Once valgrind is fixed, this flag will &quot; &quot;most likely be removed.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>death_test_use_fork</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;death_test_use_fork&quot;, false)</type>
        </param>
        <param>
          <type>&quot;Instructs to use fork()/_exit() instead of clone() in death tests. &quot; &quot;Ignored and always uses fork() on POSIX systems where clone() is not &quot; &quot;implemented. Useful when running under valgrind or similar tools if &quot; &quot;those do not support clone(). Valgrind 3.3.1 will just fail if &quot; &quot;it sees an unsupported combination of clone() flags. &quot; &quot;It is not recommended to use this flag w/o valgrind though it will &quot; &quot;work in 99% of the cases. Once valgrind is</type>
          <declname>fixed</declname>
        </param>
        <param>
          <type>this flag will &quot; &quot;most likely be removed.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-death-test.cc" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest-internal-inl_8h_1a534f0743e7c42c55d27dcd0dd3d38f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DECLARE_bool_</definition>
        <argsstring>(death_test_use_fork)</argsstring>
        <name>GTEST_DECLARE_bool_</name>
        <param>
          <type>death_test_use_fork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest-internal-inl.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a56fbc164c7dc53596c23e519d8f1ca3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::GetDefaultFilter</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultFilter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="192" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="192" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ad72f215c805a46fba44cb09d717b01ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(also_run_disabled_tests, internal::BoolFromGTestEnv(&quot;also_run_disabled_tests&quot;, false), &quot;Run disabled tests too, in addition to the tests normally being run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>also_run_disabled_tests</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;also_run_disabled_tests&quot;, false)</type>
        </param>
        <param>
          <type>&quot;Run disabled tests</type>
          <declname>too</declname>
        </param>
        <param>
          <type>in addition to the tests normally being run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a5ab9e9cc2ee1addddfb2f4b43dd4e402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(break_on_failure, internal::BoolFromGTestEnv(&quot;break_on_failure&quot;, false), &quot;True iff a failed assertion should be a debugger break-point.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>break_on_failure</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;break_on_failure&quot;, false)</type>
        </param>
        <param>
          <type>&quot;True iff a failed assertion should be a debugger break-point.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a96c82869676822ec883043aefb6dd042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(catch_exceptions, internal::BoolFromGTestEnv(&quot;catch_exceptions&quot;, true), &quot;True iff &quot; GTEST_NAME_ &quot; should catch exceptions and treat them as test failures.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>catch_exceptions</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;catch_exceptions&quot;, true)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should catch exceptions and treat them as test failures.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a32f0280e95e7718835b0e3d2f7277269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(color, internal::StringFromGTestEnv(&quot;color&quot;, &quot;auto&quot;), &quot;Whether to use colors in the output.  Valid values: yes, no, &quot; &quot;and auto.  &apos;auto&apos; means to use colors if the output is &quot; &quot;being sent to a terminal and the TERM environment variable &quot; &quot;is set to a terminal type that supports colors.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>color</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;color&quot;, &quot;auto&quot;)</type>
        </param>
        <param>
          <type>&quot;Whether to use colors in the output. Valid values:</type>
          <declname>yes</declname>
        </param>
        <param>
          <type>no</type>
        </param>
        <param>
          <type>&quot; &quot;and auto. &apos;auto&apos; means to use colors if the output is &quot; &quot;being sent to a terminal and the TERM environment variable &quot; &quot;is set to a terminal type that supports colors.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a2830ee1f2237233fa44aa580c5a919ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(filter, internal::StringFromGTestEnv(&quot;filter&quot;, GetDefaultFilter()), &quot;A colon-separated list of glob (not regex) patterns &quot; &quot;for filtering the tests to run, optionally followed by a &quot; &quot;&apos;-&apos; and a : separated list of negative patterns (tests to &quot; &quot;exclude).  A test is run if it matches one of the positive &quot; &quot;patterns and does not match any of the negative patterns.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>filter</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;filter&quot;, GetDefaultFilter())</type>
        </param>
        <param>
          <type>&quot;A colon-separated list of glob (not regex) patterns &quot; &quot;for filtering the tests to</type>
          <declname>run</declname>
        </param>
        <param>
          <type>optionally followed by a &quot; &quot;&apos;-&apos; and a :separated list of negative patterns(tests to &quot; &quot;exclude). A test is run if it matches one of the positive &quot; &quot;patterns and does not match any of the negative patterns.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a0fa31ecbf33c5e5970cca1d91c050153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(list_tests, false, &quot;List all tests without running them.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>list_tests</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;List all tests without running them.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a6f67b9169db6b5872f61d462b113cb85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(output, internal::StringFromGTestEnv(&quot;output&quot;, &quot;&quot;), &quot;A format (currently must be \ml\, optionally followed &quot; &quot;by a colon and an output file name or directory. A directory &quot; &quot;is indicated by a trailing pathname separator. &quot; &quot;Examples: \ml:filename.xml\ \ml::directoryname/\ &quot; &quot;If a directory is specified, output files will be created &quot; &quot;within that directory, with file-names based on the test &quot; &quot;executable&apos;s name and, if necessary, made unique by adding &quot; &quot;digits.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>output</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;output&quot;, &quot;&quot;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a766fcba2ec951940e528276919a5d22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(print_time, internal::BoolFromGTestEnv(&quot;print_time&quot;, true), &quot;True iff &quot; GTEST_NAME_ &quot; should display elapsed time in text output.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>print_time</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;print_time&quot;, true)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should display elapsed time in text output.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a9900d8db2670a26999fbc2a9130f7185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(random_seed, internal::Int32FromGTestEnv(&quot;random_seed&quot;, 0), &quot;Random number seed to use when shuffling test orders.  Must be in range &quot; &quot;[1, 99999], or 0 to use a seed based on the current time.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>random_seed</type>
        </param>
        <param>
          <type>internal::Int32FromGTestEnv(&quot;random_seed&quot;, 0)</type>
        </param>
        <param>
          <type>&quot;Random number seed to use when shuffling test orders. Must be in range &quot; &quot;</type>
          <array>[1, 99999]</array>
        </param>
        <param>
          <type>or 0 to use a seed based on the current time.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1aae6f1140f03d7bf24067df0f6628e9ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(repeat, internal::Int32FromGTestEnv(&quot;repeat&quot;, 1), &quot;How many times to repeat each test.  Specify a negative number &quot; &quot;for repeating forever.  Useful for shaking out flaky tests.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>repeat</type>
        </param>
        <param>
          <type>internal::Int32FromGTestEnv(&quot;repeat&quot;, 1)</type>
        </param>
        <param>
          <type>&quot;How many times to repeat each test. Specify a negative number &quot; &quot;for repeating forever. Useful for shaking out flaky tests.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a60ef38aa9d1437f0d7818181897af8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(show_internal_stack_frames, false, &quot;True iff &quot; GTEST_NAME_ &quot; should include internal stack frames when &quot; &quot;printing test failure stack traces.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>show_internal_stack_frames</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should include internal stack frames when &quot; &quot;printing test failure stack traces.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1af95276e3deb9d243d729f3043eabd272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(shuffle, internal::BoolFromGTestEnv(&quot;shuffle&quot;, false), &quot;True iff &quot; GTEST_NAME_ &quot; should randomize tests&apos; order on every run.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>shuffle</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;shuffle&quot;, false)</type>
        </param>
        <param>
          <type>&quot;True iff &quot; GTEST_NAME_ &quot; should randomize tests&apos; order on every run.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a84af642630c9181f00fcf0a4a63e795e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_int32_</definition>
        <argsstring>(stack_trace_depth, internal::Int32FromGTestEnv(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth), &quot;The maximum number of stack frames to print when an &quot; &quot;assertion fails.  The valid range is 0 through 100, inclusive.&quot;)</argsstring>
        <name>GTEST_DEFINE_int32_</name>
        <param>
          <type>stack_trace_depth</type>
        </param>
        <param>
          <type>internal::Int32FromGTestEnv(&quot;stack_trace_depth&quot;, kMaxStackTraceDepth)</type>
        </param>
        <param>
          <type>&quot;The maximum number of stack frames to print when an &quot; &quot;assertion fails. The valid range is 0 through</type>
          <declname>100</declname>
        </param>
        <param>
          <type>inclusive.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a145c2b7b4242b148b8d167f737b0d7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_string_</definition>
        <argsstring>(stream_result_to, internal::StringFromGTestEnv(&quot;stream_result_to&quot;, &quot;&quot;), &quot;This flag specifies the host name and the port number on which to stream &quot; &quot;test results. Example: \ocalhost:555\ The flag is effective only on &quot; &quot;Linux.&quot;)</argsstring>
        <name>GTEST_DEFINE_string_</name>
        <param>
          <type>stream_result_to</type>
        </param>
        <param>
          <type>internal::StringFromGTestEnv(&quot;stream_result_to&quot;, &quot;&quot;)</type>
        </param>
        <param>
          <type>&quot;This flag specifies the host name and the port number on which to stream &quot; &quot;test results. Example: \alhost:555\he flag is effective only on &quot; &quot;Linux.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a7598962574c3fff25237b78f0de81aa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::GTEST_DEFINE_bool_</definition>
        <argsstring>(throw_on_failure, internal::BoolFromGTestEnv(&quot;throw_on_failure&quot;, false), &quot;When this flag is specified, a failed assertion will throw an exception &quot; &quot;if exceptions are enabled or exit the program with a non-zero code &quot; &quot;otherwise.&quot;)</argsstring>
        <name>GTEST_DEFINE_bool_</name>
        <param>
          <type>throw_on_failure</type>
        </param>
        <param>
          <type>internal::BoolFromGTestEnv(&quot;throw_on_failure&quot;, false)</type>
        </param>
        <param>
          <type>&quot;When this flag is</type>
          <declname>specified</declname>
        </param>
        <param>
          <type>a failed assertion will throw an exception &quot; &quot;if exceptions are enabled or exit the program with a non-zero code &quot; &quot;otherwise.&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a956d4c522454fa6dfd75b5bbbefe8f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>kSize</declname>
            <defname>kSize</defname>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; testing::ArrayAsVector</definition>
        <argsstring>(const char *const (&amp;array)[kSize])</argsstring>
        <name>ArrayAsVector</name>
        <param>
          <type>const char *const (&amp;)</type>
          <declname>array</declname>
          <array>[kSize]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2108" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2108" bodyend="2110"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1acb3fdfadf475a3c2f5e22a3dae73532a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>static std::vector&lt;std::string&gt; testing::GetReservedAttributesForElement</definition>
        <argsstring>(const std::string &amp;xml_element)</argsstring>
        <name>GetReservedAttributesForElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>xml_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2112" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2112" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a4354761948a5cf56fdf905418a0f78f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatWordList</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;words)</argsstring>
        <name>FormatWordList</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>words</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2127" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2127" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a4c9bd414747bf0563bfdb32a2307dcdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::ValidateTestPropertyName</definition>
        <argsstring>(const std::string &amp;property_name, const std::vector&lt; std::string &gt; &amp;reserved_names)</argsstring>
        <name>ValidateTestPropertyName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>reserved_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2141" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2141" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a9f19442d566c7eaec0702b9fcf282b63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartFatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartFatallyFailed</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2179" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2179" bodyend="2181"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1af256d104ca665115eb291f762bb659e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool testing::TestPartNonfatallyFailed</definition>
        <argsstring>(const TestPartResult &amp;result)</argsstring>
        <name>TestPartNonfatallyFailed</name>
        <param>
          <type>const <ref refid="classtesting_1_1_test_part_result" kindref="compound">TestPartResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2189" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2189" bodyend="2191"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a33e070c3e994cb75f9017fa2a044d536" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatCountableNoun</definition>
        <argsstring>(int count, const char *singular_form, const char *plural_form)</argsstring>
        <name>FormatCountableNoun</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>singular_form</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>plural_form</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2809" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2809" bodyend="2814"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a7420a0eb48a02ba210e265afb75febdf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatTestCount</definition>
        <argsstring>(int test_count)</argsstring>
        <name>FormatTestCount</name>
        <param>
          <type>int</type>
          <declname>test_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2817" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2817" bodyend="2819"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1ab8cabb45f3d8c52d336372c1b62d75c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string testing::FormatTestCaseCount</definition>
        <argsstring>(int test_case_count)</argsstring>
        <name>FormatTestCaseCount</name>
        <param>
          <type>int</type>
          <declname>test_case_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2822" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2822" bodyend="2824"/>
      </memberdef>
      <memberdef kind="function" id="gtest_8cc_1a4e9fdeef31f7e49afccfde0532f76864" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* testing::TestPartResultTypeToString</definition>
        <argsstring>(TestPartResult::Type type)</argsstring>
        <name>TestPartResultTypeToString</name>
        <param>
          <type>TestPartResult::Type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/src/gtest.cc" line="2830" column="1" bodyfile="vendor/googletest/googletest/src/gtest.cc" bodystart="2830" bodyend="2845"/>
      </memberdef>
      <memberdef kind="function" id="gtest__env__var__test___8cc_1af4187d1b48a2812f1335721ed8f30a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST</definition>
        <argsstring>(GTestEnvVarTest, Dummy)</argsstring>
        <name>TEST</name>
        <param>
          <type>GTestEnvVarTest</type>
        </param>
        <param>
          <type>Dummy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_env_var_test_.cc" line="50" column="1" bodyfile="vendor/googletest/googletest/test/gtest_env_var_test_.cc" bodystart="50" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="gtest__env__var__test___8cc_1a9863402455bfcf9be5fc0b1453a6d97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void testing::PrintFlag</definition>
        <argsstring>(const char *flag)</argsstring>
        <name>PrintFlag</name>
        <param>
          <type>const char *</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_env_var_test_.cc" line="53" column="1" bodyfile="vendor/googletest/googletest/test/gtest_env_var_test_.cc" bodystart="53" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ae0cbea692840c88ab0b03285eb69ac97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST</definition>
        <argsstring>(SuccessfulAssertionTest, SUCCEED)</argsstring>
        <name>TEST</name>
        <param>
          <type>SuccessfulAssertionTest</type>
        </param>
        <param>
          <type>SUCCEED</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="4194" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="4194" bodyend="4198"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af6c8f998f934372e5687d3998068e5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST</definition>
        <argsstring>(SuccessfulAssertionTest, EXPECT)</argsstring>
        <name>TEST</name>
        <param>
          <type>SuccessfulAssertionTest</type>
        </param>
        <param>
          <type>EXPECT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="4201" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="4201" bodyend="4204"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a9b1e4b53f277d25e6d6413a0004481bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST</definition>
        <argsstring>(SuccessfulAssertionTest, EXPECT_STR)</argsstring>
        <name>TEST</name>
        <param>
          <type>SuccessfulAssertionTest</type>
        </param>
        <param>
          <type>EXPECT_STR</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="4207" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="4207" bodyend="4210"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1afbe4c8233faff6eba04902b3cb041632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST</definition>
        <argsstring>(SuccessfulAssertionTest, ASSERT)</argsstring>
        <name>TEST</name>
        <param>
          <type>SuccessfulAssertionTest</type>
        </param>
        <param>
          <type>ASSERT</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="4213" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="4213" bodyend="4216"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a83dfac108c207258287b9f7aa9171e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST</definition>
        <argsstring>(SuccessfulAssertionTest, ASSERT_STR)</argsstring>
        <name>TEST</name>
        <param>
          <type>SuccessfulAssertionTest</type>
        </param>
        <param>
          <type>ASSERT_STR</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="4219" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="4219" bodyend="4222"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1acd53db89097aba1468724d6446069b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(TestInfoTest, Names)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_test_info_test" kindref="compound">TestInfoTest</ref></type>
        </param>
        <param>
          <type>Names</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5319" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5319" bodyend="5324"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ab00e29c00b3e29cdfa21d23b79dd3776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(TestInfoTest, result)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_test_info_test" kindref="compound">TestInfoTest</ref></type>
        </param>
        <param>
          <type>result</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5327" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5327" bodyend="5335"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af597d0ad4de0197141b78e9c1035e491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST</definition>
        <argsstring>(CodeLocationForTEST, Verify)</argsstring>
        <name>TEST</name>
        <param>
          <type>CodeLocationForTEST</type>
        </param>
        <param>
          <type>Verify</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5344" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5344" bodyend="5346"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a782ec43081903a0aaa6d009218eba2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(CodeLocationForTESTF, Verify)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_e_s_t_f" kindref="compound">CodeLocationForTESTF</ref></type>
        </param>
        <param>
          <type>Verify</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5351" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5351" bodyend="5353"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af05768b7e2f14652d2c4f274ba1a5544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_P</definition>
        <argsstring>(CodeLocationForTESTP, Verify)</argsstring>
        <name>TEST_P</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_e_s_t_p" kindref="compound">CodeLocationForTESTP</ref></type>
        </param>
        <param>
          <type>Verify</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5358" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5358" bodyend="5360"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a5b049e97e9082df909e4a0f740ff5d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::INSTANTIATE_TEST_CASE_P</definition>
        <argsstring>(, CodeLocationForTESTP, Values(0))</argsstring>
        <name>INSTANTIATE_TEST_CASE_P</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_e_s_t_p" kindref="compound">CodeLocationForTESTP</ref></type>
        </param>
        <param>
          <type>Values(0)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5362" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af0459cc6cdfbbae821caf802c7f2bb72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TYPED_TEST_CASE</definition>
        <argsstring>(CodeLocationForTYPEDTEST, int)</argsstring>
        <name>TYPED_TEST_CASE</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t" kindref="compound">CodeLocationForTYPEDTEST</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a400c572f732b06e836d6b3a5adfc4cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TYPED_TEST</definition>
        <argsstring>(CodeLocationForTYPEDTEST, Verify)</argsstring>
        <name>TYPED_TEST</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t" kindref="compound">CodeLocationForTYPEDTEST</ref></type>
        </param>
        <param>
          <type>Verify</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5370" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5370" bodyend="5372"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a439eefbc85668f74fd9e0c2cb7c7d0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TYPED_TEST_CASE_P</definition>
        <argsstring>(CodeLocationForTYPEDTESTP)</argsstring>
        <name>TYPED_TEST_CASE_P</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p" kindref="compound">CodeLocationForTYPEDTESTP</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a3f3fbbc7ecc23117307b81deb8f4cfac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TYPED_TEST_P</definition>
        <argsstring>(CodeLocationForTYPEDTESTP, Verify)</argsstring>
        <name>TYPED_TEST_P</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p" kindref="compound">CodeLocationForTYPEDTESTP</ref></type>
        </param>
        <param>
          <type>Verify</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5380" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5380" bodyend="5382"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a9fc96ebb1c0e7db169c4a5697c903f56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::REGISTER_TYPED_TEST_CASE_P</definition>
        <argsstring>(CodeLocationForTYPEDTESTP, Verify)</argsstring>
        <name>REGISTER_TYPED_TEST_CASE_P</name>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p" kindref="compound">CodeLocationForTYPEDTESTP</ref></type>
        </param>
        <param>
          <type>Verify</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a111c1dea1140652727ab97ddc13eb045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::INSTANTIATE_TYPED_TEST_CASE_P</definition>
        <argsstring>(My, CodeLocationForTYPEDTESTP, int)</argsstring>
        <name>INSTANTIATE_TYPED_TEST_CASE_P</name>
        <param>
          <type>My</type>
        </param>
        <param>
          <type><ref refid="classtesting_1_1_code_location_for_t_y_p_e_d_t_e_s_t_p" kindref="compound">CodeLocationForTYPEDTESTP</ref></type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a01e948eb5427d31f70eafaf472e2bfa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(SetUpTestCaseTest, Test1)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_set_up_test_case_test" kindref="compound">SetUpTestCaseTest</ref></type>
        </param>
        <param>
          <type>Test1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5444" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5444" bodyend="5446"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a8fc2e448ce96e4da357a2129d49e86e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(SetUpTestCaseTest, Test2)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_set_up_test_case_test" kindref="compound">SetUpTestCaseTest</ref></type>
        </param>
        <param>
          <type>Test2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5449" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5449" bodyend="5451"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ae80ccfaa178730f49af649cd044e84e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, Empty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>Empty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5712" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5712" bodyend="5722"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1add96563b5ca11c20fe2766a848c2bb63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, NoFlag)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>NoFlag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5725" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5725" bodyend="5737"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ab368a135e5a7a59bceb912a5f636004a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, FilterBad)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>FilterBad</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5740" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5740" bodyend="5754"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a04d011d2e5695513c45216ae1b98095b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, FilterEmpty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>FilterEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5757" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5757" bodyend="5770"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a69dcb047e8cf4f93e8132faf11ba7110" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, FilterNonEmpty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>FilterNonEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5773" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5773" bodyend="5786"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1afc3e46c96f27aa2b502b15e8e4bab2ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, BreakOnFailureWithoutValue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>BreakOnFailureWithoutValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5789" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5789" bodyend="5802"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1abd2b3ac615374fbe560ba35be4c4e928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, BreakOnFailureFalse_0)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>BreakOnFailureFalse_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5805" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5805" bodyend="5818"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1abb038e044a4f2142414624e482b48eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, BreakOnFailureFalse_f)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>BreakOnFailureFalse_f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5821" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5821" bodyend="5834"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aec19373865e49dbd1fe7f22c8db4a256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, BreakOnFailureFalse_F)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>BreakOnFailureFalse_F</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5837" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5837" bodyend="5850"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aaf881d7ee8cfa238e9a66d0562937fde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, BreakOnFailureTrue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>BreakOnFailureTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5854" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5854" bodyend="5867"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af59442310531cd96d8aa3ce5acb2d025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, CatchExceptions)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>CatchExceptions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5870" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5870" bodyend="5883"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aa5259681257cd3654f34dc81212c82bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, DeathTestUseFork)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>DeathTestUseFork</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5886" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5886" bodyend="5899"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a34b640eb46cf4189bed01f18d42d3277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, DuplicatedFlags)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>DuplicatedFlags</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5903" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5903" bodyend="5917"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1572c861f65ca8d5dfb61246a32a2799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, UnrecognizedFlag)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>UnrecognizedFlag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5920" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5920" bodyend="5939"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1d111e67e0c6411085ff6d0911f50d18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ListTestsFlag)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ListTestsFlag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5942" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5942" bodyend="5955"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a000181c6b1ac347a3d7797324808ea8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ListTestsTrue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ListTestsTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5958" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5958" bodyend="5971"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1acc2334b947370b550b7d6241e0d34124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ListTestsFalse)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ListTestsFalse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5974" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5974" bodyend="5987"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a60e2b7e1cf88c2af6e04055b3afe7cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ListTestsFalse_f)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ListTestsFalse_f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="5990" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="5990" bodyend="6003"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a4933b012108ecb88243c2dbc13d7665b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ListTestsFalse_F)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ListTestsFalse_F</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6006" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6006" bodyend="6019"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a121894d4edf72b1dbabdcde2bebd745d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, OutputEmpty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>OutputEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6022" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6022" bodyend="6036"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a90df70c45f67d4c0dbc5bd29f7be3361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, OutputXml)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>OutputXml</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6039" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6039" bodyend="6052"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a810f99da1185404f8a899c919ee6433e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, OutputXmlFile)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>OutputXmlFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6055" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6055" bodyend="6068"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ac351c3065ee89f7eb2fbba809db5c61d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, OutputXmlDirectory)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>OutputXmlDirectory</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6071" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6071" bodyend="6085"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1aa832ff8ffe6b687c7025cbc766973e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, PrintTimeFlag)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>PrintTimeFlag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6088" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6088" bodyend="6101"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ae0f76bbca8e2bf7d9de60c4b8b0dfa16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, PrintTimeTrue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>PrintTimeTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6104" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6104" bodyend="6117"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1ec71efef2639ccb137ac5b7ccd8c9d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, PrintTimeFalse)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>PrintTimeFalse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6120" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6120" bodyend="6133"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af87ac7e6dc7c0ea1d85eaa3a57358d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, PrintTimeFalse_f)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>PrintTimeFalse_f</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6136" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6136" bodyend="6149"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a337ddb6629adb42219e612b67d18c6f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, PrintTimeFalse_F)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>PrintTimeFalse_F</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6152" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6152" bodyend="6165"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a2a1e31fea507bdd6e011450e2f316bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, RandomSeed)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>RandomSeed</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6168" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6168" bodyend="6181"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a254368f412c980556143a9182f451981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, Repeat)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>Repeat</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6184" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6184" bodyend="6197"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ab6624d856abda0913f536a4e719dd769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, AlsoRunDisabledTestsFlag)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>AlsoRunDisabledTestsFlag</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6200" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6200" bodyend="6214"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a3e73dbd19fb50e5ad516de9592963033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, AlsoRunDisabledTestsTrue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>AlsoRunDisabledTestsTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6217" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6217" bodyend="6231"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1c50ef2a972315130f1613c69204e259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, AlsoRunDisabledTestsFalse)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>AlsoRunDisabledTestsFalse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6234" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6234" bodyend="6248"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a2f1fd86207e6c7085455dc2d582d1d12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ShuffleWithoutValue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ShuffleWithoutValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6251" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6251" bodyend="6264"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1acc3dcde65e75293451073528cb1c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ShuffleFalse_0)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ShuffleFalse_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6267" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6267" bodyend="6280"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a24bb2b3783b9e0c419db7f974b641cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ShuffleTrue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ShuffleTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6284" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6284" bodyend="6297"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1af8579f8ad3383827814d1fbea4fdeee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, StackTraceDepth)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>StackTraceDepth</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6300" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6300" bodyend="6313"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ad9cf0c452b4d2645b037725957021c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, StreamResultTo)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>StreamResultTo</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6315" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6315" bodyend="6329"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a2824800277b4a1e8732abd5d7c2349d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ThrowOnFailureWithoutValue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ThrowOnFailureWithoutValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6332" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6332" bodyend="6345"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1adfcdbd6b2715fddd03a47a822517ddea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ThrowOnFailureFalse_0)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ThrowOnFailureFalse_0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6348" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6348" bodyend="6361"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1ad7513c23ff21a4d2761cadfd2afe87e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(InitGoogleTestTest, ThrowOnFailureTrue)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_init_google_test_test" kindref="compound">InitGoogleTestTest</ref></type>
        </param>
        <param>
          <type>ThrowOnFailureTrue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6365" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6365" bodyend="6378"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a1e55a3ca18d877e1e83ce0ed9e7b5c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(CurrentTestInfoTest, WorksForFirstTestInATestCase)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_current_test_info_test" kindref="compound">CurrentTestInfoTest</ref></type>
        </param>
        <param>
          <type>WorksForFirstTestInATestCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6533" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6533" bodyend="6542"/>
      </memberdef>
      <memberdef kind="function" id="gtest__unittest_8cc_1a3775bdbb5d24619425c52103e7ae6434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>testing::TEST_F</definition>
        <argsstring>(CurrentTestInfoTest, WorksForSecondTestInATestCase)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classtesting_1_1_current_test_info_test" kindref="compound">CurrentTestInfoTest</ref></type>
        </param>
        <param>
          <type>WorksForSecondTestInATestCase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googletest/test/gtest_unittest.cc" line="6548" column="1" bodyfile="vendor/googletest/googletest/test/gtest_unittest.cc" bodystart="6548" bodyend="6557"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="vendor/googletest/googlemock/include/gmock/gmock-actions.h" line="53" column="1"/>
  </compounddef>
</doxygen>
