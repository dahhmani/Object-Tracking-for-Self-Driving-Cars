<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceupload" kind="namespace" language="Python">
    <compoundname>upload</compoundname>
    <innerclass refid="classupload_1_1_abstract_rpc_server" prot="public">upload::AbstractRpcServer</innerclass>
    <innerclass refid="classupload_1_1_client_login_error" prot="public">upload::ClientLoginError</innerclass>
    <innerclass refid="classupload_1_1_git_v_c_s" prot="public">upload::GitVCS</innerclass>
    <innerclass refid="classupload_1_1_http_rpc_server" prot="public">upload::HttpRpcServer</innerclass>
    <innerclass refid="classupload_1_1_mercurial_v_c_s" prot="public">upload::MercurialVCS</innerclass>
    <innerclass refid="classupload_1_1_subversion_v_c_s" prot="public">upload::SubversionVCS</innerclass>
    <innerclass refid="classupload_1_1_version_control_system" prot="public">upload::VersionControlSystem</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1a79aff46409a98c4e5f608c8df1fd4612" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int upload::verbosity</definition>
        <argsstring></argsstring>
        <name>verbosity</name>
        <initializer>=  1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="59" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1aad5b1a43823e2a710a2f78e33dde8901" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int upload::MAX_UPLOAD_SIZE</definition>
        <argsstring></argsstring>
        <name>MAX_UPLOAD_SIZE</name>
        <initializer>=  900 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="62" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1af9e508d19dc2dd9cdb7c642dde0bdd21" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.parser</definition>
        <argsstring></argsstring>
        <name>parser</name>
        <initializer>=  optparse.OptionParser(usage=&quot;%prog [options] [-- diff_options]&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="392" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1a675d13c979f1c720866d22ed1736f580" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.action</definition>
        <argsstring></argsstring>
        <name>action</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="393" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1a770d9c7b49b1fede80de6078d5e49af7" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.dest</definition>
        <argsstring></argsstring>
        <name>dest</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="394" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1af4be925d9a50d5ad134d86400509d0f2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.default</definition>
        <argsstring></argsstring>
        <name>default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="394" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1abfc23c9aa2d9b777678da117a85929a5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.help</definition>
        <argsstring></argsstring>
        <name>help</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="395" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1a9d33d66de17175dced88ffe95f079226" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.group</definition>
        <argsstring></argsstring>
        <name>group</name>
        <initializer>=  parser.add_option_group(&quot;Logging options&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="397" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1a985aa9a71de3eb507344df65700c696d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.const</definition>
        <argsstring></argsstring>
        <name>const</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="398" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1af1cea8af5389f0ab2d8b65b2c0fd2fe0" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.metavar</definition>
        <argsstring></argsstring>
        <name>metavar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="409" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1a4fc56f0dd6613be15c3c4dc3af3619ce" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="443" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="googlemock_2scripts_2upload_8py_1afa85ceef00a65cd276a856404eb5f310" prot="public" static="no" mutable="no">
        <type></type>
        <definition>upload.use_shell</definition>
        <argsstring></argsstring>
        <name>use_shell</name>
        <initializer>=  sys.platform.startswith(&quot;win&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="539" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="539" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1a4f169469a6d43221ebd38cfd546484e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::GetEmail</definition>
        <argsstring>(prompt)</argsstring>
        <name>GetEmail</name>
        <param>
          <type>prompt</type>
          <defname>prompt</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Prompts the user for their email address and returns it.

The last used email address is saved to a file and offered up as a suggestion
to the user. If the user presses enter without typing in anything the last
used email address is used. If the user enters a new address, it is saved
for next time we prompt.</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="65" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="65" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1a79ce84c196c018f3b0c7ff7a9b626b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::StatusUpdate</definition>
        <argsstring>(msg)</argsstring>
        <name>StatusUpdate</name>
        <param>
          <type>msg</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Print a status message to stdout.

If &apos;verbosity&apos; is greater than 0, print the message.

Args:
  msg: The string to print.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="97" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="97" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1adea53186a1d73e92cc839b7c35c2c044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::ErrorExit</definition>
        <argsstring>(msg)</argsstring>
        <name>ErrorExit</name>
        <param>
          <type>msg</type>
          <defname>msg</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Print an error message to stderr and exit.</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="109" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1a1dadef480a702dbc5d0fb66203b9abe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::GetRpcServer</definition>
        <argsstring>(options)</argsstring>
        <name>GetRpcServer</name>
        <param>
          <type>options</type>
          <defname>options</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Returns an instance of an AbstractRpcServer.

Returns:
  A new AbstractRpcServer, on which RPC calls can be made.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="458" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="458" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1ae12985a2c860c124c502dd2099b702eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::EncodeMultipartFormData</definition>
        <argsstring>(fields, files)</argsstring>
        <name>EncodeMultipartFormData</name>
        <param>
          <type>fields</type>
          <defname>fields</defname>
        </param>
        <param>
          <type>files</type>
          <defname>files</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Encode form fields for multipart/form-data.

Args:
  fields: A sequence of (name, value) elements for regular form fields.
  files: A sequence of (name, filename, value) elements for data to be
         uploaded as files.
Returns:
  (content_type, body) ready for httplib.HTTP instance.

Source:
  http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/146306
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="498" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="498" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1a753a004706d964335ad218628e07b063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::GetContentType</definition>
        <argsstring>(filename)</argsstring>
        <name>GetContentType</name>
        <param>
          <type>filename</type>
          <defname>filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Helper to guess the content-type from the filename.</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="533" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="533" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1afa542d3a5a4f4fce174a1c23644a9204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::RunShellWithReturnCode</definition>
        <argsstring>(command, print_output=False, universal_newlines=True)</argsstring>
        <name>RunShellWithReturnCode</name>
        <param>
          <type>command</type>
          <defname>command</defname>
        </param>
        <param>
          <type>print_output</type>
          <defname>print_output</defname>
          <defval>False</defval>
        </param>
        <param>
          <type>universal_newlines</type>
          <defname>universal_newlines</defname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Executes a command and returns the output from stdout and the return code.

Args:
  command: Command to execute.
  print_output: If True, the output is printed to stdout.
                If False, both stdout and stderr are ignored.
  universal_newlines: Use universal_newlines flag (default: True).

Returns:
  Tuple (output, return code)
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="541" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="542" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1adddc423c49132e8879cbb25d6be2cf11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::RunShell</definition>
        <argsstring>(command, silent_ok=False, universal_newlines=True, print_output=False)</argsstring>
        <name>RunShell</name>
        <param>
          <type>command</type>
          <defname>command</defname>
        </param>
        <param>
          <type>silent_ok</type>
          <defname>silent_ok</defname>
          <defval>False</defval>
        </param>
        <param>
          <type>universal_newlines</type>
          <defname>universal_newlines</defname>
          <defval>True</defval>
        </param>
        <param>
          <type>print_output</type>
          <defname>print_output</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="577" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="578" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1a9dd260785ca4cc97e245234811ef1949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::SplitPatch</definition>
        <argsstring>(data)</argsstring>
        <name>SplitPatch</name>
        <param>
          <type>data</type>
          <defname>data</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Splits a patch into separate pieces for each file.

Args:
  data: A string containing the output of svn diff.

Returns:
  A list of 2-tuple (filename, text) where text is the svn diff output
    pertaining to filename.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="1141" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="1141" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1a7ec83cb7f7bfb9109c19b6f91552b3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::UploadSeparatePatches</definition>
        <argsstring>(issue, rpc_server, patchset, data, options)</argsstring>
        <name>UploadSeparatePatches</name>
        <param>
          <type>issue</type>
          <defname>issue</defname>
        </param>
        <param>
          <type>rpc_server</type>
          <defname>rpc_server</defname>
        </param>
        <param>
          <type>patchset</type>
          <defname>patchset</defname>
        </param>
        <param>
          <type>data</type>
          <defname>data</defname>
        </param>
        <param>
          <type>options</type>
          <defname>options</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Uploads a separate patch for each file in the diff output.

Returns a list of [patch_key, filename] for each file.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="1181" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="1181" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1a31390568253accd22ee51861eaeb99bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::GuessVCS</definition>
        <argsstring>(options)</argsstring>
        <name>GuessVCS</name>
        <param>
          <type>options</type>
          <defname>options</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Helper to guess the version control system.

This examines the current directory, guesses which VersionControlSystem
we&apos;re using, and returns an instance of the appropriate class.  Exit with an
error if we can&apos;t figure it out.

Returns:
  A VersionControlSystem instance. Exits if the VCS can&apos;t be guessed.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="1209" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="1209" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1ad6226af96c9f1905602b8002bd5de952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::RealMain</definition>
        <argsstring>(argv, data=None)</argsstring>
        <name>RealMain</name>
        <param>
          <type>argv</type>
          <defname>argv</defname>
        </param>
        <param>
          <type>data</type>
          <defname>data</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>The real main function.

Args:
  argv: Command line arguments.
  data: Diff contents. If None (default) the diff is generated by
    the VersionControlSystem implementation returned by GuessVCS().

Returns:
  A 2-tuple (issue id, patchset id).
  The patchset id is None if the base files are not uploaded by this
  script (applies only to SVN checkouts).
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="1250" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="1250" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="googlemock_2scripts_2upload_8py_1aef3fcf7a8d77d13ba75adbf58b6c43ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def upload::main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="vendor/googletest/googlemock/scripts/upload.py" line="1377" column="1" bodyfile="vendor/googletest/googlemock/scripts/upload.py" bodystart="1377" bodyend="1385"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="vendor/googletest/googlemock/scripts/upload.py" line="1" column="1"/>
  </compounddef>
</doxygen>
