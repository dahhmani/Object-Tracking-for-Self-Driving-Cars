<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="gmock__class__test_8py" kind="file" language="Python">
    <compoundname>gmock_class_test.py</compoundname>
    <innerclass refid="classcpp_1_1gmock__class__test_1_1_test_case" prot="public">cpp::gmock_class_test::TestCase</innerclass>
    <innerclass refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test" prot="public">cpp::gmock_class_test::GenerateMethodsTest</innerclass>
    <innerclass refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test" prot="public">cpp::gmock_class_test::GenerateMocksTest</innerclass>
    <innernamespace refid="namespacecpp_1_1gmock__class__test">cpp::gmock_class_test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Copyright<sp/>2009<sp/>Neal<sp/>Norwitz<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Portions<sp/>Copyright<sp/>2009<sp/>Google<sp/>Inc.<sp/>All<sp/>Rights<sp/>Reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;&quot;&quot;Tests<sp/>for<sp/>gmock.scripts.generator.cpp.gmock_class.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">__author__<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;nnorwitz@google.com<sp/>(Neal<sp/>Norwitz)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>sys</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Allow<sp/>the<sp/>cpp<sp/>imports<sp/>below<sp/>to<sp/>work<sp/>when<sp/>run<sp/>as<sp/>a<sp/>standalone<sp/>script.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">sys.path.append(os.path.join(os.path.dirname(__file__),<sp/></highlight><highlight class="stringliteral">&apos;..&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cpp<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>ast</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>cpp<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>gmock_class</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classcpp_1_1gmock__class__test_1_1_test_case" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcpp_1_1gmock__class__test_1_1_test_case" kindref="compound">TestCase</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Helper<sp/>class<sp/>that<sp/>adds<sp/>assert<sp/>methods.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a366b15717eebc41e397357868c5734c5" kindref="member">StripLeadingWhitespace</ref>(self,<sp/>lines):</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Strip<sp/>leading<sp/>whitespace<sp/>in<sp/>each<sp/>line<sp/>in<sp/>&apos;lines&apos;.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join([s.lstrip()<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>lines.split(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">)])</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(self,<sp/>expected_lines,<sp/>lines):</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Specialized<sp/>assert<sp/>that<sp/>ignores<sp/>the<sp/>indent<sp/>level.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>self.assertEqual(expected_lines,<sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a366b15717eebc41e397357868c5734c5" kindref="member">StripLeadingWhitespace</ref>(lines))</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test" kindref="compound">GenerateMethodsTest</ref>(<ref refid="classcpp_1_1gmock__class__test_1_1_test_case" kindref="compound">TestCase</ref>):</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(self,<sp/>cpp_source):</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Convert<sp/>C++<sp/>source<sp/>to<sp/>Google<sp/>Mock<sp/>output<sp/>source<sp/>lines.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>method_source_lines<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&lt;test&gt;<sp/>is<sp/>a<sp/>pseudo-filename,<sp/>it<sp/>is<sp/>not<sp/>read<sp/>or<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>builder<sp/>=<sp/>ast.BuilderFromSource(cpp_source,<sp/></highlight><highlight class="stringliteral">&apos;&lt;test&gt;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>ast_list<sp/>=<sp/>list(builder.Generate())</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>gmock_class._GenerateMethods(method_source_lines,<sp/>cpp_source,<sp/>ast_list[0])</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(method_source_lines)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testSimpleMethod(self):</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar();</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nint());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testSimpleConstructorsAndDestructor(self):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/>Foo();</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/>Foo(int<sp/>x);</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/>Foo(const<sp/>Foo&amp;<sp/>f);</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/>Foo(Foo&amp;&amp;<sp/>f);</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/>~Foo();</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>constructors<sp/>and<sp/>destructor<sp/>should<sp/>be<sp/>ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nint());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testVirtualDestructor(self):</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>~Foo();</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>destructor<sp/>should<sp/>be<sp/>ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nint());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testExplicitlyDefaultedConstructorsAndDestructor(self):</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/>Foo()<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral"><sp/><sp/>Foo(const<sp/>Foo&amp;<sp/>f)<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"><sp/><sp/>Foo(Foo&amp;&amp;<sp/>f)<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral"><sp/><sp/>~Foo()<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>constructors<sp/>and<sp/>destructor<sp/>should<sp/>be<sp/>ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nint());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testExplicitlyDeletedConstructorsAndDestructor(self):</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/>Foo()<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/>Foo(const<sp/>Foo&amp;<sp/>f)<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/>Foo(Foo&amp;&amp;<sp/>f)<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/>~Foo()<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>The<sp/>constructors<sp/>and<sp/>destructor<sp/>should<sp/>be<sp/>ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nint());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testSimpleOverrideMethod(self):</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/>int<sp/>Bar()<sp/>override;</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nint());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testSimpleConstMethod(self):</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(bool<sp/>flag)<sp/>const;</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_CONST_METHOD1(Bar,\nvoid(bool<sp/>flag));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testExplicitVoid(self):</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar(void);</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="158"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nint(void));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testStrangeNewlineInParameter(self):</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="165"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="167"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(int</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral">a)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD1(Bar,\nvoid(int<sp/>a));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testDefaultParameters(self):</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(int<sp/>a,<sp/>char<sp/>c<sp/>=<sp/>&apos;x&apos;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD2(Bar,\nvoid(int,<sp/>char));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testMultipleDefaultParameters(self):</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(int<sp/>a<sp/>=<sp/>42,<sp/>char<sp/>c<sp/>=<sp/>&apos;x&apos;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="191"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="192"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD2(Bar,\nvoid(int,<sp/>char));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testRemovesCommentsWhenDefaultsArePresent(self):</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(int<sp/>a<sp/>=<sp/>42<sp/>/*<sp/>a<sp/>comment<sp/>*/,</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>/*<sp/>other<sp/>comment<sp/>*/<sp/>c=<sp/>&apos;x&apos;)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD2(Bar,\nvoid(int,<sp/>char));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testDoubleSlashCommentsInParameterListAreRemoved(self):</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="213"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(int<sp/>a,<sp/><sp/>//<sp/>inline<sp/>comments<sp/>should<sp/>be<sp/>elided.</highlight></codeline>
<codeline lineno="214"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>b<sp/><sp/><sp/>//<sp/>inline<sp/>comments<sp/>should<sp/>be<sp/>elided.</highlight></codeline>
<codeline lineno="215"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>const<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="217"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_CONST_METHOD2(Bar,\nvoid(int<sp/>a,<sp/>int<sp/>b));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testCStyleCommentsInParameterListAreNotRemoved(self):</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>NOTE(nnorwitz):<sp/>I&apos;m<sp/>not<sp/>sure<sp/>if<sp/>it&apos;s<sp/>the<sp/>best<sp/>behavior<sp/>to<sp/>keep<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>comments.<sp/><sp/>Also<sp/>note<sp/>that<sp/>C<sp/>style<sp/>comments<sp/>after<sp/>the<sp/>last<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>are<sp/>still<sp/>elided.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="229"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>const<sp/>string&amp;<sp/>Bar(int<sp/>/*<sp/>keeper<sp/>*/,<sp/>int<sp/>b);</highlight></codeline>
<codeline lineno="230"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="231"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD2(Bar,\nconst<sp/>string&amp;(int<sp/>/*<sp/>keeper<sp/>*/,<sp/>int<sp/>b));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testArgsOfTemplateTypes(self):</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar(const<sp/>vector&lt;int&gt;&amp;<sp/>v,<sp/>map&lt;int,<sp/>string&gt;*<sp/>output);</highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral">};&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD2(Bar,\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;int(const<sp/>vector&lt;int&gt;&amp;<sp/>v,<sp/>map&lt;int,<sp/>string&gt;*<sp/>output));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testReturnTypeWithOneTemplateArg(self):</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>vector&lt;int&gt;*<sp/>Bar(int<sp/>n);</highlight></codeline>
<codeline lineno="252"><highlight class="stringliteral">};&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD1(Bar,\nvector&lt;int&gt;*(int<sp/>n));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testReturnTypeWithManyTemplateArgs(self):</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="259"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="261"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>map&lt;int,<sp/>string&gt;<sp/>Bar();</highlight></codeline>
<codeline lineno="262"><highlight class="stringliteral">};&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Comparing<sp/>the<sp/>comment<sp/>text<sp/>is<sp/>brittle<sp/>-<sp/>we&apos;ll<sp/>think<sp/>of<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>better<sp/>in<sp/>case<sp/>this<sp/>gets<sp/>annoying,<sp/>but<sp/>for<sp/>now<sp/>let&apos;s<sp/>keep<sp/>it<sp/>simple.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;//<sp/>The<sp/>following<sp/>line<sp/>won\&apos;t<sp/>really<sp/>compile,<sp/>as<sp/>the<sp/>return\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;//<sp/>type<sp/>has<sp/>multiple<sp/>template<sp/>arguments.<sp/><sp/>To<sp/>fix<sp/>it,<sp/>use<sp/>a\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;//<sp/>typedef<sp/>for<sp/>the<sp/>return<sp/>type.\n&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0(Bar,\nmap&lt;int,<sp/>string&gt;());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testSimpleMethodInTemplatedClass(self):</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="274"><highlight class="stringliteral">template&lt;class<sp/>T&gt;</highlight></codeline>
<codeline lineno="275"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="277"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar();</highlight></codeline>
<codeline lineno="278"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="279"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD0_T(Bar,\nint());&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testPointerArgWithoutNames(self):</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="286"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar(C*);</highlight></codeline>
<codeline lineno="288"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="289"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD1(Bar,\nint(C*));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testReferenceArgWithoutNames(self):</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar(C&amp;);</highlight></codeline>
<codeline lineno="298"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="299"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD1(Bar,\nint(C&amp;));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testArrayArgWithoutNames(self):</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="306"><highlight class="stringliteral">class<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>int<sp/>Bar(C[]);</highlight></codeline>
<codeline lineno="308"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="309"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;MOCK_METHOD1(Bar,\nint(C[]));&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_methods_test_1af96a6c9fd394f7e27cf24f86814549c9" kindref="member">GenerateMethodSource</ref>(source))</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test" kindref="compound">GenerateMocksTest</ref>(<ref refid="classcpp_1_1gmock__class__test_1_1_test_case" kindref="compound">TestCase</ref>):</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test_1afdce6749dca14c1aa90762d389d92c87" kindref="member">GenerateMocks</ref>(self,<sp/>cpp_source):</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Convert<sp/>C++<sp/>source<sp/>to<sp/>complete<sp/>Google<sp/>Mock<sp/>output<sp/>source.&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>&lt;test&gt;<sp/>is<sp/>a<sp/>pseudo-filename,<sp/>it<sp/>is<sp/>not<sp/>read<sp/>or<sp/>written.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&lt;test&gt;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>builder<sp/>=<sp/>ast.BuilderFromSource(cpp_source,<sp/>filename)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>ast_list<sp/>=<sp/>list(builder.Generate())</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>lines<sp/>=<sp/>gmock_class._GenerateMocks(filename,<sp/>cpp_source,<sp/>ast_list,<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(lines)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testNamespaces(self):</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="328"><highlight class="stringliteral">namespace<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="stringliteral">namespace<sp/>Bar<sp/>{<sp/>class<sp/>Forward;<sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="stringliteral">namespace<sp/>Baz<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="332"><highlight class="stringliteral">class<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="334"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Foo();</highlight></codeline>
<codeline lineno="335"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="336"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="337"><highlight class="stringliteral">}<sp/><sp/>//<sp/>namespace<sp/>Baz</highlight></codeline>
<codeline lineno="338"><highlight class="stringliteral">}<sp/><sp/>//<sp/>namespace<sp/>Foo</highlight></codeline>
<codeline lineno="339"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="341"><highlight class="stringliteral">namespace<sp/>Foo<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="stringliteral">namespace<sp/>Baz<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="344"><highlight class="stringliteral">class<sp/>MockTest<sp/>:<sp/>public<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="stringliteral">public:</highlight></codeline>
<codeline lineno="346"><highlight class="stringliteral">MOCK_METHOD0(Foo,</highlight></codeline>
<codeline lineno="347"><highlight class="stringliteral">void());</highlight></codeline>
<codeline lineno="348"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="349"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="350"><highlight class="stringliteral">}<sp/><sp/>//<sp/>namespace<sp/>Baz</highlight></codeline>
<codeline lineno="351"><highlight class="stringliteral">}<sp/><sp/>//<sp/>namespace<sp/>Foo</highlight></codeline>
<codeline lineno="352"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test_1afdce6749dca14c1aa90762d389d92c87" kindref="member">GenerateMocks</ref>(source))</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testClassWithStorageSpecifierMacro(self):</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral">class<sp/>STORAGE_SPECIFIER<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Foo();</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="362"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="364"><highlight class="stringliteral">class<sp/>MockTest<sp/>:<sp/>public<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="stringliteral">public:</highlight></codeline>
<codeline lineno="366"><highlight class="stringliteral">MOCK_METHOD0(Foo,</highlight></codeline>
<codeline lineno="367"><highlight class="stringliteral">void());</highlight></codeline>
<codeline lineno="368"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="369"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test_1afdce6749dca14c1aa90762d389d92c87" kindref="member">GenerateMocks</ref>(source))</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testTemplatedForwardDeclaration(self):</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="375"><highlight class="stringliteral">template<sp/>&lt;class<sp/>T&gt;<sp/>class<sp/>Forward;<sp/><sp/>//<sp/>Forward<sp/>declaration<sp/>should<sp/>be<sp/>ignored.</highlight></codeline>
<codeline lineno="376"><highlight class="stringliteral">class<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="378"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Foo();</highlight></codeline>
<codeline lineno="379"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="380"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="382"><highlight class="stringliteral">class<sp/>MockTest<sp/>:<sp/>public<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="stringliteral">public:</highlight></codeline>
<codeline lineno="384"><highlight class="stringliteral">MOCK_METHOD0(Foo,</highlight></codeline>
<codeline lineno="385"><highlight class="stringliteral">void());</highlight></codeline>
<codeline lineno="386"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="387"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test_1afdce6749dca14c1aa90762d389d92c87" kindref="member">GenerateMocks</ref>(source))</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testTemplatedClass(self):</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="393"><highlight class="stringliteral">template<sp/>&lt;typename<sp/>S,<sp/>typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="394"><highlight class="stringliteral">class<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="396"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Foo();</highlight></codeline>
<codeline lineno="397"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="398"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="400"><highlight class="stringliteral">template<sp/>&lt;typename<sp/>T0,<sp/>typename<sp/>T1&gt;</highlight></codeline>
<codeline lineno="401"><highlight class="stringliteral">class<sp/>MockTest<sp/>:<sp/>public<sp/>Test&lt;T0,<sp/>T1&gt;<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="stringliteral">public:</highlight></codeline>
<codeline lineno="403"><highlight class="stringliteral">MOCK_METHOD0_T(Foo,</highlight></codeline>
<codeline lineno="404"><highlight class="stringliteral">void());</highlight></codeline>
<codeline lineno="405"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="406"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test_1afdce6749dca14c1aa90762d389d92c87" kindref="member">GenerateMocks</ref>(source))</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testTemplateInATemplateTypedef(self):</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="412"><highlight class="stringliteral">class<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="414"><highlight class="stringliteral"><sp/><sp/>typedef<sp/>std::vector&lt;std::list&lt;int&gt;&gt;<sp/>FooType;</highlight></codeline>
<codeline lineno="415"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(const<sp/>FooType&amp;<sp/>test_arg);</highlight></codeline>
<codeline lineno="416"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="417"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="419"><highlight class="stringliteral">class<sp/>MockTest<sp/>:<sp/>public<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="stringliteral">public:</highlight></codeline>
<codeline lineno="421"><highlight class="stringliteral">MOCK_METHOD1(Bar,</highlight></codeline>
<codeline lineno="422"><highlight class="stringliteral">void(const<sp/>FooType&amp;<sp/>test_arg));</highlight></codeline>
<codeline lineno="423"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="424"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test_1afdce6749dca14c1aa90762d389d92c87" kindref="member">GenerateMocks</ref>(source))</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">testTemplateInATemplateTypedefWithComma(self):</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>source<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="430"><highlight class="stringliteral">class<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="stringliteral"><sp/>public:</highlight></codeline>
<codeline lineno="432"><highlight class="stringliteral"><sp/><sp/>typedef<sp/>std::function&lt;void(</highlight></codeline>
<codeline lineno="433"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>vector&lt;std::list&lt;int&gt;&gt;&amp;,<sp/>int&gt;<sp/>FooType;</highlight></codeline>
<codeline lineno="434"><highlight class="stringliteral"><sp/><sp/>virtual<sp/>void<sp/>Bar(const<sp/>FooType&amp;<sp/>test_arg);</highlight></codeline>
<codeline lineno="435"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="436"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>expected<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;\</highlight></codeline>
<codeline lineno="438"><highlight class="stringliteral">class<sp/>MockTest<sp/>:<sp/>public<sp/>Test<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="stringliteral">public:</highlight></codeline>
<codeline lineno="440"><highlight class="stringliteral">MOCK_METHOD1(Bar,</highlight></codeline>
<codeline lineno="441"><highlight class="stringliteral">void(const<sp/>FooType&amp;<sp/>test_arg));</highlight></codeline>
<codeline lineno="442"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="443"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_test_case_1a68f88bba11511f8c582123d47bf80464" kindref="member">assertEqualIgnoreLeadingWhitespace</ref>(</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>self.<ref refid="classcpp_1_1gmock__class__test_1_1_generate_mocks_test_1afdce6749dca14c1aa90762d389d92c87" kindref="member">GenerateMocks</ref>(source))</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>__name__<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;__main__&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>unittest.main()</highlight></codeline>
    </programlisting>
    <location file="vendor/googletest/googlemock/scripts/generator/cpp/gmock_class_test.py"/>
  </compounddef>
</doxygen>
